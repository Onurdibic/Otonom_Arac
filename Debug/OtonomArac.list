
OtonomArac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010684  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  08010818  08010818  00020818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112c4  080112c4  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  080112c4  080112c4  000212c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112cc  080112cc  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080112cc  080112cc  000212cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080112d4  080112d4  000212d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080112d8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          0000080c  200001e8  200001e8  000301e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200009f4  200009f4  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d7b9  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000044a8  00000000  00000000  0004da14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001448  00000000  00000000  00051ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fbd  00000000  00000000  00053308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027972  00000000  00000000  000542c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d4b0  00000000  00000000  0007bc37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d57ca  00000000  00000000  000990e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006eb8  00000000  00000000  0016e8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0017576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080107fc 	.word	0x080107fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080107fc 	.word	0x080107fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_frsub>:
 8000c78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	e002      	b.n	8000c84 <__addsf3>
 8000c7e:	bf00      	nop

08000c80 <__aeabi_fsub>:
 8000c80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c84 <__addsf3>:
 8000c84:	0042      	lsls	r2, r0, #1
 8000c86:	bf1f      	itttt	ne
 8000c88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c8c:	ea92 0f03 	teqne	r2, r3
 8000c90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c98:	d06a      	beq.n	8000d70 <__addsf3+0xec>
 8000c9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ca2:	bfc1      	itttt	gt
 8000ca4:	18d2      	addgt	r2, r2, r3
 8000ca6:	4041      	eorgt	r1, r0
 8000ca8:	4048      	eorgt	r0, r1
 8000caa:	4041      	eorgt	r1, r0
 8000cac:	bfb8      	it	lt
 8000cae:	425b      	neglt	r3, r3
 8000cb0:	2b19      	cmp	r3, #25
 8000cb2:	bf88      	it	hi
 8000cb4:	4770      	bxhi	lr
 8000cb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cc2:	bf18      	it	ne
 8000cc4:	4240      	negne	r0, r0
 8000cc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4249      	negne	r1, r1
 8000cd6:	ea92 0f03 	teq	r2, r3
 8000cda:	d03f      	beq.n	8000d5c <__addsf3+0xd8>
 8000cdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ce0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ce4:	eb10 000c 	adds.w	r0, r0, ip
 8000ce8:	f1c3 0320 	rsb	r3, r3, #32
 8000cec:	fa01 f103 	lsl.w	r1, r1, r3
 8000cf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__addsf3+0x78>
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d00:	d313      	bcc.n	8000d2a <__addsf3+0xa6>
 8000d02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d06:	d306      	bcc.n	8000d16 <__addsf3+0x92>
 8000d08:	0840      	lsrs	r0, r0, #1
 8000d0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d0e:	f102 0201 	add.w	r2, r2, #1
 8000d12:	2afe      	cmp	r2, #254	; 0xfe
 8000d14:	d251      	bcs.n	8000dba <__addsf3+0x136>
 8000d16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d1e:	bf08      	it	eq
 8000d20:	f020 0001 	biceq.w	r0, r0, #1
 8000d24:	ea40 0003 	orr.w	r0, r0, r3
 8000d28:	4770      	bx	lr
 8000d2a:	0049      	lsls	r1, r1, #1
 8000d2c:	eb40 0000 	adc.w	r0, r0, r0
 8000d30:	3a01      	subs	r2, #1
 8000d32:	bf28      	it	cs
 8000d34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d38:	d2ed      	bcs.n	8000d16 <__addsf3+0x92>
 8000d3a:	fab0 fc80 	clz	ip, r0
 8000d3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d42:	ebb2 020c 	subs.w	r2, r2, ip
 8000d46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d4a:	bfaa      	itet	ge
 8000d4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d50:	4252      	neglt	r2, r2
 8000d52:	4318      	orrge	r0, r3
 8000d54:	bfbc      	itt	lt
 8000d56:	40d0      	lsrlt	r0, r2
 8000d58:	4318      	orrlt	r0, r3
 8000d5a:	4770      	bx	lr
 8000d5c:	f092 0f00 	teq	r2, #0
 8000d60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d64:	bf06      	itte	eq
 8000d66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d6a:	3201      	addeq	r2, #1
 8000d6c:	3b01      	subne	r3, #1
 8000d6e:	e7b5      	b.n	8000cdc <__addsf3+0x58>
 8000d70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d78:	bf18      	it	ne
 8000d7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d7e:	d021      	beq.n	8000dc4 <__addsf3+0x140>
 8000d80:	ea92 0f03 	teq	r2, r3
 8000d84:	d004      	beq.n	8000d90 <__addsf3+0x10c>
 8000d86:	f092 0f00 	teq	r2, #0
 8000d8a:	bf08      	it	eq
 8000d8c:	4608      	moveq	r0, r1
 8000d8e:	4770      	bx	lr
 8000d90:	ea90 0f01 	teq	r0, r1
 8000d94:	bf1c      	itt	ne
 8000d96:	2000      	movne	r0, #0
 8000d98:	4770      	bxne	lr
 8000d9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d9e:	d104      	bne.n	8000daa <__addsf3+0x126>
 8000da0:	0040      	lsls	r0, r0, #1
 8000da2:	bf28      	it	cs
 8000da4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000da8:	4770      	bx	lr
 8000daa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dae:	bf3c      	itt	cc
 8000db0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000db4:	4770      	bxcc	lr
 8000db6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	4770      	bx	lr
 8000dc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dc8:	bf16      	itet	ne
 8000dca:	4608      	movne	r0, r1
 8000dcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dd0:	4601      	movne	r1, r0
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	bf06      	itte	eq
 8000dd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dda:	ea90 0f01 	teqeq	r0, r1
 8000dde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000de2:	4770      	bx	lr

08000de4 <__aeabi_ui2f>:
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	e004      	b.n	8000df4 <__aeabi_i2f+0x8>
 8000dea:	bf00      	nop

08000dec <__aeabi_i2f>:
 8000dec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000df0:	bf48      	it	mi
 8000df2:	4240      	negmi	r0, r0
 8000df4:	ea5f 0c00 	movs.w	ip, r0
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e00:	4601      	mov	r1, r0
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	e01c      	b.n	8000e42 <__aeabi_l2f+0x2a>

08000e08 <__aeabi_ul2f>:
 8000e08:	ea50 0201 	orrs.w	r2, r0, r1
 8000e0c:	bf08      	it	eq
 8000e0e:	4770      	bxeq	lr
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e00a      	b.n	8000e2c <__aeabi_l2f+0x14>
 8000e16:	bf00      	nop

08000e18 <__aeabi_l2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__aeabi_l2f+0x14>
 8000e26:	4240      	negs	r0, r0
 8000e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e2c:	ea5f 0c01 	movs.w	ip, r1
 8000e30:	bf02      	ittt	eq
 8000e32:	4684      	moveq	ip, r0
 8000e34:	4601      	moveq	r1, r0
 8000e36:	2000      	moveq	r0, #0
 8000e38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e3c:	bf08      	it	eq
 8000e3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e46:	fabc f28c 	clz	r2, ip
 8000e4a:	3a08      	subs	r2, #8
 8000e4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e50:	db10      	blt.n	8000e74 <__aeabi_l2f+0x5c>
 8000e52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e56:	4463      	add	r3, ip
 8000e58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	f020 0001 	biceq.w	r0, r0, #1
 8000e72:	4770      	bx	lr
 8000e74:	f102 0220 	add.w	r2, r2, #32
 8000e78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e84:	fa21 f202 	lsr.w	r2, r1, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_uldivmod>:
 8000e94:	b953      	cbnz	r3, 8000eac <__aeabi_uldivmod+0x18>
 8000e96:	b94a      	cbnz	r2, 8000eac <__aeabi_uldivmod+0x18>
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	bf08      	it	eq
 8000e9c:	2800      	cmpeq	r0, #0
 8000e9e:	bf1c      	itt	ne
 8000ea0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ea4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ea8:	f000 b9a6 	b.w	80011f8 <__aeabi_idiv0>
 8000eac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eb4:	f000 f83c 	bl	8000f30 <__udivmoddi4>
 8000eb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ec0:	b004      	add	sp, #16
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_d2lz>:
 8000ec4:	b538      	push	{r3, r4, r5, lr}
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4604      	mov	r4, r0
 8000ecc:	460d      	mov	r5, r1
 8000ece:	f7ff fdfd 	bl	8000acc <__aeabi_dcmplt>
 8000ed2:	b928      	cbnz	r0, 8000ee0 <__aeabi_d2lz+0x1c>
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000edc:	f000 b80a 	b.w	8000ef4 <__aeabi_d2ulz>
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ee6:	f000 f805 	bl	8000ef4 <__aeabi_d2ulz>
 8000eea:	4240      	negs	r0, r0
 8000eec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_d2ulz>:
 8000ef4:	b5d0      	push	{r4, r6, r7, lr}
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__aeabi_d2ulz+0x34>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4606      	mov	r6, r0
 8000efc:	460f      	mov	r7, r1
 8000efe:	f7ff fb73 	bl	80005e8 <__aeabi_dmul>
 8000f02:	f7ff fe49 	bl	8000b98 <__aeabi_d2uiz>
 8000f06:	4604      	mov	r4, r0
 8000f08:	f7ff faf4 	bl	80004f4 <__aeabi_ui2d>
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <__aeabi_d2ulz+0x38>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f7ff fb6a 	bl	80005e8 <__aeabi_dmul>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4630      	mov	r0, r6
 8000f1a:	4639      	mov	r1, r7
 8000f1c:	f7ff f9ac 	bl	8000278 <__aeabi_dsub>
 8000f20:	f7ff fe3a 	bl	8000b98 <__aeabi_d2uiz>
 8000f24:	4621      	mov	r1, r4
 8000f26:	bdd0      	pop	{r4, r6, r7, pc}
 8000f28:	3df00000 	.word	0x3df00000
 8000f2c:	41f00000 	.word	0x41f00000

08000f30 <__udivmoddi4>:
 8000f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f34:	9e08      	ldr	r6, [sp, #32]
 8000f36:	460d      	mov	r5, r1
 8000f38:	4604      	mov	r4, r0
 8000f3a:	460f      	mov	r7, r1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d14a      	bne.n	8000fd6 <__udivmoddi4+0xa6>
 8000f40:	428a      	cmp	r2, r1
 8000f42:	4694      	mov	ip, r2
 8000f44:	d965      	bls.n	8001012 <__udivmoddi4+0xe2>
 8000f46:	fab2 f382 	clz	r3, r2
 8000f4a:	b143      	cbz	r3, 8000f5e <__udivmoddi4+0x2e>
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	f1c3 0220 	rsb	r2, r3, #32
 8000f54:	409f      	lsls	r7, r3
 8000f56:	fa20 f202 	lsr.w	r2, r0, r2
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	409c      	lsls	r4, r3
 8000f5e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f62:	fa1f f58c 	uxth.w	r5, ip
 8000f66:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f6a:	0c22      	lsrs	r2, r4, #16
 8000f6c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f70:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f74:	fb01 f005 	mul.w	r0, r1, r5
 8000f78:	4290      	cmp	r0, r2
 8000f7a:	d90a      	bls.n	8000f92 <__udivmoddi4+0x62>
 8000f7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f84:	f080 811c 	bcs.w	80011c0 <__udivmoddi4+0x290>
 8000f88:	4290      	cmp	r0, r2
 8000f8a:	f240 8119 	bls.w	80011c0 <__udivmoddi4+0x290>
 8000f8e:	3902      	subs	r1, #2
 8000f90:	4462      	add	r2, ip
 8000f92:	1a12      	subs	r2, r2, r0
 8000f94:	b2a4      	uxth	r4, r4
 8000f96:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f9a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fa2:	fb00 f505 	mul.w	r5, r0, r5
 8000fa6:	42a5      	cmp	r5, r4
 8000fa8:	d90a      	bls.n	8000fc0 <__udivmoddi4+0x90>
 8000faa:	eb1c 0404 	adds.w	r4, ip, r4
 8000fae:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fb2:	f080 8107 	bcs.w	80011c4 <__udivmoddi4+0x294>
 8000fb6:	42a5      	cmp	r5, r4
 8000fb8:	f240 8104 	bls.w	80011c4 <__udivmoddi4+0x294>
 8000fbc:	4464      	add	r4, ip
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	b11e      	cbz	r6, 8000fd2 <__udivmoddi4+0xa2>
 8000fca:	40dc      	lsrs	r4, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e9c6 4300 	strd	r4, r3, [r6]
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d908      	bls.n	8000fec <__udivmoddi4+0xbc>
 8000fda:	2e00      	cmp	r6, #0
 8000fdc:	f000 80ed 	beq.w	80011ba <__udivmoddi4+0x28a>
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	e9c6 0500 	strd	r0, r5, [r6]
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fec:	fab3 f183 	clz	r1, r3
 8000ff0:	2900      	cmp	r1, #0
 8000ff2:	d149      	bne.n	8001088 <__udivmoddi4+0x158>
 8000ff4:	42ab      	cmp	r3, r5
 8000ff6:	d302      	bcc.n	8000ffe <__udivmoddi4+0xce>
 8000ff8:	4282      	cmp	r2, r0
 8000ffa:	f200 80f8 	bhi.w	80011ee <__udivmoddi4+0x2be>
 8000ffe:	1a84      	subs	r4, r0, r2
 8001000:	eb65 0203 	sbc.w	r2, r5, r3
 8001004:	2001      	movs	r0, #1
 8001006:	4617      	mov	r7, r2
 8001008:	2e00      	cmp	r6, #0
 800100a:	d0e2      	beq.n	8000fd2 <__udivmoddi4+0xa2>
 800100c:	e9c6 4700 	strd	r4, r7, [r6]
 8001010:	e7df      	b.n	8000fd2 <__udivmoddi4+0xa2>
 8001012:	b902      	cbnz	r2, 8001016 <__udivmoddi4+0xe6>
 8001014:	deff      	udf	#255	; 0xff
 8001016:	fab2 f382 	clz	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 8090 	bne.w	8001140 <__udivmoddi4+0x210>
 8001020:	1a8a      	subs	r2, r1, r2
 8001022:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001026:	fa1f fe8c 	uxth.w	lr, ip
 800102a:	2101      	movs	r1, #1
 800102c:	fbb2 f5f7 	udiv	r5, r2, r7
 8001030:	fb07 2015 	mls	r0, r7, r5, r2
 8001034:	0c22      	lsrs	r2, r4, #16
 8001036:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800103a:	fb0e f005 	mul.w	r0, lr, r5
 800103e:	4290      	cmp	r0, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x124>
 8001042:	eb1c 0202 	adds.w	r2, ip, r2
 8001046:	f105 38ff 	add.w	r8, r5, #4294967295
 800104a:	d202      	bcs.n	8001052 <__udivmoddi4+0x122>
 800104c:	4290      	cmp	r0, r2
 800104e:	f200 80cb 	bhi.w	80011e8 <__udivmoddi4+0x2b8>
 8001052:	4645      	mov	r5, r8
 8001054:	1a12      	subs	r2, r2, r0
 8001056:	b2a4      	uxth	r4, r4
 8001058:	fbb2 f0f7 	udiv	r0, r2, r7
 800105c:	fb07 2210 	mls	r2, r7, r0, r2
 8001060:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001064:	fb0e fe00 	mul.w	lr, lr, r0
 8001068:	45a6      	cmp	lr, r4
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x14e>
 800106c:	eb1c 0404 	adds.w	r4, ip, r4
 8001070:	f100 32ff 	add.w	r2, r0, #4294967295
 8001074:	d202      	bcs.n	800107c <__udivmoddi4+0x14c>
 8001076:	45a6      	cmp	lr, r4
 8001078:	f200 80bb 	bhi.w	80011f2 <__udivmoddi4+0x2c2>
 800107c:	4610      	mov	r0, r2
 800107e:	eba4 040e 	sub.w	r4, r4, lr
 8001082:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001086:	e79f      	b.n	8000fc8 <__udivmoddi4+0x98>
 8001088:	f1c1 0720 	rsb	r7, r1, #32
 800108c:	408b      	lsls	r3, r1
 800108e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001092:	ea4c 0c03 	orr.w	ip, ip, r3
 8001096:	fa05 f401 	lsl.w	r4, r5, r1
 800109a:	fa20 f307 	lsr.w	r3, r0, r7
 800109e:	40fd      	lsrs	r5, r7
 80010a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010a4:	4323      	orrs	r3, r4
 80010a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80010aa:	fa1f fe8c 	uxth.w	lr, ip
 80010ae:	fb09 5518 	mls	r5, r9, r8, r5
 80010b2:	0c1c      	lsrs	r4, r3, #16
 80010b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010b8:	fb08 f50e 	mul.w	r5, r8, lr
 80010bc:	42a5      	cmp	r5, r4
 80010be:	fa02 f201 	lsl.w	r2, r2, r1
 80010c2:	fa00 f001 	lsl.w	r0, r0, r1
 80010c6:	d90b      	bls.n	80010e0 <__udivmoddi4+0x1b0>
 80010c8:	eb1c 0404 	adds.w	r4, ip, r4
 80010cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80010d0:	f080 8088 	bcs.w	80011e4 <__udivmoddi4+0x2b4>
 80010d4:	42a5      	cmp	r5, r4
 80010d6:	f240 8085 	bls.w	80011e4 <__udivmoddi4+0x2b4>
 80010da:	f1a8 0802 	sub.w	r8, r8, #2
 80010de:	4464      	add	r4, ip
 80010e0:	1b64      	subs	r4, r4, r5
 80010e2:	b29d      	uxth	r5, r3
 80010e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80010e8:	fb09 4413 	mls	r4, r9, r3, r4
 80010ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80010f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80010f4:	45a6      	cmp	lr, r4
 80010f6:	d908      	bls.n	800110a <__udivmoddi4+0x1da>
 80010f8:	eb1c 0404 	adds.w	r4, ip, r4
 80010fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8001100:	d26c      	bcs.n	80011dc <__udivmoddi4+0x2ac>
 8001102:	45a6      	cmp	lr, r4
 8001104:	d96a      	bls.n	80011dc <__udivmoddi4+0x2ac>
 8001106:	3b02      	subs	r3, #2
 8001108:	4464      	add	r4, ip
 800110a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800110e:	fba3 9502 	umull	r9, r5, r3, r2
 8001112:	eba4 040e 	sub.w	r4, r4, lr
 8001116:	42ac      	cmp	r4, r5
 8001118:	46c8      	mov	r8, r9
 800111a:	46ae      	mov	lr, r5
 800111c:	d356      	bcc.n	80011cc <__udivmoddi4+0x29c>
 800111e:	d053      	beq.n	80011c8 <__udivmoddi4+0x298>
 8001120:	b156      	cbz	r6, 8001138 <__udivmoddi4+0x208>
 8001122:	ebb0 0208 	subs.w	r2, r0, r8
 8001126:	eb64 040e 	sbc.w	r4, r4, lr
 800112a:	fa04 f707 	lsl.w	r7, r4, r7
 800112e:	40ca      	lsrs	r2, r1
 8001130:	40cc      	lsrs	r4, r1
 8001132:	4317      	orrs	r7, r2
 8001134:	e9c6 7400 	strd	r7, r4, [r6]
 8001138:	4618      	mov	r0, r3
 800113a:	2100      	movs	r1, #0
 800113c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001140:	f1c3 0120 	rsb	r1, r3, #32
 8001144:	fa02 fc03 	lsl.w	ip, r2, r3
 8001148:	fa20 f201 	lsr.w	r2, r0, r1
 800114c:	fa25 f101 	lsr.w	r1, r5, r1
 8001150:	409d      	lsls	r5, r3
 8001152:	432a      	orrs	r2, r5
 8001154:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001158:	fa1f fe8c 	uxth.w	lr, ip
 800115c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001160:	fb07 1510 	mls	r5, r7, r0, r1
 8001164:	0c11      	lsrs	r1, r2, #16
 8001166:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800116a:	fb00 f50e 	mul.w	r5, r0, lr
 800116e:	428d      	cmp	r5, r1
 8001170:	fa04 f403 	lsl.w	r4, r4, r3
 8001174:	d908      	bls.n	8001188 <__udivmoddi4+0x258>
 8001176:	eb1c 0101 	adds.w	r1, ip, r1
 800117a:	f100 38ff 	add.w	r8, r0, #4294967295
 800117e:	d22f      	bcs.n	80011e0 <__udivmoddi4+0x2b0>
 8001180:	428d      	cmp	r5, r1
 8001182:	d92d      	bls.n	80011e0 <__udivmoddi4+0x2b0>
 8001184:	3802      	subs	r0, #2
 8001186:	4461      	add	r1, ip
 8001188:	1b49      	subs	r1, r1, r5
 800118a:	b292      	uxth	r2, r2
 800118c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001190:	fb07 1115 	mls	r1, r7, r5, r1
 8001194:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001198:	fb05 f10e 	mul.w	r1, r5, lr
 800119c:	4291      	cmp	r1, r2
 800119e:	d908      	bls.n	80011b2 <__udivmoddi4+0x282>
 80011a0:	eb1c 0202 	adds.w	r2, ip, r2
 80011a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80011a8:	d216      	bcs.n	80011d8 <__udivmoddi4+0x2a8>
 80011aa:	4291      	cmp	r1, r2
 80011ac:	d914      	bls.n	80011d8 <__udivmoddi4+0x2a8>
 80011ae:	3d02      	subs	r5, #2
 80011b0:	4462      	add	r2, ip
 80011b2:	1a52      	subs	r2, r2, r1
 80011b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80011b8:	e738      	b.n	800102c <__udivmoddi4+0xfc>
 80011ba:	4631      	mov	r1, r6
 80011bc:	4630      	mov	r0, r6
 80011be:	e708      	b.n	8000fd2 <__udivmoddi4+0xa2>
 80011c0:	4639      	mov	r1, r7
 80011c2:	e6e6      	b.n	8000f92 <__udivmoddi4+0x62>
 80011c4:	4610      	mov	r0, r2
 80011c6:	e6fb      	b.n	8000fc0 <__udivmoddi4+0x90>
 80011c8:	4548      	cmp	r0, r9
 80011ca:	d2a9      	bcs.n	8001120 <__udivmoddi4+0x1f0>
 80011cc:	ebb9 0802 	subs.w	r8, r9, r2
 80011d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80011d4:	3b01      	subs	r3, #1
 80011d6:	e7a3      	b.n	8001120 <__udivmoddi4+0x1f0>
 80011d8:	4645      	mov	r5, r8
 80011da:	e7ea      	b.n	80011b2 <__udivmoddi4+0x282>
 80011dc:	462b      	mov	r3, r5
 80011de:	e794      	b.n	800110a <__udivmoddi4+0x1da>
 80011e0:	4640      	mov	r0, r8
 80011e2:	e7d1      	b.n	8001188 <__udivmoddi4+0x258>
 80011e4:	46d0      	mov	r8, sl
 80011e6:	e77b      	b.n	80010e0 <__udivmoddi4+0x1b0>
 80011e8:	3d02      	subs	r5, #2
 80011ea:	4462      	add	r2, ip
 80011ec:	e732      	b.n	8001054 <__udivmoddi4+0x124>
 80011ee:	4608      	mov	r0, r1
 80011f0:	e70a      	b.n	8001008 <__udivmoddi4+0xd8>
 80011f2:	4464      	add	r4, ip
 80011f4:	3802      	subs	r0, #2
 80011f6:	e742      	b.n	800107e <__udivmoddi4+0x14e>

080011f8 <__aeabi_idiv0>:
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	4bae      	ldr	r3, [pc, #696]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4aad      	ldr	r2, [pc, #692]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4bab      	ldr	r3, [pc, #684]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	4ba7      	ldr	r3, [pc, #668]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4aa6      	ldr	r2, [pc, #664]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4ba4      	ldr	r3, [pc, #656]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4ba0      	ldr	r3, [pc, #640]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a9f      	ldr	r2, [pc, #636]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b9d      	ldr	r3, [pc, #628]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b99      	ldr	r3, [pc, #612]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a98      	ldr	r2, [pc, #608]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b96      	ldr	r3, [pc, #600]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b92      	ldr	r3, [pc, #584]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a91      	ldr	r2, [pc, #580]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b8f      	ldr	r3, [pc, #572]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b8b      	ldr	r3, [pc, #556]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a8a      	ldr	r2, [pc, #552]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b88      	ldr	r3, [pc, #544]	; (80014d0 <MX_GPIO_Init+0x2d4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2108      	movs	r1, #8
 80012be:	4885      	ldr	r0, [pc, #532]	; (80014d4 <MX_GPIO_Init+0x2d8>)
 80012c0:	f004 fd84 	bl	8005dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2101      	movs	r1, #1
 80012c8:	4883      	ldr	r0, [pc, #524]	; (80014d8 <MX_GPIO_Init+0x2dc>)
 80012ca:	f004 fd7f 	bl	8005dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012ce:	2200      	movs	r2, #0
 80012d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80012d4:	4881      	ldr	r0, [pc, #516]	; (80014dc <MX_GPIO_Init+0x2e0>)
 80012d6:	f004 fd79 	bl	8005dcc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2130      	movs	r1, #48	; 0x30
 80012de:	4880      	ldr	r0, [pc, #512]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 80012e0:	f004 fd74 	bl	8005dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012e4:	2308      	movs	r3, #8
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	4876      	ldr	r0, [pc, #472]	; (80014d4 <MX_GPIO_Init+0x2d8>)
 80012fc:	f004 fbca 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	4870      	ldr	r0, [pc, #448]	; (80014d8 <MX_GPIO_Init+0x2dc>)
 8001318:	f004 fbbc 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800131c:	2308      	movs	r3, #8
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800132c:	2305      	movs	r3, #5
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4868      	ldr	r0, [pc, #416]	; (80014d8 <MX_GPIO_Init+0x2dc>)
 8001338:	f004 fbac 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800133c:	2301      	movs	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001340:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4864      	ldr	r0, [pc, #400]	; (80014e4 <MX_GPIO_Init+0x2e8>)
 8001352:	f004 fb9f 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001356:	2310      	movs	r3, #16
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001366:	2306      	movs	r3, #6
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	485c      	ldr	r0, [pc, #368]	; (80014e4 <MX_GPIO_Init+0x2e8>)
 8001372:	f004 fb8f 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001376:	23e0      	movs	r3, #224	; 0xe0
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001386:	2305      	movs	r3, #5
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	4854      	ldr	r0, [pc, #336]	; (80014e4 <MX_GPIO_Init+0x2e8>)
 8001392:	f004 fb7f 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001396:	2304      	movs	r3, #4
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	484d      	ldr	r0, [pc, #308]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 80013aa:	f004 fb73 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80013ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4843      	ldr	r0, [pc, #268]	; (80014d4 <MX_GPIO_Init+0x2d8>)
 80013c6:	f004 fb65 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d0:	2312      	movs	r3, #18
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013dc:	2304      	movs	r3, #4
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	483e      	ldr	r0, [pc, #248]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 80013e8:	f004 fb54 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013ec:	f24f 0310 	movw	r3, #61456	; 0xf010
 80013f0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4619      	mov	r1, r3
 8001404:	4835      	ldr	r0, [pc, #212]	; (80014dc <MX_GPIO_Init+0x2e0>)
 8001406:	f004 fb45 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800140a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800141c:	2306      	movs	r3, #6
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	482c      	ldr	r0, [pc, #176]	; (80014d8 <MX_GPIO_Init+0x2dc>)
 8001428:	f004 fb34 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800142c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	4828      	ldr	r0, [pc, #160]	; (80014e4 <MX_GPIO_Init+0x2e8>)
 8001442:	f004 fb27 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001446:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001458:	230a      	movs	r3, #10
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	4820      	ldr	r0, [pc, #128]	; (80014e4 <MX_GPIO_Init+0x2e8>)
 8001464:	f004 fb16 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001468:	2320      	movs	r3, #32
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4818      	ldr	r0, [pc, #96]	; (80014dc <MX_GPIO_Init+0x2e0>)
 800147c:	f004 fb0a 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001480:	2330      	movs	r3, #48	; 0x30
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <MX_GPIO_Init+0x2e4>)
 8001498:	f004 fafc 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800149c:	2302      	movs	r3, #2
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014a0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <MX_GPIO_Init+0x2d8>)
 80014b2:	f004 faef 	bl	8005a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2017      	movs	r0, #23
 80014bc:	f004 fa21 	bl	8005902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014c0:	2017      	movs	r0, #23
 80014c2:	f004 fa3a 	bl	800593a <HAL_NVIC_EnableIRQ>

}
 80014c6:	bf00      	nop
 80014c8:	3730      	adds	r7, #48	; 0x30
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020000 	.word	0x40020000

080014e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_I2C1_Init+0x50>)
 80014ee:	4a13      	ldr	r2, [pc, #76]	; (800153c <MX_I2C1_Init+0x54>)
 80014f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_I2C1_Init+0x50>)
 80014f4:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_I2C1_Init+0x58>)
 80014f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_I2C1_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_I2C1_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_I2C1_Init+0x50>)
 8001506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <MX_I2C1_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_I2C1_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <MX_I2C1_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_I2C1_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <MX_I2C1_Init+0x50>)
 8001526:	f004 fc8f 	bl	8005e48 <HAL_I2C_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001530:	f000 fe40 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000204 	.word	0x20000204
 800153c:	40005400 	.word	0x40005400
 8001540:	000186a0 	.word	0x000186a0

08001544 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <HAL_I2C_MspInit+0x84>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d12c      	bne.n	80015c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_I2C_MspInit+0x88>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a17      	ldr	r2, [pc, #92]	; (80015cc <HAL_I2C_MspInit+0x88>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_I2C_MspInit+0x88>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001582:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001588:	2312      	movs	r3, #18
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158c:	2301      	movs	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001594:	2304      	movs	r3, #4
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	480c      	ldr	r0, [pc, #48]	; (80015d0 <HAL_I2C_MspInit+0x8c>)
 80015a0:	f004 fa78 	bl	8005a94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_I2C_MspInit+0x88>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_I2C_MspInit+0x88>)
 80015ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_I2C_MspInit+0x88>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40005400 	.word	0x40005400
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020400 	.word	0x40020400

080015d4 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d106      	bne.n	80015f6 <prv_parse_number+0x22>
        t = gh->p.term_str;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3371      	adds	r3, #113	; 0x71
 80015ec:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80015ee:	e002      	b.n	80015f6 <prv_parse_number+0x22>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <prv_parse_number+0x30>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b20      	cmp	r3, #32
 8001602:	d0f5      	beq.n	80015f0 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b2d      	cmp	r3, #45	; 0x2d
 800160a:	d104      	bne.n	8001616 <prv_parse_number+0x42>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <prv_parse_number+0x44>
 8001616:	2300      	movs	r3, #0
 8001618:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 800161a:	e00d      	b.n	8001638 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	461a      	mov	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	3b30      	subs	r3, #48	; 0x30
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <prv_parse_number+0x7a>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b2f      	cmp	r3, #47	; 0x2f
 8001644:	d903      	bls.n	800164e <prv_parse_number+0x7a>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b39      	cmp	r3, #57	; 0x39
 800164c:	d9e6      	bls.n	800161c <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <prv_parse_number+0x86>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	425b      	negs	r3, r3
 8001658:	e000      	b.n	800165c <prv_parse_number+0x88>
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d106      	bne.n	8001686 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3371      	adds	r3, #113	; 0x71
 800167c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800167e:	e002      	b.n	8001686 <prv_parse_float_number+0x1e>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <prv_parse_float_number+0x2c>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b20      	cmp	r3, #32
 8001692:	d0f5      	beq.n	8001680 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8001694:	2100      	movs	r1, #0
 8001696:	6838      	ldr	r0, [r7, #0]
 8001698:	f00d f8a2 	bl	800e7e0 <strtod>
 800169c:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80016a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80016a8:	eeb0 0a47 	vmov.f32	s0, s14
 80016ac:	eef0 0a67 	vmov.f32	s1, s15
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 80016c0:	2100      	movs	r1, #0
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffd0 	bl	8001668 <prv_parse_float_number>
 80016c8:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 80016cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016d0:	f7ff fa3a 	bl	8000b48 <__aeabi_d2iz>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a1d      	ldr	r2, [pc, #116]	; (800174c <prv_parse_lat_long+0x94>)
 80016d8:	fb82 1203 	smull	r1, r2, r2, r3
 80016dc:	1152      	asrs	r2, r2, #5
 80016de:	17db      	asrs	r3, r3, #31
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff16 	bl	8000514 <__aeabi_i2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <prv_parse_lat_long+0x98>)
 80016f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016fa:	f7fe ff75 	bl	80005e8 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001706:	f7fe fdb7 	bl	8000278 <__aeabi_dsub>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <prv_parse_lat_long+0x9c>)
 8001718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800171c:	f7ff f88e 	bl	800083c <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001728:	f7fe fda8 	bl	800027c <__adddf3>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001738:	ec43 2b17 	vmov	d7, r2, r3
}
 800173c:	eeb0 0a47 	vmov.f32	s0, s14
 8001740:	eef0 0a67 	vmov.f32	s1, s15
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	51eb851f 	.word	0x51eb851f
 8001750:	40590000 	.word	0x40590000
 8001754:	404e0000 	.word	0x404e0000

08001758 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8001758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001768:	2900      	cmp	r1, #0
 800176a:	d169      	bne.n	8001840 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3371      	adds	r3, #113	; 0x71
 8001770:	2206      	movs	r2, #6
 8001772:	49ba      	ldr	r1, [pc, #744]	; (8001a5c <prv_parse_term+0x304>)
 8001774:	4618      	mov	r0, r3
 8001776:	f00d f94c 	bl	800ea12 <strncmp>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <prv_parse_term+0x3c>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3371      	adds	r3, #113	; 0x71
 8001784:	2206      	movs	r2, #6
 8001786:	49b6      	ldr	r1, [pc, #728]	; (8001a60 <prv_parse_term+0x308>)
 8001788:	4618      	mov	r0, r3
 800178a:	f00d f942 	bl	800ea12 <strncmp>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d104      	bne.n	800179e <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800179c:	e04e      	b.n	800183c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3371      	adds	r3, #113	; 0x71
 80017a2:	2206      	movs	r2, #6
 80017a4:	49af      	ldr	r1, [pc, #700]	; (8001a64 <prv_parse_term+0x30c>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00d f933 	bl	800ea12 <strncmp>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <prv_parse_term+0x6e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3371      	adds	r3, #113	; 0x71
 80017b6:	2206      	movs	r2, #6
 80017b8:	49ab      	ldr	r1, [pc, #684]	; (8001a68 <prv_parse_term+0x310>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00d f929 	bl	800ea12 <strncmp>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d104      	bne.n	80017d0 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80017ce:	e035      	b.n	800183c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3371      	adds	r3, #113	; 0x71
 80017d4:	2206      	movs	r2, #6
 80017d6:	49a5      	ldr	r1, [pc, #660]	; (8001a6c <prv_parse_term+0x314>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f00d f91a 	bl	800ea12 <strncmp>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d009      	beq.n	80017f8 <prv_parse_term+0xa0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3371      	adds	r3, #113	; 0x71
 80017e8:	2206      	movs	r2, #6
 80017ea:	49a1      	ldr	r1, [pc, #644]	; (8001a70 <prv_parse_term+0x318>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00d f910 	bl	800ea12 <strncmp>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d104      	bne.n	8001802 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2203      	movs	r2, #3
 80017fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001800:	e01c      	b.n	800183c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3371      	adds	r3, #113	; 0x71
 8001806:	2206      	movs	r2, #6
 8001808:	499a      	ldr	r1, [pc, #616]	; (8001a74 <prv_parse_term+0x31c>)
 800180a:	4618      	mov	r0, r3
 800180c:	f00d f901 	bl	800ea12 <strncmp>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <prv_parse_term+0xd2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3371      	adds	r3, #113	; 0x71
 800181a:	2206      	movs	r2, #6
 800181c:	4996      	ldr	r1, [pc, #600]	; (8001a78 <prv_parse_term+0x320>)
 800181e:	4618      	mov	r0, r3
 8001820:	f00d f8f7 	bl	800ea12 <strncmp>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d104      	bne.n	8001834 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2204      	movs	r2, #4
 800182e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001832:	e003      	b.n	800183c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 800183c:	2301      	movs	r3, #1
 800183e:	e231      	b.n	8001ca4 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001846:	2900      	cmp	r1, #0
 8001848:	f000 822b 	beq.w	8001ca2 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001852:	2901      	cmp	r1, #1
 8001854:	f040 80c9 	bne.w	80019ea <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800185e:	3b01      	subs	r3, #1
 8001860:	2b0a      	cmp	r3, #10
 8001862:	f200 8213 	bhi.w	8001c8c <prv_parse_term+0x534>
 8001866:	a201      	add	r2, pc, #4	; (adr r2, 800186c <prv_parse_term+0x114>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	08001899 	.word	0x08001899
 8001870:	08001913 	.word	0x08001913
 8001874:	08001929 	.word	0x08001929
 8001878:	08001953 	.word	0x08001953
 800187c:	08001969 	.word	0x08001969
 8001880:	08001993 	.word	0x08001993
 8001884:	080019a7 	.word	0x080019a7
 8001888:	08001c8d 	.word	0x08001c8d
 800188c:	080019bb 	.word	0x080019bb
 8001890:	08001c8d 	.word	0x08001c8d
 8001894:	080019d3 	.word	0x080019d3
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800189e:	3b30      	subs	r3, #48	; 0x30
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80018b2:	4413      	add	r3, r2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3b30      	subs	r3, #48	; 0x30
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80018c6:	3b30      	subs	r3, #48	; 0x30
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	0092      	lsls	r2, r2, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80018da:	4413      	add	r3, r2
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	3b30      	subs	r3, #48	; 0x30
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80018ee:	3b30      	subs	r3, #48	; 0x30
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	461a      	mov	r2, r3
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001902:	4413      	add	r3, r2
 8001904:	b2db      	uxtb	r3, r3
 8001906:	3b30      	subs	r3, #48	; 0x30
 8001908:	b2da      	uxtb	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8001910:	e1c7      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fed0 	bl	80016b8 <prv_parse_lat_long>
 8001918:	eeb0 7a40 	vmov.f32	s14, s0
 800191c:	eef0 7a60 	vmov.f32	s15, s1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001926:	e1bc      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800192e:	2b53      	cmp	r3, #83	; 0x53
 8001930:	d005      	beq.n	800193e <prv_parse_term+0x1e6>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001938:	2b73      	cmp	r3, #115	; 0x73
 800193a:	f040 81a9 	bne.w	8001c90 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001944:	4690      	mov	r8, r2
 8001946:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8001950:	e19e      	b.n	8001c90 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff feb0 	bl	80016b8 <prv_parse_lat_long>
 8001958:	eeb0 7a40 	vmov.f32	s14, s0
 800195c:	eef0 7a60 	vmov.f32	s15, s1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001966:	e19c      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800196e:	2b57      	cmp	r3, #87	; 0x57
 8001970:	d005      	beq.n	800197e <prv_parse_term+0x226>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001978:	2b77      	cmp	r3, #119	; 0x77
 800197a:	f040 818b 	bne.w	8001c94 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001984:	4614      	mov	r4, r2
 8001986:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8001990:	e180      	b.n	8001c94 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8001992:	2100      	movs	r1, #0
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff fe1d 	bl	80015d4 <prv_parse_number>
 800199a:	4603      	mov	r3, r0
 800199c:	b2da      	uxtb	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 80019a4:	e17d      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80019a6:	2100      	movs	r1, #0
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fe13 	bl	80015d4 <prv_parse_number>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 80019b8:	e173      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 80019ba:	2100      	movs	r1, #0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fe53 	bl	8001668 <prv_parse_float_number>
 80019c2:	eeb0 7a40 	vmov.f32	s14, s0
 80019c6:	eef0 7a60 	vmov.f32	s15, s1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80019d0:	e167      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 80019d2:	2100      	movs	r1, #0
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff fe47 	bl	8001668 <prv_parse_float_number>
 80019da:	eeb0 7a40 	vmov.f32	s14, s0
 80019de:	eef0 7a60 	vmov.f32	s15, s1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80019e8:	e15b      	b.n	8001ca2 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80019f0:	2902      	cmp	r1, #2
 80019f2:	f040 8083 	bne.w	8001afc <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80019fc:	3b02      	subs	r3, #2
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	d860      	bhi.n	8001ac4 <prv_parse_term+0x36c>
 8001a02:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <prv_parse_term+0x2b0>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a49 	.word	0x08001a49
 8001a0c:	08001ac5 	.word	0x08001ac5
 8001a10:	08001ac5 	.word	0x08001ac5
 8001a14:	08001ac5 	.word	0x08001ac5
 8001a18:	08001ac5 	.word	0x08001ac5
 8001a1c:	08001ac5 	.word	0x08001ac5
 8001a20:	08001ac5 	.word	0x08001ac5
 8001a24:	08001ac5 	.word	0x08001ac5
 8001a28:	08001ac5 	.word	0x08001ac5
 8001a2c:	08001ac5 	.word	0x08001ac5
 8001a30:	08001ac5 	.word	0x08001ac5
 8001a34:	08001ac5 	.word	0x08001ac5
 8001a38:	08001ac5 	.word	0x08001ac5
 8001a3c:	08001a7d 	.word	0x08001a7d
 8001a40:	08001a95 	.word	0x08001a95
 8001a44:	08001aad 	.word	0x08001aad
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fdc2 	bl	80015d4 <prv_parse_number>
 8001a50:	4603      	mov	r3, r0
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 8001a5a:	e122      	b.n	8001ca2 <prv_parse_term+0x54a>
 8001a5c:	08010818 	.word	0x08010818
 8001a60:	08010820 	.word	0x08010820
 8001a64:	08010828 	.word	0x08010828
 8001a68:	08010830 	.word	0x08010830
 8001a6c:	08010838 	.word	0x08010838
 8001a70:	08010840 	.word	0x08010840
 8001a74:	08010848 	.word	0x08010848
 8001a78:	08010850 	.word	0x08010850
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fdf2 	bl	8001668 <prv_parse_float_number>
 8001a84:	eeb0 7a40 	vmov.f32	s14, s0
 8001a88:	eef0 7a60 	vmov.f32	s15, s1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001a92:	e106      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8001a94:	2100      	movs	r1, #0
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fde6 	bl	8001668 <prv_parse_float_number>
 8001a9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001aa0:	eef0 7a60 	vmov.f32	s15, s1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001aaa:	e0fa      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8001aac:	2100      	movs	r1, #0
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fdda 	bl	8001668 <prv_parse_float_number>
 8001ab4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ab8:	eef0 7a60 	vmov.f32	s15, s1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001ac2:	e0ee      	b.n	8001ca2 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	f240 80e4 	bls.w	8001c98 <prv_parse_term+0x540>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001ad6:	2b0e      	cmp	r3, #14
 8001ad8:	f200 80de 	bhi.w	8001c98 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8001adc:	2100      	movs	r1, #0
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fd78 	bl	80015d4 <prv_parse_number>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001aec:	3b03      	subs	r3, #3
 8001aee:	b2d1      	uxtb	r1, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	460a      	mov	r2, r1
 8001af6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8001afa:	e0cd      	b.n	8001c98 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001b02:	2903      	cmp	r1, #3
 8001b04:	d11b      	bne.n	8001b3e <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d002      	beq.n	8001b16 <prv_parse_term+0x3be>
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d00a      	beq.n	8001b2a <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001b14:	e0c5      	b.n	8001ca2 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001b16:	2100      	movs	r1, #0
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fd5b 	bl	80015d4 <prv_parse_number>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8001b28:	e0bb      	b.n	8001ca2 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fd51 	bl	80015d4 <prv_parse_number>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001b3c:	e0b1      	b.n	8001ca2 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001b44:	2904      	cmp	r1, #4
 8001b46:	f040 80ac 	bne.w	8001ca2 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001b50:	3902      	subs	r1, #2
 8001b52:	2909      	cmp	r1, #9
 8001b54:	f200 80a2 	bhi.w	8001c9c <prv_parse_term+0x544>
 8001b58:	a001      	add	r0, pc, #4	; (adr r0, 8001b60 <prv_parse_term+0x408>)
 8001b5a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001b89 	.word	0x08001b89
 8001b64:	08001c9d 	.word	0x08001c9d
 8001b68:	08001c9d 	.word	0x08001c9d
 8001b6c:	08001c9d 	.word	0x08001c9d
 8001b70:	08001c9d 	.word	0x08001c9d
 8001b74:	08001ba3 	.word	0x08001ba3
 8001b78:	08001bbb 	.word	0x08001bbb
 8001b7c:	08001bd3 	.word	0x08001bd3
 8001b80:	08001c4d 	.word	0x08001c4d
 8001b84:	08001c65 	.word	0x08001c65
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b8e:	2b41      	cmp	r3, #65	; 0x41
 8001b90:	bf0c      	ite	eq
 8001b92:	2301      	moveq	r3, #1
 8001b94:	2300      	movne	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001ba0:	e07f      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff fd5f 	bl	8001668 <prv_parse_float_number>
 8001baa:	eeb0 7a40 	vmov.f32	s14, s0
 8001bae:	eef0 7a60 	vmov.f32	s15, s1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001bb8:	e073      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8001bba:	2100      	movs	r1, #0
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fd53 	bl	8001668 <prv_parse_float_number>
 8001bc2:	eeb0 7a40 	vmov.f32	s14, s0
 8001bc6:	eef0 7a60 	vmov.f32	s15, s1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001bd0:	e067      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001bd8:	3b30      	subs	r3, #48	; 0x30
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001bec:	4413      	add	r3, r2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3b30      	subs	r3, #48	; 0x30
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001c00:	3b30      	subs	r3, #48	; 0x30
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	0092      	lsls	r2, r2, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001c14:	4413      	add	r3, r2
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	3b30      	subs	r3, #48	; 0x30
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001c28:	3b30      	subs	r3, #48	; 0x30
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	3b30      	subs	r3, #48	; 0x30
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8001c4a:	e02a      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fd0a 	bl	8001668 <prv_parse_float_number>
 8001c54:	eeb0 7a40 	vmov.f32	s14, s0
 8001c58:	eef0 7a60 	vmov.f32	s15, s1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001c62:	e01e      	b.n	8001ca2 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001c6a:	2957      	cmp	r1, #87	; 0x57
 8001c6c:	d004      	beq.n	8001c78 <prv_parse_term+0x520>
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001c74:	2977      	cmp	r1, #119	; 0x77
 8001c76:	d113      	bne.n	8001ca0 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8001c7e:	4602      	mov	r2, r0
 8001c80:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8001c8a:	e009      	b.n	8001ca0 <prv_parse_term+0x548>
                break;
 8001c8c:	bf00      	nop
 8001c8e:	e008      	b.n	8001ca2 <prv_parse_term+0x54a>
                break;
 8001c90:	bf00      	nop
 8001c92:	e006      	b.n	8001ca2 <prv_parse_term+0x54a>
                break;
 8001c94:	bf00      	nop
 8001c96:	e004      	b.n	8001ca2 <prv_parse_term+0x54a>
                break;
 8001c98:	bf00      	nop
 8001c9a:	e002      	b.n	8001ca2 <prv_parse_term+0x54a>
            default:
                break;
 8001c9c:	bf00      	nop
 8001c9e:	e000      	b.n	8001ca2 <prv_parse_term+0x54a>
                break;
 8001ca0:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cae:	bf00      	nop

08001cb0 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001cbe:	2b2f      	cmp	r3, #47	; 0x2f
 8001cc0:	d90d      	bls.n	8001cde <prv_check_crc+0x2e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001cc8:	2b39      	cmp	r3, #57	; 0x39
 8001cca:	d808      	bhi.n	8001cde <prv_check_crc+0x2e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001cd2:	3b30      	subs	r3, #48	; 0x30
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	e026      	b.n	8001d2c <prv_check_crc+0x7c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001ce4:	2b60      	cmp	r3, #96	; 0x60
 8001ce6:	d90d      	bls.n	8001d04 <prv_check_crc+0x54>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001cee:	2b7a      	cmp	r3, #122	; 0x7a
 8001cf0:	d808      	bhi.n	8001d04 <prv_check_crc+0x54>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001cf8:	3b57      	subs	r3, #87	; 0x57
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	b25a      	sxtb	r2, r3
 8001d02:	e013      	b.n	8001d2c <prv_check_crc+0x7c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	d90d      	bls.n	8001d2a <prv_check_crc+0x7a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d14:	2b5a      	cmp	r3, #90	; 0x5a
 8001d16:	d808      	bhi.n	8001d2a <prv_check_crc+0x7a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d1e:	3b37      	subs	r3, #55	; 0x37
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	b25a      	sxtb	r2, r3
 8001d28:	e000      	b.n	8001d2c <prv_check_crc+0x7c>
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d32:	2b2f      	cmp	r3, #47	; 0x2f
 8001d34:	d90c      	bls.n	8001d50 <prv_check_crc+0xa0>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d3c:	2b39      	cmp	r3, #57	; 0x39
 8001d3e:	d807      	bhi.n	8001d50 <prv_check_crc+0xa0>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d46:	b25b      	sxtb	r3, r3
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	b25b      	sxtb	r3, r3
 8001d4e:	e028      	b.n	8001da2 <prv_check_crc+0xf2>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d56:	2b60      	cmp	r3, #96	; 0x60
 8001d58:	d90e      	bls.n	8001d78 <prv_check_crc+0xc8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d60:	2b7a      	cmp	r3, #122	; 0x7a
 8001d62:	d809      	bhi.n	8001d78 <prv_check_crc+0xc8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d6a:	3b57      	subs	r3, #87	; 0x57
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	b25b      	sxtb	r3, r3
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	e014      	b.n	8001da2 <prv_check_crc+0xf2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d7e:	2b40      	cmp	r3, #64	; 0x40
 8001d80:	d90e      	bls.n	8001da0 <prv_check_crc+0xf0>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d88:	2b5a      	cmp	r3, #90	; 0x5a
 8001d8a:	d809      	bhi.n	8001da0 <prv_check_crc+0xf0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d92:	3b37      	subs	r3, #55	; 0x37
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	e000      	b.n	8001da2 <prv_check_crc+0xf2>
 8001da0:	2300      	movs	r3, #0
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d136      	bne.n	8001e46 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e44:	e061      	b.n	8001f0a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d121      	bne.n	8001e94 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	33a1      	adds	r3, #161	; 0xa1
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f00c fe46 	bl	800eb1e <memcpy>
 8001e92:	e03a      	b.n	8001f0a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d106      	bne.n	8001eac <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001eaa:	e02e      	b.n	8001f0a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d129      	bne.n	8001f0a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001f1c:	22b0      	movs	r2, #176	; 0xb0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f00c fd6e 	bl	800ea02 <memset>
    return 1;
 8001f26:	2301      	movs	r3, #1
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001f40:	e0ad      	b.n	800209e <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b24      	cmp	r3, #36	; 0x24
 8001f48:	d128      	bne.n	8001f9c <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3370      	adds	r3, #112	; 0x70
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f00c fd55 	bl	800ea02 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001f5e:	2b0b      	cmp	r3, #11
 8001f60:	f200 8097 	bhi.w	8002092 <lwgps_process+0x162>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001f7e:	3301      	adds	r3, #1
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001f9a:	e07a      	b.n	8002092 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b2c      	cmp	r3, #44	; 0x2c
 8001fa2:	d11d      	bne.n	8001fe0 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f7ff fbd7 	bl	8001758 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4053      	eors	r3, r2
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001fde:	e058      	b.n	8002092 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8001fe6:	d117      	bne.n	8002018 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff fbb5 	bl	8001758 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800200c:	3301      	adds	r3, #1
 800200e:	b2da      	uxtb	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002016:	e03c      	b.n	8002092 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b0d      	cmp	r3, #13
 800201e:	d109      	bne.n	8002034 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7ff fe45 	bl	8001cb0 <prv_check_crc>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d032      	beq.n	8002092 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f7ff feca 	bl	8001dc6 <prv_copy_from_tmp_memory>
 8002032:	e02e      	b.n	8002092 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4053      	eors	r3, r2
 800204a:	b2da      	uxtb	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002058:	2b0b      	cmp	r3, #11
 800205a:	d81a      	bhi.n	8002092 <lwgps_process+0x162>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002062:	4619      	mov	r1, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	781a      	ldrb	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	440b      	add	r3, r1
 800206c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002076:	3301      	adds	r3, #1
 8002078:	b2da      	uxtb	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002086:	461a      	mov	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f47f af4e 	bne.w	8001f42 <lwgps_process+0x12>
        }
    }
    return 1;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init(); // YOKLAMA , GÜN TARİH ARAYÜZE ,
 80020b4:	f003 fab4 	bl	8005620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020b8:	f000 f812 	bl	80020e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020bc:	f7ff f89e 	bl	80011fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80020c0:	f7ff fa12 	bl	80014e8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80020c4:	f000 fdbc 	bl	8002c40 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80020c8:	f000 fd90 	bl	8002bec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80020cc:	f000 fc72 	bl	80029b4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80020d0:	f000 fc18 	bl	8002904 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  setup();
 80020d4:	f000 f874 	bl	80021c0 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  loop();
 80020d8:	f000 f8c8 	bl	800226c <loop>
 80020dc:	e7fc      	b.n	80020d8 <main+0x28>
	...

080020e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b094      	sub	sp, #80	; 0x50
 80020e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e6:	f107 0320 	add.w	r3, r7, #32
 80020ea:	2230      	movs	r2, #48	; 0x30
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f00c fc87 	bl	800ea02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	4b28      	ldr	r3, [pc, #160]	; (80021ac <SystemClock_Config+0xcc>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <SystemClock_Config+0xcc>)
 800210e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002112:	6413      	str	r3, [r2, #64]	; 0x40
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <SystemClock_Config+0xcc>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002120:	2300      	movs	r3, #0
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <SystemClock_Config+0xd0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a21      	ldr	r2, [pc, #132]	; (80021b0 <SystemClock_Config+0xd0>)
 800212a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <SystemClock_Config+0xd0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800213c:	2301      	movs	r3, #1
 800213e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002146:	2302      	movs	r3, #2
 8002148:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800214a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002150:	2308      	movs	r3, #8
 8002152:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002154:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002158:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800215a:	2302      	movs	r3, #2
 800215c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800215e:	2307      	movs	r3, #7
 8002160:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002162:	f107 0320 	add.w	r3, r7, #32
 8002166:	4618      	mov	r0, r3
 8002168:	f005 fb12 	bl	8007790 <HAL_RCC_OscConfig>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002172:	f000 f81f 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002176:	230f      	movs	r3, #15
 8002178:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800217a:	2302      	movs	r3, #2
 800217c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002182:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002186:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800218e:	f107 030c 	add.w	r3, r7, #12
 8002192:	2105      	movs	r1, #5
 8002194:	4618      	mov	r0, r3
 8002196:	f005 fd73 	bl	8007c80 <HAL_RCC_ClockConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021a0:	f000 f808 	bl	80021b4 <Error_Handler>
  }
}
 80021a4:	bf00      	nop
 80021a6:	3750      	adds	r7, #80	; 0x50
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40007000 	.word	0x40007000

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	e7fe      	b.n	80021bc <Error_Handler+0x8>
	...

080021c0 <setup>:
void Gorevler1();
void Gorevler2();
void Gorevler3();

void setup()
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0

	//uart3.Yapilandir(115200, GPIOD, GPIO_PIN_8,GPIOB ,GPIO_PIN_11);
	//uart3.receiveIT(RotaData, 8);
	//HAL_UART_Receive_IT(&huart3, ArayuzData, sizeof(ArayuzData));
	ArayuzPaket.PaketKesmeInit();
 80021c4:	481c      	ldr	r0, [pc, #112]	; (8002238 <setup+0x78>)
 80021c6:	f002 fb64 	bl	8004892 <_ZN5Paket14PaketKesmeInitEv>
	motor1.Yapilandir();
 80021ca:	481c      	ldr	r0, [pc, #112]	; (800223c <setup+0x7c>)
 80021cc:	f002 f81d 	bl	800420a <_ZN5Motor10YapilandirEv>
	gps.Yapilandir();
 80021d0:	481b      	ldr	r0, [pc, #108]	; (8002240 <setup+0x80>)
 80021d2:	f001 f948 	bl	8003466 <_ZN3GPS10YapilandirEv>
	mag.Yapilandir();
 80021d6:	481b      	ldr	r0, [pc, #108]	; (8002244 <setup+0x84>)
 80021d8:	f001 fe02 	bl	8003de0 <_ZN5MyMag10YapilandirEv>
	imu.DBC_MPU6500_YAPILANDIR();
 80021dc:	481a      	ldr	r0, [pc, #104]	; (8002248 <setup+0x88>)
 80021de:	f001 fa00 	bl	80035e2 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv>
	barometre.Yapilandir();
 80021e2:	481a      	ldr	r0, [pc, #104]	; (800224c <setup+0x8c>)
 80021e4:	f000 fe3c 	bl	8002e60 <_ZN9Barometre10YapilandirEv>
	timer3.Yapilandir(84000,5);
 80021e8:	2205      	movs	r2, #5
 80021ea:	4919      	ldr	r1, [pc, #100]	; (8002250 <setup+0x90>)
 80021ec:	4819      	ldr	r0, [pc, #100]	; (8002254 <setup+0x94>)
 80021ee:	f003 f8f7 	bl	80053e0 <_ZN5Timer10YapilandirEmm>
	timer3.AktifEt();
 80021f2:	4818      	ldr	r0, [pc, #96]	; (8002254 <setup+0x94>)
 80021f4:	f003 f913 	bl	800541e <_ZN5Timer7AktifEtEv>

	imu.DBC_GYRO_OFSET();
 80021f8:	4813      	ldr	r0, [pc, #76]	; (8002248 <setup+0x88>)
 80021fa:	f001 fa57 	bl	80036ac <_ZN5MyImu14DBC_GYRO_OFSETEv>
	GPIOD->ODR ^= GPIO_PIN_12;
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <setup+0x98>)
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4a15      	ldr	r2, [pc, #84]	; (8002258 <setup+0x98>)
 8002204:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002208:	6153      	str	r3, [r2, #20]
	mag.KalibreEt();
 800220a:	480e      	ldr	r0, [pc, #56]	; (8002244 <setup+0x84>)
 800220c:	f001 fe4a 	bl	8003ea4 <_ZN5MyMag9KalibreEtEv>
	gorev.GorevAl(Gorevler2,25);
 8002210:	2219      	movs	r2, #25
 8002212:	4912      	ldr	r1, [pc, #72]	; (800225c <setup+0x9c>)
 8002214:	4812      	ldr	r0, [pc, #72]	; (8002260 <setup+0xa0>)
 8002216:	f002 ff84 	bl	8005122 <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(Gorevler3,500);
 800221a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800221e:	4911      	ldr	r1, [pc, #68]	; (8002264 <setup+0xa4>)
 8002220:	480f      	ldr	r0, [pc, #60]	; (8002260 <setup+0xa0>)
 8002222:	f002 ff7e 	bl	8005122 <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(Gorevler1,1000);
 8002226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800222a:	490f      	ldr	r1, [pc, #60]	; (8002268 <setup+0xa8>)
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <setup+0xa0>)
 800222e:	f002 ff78 	bl	8005122 <_ZN13Gorevyonetici7GorevAlEPFvvEs>
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200006d0 	.word	0x200006d0
 800223c:	20000550 	.word	0x20000550
 8002240:	20000378 	.word	0x20000378
 8002244:	200004c0 	.word	0x200004c0
 8002248:	20000330 	.word	0x20000330
 800224c:	200004e0 	.word	0x200004e0
 8002250:	00014820 	.word	0x00014820
 8002254:	200002a0 	.word	0x200002a0
 8002258:	40020c00 	.word	0x40020c00
 800225c:	08002419 	.word	0x08002419
 8002260:	200002a4 	.word	0x200002a4
 8002264:	080024e9 	.word	0x080024e9
 8002268:	08002379 	.word	0x08002379

0800226c <loop>:

void loop()
{
 800226c:	b580      	push	{r7, lr}
 800226e:	ed2d 8b04 	vpush	{d8-d9}
 8002272:	af00      	add	r7, sp, #0
	motor1.PWM(500);
 8002274:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002278:	4838      	ldr	r0, [pc, #224]	; (800235c <loop+0xf0>)
 800227a:	f001 ffdf 	bl	800423c <_ZN5Motor3PWMEt>
	motor1.AciBul();
 800227e:	4837      	ldr	r0, [pc, #220]	; (800235c <loop+0xf0>)
 8002280:	f001 ffee 	bl	8004260 <_ZN5Motor6AciBulEv>
	tur=*motor1.TurAl();
 8002284:	4835      	ldr	r0, [pc, #212]	; (800235c <loop+0xf0>)
 8002286:	f002 f899 	bl	80043bc <_ZN5Motor5TurAlEv>
 800228a:	4603      	mov	r3, r0
 800228c:	f993 2000 	ldrsb.w	r2, [r3]
 8002290:	4b33      	ldr	r3, [pc, #204]	; (8002360 <loop+0xf4>)
 8002292:	701a      	strb	r2, [r3, #0]
	aci=*motor1.AciAl();
 8002294:	4831      	ldr	r0, [pc, #196]	; (800235c <loop+0xf0>)
 8002296:	f002 f885 	bl	80043a4 <_ZN5Motor5AciAlEv>
 800229a:	4603      	mov	r3, r0
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a31      	ldr	r2, [pc, #196]	; (8002364 <loop+0xf8>)
 80022a0:	6013      	str	r3, [r2, #0]

	gorev.GorevCalistir();
 80022a2:	4831      	ldr	r0, [pc, #196]	; (8002368 <loop+0xfc>)
 80022a4:	f002 ffcc 	bl	8005240 <_ZN13Gorevyonetici13GorevCalistirEv>
	 if(ArayuzPaket.PaketCozBayrak)
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <loop+0x100>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d04f      	beq.n	8002350 <loop+0xe4>
	 {
		 ArayuzPaket.PaketCoz();
 80022b0:	482e      	ldr	r0, [pc, #184]	; (800236c <loop+0x100>)
 80022b2:	f002 fc9d 	bl	8004bf0 <_ZN5Paket8PaketCozEv>
		 ArayuzPaket.PaketCozBayrak = false;
 80022b6:	4b2d      	ldr	r3, [pc, #180]	; (800236c <loop+0x100>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
		 if(ArayuzPaket.MesafeBayrak)
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <loop+0x100>)
 80022be:	789b      	ldrb	r3, [r3, #2]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d045      	beq.n	8002350 <loop+0xe4>
		 {
			 araba.mesafeBul(*gps.LatitudeAl(),*gps.LongitudeAl(), *ArayuzPaket.ArayuzLatAl(), *ArayuzPaket.ArayuzLatAl());
 80022c4:	482a      	ldr	r0, [pc, #168]	; (8002370 <loop+0x104>)
 80022c6:	f001 f947 	bl	8003558 <_ZN3GPS10LatitudeAlEv>
 80022ca:	4603      	mov	r3, r0
 80022cc:	ed93 8a00 	vldr	s16, [r3]
 80022d0:	4827      	ldr	r0, [pc, #156]	; (8002370 <loop+0x104>)
 80022d2:	f001 f94e 	bl	8003572 <_ZN3GPS11LongitudeAlEv>
 80022d6:	4603      	mov	r3, r0
 80022d8:	edd3 8a00 	vldr	s17, [r3]
 80022dc:	4823      	ldr	r0, [pc, #140]	; (800236c <loop+0x100>)
 80022de:	f002 fdf7 	bl	8004ed0 <_ZN5Paket11ArayuzLatAlEv>
 80022e2:	4603      	mov	r3, r0
 80022e4:	ed93 9a00 	vldr	s18, [r3]
 80022e8:	4820      	ldr	r0, [pc, #128]	; (800236c <loop+0x100>)
 80022ea:	f002 fdf1 	bl	8004ed0 <_ZN5Paket11ArayuzLatAlEv>
 80022ee:	4603      	mov	r3, r0
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	eef0 1a67 	vmov.f32	s3, s15
 80022f8:	eeb0 1a49 	vmov.f32	s2, s18
 80022fc:	eef0 0a68 	vmov.f32	s1, s17
 8002300:	eeb0 0a48 	vmov.f32	s0, s16
 8002304:	481b      	ldr	r0, [pc, #108]	; (8002374 <loop+0x108>)
 8002306:	f002 f873 	bl	80043f0 <_ZN5Araba9mesafeBulEffff>
			 araba.yonelimBul(*gps.LatitudeAl(),*gps.LongitudeAl(), *ArayuzPaket.ArayuzLatAl(), *ArayuzPaket.ArayuzLatAl());
 800230a:	4819      	ldr	r0, [pc, #100]	; (8002370 <loop+0x104>)
 800230c:	f001 f924 	bl	8003558 <_ZN3GPS10LatitudeAlEv>
 8002310:	4603      	mov	r3, r0
 8002312:	ed93 8a00 	vldr	s16, [r3]
 8002316:	4816      	ldr	r0, [pc, #88]	; (8002370 <loop+0x104>)
 8002318:	f001 f92b 	bl	8003572 <_ZN3GPS11LongitudeAlEv>
 800231c:	4603      	mov	r3, r0
 800231e:	edd3 8a00 	vldr	s17, [r3]
 8002322:	4812      	ldr	r0, [pc, #72]	; (800236c <loop+0x100>)
 8002324:	f002 fdd4 	bl	8004ed0 <_ZN5Paket11ArayuzLatAlEv>
 8002328:	4603      	mov	r3, r0
 800232a:	ed93 9a00 	vldr	s18, [r3]
 800232e:	480f      	ldr	r0, [pc, #60]	; (800236c <loop+0x100>)
 8002330:	f002 fdce 	bl	8004ed0 <_ZN5Paket11ArayuzLatAlEv>
 8002334:	4603      	mov	r3, r0
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	eef0 1a67 	vmov.f32	s3, s15
 800233e:	eeb0 1a49 	vmov.f32	s2, s18
 8002342:	eef0 0a68 	vmov.f32	s1, s17
 8002346:	eeb0 0a48 	vmov.f32	s0, s16
 800234a:	480a      	ldr	r0, [pc, #40]	; (8002374 <loop+0x108>)
 800234c:	f002 f930 	bl	80045b0 <_ZN5Araba10yonelimBulEffff>
		 }
	 }
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	ecbd 8b04 	vpop	{d8-d9}
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000550 	.word	0x20000550
 8002360:	2000025c 	.word	0x2000025c
 8002364:	20000258 	.word	0x20000258
 8002368:	200002a4 	.word	0x200002a4
 800236c:	200006d0 	.word	0x200006d0
 8002370:	20000378 	.word	0x20000378
 8002374:	2000077c 	.word	0x2000077c

08002378 <_Z9Gorevler1v>:

void Gorevler1()
{
 8002378:	b580      	push	{r7, lr}
 800237a:	ed2d 8b04 	vpush	{d8-d9}
 800237e:	af00      	add	r7, sp, #0

	GPIOD->ODR ^= GPIO_PIN_12;
 8002380:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <_Z9Gorevler1v+0x84>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <_Z9Gorevler1v+0x84>)
 8002386:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800238a:	6153      	str	r3, [r2, #20]
	GpsPaket.GpsPaketOlustur(*gps.LatitudeAl(),*gps.LongitudeAl(),*barometre.IrtifaOku(0),*barometre.SicaklikOku());
 800238c:	481c      	ldr	r0, [pc, #112]	; (8002400 <_Z9Gorevler1v+0x88>)
 800238e:	f001 f8e3 	bl	8003558 <_ZN3GPS10LatitudeAlEv>
 8002392:	4603      	mov	r3, r0
 8002394:	ed93 8a00 	vldr	s16, [r3]
 8002398:	4819      	ldr	r0, [pc, #100]	; (8002400 <_Z9Gorevler1v+0x88>)
 800239a:	f001 f8ea 	bl	8003572 <_ZN3GPS11LongitudeAlEv>
 800239e:	4603      	mov	r3, r0
 80023a0:	edd3 8a00 	vldr	s17, [r3]
 80023a4:	2100      	movs	r1, #0
 80023a6:	4817      	ldr	r0, [pc, #92]	; (8002404 <_Z9Gorevler1v+0x8c>)
 80023a8:	f000 ff46 	bl	8003238 <_ZN9Barometre9IrtifaOkuEh>
 80023ac:	4603      	mov	r3, r0
 80023ae:	ed93 9a00 	vldr	s18, [r3]
 80023b2:	4814      	ldr	r0, [pc, #80]	; (8002404 <_Z9Gorevler1v+0x8c>)
 80023b4:	f000 fde8 	bl	8002f88 <_ZN9Barometre11SicaklikOkuEv>
 80023b8:	4603      	mov	r3, r0
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	eef0 1a67 	vmov.f32	s3, s15
 80023c2:	eeb0 1a49 	vmov.f32	s2, s18
 80023c6:	eef0 0a68 	vmov.f32	s1, s17
 80023ca:	eeb0 0a48 	vmov.f32	s0, s16
 80023ce:	480e      	ldr	r0, [pc, #56]	; (8002408 <_Z9Gorevler1v+0x90>)
 80023d0:	f002 fa6f 	bl	80048b2 <_ZN5Paket15GpsPaketOlusturEffff>
	GpsPaket.gpsPaketCagir(GpsDataPacket);
 80023d4:	490d      	ldr	r1, [pc, #52]	; (800240c <_Z9Gorevler1v+0x94>)
 80023d6:	480c      	ldr	r0, [pc, #48]	; (8002408 <_Z9Gorevler1v+0x90>)
 80023d8:	f002 fbdd 	bl	8004b96 <_ZN5Paket13gpsPaketCagirEPh>
	if(ArayuzPaket.YoklamaFlag)
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <_Z9Gorevler1v+0x98>)
 80023de:	785b      	ldrb	r3, [r3, #1]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <_Z9Gorevler1v+0x7a>
	{
		HAL_UART_Transmit(&huart3, GpsDataPacket, sizeof(GpsDataPacket), 1000);
 80023e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e8:	2215      	movs	r2, #21
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <_Z9Gorevler1v+0x94>)
 80023ec:	4809      	ldr	r0, [pc, #36]	; (8002414 <_Z9Gorevler1v+0x9c>)
 80023ee:	f006 ffb3 	bl	8009358 <HAL_UART_Transmit>
	}

	//HAL_UART_Transmit(&huart3, ImuDataPacket, sizeof(ImuDataPacket), HAL_MAX_DELAY);
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	ecbd 8b04 	vpop	{d8-d9}
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40020c00 	.word	0x40020c00
 8002400:	20000378 	.word	0x20000378
 8002404:	200004e0 	.word	0x200004e0
 8002408:	20000578 	.word	0x20000578
 800240c:	20000260 	.word	0x20000260
 8002410:	200006d0 	.word	0x200006d0
 8002414:	2000085c 	.word	0x2000085c

08002418 <_Z9Gorevler2v>:
void Gorevler2()
{
 8002418:	b580      	push	{r7, lr}
 800241a:	ed2d 8b04 	vpush	{d8-d9}
 800241e:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= GPIO_PIN_13;
 8002420:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <_Z9Gorevler2v+0xac>)
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <_Z9Gorevler2v+0xac>)
 8002426:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800242a:	6153      	str	r3, [r2, #20]
	imu.DBC_ACI_BULMA();
 800242c:	4826      	ldr	r0, [pc, #152]	; (80024c8 <_Z9Gorevler2v+0xb0>)
 800242e:	f001 faaf 	bl	8003990 <_ZN5MyImu13DBC_ACI_BULMAEv>

	pitch=*imu.PitchAl();
 8002432:	4825      	ldr	r0, [pc, #148]	; (80024c8 <_Z9Gorevler2v+0xb0>)
 8002434:	f001 fc78 	bl	8003d28 <_ZN5MyImu7PitchAlEv>
 8002438:	4603      	mov	r3, r0
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a23      	ldr	r2, [pc, #140]	; (80024cc <_Z9Gorevler2v+0xb4>)
 800243e:	6013      	str	r3, [r2, #0]
	roll=*imu.RollAl();
 8002440:	4821      	ldr	r0, [pc, #132]	; (80024c8 <_Z9Gorevler2v+0xb0>)
 8002442:	f001 fc7d 	bl	8003d40 <_ZN5MyImu6RollAlEv>
 8002446:	4603      	mov	r3, r0
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <_Z9Gorevler2v+0xb8>)
 800244c:	6013      	str	r3, [r2, #0]
	yaw=*imu.YawAl();
 800244e:	481e      	ldr	r0, [pc, #120]	; (80024c8 <_Z9Gorevler2v+0xb0>)
 8002450:	f001 fc82 	bl	8003d58 <_ZN5MyImu5YawAlEv>
 8002454:	4603      	mov	r3, r0
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <_Z9Gorevler2v+0xbc>)
 800245a:	6013      	str	r3, [r2, #0]
	heading = *mag.HeadingOlustur();
 800245c:	481e      	ldr	r0, [pc, #120]	; (80024d8 <_Z9Gorevler2v+0xc0>)
 800245e:	f001 fdaf 	bl	8003fc0 <_ZN5MyMag14HeadingOlusturEv>
 8002462:	4603      	mov	r3, r0
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <_Z9Gorevler2v+0xc4>)
 8002468:	6013      	str	r3, [r2, #0]
	ImuPaket.ImuPaketOlustur(*imu.PitchAl(), *imu.RollAl(), *mag.HeadingOlustur(), *imu.SicaklikAl());
 800246a:	4817      	ldr	r0, [pc, #92]	; (80024c8 <_Z9Gorevler2v+0xb0>)
 800246c:	f001 fc5c 	bl	8003d28 <_ZN5MyImu7PitchAlEv>
 8002470:	4603      	mov	r3, r0
 8002472:	ed93 8a00 	vldr	s16, [r3]
 8002476:	4814      	ldr	r0, [pc, #80]	; (80024c8 <_Z9Gorevler2v+0xb0>)
 8002478:	f001 fc62 	bl	8003d40 <_ZN5MyImu6RollAlEv>
 800247c:	4603      	mov	r3, r0
 800247e:	edd3 8a00 	vldr	s17, [r3]
 8002482:	4815      	ldr	r0, [pc, #84]	; (80024d8 <_Z9Gorevler2v+0xc0>)
 8002484:	f001 fd9c 	bl	8003fc0 <_ZN5MyMag14HeadingOlusturEv>
 8002488:	4603      	mov	r3, r0
 800248a:	ed93 9a00 	vldr	s18, [r3]
 800248e:	480e      	ldr	r0, [pc, #56]	; (80024c8 <_Z9Gorevler2v+0xb0>)
 8002490:	f001 fc6e 	bl	8003d70 <_ZN5MyImu10SicaklikAlEv>
 8002494:	4603      	mov	r3, r0
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	eef0 1a67 	vmov.f32	s3, s15
 800249e:	eeb0 1a49 	vmov.f32	s2, s18
 80024a2:	eef0 0a68 	vmov.f32	s1, s17
 80024a6:	eeb0 0a48 	vmov.f32	s0, s16
 80024aa:	480d      	ldr	r0, [pc, #52]	; (80024e0 <_Z9Gorevler2v+0xc8>)
 80024ac:	f002 fa78 	bl	80049a0 <_ZN5Paket15ImuPaketOlusturEffff>
	ImuPaket.imuPaketCagir(ImuDataPacket);
 80024b0:	490c      	ldr	r1, [pc, #48]	; (80024e4 <_Z9Gorevler2v+0xcc>)
 80024b2:	480b      	ldr	r0, [pc, #44]	; (80024e0 <_Z9Gorevler2v+0xc8>)
 80024b4:	f002 fb7f 	bl	8004bb6 <_ZN5Paket13imuPaketCagirEPh>
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	ecbd 8b04 	vpop	{d8-d9}
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40020c00 	.word	0x40020c00
 80024c8:	20000330 	.word	0x20000330
 80024cc:	20000290 	.word	0x20000290
 80024d0:	20000294 	.word	0x20000294
 80024d4:	20000298 	.word	0x20000298
 80024d8:	200004c0 	.word	0x200004c0
 80024dc:	2000029c 	.word	0x2000029c
 80024e0:	20000624 	.word	0x20000624
 80024e4:	20000278 	.word	0x20000278

080024e8 <_Z9Gorevler3v>:
void Gorevler3()
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	if(ArayuzPaket.YoklamaFlag)
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <_Z9Gorevler3v+0x20>)
 80024ee:	785b      	ldrb	r3, [r3, #1]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d006      	beq.n	8002502 <_Z9Gorevler3v+0x1a>
	{
		HAL_UART_Transmit(&huart3, ImuDataPacket, sizeof(ImuDataPacket), 1000);
 80024f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f8:	2215      	movs	r2, #21
 80024fa:	4904      	ldr	r1, [pc, #16]	; (800250c <_Z9Gorevler3v+0x24>)
 80024fc:	4804      	ldr	r0, [pc, #16]	; (8002510 <_Z9Gorevler3v+0x28>)
 80024fe:	f006 ff2b 	bl	8009358 <HAL_UART_Transmit>
	}

}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200006d0 	.word	0x200006d0
 800250c:	20000278 	.word	0x20000278
 8002510:	2000085c 	.word	0x2000085c

08002514 <TIM3_IRQHandler>:
extern "C" void TIM3_IRQHandler()
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	gorev.BayrakKaldir();
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <TIM3_IRQHandler+0x10>)
 800251a:	f002 fe2d 	bl	8005178 <_ZN13Gorevyonetici12BayrakKaldirEv>
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200002a4 	.word	0x200002a4

08002528 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_UART_RxCpltCallback+0x30>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d102      	bne.n	8002540 <HAL_UART_RxCpltCallback+0x18>
	{
		gps.UartRxCpltCallback();
 800253a:	4808      	ldr	r0, [pc, #32]	; (800255c <HAL_UART_RxCpltCallback+0x34>)
 800253c:	f000 ffa9 	bl	8003492 <_ZN3GPS18UartRxCpltCallbackEv>
	}
	if (huart->Instance == USART3)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <HAL_UART_RxCpltCallback+0x38>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d102      	bne.n	8002550 <HAL_UART_RxCpltCallback+0x28>
	{
		ArayuzPaket.BayrakKaldir();
 800254a:	4806      	ldr	r0, [pc, #24]	; (8002564 <HAL_UART_RxCpltCallback+0x3c>)
 800254c:	f002 fb43 	bl	8004bd6 <_ZN5Paket12BayrakKaldirEv>
		//HAL_UART_Receive_IT(&huart3, ArayuzData, sizeof(ArayuzData));

	}
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40004400 	.word	0x40004400
 800255c:	20000378 	.word	0x20000378
 8002560:	40004800 	.word	0x40004800
 8002564:	200006d0 	.word	0x200006d0

08002568 <_Z41__static_initialization_and_destruction_0ii>:
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af04      	add	r7, sp, #16
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d140      	bne.n	80025fa <_Z41__static_initialization_and_destruction_0ii+0x92>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800257e:	4293      	cmp	r3, r2
 8002580:	d13b      	bne.n	80025fa <_Z41__static_initialization_and_destruction_0ii+0x92>
Timer timer3(TIM3);
 8002582:	4920      	ldr	r1, [pc, #128]	; (8002604 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002584:	4820      	ldr	r0, [pc, #128]	; (8002608 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002586:	f002 ff1b 	bl	80053c0 <_ZN5TimerC1EP11TIM_TypeDef>
Gorevyonetici gorev(TIM3);
 800258a:	491e      	ldr	r1, [pc, #120]	; (8002604 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800258c:	481f      	ldr	r0, [pc, #124]	; (800260c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800258e:	f002 fd83 	bl	8005098 <_ZN13GorevyoneticiC1EP11TIM_TypeDef>
MyImu imu(&hi2c1);
 8002592:	491f      	ldr	r1, [pc, #124]	; (8002610 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8002594:	481f      	ldr	r0, [pc, #124]	; (8002614 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002596:	f000 fff9 	bl	800358c <_ZN5MyImuC1EP17I2C_HandleTypeDef>
GPS gps(&huart2);
 800259a:	491f      	ldr	r1, [pc, #124]	; (8002618 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800259c:	481f      	ldr	r0, [pc, #124]	; (800261c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800259e:	f000 ff41 	bl	8003424 <_ZN3GPSC1EP20__UART_HandleTypeDef>
MyMag mag(&hi2c1);
 80025a2:	491b      	ldr	r1, [pc, #108]	; (8002610 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80025a4:	481e      	ldr	r0, [pc, #120]	; (8002620 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80025a6:	f001 fbef 	bl	8003d88 <_ZN5MyMagC1EP17I2C_HandleTypeDef>
Barometre barometre(&hi2c1, 0xEE);
 80025aa:	22ee      	movs	r2, #238	; 0xee
 80025ac:	4918      	ldr	r1, [pc, #96]	; (8002610 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80025ae:	481d      	ldr	r0, [pc, #116]	; (8002624 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80025b0:	f000 fc28 	bl	8002e04 <_ZN9BarometreC1EP17I2C_HandleTypeDefh>
Motor motor1(&htim2, &htim1, GPIOB, GPIO_PIN_4, GPIOB, GPIO_PIN_5);
 80025b4:	2320      	movs	r3, #32
 80025b6:	9302      	str	r3, [sp, #8]
 80025b8:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	2310      	movs	r3, #16
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80025c2:	4a1a      	ldr	r2, [pc, #104]	; (800262c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80025c4:	491a      	ldr	r1, [pc, #104]	; (8002630 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80025c6:	481b      	ldr	r0, [pc, #108]	; (8002634 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80025c8:	f001 fdea 	bl	80041a0 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_P12GPIO_TypeDeftS3_t>
Paket GpsPaket(0x12, 0x34, 0x01, 0x09); //veri boyutu 9
 80025cc:	2309      	movs	r3, #9
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2301      	movs	r3, #1
 80025d2:	2234      	movs	r2, #52	; 0x34
 80025d4:	2112      	movs	r1, #18
 80025d6:	4818      	ldr	r0, [pc, #96]	; (8002638 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80025d8:	f002 f8f0 	bl	80047bc <_ZN5PaketC1Ehhhh>
Paket ImuPaket(0x12, 0x34, 0x02, 0x11);//veri boyutu 17
 80025dc:	2311      	movs	r3, #17
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2302      	movs	r3, #2
 80025e2:	2234      	movs	r2, #52	; 0x34
 80025e4:	2112      	movs	r1, #18
 80025e6:	4815      	ldr	r0, [pc, #84]	; (800263c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80025e8:	f002 f8e8 	bl	80047bc <_ZN5PaketC1Ehhhh>
Paket ArayuzPaket(&huart3);
 80025ec:	4914      	ldr	r1, [pc, #80]	; (8002640 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80025ee:	4815      	ldr	r0, [pc, #84]	; (8002644 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80025f0:	f002 f8b8 	bl	8004764 <_ZN5PaketC1EP20__UART_HandleTypeDef>
Araba araba;
 80025f4:	4814      	ldr	r0, [pc, #80]	; (8002648 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80025f6:	f001 feed 	bl	80043d4 <_ZN5ArabaC1Ev>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40000400 	.word	0x40000400
 8002608:	200002a0 	.word	0x200002a0
 800260c:	200002a4 	.word	0x200002a4
 8002610:	20000204 	.word	0x20000204
 8002614:	20000330 	.word	0x20000330
 8002618:	20000814 	.word	0x20000814
 800261c:	20000378 	.word	0x20000378
 8002620:	200004c0 	.word	0x200004c0
 8002624:	200004e0 	.word	0x200004e0
 8002628:	40020400 	.word	0x40020400
 800262c:	20000784 	.word	0x20000784
 8002630:	200007cc 	.word	0x200007cc
 8002634:	20000550 	.word	0x20000550
 8002638:	20000578 	.word	0x20000578
 800263c:	20000624 	.word	0x20000624
 8002640:	2000085c 	.word	0x2000085c
 8002644:	200006d0 	.word	0x200006d0
 8002648:	2000077c 	.word	0x2000077c

0800264c <_GLOBAL__sub_I_aci>:
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
 8002650:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002654:	2001      	movs	r0, #1
 8002656:	f7ff ff87 	bl	8002568 <_Z41__static_initialization_and_destruction_0ii>
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_MspInit+0x4c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <HAL_MspInit+0x4c>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_MspInit+0x4c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_MspInit+0x4c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <HAL_MspInit+0x4c>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_MspInit+0x4c>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800269a:	2007      	movs	r0, #7
 800269c:	f003 f926 	bl	80058ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800

080026ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026b0:	e7fe      	b.n	80026b0 <NMI_Handler+0x4>

080026b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b6:	e7fe      	b.n	80026b6 <HardFault_Handler+0x4>

080026b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <MemManage_Handler+0x4>

080026be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <BusFault_Handler+0x4>

080026c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <UsageFault_Handler+0x4>

080026ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f8:	f002 ffe4 	bl	80056c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}

08002700 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002704:	2080      	movs	r0, #128	; 0x80
 8002706:	f003 fb7b 	bl	8005e00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800270a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800270e:	f003 fb77 	bl	8005e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <TIM2_IRQHandler+0x10>)
 800271e:	f005 ff73 	bl	8008608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200007cc 	.word	0x200007cc

0800272c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <USART2_IRQHandler+0x10>)
 8002732:	f006 fec1 	bl	80094b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000814 	.word	0x20000814

08002740 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <USART3_IRQHandler+0x10>)
 8002746:	f006 feb7 	bl	80094b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000085c 	.word	0x2000085c

08002754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return 1;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_kill>:

int _kill(int pid, int sig)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800276e:	f00c f9a9 	bl	800eac4 <__errno>
 8002772:	4603      	mov	r3, r0
 8002774:	2216      	movs	r2, #22
 8002776:	601a      	str	r2, [r3, #0]
  return -1;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <_exit>:

void _exit (int status)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800278c:	f04f 31ff 	mov.w	r1, #4294967295
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ffe7 	bl	8002764 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002796:	e7fe      	b.n	8002796 <_exit+0x12>

08002798 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	e00a      	b.n	80027c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027aa:	f3af 8000 	nop.w
 80027ae:	4601      	mov	r1, r0
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	60ba      	str	r2, [r7, #8]
 80027b6:	b2ca      	uxtb	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3301      	adds	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	dbf0      	blt.n	80027aa <_read+0x12>
  }

  return len;
 80027c8:	687b      	ldr	r3, [r7, #4]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	e009      	b.n	80027f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	60ba      	str	r2, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3301      	adds	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	dbf1      	blt.n	80027e4 <_write+0x12>
  }
  return len;
 8002800:	687b      	ldr	r3, [r7, #4]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <_close>:

int _close(int file)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002832:	605a      	str	r2, [r3, #4]
  return 0;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <_isatty>:

int _isatty(int file)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800284a:	2301      	movs	r3, #1
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800287c:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <_sbrk+0x5c>)
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <_sbrk+0x60>)
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <_sbrk+0x64>)
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <_sbrk+0x68>)
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d207      	bcs.n	80028b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028a4:	f00c f90e 	bl	800eac4 <__errno>
 80028a8:	4603      	mov	r3, r0
 80028aa:	220c      	movs	r2, #12
 80028ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	e009      	b.n	80028c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <_sbrk+0x64>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <_sbrk+0x64>)
 80028c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028c6:	68fb      	ldr	r3, [r7, #12]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20020000 	.word	0x20020000
 80028d4:	00000400 	.word	0x00000400
 80028d8:	20000780 	.word	0x20000780
 80028dc:	200009f8 	.word	0x200009f8

080028e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <SystemInit+0x20>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <SystemInit+0x20>)
 80028ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f00c f875 	bl	800ea02 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <MX_TIM1_Init+0xa8>)
 8002922:	4a23      	ldr	r2, [pc, #140]	; (80029b0 <MX_TIM1_Init+0xac>)
 8002924:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <MX_TIM1_Init+0xa8>)
 8002928:	2200      	movs	r2, #0
 800292a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292c:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <MX_TIM1_Init+0xa8>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <MX_TIM1_Init+0xa8>)
 8002934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002938:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293a:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <MX_TIM1_Init+0xa8>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <MX_TIM1_Init+0xa8>)
 8002942:	2200      	movs	r2, #0
 8002944:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002946:	4b19      	ldr	r3, [pc, #100]	; (80029ac <MX_TIM1_Init+0xa8>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800294c:	2301      	movs	r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002954:	2301      	movs	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002960:	2300      	movs	r3, #0
 8002962:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002964:	2301      	movs	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002968:	2300      	movs	r3, #0
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002970:	f107 030c 	add.w	r3, r7, #12
 8002974:	4619      	mov	r1, r3
 8002976:	480d      	ldr	r0, [pc, #52]	; (80029ac <MX_TIM1_Init+0xa8>)
 8002978:	f005 fd12 	bl	80083a0 <HAL_TIM_Encoder_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002982:	f7ff fc17 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4806      	ldr	r0, [pc, #24]	; (80029ac <MX_TIM1_Init+0xa8>)
 8002994:	f006 fc00 	bl	8009198 <HAL_TIMEx_MasterConfigSynchronization>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800299e:	f7ff fc09 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029a2:	bf00      	nop
 80029a4:	3730      	adds	r7, #48	; 0x30
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000784 	.word	0x20000784
 80029b0:	40010000 	.word	0x40010000

080029b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08e      	sub	sp, #56	; 0x38
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c8:	f107 0320 	add.w	r3, r7, #32
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
 80029e0:	615a      	str	r2, [r3, #20]
 80029e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029e4:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <MX_TIM2_Init+0xe8>)
 80029e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <MX_TIM2_Init+0xe8>)
 80029ee:	2254      	movs	r2, #84	; 0x54
 80029f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f2:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <MX_TIM2_Init+0xe8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <MX_TIM2_Init+0xe8>)
 80029fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a00:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <MX_TIM2_Init+0xe8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <MX_TIM2_Init+0xe8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a0c:	4823      	ldr	r0, [pc, #140]	; (8002a9c <MX_TIM2_Init+0xe8>)
 8002a0e:	f005 fb57 	bl	80080c0 <HAL_TIM_Base_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a18:	f7ff fbcc 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a26:	4619      	mov	r1, r3
 8002a28:	481c      	ldr	r0, [pc, #112]	; (8002a9c <MX_TIM2_Init+0xe8>)
 8002a2a:	f005 ff9f 	bl	800896c <HAL_TIM_ConfigClockSource>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a34:	f7ff fbbe 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a38:	4818      	ldr	r0, [pc, #96]	; (8002a9c <MX_TIM2_Init+0xe8>)
 8002a3a:	f005 fb90 	bl	800815e <HAL_TIM_PWM_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a44:	f7ff fbb6 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a50:	f107 0320 	add.w	r3, r7, #32
 8002a54:	4619      	mov	r1, r3
 8002a56:	4811      	ldr	r0, [pc, #68]	; (8002a9c <MX_TIM2_Init+0xe8>)
 8002a58:	f006 fb9e 	bl	8009198 <HAL_TIMEx_MasterConfigSynchronization>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a62:	f7ff fba7 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a66:	2360      	movs	r3, #96	; 0x60
 8002a68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	2200      	movs	r2, #0
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4807      	ldr	r0, [pc, #28]	; (8002a9c <MX_TIM2_Init+0xe8>)
 8002a7e:	f005 feb3 	bl	80087e8 <HAL_TIM_PWM_ConfigChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002a88:	f7ff fb94 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a8c:	4803      	ldr	r0, [pc, #12]	; (8002a9c <MX_TIM2_Init+0xe8>)
 8002a8e:	f000 f875 	bl	8002b7c <HAL_TIM_MspPostInit>

}
 8002a92:	bf00      	nop
 8002a94:	3738      	adds	r7, #56	; 0x38
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200007cc 	.word	0x200007cc

08002aa0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <HAL_TIM_Encoder_MspInit+0x84>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d12c      	bne.n	8002b1c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <HAL_TIM_Encoder_MspInit+0x88>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a10      	ldr	r2, [pc, #64]	; (8002b28 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ae8:	f043 0310 	orr.w	r3, r3, #16
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_TIM_Encoder_MspInit+0x88>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002afa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	4619      	mov	r1, r3
 8002b16:	4805      	ldr	r0, [pc, #20]	; (8002b2c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b18:	f002 ffbc 	bl	8005a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	3728      	adds	r7, #40	; 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b40:	d115      	bne.n	8002b6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <HAL_TIM_Base_MspInit+0x48>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a0b      	ldr	r2, [pc, #44]	; (8002b78 <HAL_TIM_Base_MspInit+0x48>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_TIM_Base_MspInit+0x48>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	201c      	movs	r0, #28
 8002b64:	f002 fecd 	bl	8005902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b68:	201c      	movs	r0, #28
 8002b6a:	f002 fee6 	bl	800593a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800

08002b7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9c:	d11e      	bne.n	8002bdc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_TIM_MspPostInit+0x68>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a0f      	ldr	r2, [pc, #60]	; (8002be4 <HAL_TIM_MspPostInit+0x68>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_TIM_MspPostInit+0x68>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4804      	ldr	r0, [pc, #16]	; (8002be8 <HAL_TIM_MspPostInit+0x6c>)
 8002bd8:	f002 ff5c 	bl	8005a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020000 	.word	0x40020000

08002bec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <MX_USART2_UART_Init+0x4c>)
 8002bf2:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <MX_USART2_UART_Init+0x50>)
 8002bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <MX_USART2_UART_Init+0x4c>)
 8002bf8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <MX_USART2_UART_Init+0x4c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <MX_USART2_UART_Init+0x4c>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <MX_USART2_UART_Init+0x4c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <MX_USART2_UART_Init+0x4c>)
 8002c12:	220c      	movs	r2, #12
 8002c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c16:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <MX_USART2_UART_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <MX_USART2_UART_Init+0x4c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c22:	4805      	ldr	r0, [pc, #20]	; (8002c38 <MX_USART2_UART_Init+0x4c>)
 8002c24:	f006 fb48 	bl	80092b8 <HAL_UART_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c2e:	f7ff fac1 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000814 	.word	0x20000814
 8002c3c:	40004400 	.word	0x40004400

08002c40 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c44:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <MX_USART3_UART_Init+0x4c>)
 8002c46:	4a12      	ldr	r2, [pc, #72]	; (8002c90 <MX_USART3_UART_Init+0x50>)
 8002c48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <MX_USART3_UART_Init+0x4c>)
 8002c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <MX_USART3_UART_Init+0x4c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <MX_USART3_UART_Init+0x4c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <MX_USART3_UART_Init+0x4c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <MX_USART3_UART_Init+0x4c>)
 8002c66:	220c      	movs	r2, #12
 8002c68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <MX_USART3_UART_Init+0x4c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <MX_USART3_UART_Init+0x4c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c76:	4805      	ldr	r0, [pc, #20]	; (8002c8c <MX_USART3_UART_Init+0x4c>)
 8002c78:	f006 fb1e 	bl	80092b8 <HAL_UART_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c82:	f7ff fa97 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000085c 	.word	0x2000085c
 8002c90:	40004800 	.word	0x40004800

08002c94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08c      	sub	sp, #48	; 0x30
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 031c 	add.w	r3, r7, #28
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a3a      	ldr	r2, [pc, #232]	; (8002d9c <HAL_UART_MspInit+0x108>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d134      	bne.n	8002d20 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <HAL_UART_MspInit+0x10c>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a38      	ldr	r2, [pc, #224]	; (8002da0 <HAL_UART_MspInit+0x10c>)
 8002cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <HAL_UART_MspInit+0x10c>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <HAL_UART_MspInit+0x10c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a31      	ldr	r2, [pc, #196]	; (8002da0 <HAL_UART_MspInit+0x10c>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <HAL_UART_MspInit+0x10c>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cee:	230c      	movs	r3, #12
 8002cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cfe:	2307      	movs	r3, #7
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 031c 	add.w	r3, r7, #28
 8002d06:	4619      	mov	r1, r3
 8002d08:	4826      	ldr	r0, [pc, #152]	; (8002da4 <HAL_UART_MspInit+0x110>)
 8002d0a:	f002 fec3 	bl	8005a94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2100      	movs	r1, #0
 8002d12:	2026      	movs	r0, #38	; 0x26
 8002d14:	f002 fdf5 	bl	8005902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d18:	2026      	movs	r0, #38	; 0x26
 8002d1a:	f002 fe0e 	bl	800593a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002d1e:	e039      	b.n	8002d94 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a20      	ldr	r2, [pc, #128]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d134      	bne.n	8002d94 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <HAL_UART_MspInit+0x10c>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_UART_MspInit+0x10c>)
 8002d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_UART_MspInit+0x10c>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_UART_MspInit+0x10c>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <HAL_UART_MspInit+0x10c>)
 8002d50:	f043 0308 	orr.w	r3, r3, #8
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_UART_MspInit+0x10c>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d74:	2307      	movs	r3, #7
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d78:	f107 031c 	add.w	r3, r7, #28
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	480b      	ldr	r0, [pc, #44]	; (8002dac <HAL_UART_MspInit+0x118>)
 8002d80:	f002 fe88 	bl	8005a94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d84:	2200      	movs	r2, #0
 8002d86:	2100      	movs	r1, #0
 8002d88:	2027      	movs	r0, #39	; 0x27
 8002d8a:	f002 fdba 	bl	8005902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d8e:	2027      	movs	r0, #39	; 0x27
 8002d90:	f002 fdd3 	bl	800593a <HAL_NVIC_EnableIRQ>
}
 8002d94:	bf00      	nop
 8002d96:	3730      	adds	r7, #48	; 0x30
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40004400 	.word	0x40004400
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40020000 	.word	0x40020000
 8002da8:	40004800 	.word	0x40004800
 8002dac:	40020c00 	.word	0x40020c00

08002db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002db4:	f7ff fd94 	bl	80028e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002db8:	480c      	ldr	r0, [pc, #48]	; (8002dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dba:	490d      	ldr	r1, [pc, #52]	; (8002df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dc0:	e002      	b.n	8002dc8 <LoopCopyDataInit>

08002dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dc6:	3304      	adds	r3, #4

08002dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dcc:	d3f9      	bcc.n	8002dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dd0:	4c0a      	ldr	r4, [pc, #40]	; (8002dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd4:	e001      	b.n	8002dda <LoopFillZerobss>

08002dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd8:	3204      	adds	r2, #4

08002dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ddc:	d3fb      	bcc.n	8002dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dde:	f00b fe77 	bl	800ead0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002de2:	f7ff f965 	bl	80020b0 <main>
  bx  lr    
 8002de6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002df4:	080112d8 	.word	0x080112d8
  ldr r2, =_sbss
 8002df8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002dfc:	200009f4 	.word	0x200009f4

08002e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e00:	e7fe      	b.n	8002e00 <ADC_IRQHandler>
	...

08002e04 <_ZN9BarometreC1EP17I2C_HandleTypeDefh>:
 *      Author: onurd
 */
#include "Barometre.h"
#include <math.h>

Barometre::Barometre(I2C_HandleTypeDef* hi2c, uint8_t address)
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	71fb      	strb	r3, [r7, #7]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3306      	adds	r3, #6
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	611a      	str	r2, [r3, #16]
 8002e22:	829a      	strh	r2, [r3, #20]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <_ZN9BarometreC1EP17I2C_HandleTypeDefh+0x58>)
 8002e28:	61da      	str	r2, [r3, #28]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	621a      	str	r2, [r3, #32]
{
    this->hi2c=hi2c;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	601a      	str	r2, [r3, #0]
	this->address=address;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	79fa      	ldrb	r2, [r7, #7]
 8002e3c:	711a      	strb	r2, [r3, #4]
	T=0;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	665a      	str	r2, [r3, #100]	; 0x64
	P=0;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	47c5e680 	.word	0x47c5e680

08002e60 <_ZN9Barometre10YapilandirEv>:

void Barometre::Yapilandir()
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af04      	add	r7, sp, #16
 8002e66:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(hi2c, address, 0xAA, 1, calibDatas, 22, 100);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	791b      	ldrb	r3, [r3, #4]
 8002e70:	b299      	uxth	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3306      	adds	r3, #6
 8002e76:	2264      	movs	r2, #100	; 0x64
 8002e78:	9202      	str	r2, [sp, #8]
 8002e7a:	2216      	movs	r2, #22
 8002e7c:	9201      	str	r2, [sp, #4]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2301      	movs	r3, #1
 8002e82:	22aa      	movs	r2, #170	; 0xaa
 8002e84:	f003 fd4e 	bl	8006924 <HAL_I2C_Mem_Read>
	AC1 = (calibDatas[0] << 8) | calibDatas[1];
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	799b      	ldrb	r3, [r3, #6]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	b21a      	sxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	79db      	ldrb	r3, [r3, #7]
 8002e94:	b21b      	sxth	r3, r3
 8002e96:	4313      	orrs	r3, r2
 8002e98:	b21a      	sxth	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	849a      	strh	r2, [r3, #36]	; 0x24
	AC2 = (calibDatas[2] << 8) | calibDatas[3];
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7a1b      	ldrb	r3, [r3, #8]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	b21a      	sxth	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7a5b      	ldrb	r3, [r3, #9]
 8002eaa:	b21b      	sxth	r3, r3
 8002eac:	4313      	orrs	r3, r2
 8002eae:	b21a      	sxth	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	84da      	strh	r2, [r3, #38]	; 0x26
	AC3 = (calibDatas[4] << 8) | calibDatas[5];
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7a9b      	ldrb	r3, [r3, #10]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	b21a      	sxth	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7adb      	ldrb	r3, [r3, #11]
 8002ec0:	b21b      	sxth	r3, r3
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	b21a      	sxth	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	851a      	strh	r2, [r3, #40]	; 0x28
	AC4 = (calibDatas[6] << 8) | calibDatas[7];
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7b1b      	ldrb	r3, [r3, #12]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	b21a      	sxth	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	7b5b      	ldrb	r3, [r3, #13]
 8002ed6:	b21b      	sxth	r3, r3
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	b21b      	sxth	r3, r3
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
	AC5 = (calibDatas[8] << 8) | calibDatas[9];
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7b9b      	ldrb	r3, [r3, #14]
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	b21a      	sxth	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7bdb      	ldrb	r3, [r3, #15]
 8002eee:	b21b      	sxth	r3, r3
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	b21b      	sxth	r3, r3
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	859a      	strh	r2, [r3, #44]	; 0x2c
	AC6 =(calibDatas[10] << 8) | calibDatas[11];
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7c1b      	ldrb	r3, [r3, #16]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	b21a      	sxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	7c5b      	ldrb	r3, [r3, #17]
 8002f06:	b21b      	sxth	r3, r3
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	b21b      	sxth	r3, r3
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	85da      	strh	r2, [r3, #46]	; 0x2e
	B1 = (calibDatas[12] << 8) | calibDatas[13];
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	7c9b      	ldrb	r3, [r3, #18]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	b21a      	sxth	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	7cdb      	ldrb	r3, [r3, #19]
 8002f1e:	b21b      	sxth	r3, r3
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b21a      	sxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	861a      	strh	r2, [r3, #48]	; 0x30
	B2 = (calibDatas[14] << 8) | calibDatas[15];
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7d1b      	ldrb	r3, [r3, #20]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	b21a      	sxth	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7d5b      	ldrb	r3, [r3, #21]
 8002f34:	b21b      	sxth	r3, r3
 8002f36:	4313      	orrs	r3, r2
 8002f38:	b21a      	sxth	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	865a      	strh	r2, [r3, #50]	; 0x32
	MB = (calibDatas[16] << 8) | calibDatas[17];
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7d9b      	ldrb	r3, [r3, #22]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	b21a      	sxth	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	7ddb      	ldrb	r3, [r3, #23]
 8002f4a:	b21b      	sxth	r3, r3
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	b21a      	sxth	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	869a      	strh	r2, [r3, #52]	; 0x34
	MC = (calibDatas[18] << 8) | calibDatas[19];
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7e1b      	ldrb	r3, [r3, #24]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	b21a      	sxth	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7e5b      	ldrb	r3, [r3, #25]
 8002f60:	b21b      	sxth	r3, r3
 8002f62:	4313      	orrs	r3, r2
 8002f64:	b21a      	sxth	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	86da      	strh	r2, [r3, #54]	; 0x36
	MD = (calibDatas[20] << 8) | calibDatas[21];
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7e9b      	ldrb	r3, [r3, #26]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	b21a      	sxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7edb      	ldrb	r3, [r3, #27]
 8002f76:	b21b      	sxth	r3, r3
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	b21a      	sxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_ZN9Barometre11SicaklikOkuEv>:

float *Barometre::SicaklikOku()
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	 UT = regSicaklikOku();
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f99f 	bl	80032d4 <_ZN9Barometre14regSicaklikOkuEv>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461a      	mov	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	63da      	str	r2, [r3, #60]	; 0x3c
	 X1 = (UT - AC6) * AC5 >> 15;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002fac:	fb02 f303 	mul.w	r3, r2, r3
 8002fb0:	13da      	asrs	r2, r3, #15
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44
	 X2 = (MC << 11) / (X1 + MD);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8002fbc:	02da      	lsls	r2, r3, #11
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	f9b1 1038 	ldrsh.w	r1, [r1, #56]	; 0x38
 8002fc8:	440b      	add	r3, r1
 8002fca:	fb92 f2f3 	sdiv	r2, r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	649a      	str	r2, [r3, #72]	; 0x48
	 B5 = X1 + X2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fda:	441a      	add	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54
	 T = ((B5 + 8) >> 4) / 10.0;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	111b      	asrs	r3, r3, #4
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fa93 	bl	8000514 <__aeabi_i2d>
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <_ZN9Barometre11SicaklikOkuEv+0x90>)
 8002ff4:	f7fd fc22 	bl	800083c <__aeabi_ddiv>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	f7fd fdea 	bl	8000bd8 <__aeabi_d2f>
 8003004:	4602      	mov	r2, r0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	665a      	str	r2, [r3, #100]	; 0x64

    return &T ;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3364      	adds	r3, #100	; 0x64
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40240000 	.word	0x40240000

0800301c <_ZN9Barometre9BasincOkuEh>:

float Barometre::BasincOku(uint8_t oss)
{
 800301c:	b5b0      	push	{r4, r5, r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
	 UP = regBasincOku(oss);
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	4619      	mov	r1, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f971 	bl	8003314 <_ZN9Barometre12regBasincOkuEh>
 8003032:	4603      	mov	r3, r0
 8003034:	461a      	mov	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
	 B6 = B5 - 4000;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	659a      	str	r2, [r3, #88]	; 0x58
	 X1 = (B2 * ((B6 * B6) >> 12)) >> 11;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800304c:	4619      	mov	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	131b      	asrs	r3, r3, #12
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	12da      	asrs	r2, r3, #11
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	645a      	str	r2, [r3, #68]	; 0x44
	 X2 = (AC2 * B6) >> 11;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800306c:	461a      	mov	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	12da      	asrs	r2, r3, #11
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	649a      	str	r2, [r3, #72]	; 0x48
	 X3 = X1 + X2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003084:	441a      	add	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	64da      	str	r2, [r3, #76]	; 0x4c
	 B3 = (((AC1 * 4 + X3) << oss) + 2) >> 2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003090:	009a      	lsls	r2, r3, #2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003096:	441a      	add	r2, r3
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	3302      	adds	r3, #2
 80030a0:	109a      	asrs	r2, r3, #2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	651a      	str	r2, [r3, #80]	; 0x50
	 X1 = (AC3 * B6) >> 13;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80030ac:	461a      	mov	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	135a      	asrs	r2, r3, #13
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	645a      	str	r2, [r3, #68]	; 0x44
	 X2 = (B1 * ((B6 * B6) >> 12)) >> 16;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80030c2:	4619      	mov	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80030cc:	fb02 f303 	mul.w	r3, r2, r3
 80030d0:	131b      	asrs	r3, r3, #12
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	141a      	asrs	r2, r3, #16
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	649a      	str	r2, [r3, #72]	; 0x48
	 X3 = ((X1 + X2) + 2) >> 2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e4:	4413      	add	r3, r2
 80030e6:	3302      	adds	r3, #2
 80030e8:	109a      	asrs	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	64da      	str	r2, [r3, #76]	; 0x4c
	 B4 = (AC4 * (uint32_t)(X3 + 32768)) >> 15;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	461a      	mov	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030fc:	fb02 f303 	mul.w	r3, r2, r3
 8003100:	0bda      	lsrs	r2, r3, #15
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	65da      	str	r2, [r3, #92]	; 0x5c
	 B7 = ((uint32_t)UP - B3) * (50000 >> oss);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	461a      	mov	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	f24c 3150 	movw	r1, #50000	; 0xc350
 8003118:	fa41 f202 	asr.w	r2, r1, r2
 800311c:	fb03 f202 	mul.w	r2, r3, r2
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	661a      	str	r2, [r3, #96]	; 0x60
	 P = (B7 < 0x80000000) ? (B7 * 2) / B4 : (B7 / B4) * 2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003128:	2b00      	cmp	r3, #0
 800312a:	db0b      	blt.n	8003144 <_ZN9Barometre9BasincOkuEh+0x128>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003130:	005a      	lsls	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003142:	e00a      	b.n	800315a <_ZN9Barometre9BasincOkuEh+0x13e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	 X1 = (P / 256.0) * (P / 256.0);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd f9e7 	bl	8000538 <__aeabi_f2d>
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	4b2f      	ldr	r3, [pc, #188]	; (800322c <_ZN9Barometre9BasincOkuEh+0x210>)
 8003170:	f7fd fb64 	bl	800083c <__aeabi_ddiv>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4614      	mov	r4, r2
 800317a:	461d      	mov	r5, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd f9d9 	bl	8000538 <__aeabi_f2d>
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <_ZN9Barometre9BasincOkuEh+0x210>)
 800318c:	f7fd fb56 	bl	800083c <__aeabi_ddiv>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4620      	mov	r0, r4
 8003196:	4629      	mov	r1, r5
 8003198:	f7fd fa26 	bl	80005e8 <__aeabi_dmul>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	f7fd fcd0 	bl	8000b48 <__aeabi_d2iz>
 80031a8:	4602      	mov	r2, r0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
	 X1 = (X1 * 3038) >> 16;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f640 32de 	movw	r2, #3038	; 0xbde
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	141a      	asrs	r2, r3, #16
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	645a      	str	r2, [r3, #68]	; 0x44
	 X2 = (-7357 * P)  / 65536.0;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80031c6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003230 <_ZN9Barometre9BasincOkuEh+0x214>
 80031ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ce:	ee17 0a90 	vmov	r0, s15
 80031d2:	f7fd f9b1 	bl	8000538 <__aeabi_f2d>
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <_ZN9Barometre9BasincOkuEh+0x218>)
 80031dc:	f7fd fb2e 	bl	800083c <__aeabi_ddiv>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f7fd fcae 	bl	8000b48 <__aeabi_d2iz>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	649a      	str	r2, [r3, #72]	; 0x48
	 P += (X1 + X2 + 3791) >> 4;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003200:	4413      	add	r3, r2
 8003202:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8003206:	111b      	asrs	r3, r3, #4
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	 return P;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800321e:	ee07 3a90 	vmov	s15, r3
}
 8003222:	eeb0 0a67 	vmov.f32	s0, s15
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bdb0      	pop	{r4, r5, r7, pc}
 800322c:	40700000 	.word	0x40700000
 8003230:	c5e5e800 	.word	0xc5e5e800
 8003234:	40f00000 	.word	0x40f00000

08003238 <_ZN9Barometre9IrtifaOkuEh>:

float *Barometre::IrtifaOku(uint8_t oss)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
    BasincOku(oss);
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	4619      	mov	r1, r3
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fee7 	bl	800301c <_ZN9Barometre9BasincOkuEh>
    irtifa_f = (44330.0 * (1.0 - pow((P / 101325.0), 0.1903)));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd f970 	bl	8000538 <__aeabi_f2d>
 8003258:	a31c      	add	r3, pc, #112	; (adr r3, 80032cc <_ZN9Barometre9IrtifaOkuEh+0x94>)
 800325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325e:	f7fd faed 	bl	800083c <__aeabi_ddiv>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	ec43 2b17 	vmov	d7, r2, r3
 800326a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80032b8 <_ZN9Barometre9IrtifaOkuEh+0x80>
 800326e:	eeb0 0a47 	vmov.f32	s0, s14
 8003272:	eef0 0a67 	vmov.f32	s1, s15
 8003276:	f007 f8d9 	bl	800a42c <pow>
 800327a:	ec53 2b10 	vmov	r2, r3, d0
 800327e:	f04f 0000 	mov.w	r0, #0
 8003282:	4911      	ldr	r1, [pc, #68]	; (80032c8 <_ZN9Barometre9IrtifaOkuEh+0x90>)
 8003284:	f7fc fff8 	bl	8000278 <__aeabi_dsub>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	a30b      	add	r3, pc, #44	; (adr r3, 80032c0 <_ZN9Barometre9IrtifaOkuEh+0x88>)
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	f7fd f9a7 	bl	80005e8 <__aeabi_dmul>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4610      	mov	r0, r2
 80032a0:	4619      	mov	r1, r3
 80032a2:	f7fd fc99 	bl	8000bd8 <__aeabi_d2f>
 80032a6:	4602      	mov	r2, r0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	621a      	str	r2, [r3, #32]
    return &irtifa_f;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3320      	adds	r3, #32
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	1a36e2eb 	.word	0x1a36e2eb
 80032bc:	3fc85bc0 	.word	0x3fc85bc0
 80032c0:	00000000 	.word	0x00000000
 80032c4:	40e5a540 	.word	0x40e5a540
 80032c8:	3ff00000 	.word	0x3ff00000
 80032cc:	00000000 	.word	0x00000000
 80032d0:	40f8bcd0 	.word	0x40f8bcd0

080032d4 <_ZN9Barometre14regSicaklikOkuEv>:

uint16_t Barometre::regSicaklikOku()
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af02      	add	r7, sp, #8
 80032da:	6078      	str	r0, [r7, #4]
    data = 0x2E;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	222e      	movs	r2, #46	; 0x2e
 80032e0:	715a      	strb	r2, [r3, #5]
    uint8_t tempRAW[2] = {0};
 80032e2:	2300      	movs	r3, #0
 80032e4:	81bb      	strh	r3, [r7, #12]

    writeAndRead(tempRAW, data, 'T', 4);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	795a      	ldrb	r2, [r3, #5]
 80032ea:	f107 010c 	add.w	r1, r7, #12
 80032ee:	2304      	movs	r3, #4
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	2354      	movs	r3, #84	; 0x54
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f83d 	bl	8003374 <_ZN9Barometre12writeAndReadEPhhch>
    return ((tempRAW[0] << 8) | tempRAW[1]);
 80032fa:	7b3b      	ldrb	r3, [r7, #12]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	b21a      	sxth	r2, r3
 8003300:	7b7b      	ldrb	r3, [r7, #13]
 8003302:	b21b      	sxth	r3, r3
 8003304:	4313      	orrs	r3, r2
 8003306:	b21b      	sxth	r3, r3
 8003308:	b29b      	uxth	r3, r3
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <_ZN9Barometre12regBasincOkuEh>:

uint16_t Barometre::regBasincOku(uint8_t oss)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af02      	add	r7, sp, #8
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
    data = 0x34 + (oss << 6);
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	019b      	lsls	r3, r3, #6
 8003324:	b2db      	uxtb	r3, r3
 8003326:	3334      	adds	r3, #52	; 0x34
 8003328:	b2da      	uxtb	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	715a      	strb	r2, [r3, #5]
    uint8_t pressRaw[3] = {0};
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <_ZN9Barometre12regBasincOkuEh+0x5c>)
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	81bb      	strh	r3, [r7, #12]
 8003334:	2300      	movs	r3, #0
 8003336:	73bb      	strb	r3, [r7, #14]

    writeAndRead(pressRaw, data, 'P', oss);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	795a      	ldrb	r2, [r3, #5]
 800333c:	f107 010c 	add.w	r1, r7, #12
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2350      	movs	r3, #80	; 0x50
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f814 	bl	8003374 <_ZN9Barometre12writeAndReadEPhhch>
    return (((pressRaw[0] << 16) + (pressRaw[1] << 8) + pressRaw[2]) >> (8 - oss));
 800334c:	7b3b      	ldrb	r3, [r7, #12]
 800334e:	041a      	lsls	r2, r3, #16
 8003350:	7b7b      	ldrb	r3, [r7, #13]
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	4413      	add	r3, r2
 8003356:	7bba      	ldrb	r2, [r7, #14]
 8003358:	441a      	add	r2, r3
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	f1c3 0308 	rsb	r3, r3, #8
 8003360:	fa42 f303 	asr.w	r3, r2, r3
 8003364:	b29b      	uxth	r3, r3
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	08010858 	.word	0x08010858

08003374 <_ZN9Barometre12writeAndReadEPhhch>:

void Barometre::writeAndRead(uint8_t* raw, uint8_t data, char sens, uint8_t oss)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af04      	add	r7, sp, #16
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	460b      	mov	r3, r1
 8003384:	71fb      	strb	r3, [r7, #7]
 8003386:	4613      	mov	r3, r2
 8003388:	71bb      	strb	r3, [r7, #6]
    uint8_t size;
    HAL_I2C_Mem_Write(hi2c, address, 0xF4, 1, &data, 1, 100);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	791b      	ldrb	r3, [r3, #4]
 8003392:	b299      	uxth	r1, r3
 8003394:	2364      	movs	r3, #100	; 0x64
 8003396:	9302      	str	r3, [sp, #8]
 8003398:	2301      	movs	r3, #1
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2301      	movs	r3, #1
 80033a2:	22f4      	movs	r2, #244	; 0xf4
 80033a4:	f003 f9c4 	bl	8006730 <HAL_I2C_Mem_Write>

    if (sens == 'P')
 80033a8:	79bb      	ldrb	r3, [r7, #6]
 80033aa:	2b50      	cmp	r3, #80	; 0x50
 80033ac:	d121      	bne.n	80033f2 <_ZN9Barometre12writeAndReadEPhhch+0x7e>
    {
        size = 3;
 80033ae:	2303      	movs	r3, #3
 80033b0:	75fb      	strb	r3, [r7, #23]
        if (oss == 0) HAL_Delay(5);
 80033b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <_ZN9Barometre12writeAndReadEPhhch+0x4e>
 80033ba:	2005      	movs	r0, #5
 80033bc:	f002 f9a2 	bl	8005704 <HAL_Delay>
 80033c0:	e01c      	b.n	80033fc <_ZN9Barometre12writeAndReadEPhhch+0x88>
        else if (oss == 1) HAL_Delay(8);
 80033c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d103      	bne.n	80033d2 <_ZN9Barometre12writeAndReadEPhhch+0x5e>
 80033ca:	2008      	movs	r0, #8
 80033cc:	f002 f99a 	bl	8005704 <HAL_Delay>
 80033d0:	e014      	b.n	80033fc <_ZN9Barometre12writeAndReadEPhhch+0x88>
        else if (oss == 2) HAL_Delay(14);
 80033d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d103      	bne.n	80033e2 <_ZN9Barometre12writeAndReadEPhhch+0x6e>
 80033da:	200e      	movs	r0, #14
 80033dc:	f002 f992 	bl	8005704 <HAL_Delay>
 80033e0:	e00c      	b.n	80033fc <_ZN9Barometre12writeAndReadEPhhch+0x88>
        else if (oss == 3) HAL_Delay(26);
 80033e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d108      	bne.n	80033fc <_ZN9Barometre12writeAndReadEPhhch+0x88>
 80033ea:	201a      	movs	r0, #26
 80033ec:	f002 f98a 	bl	8005704 <HAL_Delay>
 80033f0:	e004      	b.n	80033fc <_ZN9Barometre12writeAndReadEPhhch+0x88>
    }
    else
    {
        size = 2;
 80033f2:	2302      	movs	r3, #2
 80033f4:	75fb      	strb	r3, [r7, #23]
        HAL_Delay(5);
 80033f6:	2005      	movs	r0, #5
 80033f8:	f002 f984 	bl	8005704 <HAL_Delay>
    }

    HAL_I2C_Mem_Read(hi2c, address, 0xF6, 1, raw, size, 100);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	791b      	ldrb	r3, [r3, #4]
 8003404:	b299      	uxth	r1, r3
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	b29b      	uxth	r3, r3
 800340a:	2264      	movs	r2, #100	; 0x64
 800340c:	9202      	str	r2, [sp, #8]
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2301      	movs	r3, #1
 8003416:	22f6      	movs	r2, #246	; 0xf6
 8003418:	f003 fa84 	bl	8006924 <HAL_I2C_Mem_Read>
}
 800341c:	bf00      	nop
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <_ZN3GPSC1EP20__UART_HandleTypeDef>:
 *  Created on: Jun 29, 2024
 *      Author: onurd
 */
#include "Gps.h"

GPS::GPS(UART_HandleTypeDef* huart)
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
{
	this->huart_=huart;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	601a      	str	r2, [r3, #0]
	this->rxIndex_u8=0;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	this->rxData_u8=0;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	this->latitude_f32=0;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	this->longitude_f32=0;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_ZN3GPS10YapilandirEv>:

void GPS::Yapilandir()
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
    lwgps_init(&gps_);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3308      	adds	r3, #8
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe fd4e 	bl	8001f14 <lwgps_init>
    HAL_UART_Receive_IT(huart_, &rxData_u8, 1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f203 1339 	addw	r3, r3, #313	; 0x139
 8003482:	2201      	movs	r2, #1
 8003484:	4619      	mov	r1, r3
 8003486:	f005 fff2 	bl	800946e <HAL_UART_Receive_IT>
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <_ZN3GPS18UartRxCpltCallbackEv>:

void GPS::UartRxCpltCallback()
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
    if (rxData_u8 != '\n' && rxIndex_u8 < sizeof(rxBuffer_))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 80034a0:	2b0a      	cmp	r3, #10
 80034a2:	d016      	beq.n	80034d2 <_ZN3GPS18UartRxCpltCallbackEv+0x40>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80034aa:	b25b      	sxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	db10      	blt.n	80034d2 <_ZN3GPS18UartRxCpltCallbackEv+0x40>
    {
        rxBuffer_[rxIndex_u8++] = rxData_u8;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	b2d1      	uxtb	r1, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	f882 1138 	strb.w	r1, [r2, #312]	; 0x138
 80034c0:	4619      	mov	r1, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	440b      	add	r3, r1
 80034cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80034d0:	e017      	b.n	8003502 <_ZN3GPS18UartRxCpltCallbackEv+0x70>
    }
    else
    {
        lwgps_process(&gps_, rxBuffer_, rxIndex_u8 + 1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f103 0008 	add.w	r0, r3, #8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80034e4:	3301      	adds	r3, #1
 80034e6:	461a      	mov	r2, r3
 80034e8:	f7fe fd22 	bl	8001f30 <lwgps_process>
        GpsDataCek();
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f815 	bl	800351c <_ZN3GPS10GpsDataCekEv>
        rxIndex_u8 = 0;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
        rxData_u8 = 0;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    }
    HAL_UART_Receive_IT(huart_, &rxData_u8, 1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f203 1339 	addw	r3, r3, #313	; 0x139
 800350c:	2201      	movs	r2, #1
 800350e:	4619      	mov	r1, r3
 8003510:	f005 ffad 	bl	800946e <HAL_UART_Receive_IT>
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_ZN3GPS10GpsDataCekEv>:

void GPS::GpsDataCek()
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	latitude_f32 = gps_.latitude;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	f7fd fb53 	bl	8000bd8 <__aeabi_d2f>
 8003532:	4602      	mov	r2, r0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	longitude_f32 = gps_.longitude;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	f7fd fb48 	bl	8000bd8 <__aeabi_d2f>
 8003548:	4602      	mov	r2, r0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <_ZN3GPS10LatitudeAlEv>:

float* GPS::LatitudeAl(){return &latitude_f32;}
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <_ZN3GPS11LongitudeAlEv>:

float* GPS::LongitudeAl(){return &longitude_f32;}
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <_ZN5MyImuC1EP17I2C_HandleTypeDef>:
#define ACC_CNFG_REG 0X1C
#define MPU6500_ADDRESS 0x68<< 1
#define WHO_AM_I 0x75
#define RESET_BIT 0x80

MyImu::MyImu(I2C_HandleTypeDef *hi2c)
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
{
	this->hi2c=hi2c;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	601a      	str	r2, [r3, #0]
}
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <_ZN5MyImu17DBC_MPU6500_ResetEv>:

void MyImu::DBC_MPU6500_Reset()
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af04      	add	r7, sp, #16
 80035b0:	6078      	str	r0, [r7, #4]
	data_u8 = RESET_BIT;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2280      	movs	r2, #128	; 0x80
 80035b6:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS , PWR_MGMT_1_REG, 1, &data_u8, 1, 100);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	2264      	movs	r2, #100	; 0x64
 80035c2:	9202      	str	r2, [sp, #8]
 80035c4:	2201      	movs	r2, #1
 80035c6:	9201      	str	r2, [sp, #4]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2301      	movs	r3, #1
 80035cc:	226b      	movs	r2, #107	; 0x6b
 80035ce:	21d0      	movs	r1, #208	; 0xd0
 80035d0:	f003 f8ae 	bl	8006730 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80035d4:	2064      	movs	r0, #100	; 0x64
 80035d6:	f002 f895 	bl	8005704 <HAL_Delay>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv>:
void MyImu::DBC_MPU6500_YAPILANDIR()
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b088      	sub	sp, #32
 80035e6:	af04      	add	r7, sp, #16
 80035e8:	6078      	str	r0, [r7, #4]
	uint8_t check_u8;
	DBC_MPU6500_Reset();
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ffdd 	bl	80035aa <_ZN5MyImu17DBC_MPU6500_ResetEv>
	// yoklama sorgusu versiyon sorgusu crc kontrol ,

	HAL_I2C_Mem_Read(hi2c, MPU6500_ADDRESS , WHO_AM_I, 1, &check_u8, 1, 1000);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035f8:	9302      	str	r3, [sp, #8]
 80035fa:	2301      	movs	r3, #1
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	f107 030f 	add.w	r3, r7, #15
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	2301      	movs	r3, #1
 8003606:	2275      	movs	r2, #117	; 0x75
 8003608:	21d0      	movs	r1, #208	; 0xd0
 800360a:	f003 f98b 	bl	8006924 <HAL_I2C_Mem_Read>
	if (check_u8 == 0x70)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	2b70      	cmp	r3, #112	; 0x70
 8003612:	d147      	bne.n	80036a4 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv+0xc2>
	{
		data_u8 = 0x00;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS , PWR_MGMT_1_REG, 1, &data_u8, 1, 1000);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3304      	adds	r3, #4
 8003622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003626:	9202      	str	r2, [sp, #8]
 8003628:	2201      	movs	r2, #1
 800362a:	9201      	str	r2, [sp, #4]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2301      	movs	r3, #1
 8003630:	226b      	movs	r2, #107	; 0x6b
 8003632:	21d0      	movs	r1, #208	; 0xd0
 8003634:	f003 f87c 	bl	8006730 <HAL_I2C_Mem_Write>
		// SMPLRT_DIV register
		data_u8 = 0x07;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2207      	movs	r2, #7
 800363c:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS ,SMPLRT_DIV_REG, 1, &data_u8, 1, 1000);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3304      	adds	r3, #4
 8003646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800364a:	9202      	str	r2, [sp, #8]
 800364c:	2201      	movs	r2, #1
 800364e:	9201      	str	r2, [sp, #4]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2301      	movs	r3, #1
 8003654:	2219      	movs	r2, #25
 8003656:	21d0      	movs	r1, #208	; 0xd0
 8003658:	f003 f86a 	bl	8006730 <HAL_I2C_Mem_Write>
		//  ACCEL_CONFIG Register ±2g(00),±4g(01),±8g(10),±16g(11) 4:3
		data_u8 = 0x00;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS, ACC_CNFG_REG, 1, &data_u8, 1, 1000);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800366e:	9202      	str	r2, [sp, #8]
 8003670:	2201      	movs	r2, #1
 8003672:	9201      	str	r2, [sp, #4]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2301      	movs	r3, #1
 8003678:	221c      	movs	r2, #28
 800367a:	21d0      	movs	r1, #208	; 0xd0
 800367c:	f003 f858 	bl	8006730 <HAL_I2C_Mem_Write>
		//  GYRO_CONFIG Register +250dps(00),+500dps(01),+1000dps(10),+2000dps(11) 4:3
		data_u8 = 0x00;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS , GYRO_CNFG_REG, 1, &data_u8, 1, 1000);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003692:	9202      	str	r2, [sp, #8]
 8003694:	2201      	movs	r2, #1
 8003696:	9201      	str	r2, [sp, #4]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2301      	movs	r3, #1
 800369c:	221b      	movs	r2, #27
 800369e:	21d0      	movs	r1, #208	; 0xd0
 80036a0:	f003 f846 	bl	8006730 <HAL_I2C_Mem_Write>
	}
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <_ZN5MyImu14DBC_GYRO_OFSETEv>:

void MyImu::DBC_GYRO_OFSET()
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	for(int i=0; i<2000; i++)
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	e032      	b.n	8003720 <_ZN5MyImu14DBC_GYRO_OFSETEv+0x74>
	{
		DBC_GYRO_OKU();
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f92c 	bl	8003918 <_ZN5MyImu12DBC_GYRO_OKUEv>

		gyroHesap[0] += gyroEksen[0];
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	ed93 7a05 	vldr	s14, [r3, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	edc3 7a05 	vstr	s15, [r3, #20]
	    gyroHesap[1] += gyroEksen[1];
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	ed93 7a06 	vldr	s14, [r3, #24]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	edc3 7a06 	vstr	s15, [r3, #24]
	    gyroHesap[2] += gyroEksen[2];
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	ed93 7a07 	vldr	s14, [r3, #28]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	edc3 7a07 	vstr	s15, [r3, #28]
	for(int i=0; i<2000; i++)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3301      	adds	r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003726:	dbc8      	blt.n	80036ba <_ZN5MyImu14DBC_GYRO_OFSETEv+0xe>
	 }
		gyroHesap[0] /= 2000;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	ed93 7a05 	vldr	s14, [r3, #20]
 800372e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003774 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 8003732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	edc3 7a05 	vstr	s15, [r3, #20]
		gyroHesap[1] /= 2000;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003742:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003774 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 8003746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	edc3 7a06 	vstr	s15, [r3, #24]
	    gyroHesap[2] /= 2000;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	ed93 7a07 	vldr	s14, [r3, #28]
 8003756:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003774 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 800375a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	edc3 7a07 	vstr	s15, [r3, #28]
	    //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	    HAL_Delay(100);
 8003764:	2064      	movs	r0, #100	; 0x64
 8003766:	f001 ffcd 	bl	8005704 <HAL_Delay>
}
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	44fa0000 	.word	0x44fa0000

08003778 <_ZN5MyImu12DBC_DATA_OKUEv>:
void MyImu::DBC_DATA_OKU()
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
    DBC_ACC_OKU();
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f843 	bl	800380c <_ZN5MyImu11DBC_ACC_OKUEv>
    DBC_SICAKLIK_OKU();
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f87a 	bl	8003880 <_ZN5MyImu16DBC_SICAKLIK_OKUEv>
    DBC_GYRO_OKU();
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8c3 	bl	8003918 <_ZN5MyImu12DBC_GYRO_OKUEv>

    gyroEksen[0] -= gyroHesap[0];
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80037a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ae:	ee17 3a90 	vmov	r3, s15
 80037b2:	b21a      	sxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	80da      	strh	r2, [r3, #6]
    gyroEksen[1] -= gyroHesap[1];
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80037cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037d4:	ee17 3a90 	vmov	r3, s15
 80037d8:	b21a      	sxth	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	811a      	strh	r2, [r3, #8]
    gyroEksen[2] -= gyroHesap[2];
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80037f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037fa:	ee17 3a90 	vmov	r3, s15
 80037fe:	b21a      	sxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	815a      	strh	r2, [r3, #10]
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_ZN5MyImu11DBC_ACC_OKUEv>:
void MyImu::DBC_ACC_OKU()
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af02      	add	r7, sp, #8
 8003812:	6078      	str	r0, [r7, #4]
	uint8_t accBuffer[6];

	accBuffer[0] = 0x3B;
 8003814:	233b      	movs	r3, #59	; 0x3b
 8003816:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c, MPU6500_ADDRESS, accBuffer, 1, 10);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	f107 0208 	add.w	r2, r7, #8
 8003820:	230a      	movs	r3, #10
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2301      	movs	r3, #1
 8003826:	21d0      	movs	r1, #208	; 0xd0
 8003828:	f002 fc52 	bl	80060d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU6500_ADDRESS, accBuffer, 6, 10);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	f107 0208 	add.w	r2, r7, #8
 8003834:	230a      	movs	r3, #10
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	2306      	movs	r3, #6
 800383a:	21d0      	movs	r1, #208	; 0xd0
 800383c:	f002 fd46 	bl	80062cc <HAL_I2C_Master_Receive>
	accEksen[0] = (accBuffer[0] << 8 | accBuffer[1]);
 8003840:	7a3b      	ldrb	r3, [r7, #8]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	b21a      	sxth	r2, r3
 8003846:	7a7b      	ldrb	r3, [r7, #9]
 8003848:	b21b      	sxth	r3, r3
 800384a:	4313      	orrs	r3, r2
 800384c:	b21a      	sxth	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	819a      	strh	r2, [r3, #12]
	accEksen[1] = (accBuffer[2] << 8 | accBuffer[3]);
 8003852:	7abb      	ldrb	r3, [r7, #10]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	b21a      	sxth	r2, r3
 8003858:	7afb      	ldrb	r3, [r7, #11]
 800385a:	b21b      	sxth	r3, r3
 800385c:	4313      	orrs	r3, r2
 800385e:	b21a      	sxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	81da      	strh	r2, [r3, #14]
	accEksen[2] = (accBuffer[4] << 8 | accBuffer[5]);
 8003864:	7b3b      	ldrb	r3, [r7, #12]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	b21a      	sxth	r2, r3
 800386a:	7b7b      	ldrb	r3, [r7, #13]
 800386c:	b21b      	sxth	r3, r3
 800386e:	4313      	orrs	r3, r2
 8003870:	b21a      	sxth	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	821a      	strh	r2, [r3, #16]
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <_ZN5MyImu16DBC_SICAKLIK_OKUEv>:
void MyImu::DBC_SICAKLIK_OKU()
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
	uint8_t sicaklikBuffer[2];

	sicaklikBuffer[0] = 0x41;
 8003888:	2341      	movs	r3, #65	; 0x41
 800388a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hi2c, MPU6500_ADDRESS, sicaklikBuffer, 1, 10);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	f107 020c 	add.w	r2, r7, #12
 8003894:	230a      	movs	r3, #10
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2301      	movs	r3, #1
 800389a:	21d0      	movs	r1, #208	; 0xd0
 800389c:	f002 fc18 	bl	80060d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU6500_ADDRESS, sicaklikBuffer, 2, 10);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	f107 020c 	add.w	r2, r7, #12
 80038a8:	230a      	movs	r3, #10
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2302      	movs	r3, #2
 80038ae:	21d0      	movs	r1, #208	; 0xd0
 80038b0:	f002 fd0c 	bl	80062cc <HAL_I2C_Master_Receive>
	hamSicaklik_u16 = (sicaklikBuffer[0] << 8 | sicaklikBuffer[1]);
 80038b4:	7b3b      	ldrb	r3, [r7, #12]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	b21a      	sxth	r2, r3
 80038ba:	7b7b      	ldrb	r3, [r7, #13]
 80038bc:	b21b      	sxth	r3, r3
 80038be:	4313      	orrs	r3, r2
 80038c0:	b21b      	sxth	r3, r3
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	Sicaklik_f=((float)((float)hamSicaklik_u16 / 333.87)) + 21;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d8:	ee17 0a90 	vmov	r0, s15
 80038dc:	f7fc fe2c 	bl	8000538 <__aeabi_f2d>
 80038e0:	a30b      	add	r3, pc, #44	; (adr r3, 8003910 <_ZN5MyImu16DBC_SICAKLIK_OKUEv+0x90>)
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e6:	f7fc ffa9 	bl	800083c <__aeabi_ddiv>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4610      	mov	r0, r2
 80038f0:	4619      	mov	r1, r3
 80038f2:	f7fd f971 	bl	8000bd8 <__aeabi_d2f>
 80038f6:	ee07 0a10 	vmov	s14, r0
 80038fa:	eef3 7a05 	vmov.f32	s15, #53	; 0x41a80000  21.0
 80038fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	851eb852 	.word	0x851eb852
 8003914:	4074ddeb 	.word	0x4074ddeb

08003918 <_ZN5MyImu12DBC_GYRO_OKUEv>:
void MyImu::DBC_GYRO_OKU()
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af02      	add	r7, sp, #8
 800391e:	6078      	str	r0, [r7, #4]
	uint8_t gyroBuffer[6];

	gyroBuffer[0] = 0x43;
 8003920:	2343      	movs	r3, #67	; 0x43
 8003922:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c, MPU6500_ADDRESS, gyroBuffer, 1, 10);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	f107 0208 	add.w	r2, r7, #8
 800392c:	230a      	movs	r3, #10
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	2301      	movs	r3, #1
 8003932:	21d0      	movs	r1, #208	; 0xd0
 8003934:	f002 fbcc 	bl	80060d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU6500_ADDRESS, gyroBuffer, 6, 10);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	f107 0208 	add.w	r2, r7, #8
 8003940:	230a      	movs	r3, #10
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2306      	movs	r3, #6
 8003946:	21d0      	movs	r1, #208	; 0xd0
 8003948:	f002 fcc0 	bl	80062cc <HAL_I2C_Master_Receive>
	gyroEksen[0] = (gyroBuffer[0] << 8 | gyroBuffer[1]);
 800394c:	7a3b      	ldrb	r3, [r7, #8]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	b21a      	sxth	r2, r3
 8003952:	7a7b      	ldrb	r3, [r7, #9]
 8003954:	b21b      	sxth	r3, r3
 8003956:	4313      	orrs	r3, r2
 8003958:	b21a      	sxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	80da      	strh	r2, [r3, #6]
	gyroEksen[1] = (gyroBuffer[2] << 8 | gyroBuffer[3]);
 800395e:	7abb      	ldrb	r3, [r7, #10]
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	b21a      	sxth	r2, r3
 8003964:	7afb      	ldrb	r3, [r7, #11]
 8003966:	b21b      	sxth	r3, r3
 8003968:	4313      	orrs	r3, r2
 800396a:	b21a      	sxth	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	811a      	strh	r2, [r3, #8]
	gyroEksen[2] = (gyroBuffer[4] << 8 | gyroBuffer[5]);
 8003970:	7b3b      	ldrb	r3, [r7, #12]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	b21a      	sxth	r2, r3
 8003976:	7b7b      	ldrb	r3, [r7, #13]
 8003978:	b21b      	sxth	r3, r3
 800397a:	4313      	orrs	r3, r2
 800397c:	b21a      	sxth	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	815a      	strh	r2, [r3, #10]

}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	0000      	movs	r0, r0
 800398c:	0000      	movs	r0, r0
	...

08003990 <_ZN5MyImu13DBC_ACI_BULMAEv>:
void MyImu::DBC_ACI_BULMA()
{
 8003990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
	DBC_DATA_OKU();//0.0014 0.000001066
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff feec 	bl	8003778 <_ZN5MyImu12DBC_DATA_OKUEv>
	//Ham Veri Iyilestirmeleri
	gyroPitchAci_f += gyroEksen[0] * 0.000207;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fc fdc7 	bl	8000538 <__aeabi_f2d>
 80039aa:	4604      	mov	r4, r0
 80039ac:	460d      	mov	r5, r1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fc fdad 	bl	8000514 <__aeabi_i2d>
 80039ba:	a3cf      	add	r3, pc, #828	; (adr r3, 8003cf8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x368>)
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f7fc fe12 	bl	80005e8 <__aeabi_dmul>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4620      	mov	r0, r4
 80039ca:	4629      	mov	r1, r5
 80039cc:	f7fc fc56 	bl	800027c <__adddf3>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4610      	mov	r0, r2
 80039d6:	4619      	mov	r1, r3
 80039d8:	f7fd f8fe 	bl	8000bd8 <__aeabi_d2f>
 80039dc:	4602      	mov	r2, r0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	631a      	str	r2, [r3, #48]	; 0x30
	gyroRollAci_f += gyroEksen[1] * 0.000207;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fc fda6 	bl	8000538 <__aeabi_f2d>
 80039ec:	4604      	mov	r4, r0
 80039ee:	460d      	mov	r5, r1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fc fd8c 	bl	8000514 <__aeabi_i2d>
 80039fc:	a3be      	add	r3, pc, #760	; (adr r3, 8003cf8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x368>)
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	f7fc fdf1 	bl	80005e8 <__aeabi_dmul>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	f7fc fc35 	bl	800027c <__adddf3>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f7fd f8dd 	bl	8000bd8 <__aeabi_d2f>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c
	gyroYawAci_f += gyroEksen[2] * 0.000207;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fd85 	bl	8000538 <__aeabi_f2d>
 8003a2e:	4604      	mov	r4, r0
 8003a30:	460d      	mov	r5, r1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fc fd6b 	bl	8000514 <__aeabi_i2d>
 8003a3e:	a3ae      	add	r3, pc, #696	; (adr r3, 8003cf8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x368>)
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f7fc fdd0 	bl	80005e8 <__aeabi_dmul>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	4629      	mov	r1, r5
 8003a50:	f7fc fc14 	bl	800027c <__adddf3>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f7fd f8bc 	bl	8000bd8 <__aeabi_d2f>
 8003a60:	4602      	mov	r2, r0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34

	gyroPitchAci_f += gyroRollAci_f * sin(gyroEksen[2]* 0.000001066);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fc fd64 	bl	8000538 <__aeabi_f2d>
 8003a70:	4604      	mov	r4, r0
 8003a72:	460d      	mov	r5, r1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fc fd5d 	bl	8000538 <__aeabi_f2d>
 8003a7e:	4680      	mov	r8, r0
 8003a80:	4689      	mov	r9, r1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fc fd43 	bl	8000514 <__aeabi_i2d>
 8003a8e:	a39c      	add	r3, pc, #624	; (adr r3, 8003d00 <_ZN5MyImu13DBC_ACI_BULMAEv+0x370>)
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f7fc fda8 	bl	80005e8 <__aeabi_dmul>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	ec43 2b17 	vmov	d7, r2, r3
 8003aa0:	eeb0 0a47 	vmov.f32	s0, s14
 8003aa4:	eef0 0a67 	vmov.f32	s1, s15
 8003aa8:	f006 fd66 	bl	800a578 <sin>
 8003aac:	ec53 2b10 	vmov	r2, r3, d0
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	f7fc fd98 	bl	80005e8 <__aeabi_dmul>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4620      	mov	r0, r4
 8003abe:	4629      	mov	r1, r5
 8003ac0:	f7fc fbdc 	bl	800027c <__adddf3>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	f7fd f884 	bl	8000bd8 <__aeabi_d2f>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
	gyroRollAci_f -= gyroPitchAci_f * sin(gyroEksen[2]* 0.000001066);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fc fd2c 	bl	8000538 <__aeabi_f2d>
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	460d      	mov	r5, r1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fc fd25 	bl	8000538 <__aeabi_f2d>
 8003aee:	4680      	mov	r8, r0
 8003af0:	4689      	mov	r9, r1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc fd0b 	bl	8000514 <__aeabi_i2d>
 8003afe:	a380      	add	r3, pc, #512	; (adr r3, 8003d00 <_ZN5MyImu13DBC_ACI_BULMAEv+0x370>)
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f7fc fd70 	bl	80005e8 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	ec43 2b17 	vmov	d7, r2, r3
 8003b10:	eeb0 0a47 	vmov.f32	s0, s14
 8003b14:	eef0 0a67 	vmov.f32	s1, s15
 8003b18:	f006 fd2e 	bl	800a578 <sin>
 8003b1c:	ec53 2b10 	vmov	r2, r3, d0
 8003b20:	4640      	mov	r0, r8
 8003b22:	4649      	mov	r1, r9
 8003b24:	f7fc fd60 	bl	80005e8 <__aeabi_dmul>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	4629      	mov	r1, r5
 8003b30:	f7fc fba2 	bl	8000278 <__aeabi_dsub>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4610      	mov	r0, r2
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	f7fd f84c 	bl	8000bd8 <__aeabi_d2f>
 8003b40:	4602      	mov	r2, r0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	62da      	str	r2, [r3, #44]	; 0x2c

	accToplamVektor_s16 = sqrt((accEksen[0]*accEksen[0])+(accEksen[1]*accEksen[1])+(accEksen[2]*accEksen[2]));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b54:	fb03 f202 	mul.w	r2, r3, r2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	441a      	add	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b72:	4619      	mov	r1, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fc fcc7 	bl	8000514 <__aeabi_i2d>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	ec43 2b10 	vmov	d0, r2, r3
 8003b8e:	f006 fcbd 	bl	800a50c <sqrt>
 8003b92:	ec53 2b10 	vmov	r2, r3, d0
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f7fc ffd5 	bl	8000b48 <__aeabi_d2iz>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	b21a      	sxth	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	841a      	strh	r2, [r3, #32]

	//57.296 =1 /(3.142 /180)
	accPitchAci_f = asin((float)accEksen[1]/accToplamVektor_s16)*57.296;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bc2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bc6:	ee16 0a90 	vmov	r0, s13
 8003bca:	f7fc fcb5 	bl	8000538 <__aeabi_f2d>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	ec43 2b10 	vmov	d0, r2, r3
 8003bd6:	f006 fbc5 	bl	800a364 <asin>
 8003bda:	ec51 0b10 	vmov	r0, r1, d0
 8003bde:	a34a      	add	r3, pc, #296	; (adr r3, 8003d08 <_ZN5MyImu13DBC_ACI_BULMAEv+0x378>)
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f7fc fd00 	bl	80005e8 <__aeabi_dmul>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f7fc fff2 	bl	8000bd8 <__aeabi_d2f>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24
	accRollAci_f = asin((float)accEksen[0]/accToplamVektor_s16)*-57.296;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c00:	ee07 3a90 	vmov	s15, r3
 8003c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c1a:	ee16 0a90 	vmov	r0, s13
 8003c1e:	f7fc fc8b 	bl	8000538 <__aeabi_f2d>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	ec43 2b10 	vmov	d0, r2, r3
 8003c2a:	f006 fb9b 	bl	800a364 <asin>
 8003c2e:	ec51 0b10 	vmov	r0, r1, d0
 8003c32:	a337      	add	r3, pc, #220	; (adr r3, 8003d10 <_ZN5MyImu13DBC_ACI_BULMAEv+0x380>)
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f7fc fcd6 	bl	80005e8 <__aeabi_dmul>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4610      	mov	r0, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	f7fc ffc8 	bl	8000bd8 <__aeabi_d2f>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	629a      	str	r2, [r3, #40]	; 0x28

	pitchAcisi_f = gyroPitchAci_f * 0.9 + accPitchAci_f * 0.1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fc fc70 	bl	8000538 <__aeabi_f2d>
 8003c58:	a32f      	add	r3, pc, #188	; (adr r3, 8003d18 <_ZN5MyImu13DBC_ACI_BULMAEv+0x388>)
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f7fc fcc3 	bl	80005e8 <__aeabi_dmul>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4614      	mov	r4, r2
 8003c68:	461d      	mov	r5, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fc62 	bl	8000538 <__aeabi_f2d>
 8003c74:	a32a      	add	r3, pc, #168	; (adr r3, 8003d20 <_ZN5MyImu13DBC_ACI_BULMAEv+0x390>)
 8003c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7a:	f7fc fcb5 	bl	80005e8 <__aeabi_dmul>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4620      	mov	r0, r4
 8003c84:	4629      	mov	r1, r5
 8003c86:	f7fc faf9 	bl	800027c <__adddf3>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	f7fc ffa1 	bl	8000bd8 <__aeabi_d2f>
 8003c96:	4602      	mov	r2, r0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	63da      	str	r2, [r3, #60]	; 0x3c
	rollAci_f = gyroRollAci_f * 0.9 + accRollAci_f * 0.1;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc fc49 	bl	8000538 <__aeabi_f2d>
 8003ca6:	a31c      	add	r3, pc, #112	; (adr r3, 8003d18 <_ZN5MyImu13DBC_ACI_BULMAEv+0x388>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f7fc fc9c 	bl	80005e8 <__aeabi_dmul>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	461d      	mov	r5, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc fc3b 	bl	8000538 <__aeabi_f2d>
 8003cc2:	a317      	add	r3, pc, #92	; (adr r3, 8003d20 <_ZN5MyImu13DBC_ACI_BULMAEv+0x390>)
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	f7fc fc8e 	bl	80005e8 <__aeabi_dmul>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	f7fc fad2 	bl	800027c <__adddf3>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f7fc ff7a 	bl	8000bd8 <__aeabi_d2f>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003cf4:	f3af 8000 	nop.w
 8003cf8:	75e6362a 	.word	0x75e6362a
 8003cfc:	3f2b21c4 	.word	0x3f2b21c4
 8003d00:	652c6e62 	.word	0x652c6e62
 8003d04:	3eb1e26f 	.word	0x3eb1e26f
 8003d08:	53f7ced9 	.word	0x53f7ced9
 8003d0c:	404ca5e3 	.word	0x404ca5e3
 8003d10:	53f7ced9 	.word	0x53f7ced9
 8003d14:	c04ca5e3 	.word	0xc04ca5e3
 8003d18:	cccccccd 	.word	0xcccccccd
 8003d1c:	3feccccc 	.word	0x3feccccc
 8003d20:	9999999a 	.word	0x9999999a
 8003d24:	3fb99999 	.word	0x3fb99999

08003d28 <_ZN5MyImu7PitchAlEv>:

float* MyImu::PitchAl(){ return &pitchAcisi_f;}
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	333c      	adds	r3, #60	; 0x3c
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <_ZN5MyImu6RollAlEv>:
float* MyImu::RollAl(){return &rollAci_f;}
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3338      	adds	r3, #56	; 0x38
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <_ZN5MyImu5YawAlEv>:
float* MyImu::YawAl(){return &gyroYawAci_f;}
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3334      	adds	r3, #52	; 0x34
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <_ZN5MyImu10SicaklikAlEv>:
float* MyImu::SicaklikAl(){return &Sicaklik_f;}
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3344      	adds	r3, #68	; 0x44
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <_ZN5MyMagC1EP17I2C_HandleTypeDef>:
#include "Mag.h"

#define HMC5883L_ADDRESS 0x1E << 1 // I2C adresi

MyMag::MyMag(I2C_HandleTypeDef *hi2c)
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
{
  this->hi2c = hi2c;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	601a      	str	r2, [r3, #0]
  x_s16 = y_s16 = z_s16 = 0;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	811a      	strh	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	80da      	strh	r2, [r3, #6]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	809a      	strh	r2, [r3, #4]
  heading_f = headingAcisi_f = 0.0f;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	61da      	str	r2, [r3, #28]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	619a      	str	r2, [r3, #24]
  xOffset_f = yOffset_f =0.0f;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	611a      	str	r2, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60da      	str	r2, [r3, #12]
}
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <_ZN5MyMag10YapilandirEv>:

void MyMag::Yapilandir()
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	6078      	str	r0, [r7, #4]
	//Configuration Register A
	uint8_t dataCRA[2] = {HMC5883_REGISTER_MAG_CRA_REG_M, 0x70}; // 8 ortalama, 15 Hz, normal ölçüm
 8003de8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003dec:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDRESS, dataCRA, 2, 100);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	f107 0214 	add.w	r2, r7, #20
 8003df6:	2364      	movs	r3, #100	; 0x64
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	213c      	movs	r1, #60	; 0x3c
 8003dfe:	f002 f967 	bl	80060d0 <HAL_I2C_Master_Transmit>

	// Configuration Register B
	uint8_t dataCRB[2] = {HMC5883_REGISTER_MAG_CRB_REG_M, HMC5883_MAGGAIN_1_3}; // Kazanç = +/- 1.3
 8003e02:	f242 0301 	movw	r3, #8193	; 0x2001
 8003e06:	823b      	strh	r3, [r7, #16]
	HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDRESS, dataCRB, 2, 100);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	f107 0210 	add.w	r2, r7, #16
 8003e10:	2364      	movs	r3, #100	; 0x64
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2302      	movs	r3, #2
 8003e16:	213c      	movs	r1, #60	; 0x3c
 8003e18:	f002 f95a 	bl	80060d0 <HAL_I2C_Master_Transmit>

	// Mode Register
	uint8_t dataMR[2] = {HMC5883_REGISTER_MAG_MR_REG_M, 0x00}; // Sürekli ölçüm modu
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDRESS, dataMR, 2, 100);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	f107 020c 	add.w	r2, r7, #12
 8003e28:	2364      	movs	r3, #100	; 0x64
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	213c      	movs	r1, #60	; 0x3c
 8003e30:	f002 f94e 	bl	80060d0 <HAL_I2C_Master_Transmit>
}
 8003e34:	bf00      	nop
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZN5MyMag10MagDataOkuEPsS0_S0_>:

void MyMag::MagDataOku(int16_t *x_s16, int16_t *y_s16, int16_t *z_s16)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	; 0x28
 8003e40:	af04      	add	r7, sp, #16
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  uint8_t buffer[6];
  HAL_I2C_Mem_Read(hi2c, HMC5883L_ADDRESS, HMC5883_REGISTER_MAG_OUT_X_H_M, 1, buffer, 6, 100);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	2364      	movs	r3, #100	; 0x64
 8003e50:	9302      	str	r3, [sp, #8]
 8003e52:	2306      	movs	r3, #6
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	f107 0310 	add.w	r3, r7, #16
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	2203      	movs	r2, #3
 8003e60:	213c      	movs	r1, #60	; 0x3c
 8003e62:	f002 fd5f 	bl	8006924 <HAL_I2C_Mem_Read>

  *x_s16 = (int16_t)((buffer[0] << 8) | buffer[1]);
 8003e66:	7c3b      	ldrb	r3, [r7, #16]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	b21a      	sxth	r2, r3
 8003e6c:	7c7b      	ldrb	r3, [r7, #17]
 8003e6e:	b21b      	sxth	r3, r3
 8003e70:	4313      	orrs	r3, r2
 8003e72:	b21a      	sxth	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	801a      	strh	r2, [r3, #0]
  *z_s16 = (int16_t)((buffer[2] << 8) | buffer[3]);
 8003e78:	7cbb      	ldrb	r3, [r7, #18]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	b21a      	sxth	r2, r3
 8003e7e:	7cfb      	ldrb	r3, [r7, #19]
 8003e80:	b21b      	sxth	r3, r3
 8003e82:	4313      	orrs	r3, r2
 8003e84:	b21a      	sxth	r2, r3
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	801a      	strh	r2, [r3, #0]
  *y_s16 = (int16_t)((buffer[4] << 8) | buffer[5]);
 8003e8a:	7d3b      	ldrb	r3, [r7, #20]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	b21a      	sxth	r2, r3
 8003e90:	7d7b      	ldrb	r3, [r7, #21]
 8003e92:	b21b      	sxth	r3, r3
 8003e94:	4313      	orrs	r3, r2
 8003e96:	b21a      	sxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	801a      	strh	r2, [r3, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <_ZN5MyMag9KalibreEtEv>:
void MyMag::KalibreEt()
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
    int16_t xEksen_s16, yEksen_s16,zEksen_s16;
    int16_t xMin = 3200, yMin = 3200,zMin = 3200;
 8003eac:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003eb0:	83fb      	strh	r3, [r7, #30]
 8003eb2:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003eb6:	83bb      	strh	r3, [r7, #28]
 8003eb8:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003ebc:	837b      	strh	r3, [r7, #26]
    int16_t xMax = -3200, yMax = -3200,zMax=-3200;
 8003ebe:	f24f 3380 	movw	r3, #62336	; 0xf380
 8003ec2:	833b      	strh	r3, [r7, #24]
 8003ec4:	f24f 3380 	movw	r3, #62336	; 0xf380
 8003ec8:	82fb      	strh	r3, [r7, #22]
 8003eca:	f24f 3380 	movw	r3, #62336	; 0xf380
 8003ece:	82bb      	strh	r3, [r7, #20]


    for (int i = 0; i < 1000; i++)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	e03e      	b.n	8003f54 <_ZN5MyMag9KalibreEtEv+0xb0>
    {
        MagDataOku(&xEksen_s16, &yEksen_s16, &zEksen_s16);
 8003ed6:	f107 030a 	add.w	r3, r7, #10
 8003eda:	f107 020c 	add.w	r2, r7, #12
 8003ede:	f107 010e 	add.w	r1, r7, #14
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff ffaa 	bl	8003e3c <_ZN5MyMag10MagDataOkuEPsS0_S0_>

        if (xEksen_s16 < xMin) xMin = xEksen_s16;
 8003ee8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eec:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	dd01      	ble.n	8003ef8 <_ZN5MyMag9KalibreEtEv+0x54>
 8003ef4:	89fb      	ldrh	r3, [r7, #14]
 8003ef6:	83fb      	strh	r3, [r7, #30]
        if (xEksen_s16 > xMax) xMax = xEksen_s16;
 8003ef8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003efc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	da01      	bge.n	8003f08 <_ZN5MyMag9KalibreEtEv+0x64>
 8003f04:	89fb      	ldrh	r3, [r7, #14]
 8003f06:	833b      	strh	r3, [r7, #24]
        if (yEksen_s16 < yMin) yMin = yEksen_s16;
 8003f08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f0c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	dd01      	ble.n	8003f18 <_ZN5MyMag9KalibreEtEv+0x74>
 8003f14:	89bb      	ldrh	r3, [r7, #12]
 8003f16:	83bb      	strh	r3, [r7, #28]
        if (yEksen_s16 > yMax) yMax = yEksen_s16;
 8003f18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	da01      	bge.n	8003f28 <_ZN5MyMag9KalibreEtEv+0x84>
 8003f24:	89bb      	ldrh	r3, [r7, #12]
 8003f26:	82fb      	strh	r3, [r7, #22]
        if (zEksen_s16 < zMin) zMin = zEksen_s16;
 8003f28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f2c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	dd01      	ble.n	8003f38 <_ZN5MyMag9KalibreEtEv+0x94>
 8003f34:	897b      	ldrh	r3, [r7, #10]
 8003f36:	837b      	strh	r3, [r7, #26]
        if (zEksen_s16 > zMax) zMax = zEksen_s16;
 8003f38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f3c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	da01      	bge.n	8003f48 <_ZN5MyMag9KalibreEtEv+0xa4>
 8003f44:	897b      	ldrh	r3, [r7, #10]
 8003f46:	82bb      	strh	r3, [r7, #20]

        HAL_Delay(10);
 8003f48:	200a      	movs	r0, #10
 8003f4a:	f001 fbdb 	bl	8005704 <HAL_Delay>
    for (int i = 0; i < 1000; i++)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	3301      	adds	r3, #1
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f5a:	dbbc      	blt.n	8003ed6 <_ZN5MyMag9KalibreEtEv+0x32>
    }

    xOffset_f = (xMax + xMin) / 2;
 8003f5c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003f60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003f64:	4413      	add	r3, r2
 8003f66:	0fda      	lsrs	r2, r3, #31
 8003f68:	4413      	add	r3, r2
 8003f6a:	105b      	asrs	r3, r3, #1
 8003f6c:	ee07 3a90 	vmov	s15, r3
 8003f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	edc3 7a03 	vstr	s15, [r3, #12]
    yOffset_f = (yMax + yMin) / 2;
 8003f7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003f7e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003f82:	4413      	add	r3, r2
 8003f84:	0fda      	lsrs	r2, r3, #31
 8003f86:	4413      	add	r3, r2
 8003f88:	105b      	asrs	r3, r3, #1
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	edc3 7a04 	vstr	s15, [r3, #16]
    zOffset_f = (zMax + zMin) / 2;
 8003f98:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003f9c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	0fda      	lsrs	r2, r3, #31
 8003fa4:	4413      	add	r3, r2
 8003fa6:	105b      	asrs	r3, r3, #1
 8003fa8:	ee07 3a90 	vmov	s15, r3
 8003fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8003fb6:	bf00      	nop
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <_ZN5MyMag14HeadingOlusturEv>:
float* MyMag::HeadingOlustur()
{
 8003fc0:	b5b0      	push	{r4, r5, r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	float kalibreliX_f, kalibreliY_f,kalibreliZ_f;
	float TiltliX_f,TiltliY_f;
	float pitchRad,rollRad;
	MagDataOku(&x_s16,&y_s16,&z_s16);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	1d19      	adds	r1, r3, #4
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	1d9a      	adds	r2, r3, #6
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3308      	adds	r3, #8
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ff31 	bl	8003e3c <_ZN5MyMag10MagDataOkuEPsS0_S0_>

	//pitchRad = pitch * (M_PI / 180.0);
	//rollRad = roll * (M_PI / 180.0);

	kalibreliX_f = x_s16 - xOffset_f;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003fe0:	ee07 3a90 	vmov	s15, r3
 8003fe4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ff2:	edc7 7a05 	vstr	s15, [r7, #20]
	kalibreliY_f = y_s16 - yOffset_f;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	edd3 7a04 	vldr	s15, [r3, #16]
 800400a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800400e:	edc7 7a04 	vstr	s15, [r7, #16]
	kalibreliZ_f = z_s16 - zOffset_f;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	edd3 7a05 	vldr	s15, [r3, #20]
 8004026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800402a:	edc7 7a03 	vstr	s15, [r7, #12]

	//TiltliX_f = kalibreliX_f * cos(pitchRad) + kalibreliZ_f * sin(pitchRad);
	//TiltliY_f = kalibreliX_f * sin(rollRad) * sin(pitchRad) + kalibreliY_f * cos(rollRad) - kalibreliZ_f * sin(rollRad) * cos(pitchRad);

	heading_f = atan2(kalibreliY_f, kalibreliX_f);
 800402e:	6938      	ldr	r0, [r7, #16]
 8004030:	f7fc fa82 	bl	8000538 <__aeabi_f2d>
 8004034:	4604      	mov	r4, r0
 8004036:	460d      	mov	r5, r1
 8004038:	6978      	ldr	r0, [r7, #20]
 800403a:	f7fc fa7d 	bl	8000538 <__aeabi_f2d>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	ec43 2b11 	vmov	d1, r2, r3
 8004046:	ec45 4b10 	vmov	d0, r4, r5
 800404a:	f006 f9bf 	bl	800a3cc <atan2>
 800404e:	ec53 2b10 	vmov	r2, r3, d0
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	f7fc fdbf 	bl	8000bd8 <__aeabi_d2f>
 800405a:	4602      	mov	r2, r0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	619a      	str	r2, [r3, #24]

	//heading_f = atan2((y_s16), (x_s16));
	if(heading_f < 0)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	edd3 7a06 	vldr	s15, [r3, #24]
 8004066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406e:	d512      	bpl.n	8004096 <_ZN5MyMag14HeadingOlusturEv+0xd6>
		heading_f += 2*M_PI;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	4618      	mov	r0, r3
 8004076:	f7fc fa5f 	bl	8000538 <__aeabi_f2d>
 800407a:	a323      	add	r3, pc, #140	; (adr r3, 8004108 <_ZN5MyMag14HeadingOlusturEv+0x148>)
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f7fc f8fc 	bl	800027c <__adddf3>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4610      	mov	r0, r2
 800408a:	4619      	mov	r1, r3
 800408c:	f7fc fda4 	bl	8000bd8 <__aeabi_d2f>
 8004090:	4602      	mov	r2, r0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	619a      	str	r2, [r3, #24]

	if(heading_f > 2*M_PI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc fa4c 	bl	8000538 <__aeabi_f2d>
 80040a0:	a319      	add	r3, pc, #100	; (adr r3, 8004108 <_ZN5MyMag14HeadingOlusturEv+0x148>)
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	f7fc fd2f 	bl	8000b08 <__aeabi_dcmpgt>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d012      	beq.n	80040d6 <_ZN5MyMag14HeadingOlusturEv+0x116>
		heading_f -= 2*M_PI;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fc fa3f 	bl	8000538 <__aeabi_f2d>
 80040ba:	a313      	add	r3, pc, #76	; (adr r3, 8004108 <_ZN5MyMag14HeadingOlusturEv+0x148>)
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f7fc f8da 	bl	8000278 <__aeabi_dsub>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4610      	mov	r0, r2
 80040ca:	4619      	mov	r1, r3
 80040cc:	f7fc fd84 	bl	8000bd8 <__aeabi_d2f>
 80040d0:	4602      	mov	r2, r0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	619a      	str	r2, [r3, #24]


	headingAcisi_f = heading_f * (180/M_PI);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fc fa2c 	bl	8000538 <__aeabi_f2d>
 80040e0:	a30b      	add	r3, pc, #44	; (adr r3, 8004110 <_ZN5MyMag14HeadingOlusturEv+0x150>)
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f7fc fa7f 	bl	80005e8 <__aeabi_dmul>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	f7fc fd71 	bl	8000bd8 <__aeabi_d2f>
 80040f6:	4602      	mov	r2, r0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	61da      	str	r2, [r3, #28]

	return &headingAcisi_f;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	331c      	adds	r3, #28

}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bdb0      	pop	{r4, r5, r7, pc}
 8004108:	54442d18 	.word	0x54442d18
 800410c:	401921fb 	.word	0x401921fb
 8004110:	1a63c1f8 	.word	0x1a63c1f8
 8004114:	404ca5dc 	.word	0x404ca5dc

08004118 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004122:	edc7 0a00 	vstr	s1, [r7]
 8004126:	edd7 0a00 	vldr	s1, [r7]
 800412a:	ed97 0a01 	vldr	s0, [r7, #4]
 800412e:	f006 fa7b 	bl	800a628 <atan2f>
 8004132:	eef0 7a40 	vmov.f32	s15, s0
 8004136:	eeb0 0a67 	vmov.f32	s0, s15
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	ed87 0a01 	vstr	s0, [r7, #4]
 800414a:	ed97 0a01 	vldr	s0, [r7, #4]
 800414e:	f006 fa8b 	bl	800a668 <cosf>
 8004152:	eef0 7a40 	vmov.f32	s15, s0
 8004156:	eeb0 0a67 	vmov.f32	s0, s15
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	ed87 0a01 	vstr	s0, [r7, #4]
 800416a:	ed97 0a01 	vldr	s0, [r7, #4]
 800416e:	f006 fabf 	bl	800a6f0 <sinf>
 8004172:	eef0 7a40 	vmov.f32	s15, s0
 8004176:	eeb0 0a67 	vmov.f32	s0, s15
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	ed87 0a01 	vstr	s0, [r7, #4]
 800418a:	ed97 0a01 	vldr	s0, [r7, #4]
 800418e:	f006 fa4d 	bl	800a62c <sqrtf>
 8004192:	eef0 7a40 	vmov.f32	s15, s0
 8004196:	eeb0 0a67 	vmov.f32	s0, s15
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_P12GPIO_TypeDeftS3_t>:
 *
 *  Created on: Jun 29, 2024
 *      Author: onurd
 */
#include "Motor.h"
Motor::Motor(TIM_HandleTypeDef* htim_pwm, TIM_HandleTypeDef* htim_enc, GPIO_TypeDef* in1_port, uint16_t in1_pin, GPIO_TypeDef* in2_port, uint16_t in2_pin)
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	615a      	str	r2, [r3, #20]
 80041b6:	68f9      	ldr	r1, [r7, #12]
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	841a      	strh	r2, [r3, #32]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	845a      	strh	r2, [r3, #34]	; 0x22
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
	 htim_pwm_ = htim_pwm;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	601a      	str	r2, [r3, #0]
	 htim_enc_ = htim_enc;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	605a      	str	r2, [r3, #4]
	 in1_port_ = in1_port;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	609a      	str	r2, [r3, #8]
	 in1_pin_ = in1_pin;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8b3a      	ldrh	r2, [r7, #24]
 80041ee:	821a      	strh	r2, [r3, #16]
	 in2_port_ = in2_port;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	60da      	str	r2, [r3, #12]
	 in2_pin_ = in2_pin;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8c3a      	ldrh	r2, [r7, #32]
 80041fa:	825a      	strh	r2, [r3, #18]
}
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <_ZN5Motor10YapilandirEv>:
void Motor::Yapilandir()
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim_pwm_, TIM_CHANNEL_1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f003 fff9 	bl	8008210 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(htim_enc_, TIM_CHANNEL_ALL);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	213c      	movs	r1, #60	; 0x3c
 8004224:	4618      	mov	r0, r3
 8004226:	f004 f961 	bl	80084ec <HAL_TIM_Encoder_Start>
    __HAL_TIM_SET_COUNTER(htim_enc_, 0);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2200      	movs	r2, #0
 8004232:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_ZN5Motor3PWMEt>:
void Motor::PWM(uint16_t pwmDeger_u16)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(htim_pwm_, TIM_CHANNEL_1, pwmDeger_u16); // (0-1000)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	887a      	ldrh	r2, [r7, #2]
 8004250:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <_ZN5Motor6AciBulEv>:
void Motor::AciBul()
{
 8004260:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
	simdikiEncoderDegeri_s16 = __HAL_TIM_GET_COUNTER(htim_enc_);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	b21a      	sxth	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	845a      	strh	r2, [r3, #34]	; 0x22
	int16_t delta = simdikiEncoderDegeri_s16 - oncekiEncoderDegeri_s16;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800427e:	b29a      	uxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004286:	b29b      	uxth	r3, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	b29b      	uxth	r3, r3
 800428c:	81fb      	strh	r3, [r7, #14]

	IleriGit();
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f870 	bl	8004374 <_ZN5Motor8IleriGitEv>
	// Encoder taşması kontrolü
	if (delta < -32767)
 8004294:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004298:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
	else if (delta > 32767)
	{
		delta -= 65536; // örnek onceki -32740 simdiki 32750 delta 65490 adım 46
	}

	toplamEncoderDegeri_s64 += delta;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80042a2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80042a6:	17c8      	asrs	r0, r1, #31
 80042a8:	460c      	mov	r4, r1
 80042aa:	4605      	mov	r5, r0
 80042ac:	eb12 0804 	adds.w	r8, r2, r4
 80042b0:	eb43 0905 	adc.w	r9, r3, r5
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	e9c3 8906 	strd	r8, r9, [r3, #24]
	oncekiEncoderDegeri_s16 = simdikiEncoderDegeri_s16;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	841a      	strh	r2, [r3, #32]

	motorAci_f = fmod(((float)toplamEncoderDegeri_s64 * 0.02347), 360.0);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80042ca:	4610      	mov	r0, r2
 80042cc:	4619      	mov	r1, r3
 80042ce:	f7fc fda3 	bl	8000e18 <__aeabi_l2f>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fc f92f 	bl	8000538 <__aeabi_f2d>
 80042da:	a324      	add	r3, pc, #144	; (adr r3, 800436c <_ZN5Motor6AciBulEv+0x10c>)
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f7fc f982 	bl	80005e8 <__aeabi_dmul>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	ec43 2b17 	vmov	d7, r2, r3
 80042ec:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8004360 <_ZN5Motor6AciBulEv+0x100>
 80042f0:	eeb0 0a47 	vmov.f32	s0, s14
 80042f4:	eef0 0a67 	vmov.f32	s1, s15
 80042f8:	f006 f86a 	bl	800a3d0 <fmod>
 80042fc:	ec53 2b10 	vmov	r2, r3, d0
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	f7fc fc68 	bl	8000bd8 <__aeabi_d2f>
 8004308:	4602      	mov	r2, r0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	615a      	str	r2, [r3, #20]
	motorTur_u8 = ((float)toplamEncoderDegeri_s64 * 0.02347)/ 360.0;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	f7fc fd7e 	bl	8000e18 <__aeabi_l2f>
 800431c:	4603      	mov	r3, r0
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc f90a 	bl	8000538 <__aeabi_f2d>
 8004324:	a311      	add	r3, pc, #68	; (adr r3, 800436c <_ZN5Motor6AciBulEv+0x10c>)
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f7fc f95d 	bl	80005e8 <__aeabi_dmul>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4610      	mov	r0, r2
 8004334:	4619      	mov	r1, r3
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <_ZN5Motor6AciBulEv+0x108>)
 800433c:	f7fc fa7e 	bl	800083c <__aeabi_ddiv>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	f7fc fbfe 	bl	8000b48 <__aeabi_d2iz>
 800434c:	4603      	mov	r3, r0
 800434e:	b25a      	sxtb	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004360:	00000000 	.word	0x00000000
 8004364:	40768000 	.word	0x40768000
 8004368:	40768000 	.word	0x40768000
 800436c:	09bf9c63 	.word	0x09bf9c63
 8004370:	3f980885 	.word	0x3f980885

08004374 <_ZN5Motor8IleriGitEv>:
void Motor::IleriGit()
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(in1_port_, in1_pin_, GPIO_PIN_SET); // IN1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6898      	ldr	r0, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8a1b      	ldrh	r3, [r3, #16]
 8004384:	2201      	movs	r2, #1
 8004386:	4619      	mov	r1, r3
 8004388:	f001 fd20 	bl	8005dcc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(in2_port_, in2_pin_, GPIO_PIN_RESET); // IN2
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68d8      	ldr	r0, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8a5b      	ldrh	r3, [r3, #18]
 8004394:	2200      	movs	r2, #0
 8004396:	4619      	mov	r1, r3
 8004398:	f001 fd18 	bl	8005dcc <HAL_GPIO_WritePin>
}
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <_ZN5Motor5AciAlEv>:
{
	HAL_GPIO_WritePin(in1_port_, in1_pin_, GPIO_PIN_RESET); // IN1
	HAL_GPIO_WritePin(in2_port_, in2_pin_, GPIO_PIN_RESET); // IN2
}
float* Motor::AciAl()
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
    return &motorAci_f;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3314      	adds	r3, #20
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZN5Motor5TurAlEv>:

int8_t* Motor::TurAl()
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
    return &motorTur_u8;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3324      	adds	r3, #36	; 0x24
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <_ZN5ArabaC1Ev>:

//Araba::Araba(Motor& olmotor,Motor& ormotor,Motor& almotor,Motor& armotor)
	//	:olm(olmotor),orm(ormotor),alm(almotor),arm(armotor){}

Araba::Araba(){}
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	0000      	movs	r0, r0
 80043ec:	0000      	movs	r0, r0
	...

080043f0 <_ZN5Araba9mesafeBulEffff>:
    orm.IleriGit();
    alm.Dur();
    arm.IleriGit();
}*/
float Araba::mesafeBul(float guncelLat_f, float guncelLon_f, float gidilecekLat_f, float gidilecekLon_f)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	ed2d 8b02 	vpush	{d8}
 80043f6:	b08c      	sub	sp, #48	; 0x30
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6178      	str	r0, [r7, #20]
 80043fc:	ed87 0a04 	vstr	s0, [r7, #16]
 8004400:	edc7 0a03 	vstr	s1, [r7, #12]
 8004404:	ed87 1a02 	vstr	s2, [r7, #8]
 8004408:	edc7 1a01 	vstr	s3, [r7, #4]
	guncelLat_f = guncelLat_f * (M_PI / 180.0);
 800440c:	6938      	ldr	r0, [r7, #16]
 800440e:	f7fc f893 	bl	8000538 <__aeabi_f2d>
 8004412:	a364      	add	r3, pc, #400	; (adr r3, 80045a4 <_ZN5Araba9mesafeBulEffff+0x1b4>)
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f7fc f8e6 	bl	80005e8 <__aeabi_dmul>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	f7fc fbd8 	bl	8000bd8 <__aeabi_d2f>
 8004428:	4603      	mov	r3, r0
 800442a:	613b      	str	r3, [r7, #16]
	guncelLon_f = guncelLon_f * (M_PI / 180.0);
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7fc f883 	bl	8000538 <__aeabi_f2d>
 8004432:	a35c      	add	r3, pc, #368	; (adr r3, 80045a4 <_ZN5Araba9mesafeBulEffff+0x1b4>)
 8004434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004438:	f7fc f8d6 	bl	80005e8 <__aeabi_dmul>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	f7fc fbc8 	bl	8000bd8 <__aeabi_d2f>
 8004448:	4603      	mov	r3, r0
 800444a:	60fb      	str	r3, [r7, #12]
	gidilecekLat_f = gidilecekLat_f * (M_PI / 180.0);
 800444c:	68b8      	ldr	r0, [r7, #8]
 800444e:	f7fc f873 	bl	8000538 <__aeabi_f2d>
 8004452:	a354      	add	r3, pc, #336	; (adr r3, 80045a4 <_ZN5Araba9mesafeBulEffff+0x1b4>)
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f7fc f8c6 	bl	80005e8 <__aeabi_dmul>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	f7fc fbb8 	bl	8000bd8 <__aeabi_d2f>
 8004468:	4603      	mov	r3, r0
 800446a:	60bb      	str	r3, [r7, #8]
	gidilecekLon_f = gidilecekLon_f * (M_PI / 180.0);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7fc f863 	bl	8000538 <__aeabi_f2d>
 8004472:	a34c      	add	r3, pc, #304	; (adr r3, 80045a4 <_ZN5Araba9mesafeBulEffff+0x1b4>)
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f7fc f8b6 	bl	80005e8 <__aeabi_dmul>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4610      	mov	r0, r2
 8004482:	4619      	mov	r1, r3
 8004484:	f7fc fba8 	bl	8000bd8 <__aeabi_d2f>
 8004488:	4603      	mov	r3, r0
 800448a:	607b      	str	r3, [r7, #4]

	float latFark_f = gidilecekLat_f - guncelLat_f;
 800448c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004490:	edd7 7a04 	vldr	s15, [r7, #16]
 8004494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004498:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float lonFark_f = gidilecekLon_f - guncelLon_f;
 800449c:	ed97 7a01 	vldr	s14, [r7, #4]
 80044a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80044a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044a8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	    // Haversine formülü
	float a = sin(latFark_f / 2) * sin(lonFark_f / 2) + cos(guncelLat_f) * cos(gidilecekLat_f) * sin(lonFark_f / 2) * sin(lonFark_f / 2);
 80044ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80044b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80044b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044b8:	eeb0 0a47 	vmov.f32	s0, s14
 80044bc:	f7ff fe50 	bl	8004160 <_ZSt3sinf>
 80044c0:	eeb0 8a40 	vmov.f32	s16, s0
 80044c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80044c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80044cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044d0:	eeb0 0a47 	vmov.f32	s0, s14
 80044d4:	f7ff fe44 	bl	8004160 <_ZSt3sinf>
 80044d8:	eef0 7a40 	vmov.f32	s15, s0
 80044dc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80044e0:	ed97 0a04 	vldr	s0, [r7, #16]
 80044e4:	f7ff fe2c 	bl	8004140 <_ZSt3cosf>
 80044e8:	eef0 8a40 	vmov.f32	s17, s0
 80044ec:	ed97 0a02 	vldr	s0, [r7, #8]
 80044f0:	f7ff fe26 	bl	8004140 <_ZSt3cosf>
 80044f4:	eef0 7a40 	vmov.f32	s15, s0
 80044f8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80044fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004500:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004504:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004508:	eeb0 0a47 	vmov.f32	s0, s14
 800450c:	f7ff fe28 	bl	8004160 <_ZSt3sinf>
 8004510:	eef0 7a40 	vmov.f32	s15, s0
 8004514:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8004518:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800451c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004520:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004524:	eeb0 0a47 	vmov.f32	s0, s14
 8004528:	f7ff fe1a 	bl	8004160 <_ZSt3sinf>
 800452c:	eef0 7a40 	vmov.f32	s15, s0
 8004530:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004534:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004538:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float c = 2 * atan2(sqrt(a), sqrt(1 - a));
 800453c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004540:	f7ff fe1e 	bl	8004180 <_ZSt4sqrtf>
 8004544:	eeb0 8a40 	vmov.f32	s16, s0
 8004548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800454c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004554:	eeb0 0a67 	vmov.f32	s0, s15
 8004558:	f7ff fe12 	bl	8004180 <_ZSt4sqrtf>
 800455c:	eef0 7a40 	vmov.f32	s15, s0
 8004560:	eef0 0a67 	vmov.f32	s1, s15
 8004564:	eeb0 0a48 	vmov.f32	s0, s16
 8004568:	f7ff fdd6 	bl	8004118 <_ZSt5atan2ff>
 800456c:	eef0 7a40 	vmov.f32	s15, s0
 8004570:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004574:	edc7 7a08 	vstr	s15, [r7, #32]

	float mesafe_f = DUNYA_YARICAPI * c;
 8004578:	edd7 7a08 	vldr	s15, [r7, #32]
 800457c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80045a0 <_ZN5Araba9mesafeBulEffff+0x1b0>
 8004580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004584:	edc7 7a07 	vstr	s15, [r7, #28]

	return mesafe_f;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	ee07 3a90 	vmov	s15, r3
}
 800458e:	eeb0 0a67 	vmov.f32	s0, s15
 8004592:	3730      	adds	r7, #48	; 0x30
 8004594:	46bd      	mov	sp, r7
 8004596:	ecbd 8b02 	vpop	{d8}
 800459a:	bd80      	pop	{r7, pc}
 800459c:	f3af 8000 	nop.w
 80045a0:	4ac26d70 	.word	0x4ac26d70
 80045a4:	a2529d39 	.word	0xa2529d39
 80045a8:	3f91df46 	.word	0x3f91df46
 80045ac:	00000000 	.word	0x00000000

080045b0 <_ZN5Araba10yonelimBulEffff>:
float Araba::yonelimBul(float guncelLat_f, float guncelLon_f, float gidilecekLat_f, float gidilecekLon_f)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	ed2d 8b02 	vpush	{d8}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6178      	str	r0, [r7, #20]
 80045bc:	ed87 0a04 	vstr	s0, [r7, #16]
 80045c0:	edc7 0a03 	vstr	s1, [r7, #12]
 80045c4:	ed87 1a02 	vstr	s2, [r7, #8]
 80045c8:	edc7 1a01 	vstr	s3, [r7, #4]
	guncelLat_f = guncelLat_f * (M_PI / 180.0);
 80045cc:	6938      	ldr	r0, [r7, #16]
 80045ce:	f7fb ffb3 	bl	8000538 <__aeabi_f2d>
 80045d2:	a360      	add	r3, pc, #384	; (adr r3, 8004754 <_ZN5Araba10yonelimBulEffff+0x1a4>)
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fc f806 	bl	80005e8 <__aeabi_dmul>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	f7fc faf8 	bl	8000bd8 <__aeabi_d2f>
 80045e8:	4603      	mov	r3, r0
 80045ea:	613b      	str	r3, [r7, #16]
	guncelLon_f = guncelLon_f * (M_PI / 180.0);
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7fb ffa3 	bl	8000538 <__aeabi_f2d>
 80045f2:	a358      	add	r3, pc, #352	; (adr r3, 8004754 <_ZN5Araba10yonelimBulEffff+0x1a4>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fb fff6 	bl	80005e8 <__aeabi_dmul>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	f7fc fae8 	bl	8000bd8 <__aeabi_d2f>
 8004608:	4603      	mov	r3, r0
 800460a:	60fb      	str	r3, [r7, #12]
	gidilecekLat_f = gidilecekLat_f * (M_PI / 180.0);
 800460c:	68b8      	ldr	r0, [r7, #8]
 800460e:	f7fb ff93 	bl	8000538 <__aeabi_f2d>
 8004612:	a350      	add	r3, pc, #320	; (adr r3, 8004754 <_ZN5Araba10yonelimBulEffff+0x1a4>)
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	f7fb ffe6 	bl	80005e8 <__aeabi_dmul>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	f7fc fad8 	bl	8000bd8 <__aeabi_d2f>
 8004628:	4603      	mov	r3, r0
 800462a:	60bb      	str	r3, [r7, #8]
	gidilecekLon_f = gidilecekLon_f * (M_PI / 180.0);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fb ff83 	bl	8000538 <__aeabi_f2d>
 8004632:	a348      	add	r3, pc, #288	; (adr r3, 8004754 <_ZN5Araba10yonelimBulEffff+0x1a4>)
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	f7fb ffd6 	bl	80005e8 <__aeabi_dmul>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4610      	mov	r0, r2
 8004642:	4619      	mov	r1, r3
 8004644:	f7fc fac8 	bl	8000bd8 <__aeabi_d2f>
 8004648:	4603      	mov	r3, r0
 800464a:	607b      	str	r3, [r7, #4]

	float lonFark_f = gidilecekLon_f - guncelLon_f;
 800464c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004650:	edd7 7a03 	vldr	s15, [r7, #12]
 8004654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004658:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Bearing formülü
    float x = sin(lonFark_f) * cos(gidilecekLon_f);
 800465c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004660:	f7ff fd7e 	bl	8004160 <_ZSt3sinf>
 8004664:	eeb0 8a40 	vmov.f32	s16, s0
 8004668:	ed97 0a01 	vldr	s0, [r7, #4]
 800466c:	f7ff fd68 	bl	8004140 <_ZSt3cosf>
 8004670:	eef0 7a40 	vmov.f32	s15, s0
 8004674:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004678:	edc7 7a08 	vstr	s15, [r7, #32]
    float y = cos(guncelLat_f) * sin(gidilecekLat_f) - sin(guncelLat_f) * cos(gidilecekLat_f) * cos(lonFark_f);
 800467c:	ed97 0a04 	vldr	s0, [r7, #16]
 8004680:	f7ff fd5e 	bl	8004140 <_ZSt3cosf>
 8004684:	eeb0 8a40 	vmov.f32	s16, s0
 8004688:	ed97 0a02 	vldr	s0, [r7, #8]
 800468c:	f7ff fd68 	bl	8004160 <_ZSt3sinf>
 8004690:	eef0 7a40 	vmov.f32	s15, s0
 8004694:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004698:	ed97 0a04 	vldr	s0, [r7, #16]
 800469c:	f7ff fd60 	bl	8004160 <_ZSt3sinf>
 80046a0:	eef0 8a40 	vmov.f32	s17, s0
 80046a4:	ed97 0a02 	vldr	s0, [r7, #8]
 80046a8:	f7ff fd4a 	bl	8004140 <_ZSt3cosf>
 80046ac:	eef0 7a40 	vmov.f32	s15, s0
 80046b0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80046b4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80046b8:	f7ff fd42 	bl	8004140 <_ZSt3cosf>
 80046bc:	eef0 7a40 	vmov.f32	s15, s0
 80046c0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80046c4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80046c8:	edc7 7a07 	vstr	s15, [r7, #28]
    float yonelim_f = atan2(x, y);
 80046cc:	edd7 0a07 	vldr	s1, [r7, #28]
 80046d0:	ed97 0a08 	vldr	s0, [r7, #32]
 80046d4:	f7ff fd20 	bl	8004118 <_ZSt5atan2ff>
 80046d8:	ed87 0a06 	vstr	s0, [r7, #24]

    yonelim_f = yonelim_f * (180.0 / M_PI);
 80046dc:	69b8      	ldr	r0, [r7, #24]
 80046de:	f7fb ff2b 	bl	8000538 <__aeabi_f2d>
 80046e2:	a31e      	add	r3, pc, #120	; (adr r3, 800475c <_ZN5Araba10yonelimBulEffff+0x1ac>)
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f7fb ff7e 	bl	80005e8 <__aeabi_dmul>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4610      	mov	r0, r2
 80046f2:	4619      	mov	r1, r3
 80046f4:	f7fc fa70 	bl	8000bd8 <__aeabi_d2f>
 80046f8:	4603      	mov	r3, r0
 80046fa:	61bb      	str	r3, [r7, #24]

    return fmod(yonelim_f + 360.0, 360.0);
 80046fc:	69b8      	ldr	r0, [r7, #24]
 80046fe:	f7fb ff1b 	bl	8000538 <__aeabi_f2d>
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <_ZN5Araba10yonelimBulEffff+0x1a0>)
 8004708:	f7fb fdb8 	bl	800027c <__adddf3>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	ec43 2b17 	vmov	d7, r2, r3
 8004714:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8004748 <_ZN5Araba10yonelimBulEffff+0x198>
 8004718:	eeb0 0a47 	vmov.f32	s0, s14
 800471c:	eef0 0a67 	vmov.f32	s1, s15
 8004720:	f005 fe56 	bl	800a3d0 <fmod>
 8004724:	ec53 2b10 	vmov	r2, r3, d0
 8004728:	4610      	mov	r0, r2
 800472a:	4619      	mov	r1, r3
 800472c:	f7fc fa54 	bl	8000bd8 <__aeabi_d2f>
 8004730:	4603      	mov	r3, r0
 8004732:	ee07 3a90 	vmov	s15, r3
}
 8004736:	eeb0 0a67 	vmov.f32	s0, s15
 800473a:	3728      	adds	r7, #40	; 0x28
 800473c:	46bd      	mov	sp, r7
 800473e:	ecbd 8b02 	vpop	{d8}
 8004742:	bd80      	pop	{r7, pc}
 8004744:	f3af 8000 	nop.w
 8004748:	00000000 	.word	0x00000000
 800474c:	40768000 	.word	0x40768000
 8004750:	40768000 	.word	0x40768000
 8004754:	a2529d39 	.word	0xa2529d39
 8004758:	3f91df46 	.word	0x3f91df46
 800475c:	1a63c1f8 	.word	0x1a63c1f8
 8004760:	404ca5dc 	.word	0x404ca5dc

08004764 <_ZN5PaketC1EP20__UART_HandleTypeDef>:
	VERSIYON=0x02,
	YOKLAMA=0x03

};

Paket::Paket(UART_HandleTypeDef* huart)
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	705a      	strb	r2, [r3, #1]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	709a      	strb	r2, [r3, #2]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	679a      	str	r2, [r3, #120]	; 0x78
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	67da      	str	r2, [r3, #124]	; 0x7c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
{
	this->huart=huart;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	605a      	str	r2, [r3, #4]

}
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <_ZN5PaketC1Ehhhh>:
Paket::Paket(uint8_t baslik1_u8, uint8_t baslik2_u8, uint8_t paketTipi_u8, uint8_t dataBoyutu_u8)
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	4608      	mov	r0, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	70fb      	strb	r3, [r7, #3]
 80047ce:	460b      	mov	r3, r1
 80047d0:	70bb      	strb	r3, [r7, #2]
 80047d2:	4613      	mov	r3, r2
 80047d4:	707b      	strb	r3, [r7, #1]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	705a      	strb	r2, [r3, #1]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	709a      	strb	r2, [r3, #2]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	679a      	str	r2, [r3, #120]	; 0x78
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	67da      	str	r2, [r3, #124]	; 0x7c
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
{
	this->baslik1_u8=baslik1_u8;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	this->baslik2_u8=baslik2_u8;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	78ba      	ldrb	r2, [r7, #2]
 800481c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	this->paketTipi_u8=paketTipi_u8;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	787a      	ldrb	r2, [r7, #1]
 8004824:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	this->dataBoyutu_u8=dataBoyutu_u8;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7c3a      	ldrb	r2, [r7, #16]
 800482c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	this->latitude=0;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	this->longitude=0;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	this->pitch=0;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	this->roll=0;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	this->heading=0;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	this->sicaklik=0;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    memset(gpspaket, 0, sizeof(gpspaket));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3308      	adds	r3, #8
 8004870:	2215      	movs	r2, #21
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f00a f8c4 	bl	800ea02 <memset>
    memset(imupaket, 0, sizeof(imupaket));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	331d      	adds	r3, #29
 800487e:	2215      	movs	r2, #21
 8004880:	2100      	movs	r1, #0
 8004882:	4618      	mov	r0, r3
 8004884:	f00a f8bd 	bl	800ea02 <memset>
}
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <_ZN5Paket14PaketKesmeInitEv>:
void Paket::PaketKesmeInit()
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, ArayuzData, sizeof(ArayuzData));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6858      	ldr	r0, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3332      	adds	r3, #50	; 0x32
 80048a2:	220c      	movs	r2, #12
 80048a4:	4619      	mov	r1, r3
 80048a6:	f004 fde2 	bl	800946e <HAL_UART_Receive_IT>
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <_ZN5Paket15GpsPaketOlusturEffff>:
void Paket::GpsPaketOlustur(float latitude,float longitude,float altitude,float derece)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b086      	sub	sp, #24
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6178      	str	r0, [r7, #20]
 80048ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80048be:	edc7 0a03 	vstr	s1, [r7, #12]
 80048c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80048c6:	edc7 1a01 	vstr	s3, [r7, #4]

    gpspaket[0] = 0x12;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2212      	movs	r2, #18
 80048ce:	721a      	strb	r2, [r3, #8]
    gpspaket[1] = 0x34;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2234      	movs	r2, #52	; 0x34
 80048d4:	725a      	strb	r2, [r3, #9]
    gpspaket[2] = 0x01;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2201      	movs	r2, #1
 80048da:	729a      	strb	r2, [r3, #10]
    gpspaket[3] = 0x11;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2211      	movs	r2, #17
 80048e0:	72da      	strb	r2, [r3, #11]
    this->latitude = latitude;
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    this->longitude = longitude;
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    this->altitude = altitude;
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    this->derece = derece;
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    floatToBytes(&latitude, latBytes_u8);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f103 025e 	add.w	r2, r3, #94	; 0x5e
 8004908:	f107 0310 	add.w	r3, r7, #16
 800490c:	4619      	mov	r1, r3
 800490e:	6978      	ldr	r0, [r7, #20]
 8004910:	f000 fb92 	bl	8005038 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&longitude, lonBytes_u8);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f103 0262 	add.w	r2, r3, #98	; 0x62
 800491a:	f107 030c 	add.w	r3, r7, #12
 800491e:	4619      	mov	r1, r3
 8004920:	6978      	ldr	r0, [r7, #20]
 8004922:	f000 fb89 	bl	8005038 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&altitude, altBytes_u8);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f103 0266 	add.w	r2, r3, #102	; 0x66
 800492c:	f107 0308 	add.w	r3, r7, #8
 8004930:	4619      	mov	r1, r3
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f000 fb80 	bl	8005038 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&derece, dereceBytes_u8);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f103 026a 	add.w	r2, r3, #106	; 0x6a
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	4619      	mov	r1, r3
 8004942:	6978      	ldr	r0, [r7, #20]
 8004944:	f000 fb78 	bl	8005038 <_ZN5Paket12floatToBytesEPfPh>
    memcpy(gpspaket + 4, latBytes_u8, 4);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	3308      	adds	r3, #8
 800494c:	3304      	adds	r3, #4
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	325e      	adds	r2, #94	; 0x5e
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	601a      	str	r2, [r3, #0]
    memcpy(gpspaket + 8, lonBytes_u8, 4);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	3308      	adds	r3, #8
 800495a:	3308      	adds	r3, #8
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	3262      	adds	r2, #98	; 0x62
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	601a      	str	r2, [r3, #0]
    memcpy(gpspaket + 12, altBytes_u8, 4);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	3308      	adds	r3, #8
 8004968:	330c      	adds	r3, #12
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	3266      	adds	r2, #102	; 0x66
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	601a      	str	r2, [r3, #0]
    memcpy(gpspaket + 16, dereceBytes_u8, 4);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	3308      	adds	r3, #8
 8004976:	3310      	adds	r3, #16
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	326a      	adds	r2, #106	; 0x6a
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	601a      	str	r2, [r3, #0]
    gpspaket[20]=CRC8Hesaplama(gpspaket,4, 20);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f103 0108 	add.w	r1, r3, #8
 8004986:	2314      	movs	r3, #20
 8004988:	2204      	movs	r2, #4
 800498a:	6978      	ldr	r0, [r7, #20]
 800498c:	f000 faac 	bl	8004ee8 <_ZN5Paket13CRC8HesaplamaEPhhh>
 8004990:	4603      	mov	r3, r0
 8004992:	461a      	mov	r2, r3
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	771a      	strb	r2, [r3, #28]
}
 8004998:	bf00      	nop
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <_ZN5Paket15ImuPaketOlusturEffff>:
void Paket::ImuPaketOlustur(float pitch,float roll,float heading,float sicaklik)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6178      	str	r0, [r7, #20]
 80049a8:	ed87 0a04 	vstr	s0, [r7, #16]
 80049ac:	edc7 0a03 	vstr	s1, [r7, #12]
 80049b0:	ed87 1a02 	vstr	s2, [r7, #8]
 80049b4:	edc7 1a01 	vstr	s3, [r7, #4]
    imupaket[0] = 0x12;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2212      	movs	r2, #18
 80049bc:	775a      	strb	r2, [r3, #29]
    imupaket[1] = 0x34;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2234      	movs	r2, #52	; 0x34
 80049c2:	779a      	strb	r2, [r3, #30]
    imupaket[2] = 0x02;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2202      	movs	r2, #2
 80049c8:	77da      	strb	r2, [r3, #31]
    imupaket[3] = 0x11;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2211      	movs	r2, #17
 80049ce:	f883 2020 	strb.w	r2, [r3, #32]
    this->pitch = pitch;
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    this->roll = roll;
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    this->heading = heading;
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    this-> sicaklik = sicaklik;
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    floatToBytes(&pitch, pitchBytes_u8);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f103 024e 	add.w	r2, r3, #78	; 0x4e
 80049f8:	f107 0310 	add.w	r3, r7, #16
 80049fc:	4619      	mov	r1, r3
 80049fe:	6978      	ldr	r0, [r7, #20]
 8004a00:	f000 fb1a 	bl	8005038 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&roll, rollBytes_u8);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f103 0252 	add.w	r2, r3, #82	; 0x52
 8004a0a:	f107 030c 	add.w	r3, r7, #12
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6978      	ldr	r0, [r7, #20]
 8004a12:	f000 fb11 	bl	8005038 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&heading, headingBytes_u8);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8004a1c:	f107 0308 	add.w	r3, r7, #8
 8004a20:	4619      	mov	r1, r3
 8004a22:	6978      	ldr	r0, [r7, #20]
 8004a24:	f000 fb08 	bl	8005038 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&sicaklik, sicaklikBytes_u8);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	6978      	ldr	r0, [r7, #20]
 8004a34:	f000 fb00 	bl	8005038 <_ZN5Paket12floatToBytesEPfPh>

    memcpy(imupaket + 4, pitchBytes_u8, 4);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	331d      	adds	r3, #29
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	324e      	adds	r2, #78	; 0x4e
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	601a      	str	r2, [r3, #0]
    memcpy(imupaket + 8, rollBytes_u8, 4);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	331d      	adds	r3, #29
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	3252      	adds	r2, #82	; 0x52
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	601a      	str	r2, [r3, #0]
    memcpy(imupaket + 12, headingBytes_u8, 4);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	331d      	adds	r3, #29
 8004a58:	330c      	adds	r3, #12
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	3256      	adds	r2, #86	; 0x56
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	601a      	str	r2, [r3, #0]
    memcpy(imupaket + 16, sicaklikBytes_u8, 4);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	331d      	adds	r3, #29
 8004a66:	3310      	adds	r3, #16
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	325a      	adds	r2, #90	; 0x5a
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	601a      	str	r2, [r3, #0]

    imupaket[20] = CRC8Hesaplama(imupaket, 4,20);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f103 011d 	add.w	r1, r3, #29
 8004a76:	2314      	movs	r3, #20
 8004a78:	2204      	movs	r2, #4
 8004a7a:	6978      	ldr	r0, [r7, #20]
 8004a7c:	f000 fa34 	bl	8004ee8 <_ZN5Paket13CRC8HesaplamaEPhhh>
 8004a80:	4603      	mov	r3, r0
 8004a82:	461a      	mov	r2, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8004a8a:	bf00      	nop
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_ZN5Paket20PaketOlusturveGonderEhhh>:
void Paket::PaketOlusturveGonder(uint8_t b,uint8_t o,uint8_t s)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	4608      	mov	r0, r1
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	70fb      	strb	r3, [r7, #3]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70bb      	strb	r3, [r7, #2]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	707b      	strb	r3, [r7, #1]
	versiyonpaket[0] = 0x12;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2212      	movs	r2, #18
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	versiyonpaket[1] = 0x34;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2234      	movs	r2, #52	; 0x34
 8004ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	versiyonpaket[2] = 0x03;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2203      	movs	r2, #3
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	versiyonpaket[3] = 0x04;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	versiyonpaket[4] = b;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	78fa      	ldrb	r2, [r7, #3]
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	versiyonpaket[5] = o;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	78ba      	ldrb	r2, [r7, #2]
 8004ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	versiyonpaket[6] = s;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	787a      	ldrb	r2, [r7, #1]
 8004ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	versiyonpaket[7] = CRC8Hesaplama(versiyonpaket, 4,7);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f103 013e 	add.w	r1, r3, #62	; 0x3e
 8004aea:	2307      	movs	r3, #7
 8004aec:	2204      	movs	r2, #4
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f9fa 	bl	8004ee8 <_ZN5Paket13CRC8HesaplamaEPhhh>
 8004af4:	4603      	mov	r3, r0
 8004af6:	461a      	mov	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	HAL_UART_Transmit(huart, versiyonpaket, sizeof(versiyonpaket), 1000);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6858      	ldr	r0, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f103 013e 	add.w	r1, r3, #62	; 0x3e
 8004b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	f004 fc23 	bl	8009358 <HAL_UART_Transmit>

}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <_ZN5Paket18YoklamaPaketGonderEv>:
void Paket::YoklamaPaketGonder()
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
	YoklamaFlag=true;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	705a      	strb	r2, [r3, #1]
	yoklamapaket[0] = 0x12;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2212      	movs	r2, #18
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	yoklamapaket[1] = 0x34;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2234      	movs	r2, #52	; 0x34
 8004b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	yoklamapaket[2] = 0x04;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	yoklamapaket[3] = 0x04;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2204      	movs	r2, #4
 8004b44:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	yoklamapaket[4] = 0x01;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	yoklamapaket[5] = 0x02;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	yoklamapaket[6] = 0x03;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2203      	movs	r2, #3
 8004b5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	yoklamapaket[7] = CRC8Hesaplama(yoklamapaket, 4,7);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8004b66:	2307      	movs	r3, #7
 8004b68:	2204      	movs	r2, #4
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f9bc 	bl	8004ee8 <_ZN5Paket13CRC8HesaplamaEPhhh>
 8004b70:	4603      	mov	r3, r0
 8004b72:	461a      	mov	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	HAL_UART_Transmit(huart, yoklamapaket, sizeof(yoklamapaket), 1000);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6858      	ldr	r0, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8004b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b88:	2208      	movs	r2, #8
 8004b8a:	f004 fbe5 	bl	8009358 <HAL_UART_Transmit>
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <_ZN5Paket13gpsPaketCagirEPh>:
void Paket::gpsPaketCagir(uint8_t *kopyaDizi)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
	memcpy(kopyaDizi, gpspaket, sizeof(gpspaket));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	2215      	movs	r2, #21
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6838      	ldr	r0, [r7, #0]
 8004baa:	f009 ffb8 	bl	800eb1e <memcpy>
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <_ZN5Paket13imuPaketCagirEPh>:
void Paket::imuPaketCagir(uint8_t *kopyaDizi)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
	memcpy(kopyaDizi, imupaket, sizeof(imupaket));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	331d      	adds	r3, #29
 8004bc4:	2215      	movs	r2, #21
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6838      	ldr	r0, [r7, #0]
 8004bca:	f009 ffa8 	bl	800eb1e <memcpy>
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <_ZN5Paket12BayrakKaldirEv>:

void Paket::BayrakKaldir()
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
	PaketCozBayrak=true;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <_ZN5Paket8PaketCozEv>:
void Paket::PaketCoz()
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
    Durumlar Durum = Baslik1Coz;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	73fb      	strb	r3, [r7, #15]
    Paketler Paket = VERSIYON;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	73bb      	strb	r3, [r7, #14]
    bool islem=true;
 8004c00:	2301      	movs	r3, #1
 8004c02:	737b      	strb	r3, [r7, #13]
    while (islem)
 8004c04:	bf00      	nop
 8004c06:	e150      	b.n	8004eaa <_ZN5Paket8PaketCozEv+0x2ba>
    {
        switch (Durum)
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	f200 814d 	bhi.w	8004eaa <_ZN5Paket8PaketCozEv+0x2ba>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <_ZN5Paket8PaketCozEv+0x28>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c2d 	.word	0x08004c2d
 8004c1c:	08004c6f 	.word	0x08004c6f
 8004c20:	08004cd3 	.word	0x08004cd3
 8004c24:	08004d35 	.word	0x08004d35
 8004c28:	08004d9d 	.word	0x08004d9d
        {
            case Baslik1Coz:
                if (ArayuzData[startIndex_u32] == 0x12 && ArayuzData[startIndex_u32] != 0)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	4413      	add	r3, r2
 8004c34:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c38:	2b12      	cmp	r3, #18
 8004c3a:	d109      	bne.n	8004c50 <_ZN5Paket8PaketCozEv+0x60>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	4413      	add	r3, r2
 8004c44:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <_ZN5Paket8PaketCozEv+0x60>
                {
                    Durum = Baslik2Coz;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
                }
                startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c54:	1c59      	adds	r1, r3, #1
 8004c56:	4b9d      	ldr	r3, [pc, #628]	; (8004ecc <_ZN5Paket8PaketCozEv+0x2dc>)
 8004c58:	fba3 2301 	umull	r2, r3, r3, r1
 8004c5c:	08da      	lsrs	r2, r3, #3
 8004c5e:	4613      	mov	r3, r2
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	1aca      	subs	r2, r1, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	679a      	str	r2, [r3, #120]	; 0x78
                break;
 8004c6c:	e11d      	b.n	8004eaa <_ZN5Paket8PaketCozEv+0x2ba>

            case Baslik2Coz:
                if (ArayuzData[startIndex_u32] == 0x34 && ArayuzData[startIndex_u32] != 0)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c7a:	2b34      	cmp	r3, #52	; 0x34
 8004c7c:	d118      	bne.n	8004cb0 <_ZN5Paket8PaketCozEv+0xc0>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	4413      	add	r3, r2
 8004c86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d010      	beq.n	8004cb0 <_ZN5Paket8PaketCozEv+0xc0>
                {
                    Durum = PaketTuruSec;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c96:	1c59      	adds	r1, r3, #1
 8004c98:	4b8c      	ldr	r3, [pc, #560]	; (8004ecc <_ZN5Paket8PaketCozEv+0x2dc>)
 8004c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c9e:	08da      	lsrs	r2, r3, #3
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	1aca      	subs	r2, r1, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	679a      	str	r2, [r3, #120]	; 0x78
 8004cae:	e00f      	b.n	8004cd0 <_ZN5Paket8PaketCozEv+0xe0>
                }
                else
                {
                    Durum = Baslik1Coz;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cb8:	1c59      	adds	r1, r3, #1
 8004cba:	4b84      	ldr	r3, [pc, #528]	; (8004ecc <_ZN5Paket8PaketCozEv+0x2dc>)
 8004cbc:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc0:	08da      	lsrs	r2, r3, #3
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	1aca      	subs	r2, r1, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	679a      	str	r2, [r3, #120]	; 0x78
                }
                break;
 8004cd0:	e0eb      	b.n	8004eaa <_ZN5Paket8PaketCozEv+0x2ba>

            case PaketTuruSec:
                if (ArayuzData[startIndex_u32] != 0)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d017      	beq.n	8004d12 <_ZN5Paket8PaketCozEv+0x122>
                {
                    Paket = (Paketler)ArayuzData[startIndex_u32];
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004cee:	73bb      	strb	r3, [r7, #14]
                    Durum = DataBoyutuAl;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf8:	1c59      	adds	r1, r3, #1
 8004cfa:	4b74      	ldr	r3, [pc, #464]	; (8004ecc <_ZN5Paket8PaketCozEv+0x2dc>)
 8004cfc:	fba3 2301 	umull	r2, r3, r3, r1
 8004d00:	08da      	lsrs	r2, r3, #3
 8004d02:	4613      	mov	r3, r2
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	1aca      	subs	r2, r1, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	679a      	str	r2, [r3, #120]	; 0x78
 8004d10:	e0cb      	b.n	8004eaa <_ZN5Paket8PaketCozEv+0x2ba>
                }
                else
                {
                    Durum = Baslik1Coz;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d1a:	1c59      	adds	r1, r3, #1
 8004d1c:	4b6b      	ldr	r3, [pc, #428]	; (8004ecc <_ZN5Paket8PaketCozEv+0x2dc>)
 8004d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d22:	08da      	lsrs	r2, r3, #3
 8004d24:	4613      	mov	r3, r2
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	1aca      	subs	r2, r1, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	679a      	str	r2, [r3, #120]	; 0x78
                }
                break;
 8004d32:	e0ba      	b.n	8004eaa <_ZN5Paket8PaketCozEv+0x2ba>

            case DataBoyutuAl:
                if (ArayuzData[startIndex_u32] != 0)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01a      	beq.n	8004d7a <_ZN5Paket8PaketCozEv+0x18a>
                {
                    dataLength_s16 = ArayuzData[startIndex_u32];
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d50:	b21a      	sxth	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
                    Durum = DataOku;
 8004d58:	2304      	movs	r3, #4
 8004d5a:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d60:	1c59      	adds	r1, r3, #1
 8004d62:	4b5a      	ldr	r3, [pc, #360]	; (8004ecc <_ZN5Paket8PaketCozEv+0x2dc>)
 8004d64:	fba3 2301 	umull	r2, r3, r3, r1
 8004d68:	08da      	lsrs	r2, r3, #3
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	1aca      	subs	r2, r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	679a      	str	r2, [r3, #120]	; 0x78
 8004d78:	e097      	b.n	8004eaa <_ZN5Paket8PaketCozEv+0x2ba>
                }
                else
                {
                    Durum = Baslik1Coz;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d82:	1c59      	adds	r1, r3, #1
 8004d84:	4b51      	ldr	r3, [pc, #324]	; (8004ecc <_ZN5Paket8PaketCozEv+0x2dc>)
 8004d86:	fba3 2301 	umull	r2, r3, r3, r1
 8004d8a:	08da      	lsrs	r2, r3, #3
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	1aca      	subs	r2, r1, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	679a      	str	r2, [r3, #120]	; 0x78
                }
                break;
 8004d9a:	e086      	b.n	8004eaa <_ZN5Paket8PaketCozEv+0x2ba>

            case DataOku:
                if (Paket == GPS && dataLength_s16 == 8)
 8004d9c:	7bbb      	ldrb	r3, [r7, #14]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d14c      	bne.n	8004e3c <_ZN5Paket8PaketCozEv+0x24c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d147      	bne.n	8004e3c <_ZN5Paket8PaketCozEv+0x24c>
                {
                    ArayuzEnlem_f = bytesToFloat(ArayuzData, startIndex_u32);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f103 0132 	add.w	r1, r3, #50	; 0x32
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db6:	461a      	mov	r2, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f8d3 	bl	8004f64 <_ZN5Paket12bytesToFloatEPKhl>
 8004dbe:	eef0 7a40 	vmov.f32	s15, s0
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
                    ArayuzBoylam_f = bytesToFloat(ArayuzData, (startIndex_u32 + 4) % sizeof(ArayuzData));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f103 0032 	add.w	r0, r3, #50	; 0x32
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dd2:	1d19      	adds	r1, r3, #4
 8004dd4:	4b3d      	ldr	r3, [pc, #244]	; (8004ecc <_ZN5Paket8PaketCozEv+0x2dc>)
 8004dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dda:	08da      	lsrs	r2, r3, #3
 8004ddc:	4613      	mov	r3, r2
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	1aca      	subs	r2, r1, r3
 8004de6:	4613      	mov	r3, r2
 8004de8:	461a      	mov	r2, r3
 8004dea:	4601      	mov	r1, r0
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f8b9 	bl	8004f64 <_ZN5Paket12bytesToFloatEPKhl>
 8004df2:	eef0 7a40 	vmov.f32	s15, s0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
                    MesafeBayrak=true;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	709a      	strb	r2, [r3, #2]

                    if (ArayuzEnlem_f != 0 && ArayuzBoylam_f != 0)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8004e08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    {

                    }

                    startIndex_u32 = (startIndex_u32 + dataLength_s16) % sizeof(ArayuzData);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 8004e1a:	1899      	adds	r1, r3, r2
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <_ZN5Paket8PaketCozEv+0x2dc>)
 8004e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e22:	08da      	lsrs	r2, r3, #3
 8004e24:	4613      	mov	r3, r2
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	1aca      	subs	r2, r1, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	679a      	str	r2, [r3, #120]	; 0x78
                    Durum = Baslik1Coz;
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
                    islem=false;
 8004e36:	2300      	movs	r3, #0
 8004e38:	737b      	strb	r3, [r7, #13]
 8004e3a:	e035      	b.n	8004ea8 <_ZN5Paket8PaketCozEv+0x2b8>
                }
                else if (Paket == VERSIYON && dataLength_s16 == 8)
 8004e3c:	7bbb      	ldrb	r3, [r7, #14]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d120      	bne.n	8004e84 <_ZN5Paket8PaketCozEv+0x294>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d11b      	bne.n	8004e84 <_ZN5Paket8PaketCozEv+0x294>
                {

                	PaketOlusturveGonder(0,0,5);
 8004e4c:	2305      	movs	r3, #5
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2100      	movs	r1, #0
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff fe1d 	bl	8004a92 <_ZN5Paket20PaketOlusturveGonderEhhh>
                	startIndex_u32 = (startIndex_u32 + dataLength_s16) % sizeof(ArayuzData);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 8004e62:	1899      	adds	r1, r3, r2
 8004e64:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <_ZN5Paket8PaketCozEv+0x2dc>)
 8004e66:	fba3 2301 	umull	r2, r3, r3, r1
 8004e6a:	08da      	lsrs	r2, r3, #3
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	1aca      	subs	r2, r1, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	679a      	str	r2, [r3, #120]	; 0x78
                	Durum = Baslik1Coz;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
                	islem=false;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	737b      	strb	r3, [r7, #13]
 8004e82:	e011      	b.n	8004ea8 <_ZN5Paket8PaketCozEv+0x2b8>
                }
                else if (Paket == YOKLAMA && dataLength_s16 == 8)
 8004e84:	7bbb      	ldrb	r3, [r7, #14]
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d10a      	bne.n	8004ea0 <_ZN5Paket8PaketCozEv+0x2b0>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d105      	bne.n	8004ea0 <_ZN5Paket8PaketCozEv+0x2b0>
                {
                	YoklamaPaketGonder();
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fe40 	bl	8004b1a <_ZN5Paket18YoklamaPaketGonderEv>
                	islem=false;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	737b      	strb	r3, [r7, #13]
 8004e9e:	e003      	b.n	8004ea8 <_ZN5Paket8PaketCozEv+0x2b8>
                }
                else
                {
                	Durum = Baslik1Coz;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	73fb      	strb	r3, [r7, #15]
                	islem=false;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	737b      	strb	r3, [r7, #13]
                }
                break;
 8004ea8:	bf00      	nop
    while (islem)
 8004eaa:	7b7b      	ldrb	r3, [r7, #13]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f47f aeab 	bne.w	8004c08 <_ZN5Paket8PaketCozEv+0x18>
        }
    }

    HAL_UART_Receive_IT(huart, ArayuzData, sizeof(ArayuzData));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6858      	ldr	r0, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3332      	adds	r3, #50	; 0x32
 8004eba:	220c      	movs	r2, #12
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	f004 fad6 	bl	800946e <HAL_UART_Receive_IT>
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	aaaaaaab 	.word	0xaaaaaaab

08004ed0 <_ZN5Paket11ArayuzLatAlEv>:
float *Paket::ArayuzLatAl(){return &ArayuzEnlem_f;}
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	33a4      	adds	r3, #164	; 0xa4
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <_ZN5Paket13CRC8HesaplamaEPhhh>:
float *Paket::ArayuzLonAl(){return &ArayuzBoylam_f;}

uint8_t Paket::CRC8Hesaplama(uint8_t *data, uint8_t start ,uint8_t end)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	71fb      	strb	r3, [r7, #7]
 8004efa:	4613      	mov	r3, r2
 8004efc:	71bb      	strb	r3, [r7, #6]
    uint8_t crc = 0x00;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = start; i < end; i++)
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	75bb      	strb	r3, [r7, #22]
 8004f06:	e021      	b.n	8004f4c <_ZN5Paket13CRC8HesaplamaEPhhh+0x64>
    {
        crc ^= data[i]; // CRC değerini, dizinin bir sonraki byte ile XOR
 8004f08:	7dbb      	ldrb	r3, [r7, #22]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	781a      	ldrb	r2, [r3, #0]
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	4053      	eors	r3, r2
 8004f14:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) //Her bir byte için döngü
 8004f16:	2300      	movs	r3, #0
 8004f18:	757b      	strb	r3, [r7, #21]
 8004f1a:	e011      	b.n	8004f40 <_ZN5Paket13CRC8HesaplamaEPhhh+0x58>
        {
            if (crc & 0x80)//CRC değerinin en soldaki biti 1 mi
 8004f1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	da07      	bge.n	8004f34 <_ZN5Paket13CRC8HesaplamaEPhhh+0x4c>
            {
                crc = (crc << 1) ^ 0X07; //En yüksek bit birse CRC değerini bir bit sola kaydır ve XOR işlemi yap
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	f083 0307 	eor.w	r3, r3, #7
 8004f2e:	b25b      	sxtb	r3, r3
 8004f30:	75fb      	strb	r3, [r7, #23]
 8004f32:	e002      	b.n	8004f3a <_ZN5Paket13CRC8HesaplamaEPhhh+0x52>
            }
            else
            {
                crc <<= 1; //En yüksek bit sıfırsa CRC değerini bir bit sola kaydır
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) //Her bir byte için döngü
 8004f3a:	7d7b      	ldrb	r3, [r7, #21]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	757b      	strb	r3, [r7, #21]
 8004f40:	7d7b      	ldrb	r3, [r7, #21]
 8004f42:	2b07      	cmp	r3, #7
 8004f44:	d9ea      	bls.n	8004f1c <_ZN5Paket13CRC8HesaplamaEPhhh+0x34>
    for (uint8_t i = start; i < end; i++)
 8004f46:	7dbb      	ldrb	r3, [r7, #22]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	75bb      	strb	r3, [r7, #22]
 8004f4c:	7dba      	ldrb	r2, [r7, #22]
 8004f4e:	79bb      	ldrb	r3, [r7, #6]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d3d9      	bcc.n	8004f08 <_ZN5Paket13CRC8HesaplamaEPhhh+0x20>
            }
        }
    }

    return crc;
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <_ZN5Paket12bytesToFloatEPKhl>:

float Paket::bytesToFloat(const uint8_t* buffer, int32_t startIndex) {
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
   intBits_u32 =(buffer[(startIndex + 3) % 120] << 24) |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	1cda      	adds	r2, r3, #3
 8004f74:	4b2f      	ldr	r3, [pc, #188]	; (8005034 <_ZN5Paket12bytesToFloatEPKhl+0xd0>)
 8004f76:	fb83 1302 	smull	r1, r3, r3, r2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	1199      	asrs	r1, r3, #6
 8004f7e:	17d3      	asrs	r3, r2, #31
 8004f80:	1ac9      	subs	r1, r1, r3
 8004f82:	460b      	mov	r3, r1
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a5b      	subs	r3, r3, r1
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	1ad1      	subs	r1, r2, r3
 8004f8c:	460a      	mov	r2, r1
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4413      	add	r3, r2
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	0618      	lsls	r0, r3, #24
    		(buffer[(startIndex + 2) % 120] << 16) |
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	1c9a      	adds	r2, r3, #2
 8004f9a:	4b26      	ldr	r3, [pc, #152]	; (8005034 <_ZN5Paket12bytesToFloatEPKhl+0xd0>)
 8004f9c:	fb83 1302 	smull	r1, r3, r3, r2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	1199      	asrs	r1, r3, #6
 8004fa4:	17d3      	asrs	r3, r2, #31
 8004fa6:	1ac9      	subs	r1, r1, r3
 8004fa8:	460b      	mov	r3, r1
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	1a5b      	subs	r3, r3, r1
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	1ad1      	subs	r1, r2, r3
 8004fb2:	460a      	mov	r2, r1
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	041b      	lsls	r3, r3, #16
   intBits_u32 =(buffer[(startIndex + 3) % 120] << 24) |
 8004fbc:	4318      	orrs	r0, r3
			(buffer[(startIndex + 1) % 120] << 8)  |
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	4b1c      	ldr	r3, [pc, #112]	; (8005034 <_ZN5Paket12bytesToFloatEPKhl+0xd0>)
 8004fc4:	fb83 1302 	smull	r1, r3, r3, r2
 8004fc8:	4413      	add	r3, r2
 8004fca:	1199      	asrs	r1, r3, #6
 8004fcc:	17d3      	asrs	r3, r2, #31
 8004fce:	1ac9      	subs	r1, r1, r3
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	1a5b      	subs	r3, r3, r1
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	1ad1      	subs	r1, r2, r3
 8004fda:	460a      	mov	r2, r1
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4413      	add	r3, r2
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	021b      	lsls	r3, r3, #8
    		(buffer[(startIndex + 2) % 120] << 16) |
 8004fe4:	4318      	orrs	r0, r3
			(buffer[(startIndex + 0) % 120] << 0)  ;
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4b12      	ldr	r3, [pc, #72]	; (8005034 <_ZN5Paket12bytesToFloatEPKhl+0xd0>)
 8004fea:	fb83 1302 	smull	r1, r3, r3, r2
 8004fee:	4413      	add	r3, r2
 8004ff0:	1199      	asrs	r1, r3, #6
 8004ff2:	17d3      	asrs	r3, r2, #31
 8004ff4:	1ac9      	subs	r1, r1, r3
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	1a5b      	subs	r3, r3, r1
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	1ad1      	subs	r1, r2, r3
 8005000:	460a      	mov	r2, r1
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4413      	add	r3, r2
 8005006:	781b      	ldrb	r3, [r3, #0]
			(buffer[(startIndex + 1) % 120] << 8)  |
 8005008:	4303      	orrs	r3, r0
 800500a:	461a      	mov	r2, r3
   intBits_u32 =(buffer[(startIndex + 3) % 120] << 24) |
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	67da      	str	r2, [r3, #124]	; 0x7c

    memcpy(&sonuc, &intBits_u32, sizeof(sonuc));
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	33a0      	adds	r3, #160	; 0xa0
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	327c      	adds	r2, #124	; 0x7c
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	601a      	str	r2, [r3, #0]
    return sonuc;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005022:	ee07 3a90 	vmov	s15, r3
}
 8005026:	eeb0 0a67 	vmov.f32	s0, s15
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	88888889 	.word	0x88888889

08005038 <_ZN5Paket12floatToBytesEPfPh>:

uint32_t Paket::floatToBytes(float *Deger_f, uint8_t* bytes)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
    uint8_t* p = (uint8_t*)Deger_f;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 4; i++)
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e00a      	b.n	8005064 <_ZN5Paket12floatToBytesEPfPh+0x2c>
    {
        bytes[i] = p[i];
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	441a      	add	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	440b      	add	r3, r1
 800505a:	7812      	ldrb	r2, [r2, #0]
 800505c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	3301      	adds	r3, #1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b03      	cmp	r3, #3
 8005068:	ddf1      	ble.n	800504e <_ZN5Paket12floatToBytesEPfPh+0x16>
    }
    return (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | (bytes[0] & 0xFF);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3303      	adds	r3, #3
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	061a      	lsls	r2, r3, #24
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3302      	adds	r3, #2
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	041b      	lsls	r3, r3, #16
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3301      	adds	r3, #1
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	4313      	orrs	r3, r2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	4313      	orrs	r3, r2
}
 800508c:	4618      	mov	r0, r3
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <_ZN13GorevyoneticiC1EP11TIM_TypeDef>:
#include "gorevyonetici.h"


Gorevyonetici::Gorevyonetici(TIM_TypeDef* pTimerAlan)
 8005098:	b5b0      	push	{r4, r5, r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	705a      	strb	r2, [r3, #1]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	709a      	strb	r2, [r3, #2]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	70da      	strb	r2, [r3, #3]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	711a      	strb	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	330c      	adds	r3, #12
 80050c4:	2409      	movs	r4, #9
 80050c6:	461d      	mov	r5, r3
 80050c8:	e004      	b.n	80050d4 <_ZN13GorevyoneticiC1EP11TIM_TypeDef+0x3c>
 80050ca:	4628      	mov	r0, r5
 80050cc:	f000 f818 	bl	8005100 <_ZN5GorevC1Ev>
 80050d0:	350c      	adds	r5, #12
 80050d2:	3c01      	subs	r4, #1
 80050d4:	2c00      	cmp	r4, #0
 80050d6:	daf8      	bge.n	80050ca <_ZN13GorevyoneticiC1EP11TIM_TypeDef+0x32>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
{
    this->pTimerAlan = pTimerAlan;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	609a      	str	r2, [r3, #8]
}
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bdb0      	pop	{r4, r5, r7, pc}

08005100 <_ZN5GorevC1Ev>:

Gorev::Gorev(){}
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	811a      	strh	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <_ZN13Gorevyonetici7GorevAlEPFvvEs>:

void Gorevyonetici::GorevAl(void (*gorev)(), int16_t ms_s16)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	4613      	mov	r3, r2
 800512e:	80fb      	strh	r3, [r7, #6]
	if (gorevSayac < maxGorev)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005136:	2b09      	cmp	r3, #9
 8005138:	d819      	bhi.n	800516e <_ZN13Gorevyonetici7GorevAlEPFvvEs+0x4c>
	{
		gorevler[gorevSayac].GorevGir(gorev, ms_s16);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005140:	461a      	mov	r2, r3
 8005142:	4613      	mov	r3, r2
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	3308      	adds	r3, #8
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	3304      	adds	r3, #4
 8005152:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f8ab 	bl	80052b4 <_ZN5Gorev8GorevGirEPFvvEs>
		gorevSayac++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005164:	3301      	adds	r3, #1
 8005166:	b2da      	uxtb	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
}
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <_ZN13Gorevyonetici12BayrakKaldirEv>:
void Gorevyonetici::BayrakKaldir()
{
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
    pTimerAlan->SR &= ~(TIM_SR_UIF);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	611a      	str	r2, [r3, #16]
    Counter_u16++;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8005196:	3301      	adds	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    for (int i = 0; i < gorevSayac; i++)
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e02c      	b.n	8005200 <_ZN13Gorevyonetici12BayrakKaldirEv+0x88>
    {
		if (0 == Counter_u16 % gorevler[i].MsAl())
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80051ac:	461c      	mov	r4, r3
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4613      	mov	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	3308      	adds	r3, #8
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	3304      	adds	r3, #4
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 f8a8 	bl	8005316 <_ZN5Gorev4MsAlEv>
 80051c6:	4603      	mov	r3, r0
 80051c8:	fb94 f2f3 	sdiv	r2, r4, r3
 80051cc:	fb02 f303 	mul.w	r3, r2, r3
 80051d0:	1ae3      	subs	r3, r4, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf0c      	ite	eq
 80051d6:	2301      	moveq	r3, #1
 80051d8:	2300      	movne	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00c      	beq.n	80051fa <_ZN13Gorevyonetici12BayrakKaldirEv+0x82>
		{
			gorevler[i].BayrakDuzenle(true);
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	3308      	adds	r3, #8
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	4413      	add	r3, r2
 80051f0:	3304      	adds	r3, #4
 80051f2:	2101      	movs	r1, #1
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f87f 	bl	80052f8 <_ZN5Gorev13BayrakDuzenleEb>
    for (int i = 0; i < gorevSayac; i++)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3301      	adds	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005206:	461a      	mov	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4293      	cmp	r3, r2
 800520c:	dbcb      	blt.n	80051a6 <_ZN13Gorevyonetici12BayrakKaldirEv+0x2e>
		}
     }
    if (Counter_u16 % 1000 == 0)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8005214:	4a09      	ldr	r2, [pc, #36]	; (800523c <_ZN13Gorevyonetici12BayrakKaldirEv+0xc4>)
 8005216:	fba2 1203 	umull	r1, r2, r2, r3
 800521a:	0992      	lsrs	r2, r2, #6
 800521c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005220:	fb01 f202 	mul.w	r2, r1, r2
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d103      	bne.n	8005234 <_ZN13Gorevyonetici12BayrakKaldirEv+0xbc>
  	{
  	    Counter_u16=0;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
  	}
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	bd90      	pop	{r4, r7, pc}
 800523c:	10624dd3 	.word	0x10624dd3

08005240 <_ZN13Gorevyonetici13GorevCalistirEv>:

void Gorevyonetici::GorevCalistir()
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < gorevSayac; i++)
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	e026      	b.n	800529c <_ZN13Gorevyonetici13GorevCalistirEv+0x5c>
	{
		if (gorevler[i].Bayrak)
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4613      	mov	r3, r2
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	330c      	adds	r3, #12
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d018      	beq.n	8005296 <_ZN13Gorevyonetici13GorevCalistirEv+0x56>
	    {
			gorevler[i].BayrakDuzenle(false);
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4613      	mov	r3, r2
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	3308      	adds	r3, #8
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	4413      	add	r3, r2
 8005274:	3304      	adds	r3, #4
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f000 f83d 	bl	80052f8 <_ZN5Gorev13BayrakDuzenleEb>
			gorevler[i].Calistir();
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4613      	mov	r3, r2
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	3308      	adds	r3, #8
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	3304      	adds	r3, #4
 8005290:	4618      	mov	r0, r3
 8005292:	f000 f822 	bl	80052da <_ZN5Gorev8CalistirEv>
	for (int i = 0; i < gorevSayac; i++)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3301      	adds	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052a2:	461a      	mov	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4293      	cmp	r3, r2
 80052a8:	dbd1      	blt.n	800524e <_ZN13Gorevyonetici13GorevCalistirEv+0xe>
	    }
	}

}
 80052aa:	bf00      	nop
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <_ZN5Gorev8GorevGirEPFvvEs>:
	        taskCounter_u16=0;
	    }

}
void Gorev::GorevGir(void (*gorev)(), int16_t ms_s16)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	80fb      	strh	r3, [r7, #6]
    this->gorev = gorev;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	605a      	str	r2, [r3, #4]
    this->ms_s16 = ms_s16;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	88fa      	ldrh	r2, [r7, #6]
 80052cc:	811a      	strh	r2, [r3, #8]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <_ZN5Gorev8CalistirEv>:

void Gorev::Calistir()
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
    if (gorev)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <_ZN5Gorev8CalistirEv+0x16>
    {
        gorev();
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	4798      	blx	r3
    }
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <_ZN5Gorev13BayrakDuzenleEb>:

void Gorev::BayrakDuzenle(bool value)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
    Bayrak = value;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	78fa      	ldrb	r2, [r7, #3]
 8005308:	701a      	strb	r2, [r3, #0]
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <_ZN5Gorev4MsAlEv>:



int16_t Gorev::MsAl()
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
    return ms_s16;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800533a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533e:	2b00      	cmp	r3, #0
 8005340:	db0b      	blt.n	800535a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	f003 021f 	and.w	r2, r3, #31
 8005348:	4907      	ldr	r1, [pc, #28]	; (8005368 <__NVIC_EnableIRQ+0x38>)
 800534a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2001      	movs	r0, #1
 8005352:	fa00 f202 	lsl.w	r2, r0, r2
 8005356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	e000e100 	.word	0xe000e100

0800536c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	6039      	str	r1, [r7, #0]
 8005376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537c:	2b00      	cmp	r3, #0
 800537e:	db0a      	blt.n	8005396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	b2da      	uxtb	r2, r3
 8005384:	490c      	ldr	r1, [pc, #48]	; (80053b8 <__NVIC_SetPriority+0x4c>)
 8005386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538a:	0112      	lsls	r2, r2, #4
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	440b      	add	r3, r1
 8005390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005394:	e00a      	b.n	80053ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	4908      	ldr	r1, [pc, #32]	; (80053bc <__NVIC_SetPriority+0x50>)
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	3b04      	subs	r3, #4
 80053a4:	0112      	lsls	r2, r2, #4
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	440b      	add	r3, r1
 80053aa:	761a      	strb	r2, [r3, #24]
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	e000e100 	.word	0xe000e100
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <_ZN5TimerC1EP11TIM_TypeDef>:
#include "mytimer.h"

Timer::Timer(TIM_TypeDef* pTimerAlan)
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
{
    this->pTimerAlan = pTimerAlan;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	601a      	str	r2, [r3, #0]
    TimerClockAktifEt();
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f837 	bl	8005444 <_ZN5Timer17TimerClockAktifEtEv>
}
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <_ZN5Timer10YapilandirEmm>:

void Timer::Yapilandir(uint32_t prescaler_u32, uint32_t period_u32)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
	pTimerAlan->PSC = prescaler_u32 - 1;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	3a01      	subs	r2, #1
 80053f4:	629a      	str	r2, [r3, #40]	; 0x28
	pTimerAlan->ARR = period_u32 - 1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	3a01      	subs	r2, #1
 80053fe:	62da      	str	r2, [r3, #44]	; 0x2c
	pTimerAlan->DIER |= TIM_DIER_UIE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	60da      	str	r2, [r3, #12]
    TimerInterruptAktifEt();
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f8a5 	bl	8005560 <_ZN5Timer21TimerInterruptAktifEtEv>
}
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <_ZN5Timer7AktifEtEv>:

void Timer::AktifEt()
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
	pTimerAlan->CR1 |= TIM_CR1_CEN;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0201 	orr.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <_ZN5Timer17TimerClockAktifEtEv>:
{
    return pTimerAlan->CNT;
}

void Timer::TimerClockAktifEt()
{
 8005444:	b480      	push	{r7}
 8005446:	b089      	sub	sp, #36	; 0x24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
    if (this->pTimerAlan == TIM2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d10e      	bne.n	8005474 <_ZN5Timer17TimerClockAktifEtEv+0x30>
    {
        __HAL_RCC_TIM2_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	4b3b      	ldr	r3, [pc, #236]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	4a3a      	ldr	r2, [pc, #232]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	6413      	str	r3, [r2, #64]	; 0x40
 8005466:	4b38      	ldr	r3, [pc, #224]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	69fb      	ldr	r3, [r7, #28]
    }
    else if (this->pTimerAlan == TIM7)
    {
        __HAL_RCC_TIM7_CLK_ENABLE();
    }
}
 8005472:	e062      	b.n	800553a <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM3)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a34      	ldr	r2, [pc, #208]	; (800554c <_ZN5Timer17TimerClockAktifEtEv+0x108>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d10e      	bne.n	800549c <_ZN5Timer17TimerClockAktifEtEv+0x58>
        __HAL_RCC_TIM3_CLK_ENABLE();
 800547e:	2300      	movs	r3, #0
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	4b31      	ldr	r3, [pc, #196]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	4a30      	ldr	r2, [pc, #192]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005488:	f043 0302 	orr.w	r3, r3, #2
 800548c:	6413      	str	r3, [r2, #64]	; 0x40
 800548e:	4b2e      	ldr	r3, [pc, #184]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	69bb      	ldr	r3, [r7, #24]
}
 800549a:	e04e      	b.n	800553a <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM4)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2b      	ldr	r2, [pc, #172]	; (8005550 <_ZN5Timer17TimerClockAktifEtEv+0x10c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10e      	bne.n	80054c4 <_ZN5Timer17TimerClockAktifEtEv+0x80>
        __HAL_RCC_TIM4_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	4b27      	ldr	r3, [pc, #156]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	4a26      	ldr	r2, [pc, #152]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80054b0:	f043 0304 	orr.w	r3, r3, #4
 80054b4:	6413      	str	r3, [r2, #64]	; 0x40
 80054b6:	4b24      	ldr	r3, [pc, #144]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	697b      	ldr	r3, [r7, #20]
}
 80054c2:	e03a      	b.n	800553a <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM5)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a22      	ldr	r2, [pc, #136]	; (8005554 <_ZN5Timer17TimerClockAktifEtEv+0x110>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d10e      	bne.n	80054ec <_ZN5Timer17TimerClockAktifEtEv+0xa8>
        __HAL_RCC_TIM5_CLK_ENABLE();
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	4a1c      	ldr	r2, [pc, #112]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80054d8:	f043 0308 	orr.w	r3, r3, #8
 80054dc:	6413      	str	r3, [r2, #64]	; 0x40
 80054de:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	693b      	ldr	r3, [r7, #16]
}
 80054ea:	e026      	b.n	800553a <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM6)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a19      	ldr	r2, [pc, #100]	; (8005558 <_ZN5Timer17TimerClockAktifEtEv+0x114>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d10e      	bne.n	8005514 <_ZN5Timer17TimerClockAktifEtEv+0xd0>
        __HAL_RCC_TIM6_CLK_ENABLE();
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	4b13      	ldr	r3, [pc, #76]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	4a12      	ldr	r2, [pc, #72]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005500:	f043 0310 	orr.w	r3, r3, #16
 8005504:	6413      	str	r3, [r2, #64]	; 0x40
 8005506:	4b10      	ldr	r3, [pc, #64]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
}
 8005512:	e012      	b.n	800553a <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM7)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a10      	ldr	r2, [pc, #64]	; (800555c <_ZN5Timer17TimerClockAktifEtEv+0x118>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d10d      	bne.n	800553a <_ZN5Timer17TimerClockAktifEtEv+0xf6>
        __HAL_RCC_TIM7_CLK_ENABLE();
 800551e:	2300      	movs	r3, #0
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	4b09      	ldr	r3, [pc, #36]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	4a08      	ldr	r2, [pc, #32]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005528:	f043 0320 	orr.w	r3, r3, #32
 800552c:	6413      	str	r3, [r2, #64]	; 0x40
 800552e:	4b06      	ldr	r3, [pc, #24]	; (8005548 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	60bb      	str	r3, [r7, #8]
 8005538:	68bb      	ldr	r3, [r7, #8]
}
 800553a:	bf00      	nop
 800553c:	3724      	adds	r7, #36	; 0x24
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40023800 	.word	0x40023800
 800554c:	40000400 	.word	0x40000400
 8005550:	40000800 	.word	0x40000800
 8005554:	40000c00 	.word	0x40000c00
 8005558:	40001000 	.word	0x40001000
 800555c:	40001400 	.word	0x40001400

08005560 <_ZN5Timer21TimerInterruptAktifEtEv>:

void Timer::TimerInterruptAktifEt()
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
    if (this->pTimerAlan == TIM2)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005570:	d107      	bne.n	8005582 <_ZN5Timer21TimerInterruptAktifEtEv+0x22>
    {
        NVIC_EnableIRQ(TIM2_IRQn);
 8005572:	201c      	movs	r0, #28
 8005574:	f7ff fedc 	bl	8005330 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM2_IRQn, 2);
 8005578:	2102      	movs	r1, #2
 800557a:	201c      	movs	r0, #28
 800557c:	f7ff fef6 	bl	800536c <__NVIC_SetPriority>
    else if (this->pTimerAlan == TIM7)
    {
        NVIC_EnableIRQ(TIM7_IRQn);
        NVIC_SetPriority(TIM7_IRQn, 2);
    }
}
 8005580:	e03f      	b.n	8005602 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM3)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a21      	ldr	r2, [pc, #132]	; (800560c <_ZN5Timer21TimerInterruptAktifEtEv+0xac>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d107      	bne.n	800559c <_ZN5Timer21TimerInterruptAktifEtEv+0x3c>
        NVIC_EnableIRQ(TIM3_IRQn);
 800558c:	201d      	movs	r0, #29
 800558e:	f7ff fecf 	bl	8005330 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM3_IRQn, 2);
 8005592:	2102      	movs	r1, #2
 8005594:	201d      	movs	r0, #29
 8005596:	f7ff fee9 	bl	800536c <__NVIC_SetPriority>
}
 800559a:	e032      	b.n	8005602 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM4)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <_ZN5Timer21TimerInterruptAktifEtEv+0xb0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d107      	bne.n	80055b6 <_ZN5Timer21TimerInterruptAktifEtEv+0x56>
        NVIC_EnableIRQ(TIM4_IRQn);
 80055a6:	201e      	movs	r0, #30
 80055a8:	f7ff fec2 	bl	8005330 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM4_IRQn, 2);
 80055ac:	2102      	movs	r1, #2
 80055ae:	201e      	movs	r0, #30
 80055b0:	f7ff fedc 	bl	800536c <__NVIC_SetPriority>
}
 80055b4:	e025      	b.n	8005602 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM5)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a16      	ldr	r2, [pc, #88]	; (8005614 <_ZN5Timer21TimerInterruptAktifEtEv+0xb4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d107      	bne.n	80055d0 <_ZN5Timer21TimerInterruptAktifEtEv+0x70>
        NVIC_EnableIRQ(TIM5_IRQn);
 80055c0:	2032      	movs	r0, #50	; 0x32
 80055c2:	f7ff feb5 	bl	8005330 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM5_IRQn, 2);
 80055c6:	2102      	movs	r1, #2
 80055c8:	2032      	movs	r0, #50	; 0x32
 80055ca:	f7ff fecf 	bl	800536c <__NVIC_SetPriority>
}
 80055ce:	e018      	b.n	8005602 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM6)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a10      	ldr	r2, [pc, #64]	; (8005618 <_ZN5Timer21TimerInterruptAktifEtEv+0xb8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d107      	bne.n	80055ea <_ZN5Timer21TimerInterruptAktifEtEv+0x8a>
        NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80055da:	2036      	movs	r0, #54	; 0x36
 80055dc:	f7ff fea8 	bl	8005330 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM6_DAC_IRQn, 2);
 80055e0:	2102      	movs	r1, #2
 80055e2:	2036      	movs	r0, #54	; 0x36
 80055e4:	f7ff fec2 	bl	800536c <__NVIC_SetPriority>
}
 80055e8:	e00b      	b.n	8005602 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM7)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a0b      	ldr	r2, [pc, #44]	; (800561c <_ZN5Timer21TimerInterruptAktifEtEv+0xbc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d106      	bne.n	8005602 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
        NVIC_EnableIRQ(TIM7_IRQn);
 80055f4:	2037      	movs	r0, #55	; 0x37
 80055f6:	f7ff fe9b 	bl	8005330 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM7_IRQn, 2);
 80055fa:	2102      	movs	r1, #2
 80055fc:	2037      	movs	r0, #55	; 0x37
 80055fe:	f7ff feb5 	bl	800536c <__NVIC_SetPriority>
}
 8005602:	bf00      	nop
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40001000 	.word	0x40001000
 800561c:	40001400 	.word	0x40001400

08005620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005624:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <HAL_Init+0x40>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a0d      	ldr	r2, [pc, #52]	; (8005660 <HAL_Init+0x40>)
 800562a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800562e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <HAL_Init+0x40>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <HAL_Init+0x40>)
 8005636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800563a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800563c:	4b08      	ldr	r3, [pc, #32]	; (8005660 <HAL_Init+0x40>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a07      	ldr	r2, [pc, #28]	; (8005660 <HAL_Init+0x40>)
 8005642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005648:	2003      	movs	r0, #3
 800564a:	f000 f94f 	bl	80058ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800564e:	2000      	movs	r0, #0
 8005650:	f000 f808 	bl	8005664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005654:	f7fd f802 	bl	800265c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	40023c00 	.word	0x40023c00

08005664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800566c:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <HAL_InitTick+0x54>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	4b12      	ldr	r3, [pc, #72]	; (80056bc <HAL_InitTick+0x58>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	4619      	mov	r1, r3
 8005676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800567a:	fbb3 f3f1 	udiv	r3, r3, r1
 800567e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005682:	4618      	mov	r0, r3
 8005684:	f000 f967 	bl	8005956 <HAL_SYSTICK_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e00e      	b.n	80056b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b0f      	cmp	r3, #15
 8005696:	d80a      	bhi.n	80056ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005698:	2200      	movs	r2, #0
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	f000 f92f 	bl	8005902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056a4:	4a06      	ldr	r2, [pc, #24]	; (80056c0 <HAL_InitTick+0x5c>)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e000      	b.n	80056b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	20000000 	.word	0x20000000
 80056bc:	20000008 	.word	0x20000008
 80056c0:	20000004 	.word	0x20000004

080056c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <HAL_IncTick+0x20>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <HAL_IncTick+0x24>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4413      	add	r3, r2
 80056d4:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <HAL_IncTick+0x24>)
 80056d6:	6013      	str	r3, [r2, #0]
}
 80056d8:	bf00      	nop
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000008 	.word	0x20000008
 80056e8:	200008a4 	.word	0x200008a4

080056ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return uwTick;
 80056f0:	4b03      	ldr	r3, [pc, #12]	; (8005700 <HAL_GetTick+0x14>)
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	200008a4 	.word	0x200008a4

08005704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800570c:	f7ff ffee 	bl	80056ec <HAL_GetTick>
 8005710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d005      	beq.n	800572a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800571e:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <HAL_Delay+0x44>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800572a:	bf00      	nop
 800572c:	f7ff ffde 	bl	80056ec <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	429a      	cmp	r2, r3
 800573a:	d8f7      	bhi.n	800572c <HAL_Delay+0x28>
  {
  }
}
 800573c:	bf00      	nop
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20000008 	.word	0x20000008

0800574c <__NVIC_SetPriorityGrouping>:
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800575c:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <__NVIC_SetPriorityGrouping+0x44>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005768:	4013      	ands	r3, r2
 800576a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800577c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800577e:	4a04      	ldr	r2, [pc, #16]	; (8005790 <__NVIC_SetPriorityGrouping+0x44>)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	60d3      	str	r3, [r2, #12]
}
 8005784:	bf00      	nop
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	e000ed00 	.word	0xe000ed00

08005794 <__NVIC_GetPriorityGrouping>:
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005798:	4b04      	ldr	r3, [pc, #16]	; (80057ac <__NVIC_GetPriorityGrouping+0x18>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	0a1b      	lsrs	r3, r3, #8
 800579e:	f003 0307 	and.w	r3, r3, #7
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	e000ed00 	.word	0xe000ed00

080057b0 <__NVIC_EnableIRQ>:
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	db0b      	blt.n	80057da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	f003 021f 	and.w	r2, r3, #31
 80057c8:	4907      	ldr	r1, [pc, #28]	; (80057e8 <__NVIC_EnableIRQ+0x38>)
 80057ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	2001      	movs	r0, #1
 80057d2:	fa00 f202 	lsl.w	r2, r0, r2
 80057d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	e000e100 	.word	0xe000e100

080057ec <__NVIC_SetPriority>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	6039      	str	r1, [r7, #0]
 80057f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	db0a      	blt.n	8005816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	b2da      	uxtb	r2, r3
 8005804:	490c      	ldr	r1, [pc, #48]	; (8005838 <__NVIC_SetPriority+0x4c>)
 8005806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580a:	0112      	lsls	r2, r2, #4
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	440b      	add	r3, r1
 8005810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005814:	e00a      	b.n	800582c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	b2da      	uxtb	r2, r3
 800581a:	4908      	ldr	r1, [pc, #32]	; (800583c <__NVIC_SetPriority+0x50>)
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	3b04      	subs	r3, #4
 8005824:	0112      	lsls	r2, r2, #4
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	440b      	add	r3, r1
 800582a:	761a      	strb	r2, [r3, #24]
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	e000e100 	.word	0xe000e100
 800583c:	e000ed00 	.word	0xe000ed00

08005840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005840:	b480      	push	{r7}
 8005842:	b089      	sub	sp, #36	; 0x24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f1c3 0307 	rsb	r3, r3, #7
 800585a:	2b04      	cmp	r3, #4
 800585c:	bf28      	it	cs
 800585e:	2304      	movcs	r3, #4
 8005860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	3304      	adds	r3, #4
 8005866:	2b06      	cmp	r3, #6
 8005868:	d902      	bls.n	8005870 <NVIC_EncodePriority+0x30>
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3b03      	subs	r3, #3
 800586e:	e000      	b.n	8005872 <NVIC_EncodePriority+0x32>
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005874:	f04f 32ff 	mov.w	r2, #4294967295
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43da      	mvns	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	401a      	ands	r2, r3
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005888:	f04f 31ff 	mov.w	r1, #4294967295
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	fa01 f303 	lsl.w	r3, r1, r3
 8005892:	43d9      	mvns	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005898:	4313      	orrs	r3, r2
         );
}
 800589a:	4618      	mov	r0, r3
 800589c:	3724      	adds	r7, #36	; 0x24
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058b8:	d301      	bcc.n	80058be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058ba:	2301      	movs	r3, #1
 80058bc:	e00f      	b.n	80058de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058be:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <SysTick_Config+0x40>)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058c6:	210f      	movs	r1, #15
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	f7ff ff8e 	bl	80057ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <SysTick_Config+0x40>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058d6:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <SysTick_Config+0x40>)
 80058d8:	2207      	movs	r2, #7
 80058da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	e000e010 	.word	0xe000e010

080058ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff ff29 	bl	800574c <__NVIC_SetPriorityGrouping>
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005902:	b580      	push	{r7, lr}
 8005904:	b086      	sub	sp, #24
 8005906:	af00      	add	r7, sp, #0
 8005908:	4603      	mov	r3, r0
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
 800590e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005914:	f7ff ff3e 	bl	8005794 <__NVIC_GetPriorityGrouping>
 8005918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	6978      	ldr	r0, [r7, #20]
 8005920:	f7ff ff8e 	bl	8005840 <NVIC_EncodePriority>
 8005924:	4602      	mov	r2, r0
 8005926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800592a:	4611      	mov	r1, r2
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff ff5d 	bl	80057ec <__NVIC_SetPriority>
}
 8005932:	bf00      	nop
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	4603      	mov	r3, r0
 8005942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff ff31 	bl	80057b0 <__NVIC_EnableIRQ>
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ffa2 	bl	80058a8 <SysTick_Config>
 8005964:	4603      	mov	r3, r0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800597c:	f7ff feb6 	bl	80056ec <HAL_GetTick>
 8005980:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d008      	beq.n	80059a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2280      	movs	r2, #128	; 0x80
 8005992:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e052      	b.n	8005a46 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0216 	bic.w	r2, r2, #22
 80059ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d103      	bne.n	80059d0 <HAL_DMA_Abort+0x62>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0208 	bic.w	r2, r2, #8
 80059de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059f0:	e013      	b.n	8005a1a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059f2:	f7ff fe7b 	bl	80056ec <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b05      	cmp	r3, #5
 80059fe:	d90c      	bls.n	8005a1a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2203      	movs	r2, #3
 8005a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e015      	b.n	8005a46 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e4      	bne.n	80059f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2c:	223f      	movs	r2, #63	; 0x3f
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d004      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2280      	movs	r2, #128	; 0x80
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e00c      	b.n	8005a86 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2205      	movs	r2, #5
 8005a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b089      	sub	sp, #36	; 0x24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	e16b      	b.n	8005d88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	f040 815a 	bne.w	8005d82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d005      	beq.n	8005ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d130      	bne.n	8005b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	2203      	movs	r2, #3
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	43db      	mvns	r3, r3
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	4013      	ands	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	43db      	mvns	r3, r3
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 0201 	and.w	r2, r3, #1
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d017      	beq.n	8005b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	2203      	movs	r2, #3
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	fa02 f303 	lsl.w	r3, r2, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f003 0303 	and.w	r3, r3, #3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d123      	bne.n	8005bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	08da      	lsrs	r2, r3, #3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3208      	adds	r2, #8
 8005b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	220f      	movs	r2, #15
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	43db      	mvns	r3, r3
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	08da      	lsrs	r2, r3, #3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3208      	adds	r2, #8
 8005bd2:	69b9      	ldr	r1, [r7, #24]
 8005bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	2203      	movs	r2, #3
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 0203 	and.w	r2, r3, #3
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 80b4 	beq.w	8005d82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	4b60      	ldr	r3, [pc, #384]	; (8005da0 <HAL_GPIO_Init+0x30c>)
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	4a5f      	ldr	r2, [pc, #380]	; (8005da0 <HAL_GPIO_Init+0x30c>)
 8005c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c28:	6453      	str	r3, [r2, #68]	; 0x44
 8005c2a:	4b5d      	ldr	r3, [pc, #372]	; (8005da0 <HAL_GPIO_Init+0x30c>)
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c36:	4a5b      	ldr	r2, [pc, #364]	; (8005da4 <HAL_GPIO_Init+0x310>)
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	089b      	lsrs	r3, r3, #2
 8005c3c:	3302      	adds	r3, #2
 8005c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	220f      	movs	r2, #15
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	43db      	mvns	r3, r3
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	4013      	ands	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a52      	ldr	r2, [pc, #328]	; (8005da8 <HAL_GPIO_Init+0x314>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d02b      	beq.n	8005cba <HAL_GPIO_Init+0x226>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a51      	ldr	r2, [pc, #324]	; (8005dac <HAL_GPIO_Init+0x318>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d025      	beq.n	8005cb6 <HAL_GPIO_Init+0x222>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a50      	ldr	r2, [pc, #320]	; (8005db0 <HAL_GPIO_Init+0x31c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01f      	beq.n	8005cb2 <HAL_GPIO_Init+0x21e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a4f      	ldr	r2, [pc, #316]	; (8005db4 <HAL_GPIO_Init+0x320>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d019      	beq.n	8005cae <HAL_GPIO_Init+0x21a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a4e      	ldr	r2, [pc, #312]	; (8005db8 <HAL_GPIO_Init+0x324>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d013      	beq.n	8005caa <HAL_GPIO_Init+0x216>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a4d      	ldr	r2, [pc, #308]	; (8005dbc <HAL_GPIO_Init+0x328>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00d      	beq.n	8005ca6 <HAL_GPIO_Init+0x212>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a4c      	ldr	r2, [pc, #304]	; (8005dc0 <HAL_GPIO_Init+0x32c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d007      	beq.n	8005ca2 <HAL_GPIO_Init+0x20e>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a4b      	ldr	r2, [pc, #300]	; (8005dc4 <HAL_GPIO_Init+0x330>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d101      	bne.n	8005c9e <HAL_GPIO_Init+0x20a>
 8005c9a:	2307      	movs	r3, #7
 8005c9c:	e00e      	b.n	8005cbc <HAL_GPIO_Init+0x228>
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	e00c      	b.n	8005cbc <HAL_GPIO_Init+0x228>
 8005ca2:	2306      	movs	r3, #6
 8005ca4:	e00a      	b.n	8005cbc <HAL_GPIO_Init+0x228>
 8005ca6:	2305      	movs	r3, #5
 8005ca8:	e008      	b.n	8005cbc <HAL_GPIO_Init+0x228>
 8005caa:	2304      	movs	r3, #4
 8005cac:	e006      	b.n	8005cbc <HAL_GPIO_Init+0x228>
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e004      	b.n	8005cbc <HAL_GPIO_Init+0x228>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e002      	b.n	8005cbc <HAL_GPIO_Init+0x228>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <HAL_GPIO_Init+0x228>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	f002 0203 	and.w	r2, r2, #3
 8005cc2:	0092      	lsls	r2, r2, #2
 8005cc4:	4093      	lsls	r3, r2
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ccc:	4935      	ldr	r1, [pc, #212]	; (8005da4 <HAL_GPIO_Init+0x310>)
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	089b      	lsrs	r3, r3, #2
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cda:	4b3b      	ldr	r3, [pc, #236]	; (8005dc8 <HAL_GPIO_Init+0x334>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	43db      	mvns	r3, r3
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cfe:	4a32      	ldr	r2, [pc, #200]	; (8005dc8 <HAL_GPIO_Init+0x334>)
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d04:	4b30      	ldr	r3, [pc, #192]	; (8005dc8 <HAL_GPIO_Init+0x334>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4013      	ands	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d28:	4a27      	ldr	r2, [pc, #156]	; (8005dc8 <HAL_GPIO_Init+0x334>)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d2e:	4b26      	ldr	r3, [pc, #152]	; (8005dc8 <HAL_GPIO_Init+0x334>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	43db      	mvns	r3, r3
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d52:	4a1d      	ldr	r2, [pc, #116]	; (8005dc8 <HAL_GPIO_Init+0x334>)
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d58:	4b1b      	ldr	r3, [pc, #108]	; (8005dc8 <HAL_GPIO_Init+0x334>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	43db      	mvns	r3, r3
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4013      	ands	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d7c:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <HAL_GPIO_Init+0x334>)
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	3301      	adds	r3, #1
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b0f      	cmp	r3, #15
 8005d8c:	f67f ae90 	bls.w	8005ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d90:	bf00      	nop
 8005d92:	bf00      	nop
 8005d94:	3724      	adds	r7, #36	; 0x24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40023800 	.word	0x40023800
 8005da4:	40013800 	.word	0x40013800
 8005da8:	40020000 	.word	0x40020000
 8005dac:	40020400 	.word	0x40020400
 8005db0:	40020800 	.word	0x40020800
 8005db4:	40020c00 	.word	0x40020c00
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	40021400 	.word	0x40021400
 8005dc0:	40021800 	.word	0x40021800
 8005dc4:	40021c00 	.word	0x40021c00
 8005dc8:	40013c00 	.word	0x40013c00

08005dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	807b      	strh	r3, [r7, #2]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ddc:	787b      	ldrb	r3, [r7, #1]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005de2:	887a      	ldrh	r2, [r7, #2]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005de8:	e003      	b.n	8005df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005dea:	887b      	ldrh	r3, [r7, #2]
 8005dec:	041a      	lsls	r2, r3, #16
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	619a      	str	r2, [r3, #24]
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005e0a:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e0c:	695a      	ldr	r2, [r3, #20]
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d006      	beq.n	8005e24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e16:	4a05      	ldr	r2, [pc, #20]	; (8005e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e1c:	88fb      	ldrh	r3, [r7, #6]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 f806 	bl	8005e30 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40013c00 	.word	0x40013c00

08005e30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e12b      	b.n	80060b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fb fb68 	bl	8001544 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2224      	movs	r2, #36	; 0x24
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005eac:	f002 f8e0 	bl	8008070 <HAL_RCC_GetPCLK1Freq>
 8005eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4a81      	ldr	r2, [pc, #516]	; (80060bc <HAL_I2C_Init+0x274>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d807      	bhi.n	8005ecc <HAL_I2C_Init+0x84>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4a80      	ldr	r2, [pc, #512]	; (80060c0 <HAL_I2C_Init+0x278>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	bf94      	ite	ls
 8005ec4:	2301      	movls	r3, #1
 8005ec6:	2300      	movhi	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	e006      	b.n	8005eda <HAL_I2C_Init+0x92>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4a7d      	ldr	r2, [pc, #500]	; (80060c4 <HAL_I2C_Init+0x27c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	bf94      	ite	ls
 8005ed4:	2301      	movls	r3, #1
 8005ed6:	2300      	movhi	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e0e7      	b.n	80060b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a78      	ldr	r2, [pc, #480]	; (80060c8 <HAL_I2C_Init+0x280>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	0c9b      	lsrs	r3, r3, #18
 8005eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4a6a      	ldr	r2, [pc, #424]	; (80060bc <HAL_I2C_Init+0x274>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d802      	bhi.n	8005f1c <HAL_I2C_Init+0xd4>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	e009      	b.n	8005f30 <HAL_I2C_Init+0xe8>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	4a69      	ldr	r2, [pc, #420]	; (80060cc <HAL_I2C_Init+0x284>)
 8005f28:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2c:	099b      	lsrs	r3, r3, #6
 8005f2e:	3301      	adds	r3, #1
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	430b      	orrs	r3, r1
 8005f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	495c      	ldr	r1, [pc, #368]	; (80060bc <HAL_I2C_Init+0x274>)
 8005f4c:	428b      	cmp	r3, r1
 8005f4e:	d819      	bhi.n	8005f84 <HAL_I2C_Init+0x13c>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	1e59      	subs	r1, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f5e:	1c59      	adds	r1, r3, #1
 8005f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f64:	400b      	ands	r3, r1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <HAL_I2C_Init+0x138>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1e59      	subs	r1, r3, #1
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f78:	3301      	adds	r3, #1
 8005f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f7e:	e051      	b.n	8006024 <HAL_I2C_Init+0x1dc>
 8005f80:	2304      	movs	r3, #4
 8005f82:	e04f      	b.n	8006024 <HAL_I2C_Init+0x1dc>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d111      	bne.n	8005fb0 <HAL_I2C_Init+0x168>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	1e58      	subs	r0, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6859      	ldr	r1, [r3, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	440b      	add	r3, r1
 8005f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bf0c      	ite	eq
 8005fa8:	2301      	moveq	r3, #1
 8005faa:	2300      	movne	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	e012      	b.n	8005fd6 <HAL_I2C_Init+0x18e>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	1e58      	subs	r0, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6859      	ldr	r1, [r3, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	0099      	lsls	r1, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	bf0c      	ite	eq
 8005fd0:	2301      	moveq	r3, #1
 8005fd2:	2300      	movne	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <HAL_I2C_Init+0x196>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e022      	b.n	8006024 <HAL_I2C_Init+0x1dc>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10e      	bne.n	8006004 <HAL_I2C_Init+0x1bc>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	1e58      	subs	r0, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6859      	ldr	r1, [r3, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	440b      	add	r3, r1
 8005ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006002:	e00f      	b.n	8006024 <HAL_I2C_Init+0x1dc>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	1e58      	subs	r0, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6859      	ldr	r1, [r3, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	440b      	add	r3, r1
 8006012:	0099      	lsls	r1, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	fbb0 f3f3 	udiv	r3, r0, r3
 800601a:	3301      	adds	r3, #1
 800601c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	6809      	ldr	r1, [r1, #0]
 8006028:	4313      	orrs	r3, r2
 800602a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69da      	ldr	r2, [r3, #28]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6911      	ldr	r1, [r2, #16]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	68d2      	ldr	r2, [r2, #12]
 800605e:	4311      	orrs	r1, r2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6812      	ldr	r2, [r2, #0]
 8006064:	430b      	orrs	r3, r1
 8006066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695a      	ldr	r2, [r3, #20]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	000186a0 	.word	0x000186a0
 80060c0:	001e847f 	.word	0x001e847f
 80060c4:	003d08ff 	.word	0x003d08ff
 80060c8:	431bde83 	.word	0x431bde83
 80060cc:	10624dd3 	.word	0x10624dd3

080060d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b088      	sub	sp, #32
 80060d4:	af02      	add	r7, sp, #8
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	607a      	str	r2, [r7, #4]
 80060da:	461a      	mov	r2, r3
 80060dc:	460b      	mov	r3, r1
 80060de:	817b      	strh	r3, [r7, #10]
 80060e0:	4613      	mov	r3, r2
 80060e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060e4:	f7ff fb02 	bl	80056ec <HAL_GetTick>
 80060e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	f040 80e0 	bne.w	80062b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	2319      	movs	r3, #25
 80060fe:	2201      	movs	r2, #1
 8006100:	4970      	ldr	r1, [pc, #448]	; (80062c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f001 f90e 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800610e:	2302      	movs	r3, #2
 8006110:	e0d3      	b.n	80062ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_I2C_Master_Transmit+0x50>
 800611c:	2302      	movs	r3, #2
 800611e:	e0cc      	b.n	80062ba <HAL_I2C_Master_Transmit+0x1ea>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b01      	cmp	r3, #1
 8006134:	d007      	beq.n	8006146 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0201 	orr.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006154:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2221      	movs	r2, #33	; 0x21
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2210      	movs	r2, #16
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	893a      	ldrh	r2, [r7, #8]
 8006176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a50      	ldr	r2, [pc, #320]	; (80062c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006186:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006188:	8979      	ldrh	r1, [r7, #10]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	6a3a      	ldr	r2, [r7, #32]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fdfa 	bl	8006d88 <I2C_MasterRequestWrite>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e08d      	b.n	80062ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80061b4:	e066      	b.n	8006284 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	6a39      	ldr	r1, [r7, #32]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f001 f9cc 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00d      	beq.n	80061e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d107      	bne.n	80061de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e06b      	b.n	80062ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	781a      	ldrb	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b04      	cmp	r3, #4
 800621e:	d11b      	bne.n	8006258 <HAL_I2C_Master_Transmit+0x188>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006224:	2b00      	cmp	r3, #0
 8006226:	d017      	beq.n	8006258 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	781a      	ldrb	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	6a39      	ldr	r1, [r7, #32]
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f001 f9c3 	bl	80075e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00d      	beq.n	8006284 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626c:	2b04      	cmp	r3, #4
 800626e:	d107      	bne.n	8006280 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800627e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e01a      	b.n	80062ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006288:	2b00      	cmp	r3, #0
 800628a:	d194      	bne.n	80061b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e000      	b.n	80062ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
  }
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	00100002 	.word	0x00100002
 80062c8:	ffff0000 	.word	0xffff0000

080062cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08c      	sub	sp, #48	; 0x30
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	461a      	mov	r2, r3
 80062d8:	460b      	mov	r3, r1
 80062da:	817b      	strh	r3, [r7, #10]
 80062dc:	4613      	mov	r3, r2
 80062de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062e0:	f7ff fa04 	bl	80056ec <HAL_GetTick>
 80062e4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	f040 8217 	bne.w	8006722 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	2319      	movs	r3, #25
 80062fa:	2201      	movs	r2, #1
 80062fc:	497c      	ldr	r1, [pc, #496]	; (80064f0 <HAL_I2C_Master_Receive+0x224>)
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f001 f810 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800630a:	2302      	movs	r3, #2
 800630c:	e20a      	b.n	8006724 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_I2C_Master_Receive+0x50>
 8006318:	2302      	movs	r3, #2
 800631a:	e203      	b.n	8006724 <HAL_I2C_Master_Receive+0x458>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b01      	cmp	r3, #1
 8006330:	d007      	beq.n	8006342 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006350:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2222      	movs	r2, #34	; 0x22
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2210      	movs	r2, #16
 800635e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	893a      	ldrh	r2, [r7, #8]
 8006372:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4a5c      	ldr	r2, [pc, #368]	; (80064f4 <HAL_I2C_Master_Receive+0x228>)
 8006382:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006384:	8979      	ldrh	r1, [r7, #10]
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fd7e 	bl	8006e8c <I2C_MasterRequestRead>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e1c4      	b.n	8006724 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d113      	bne.n	80063ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063a2:	2300      	movs	r3, #0
 80063a4:	623b      	str	r3, [r7, #32]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	623b      	str	r3, [r7, #32]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	623b      	str	r3, [r7, #32]
 80063b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	e198      	b.n	80066fc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d11b      	bne.n	800640a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e2:	2300      	movs	r3, #0
 80063e4:	61fb      	str	r3, [r7, #28]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	61fb      	str	r3, [r7, #28]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	e178      	b.n	80066fc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640e:	2b02      	cmp	r3, #2
 8006410:	d11b      	bne.n	800644a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006420:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006430:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006432:	2300      	movs	r3, #0
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	e158      	b.n	80066fc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006470:	e144      	b.n	80066fc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006476:	2b03      	cmp	r3, #3
 8006478:	f200 80f1 	bhi.w	800665e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006480:	2b01      	cmp	r3, #1
 8006482:	d123      	bne.n	80064cc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006486:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f001 f8f5 	bl	8007678 <I2C_WaitOnRXNEFlagUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e145      	b.n	8006724 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064ca:	e117      	b.n	80066fc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d14e      	bne.n	8006572 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	2200      	movs	r2, #0
 80064dc:	4906      	ldr	r1, [pc, #24]	; (80064f8 <HAL_I2C_Master_Receive+0x22c>)
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 ff20 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d008      	beq.n	80064fc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e11a      	b.n	8006724 <HAL_I2C_Master_Receive+0x458>
 80064ee:	bf00      	nop
 80064f0:	00100002 	.word	0x00100002
 80064f4:	ffff0000 	.word	0xffff0000
 80064f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006528:	3b01      	subs	r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006566:	b29b      	uxth	r3, r3
 8006568:	3b01      	subs	r3, #1
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006570:	e0c4      	b.n	80066fc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	2200      	movs	r2, #0
 800657a:	496c      	ldr	r1, [pc, #432]	; (800672c <HAL_I2C_Master_Receive+0x460>)
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fed1 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e0cb      	b.n	8006724 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800659a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	2200      	movs	r2, #0
 80065d6:	4955      	ldr	r1, [pc, #340]	; (800672c <HAL_I2C_Master_Receive+0x460>)
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fea3 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e09d      	b.n	8006724 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691a      	ldr	r2, [r3, #16]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800665c:	e04e      	b.n	80066fc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800665e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f001 f808 	bl	8007678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e058      	b.n	8006724 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f003 0304 	and.w	r3, r3, #4
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d124      	bne.n	80066fc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d107      	bne.n	80066ca <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006700:	2b00      	cmp	r3, #0
 8006702:	f47f aeb6 	bne.w	8006472 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2220      	movs	r2, #32
 800670a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	e000      	b.n	8006724 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006722:	2302      	movs	r3, #2
  }
}
 8006724:	4618      	mov	r0, r3
 8006726:	3728      	adds	r7, #40	; 0x28
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	00010004 	.word	0x00010004

08006730 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af02      	add	r7, sp, #8
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	4608      	mov	r0, r1
 800673a:	4611      	mov	r1, r2
 800673c:	461a      	mov	r2, r3
 800673e:	4603      	mov	r3, r0
 8006740:	817b      	strh	r3, [r7, #10]
 8006742:	460b      	mov	r3, r1
 8006744:	813b      	strh	r3, [r7, #8]
 8006746:	4613      	mov	r3, r2
 8006748:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800674a:	f7fe ffcf 	bl	80056ec <HAL_GetTick>
 800674e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b20      	cmp	r3, #32
 800675a:	f040 80d9 	bne.w	8006910 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	2319      	movs	r3, #25
 8006764:	2201      	movs	r2, #1
 8006766:	496d      	ldr	r1, [pc, #436]	; (800691c <HAL_I2C_Mem_Write+0x1ec>)
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 fddb 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006774:	2302      	movs	r3, #2
 8006776:	e0cc      	b.n	8006912 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_I2C_Mem_Write+0x56>
 8006782:	2302      	movs	r3, #2
 8006784:	e0c5      	b.n	8006912 <HAL_I2C_Mem_Write+0x1e2>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b01      	cmp	r3, #1
 800679a:	d007      	beq.n	80067ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0201 	orr.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2221      	movs	r2, #33	; 0x21
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2240      	movs	r2, #64	; 0x40
 80067c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a3a      	ldr	r2, [r7, #32]
 80067d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4a4d      	ldr	r2, [pc, #308]	; (8006920 <HAL_I2C_Mem_Write+0x1f0>)
 80067ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067ee:	88f8      	ldrh	r0, [r7, #6]
 80067f0:	893a      	ldrh	r2, [r7, #8]
 80067f2:	8979      	ldrh	r1, [r7, #10]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	4603      	mov	r3, r0
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fc12 	bl	8007028 <I2C_RequestMemoryWrite>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d052      	beq.n	80068b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e081      	b.n	8006912 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 fea0 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00d      	beq.n	800683a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	2b04      	cmp	r3, #4
 8006824:	d107      	bne.n	8006836 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006834:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e06b      	b.n	8006912 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	781a      	ldrb	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	2b04      	cmp	r3, #4
 8006876:	d11b      	bne.n	80068b0 <HAL_I2C_Mem_Write+0x180>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687c:	2b00      	cmp	r3, #0
 800687e:	d017      	beq.n	80068b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	781a      	ldrb	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1aa      	bne.n	800680e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fe93 	bl	80075e8 <I2C_WaitOnBTFFlagUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00d      	beq.n	80068e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d107      	bne.n	80068e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e016      	b.n	8006912 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	e000      	b.n	8006912 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006910:	2302      	movs	r3, #2
  }
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	00100002 	.word	0x00100002
 8006920:	ffff0000 	.word	0xffff0000

08006924 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08c      	sub	sp, #48	; 0x30
 8006928:	af02      	add	r7, sp, #8
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	4608      	mov	r0, r1
 800692e:	4611      	mov	r1, r2
 8006930:	461a      	mov	r2, r3
 8006932:	4603      	mov	r3, r0
 8006934:	817b      	strh	r3, [r7, #10]
 8006936:	460b      	mov	r3, r1
 8006938:	813b      	strh	r3, [r7, #8]
 800693a:	4613      	mov	r3, r2
 800693c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800693e:	f7fe fed5 	bl	80056ec <HAL_GetTick>
 8006942:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b20      	cmp	r3, #32
 800694e:	f040 8214 	bne.w	8006d7a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	2319      	movs	r3, #25
 8006958:	2201      	movs	r2, #1
 800695a:	497b      	ldr	r1, [pc, #492]	; (8006b48 <HAL_I2C_Mem_Read+0x224>)
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fce1 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006968:	2302      	movs	r3, #2
 800696a:	e207      	b.n	8006d7c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006972:	2b01      	cmp	r3, #1
 8006974:	d101      	bne.n	800697a <HAL_I2C_Mem_Read+0x56>
 8006976:	2302      	movs	r3, #2
 8006978:	e200      	b.n	8006d7c <HAL_I2C_Mem_Read+0x458>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b01      	cmp	r3, #1
 800698e:	d007      	beq.n	80069a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0201 	orr.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2222      	movs	r2, #34	; 0x22
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2240      	movs	r2, #64	; 0x40
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80069d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4a5b      	ldr	r2, [pc, #364]	; (8006b4c <HAL_I2C_Mem_Read+0x228>)
 80069e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069e2:	88f8      	ldrh	r0, [r7, #6]
 80069e4:	893a      	ldrh	r2, [r7, #8]
 80069e6:	8979      	ldrh	r1, [r7, #10]
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	4603      	mov	r3, r0
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 fbae 	bl	8007154 <I2C_RequestMemoryRead>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e1bc      	b.n	8006d7c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d113      	bne.n	8006a32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	623b      	str	r3, [r7, #32]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	623b      	str	r3, [r7, #32]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	623b      	str	r3, [r7, #32]
 8006a1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	e190      	b.n	8006d54 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d11b      	bne.n	8006a72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	e170      	b.n	8006d54 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d11b      	bne.n	8006ab2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	e150      	b.n	8006d54 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ac8:	e144      	b.n	8006d54 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	f200 80f1 	bhi.w	8006cb6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d123      	bne.n	8006b24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ade:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 fdc9 	bl	8007678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e145      	b.n	8006d7c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b22:	e117      	b.n	8006d54 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d14e      	bne.n	8006bca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	2200      	movs	r2, #0
 8006b34:	4906      	ldr	r1, [pc, #24]	; (8006b50 <HAL_I2C_Mem_Read+0x22c>)
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 fbf4 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e11a      	b.n	8006d7c <HAL_I2C_Mem_Read+0x458>
 8006b46:	bf00      	nop
 8006b48:	00100002 	.word	0x00100002
 8006b4c:	ffff0000 	.word	0xffff0000
 8006b50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	691a      	ldr	r2, [r3, #16]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bc8:	e0c4      	b.n	8006d54 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	496c      	ldr	r1, [pc, #432]	; (8006d84 <HAL_I2C_Mem_Read+0x460>)
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 fba5 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e0cb      	b.n	8006d7c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	4955      	ldr	r1, [pc, #340]	; (8006d84 <HAL_I2C_Mem_Read+0x460>)
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fb77 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e09d      	b.n	8006d7c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691a      	ldr	r2, [r3, #16]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cb4:	e04e      	b.n	8006d54 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 fcdc 	bl	8007678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e058      	b.n	8006d7c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d124      	bne.n	8006d54 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d107      	bne.n	8006d22 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d20:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691a      	ldr	r2, [r3, #16]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f47f aeb6 	bne.w	8006aca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2220      	movs	r2, #32
 8006d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	e000      	b.n	8006d7c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006d7a:	2302      	movs	r3, #2
  }
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3728      	adds	r7, #40	; 0x28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	00010004 	.word	0x00010004

08006d88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	607a      	str	r2, [r7, #4]
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	460b      	mov	r3, r1
 8006d96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d006      	beq.n	8006db2 <I2C_MasterRequestWrite+0x2a>
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d003      	beq.n	8006db2 <I2C_MasterRequestWrite+0x2a>
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006db0:	d108      	bne.n	8006dc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	e00b      	b.n	8006ddc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	2b12      	cmp	r3, #18
 8006dca:	d107      	bne.n	8006ddc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fa9b 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00d      	beq.n	8006e10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e02:	d103      	bne.n	8006e0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e035      	b.n	8006e7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e18:	d108      	bne.n	8006e2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e1a:	897b      	ldrh	r3, [r7, #10]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e28:	611a      	str	r2, [r3, #16]
 8006e2a:	e01b      	b.n	8006e64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006e2c:	897b      	ldrh	r3, [r7, #10]
 8006e2e:	11db      	asrs	r3, r3, #7
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	f003 0306 	and.w	r3, r3, #6
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	f063 030f 	orn	r3, r3, #15
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	490e      	ldr	r1, [pc, #56]	; (8006e84 <I2C_MasterRequestWrite+0xfc>)
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 fae4 	bl	8007418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e010      	b.n	8006e7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006e5a:	897b      	ldrh	r3, [r7, #10]
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	4907      	ldr	r1, [pc, #28]	; (8006e88 <I2C_MasterRequestWrite+0x100>)
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 fad4 	bl	8007418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	00010008 	.word	0x00010008
 8006e88:	00010002 	.word	0x00010002

08006e8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	607a      	str	r2, [r7, #4]
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006eb0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d006      	beq.n	8006ec6 <I2C_MasterRequestRead+0x3a>
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d003      	beq.n	8006ec6 <I2C_MasterRequestRead+0x3a>
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ec4:	d108      	bne.n	8006ed8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	e00b      	b.n	8006ef0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006edc:	2b11      	cmp	r3, #17
 8006ede:	d107      	bne.n	8006ef0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 fa11 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00d      	beq.n	8006f24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f16:	d103      	bne.n	8006f20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e079      	b.n	8007018 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f2c:	d108      	bne.n	8006f40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f2e:	897b      	ldrh	r3, [r7, #10]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	f043 0301 	orr.w	r3, r3, #1
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	611a      	str	r2, [r3, #16]
 8006f3e:	e05f      	b.n	8007000 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006f40:	897b      	ldrh	r3, [r7, #10]
 8006f42:	11db      	asrs	r3, r3, #7
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	f003 0306 	and.w	r3, r3, #6
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	f063 030f 	orn	r3, r3, #15
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	4930      	ldr	r1, [pc, #192]	; (8007020 <I2C_MasterRequestRead+0x194>)
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 fa5a 	bl	8007418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e054      	b.n	8007018 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006f6e:	897b      	ldrh	r3, [r7, #10]
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	4929      	ldr	r1, [pc, #164]	; (8007024 <I2C_MasterRequestRead+0x198>)
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 fa4a 	bl	8007418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e044      	b.n	8007018 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f8e:	2300      	movs	r3, #0
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fb2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 f9af 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00d      	beq.n	8006fe8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fda:	d103      	bne.n	8006fe4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fe2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e017      	b.n	8007018 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006fe8:	897b      	ldrh	r3, [r7, #10]
 8006fea:	11db      	asrs	r3, r3, #7
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f003 0306 	and.w	r3, r3, #6
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	f063 030e 	orn	r3, r3, #14
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	4907      	ldr	r1, [pc, #28]	; (8007024 <I2C_MasterRequestRead+0x198>)
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fa06 	bl	8007418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	00010008 	.word	0x00010008
 8007024:	00010002 	.word	0x00010002

08007028 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af02      	add	r7, sp, #8
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	461a      	mov	r2, r3
 8007036:	4603      	mov	r3, r0
 8007038:	817b      	strh	r3, [r7, #10]
 800703a:	460b      	mov	r3, r1
 800703c:	813b      	strh	r3, [r7, #8]
 800703e:	4613      	mov	r3, r2
 8007040:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007050:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	2200      	movs	r2, #0
 800705a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f960 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00d      	beq.n	8007086 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007078:	d103      	bne.n	8007082 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007080:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e05f      	b.n	8007146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007086:	897b      	ldrh	r3, [r7, #10]
 8007088:	b2db      	uxtb	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007094:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	6a3a      	ldr	r2, [r7, #32]
 800709a:	492d      	ldr	r1, [pc, #180]	; (8007150 <I2C_RequestMemoryWrite+0x128>)
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 f9bb 	bl	8007418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e04c      	b.n	8007146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ac:	2300      	movs	r3, #0
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c4:	6a39      	ldr	r1, [r7, #32]
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 fa46 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00d      	beq.n	80070ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d107      	bne.n	80070ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e02b      	b.n	8007146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070ee:	88fb      	ldrh	r3, [r7, #6]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d105      	bne.n	8007100 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070f4:	893b      	ldrh	r3, [r7, #8]
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	611a      	str	r2, [r3, #16]
 80070fe:	e021      	b.n	8007144 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007100:	893b      	ldrh	r3, [r7, #8]
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	b29b      	uxth	r3, r3
 8007106:	b2da      	uxtb	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800710e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007110:	6a39      	ldr	r1, [r7, #32]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 fa20 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00d      	beq.n	800713a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	2b04      	cmp	r3, #4
 8007124:	d107      	bne.n	8007136 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007134:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e005      	b.n	8007146 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800713a:	893b      	ldrh	r3, [r7, #8]
 800713c:	b2da      	uxtb	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	00010002 	.word	0x00010002

08007154 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af02      	add	r7, sp, #8
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	4608      	mov	r0, r1
 800715e:	4611      	mov	r1, r2
 8007160:	461a      	mov	r2, r3
 8007162:	4603      	mov	r3, r0
 8007164:	817b      	strh	r3, [r7, #10]
 8007166:	460b      	mov	r3, r1
 8007168:	813b      	strh	r3, [r7, #8]
 800716a:	4613      	mov	r3, r2
 800716c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800717c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800718c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	2200      	movs	r2, #0
 8007196:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f8c2 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00d      	beq.n	80071c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b4:	d103      	bne.n	80071be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e0aa      	b.n	8007318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071c2:	897b      	ldrh	r3, [r7, #10]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	461a      	mov	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	6a3a      	ldr	r2, [r7, #32]
 80071d6:	4952      	ldr	r1, [pc, #328]	; (8007320 <I2C_RequestMemoryRead+0x1cc>)
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f91d 	bl	8007418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e097      	b.n	8007318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007200:	6a39      	ldr	r1, [r7, #32]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f9a8 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00d      	beq.n	800722a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	2b04      	cmp	r3, #4
 8007214:	d107      	bne.n	8007226 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007224:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e076      	b.n	8007318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d105      	bne.n	800723c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007230:	893b      	ldrh	r3, [r7, #8]
 8007232:	b2da      	uxtb	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	611a      	str	r2, [r3, #16]
 800723a:	e021      	b.n	8007280 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800723c:	893b      	ldrh	r3, [r7, #8]
 800723e:	0a1b      	lsrs	r3, r3, #8
 8007240:	b29b      	uxth	r3, r3
 8007242:	b2da      	uxtb	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800724a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724c:	6a39      	ldr	r1, [r7, #32]
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f982 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00d      	beq.n	8007276 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	2b04      	cmp	r3, #4
 8007260:	d107      	bne.n	8007272 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007270:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e050      	b.n	8007318 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007276:	893b      	ldrh	r3, [r7, #8]
 8007278:	b2da      	uxtb	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007282:	6a39      	ldr	r1, [r7, #32]
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f967 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00d      	beq.n	80072ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	2b04      	cmp	r3, #4
 8007296:	d107      	bne.n	80072a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e035      	b.n	8007318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f82b 	bl	8007324 <I2C_WaitOnFlagUntilTimeout>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00d      	beq.n	80072f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072e2:	d103      	bne.n	80072ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e013      	b.n	8007318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80072f0:	897b      	ldrh	r3, [r7, #10]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f043 0301 	orr.w	r3, r3, #1
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	6a3a      	ldr	r2, [r7, #32]
 8007304:	4906      	ldr	r1, [pc, #24]	; (8007320 <I2C_RequestMemoryRead+0x1cc>)
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 f886 	bl	8007418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e000      	b.n	8007318 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	00010002 	.word	0x00010002

08007324 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	4613      	mov	r3, r2
 8007332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007334:	e048      	b.n	80073c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733c:	d044      	beq.n	80073c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733e:	f7fe f9d5 	bl	80056ec <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d302      	bcc.n	8007354 <I2C_WaitOnFlagUntilTimeout+0x30>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d139      	bne.n	80073c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	0c1b      	lsrs	r3, r3, #16
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b01      	cmp	r3, #1
 800735c:	d10d      	bne.n	800737a <I2C_WaitOnFlagUntilTimeout+0x56>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	43da      	mvns	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	4013      	ands	r3, r2
 800736a:	b29b      	uxth	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	bf0c      	ite	eq
 8007370:	2301      	moveq	r3, #1
 8007372:	2300      	movne	r3, #0
 8007374:	b2db      	uxtb	r3, r3
 8007376:	461a      	mov	r2, r3
 8007378:	e00c      	b.n	8007394 <I2C_WaitOnFlagUntilTimeout+0x70>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	43da      	mvns	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4013      	ands	r3, r2
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	bf0c      	ite	eq
 800738c:	2301      	moveq	r3, #1
 800738e:	2300      	movne	r3, #0
 8007390:	b2db      	uxtb	r3, r3
 8007392:	461a      	mov	r2, r3
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	429a      	cmp	r2, r3
 8007398:	d116      	bne.n	80073c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	f043 0220 	orr.w	r2, r3, #32
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e023      	b.n	8007410 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	0c1b      	lsrs	r3, r3, #16
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d10d      	bne.n	80073ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	43da      	mvns	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	4013      	ands	r3, r2
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bf0c      	ite	eq
 80073e4:	2301      	moveq	r3, #1
 80073e6:	2300      	movne	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	e00c      	b.n	8007408 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	43da      	mvns	r2, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	4013      	ands	r3, r2
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	bf0c      	ite	eq
 8007400:	2301      	moveq	r3, #1
 8007402:	2300      	movne	r3, #0
 8007404:	b2db      	uxtb	r3, r3
 8007406:	461a      	mov	r2, r3
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	429a      	cmp	r2, r3
 800740c:	d093      	beq.n	8007336 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007426:	e071      	b.n	800750c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007436:	d123      	bne.n	8007480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007446:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007450:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746c:	f043 0204 	orr.w	r2, r3, #4
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e067      	b.n	8007550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007486:	d041      	beq.n	800750c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007488:	f7fe f930 	bl	80056ec <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	429a      	cmp	r2, r3
 8007496:	d302      	bcc.n	800749e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d136      	bne.n	800750c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	0c1b      	lsrs	r3, r3, #16
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d10c      	bne.n	80074c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	43da      	mvns	r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4013      	ands	r3, r2
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	bf14      	ite	ne
 80074ba:	2301      	movne	r3, #1
 80074bc:	2300      	moveq	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	e00b      	b.n	80074da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	43da      	mvns	r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	4013      	ands	r3, r2
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	bf14      	ite	ne
 80074d4:	2301      	movne	r3, #1
 80074d6:	2300      	moveq	r3, #0
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d016      	beq.n	800750c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2220      	movs	r2, #32
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	f043 0220 	orr.w	r2, r3, #32
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e021      	b.n	8007550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	0c1b      	lsrs	r3, r3, #16
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b01      	cmp	r3, #1
 8007514:	d10c      	bne.n	8007530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	43da      	mvns	r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	4013      	ands	r3, r2
 8007522:	b29b      	uxth	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	bf14      	ite	ne
 8007528:	2301      	movne	r3, #1
 800752a:	2300      	moveq	r3, #0
 800752c:	b2db      	uxtb	r3, r3
 800752e:	e00b      	b.n	8007548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	43da      	mvns	r2, r3
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4013      	ands	r3, r2
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	bf14      	ite	ne
 8007542:	2301      	movne	r3, #1
 8007544:	2300      	moveq	r3, #0
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	f47f af6d 	bne.w	8007428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007564:	e034      	b.n	80075d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 f8e3 	bl	8007732 <I2C_IsAcknowledgeFailed>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e034      	b.n	80075e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757c:	d028      	beq.n	80075d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757e:	f7fe f8b5 	bl	80056ec <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	d302      	bcc.n	8007594 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d11d      	bne.n	80075d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759e:	2b80      	cmp	r3, #128	; 0x80
 80075a0:	d016      	beq.n	80075d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075bc:	f043 0220 	orr.w	r2, r3, #32
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e007      	b.n	80075e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075da:	2b80      	cmp	r3, #128	; 0x80
 80075dc:	d1c3      	bne.n	8007566 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075f4:	e034      	b.n	8007660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 f89b 	bl	8007732 <I2C_IsAcknowledgeFailed>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e034      	b.n	8007670 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760c:	d028      	beq.n	8007660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800760e:	f7fe f86d 	bl	80056ec <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	429a      	cmp	r2, r3
 800761c:	d302      	bcc.n	8007624 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d11d      	bne.n	8007660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b04      	cmp	r3, #4
 8007630:	d016      	beq.n	8007660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764c:	f043 0220 	orr.w	r2, r3, #32
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e007      	b.n	8007670 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b04      	cmp	r3, #4
 800766c:	d1c3      	bne.n	80075f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007684:	e049      	b.n	800771a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	f003 0310 	and.w	r3, r3, #16
 8007690:	2b10      	cmp	r3, #16
 8007692:	d119      	bne.n	80076c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0210 	mvn.w	r2, #16
 800769c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e030      	b.n	800772a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076c8:	f7fe f810 	bl	80056ec <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d302      	bcc.n	80076de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d11d      	bne.n	800771a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e8:	2b40      	cmp	r3, #64	; 0x40
 80076ea:	d016      	beq.n	800771a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	f043 0220 	orr.w	r2, r3, #32
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e007      	b.n	800772a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007724:	2b40      	cmp	r3, #64	; 0x40
 8007726:	d1ae      	bne.n	8007686 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007748:	d11b      	bne.n	8007782 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007752:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	f043 0204 	orr.w	r2, r3, #4
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e000      	b.n	8007784 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e267      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d075      	beq.n	800789a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077ae:	4b88      	ldr	r3, [pc, #544]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 030c 	and.w	r3, r3, #12
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d00c      	beq.n	80077d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077ba:	4b85      	ldr	r3, [pc, #532]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	d112      	bne.n	80077ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077c6:	4b82      	ldr	r3, [pc, #520]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077d2:	d10b      	bne.n	80077ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077d4:	4b7e      	ldr	r3, [pc, #504]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d05b      	beq.n	8007898 <HAL_RCC_OscConfig+0x108>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d157      	bne.n	8007898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e242      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f4:	d106      	bne.n	8007804 <HAL_RCC_OscConfig+0x74>
 80077f6:	4b76      	ldr	r3, [pc, #472]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a75      	ldr	r2, [pc, #468]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80077fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	e01d      	b.n	8007840 <HAL_RCC_OscConfig+0xb0>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800780c:	d10c      	bne.n	8007828 <HAL_RCC_OscConfig+0x98>
 800780e:	4b70      	ldr	r3, [pc, #448]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a6f      	ldr	r2, [pc, #444]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007818:	6013      	str	r3, [r2, #0]
 800781a:	4b6d      	ldr	r3, [pc, #436]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a6c      	ldr	r2, [pc, #432]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	e00b      	b.n	8007840 <HAL_RCC_OscConfig+0xb0>
 8007828:	4b69      	ldr	r3, [pc, #420]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a68      	ldr	r2, [pc, #416]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800782e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	4b66      	ldr	r3, [pc, #408]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a65      	ldr	r2, [pc, #404]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800783a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800783e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d013      	beq.n	8007870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007848:	f7fd ff50 	bl	80056ec <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007850:	f7fd ff4c 	bl	80056ec <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b64      	cmp	r3, #100	; 0x64
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e207      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007862:	4b5b      	ldr	r3, [pc, #364]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0f0      	beq.n	8007850 <HAL_RCC_OscConfig+0xc0>
 800786e:	e014      	b.n	800789a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007870:	f7fd ff3c 	bl	80056ec <HAL_GetTick>
 8007874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007876:	e008      	b.n	800788a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007878:	f7fd ff38 	bl	80056ec <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	2b64      	cmp	r3, #100	; 0x64
 8007884:	d901      	bls.n	800788a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e1f3      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800788a:	4b51      	ldr	r3, [pc, #324]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1f0      	bne.n	8007878 <HAL_RCC_OscConfig+0xe8>
 8007896:	e000      	b.n	800789a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d063      	beq.n	800796e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078a6:	4b4a      	ldr	r3, [pc, #296]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 030c 	and.w	r3, r3, #12
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078b2:	4b47      	ldr	r3, [pc, #284]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078ba:	2b08      	cmp	r3, #8
 80078bc:	d11c      	bne.n	80078f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078be:	4b44      	ldr	r3, [pc, #272]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d116      	bne.n	80078f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ca:	4b41      	ldr	r3, [pc, #260]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d005      	beq.n	80078e2 <HAL_RCC_OscConfig+0x152>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d001      	beq.n	80078e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e1c7      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078e2:	4b3b      	ldr	r3, [pc, #236]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	4937      	ldr	r1, [pc, #220]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078f6:	e03a      	b.n	800796e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d020      	beq.n	8007942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007900:	4b34      	ldr	r3, [pc, #208]	; (80079d4 <HAL_RCC_OscConfig+0x244>)
 8007902:	2201      	movs	r2, #1
 8007904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007906:	f7fd fef1 	bl	80056ec <HAL_GetTick>
 800790a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800790c:	e008      	b.n	8007920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800790e:	f7fd feed 	bl	80056ec <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	2b02      	cmp	r3, #2
 800791a:	d901      	bls.n	8007920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e1a8      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007920:	4b2b      	ldr	r3, [pc, #172]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0f0      	beq.n	800790e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800792c:	4b28      	ldr	r3, [pc, #160]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	00db      	lsls	r3, r3, #3
 800793a:	4925      	ldr	r1, [pc, #148]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 800793c:	4313      	orrs	r3, r2
 800793e:	600b      	str	r3, [r1, #0]
 8007940:	e015      	b.n	800796e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007942:	4b24      	ldr	r3, [pc, #144]	; (80079d4 <HAL_RCC_OscConfig+0x244>)
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007948:	f7fd fed0 	bl	80056ec <HAL_GetTick>
 800794c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800794e:	e008      	b.n	8007962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007950:	f7fd fecc 	bl	80056ec <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d901      	bls.n	8007962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e187      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007962:	4b1b      	ldr	r3, [pc, #108]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1f0      	bne.n	8007950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0308 	and.w	r3, r3, #8
 8007976:	2b00      	cmp	r3, #0
 8007978:	d036      	beq.n	80079e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d016      	beq.n	80079b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007982:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <HAL_RCC_OscConfig+0x248>)
 8007984:	2201      	movs	r2, #1
 8007986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007988:	f7fd feb0 	bl	80056ec <HAL_GetTick>
 800798c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800798e:	e008      	b.n	80079a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007990:	f7fd feac 	bl	80056ec <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d901      	bls.n	80079a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e167      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079a2:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <HAL_RCC_OscConfig+0x240>)
 80079a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0f0      	beq.n	8007990 <HAL_RCC_OscConfig+0x200>
 80079ae:	e01b      	b.n	80079e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079b0:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <HAL_RCC_OscConfig+0x248>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079b6:	f7fd fe99 	bl	80056ec <HAL_GetTick>
 80079ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079bc:	e00e      	b.n	80079dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079be:	f7fd fe95 	bl	80056ec <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d907      	bls.n	80079dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e150      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
 80079d0:	40023800 	.word	0x40023800
 80079d4:	42470000 	.word	0x42470000
 80079d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079dc:	4b88      	ldr	r3, [pc, #544]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 80079de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1ea      	bne.n	80079be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 8097 	beq.w	8007b24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079fa:	4b81      	ldr	r3, [pc, #516]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10f      	bne.n	8007a26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a06:	2300      	movs	r3, #0
 8007a08:	60bb      	str	r3, [r7, #8]
 8007a0a:	4b7d      	ldr	r3, [pc, #500]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0e:	4a7c      	ldr	r2, [pc, #496]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a14:	6413      	str	r3, [r2, #64]	; 0x40
 8007a16:	4b7a      	ldr	r3, [pc, #488]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a1e:	60bb      	str	r3, [r7, #8]
 8007a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a22:	2301      	movs	r3, #1
 8007a24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a26:	4b77      	ldr	r3, [pc, #476]	; (8007c04 <HAL_RCC_OscConfig+0x474>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d118      	bne.n	8007a64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a32:	4b74      	ldr	r3, [pc, #464]	; (8007c04 <HAL_RCC_OscConfig+0x474>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a73      	ldr	r2, [pc, #460]	; (8007c04 <HAL_RCC_OscConfig+0x474>)
 8007a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a3e:	f7fd fe55 	bl	80056ec <HAL_GetTick>
 8007a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a44:	e008      	b.n	8007a58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a46:	f7fd fe51 	bl	80056ec <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d901      	bls.n	8007a58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e10c      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a58:	4b6a      	ldr	r3, [pc, #424]	; (8007c04 <HAL_RCC_OscConfig+0x474>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0f0      	beq.n	8007a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d106      	bne.n	8007a7a <HAL_RCC_OscConfig+0x2ea>
 8007a6c:	4b64      	ldr	r3, [pc, #400]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a70:	4a63      	ldr	r2, [pc, #396]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a72:	f043 0301 	orr.w	r3, r3, #1
 8007a76:	6713      	str	r3, [r2, #112]	; 0x70
 8007a78:	e01c      	b.n	8007ab4 <HAL_RCC_OscConfig+0x324>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	2b05      	cmp	r3, #5
 8007a80:	d10c      	bne.n	8007a9c <HAL_RCC_OscConfig+0x30c>
 8007a82:	4b5f      	ldr	r3, [pc, #380]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a86:	4a5e      	ldr	r2, [pc, #376]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a88:	f043 0304 	orr.w	r3, r3, #4
 8007a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a8e:	4b5c      	ldr	r3, [pc, #368]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a92:	4a5b      	ldr	r2, [pc, #364]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a94:	f043 0301 	orr.w	r3, r3, #1
 8007a98:	6713      	str	r3, [r2, #112]	; 0x70
 8007a9a:	e00b      	b.n	8007ab4 <HAL_RCC_OscConfig+0x324>
 8007a9c:	4b58      	ldr	r3, [pc, #352]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa0:	4a57      	ldr	r2, [pc, #348]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007aa2:	f023 0301 	bic.w	r3, r3, #1
 8007aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8007aa8:	4b55      	ldr	r3, [pc, #340]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aac:	4a54      	ldr	r2, [pc, #336]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007aae:	f023 0304 	bic.w	r3, r3, #4
 8007ab2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d015      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007abc:	f7fd fe16 	bl	80056ec <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ac2:	e00a      	b.n	8007ada <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ac4:	f7fd fe12 	bl	80056ec <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d901      	bls.n	8007ada <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e0cb      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ada:	4b49      	ldr	r3, [pc, #292]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0ee      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x334>
 8007ae6:	e014      	b.n	8007b12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ae8:	f7fd fe00 	bl	80056ec <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aee:	e00a      	b.n	8007b06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007af0:	f7fd fdfc 	bl	80056ec <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e0b5      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b06:	4b3e      	ldr	r3, [pc, #248]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1ee      	bne.n	8007af0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d105      	bne.n	8007b24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b18:	4b39      	ldr	r3, [pc, #228]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1c:	4a38      	ldr	r2, [pc, #224]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 80a1 	beq.w	8007c70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b2e:	4b34      	ldr	r3, [pc, #208]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 030c 	and.w	r3, r3, #12
 8007b36:	2b08      	cmp	r3, #8
 8007b38:	d05c      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d141      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b42:	4b31      	ldr	r3, [pc, #196]	; (8007c08 <HAL_RCC_OscConfig+0x478>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b48:	f7fd fdd0 	bl	80056ec <HAL_GetTick>
 8007b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b4e:	e008      	b.n	8007b62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b50:	f7fd fdcc 	bl	80056ec <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d901      	bls.n	8007b62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e087      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b62:	4b27      	ldr	r3, [pc, #156]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1f0      	bne.n	8007b50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69da      	ldr	r2, [r3, #28]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	019b      	lsls	r3, r3, #6
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	085b      	lsrs	r3, r3, #1
 8007b86:	3b01      	subs	r3, #1
 8007b88:	041b      	lsls	r3, r3, #16
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	061b      	lsls	r3, r3, #24
 8007b92:	491b      	ldr	r1, [pc, #108]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b98:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <HAL_RCC_OscConfig+0x478>)
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b9e:	f7fd fda5 	bl	80056ec <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ba6:	f7fd fda1 	bl	80056ec <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e05c      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bb8:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0f0      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x416>
 8007bc4:	e054      	b.n	8007c70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bc6:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <HAL_RCC_OscConfig+0x478>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bcc:	f7fd fd8e 	bl	80056ec <HAL_GetTick>
 8007bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bd2:	e008      	b.n	8007be6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bd4:	f7fd fd8a 	bl	80056ec <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e045      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <HAL_RCC_OscConfig+0x470>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1f0      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x444>
 8007bf2:	e03d      	b.n	8007c70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d107      	bne.n	8007c0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e038      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
 8007c00:	40023800 	.word	0x40023800
 8007c04:	40007000 	.word	0x40007000
 8007c08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c0c:	4b1b      	ldr	r3, [pc, #108]	; (8007c7c <HAL_RCC_OscConfig+0x4ec>)
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d028      	beq.n	8007c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d121      	bne.n	8007c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d11a      	bne.n	8007c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d111      	bne.n	8007c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c52:	085b      	lsrs	r3, r3, #1
 8007c54:	3b01      	subs	r3, #1
 8007c56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d107      	bne.n	8007c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d001      	beq.n	8007c70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e000      	b.n	8007c72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40023800 	.word	0x40023800

08007c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0cc      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c94:	4b68      	ldr	r3, [pc, #416]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d90c      	bls.n	8007cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ca2:	4b65      	ldr	r3, [pc, #404]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007caa:	4b63      	ldr	r3, [pc, #396]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d001      	beq.n	8007cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e0b8      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d020      	beq.n	8007d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d005      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cd4:	4b59      	ldr	r3, [pc, #356]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	4a58      	ldr	r2, [pc, #352]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cec:	4b53      	ldr	r3, [pc, #332]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	4a52      	ldr	r2, [pc, #328]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cf8:	4b50      	ldr	r3, [pc, #320]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	494d      	ldr	r1, [pc, #308]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d044      	beq.n	8007da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d107      	bne.n	8007d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d1e:	4b47      	ldr	r3, [pc, #284]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d119      	bne.n	8007d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e07f      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d003      	beq.n	8007d3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d107      	bne.n	8007d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d3e:	4b3f      	ldr	r3, [pc, #252]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e06f      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d4e:	4b3b      	ldr	r3, [pc, #236]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e067      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d5e:	4b37      	ldr	r3, [pc, #220]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f023 0203 	bic.w	r2, r3, #3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	4934      	ldr	r1, [pc, #208]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d70:	f7fd fcbc 	bl	80056ec <HAL_GetTick>
 8007d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d76:	e00a      	b.n	8007d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d78:	f7fd fcb8 	bl	80056ec <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e04f      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d8e:	4b2b      	ldr	r3, [pc, #172]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 020c 	and.w	r2, r3, #12
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d1eb      	bne.n	8007d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007da0:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0307 	and.w	r3, r3, #7
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d20c      	bcs.n	8007dc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dae:	4b22      	ldr	r3, [pc, #136]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	b2d2      	uxtb	r2, r2
 8007db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007db6:	4b20      	ldr	r3, [pc, #128]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d001      	beq.n	8007dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e032      	b.n	8007e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d008      	beq.n	8007de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dd4:	4b19      	ldr	r3, [pc, #100]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	4916      	ldr	r1, [pc, #88]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0308 	and.w	r3, r3, #8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d009      	beq.n	8007e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007df2:	4b12      	ldr	r3, [pc, #72]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	490e      	ldr	r1, [pc, #56]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e06:	f000 f821 	bl	8007e4c <HAL_RCC_GetSysClockFreq>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	4b0b      	ldr	r3, [pc, #44]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	091b      	lsrs	r3, r3, #4
 8007e12:	f003 030f 	and.w	r3, r3, #15
 8007e16:	490a      	ldr	r1, [pc, #40]	; (8007e40 <HAL_RCC_ClockConfig+0x1c0>)
 8007e18:	5ccb      	ldrb	r3, [r1, r3]
 8007e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1e:	4a09      	ldr	r2, [pc, #36]	; (8007e44 <HAL_RCC_ClockConfig+0x1c4>)
 8007e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e22:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <HAL_RCC_ClockConfig+0x1c8>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fd fc1c 	bl	8005664 <HAL_InitTick>

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	40023c00 	.word	0x40023c00
 8007e3c:	40023800 	.word	0x40023800
 8007e40:	0801085c 	.word	0x0801085c
 8007e44:	20000000 	.word	0x20000000
 8007e48:	20000004 	.word	0x20000004

08007e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e50:	b094      	sub	sp, #80	; 0x50
 8007e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	647b      	str	r3, [r7, #68]	; 0x44
 8007e58:	2300      	movs	r3, #0
 8007e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e64:	4b79      	ldr	r3, [pc, #484]	; (800804c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 030c 	and.w	r3, r3, #12
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d00d      	beq.n	8007e8c <HAL_RCC_GetSysClockFreq+0x40>
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	f200 80e1 	bhi.w	8008038 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <HAL_RCC_GetSysClockFreq+0x34>
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	d003      	beq.n	8007e86 <HAL_RCC_GetSysClockFreq+0x3a>
 8007e7e:	e0db      	b.n	8008038 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e80:	4b73      	ldr	r3, [pc, #460]	; (8008050 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007e84:	e0db      	b.n	800803e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e86:	4b73      	ldr	r3, [pc, #460]	; (8008054 <HAL_RCC_GetSysClockFreq+0x208>)
 8007e88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e8a:	e0d8      	b.n	800803e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e8c:	4b6f      	ldr	r3, [pc, #444]	; (800804c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e96:	4b6d      	ldr	r3, [pc, #436]	; (800804c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d063      	beq.n	8007f6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ea2:	4b6a      	ldr	r3, [pc, #424]	; (800804c <HAL_RCC_GetSysClockFreq+0x200>)
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	099b      	lsrs	r3, r3, #6
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007eac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	462b      	mov	r3, r5
 8007ec2:	f04f 0000 	mov.w	r0, #0
 8007ec6:	f04f 0100 	mov.w	r1, #0
 8007eca:	0159      	lsls	r1, r3, #5
 8007ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ed0:	0150      	lsls	r0, r2, #5
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	1a51      	subs	r1, r2, r1
 8007eda:	6139      	str	r1, [r7, #16]
 8007edc:	4629      	mov	r1, r5
 8007ede:	eb63 0301 	sbc.w	r3, r3, r1
 8007ee2:	617b      	str	r3, [r7, #20]
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ef0:	4659      	mov	r1, fp
 8007ef2:	018b      	lsls	r3, r1, #6
 8007ef4:	4651      	mov	r1, sl
 8007ef6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007efa:	4651      	mov	r1, sl
 8007efc:	018a      	lsls	r2, r1, #6
 8007efe:	4651      	mov	r1, sl
 8007f00:	ebb2 0801 	subs.w	r8, r2, r1
 8007f04:	4659      	mov	r1, fp
 8007f06:	eb63 0901 	sbc.w	r9, r3, r1
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	f04f 0300 	mov.w	r3, #0
 8007f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f1e:	4690      	mov	r8, r2
 8007f20:	4699      	mov	r9, r3
 8007f22:	4623      	mov	r3, r4
 8007f24:	eb18 0303 	adds.w	r3, r8, r3
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	462b      	mov	r3, r5
 8007f2c:	eb49 0303 	adc.w	r3, r9, r3
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f3e:	4629      	mov	r1, r5
 8007f40:	024b      	lsls	r3, r1, #9
 8007f42:	4621      	mov	r1, r4
 8007f44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f48:	4621      	mov	r1, r4
 8007f4a:	024a      	lsls	r2, r1, #9
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f52:	2200      	movs	r2, #0
 8007f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f5c:	f7f8 ff9a 	bl	8000e94 <__aeabi_uldivmod>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4613      	mov	r3, r2
 8007f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f68:	e058      	b.n	800801c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f6a:	4b38      	ldr	r3, [pc, #224]	; (800804c <HAL_RCC_GetSysClockFreq+0x200>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	099b      	lsrs	r3, r3, #6
 8007f70:	2200      	movs	r2, #0
 8007f72:	4618      	mov	r0, r3
 8007f74:	4611      	mov	r1, r2
 8007f76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f7a:	623b      	str	r3, [r7, #32]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007f84:	4642      	mov	r2, r8
 8007f86:	464b      	mov	r3, r9
 8007f88:	f04f 0000 	mov.w	r0, #0
 8007f8c:	f04f 0100 	mov.w	r1, #0
 8007f90:	0159      	lsls	r1, r3, #5
 8007f92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f96:	0150      	lsls	r0, r2, #5
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4641      	mov	r1, r8
 8007f9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007fb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007fb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007fbc:	ebb2 040a 	subs.w	r4, r2, sl
 8007fc0:	eb63 050b 	sbc.w	r5, r3, fp
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	00eb      	lsls	r3, r5, #3
 8007fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fd2:	00e2      	lsls	r2, r4, #3
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	461d      	mov	r5, r3
 8007fd8:	4643      	mov	r3, r8
 8007fda:	18e3      	adds	r3, r4, r3
 8007fdc:	603b      	str	r3, [r7, #0]
 8007fde:	464b      	mov	r3, r9
 8007fe0:	eb45 0303 	adc.w	r3, r5, r3
 8007fe4:	607b      	str	r3, [r7, #4]
 8007fe6:	f04f 0200 	mov.w	r2, #0
 8007fea:	f04f 0300 	mov.w	r3, #0
 8007fee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	028b      	lsls	r3, r1, #10
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	028a      	lsls	r2, r1, #10
 8008000:	4610      	mov	r0, r2
 8008002:	4619      	mov	r1, r3
 8008004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008006:	2200      	movs	r2, #0
 8008008:	61bb      	str	r3, [r7, #24]
 800800a:	61fa      	str	r2, [r7, #28]
 800800c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008010:	f7f8 ff40 	bl	8000e94 <__aeabi_uldivmod>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	4613      	mov	r3, r2
 800801a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800801c:	4b0b      	ldr	r3, [pc, #44]	; (800804c <HAL_RCC_GetSysClockFreq+0x200>)
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	0c1b      	lsrs	r3, r3, #16
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	3301      	adds	r3, #1
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800802c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800802e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008030:	fbb2 f3f3 	udiv	r3, r2, r3
 8008034:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008036:	e002      	b.n	800803e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008038:	4b05      	ldr	r3, [pc, #20]	; (8008050 <HAL_RCC_GetSysClockFreq+0x204>)
 800803a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800803c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800803e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008040:	4618      	mov	r0, r3
 8008042:	3750      	adds	r7, #80	; 0x50
 8008044:	46bd      	mov	sp, r7
 8008046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800804a:	bf00      	nop
 800804c:	40023800 	.word	0x40023800
 8008050:	00f42400 	.word	0x00f42400
 8008054:	007a1200 	.word	0x007a1200

08008058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800805c:	4b03      	ldr	r3, [pc, #12]	; (800806c <HAL_RCC_GetHCLKFreq+0x14>)
 800805e:	681b      	ldr	r3, [r3, #0]
}
 8008060:	4618      	mov	r0, r3
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20000000 	.word	0x20000000

08008070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008074:	f7ff fff0 	bl	8008058 <HAL_RCC_GetHCLKFreq>
 8008078:	4602      	mov	r2, r0
 800807a:	4b05      	ldr	r3, [pc, #20]	; (8008090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	0a9b      	lsrs	r3, r3, #10
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	4903      	ldr	r1, [pc, #12]	; (8008094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008086:	5ccb      	ldrb	r3, [r1, r3]
 8008088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800808c:	4618      	mov	r0, r3
 800808e:	bd80      	pop	{r7, pc}
 8008090:	40023800 	.word	0x40023800
 8008094:	0801086c 	.word	0x0801086c

08008098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800809c:	f7ff ffdc 	bl	8008058 <HAL_RCC_GetHCLKFreq>
 80080a0:	4602      	mov	r2, r0
 80080a2:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	0b5b      	lsrs	r3, r3, #13
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	4903      	ldr	r1, [pc, #12]	; (80080bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80080ae:	5ccb      	ldrb	r3, [r1, r3]
 80080b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40023800 	.word	0x40023800
 80080bc:	0801086c 	.word	0x0801086c

080080c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e041      	b.n	8008156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fa fd22 	bl	8002b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3304      	adds	r3, #4
 80080fc:	4619      	mov	r1, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	f000 fd2e 	bl	8008b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e041      	b.n	80081f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d106      	bne.n	800818a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f839 	bl	80081fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2202      	movs	r2, #2
 800818e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3304      	adds	r3, #4
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f000 fcdf 	bl	8008b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d109      	bne.n	8008234 <HAL_TIM_PWM_Start+0x24>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b01      	cmp	r3, #1
 800822a:	bf14      	ite	ne
 800822c:	2301      	movne	r3, #1
 800822e:	2300      	moveq	r3, #0
 8008230:	b2db      	uxtb	r3, r3
 8008232:	e022      	b.n	800827a <HAL_TIM_PWM_Start+0x6a>
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b04      	cmp	r3, #4
 8008238:	d109      	bne.n	800824e <HAL_TIM_PWM_Start+0x3e>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b01      	cmp	r3, #1
 8008244:	bf14      	ite	ne
 8008246:	2301      	movne	r3, #1
 8008248:	2300      	moveq	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	e015      	b.n	800827a <HAL_TIM_PWM_Start+0x6a>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b08      	cmp	r3, #8
 8008252:	d109      	bne.n	8008268 <HAL_TIM_PWM_Start+0x58>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b01      	cmp	r3, #1
 800825e:	bf14      	ite	ne
 8008260:	2301      	movne	r3, #1
 8008262:	2300      	moveq	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	e008      	b.n	800827a <HAL_TIM_PWM_Start+0x6a>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b01      	cmp	r3, #1
 8008272:	bf14      	ite	ne
 8008274:	2301      	movne	r3, #1
 8008276:	2300      	moveq	r3, #0
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e07c      	b.n	800837c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d104      	bne.n	8008292 <HAL_TIM_PWM_Start+0x82>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008290:	e013      	b.n	80082ba <HAL_TIM_PWM_Start+0xaa>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b04      	cmp	r3, #4
 8008296:	d104      	bne.n	80082a2 <HAL_TIM_PWM_Start+0x92>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082a0:	e00b      	b.n	80082ba <HAL_TIM_PWM_Start+0xaa>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b08      	cmp	r3, #8
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_PWM_Start+0xa2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082b0:	e003      	b.n	80082ba <HAL_TIM_PWM_Start+0xaa>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2202      	movs	r2, #2
 80082b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2201      	movs	r2, #1
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 ff42 	bl	800914c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a2d      	ldr	r2, [pc, #180]	; (8008384 <HAL_TIM_PWM_Start+0x174>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d004      	beq.n	80082dc <HAL_TIM_PWM_Start+0xcc>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a2c      	ldr	r2, [pc, #176]	; (8008388 <HAL_TIM_PWM_Start+0x178>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d101      	bne.n	80082e0 <HAL_TIM_PWM_Start+0xd0>
 80082dc:	2301      	movs	r3, #1
 80082de:	e000      	b.n	80082e2 <HAL_TIM_PWM_Start+0xd2>
 80082e0:	2300      	movs	r3, #0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d007      	beq.n	80082f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a22      	ldr	r2, [pc, #136]	; (8008384 <HAL_TIM_PWM_Start+0x174>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d022      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008308:	d01d      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a1f      	ldr	r2, [pc, #124]	; (800838c <HAL_TIM_PWM_Start+0x17c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d018      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a1d      	ldr	r2, [pc, #116]	; (8008390 <HAL_TIM_PWM_Start+0x180>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d013      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a1c      	ldr	r2, [pc, #112]	; (8008394 <HAL_TIM_PWM_Start+0x184>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00e      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a16      	ldr	r2, [pc, #88]	; (8008388 <HAL_TIM_PWM_Start+0x178>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d009      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a18      	ldr	r2, [pc, #96]	; (8008398 <HAL_TIM_PWM_Start+0x188>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d004      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a16      	ldr	r2, [pc, #88]	; (800839c <HAL_TIM_PWM_Start+0x18c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d111      	bne.n	800836a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2b06      	cmp	r3, #6
 8008356:	d010      	beq.n	800837a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0201 	orr.w	r2, r2, #1
 8008366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008368:	e007      	b.n	800837a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f042 0201 	orr.w	r2, r2, #1
 8008378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	40010000 	.word	0x40010000
 8008388:	40010400 	.word	0x40010400
 800838c:	40000400 	.word	0x40000400
 8008390:	40000800 	.word	0x40000800
 8008394:	40000c00 	.word	0x40000c00
 8008398:	40014000 	.word	0x40014000
 800839c:	40001800 	.word	0x40001800

080083a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e097      	b.n	80084e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d106      	bne.n	80083ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7fa fb69 	bl	8002aa0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2202      	movs	r2, #2
 80083d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6812      	ldr	r2, [r2, #0]
 80083e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083e4:	f023 0307 	bic.w	r3, r3, #7
 80083e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3304      	adds	r3, #4
 80083f2:	4619      	mov	r1, r3
 80083f4:	4610      	mov	r0, r2
 80083f6:	f000 fbb3 	bl	8008b60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6a1b      	ldr	r3, [r3, #32]
 8008410:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008422:	f023 0303 	bic.w	r3, r3, #3
 8008426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	689a      	ldr	r2, [r3, #8]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	021b      	lsls	r3, r3, #8
 8008432:	4313      	orrs	r3, r2
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4313      	orrs	r3, r2
 8008438:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008440:	f023 030c 	bic.w	r3, r3, #12
 8008444:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800844c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008450:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68da      	ldr	r2, [r3, #12]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	4313      	orrs	r3, r2
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	4313      	orrs	r3, r2
 8008462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	011a      	lsls	r2, r3, #4
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	031b      	lsls	r3, r3, #12
 8008470:	4313      	orrs	r3, r2
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	4313      	orrs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800847e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008486:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	4313      	orrs	r3, r2
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	4313      	orrs	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008504:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800850c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008514:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d110      	bne.n	800853e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d102      	bne.n	8008528 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008522:	7b7b      	ldrb	r3, [r7, #13]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d001      	beq.n	800852c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e069      	b.n	8008600 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2202      	movs	r2, #2
 8008530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800853c:	e031      	b.n	80085a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2b04      	cmp	r3, #4
 8008542:	d110      	bne.n	8008566 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d102      	bne.n	8008550 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800854a:	7b3b      	ldrb	r3, [r7, #12]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d001      	beq.n	8008554 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e055      	b.n	8008600 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2202      	movs	r2, #2
 8008558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008564:	e01d      	b.n	80085a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d108      	bne.n	800857e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d105      	bne.n	800857e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008572:	7b7b      	ldrb	r3, [r7, #13]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d102      	bne.n	800857e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008578:	7b3b      	ldrb	r3, [r7, #12]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d001      	beq.n	8008582 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e03e      	b.n	8008600 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2202      	movs	r2, #2
 800858e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2202      	movs	r2, #2
 8008596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2202      	movs	r2, #2
 800859e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <HAL_TIM_Encoder_Start+0xc4>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	d008      	beq.n	80085c0 <HAL_TIM_Encoder_Start+0xd4>
 80085ae:	e00f      	b.n	80085d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2201      	movs	r2, #1
 80085b6:	2100      	movs	r1, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fdc7 	bl	800914c <TIM_CCxChannelCmd>
      break;
 80085be:	e016      	b.n	80085ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2201      	movs	r2, #1
 80085c6:	2104      	movs	r1, #4
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 fdbf 	bl	800914c <TIM_CCxChannelCmd>
      break;
 80085ce:	e00e      	b.n	80085ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2201      	movs	r2, #1
 80085d6:	2100      	movs	r1, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fdb7 	bl	800914c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2201      	movs	r2, #1
 80085e4:	2104      	movs	r1, #4
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 fdb0 	bl	800914c <TIM_CCxChannelCmd>
      break;
 80085ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f042 0201 	orr.w	r2, r2, #1
 80085fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d020      	beq.n	800866c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f003 0302 	and.w	r3, r3, #2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01b      	beq.n	800866c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f06f 0202 	mvn.w	r2, #2
 800863c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d003      	beq.n	800865a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa65 	bl	8008b22 <HAL_TIM_IC_CaptureCallback>
 8008658:	e005      	b.n	8008666 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fa57 	bl	8008b0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fa68 	bl	8008b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f003 0304 	and.w	r3, r3, #4
 8008672:	2b00      	cmp	r3, #0
 8008674:	d020      	beq.n	80086b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01b      	beq.n	80086b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f06f 0204 	mvn.w	r2, #4
 8008688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2202      	movs	r2, #2
 800868e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fa3f 	bl	8008b22 <HAL_TIM_IC_CaptureCallback>
 80086a4:	e005      	b.n	80086b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fa31 	bl	8008b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fa42 	bl	8008b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f003 0308 	and.w	r3, r3, #8
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d020      	beq.n	8008704 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f003 0308 	and.w	r3, r3, #8
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01b      	beq.n	8008704 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f06f 0208 	mvn.w	r2, #8
 80086d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2204      	movs	r2, #4
 80086da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	f003 0303 	and.w	r3, r3, #3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa19 	bl	8008b22 <HAL_TIM_IC_CaptureCallback>
 80086f0:	e005      	b.n	80086fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa0b 	bl	8008b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fa1c 	bl	8008b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f003 0310 	and.w	r3, r3, #16
 800870a:	2b00      	cmp	r3, #0
 800870c:	d020      	beq.n	8008750 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01b      	beq.n	8008750 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f06f 0210 	mvn.w	r2, #16
 8008720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2208      	movs	r2, #8
 8008726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f9f3 	bl	8008b22 <HAL_TIM_IC_CaptureCallback>
 800873c:	e005      	b.n	800874a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f9e5 	bl	8008b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f9f6 	bl	8008b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00c      	beq.n	8008774 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	d007      	beq.n	8008774 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f06f 0201 	mvn.w	r2, #1
 800876c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f9c3 	bl	8008afa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00c      	beq.n	8008798 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008784:	2b00      	cmp	r3, #0
 8008786:	d007      	beq.n	8008798 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fd86 	bl	80092a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00c      	beq.n	80087bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d007      	beq.n	80087bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f9c7 	bl	8008b4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00c      	beq.n	80087e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f003 0320 	and.w	r3, r3, #32
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d007      	beq.n	80087e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f06f 0220 	mvn.w	r2, #32
 80087d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fd58 	bl	8009290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d101      	bne.n	8008806 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008802:	2302      	movs	r3, #2
 8008804:	e0ae      	b.n	8008964 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b0c      	cmp	r3, #12
 8008812:	f200 809f 	bhi.w	8008954 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008816:	a201      	add	r2, pc, #4	; (adr r2, 800881c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881c:	08008851 	.word	0x08008851
 8008820:	08008955 	.word	0x08008955
 8008824:	08008955 	.word	0x08008955
 8008828:	08008955 	.word	0x08008955
 800882c:	08008891 	.word	0x08008891
 8008830:	08008955 	.word	0x08008955
 8008834:	08008955 	.word	0x08008955
 8008838:	08008955 	.word	0x08008955
 800883c:	080088d3 	.word	0x080088d3
 8008840:	08008955 	.word	0x08008955
 8008844:	08008955 	.word	0x08008955
 8008848:	08008955 	.word	0x08008955
 800884c:	08008913 	.word	0x08008913
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68b9      	ldr	r1, [r7, #8]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fa2e 	bl	8008cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0208 	orr.w	r2, r2, #8
 800886a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699a      	ldr	r2, [r3, #24]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f022 0204 	bic.w	r2, r2, #4
 800887a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6999      	ldr	r1, [r3, #24]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	691a      	ldr	r2, [r3, #16]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	619a      	str	r2, [r3, #24]
      break;
 800888e:	e064      	b.n	800895a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fa7e 	bl	8008d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6999      	ldr	r1, [r3, #24]
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	021a      	lsls	r2, r3, #8
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	619a      	str	r2, [r3, #24]
      break;
 80088d0:	e043      	b.n	800895a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68b9      	ldr	r1, [r7, #8]
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 fad3 	bl	8008e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	69da      	ldr	r2, [r3, #28]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f042 0208 	orr.w	r2, r2, #8
 80088ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69da      	ldr	r2, [r3, #28]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0204 	bic.w	r2, r2, #4
 80088fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69d9      	ldr	r1, [r3, #28]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	61da      	str	r2, [r3, #28]
      break;
 8008910:	e023      	b.n	800895a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68b9      	ldr	r1, [r7, #8]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fb27 	bl	8008f6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69da      	ldr	r2, [r3, #28]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800892c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69da      	ldr	r2, [r3, #28]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800893c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69d9      	ldr	r1, [r3, #28]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	021a      	lsls	r2, r3, #8
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	61da      	str	r2, [r3, #28]
      break;
 8008952:	e002      	b.n	800895a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	75fb      	strb	r3, [r7, #23]
      break;
 8008958:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008962:	7dfb      	ldrb	r3, [r7, #23]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008980:	2b01      	cmp	r3, #1
 8008982:	d101      	bne.n	8008988 <HAL_TIM_ConfigClockSource+0x1c>
 8008984:	2302      	movs	r3, #2
 8008986:	e0b4      	b.n	8008af2 <HAL_TIM_ConfigClockSource+0x186>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80089a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089c0:	d03e      	beq.n	8008a40 <HAL_TIM_ConfigClockSource+0xd4>
 80089c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089c6:	f200 8087 	bhi.w	8008ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80089ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ce:	f000 8086 	beq.w	8008ade <HAL_TIM_ConfigClockSource+0x172>
 80089d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d6:	d87f      	bhi.n	8008ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80089d8:	2b70      	cmp	r3, #112	; 0x70
 80089da:	d01a      	beq.n	8008a12 <HAL_TIM_ConfigClockSource+0xa6>
 80089dc:	2b70      	cmp	r3, #112	; 0x70
 80089de:	d87b      	bhi.n	8008ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80089e0:	2b60      	cmp	r3, #96	; 0x60
 80089e2:	d050      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x11a>
 80089e4:	2b60      	cmp	r3, #96	; 0x60
 80089e6:	d877      	bhi.n	8008ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80089e8:	2b50      	cmp	r3, #80	; 0x50
 80089ea:	d03c      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0xfa>
 80089ec:	2b50      	cmp	r3, #80	; 0x50
 80089ee:	d873      	bhi.n	8008ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80089f0:	2b40      	cmp	r3, #64	; 0x40
 80089f2:	d058      	beq.n	8008aa6 <HAL_TIM_ConfigClockSource+0x13a>
 80089f4:	2b40      	cmp	r3, #64	; 0x40
 80089f6:	d86f      	bhi.n	8008ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80089f8:	2b30      	cmp	r3, #48	; 0x30
 80089fa:	d064      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0x15a>
 80089fc:	2b30      	cmp	r3, #48	; 0x30
 80089fe:	d86b      	bhi.n	8008ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8008a00:	2b20      	cmp	r3, #32
 8008a02:	d060      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8008a04:	2b20      	cmp	r3, #32
 8008a06:	d867      	bhi.n	8008ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d05c      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8008a0c:	2b10      	cmp	r3, #16
 8008a0e:	d05a      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8008a10:	e062      	b.n	8008ad8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a22:	f000 fb73 	bl	800910c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	609a      	str	r2, [r3, #8]
      break;
 8008a3e:	e04f      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a50:	f000 fb5c 	bl	800910c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689a      	ldr	r2, [r3, #8]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a62:	609a      	str	r2, [r3, #8]
      break;
 8008a64:	e03c      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a72:	461a      	mov	r2, r3
 8008a74:	f000 fad0 	bl	8009018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2150      	movs	r1, #80	; 0x50
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 fb29 	bl	80090d6 <TIM_ITRx_SetConfig>
      break;
 8008a84:	e02c      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a92:	461a      	mov	r2, r3
 8008a94:	f000 faef 	bl	8009076 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2160      	movs	r1, #96	; 0x60
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fb19 	bl	80090d6 <TIM_ITRx_SetConfig>
      break;
 8008aa4:	e01c      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f000 fab0 	bl	8009018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2140      	movs	r1, #64	; 0x40
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fb09 	bl	80090d6 <TIM_ITRx_SetConfig>
      break;
 8008ac4:	e00c      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	f000 fb00 	bl	80090d6 <TIM_ITRx_SetConfig>
      break;
 8008ad6:	e003      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	73fb      	strb	r3, [r7, #15]
      break;
 8008adc:	e000      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b083      	sub	sp, #12
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008b02:	bf00      	nop
 8008b04:	370c      	adds	r7, #12
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b083      	sub	sp, #12
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b16:	bf00      	nop
 8008b18:	370c      	adds	r7, #12
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b083      	sub	sp, #12
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b2a:	bf00      	nop
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b3e:	bf00      	nop
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b52:	bf00      	nop
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
	...

08008b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a46      	ldr	r2, [pc, #280]	; (8008c8c <TIM_Base_SetConfig+0x12c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d013      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b7e:	d00f      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a43      	ldr	r2, [pc, #268]	; (8008c90 <TIM_Base_SetConfig+0x130>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00b      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a42      	ldr	r2, [pc, #264]	; (8008c94 <TIM_Base_SetConfig+0x134>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d007      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a41      	ldr	r2, [pc, #260]	; (8008c98 <TIM_Base_SetConfig+0x138>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a40      	ldr	r2, [pc, #256]	; (8008c9c <TIM_Base_SetConfig+0x13c>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d108      	bne.n	8008bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a35      	ldr	r2, [pc, #212]	; (8008c8c <TIM_Base_SetConfig+0x12c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d02b      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc0:	d027      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a32      	ldr	r2, [pc, #200]	; (8008c90 <TIM_Base_SetConfig+0x130>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d023      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a31      	ldr	r2, [pc, #196]	; (8008c94 <TIM_Base_SetConfig+0x134>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d01f      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a30      	ldr	r2, [pc, #192]	; (8008c98 <TIM_Base_SetConfig+0x138>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d01b      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a2f      	ldr	r2, [pc, #188]	; (8008c9c <TIM_Base_SetConfig+0x13c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d017      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a2e      	ldr	r2, [pc, #184]	; (8008ca0 <TIM_Base_SetConfig+0x140>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d013      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a2d      	ldr	r2, [pc, #180]	; (8008ca4 <TIM_Base_SetConfig+0x144>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d00f      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a2c      	ldr	r2, [pc, #176]	; (8008ca8 <TIM_Base_SetConfig+0x148>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d00b      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a2b      	ldr	r2, [pc, #172]	; (8008cac <TIM_Base_SetConfig+0x14c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d007      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a2a      	ldr	r2, [pc, #168]	; (8008cb0 <TIM_Base_SetConfig+0x150>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d003      	beq.n	8008c12 <TIM_Base_SetConfig+0xb2>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a29      	ldr	r2, [pc, #164]	; (8008cb4 <TIM_Base_SetConfig+0x154>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d108      	bne.n	8008c24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a10      	ldr	r2, [pc, #64]	; (8008c8c <TIM_Base_SetConfig+0x12c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d003      	beq.n	8008c58 <TIM_Base_SetConfig+0xf8>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a12      	ldr	r2, [pc, #72]	; (8008c9c <TIM_Base_SetConfig+0x13c>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d103      	bne.n	8008c60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	691a      	ldr	r2, [r3, #16]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d105      	bne.n	8008c7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	f023 0201 	bic.w	r2, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	611a      	str	r2, [r3, #16]
  }
}
 8008c7e:	bf00      	nop
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	40010000 	.word	0x40010000
 8008c90:	40000400 	.word	0x40000400
 8008c94:	40000800 	.word	0x40000800
 8008c98:	40000c00 	.word	0x40000c00
 8008c9c:	40010400 	.word	0x40010400
 8008ca0:	40014000 	.word	0x40014000
 8008ca4:	40014400 	.word	0x40014400
 8008ca8:	40014800 	.word	0x40014800
 8008cac:	40001800 	.word	0x40001800
 8008cb0:	40001c00 	.word	0x40001c00
 8008cb4:	40002000 	.word	0x40002000

08008cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b087      	sub	sp, #28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	f023 0201 	bic.w	r2, r3, #1
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0303 	bic.w	r3, r3, #3
 8008cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f023 0302 	bic.w	r3, r3, #2
 8008d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a20      	ldr	r2, [pc, #128]	; (8008d90 <TIM_OC1_SetConfig+0xd8>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d003      	beq.n	8008d1c <TIM_OC1_SetConfig+0x64>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a1f      	ldr	r2, [pc, #124]	; (8008d94 <TIM_OC1_SetConfig+0xdc>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d10c      	bne.n	8008d36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	f023 0308 	bic.w	r3, r3, #8
 8008d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	f023 0304 	bic.w	r3, r3, #4
 8008d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a15      	ldr	r2, [pc, #84]	; (8008d90 <TIM_OC1_SetConfig+0xd8>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d003      	beq.n	8008d46 <TIM_OC1_SetConfig+0x8e>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a14      	ldr	r2, [pc, #80]	; (8008d94 <TIM_OC1_SetConfig+0xdc>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d111      	bne.n	8008d6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	621a      	str	r2, [r3, #32]
}
 8008d84:	bf00      	nop
 8008d86:	371c      	adds	r7, #28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	40010000 	.word	0x40010000
 8008d94:	40010400 	.word	0x40010400

08008d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	f023 0210 	bic.w	r2, r3, #16
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	021b      	lsls	r3, r3, #8
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f023 0320 	bic.w	r3, r3, #32
 8008de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	011b      	lsls	r3, r3, #4
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a22      	ldr	r2, [pc, #136]	; (8008e7c <TIM_OC2_SetConfig+0xe4>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d003      	beq.n	8008e00 <TIM_OC2_SetConfig+0x68>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a21      	ldr	r2, [pc, #132]	; (8008e80 <TIM_OC2_SetConfig+0xe8>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d10d      	bne.n	8008e1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a17      	ldr	r2, [pc, #92]	; (8008e7c <TIM_OC2_SetConfig+0xe4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d003      	beq.n	8008e2c <TIM_OC2_SetConfig+0x94>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a16      	ldr	r2, [pc, #88]	; (8008e80 <TIM_OC2_SetConfig+0xe8>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d113      	bne.n	8008e54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	621a      	str	r2, [r3, #32]
}
 8008e6e:	bf00      	nop
 8008e70:	371c      	adds	r7, #28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	40010000 	.word	0x40010000
 8008e80:	40010400 	.word	0x40010400

08008e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 0303 	bic.w	r3, r3, #3
 8008eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	021b      	lsls	r3, r3, #8
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a21      	ldr	r2, [pc, #132]	; (8008f64 <TIM_OC3_SetConfig+0xe0>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d003      	beq.n	8008eea <TIM_OC3_SetConfig+0x66>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a20      	ldr	r2, [pc, #128]	; (8008f68 <TIM_OC3_SetConfig+0xe4>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d10d      	bne.n	8008f06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	021b      	lsls	r3, r3, #8
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a16      	ldr	r2, [pc, #88]	; (8008f64 <TIM_OC3_SetConfig+0xe0>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d003      	beq.n	8008f16 <TIM_OC3_SetConfig+0x92>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a15      	ldr	r2, [pc, #84]	; (8008f68 <TIM_OC3_SetConfig+0xe4>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d113      	bne.n	8008f3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	621a      	str	r2, [r3, #32]
}
 8008f58:	bf00      	nop
 8008f5a:	371c      	adds	r7, #28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	40010000 	.word	0x40010000
 8008f68:	40010400 	.word	0x40010400

08008f6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	021b      	lsls	r3, r3, #8
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	031b      	lsls	r3, r3, #12
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a12      	ldr	r2, [pc, #72]	; (8009010 <TIM_OC4_SetConfig+0xa4>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d003      	beq.n	8008fd4 <TIM_OC4_SetConfig+0x68>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a11      	ldr	r2, [pc, #68]	; (8009014 <TIM_OC4_SetConfig+0xa8>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d109      	bne.n	8008fe8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	019b      	lsls	r3, r3, #6
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	621a      	str	r2, [r3, #32]
}
 8009002:	bf00      	nop
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	40010000 	.word	0x40010000
 8009014:	40010400 	.word	0x40010400

08009018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009018:	b480      	push	{r7}
 800901a:	b087      	sub	sp, #28
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6a1b      	ldr	r3, [r3, #32]
 8009028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	f023 0201 	bic.w	r2, r3, #1
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	011b      	lsls	r3, r3, #4
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	4313      	orrs	r3, r2
 800904c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f023 030a 	bic.w	r3, r3, #10
 8009054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	4313      	orrs	r3, r2
 800905c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	621a      	str	r2, [r3, #32]
}
 800906a:	bf00      	nop
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009076:	b480      	push	{r7}
 8009078:	b087      	sub	sp, #28
 800907a:	af00      	add	r7, sp, #0
 800907c:	60f8      	str	r0, [r7, #12]
 800907e:	60b9      	str	r1, [r7, #8]
 8009080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	f023 0210 	bic.w	r2, r3, #16
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	031b      	lsls	r3, r3, #12
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	011b      	lsls	r3, r3, #4
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	621a      	str	r2, [r3, #32]
}
 80090ca:	bf00      	nop
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b085      	sub	sp, #20
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	f043 0307 	orr.w	r3, r3, #7
 80090f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	609a      	str	r2, [r3, #8]
}
 8009100:	bf00      	nop
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	021a      	lsls	r2, r3, #8
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	431a      	orrs	r2, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	4313      	orrs	r3, r2
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	609a      	str	r2, [r3, #8]
}
 8009140:	bf00      	nop
 8009142:	371c      	adds	r7, #28
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	f003 031f 	and.w	r3, r3, #31
 800915e:	2201      	movs	r2, #1
 8009160:	fa02 f303 	lsl.w	r3, r2, r3
 8009164:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6a1a      	ldr	r2, [r3, #32]
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	43db      	mvns	r3, r3
 800916e:	401a      	ands	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6a1a      	ldr	r2, [r3, #32]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	f003 031f 	and.w	r3, r3, #31
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	fa01 f303 	lsl.w	r3, r1, r3
 8009184:	431a      	orrs	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	621a      	str	r2, [r3, #32]
}
 800918a:	bf00      	nop
 800918c:	371c      	adds	r7, #28
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
	...

08009198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d101      	bne.n	80091b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e05a      	b.n	8009266 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a21      	ldr	r2, [pc, #132]	; (8009274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d022      	beq.n	800923a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fc:	d01d      	beq.n	800923a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a1d      	ldr	r2, [pc, #116]	; (8009278 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d018      	beq.n	800923a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a1b      	ldr	r2, [pc, #108]	; (800927c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d013      	beq.n	800923a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a1a      	ldr	r2, [pc, #104]	; (8009280 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d00e      	beq.n	800923a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a18      	ldr	r2, [pc, #96]	; (8009284 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d009      	beq.n	800923a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a17      	ldr	r2, [pc, #92]	; (8009288 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d004      	beq.n	800923a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a15      	ldr	r2, [pc, #84]	; (800928c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d10c      	bne.n	8009254 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	4313      	orrs	r3, r2
 800924a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	40010000 	.word	0x40010000
 8009278:	40000400 	.word	0x40000400
 800927c:	40000800 	.word	0x40000800
 8009280:	40000c00 	.word	0x40000c00
 8009284:	40010400 	.word	0x40010400
 8009288:	40014000 	.word	0x40014000
 800928c:	40001800 	.word	0x40001800

08009290 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e042      	b.n	8009350 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7f9 fcd8 	bl	8002c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2224      	movs	r2, #36	; 0x24
 80092e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68da      	ldr	r2, [r3, #12]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fdbd 	bl	8009e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	691a      	ldr	r2, [r3, #16]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	695a      	ldr	r2, [r3, #20]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68da      	ldr	r2, [r3, #12]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2220      	movs	r2, #32
 800933c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2220      	movs	r2, #32
 8009344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08a      	sub	sp, #40	; 0x28
 800935c:	af02      	add	r7, sp, #8
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	603b      	str	r3, [r7, #0]
 8009364:	4613      	mov	r3, r2
 8009366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009368:	2300      	movs	r3, #0
 800936a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b20      	cmp	r3, #32
 8009376:	d175      	bne.n	8009464 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <HAL_UART_Transmit+0x2c>
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e06e      	b.n	8009466 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2221      	movs	r2, #33	; 0x21
 8009392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009396:	f7fc f9a9 	bl	80056ec <HAL_GetTick>
 800939a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	88fa      	ldrh	r2, [r7, #6]
 80093a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	88fa      	ldrh	r2, [r7, #6]
 80093a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b0:	d108      	bne.n	80093c4 <HAL_UART_Transmit+0x6c>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d104      	bne.n	80093c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	61bb      	str	r3, [r7, #24]
 80093c2:	e003      	b.n	80093cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093c8:	2300      	movs	r3, #0
 80093ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80093cc:	e02e      	b.n	800942c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	2200      	movs	r2, #0
 80093d6:	2180      	movs	r1, #128	; 0x80
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 fb1f 	bl	8009a1c <UART_WaitOnFlagUntilTimeout>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2220      	movs	r2, #32
 80093e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e03a      	b.n	8009466 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10b      	bne.n	800940e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	461a      	mov	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009404:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	3302      	adds	r3, #2
 800940a:	61bb      	str	r3, [r7, #24]
 800940c:	e007      	b.n	800941e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	781a      	ldrb	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	3301      	adds	r3, #1
 800941c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009422:	b29b      	uxth	r3, r3
 8009424:	3b01      	subs	r3, #1
 8009426:	b29a      	uxth	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009430:	b29b      	uxth	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1cb      	bne.n	80093ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2200      	movs	r2, #0
 800943e:	2140      	movs	r1, #64	; 0x40
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f000 faeb 	bl	8009a1c <UART_WaitOnFlagUntilTimeout>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2220      	movs	r2, #32
 8009450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e006      	b.n	8009466 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2220      	movs	r2, #32
 800945c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	e000      	b.n	8009466 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009464:	2302      	movs	r3, #2
  }
}
 8009466:	4618      	mov	r0, r3
 8009468:	3720      	adds	r7, #32
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	60f8      	str	r0, [r7, #12]
 8009476:	60b9      	str	r1, [r7, #8]
 8009478:	4613      	mov	r3, r2
 800947a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b20      	cmp	r3, #32
 8009486:	d112      	bne.n	80094ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <HAL_UART_Receive_IT+0x26>
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e00b      	b.n	80094b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	461a      	mov	r2, r3
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 fb12 	bl	8009ace <UART_Start_Receive_IT>
 80094aa:	4603      	mov	r3, r0
 80094ac:	e000      	b.n	80094b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80094ae:	2302      	movs	r3, #2
  }
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b0ba      	sub	sp, #232	; 0xe8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80094de:	2300      	movs	r3, #0
 80094e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80094e4:	2300      	movs	r3, #0
 80094e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ee:	f003 030f 	and.w	r3, r3, #15
 80094f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80094f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10f      	bne.n	800951e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009502:	f003 0320 	and.w	r3, r3, #32
 8009506:	2b00      	cmp	r3, #0
 8009508:	d009      	beq.n	800951e <HAL_UART_IRQHandler+0x66>
 800950a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fbf2 	bl	8009d00 <UART_Receive_IT>
      return;
 800951c:	e25b      	b.n	80099d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800951e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009522:	2b00      	cmp	r3, #0
 8009524:	f000 80de 	beq.w	80096e4 <HAL_UART_IRQHandler+0x22c>
 8009528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d106      	bne.n	8009542 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009538:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 80d1 	beq.w	80096e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00b      	beq.n	8009566 <HAL_UART_IRQHandler+0xae>
 800954e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009556:	2b00      	cmp	r3, #0
 8009558:	d005      	beq.n	8009566 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955e:	f043 0201 	orr.w	r2, r3, #1
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800956a:	f003 0304 	and.w	r3, r3, #4
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00b      	beq.n	800958a <HAL_UART_IRQHandler+0xd2>
 8009572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	d005      	beq.n	800958a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009582:	f043 0202 	orr.w	r2, r3, #2
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800958a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00b      	beq.n	80095ae <HAL_UART_IRQHandler+0xf6>
 8009596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d005      	beq.n	80095ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a6:	f043 0204 	orr.w	r2, r3, #4
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b2:	f003 0308 	and.w	r3, r3, #8
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d011      	beq.n	80095de <HAL_UART_IRQHandler+0x126>
 80095ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095be:	f003 0320 	and.w	r3, r3, #32
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d105      	bne.n	80095d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80095c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d005      	beq.n	80095de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d6:	f043 0208 	orr.w	r2, r3, #8
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 81f2 	beq.w	80099cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ec:	f003 0320 	and.w	r3, r3, #32
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d008      	beq.n	8009606 <HAL_UART_IRQHandler+0x14e>
 80095f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f8:	f003 0320 	and.w	r3, r3, #32
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fb7d 	bl	8009d00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009610:	2b40      	cmp	r3, #64	; 0x40
 8009612:	bf0c      	ite	eq
 8009614:	2301      	moveq	r3, #1
 8009616:	2300      	movne	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009622:	f003 0308 	and.w	r3, r3, #8
 8009626:	2b00      	cmp	r3, #0
 8009628:	d103      	bne.n	8009632 <HAL_UART_IRQHandler+0x17a>
 800962a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800962e:	2b00      	cmp	r3, #0
 8009630:	d04f      	beq.n	80096d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fa85 	bl	8009b42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009642:	2b40      	cmp	r3, #64	; 0x40
 8009644:	d141      	bne.n	80096ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3314      	adds	r3, #20
 800964c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009650:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009654:	e853 3f00 	ldrex	r3, [r3]
 8009658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800965c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3314      	adds	r3, #20
 800966e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009672:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800967e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009682:	e841 2300 	strex	r3, r2, [r1]
 8009686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800968a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1d9      	bne.n	8009646 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009696:	2b00      	cmp	r3, #0
 8009698:	d013      	beq.n	80096c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969e:	4a7e      	ldr	r2, [pc, #504]	; (8009898 <HAL_UART_IRQHandler+0x3e0>)
 80096a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fc f9d1 	bl	8005a4e <HAL_DMA_Abort_IT>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d016      	beq.n	80096e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c0:	e00e      	b.n	80096e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f994 	bl	80099f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c8:	e00a      	b.n	80096e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f990 	bl	80099f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d0:	e006      	b.n	80096e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f98c 	bl	80099f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80096de:	e175      	b.n	80099cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e0:	bf00      	nop
    return;
 80096e2:	e173      	b.n	80099cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	f040 814f 	bne.w	800998c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80096ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f2:	f003 0310 	and.w	r3, r3, #16
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 8148 	beq.w	800998c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80096fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 8141 	beq.w	800998c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800970a:	2300      	movs	r3, #0
 800970c:	60bb      	str	r3, [r7, #8]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	60bb      	str	r3, [r7, #8]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	60bb      	str	r3, [r7, #8]
 800971e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972a:	2b40      	cmp	r3, #64	; 0x40
 800972c:	f040 80b6 	bne.w	800989c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800973c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 8145 	beq.w	80099d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800974a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800974e:	429a      	cmp	r2, r3
 8009750:	f080 813e 	bcs.w	80099d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800975a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009766:	f000 8088 	beq.w	800987a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	330c      	adds	r3, #12
 8009770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	330c      	adds	r3, #12
 8009792:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009796:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800979a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80097a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1d9      	bne.n	800976a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3314      	adds	r3, #20
 80097bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097c0:	e853 3f00 	ldrex	r3, [r3]
 80097c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097c8:	f023 0301 	bic.w	r3, r3, #1
 80097cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3314      	adds	r3, #20
 80097d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80097de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80097e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80097e6:	e841 2300 	strex	r3, r2, [r1]
 80097ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80097ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1e1      	bne.n	80097b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3314      	adds	r3, #20
 80097f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3314      	adds	r3, #20
 8009812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009816:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009818:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800981c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800981e:	e841 2300 	strex	r3, r2, [r1]
 8009822:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e3      	bne.n	80097f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2220      	movs	r2, #32
 800982e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	330c      	adds	r3, #12
 800983e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009842:	e853 3f00 	ldrex	r3, [r3]
 8009846:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800984a:	f023 0310 	bic.w	r3, r3, #16
 800984e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	330c      	adds	r3, #12
 8009858:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800985c:	65ba      	str	r2, [r7, #88]	; 0x58
 800985e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009862:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009864:	e841 2300 	strex	r3, r2, [r1]
 8009868:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800986a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1e3      	bne.n	8009838 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009874:	4618      	mov	r0, r3
 8009876:	f7fc f87a 	bl	800596e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2202      	movs	r2, #2
 800987e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009888:	b29b      	uxth	r3, r3
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	b29b      	uxth	r3, r3
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f8b7 	bl	8009a04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009896:	e09b      	b.n	80099d0 <HAL_UART_IRQHandler+0x518>
 8009898:	08009c09 	.word	0x08009c09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 808e 	beq.w	80099d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80098b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 8089 	beq.w	80099d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	330c      	adds	r3, #12
 80098c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098cc:	e853 3f00 	ldrex	r3, [r3]
 80098d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	330c      	adds	r3, #12
 80098e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80098e6:	647a      	str	r2, [r7, #68]	; 0x44
 80098e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1e3      	bne.n	80098c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3314      	adds	r3, #20
 8009900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	e853 3f00 	ldrex	r3, [r3]
 8009908:	623b      	str	r3, [r7, #32]
   return(result);
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	f023 0301 	bic.w	r3, r3, #1
 8009910:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3314      	adds	r3, #20
 800991a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800991e:	633a      	str	r2, [r7, #48]	; 0x30
 8009920:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009926:	e841 2300 	strex	r3, r2, [r1]
 800992a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1e3      	bne.n	80098fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2220      	movs	r2, #32
 8009936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	330c      	adds	r3, #12
 8009946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f023 0310 	bic.w	r3, r3, #16
 8009956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	330c      	adds	r3, #12
 8009960:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009964:	61fa      	str	r2, [r7, #28]
 8009966:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	69b9      	ldr	r1, [r7, #24]
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	617b      	str	r3, [r7, #20]
   return(result);
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e3      	bne.n	8009940 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800997e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f83d 	bl	8009a04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800998a:	e023      	b.n	80099d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800998c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009994:	2b00      	cmp	r3, #0
 8009996:	d009      	beq.n	80099ac <HAL_UART_IRQHandler+0x4f4>
 8009998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800999c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f943 	bl	8009c30 <UART_Transmit_IT>
    return;
 80099aa:	e014      	b.n	80099d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00e      	beq.n	80099d6 <HAL_UART_IRQHandler+0x51e>
 80099b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d008      	beq.n	80099d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f983 	bl	8009cd0 <UART_EndTransmit_IT>
    return;
 80099ca:	e004      	b.n	80099d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80099cc:	bf00      	nop
 80099ce:	e002      	b.n	80099d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80099d0:	bf00      	nop
 80099d2:	e000      	b.n	80099d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80099d4:	bf00      	nop
  }
}
 80099d6:	37e8      	adds	r7, #232	; 0xe8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	603b      	str	r3, [r7, #0]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a2c:	e03b      	b.n	8009aa6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a34:	d037      	beq.n	8009aa6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a36:	f7fb fe59 	bl	80056ec <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	6a3a      	ldr	r2, [r7, #32]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d302      	bcc.n	8009a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d101      	bne.n	8009a50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	e03a      	b.n	8009ac6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f003 0304 	and.w	r3, r3, #4
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d023      	beq.n	8009aa6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2b80      	cmp	r3, #128	; 0x80
 8009a62:	d020      	beq.n	8009aa6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2b40      	cmp	r3, #64	; 0x40
 8009a68:	d01d      	beq.n	8009aa6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0308 	and.w	r3, r3, #8
 8009a74:	2b08      	cmp	r3, #8
 8009a76:	d116      	bne.n	8009aa6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009a78:	2300      	movs	r3, #0
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	617b      	str	r3, [r7, #20]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	617b      	str	r3, [r7, #20]
 8009a8c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 f857 	bl	8009b42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2208      	movs	r2, #8
 8009a98:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e00f      	b.n	8009ac6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	4013      	ands	r3, r2
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	bf0c      	ite	eq
 8009ab6:	2301      	moveq	r3, #1
 8009ab8:	2300      	movne	r3, #0
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	461a      	mov	r2, r3
 8009abe:	79fb      	ldrb	r3, [r7, #7]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d0b4      	beq.n	8009a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b085      	sub	sp, #20
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	60f8      	str	r0, [r7, #12]
 8009ad6:	60b9      	str	r1, [r7, #8]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	88fa      	ldrh	r2, [r7, #6]
 8009ae6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	88fa      	ldrh	r2, [r7, #6]
 8009aec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2222      	movs	r2, #34	; 0x22
 8009af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d007      	beq.n	8009b14 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b12:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	695a      	ldr	r2, [r3, #20]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f042 0201 	orr.w	r2, r2, #1
 8009b22:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68da      	ldr	r2, [r3, #12]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f042 0220 	orr.w	r2, r2, #32
 8009b32:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b095      	sub	sp, #84	; 0x54
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	330c      	adds	r3, #12
 8009b50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	330c      	adds	r3, #12
 8009b68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b6a:	643a      	str	r2, [r7, #64]	; 0x40
 8009b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b72:	e841 2300 	strex	r3, r2, [r1]
 8009b76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e5      	bne.n	8009b4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3314      	adds	r3, #20
 8009b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	e853 3f00 	ldrex	r3, [r3]
 8009b8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	f023 0301 	bic.w	r3, r3, #1
 8009b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3314      	adds	r3, #20
 8009b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ba6:	e841 2300 	strex	r3, r2, [r1]
 8009baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e5      	bne.n	8009b7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d119      	bne.n	8009bee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	330c      	adds	r3, #12
 8009bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	e853 3f00 	ldrex	r3, [r3]
 8009bc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	f023 0310 	bic.w	r3, r3, #16
 8009bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	330c      	adds	r3, #12
 8009bd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bda:	61ba      	str	r2, [r7, #24]
 8009bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bde:	6979      	ldr	r1, [r7, #20]
 8009be0:	69ba      	ldr	r2, [r7, #24]
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	613b      	str	r3, [r7, #16]
   return(result);
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e5      	bne.n	8009bba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009bfc:	bf00      	nop
 8009bfe:	3754      	adds	r7, #84	; 0x54
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f7ff fee4 	bl	80099f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c28:	bf00      	nop
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b21      	cmp	r3, #33	; 0x21
 8009c42:	d13e      	bne.n	8009cc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c4c:	d114      	bne.n	8009c78 <UART_Transmit_IT+0x48>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d110      	bne.n	8009c78 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	461a      	mov	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	1c9a      	adds	r2, r3, #2
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	621a      	str	r2, [r3, #32]
 8009c76:	e008      	b.n	8009c8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a1b      	ldr	r3, [r3, #32]
 8009c7c:	1c59      	adds	r1, r3, #1
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	6211      	str	r1, [r2, #32]
 8009c82:	781a      	ldrb	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	3b01      	subs	r3, #1
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	4619      	mov	r1, r3
 8009c98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10f      	bne.n	8009cbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68da      	ldr	r2, [r3, #12]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009cac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68da      	ldr	r2, [r3, #12]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	e000      	b.n	8009cc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009cc2:	2302      	movs	r3, #2
  }
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68da      	ldr	r2, [r3, #12]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ce6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2220      	movs	r2, #32
 8009cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7ff fe73 	bl	80099dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08c      	sub	sp, #48	; 0x30
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b22      	cmp	r3, #34	; 0x22
 8009d12:	f040 80ae 	bne.w	8009e72 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d1e:	d117      	bne.n	8009d50 <UART_Receive_IT+0x50>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d113      	bne.n	8009d50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d30:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d48:	1c9a      	adds	r2, r3, #2
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	629a      	str	r2, [r3, #40]	; 0x28
 8009d4e:	e026      	b.n	8009d9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d62:	d007      	beq.n	8009d74 <UART_Receive_IT+0x74>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10a      	bne.n	8009d82 <UART_Receive_IT+0x82>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d106      	bne.n	8009d82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	701a      	strb	r2, [r3, #0]
 8009d80:	e008      	b.n	8009d94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	3b01      	subs	r3, #1
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	4619      	mov	r1, r3
 8009dac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d15d      	bne.n	8009e6e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 0220 	bic.w	r2, r2, #32
 8009dc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68da      	ldr	r2, [r3, #12]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009dd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	695a      	ldr	r2, [r3, #20]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 0201 	bic.w	r2, r2, #1
 8009de0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2220      	movs	r2, #32
 8009de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d135      	bne.n	8009e64 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	330c      	adds	r3, #12
 8009e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	e853 3f00 	ldrex	r3, [r3]
 8009e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f023 0310 	bic.w	r3, r3, #16
 8009e14:	627b      	str	r3, [r7, #36]	; 0x24
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	330c      	adds	r3, #12
 8009e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e1e:	623a      	str	r2, [r7, #32]
 8009e20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e22:	69f9      	ldr	r1, [r7, #28]
 8009e24:	6a3a      	ldr	r2, [r7, #32]
 8009e26:	e841 2300 	strex	r3, r2, [r1]
 8009e2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e5      	bne.n	8009dfe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0310 	and.w	r3, r3, #16
 8009e3c:	2b10      	cmp	r3, #16
 8009e3e:	d10a      	bne.n	8009e56 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e40:	2300      	movs	r3, #0
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	60fb      	str	r3, [r7, #12]
 8009e54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff fdd1 	bl	8009a04 <HAL_UARTEx_RxEventCallback>
 8009e62:	e002      	b.n	8009e6a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7f8 fb5f 	bl	8002528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e002      	b.n	8009e74 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e000      	b.n	8009e74 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009e72:	2302      	movs	r3, #2
  }
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3730      	adds	r7, #48	; 0x30
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e80:	b0c0      	sub	sp, #256	; 0x100
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e98:	68d9      	ldr	r1, [r3, #12]
 8009e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	ea40 0301 	orr.w	r3, r0, r1
 8009ea4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	431a      	orrs	r2, r3
 8009ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009ed4:	f021 010c 	bic.w	r1, r1, #12
 8009ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ee2:	430b      	orrs	r3, r1
 8009ee4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef6:	6999      	ldr	r1, [r3, #24]
 8009ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	ea40 0301 	orr.w	r3, r0, r1
 8009f02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	4b8f      	ldr	r3, [pc, #572]	; (800a148 <UART_SetConfig+0x2cc>)
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d005      	beq.n	8009f1c <UART_SetConfig+0xa0>
 8009f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	4b8d      	ldr	r3, [pc, #564]	; (800a14c <UART_SetConfig+0x2d0>)
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d104      	bne.n	8009f26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f1c:	f7fe f8bc 	bl	8008098 <HAL_RCC_GetPCLK2Freq>
 8009f20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009f24:	e003      	b.n	8009f2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f26:	f7fe f8a3 	bl	8008070 <HAL_RCC_GetPCLK1Freq>
 8009f2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f32:	69db      	ldr	r3, [r3, #28]
 8009f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f38:	f040 810c 	bne.w	800a154 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f40:	2200      	movs	r2, #0
 8009f42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009f4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009f4e:	4622      	mov	r2, r4
 8009f50:	462b      	mov	r3, r5
 8009f52:	1891      	adds	r1, r2, r2
 8009f54:	65b9      	str	r1, [r7, #88]	; 0x58
 8009f56:	415b      	adcs	r3, r3
 8009f58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009f5e:	4621      	mov	r1, r4
 8009f60:	eb12 0801 	adds.w	r8, r2, r1
 8009f64:	4629      	mov	r1, r5
 8009f66:	eb43 0901 	adc.w	r9, r3, r1
 8009f6a:	f04f 0200 	mov.w	r2, #0
 8009f6e:	f04f 0300 	mov.w	r3, #0
 8009f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f7e:	4690      	mov	r8, r2
 8009f80:	4699      	mov	r9, r3
 8009f82:	4623      	mov	r3, r4
 8009f84:	eb18 0303 	adds.w	r3, r8, r3
 8009f88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f8c:	462b      	mov	r3, r5
 8009f8e:	eb49 0303 	adc.w	r3, r9, r3
 8009f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009fa2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009fa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009faa:	460b      	mov	r3, r1
 8009fac:	18db      	adds	r3, r3, r3
 8009fae:	653b      	str	r3, [r7, #80]	; 0x50
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	eb42 0303 	adc.w	r3, r2, r3
 8009fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8009fb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009fbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009fc0:	f7f6 ff68 	bl	8000e94 <__aeabi_uldivmod>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4b61      	ldr	r3, [pc, #388]	; (800a150 <UART_SetConfig+0x2d4>)
 8009fca:	fba3 2302 	umull	r2, r3, r3, r2
 8009fce:	095b      	lsrs	r3, r3, #5
 8009fd0:	011c      	lsls	r4, r3, #4
 8009fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009fdc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009fe0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009fe4:	4642      	mov	r2, r8
 8009fe6:	464b      	mov	r3, r9
 8009fe8:	1891      	adds	r1, r2, r2
 8009fea:	64b9      	str	r1, [r7, #72]	; 0x48
 8009fec:	415b      	adcs	r3, r3
 8009fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ff0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ff4:	4641      	mov	r1, r8
 8009ff6:	eb12 0a01 	adds.w	sl, r2, r1
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	eb43 0b01 	adc.w	fp, r3, r1
 800a000:	f04f 0200 	mov.w	r2, #0
 800a004:	f04f 0300 	mov.w	r3, #0
 800a008:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a00c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a010:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a014:	4692      	mov	sl, r2
 800a016:	469b      	mov	fp, r3
 800a018:	4643      	mov	r3, r8
 800a01a:	eb1a 0303 	adds.w	r3, sl, r3
 800a01e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a022:	464b      	mov	r3, r9
 800a024:	eb4b 0303 	adc.w	r3, fp, r3
 800a028:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a02c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a038:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a03c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a040:	460b      	mov	r3, r1
 800a042:	18db      	adds	r3, r3, r3
 800a044:	643b      	str	r3, [r7, #64]	; 0x40
 800a046:	4613      	mov	r3, r2
 800a048:	eb42 0303 	adc.w	r3, r2, r3
 800a04c:	647b      	str	r3, [r7, #68]	; 0x44
 800a04e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a052:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a056:	f7f6 ff1d 	bl	8000e94 <__aeabi_uldivmod>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4611      	mov	r1, r2
 800a060:	4b3b      	ldr	r3, [pc, #236]	; (800a150 <UART_SetConfig+0x2d4>)
 800a062:	fba3 2301 	umull	r2, r3, r3, r1
 800a066:	095b      	lsrs	r3, r3, #5
 800a068:	2264      	movs	r2, #100	; 0x64
 800a06a:	fb02 f303 	mul.w	r3, r2, r3
 800a06e:	1acb      	subs	r3, r1, r3
 800a070:	00db      	lsls	r3, r3, #3
 800a072:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a076:	4b36      	ldr	r3, [pc, #216]	; (800a150 <UART_SetConfig+0x2d4>)
 800a078:	fba3 2302 	umull	r2, r3, r3, r2
 800a07c:	095b      	lsrs	r3, r3, #5
 800a07e:	005b      	lsls	r3, r3, #1
 800a080:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a084:	441c      	add	r4, r3
 800a086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a090:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a094:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a098:	4642      	mov	r2, r8
 800a09a:	464b      	mov	r3, r9
 800a09c:	1891      	adds	r1, r2, r2
 800a09e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a0a0:	415b      	adcs	r3, r3
 800a0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a0a8:	4641      	mov	r1, r8
 800a0aa:	1851      	adds	r1, r2, r1
 800a0ac:	6339      	str	r1, [r7, #48]	; 0x30
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	414b      	adcs	r3, r1
 800a0b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a0b4:	f04f 0200 	mov.w	r2, #0
 800a0b8:	f04f 0300 	mov.w	r3, #0
 800a0bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a0c0:	4659      	mov	r1, fp
 800a0c2:	00cb      	lsls	r3, r1, #3
 800a0c4:	4651      	mov	r1, sl
 800a0c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0ca:	4651      	mov	r1, sl
 800a0cc:	00ca      	lsls	r2, r1, #3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	4642      	mov	r2, r8
 800a0d6:	189b      	adds	r3, r3, r2
 800a0d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0dc:	464b      	mov	r3, r9
 800a0de:	460a      	mov	r2, r1
 800a0e0:	eb42 0303 	adc.w	r3, r2, r3
 800a0e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a0f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a0f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	18db      	adds	r3, r3, r3
 800a100:	62bb      	str	r3, [r7, #40]	; 0x28
 800a102:	4613      	mov	r3, r2
 800a104:	eb42 0303 	adc.w	r3, r2, r3
 800a108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a10a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a10e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a112:	f7f6 febf 	bl	8000e94 <__aeabi_uldivmod>
 800a116:	4602      	mov	r2, r0
 800a118:	460b      	mov	r3, r1
 800a11a:	4b0d      	ldr	r3, [pc, #52]	; (800a150 <UART_SetConfig+0x2d4>)
 800a11c:	fba3 1302 	umull	r1, r3, r3, r2
 800a120:	095b      	lsrs	r3, r3, #5
 800a122:	2164      	movs	r1, #100	; 0x64
 800a124:	fb01 f303 	mul.w	r3, r1, r3
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	3332      	adds	r3, #50	; 0x32
 800a12e:	4a08      	ldr	r2, [pc, #32]	; (800a150 <UART_SetConfig+0x2d4>)
 800a130:	fba2 2303 	umull	r2, r3, r2, r3
 800a134:	095b      	lsrs	r3, r3, #5
 800a136:	f003 0207 	and.w	r2, r3, #7
 800a13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4422      	add	r2, r4
 800a142:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a144:	e106      	b.n	800a354 <UART_SetConfig+0x4d8>
 800a146:	bf00      	nop
 800a148:	40011000 	.word	0x40011000
 800a14c:	40011400 	.word	0x40011400
 800a150:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a158:	2200      	movs	r2, #0
 800a15a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a15e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a162:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a166:	4642      	mov	r2, r8
 800a168:	464b      	mov	r3, r9
 800a16a:	1891      	adds	r1, r2, r2
 800a16c:	6239      	str	r1, [r7, #32]
 800a16e:	415b      	adcs	r3, r3
 800a170:	627b      	str	r3, [r7, #36]	; 0x24
 800a172:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a176:	4641      	mov	r1, r8
 800a178:	1854      	adds	r4, r2, r1
 800a17a:	4649      	mov	r1, r9
 800a17c:	eb43 0501 	adc.w	r5, r3, r1
 800a180:	f04f 0200 	mov.w	r2, #0
 800a184:	f04f 0300 	mov.w	r3, #0
 800a188:	00eb      	lsls	r3, r5, #3
 800a18a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a18e:	00e2      	lsls	r2, r4, #3
 800a190:	4614      	mov	r4, r2
 800a192:	461d      	mov	r5, r3
 800a194:	4643      	mov	r3, r8
 800a196:	18e3      	adds	r3, r4, r3
 800a198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a19c:	464b      	mov	r3, r9
 800a19e:	eb45 0303 	adc.w	r3, r5, r3
 800a1a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a1a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a1b6:	f04f 0200 	mov.w	r2, #0
 800a1ba:	f04f 0300 	mov.w	r3, #0
 800a1be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	008b      	lsls	r3, r1, #2
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	008a      	lsls	r2, r1, #2
 800a1d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a1d4:	f7f6 fe5e 	bl	8000e94 <__aeabi_uldivmod>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4b60      	ldr	r3, [pc, #384]	; (800a360 <UART_SetConfig+0x4e4>)
 800a1de:	fba3 2302 	umull	r2, r3, r3, r2
 800a1e2:	095b      	lsrs	r3, r3, #5
 800a1e4:	011c      	lsls	r4, r3, #4
 800a1e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a1f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a1f8:	4642      	mov	r2, r8
 800a1fa:	464b      	mov	r3, r9
 800a1fc:	1891      	adds	r1, r2, r2
 800a1fe:	61b9      	str	r1, [r7, #24]
 800a200:	415b      	adcs	r3, r3
 800a202:	61fb      	str	r3, [r7, #28]
 800a204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a208:	4641      	mov	r1, r8
 800a20a:	1851      	adds	r1, r2, r1
 800a20c:	6139      	str	r1, [r7, #16]
 800a20e:	4649      	mov	r1, r9
 800a210:	414b      	adcs	r3, r1
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	f04f 0200 	mov.w	r2, #0
 800a218:	f04f 0300 	mov.w	r3, #0
 800a21c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a220:	4659      	mov	r1, fp
 800a222:	00cb      	lsls	r3, r1, #3
 800a224:	4651      	mov	r1, sl
 800a226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a22a:	4651      	mov	r1, sl
 800a22c:	00ca      	lsls	r2, r1, #3
 800a22e:	4610      	mov	r0, r2
 800a230:	4619      	mov	r1, r3
 800a232:	4603      	mov	r3, r0
 800a234:	4642      	mov	r2, r8
 800a236:	189b      	adds	r3, r3, r2
 800a238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a23c:	464b      	mov	r3, r9
 800a23e:	460a      	mov	r2, r1
 800a240:	eb42 0303 	adc.w	r3, r2, r3
 800a244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	67bb      	str	r3, [r7, #120]	; 0x78
 800a252:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a254:	f04f 0200 	mov.w	r2, #0
 800a258:	f04f 0300 	mov.w	r3, #0
 800a25c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a260:	4649      	mov	r1, r9
 800a262:	008b      	lsls	r3, r1, #2
 800a264:	4641      	mov	r1, r8
 800a266:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a26a:	4641      	mov	r1, r8
 800a26c:	008a      	lsls	r2, r1, #2
 800a26e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a272:	f7f6 fe0f 	bl	8000e94 <__aeabi_uldivmod>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	4611      	mov	r1, r2
 800a27c:	4b38      	ldr	r3, [pc, #224]	; (800a360 <UART_SetConfig+0x4e4>)
 800a27e:	fba3 2301 	umull	r2, r3, r3, r1
 800a282:	095b      	lsrs	r3, r3, #5
 800a284:	2264      	movs	r2, #100	; 0x64
 800a286:	fb02 f303 	mul.w	r3, r2, r3
 800a28a:	1acb      	subs	r3, r1, r3
 800a28c:	011b      	lsls	r3, r3, #4
 800a28e:	3332      	adds	r3, #50	; 0x32
 800a290:	4a33      	ldr	r2, [pc, #204]	; (800a360 <UART_SetConfig+0x4e4>)
 800a292:	fba2 2303 	umull	r2, r3, r2, r3
 800a296:	095b      	lsrs	r3, r3, #5
 800a298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a29c:	441c      	add	r4, r3
 800a29e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	673b      	str	r3, [r7, #112]	; 0x70
 800a2a6:	677a      	str	r2, [r7, #116]	; 0x74
 800a2a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a2ac:	4642      	mov	r2, r8
 800a2ae:	464b      	mov	r3, r9
 800a2b0:	1891      	adds	r1, r2, r2
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	415b      	adcs	r3, r3
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2bc:	4641      	mov	r1, r8
 800a2be:	1851      	adds	r1, r2, r1
 800a2c0:	6039      	str	r1, [r7, #0]
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	414b      	adcs	r3, r1
 800a2c6:	607b      	str	r3, [r7, #4]
 800a2c8:	f04f 0200 	mov.w	r2, #0
 800a2cc:	f04f 0300 	mov.w	r3, #0
 800a2d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a2d4:	4659      	mov	r1, fp
 800a2d6:	00cb      	lsls	r3, r1, #3
 800a2d8:	4651      	mov	r1, sl
 800a2da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2de:	4651      	mov	r1, sl
 800a2e0:	00ca      	lsls	r2, r1, #3
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	4642      	mov	r2, r8
 800a2ea:	189b      	adds	r3, r3, r2
 800a2ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2ee:	464b      	mov	r3, r9
 800a2f0:	460a      	mov	r2, r1
 800a2f2:	eb42 0303 	adc.w	r3, r2, r3
 800a2f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	663b      	str	r3, [r7, #96]	; 0x60
 800a302:	667a      	str	r2, [r7, #100]	; 0x64
 800a304:	f04f 0200 	mov.w	r2, #0
 800a308:	f04f 0300 	mov.w	r3, #0
 800a30c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a310:	4649      	mov	r1, r9
 800a312:	008b      	lsls	r3, r1, #2
 800a314:	4641      	mov	r1, r8
 800a316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a31a:	4641      	mov	r1, r8
 800a31c:	008a      	lsls	r2, r1, #2
 800a31e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a322:	f7f6 fdb7 	bl	8000e94 <__aeabi_uldivmod>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4b0d      	ldr	r3, [pc, #52]	; (800a360 <UART_SetConfig+0x4e4>)
 800a32c:	fba3 1302 	umull	r1, r3, r3, r2
 800a330:	095b      	lsrs	r3, r3, #5
 800a332:	2164      	movs	r1, #100	; 0x64
 800a334:	fb01 f303 	mul.w	r3, r1, r3
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	011b      	lsls	r3, r3, #4
 800a33c:	3332      	adds	r3, #50	; 0x32
 800a33e:	4a08      	ldr	r2, [pc, #32]	; (800a360 <UART_SetConfig+0x4e4>)
 800a340:	fba2 2303 	umull	r2, r3, r2, r3
 800a344:	095b      	lsrs	r3, r3, #5
 800a346:	f003 020f 	and.w	r2, r3, #15
 800a34a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4422      	add	r2, r4
 800a352:	609a      	str	r2, [r3, #8]
}
 800a354:	bf00      	nop
 800a356:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a35a:	46bd      	mov	sp, r7
 800a35c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a360:	51eb851f 	.word	0x51eb851f

0800a364 <asin>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	ed2d 8b02 	vpush	{d8}
 800a36a:	ec55 4b10 	vmov	r4, r5, d0
 800a36e:	f000 fc83 	bl	800ac78 <__ieee754_asin>
 800a372:	4622      	mov	r2, r4
 800a374:	462b      	mov	r3, r5
 800a376:	4620      	mov	r0, r4
 800a378:	4629      	mov	r1, r5
 800a37a:	eeb0 8a40 	vmov.f32	s16, s0
 800a37e:	eef0 8a60 	vmov.f32	s17, s1
 800a382:	f7f6 fbcb 	bl	8000b1c <__aeabi_dcmpun>
 800a386:	b9a8      	cbnz	r0, 800a3b4 <asin+0x50>
 800a388:	ec45 4b10 	vmov	d0, r4, r5
 800a38c:	f000 f8ea 	bl	800a564 <fabs>
 800a390:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <asin+0x60>)
 800a392:	ec51 0b10 	vmov	r0, r1, d0
 800a396:	2200      	movs	r2, #0
 800a398:	f7f6 fbb6 	bl	8000b08 <__aeabi_dcmpgt>
 800a39c:	b150      	cbz	r0, 800a3b4 <asin+0x50>
 800a39e:	f004 fb91 	bl	800eac4 <__errno>
 800a3a2:	ecbd 8b02 	vpop	{d8}
 800a3a6:	2321      	movs	r3, #33	; 0x21
 800a3a8:	6003      	str	r3, [r0, #0]
 800a3aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3ae:	4806      	ldr	r0, [pc, #24]	; (800a3c8 <asin+0x64>)
 800a3b0:	f000 b9f2 	b.w	800a798 <nan>
 800a3b4:	eeb0 0a48 	vmov.f32	s0, s16
 800a3b8:	eef0 0a68 	vmov.f32	s1, s17
 800a3bc:	ecbd 8b02 	vpop	{d8}
 800a3c0:	bd38      	pop	{r3, r4, r5, pc}
 800a3c2:	bf00      	nop
 800a3c4:	3ff00000 	.word	0x3ff00000
 800a3c8:	08011290 	.word	0x08011290

0800a3cc <atan2>:
 800a3cc:	f000 be68 	b.w	800b0a0 <__ieee754_atan2>

0800a3d0 <fmod>:
 800a3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d2:	ed2d 8b02 	vpush	{d8}
 800a3d6:	ec57 6b10 	vmov	r6, r7, d0
 800a3da:	ec55 4b11 	vmov	r4, r5, d1
 800a3de:	f000 ff25 	bl	800b22c <__ieee754_fmod>
 800a3e2:	4622      	mov	r2, r4
 800a3e4:	462b      	mov	r3, r5
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	4639      	mov	r1, r7
 800a3ea:	eeb0 8a40 	vmov.f32	s16, s0
 800a3ee:	eef0 8a60 	vmov.f32	s17, s1
 800a3f2:	f7f6 fb93 	bl	8000b1c <__aeabi_dcmpun>
 800a3f6:	b990      	cbnz	r0, 800a41e <fmod+0x4e>
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	4629      	mov	r1, r5
 800a400:	f7f6 fb5a 	bl	8000ab8 <__aeabi_dcmpeq>
 800a404:	b158      	cbz	r0, 800a41e <fmod+0x4e>
 800a406:	f004 fb5d 	bl	800eac4 <__errno>
 800a40a:	2321      	movs	r3, #33	; 0x21
 800a40c:	6003      	str	r3, [r0, #0]
 800a40e:	2200      	movs	r2, #0
 800a410:	2300      	movs	r3, #0
 800a412:	4610      	mov	r0, r2
 800a414:	4619      	mov	r1, r3
 800a416:	f7f6 fa11 	bl	800083c <__aeabi_ddiv>
 800a41a:	ec41 0b18 	vmov	d8, r0, r1
 800a41e:	eeb0 0a48 	vmov.f32	s0, s16
 800a422:	eef0 0a68 	vmov.f32	s1, s17
 800a426:	ecbd 8b02 	vpop	{d8}
 800a42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a42c <pow>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	ed2d 8b02 	vpush	{d8}
 800a432:	eeb0 8a40 	vmov.f32	s16, s0
 800a436:	eef0 8a60 	vmov.f32	s17, s1
 800a43a:	ec55 4b11 	vmov	r4, r5, d1
 800a43e:	f001 f803 	bl	800b448 <__ieee754_pow>
 800a442:	4622      	mov	r2, r4
 800a444:	462b      	mov	r3, r5
 800a446:	4620      	mov	r0, r4
 800a448:	4629      	mov	r1, r5
 800a44a:	ec57 6b10 	vmov	r6, r7, d0
 800a44e:	f7f6 fb65 	bl	8000b1c <__aeabi_dcmpun>
 800a452:	2800      	cmp	r0, #0
 800a454:	d13b      	bne.n	800a4ce <pow+0xa2>
 800a456:	ec51 0b18 	vmov	r0, r1, d8
 800a45a:	2200      	movs	r2, #0
 800a45c:	2300      	movs	r3, #0
 800a45e:	f7f6 fb2b 	bl	8000ab8 <__aeabi_dcmpeq>
 800a462:	b1b8      	cbz	r0, 800a494 <pow+0x68>
 800a464:	2200      	movs	r2, #0
 800a466:	2300      	movs	r3, #0
 800a468:	4620      	mov	r0, r4
 800a46a:	4629      	mov	r1, r5
 800a46c:	f7f6 fb24 	bl	8000ab8 <__aeabi_dcmpeq>
 800a470:	2800      	cmp	r0, #0
 800a472:	d146      	bne.n	800a502 <pow+0xd6>
 800a474:	ec45 4b10 	vmov	d0, r4, r5
 800a478:	f000 f980 	bl	800a77c <finite>
 800a47c:	b338      	cbz	r0, 800a4ce <pow+0xa2>
 800a47e:	2200      	movs	r2, #0
 800a480:	2300      	movs	r3, #0
 800a482:	4620      	mov	r0, r4
 800a484:	4629      	mov	r1, r5
 800a486:	f7f6 fb21 	bl	8000acc <__aeabi_dcmplt>
 800a48a:	b300      	cbz	r0, 800a4ce <pow+0xa2>
 800a48c:	f004 fb1a 	bl	800eac4 <__errno>
 800a490:	2322      	movs	r3, #34	; 0x22
 800a492:	e01b      	b.n	800a4cc <pow+0xa0>
 800a494:	ec47 6b10 	vmov	d0, r6, r7
 800a498:	f000 f970 	bl	800a77c <finite>
 800a49c:	b9e0      	cbnz	r0, 800a4d8 <pow+0xac>
 800a49e:	eeb0 0a48 	vmov.f32	s0, s16
 800a4a2:	eef0 0a68 	vmov.f32	s1, s17
 800a4a6:	f000 f969 	bl	800a77c <finite>
 800a4aa:	b1a8      	cbz	r0, 800a4d8 <pow+0xac>
 800a4ac:	ec45 4b10 	vmov	d0, r4, r5
 800a4b0:	f000 f964 	bl	800a77c <finite>
 800a4b4:	b180      	cbz	r0, 800a4d8 <pow+0xac>
 800a4b6:	4632      	mov	r2, r6
 800a4b8:	463b      	mov	r3, r7
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	4639      	mov	r1, r7
 800a4be:	f7f6 fb2d 	bl	8000b1c <__aeabi_dcmpun>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d0e2      	beq.n	800a48c <pow+0x60>
 800a4c6:	f004 fafd 	bl	800eac4 <__errno>
 800a4ca:	2321      	movs	r3, #33	; 0x21
 800a4cc:	6003      	str	r3, [r0, #0]
 800a4ce:	ecbd 8b02 	vpop	{d8}
 800a4d2:	ec47 6b10 	vmov	d0, r6, r7
 800a4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2300      	movs	r3, #0
 800a4dc:	4630      	mov	r0, r6
 800a4de:	4639      	mov	r1, r7
 800a4e0:	f7f6 faea 	bl	8000ab8 <__aeabi_dcmpeq>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d0f2      	beq.n	800a4ce <pow+0xa2>
 800a4e8:	eeb0 0a48 	vmov.f32	s0, s16
 800a4ec:	eef0 0a68 	vmov.f32	s1, s17
 800a4f0:	f000 f944 	bl	800a77c <finite>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d0ea      	beq.n	800a4ce <pow+0xa2>
 800a4f8:	ec45 4b10 	vmov	d0, r4, r5
 800a4fc:	f000 f93e 	bl	800a77c <finite>
 800a500:	e7c3      	b.n	800a48a <pow+0x5e>
 800a502:	4f01      	ldr	r7, [pc, #4]	; (800a508 <pow+0xdc>)
 800a504:	2600      	movs	r6, #0
 800a506:	e7e2      	b.n	800a4ce <pow+0xa2>
 800a508:	3ff00000 	.word	0x3ff00000

0800a50c <sqrt>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	ed2d 8b02 	vpush	{d8}
 800a512:	ec55 4b10 	vmov	r4, r5, d0
 800a516:	f000 f947 	bl	800a7a8 <__ieee754_sqrt>
 800a51a:	4622      	mov	r2, r4
 800a51c:	462b      	mov	r3, r5
 800a51e:	4620      	mov	r0, r4
 800a520:	4629      	mov	r1, r5
 800a522:	eeb0 8a40 	vmov.f32	s16, s0
 800a526:	eef0 8a60 	vmov.f32	s17, s1
 800a52a:	f7f6 faf7 	bl	8000b1c <__aeabi_dcmpun>
 800a52e:	b990      	cbnz	r0, 800a556 <sqrt+0x4a>
 800a530:	2200      	movs	r2, #0
 800a532:	2300      	movs	r3, #0
 800a534:	4620      	mov	r0, r4
 800a536:	4629      	mov	r1, r5
 800a538:	f7f6 fac8 	bl	8000acc <__aeabi_dcmplt>
 800a53c:	b158      	cbz	r0, 800a556 <sqrt+0x4a>
 800a53e:	f004 fac1 	bl	800eac4 <__errno>
 800a542:	2321      	movs	r3, #33	; 0x21
 800a544:	6003      	str	r3, [r0, #0]
 800a546:	2200      	movs	r2, #0
 800a548:	2300      	movs	r3, #0
 800a54a:	4610      	mov	r0, r2
 800a54c:	4619      	mov	r1, r3
 800a54e:	f7f6 f975 	bl	800083c <__aeabi_ddiv>
 800a552:	ec41 0b18 	vmov	d8, r0, r1
 800a556:	eeb0 0a48 	vmov.f32	s0, s16
 800a55a:	eef0 0a68 	vmov.f32	s1, s17
 800a55e:	ecbd 8b02 	vpop	{d8}
 800a562:	bd38      	pop	{r3, r4, r5, pc}

0800a564 <fabs>:
 800a564:	ec51 0b10 	vmov	r0, r1, d0
 800a568:	ee10 2a10 	vmov	r2, s0
 800a56c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a570:	ec43 2b10 	vmov	d0, r2, r3
 800a574:	4770      	bx	lr
	...

0800a578 <sin>:
 800a578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a57a:	ec53 2b10 	vmov	r2, r3, d0
 800a57e:	4828      	ldr	r0, [pc, #160]	; (800a620 <sin+0xa8>)
 800a580:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a584:	4281      	cmp	r1, r0
 800a586:	dc07      	bgt.n	800a598 <sin+0x20>
 800a588:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a618 <sin+0xa0>
 800a58c:	2000      	movs	r0, #0
 800a58e:	b005      	add	sp, #20
 800a590:	f85d eb04 	ldr.w	lr, [sp], #4
 800a594:	f000 bab0 	b.w	800aaf8 <__kernel_sin>
 800a598:	4822      	ldr	r0, [pc, #136]	; (800a624 <sin+0xac>)
 800a59a:	4281      	cmp	r1, r0
 800a59c:	dd09      	ble.n	800a5b2 <sin+0x3a>
 800a59e:	ee10 0a10 	vmov	r0, s0
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	f7f5 fe68 	bl	8000278 <__aeabi_dsub>
 800a5a8:	ec41 0b10 	vmov	d0, r0, r1
 800a5ac:	b005      	add	sp, #20
 800a5ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5b2:	4668      	mov	r0, sp
 800a5b4:	f001 fc74 	bl	800bea0 <__ieee754_rem_pio2>
 800a5b8:	f000 0003 	and.w	r0, r0, #3
 800a5bc:	2801      	cmp	r0, #1
 800a5be:	d00c      	beq.n	800a5da <sin+0x62>
 800a5c0:	2802      	cmp	r0, #2
 800a5c2:	d011      	beq.n	800a5e8 <sin+0x70>
 800a5c4:	b9f0      	cbnz	r0, 800a604 <sin+0x8c>
 800a5c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5ca:	ed9d 0b00 	vldr	d0, [sp]
 800a5ce:	2001      	movs	r0, #1
 800a5d0:	f000 fa92 	bl	800aaf8 <__kernel_sin>
 800a5d4:	ec51 0b10 	vmov	r0, r1, d0
 800a5d8:	e7e6      	b.n	800a5a8 <sin+0x30>
 800a5da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5de:	ed9d 0b00 	vldr	d0, [sp]
 800a5e2:	f000 f9c1 	bl	800a968 <__kernel_cos>
 800a5e6:	e7f5      	b.n	800a5d4 <sin+0x5c>
 800a5e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5ec:	ed9d 0b00 	vldr	d0, [sp]
 800a5f0:	2001      	movs	r0, #1
 800a5f2:	f000 fa81 	bl	800aaf8 <__kernel_sin>
 800a5f6:	ec53 2b10 	vmov	r2, r3, d0
 800a5fa:	ee10 0a10 	vmov	r0, s0
 800a5fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a602:	e7d1      	b.n	800a5a8 <sin+0x30>
 800a604:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a608:	ed9d 0b00 	vldr	d0, [sp]
 800a60c:	f000 f9ac 	bl	800a968 <__kernel_cos>
 800a610:	e7f1      	b.n	800a5f6 <sin+0x7e>
 800a612:	bf00      	nop
 800a614:	f3af 8000 	nop.w
	...
 800a620:	3fe921fb 	.word	0x3fe921fb
 800a624:	7fefffff 	.word	0x7fefffff

0800a628 <atan2f>:
 800a628:	f002 b888 	b.w	800c73c <__ieee754_atan2f>

0800a62c <sqrtf>:
 800a62c:	b508      	push	{r3, lr}
 800a62e:	ed2d 8b02 	vpush	{d8}
 800a632:	eeb0 8a40 	vmov.f32	s16, s0
 800a636:	f000 f991 	bl	800a95c <__ieee754_sqrtf>
 800a63a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a642:	d60c      	bvs.n	800a65e <sqrtf+0x32>
 800a644:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a664 <sqrtf+0x38>
 800a648:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a650:	d505      	bpl.n	800a65e <sqrtf+0x32>
 800a652:	f004 fa37 	bl	800eac4 <__errno>
 800a656:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a65a:	2321      	movs	r3, #33	; 0x21
 800a65c:	6003      	str	r3, [r0, #0]
 800a65e:	ecbd 8b02 	vpop	{d8}
 800a662:	bd08      	pop	{r3, pc}
 800a664:	00000000 	.word	0x00000000

0800a668 <cosf>:
 800a668:	ee10 3a10 	vmov	r3, s0
 800a66c:	b507      	push	{r0, r1, r2, lr}
 800a66e:	4a1e      	ldr	r2, [pc, #120]	; (800a6e8 <cosf+0x80>)
 800a670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a674:	4293      	cmp	r3, r2
 800a676:	dc06      	bgt.n	800a686 <cosf+0x1e>
 800a678:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800a6ec <cosf+0x84>
 800a67c:	b003      	add	sp, #12
 800a67e:	f85d eb04 	ldr.w	lr, [sp], #4
 800a682:	f001 bfb5 	b.w	800c5f0 <__kernel_cosf>
 800a686:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a68a:	db04      	blt.n	800a696 <cosf+0x2e>
 800a68c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a690:	b003      	add	sp, #12
 800a692:	f85d fb04 	ldr.w	pc, [sp], #4
 800a696:	4668      	mov	r0, sp
 800a698:	f002 f8f0 	bl	800c87c <__ieee754_rem_pio2f>
 800a69c:	f000 0003 	and.w	r0, r0, #3
 800a6a0:	2801      	cmp	r0, #1
 800a6a2:	d009      	beq.n	800a6b8 <cosf+0x50>
 800a6a4:	2802      	cmp	r0, #2
 800a6a6:	d010      	beq.n	800a6ca <cosf+0x62>
 800a6a8:	b9b0      	cbnz	r0, 800a6d8 <cosf+0x70>
 800a6aa:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6ae:	ed9d 0a00 	vldr	s0, [sp]
 800a6b2:	f001 ff9d 	bl	800c5f0 <__kernel_cosf>
 800a6b6:	e7eb      	b.n	800a690 <cosf+0x28>
 800a6b8:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6bc:	ed9d 0a00 	vldr	s0, [sp]
 800a6c0:	f001 fff4 	bl	800c6ac <__kernel_sinf>
 800a6c4:	eeb1 0a40 	vneg.f32	s0, s0
 800a6c8:	e7e2      	b.n	800a690 <cosf+0x28>
 800a6ca:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6ce:	ed9d 0a00 	vldr	s0, [sp]
 800a6d2:	f001 ff8d 	bl	800c5f0 <__kernel_cosf>
 800a6d6:	e7f5      	b.n	800a6c4 <cosf+0x5c>
 800a6d8:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6dc:	ed9d 0a00 	vldr	s0, [sp]
 800a6e0:	2001      	movs	r0, #1
 800a6e2:	f001 ffe3 	bl	800c6ac <__kernel_sinf>
 800a6e6:	e7d3      	b.n	800a690 <cosf+0x28>
 800a6e8:	3f490fd8 	.word	0x3f490fd8
 800a6ec:	00000000 	.word	0x00000000

0800a6f0 <sinf>:
 800a6f0:	ee10 3a10 	vmov	r3, s0
 800a6f4:	b507      	push	{r0, r1, r2, lr}
 800a6f6:	4a1f      	ldr	r2, [pc, #124]	; (800a774 <sinf+0x84>)
 800a6f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	dc07      	bgt.n	800a710 <sinf+0x20>
 800a700:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a778 <sinf+0x88>
 800a704:	2000      	movs	r0, #0
 800a706:	b003      	add	sp, #12
 800a708:	f85d eb04 	ldr.w	lr, [sp], #4
 800a70c:	f001 bfce 	b.w	800c6ac <__kernel_sinf>
 800a710:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a714:	db04      	blt.n	800a720 <sinf+0x30>
 800a716:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a71a:	b003      	add	sp, #12
 800a71c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a720:	4668      	mov	r0, sp
 800a722:	f002 f8ab 	bl	800c87c <__ieee754_rem_pio2f>
 800a726:	f000 0003 	and.w	r0, r0, #3
 800a72a:	2801      	cmp	r0, #1
 800a72c:	d00a      	beq.n	800a744 <sinf+0x54>
 800a72e:	2802      	cmp	r0, #2
 800a730:	d00f      	beq.n	800a752 <sinf+0x62>
 800a732:	b9c0      	cbnz	r0, 800a766 <sinf+0x76>
 800a734:	eddd 0a01 	vldr	s1, [sp, #4]
 800a738:	ed9d 0a00 	vldr	s0, [sp]
 800a73c:	2001      	movs	r0, #1
 800a73e:	f001 ffb5 	bl	800c6ac <__kernel_sinf>
 800a742:	e7ea      	b.n	800a71a <sinf+0x2a>
 800a744:	eddd 0a01 	vldr	s1, [sp, #4]
 800a748:	ed9d 0a00 	vldr	s0, [sp]
 800a74c:	f001 ff50 	bl	800c5f0 <__kernel_cosf>
 800a750:	e7e3      	b.n	800a71a <sinf+0x2a>
 800a752:	eddd 0a01 	vldr	s1, [sp, #4]
 800a756:	ed9d 0a00 	vldr	s0, [sp]
 800a75a:	2001      	movs	r0, #1
 800a75c:	f001 ffa6 	bl	800c6ac <__kernel_sinf>
 800a760:	eeb1 0a40 	vneg.f32	s0, s0
 800a764:	e7d9      	b.n	800a71a <sinf+0x2a>
 800a766:	eddd 0a01 	vldr	s1, [sp, #4]
 800a76a:	ed9d 0a00 	vldr	s0, [sp]
 800a76e:	f001 ff3f 	bl	800c5f0 <__kernel_cosf>
 800a772:	e7f5      	b.n	800a760 <sinf+0x70>
 800a774:	3f490fd8 	.word	0x3f490fd8
 800a778:	00000000 	.word	0x00000000

0800a77c <finite>:
 800a77c:	b082      	sub	sp, #8
 800a77e:	ed8d 0b00 	vstr	d0, [sp]
 800a782:	9801      	ldr	r0, [sp, #4]
 800a784:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a788:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a78c:	0fc0      	lsrs	r0, r0, #31
 800a78e:	b002      	add	sp, #8
 800a790:	4770      	bx	lr
 800a792:	0000      	movs	r0, r0
 800a794:	0000      	movs	r0, r0
	...

0800a798 <nan>:
 800a798:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a7a0 <nan+0x8>
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	00000000 	.word	0x00000000
 800a7a4:	7ff80000 	.word	0x7ff80000

0800a7a8 <__ieee754_sqrt>:
 800a7a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	ec55 4b10 	vmov	r4, r5, d0
 800a7b0:	4e67      	ldr	r6, [pc, #412]	; (800a950 <__ieee754_sqrt+0x1a8>)
 800a7b2:	43ae      	bics	r6, r5
 800a7b4:	ee10 0a10 	vmov	r0, s0
 800a7b8:	ee10 2a10 	vmov	r2, s0
 800a7bc:	4629      	mov	r1, r5
 800a7be:	462b      	mov	r3, r5
 800a7c0:	d10d      	bne.n	800a7de <__ieee754_sqrt+0x36>
 800a7c2:	f7f5 ff11 	bl	80005e8 <__aeabi_dmul>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	f7f5 fd55 	bl	800027c <__adddf3>
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	460d      	mov	r5, r1
 800a7d6:	ec45 4b10 	vmov	d0, r4, r5
 800a7da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7de:	2d00      	cmp	r5, #0
 800a7e0:	dc0b      	bgt.n	800a7fa <__ieee754_sqrt+0x52>
 800a7e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a7e6:	4326      	orrs	r6, r4
 800a7e8:	d0f5      	beq.n	800a7d6 <__ieee754_sqrt+0x2e>
 800a7ea:	b135      	cbz	r5, 800a7fa <__ieee754_sqrt+0x52>
 800a7ec:	f7f5 fd44 	bl	8000278 <__aeabi_dsub>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	f7f6 f822 	bl	800083c <__aeabi_ddiv>
 800a7f8:	e7eb      	b.n	800a7d2 <__ieee754_sqrt+0x2a>
 800a7fa:	1509      	asrs	r1, r1, #20
 800a7fc:	f000 808d 	beq.w	800a91a <__ieee754_sqrt+0x172>
 800a800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a804:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a80c:	07c9      	lsls	r1, r1, #31
 800a80e:	bf5c      	itt	pl
 800a810:	005b      	lslpl	r3, r3, #1
 800a812:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a816:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a81a:	bf58      	it	pl
 800a81c:	0052      	lslpl	r2, r2, #1
 800a81e:	2500      	movs	r5, #0
 800a820:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a824:	1076      	asrs	r6, r6, #1
 800a826:	0052      	lsls	r2, r2, #1
 800a828:	f04f 0e16 	mov.w	lr, #22
 800a82c:	46ac      	mov	ip, r5
 800a82e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a832:	eb0c 0001 	add.w	r0, ip, r1
 800a836:	4298      	cmp	r0, r3
 800a838:	bfde      	ittt	le
 800a83a:	1a1b      	suble	r3, r3, r0
 800a83c:	eb00 0c01 	addle.w	ip, r0, r1
 800a840:	186d      	addle	r5, r5, r1
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	f1be 0e01 	subs.w	lr, lr, #1
 800a848:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a84c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a850:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a854:	d1ed      	bne.n	800a832 <__ieee754_sqrt+0x8a>
 800a856:	4674      	mov	r4, lr
 800a858:	2720      	movs	r7, #32
 800a85a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a85e:	4563      	cmp	r3, ip
 800a860:	eb01 000e 	add.w	r0, r1, lr
 800a864:	dc02      	bgt.n	800a86c <__ieee754_sqrt+0xc4>
 800a866:	d113      	bne.n	800a890 <__ieee754_sqrt+0xe8>
 800a868:	4290      	cmp	r0, r2
 800a86a:	d811      	bhi.n	800a890 <__ieee754_sqrt+0xe8>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	eb00 0e01 	add.w	lr, r0, r1
 800a872:	da57      	bge.n	800a924 <__ieee754_sqrt+0x17c>
 800a874:	f1be 0f00 	cmp.w	lr, #0
 800a878:	db54      	blt.n	800a924 <__ieee754_sqrt+0x17c>
 800a87a:	f10c 0801 	add.w	r8, ip, #1
 800a87e:	eba3 030c 	sub.w	r3, r3, ip
 800a882:	4290      	cmp	r0, r2
 800a884:	bf88      	it	hi
 800a886:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a88a:	1a12      	subs	r2, r2, r0
 800a88c:	440c      	add	r4, r1
 800a88e:	46c4      	mov	ip, r8
 800a890:	005b      	lsls	r3, r3, #1
 800a892:	3f01      	subs	r7, #1
 800a894:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a898:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a89c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a8a0:	d1dd      	bne.n	800a85e <__ieee754_sqrt+0xb6>
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	d01b      	beq.n	800a8de <__ieee754_sqrt+0x136>
 800a8a6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a954 <__ieee754_sqrt+0x1ac>
 800a8aa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a958 <__ieee754_sqrt+0x1b0>
 800a8ae:	e9da 0100 	ldrd	r0, r1, [sl]
 800a8b2:	e9db 2300 	ldrd	r2, r3, [fp]
 800a8b6:	f7f5 fcdf 	bl	8000278 <__aeabi_dsub>
 800a8ba:	e9da 8900 	ldrd	r8, r9, [sl]
 800a8be:	4602      	mov	r2, r0
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	4649      	mov	r1, r9
 800a8c6:	f7f6 f90b 	bl	8000ae0 <__aeabi_dcmple>
 800a8ca:	b140      	cbz	r0, 800a8de <__ieee754_sqrt+0x136>
 800a8cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a8d0:	e9da 0100 	ldrd	r0, r1, [sl]
 800a8d4:	e9db 2300 	ldrd	r2, r3, [fp]
 800a8d8:	d126      	bne.n	800a928 <__ieee754_sqrt+0x180>
 800a8da:	3501      	adds	r5, #1
 800a8dc:	463c      	mov	r4, r7
 800a8de:	106a      	asrs	r2, r5, #1
 800a8e0:	0863      	lsrs	r3, r4, #1
 800a8e2:	07e9      	lsls	r1, r5, #31
 800a8e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a8e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a8ec:	bf48      	it	mi
 800a8ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a8f2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a8f6:	461c      	mov	r4, r3
 800a8f8:	e76d      	b.n	800a7d6 <__ieee754_sqrt+0x2e>
 800a8fa:	0ad3      	lsrs	r3, r2, #11
 800a8fc:	3815      	subs	r0, #21
 800a8fe:	0552      	lsls	r2, r2, #21
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0fa      	beq.n	800a8fa <__ieee754_sqrt+0x152>
 800a904:	02dc      	lsls	r4, r3, #11
 800a906:	d50a      	bpl.n	800a91e <__ieee754_sqrt+0x176>
 800a908:	f1c1 0420 	rsb	r4, r1, #32
 800a90c:	fa22 f404 	lsr.w	r4, r2, r4
 800a910:	1e4d      	subs	r5, r1, #1
 800a912:	408a      	lsls	r2, r1
 800a914:	4323      	orrs	r3, r4
 800a916:	1b41      	subs	r1, r0, r5
 800a918:	e772      	b.n	800a800 <__ieee754_sqrt+0x58>
 800a91a:	4608      	mov	r0, r1
 800a91c:	e7f0      	b.n	800a900 <__ieee754_sqrt+0x158>
 800a91e:	005b      	lsls	r3, r3, #1
 800a920:	3101      	adds	r1, #1
 800a922:	e7ef      	b.n	800a904 <__ieee754_sqrt+0x15c>
 800a924:	46e0      	mov	r8, ip
 800a926:	e7aa      	b.n	800a87e <__ieee754_sqrt+0xd6>
 800a928:	f7f5 fca8 	bl	800027c <__adddf3>
 800a92c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	4640      	mov	r0, r8
 800a936:	4649      	mov	r1, r9
 800a938:	f7f6 f8c8 	bl	8000acc <__aeabi_dcmplt>
 800a93c:	b120      	cbz	r0, 800a948 <__ieee754_sqrt+0x1a0>
 800a93e:	1ca0      	adds	r0, r4, #2
 800a940:	bf08      	it	eq
 800a942:	3501      	addeq	r5, #1
 800a944:	3402      	adds	r4, #2
 800a946:	e7ca      	b.n	800a8de <__ieee754_sqrt+0x136>
 800a948:	3401      	adds	r4, #1
 800a94a:	f024 0401 	bic.w	r4, r4, #1
 800a94e:	e7c6      	b.n	800a8de <__ieee754_sqrt+0x136>
 800a950:	7ff00000 	.word	0x7ff00000
 800a954:	20000010 	.word	0x20000010
 800a958:	20000018 	.word	0x20000018

0800a95c <__ieee754_sqrtf>:
 800a95c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a960:	4770      	bx	lr
 800a962:	0000      	movs	r0, r0
 800a964:	0000      	movs	r0, r0
	...

0800a968 <__kernel_cos>:
 800a968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	ec57 6b10 	vmov	r6, r7, d0
 800a970:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a974:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a978:	ed8d 1b00 	vstr	d1, [sp]
 800a97c:	da07      	bge.n	800a98e <__kernel_cos+0x26>
 800a97e:	ee10 0a10 	vmov	r0, s0
 800a982:	4639      	mov	r1, r7
 800a984:	f7f6 f8e0 	bl	8000b48 <__aeabi_d2iz>
 800a988:	2800      	cmp	r0, #0
 800a98a:	f000 8088 	beq.w	800aa9e <__kernel_cos+0x136>
 800a98e:	4632      	mov	r2, r6
 800a990:	463b      	mov	r3, r7
 800a992:	4630      	mov	r0, r6
 800a994:	4639      	mov	r1, r7
 800a996:	f7f5 fe27 	bl	80005e8 <__aeabi_dmul>
 800a99a:	4b51      	ldr	r3, [pc, #324]	; (800aae0 <__kernel_cos+0x178>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	4604      	mov	r4, r0
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	f7f5 fe21 	bl	80005e8 <__aeabi_dmul>
 800a9a6:	a340      	add	r3, pc, #256	; (adr r3, 800aaa8 <__kernel_cos+0x140>)
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	4682      	mov	sl, r0
 800a9ae:	468b      	mov	fp, r1
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	4629      	mov	r1, r5
 800a9b4:	f7f5 fe18 	bl	80005e8 <__aeabi_dmul>
 800a9b8:	a33d      	add	r3, pc, #244	; (adr r3, 800aab0 <__kernel_cos+0x148>)
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	f7f5 fc5d 	bl	800027c <__adddf3>
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	462b      	mov	r3, r5
 800a9c6:	f7f5 fe0f 	bl	80005e8 <__aeabi_dmul>
 800a9ca:	a33b      	add	r3, pc, #236	; (adr r3, 800aab8 <__kernel_cos+0x150>)
 800a9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d0:	f7f5 fc52 	bl	8000278 <__aeabi_dsub>
 800a9d4:	4622      	mov	r2, r4
 800a9d6:	462b      	mov	r3, r5
 800a9d8:	f7f5 fe06 	bl	80005e8 <__aeabi_dmul>
 800a9dc:	a338      	add	r3, pc, #224	; (adr r3, 800aac0 <__kernel_cos+0x158>)
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	f7f5 fc4b 	bl	800027c <__adddf3>
 800a9e6:	4622      	mov	r2, r4
 800a9e8:	462b      	mov	r3, r5
 800a9ea:	f7f5 fdfd 	bl	80005e8 <__aeabi_dmul>
 800a9ee:	a336      	add	r3, pc, #216	; (adr r3, 800aac8 <__kernel_cos+0x160>)
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	f7f5 fc40 	bl	8000278 <__aeabi_dsub>
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	462b      	mov	r3, r5
 800a9fc:	f7f5 fdf4 	bl	80005e8 <__aeabi_dmul>
 800aa00:	a333      	add	r3, pc, #204	; (adr r3, 800aad0 <__kernel_cos+0x168>)
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	f7f5 fc39 	bl	800027c <__adddf3>
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	462b      	mov	r3, r5
 800aa0e:	f7f5 fdeb 	bl	80005e8 <__aeabi_dmul>
 800aa12:	4622      	mov	r2, r4
 800aa14:	462b      	mov	r3, r5
 800aa16:	f7f5 fde7 	bl	80005e8 <__aeabi_dmul>
 800aa1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa1e:	4604      	mov	r4, r0
 800aa20:	460d      	mov	r5, r1
 800aa22:	4630      	mov	r0, r6
 800aa24:	4639      	mov	r1, r7
 800aa26:	f7f5 fddf 	bl	80005e8 <__aeabi_dmul>
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	4629      	mov	r1, r5
 800aa30:	4620      	mov	r0, r4
 800aa32:	f7f5 fc21 	bl	8000278 <__aeabi_dsub>
 800aa36:	4b2b      	ldr	r3, [pc, #172]	; (800aae4 <__kernel_cos+0x17c>)
 800aa38:	4598      	cmp	r8, r3
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	460f      	mov	r7, r1
 800aa3e:	dc10      	bgt.n	800aa62 <__kernel_cos+0xfa>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4650      	mov	r0, sl
 800aa46:	4659      	mov	r1, fp
 800aa48:	f7f5 fc16 	bl	8000278 <__aeabi_dsub>
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	4926      	ldr	r1, [pc, #152]	; (800aae8 <__kernel_cos+0x180>)
 800aa50:	4602      	mov	r2, r0
 800aa52:	2000      	movs	r0, #0
 800aa54:	f7f5 fc10 	bl	8000278 <__aeabi_dsub>
 800aa58:	ec41 0b10 	vmov	d0, r0, r1
 800aa5c:	b003      	add	sp, #12
 800aa5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa62:	4b22      	ldr	r3, [pc, #136]	; (800aaec <__kernel_cos+0x184>)
 800aa64:	4920      	ldr	r1, [pc, #128]	; (800aae8 <__kernel_cos+0x180>)
 800aa66:	4598      	cmp	r8, r3
 800aa68:	bfcc      	ite	gt
 800aa6a:	4d21      	ldrgt	r5, [pc, #132]	; (800aaf0 <__kernel_cos+0x188>)
 800aa6c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800aa70:	2400      	movs	r4, #0
 800aa72:	4622      	mov	r2, r4
 800aa74:	462b      	mov	r3, r5
 800aa76:	2000      	movs	r0, #0
 800aa78:	f7f5 fbfe 	bl	8000278 <__aeabi_dsub>
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	4680      	mov	r8, r0
 800aa80:	4689      	mov	r9, r1
 800aa82:	462b      	mov	r3, r5
 800aa84:	4650      	mov	r0, sl
 800aa86:	4659      	mov	r1, fp
 800aa88:	f7f5 fbf6 	bl	8000278 <__aeabi_dsub>
 800aa8c:	4632      	mov	r2, r6
 800aa8e:	463b      	mov	r3, r7
 800aa90:	f7f5 fbf2 	bl	8000278 <__aeabi_dsub>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4640      	mov	r0, r8
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	e7da      	b.n	800aa54 <__kernel_cos+0xec>
 800aa9e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800aad8 <__kernel_cos+0x170>
 800aaa2:	e7db      	b.n	800aa5c <__kernel_cos+0xf4>
 800aaa4:	f3af 8000 	nop.w
 800aaa8:	be8838d4 	.word	0xbe8838d4
 800aaac:	bda8fae9 	.word	0xbda8fae9
 800aab0:	bdb4b1c4 	.word	0xbdb4b1c4
 800aab4:	3e21ee9e 	.word	0x3e21ee9e
 800aab8:	809c52ad 	.word	0x809c52ad
 800aabc:	3e927e4f 	.word	0x3e927e4f
 800aac0:	19cb1590 	.word	0x19cb1590
 800aac4:	3efa01a0 	.word	0x3efa01a0
 800aac8:	16c15177 	.word	0x16c15177
 800aacc:	3f56c16c 	.word	0x3f56c16c
 800aad0:	5555554c 	.word	0x5555554c
 800aad4:	3fa55555 	.word	0x3fa55555
 800aad8:	00000000 	.word	0x00000000
 800aadc:	3ff00000 	.word	0x3ff00000
 800aae0:	3fe00000 	.word	0x3fe00000
 800aae4:	3fd33332 	.word	0x3fd33332
 800aae8:	3ff00000 	.word	0x3ff00000
 800aaec:	3fe90000 	.word	0x3fe90000
 800aaf0:	3fd20000 	.word	0x3fd20000
 800aaf4:	00000000 	.word	0x00000000

0800aaf8 <__kernel_sin>:
 800aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	ed2d 8b04 	vpush	{d8-d9}
 800ab00:	eeb0 8a41 	vmov.f32	s16, s2
 800ab04:	eef0 8a61 	vmov.f32	s17, s3
 800ab08:	ec55 4b10 	vmov	r4, r5, d0
 800ab0c:	b083      	sub	sp, #12
 800ab0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab12:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ab16:	9001      	str	r0, [sp, #4]
 800ab18:	da06      	bge.n	800ab28 <__kernel_sin+0x30>
 800ab1a:	ee10 0a10 	vmov	r0, s0
 800ab1e:	4629      	mov	r1, r5
 800ab20:	f7f6 f812 	bl	8000b48 <__aeabi_d2iz>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	d051      	beq.n	800abcc <__kernel_sin+0xd4>
 800ab28:	4622      	mov	r2, r4
 800ab2a:	462b      	mov	r3, r5
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	4629      	mov	r1, r5
 800ab30:	f7f5 fd5a 	bl	80005e8 <__aeabi_dmul>
 800ab34:	4682      	mov	sl, r0
 800ab36:	468b      	mov	fp, r1
 800ab38:	4602      	mov	r2, r0
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f7f5 fd52 	bl	80005e8 <__aeabi_dmul>
 800ab44:	a341      	add	r3, pc, #260	; (adr r3, 800ac4c <__kernel_sin+0x154>)
 800ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4a:	4680      	mov	r8, r0
 800ab4c:	4689      	mov	r9, r1
 800ab4e:	4650      	mov	r0, sl
 800ab50:	4659      	mov	r1, fp
 800ab52:	f7f5 fd49 	bl	80005e8 <__aeabi_dmul>
 800ab56:	a33f      	add	r3, pc, #252	; (adr r3, 800ac54 <__kernel_sin+0x15c>)
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	f7f5 fb8c 	bl	8000278 <__aeabi_dsub>
 800ab60:	4652      	mov	r2, sl
 800ab62:	465b      	mov	r3, fp
 800ab64:	f7f5 fd40 	bl	80005e8 <__aeabi_dmul>
 800ab68:	a33c      	add	r3, pc, #240	; (adr r3, 800ac5c <__kernel_sin+0x164>)
 800ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6e:	f7f5 fb85 	bl	800027c <__adddf3>
 800ab72:	4652      	mov	r2, sl
 800ab74:	465b      	mov	r3, fp
 800ab76:	f7f5 fd37 	bl	80005e8 <__aeabi_dmul>
 800ab7a:	a33a      	add	r3, pc, #232	; (adr r3, 800ac64 <__kernel_sin+0x16c>)
 800ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab80:	f7f5 fb7a 	bl	8000278 <__aeabi_dsub>
 800ab84:	4652      	mov	r2, sl
 800ab86:	465b      	mov	r3, fp
 800ab88:	f7f5 fd2e 	bl	80005e8 <__aeabi_dmul>
 800ab8c:	a337      	add	r3, pc, #220	; (adr r3, 800ac6c <__kernel_sin+0x174>)
 800ab8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab92:	f7f5 fb73 	bl	800027c <__adddf3>
 800ab96:	9b01      	ldr	r3, [sp, #4]
 800ab98:	4606      	mov	r6, r0
 800ab9a:	460f      	mov	r7, r1
 800ab9c:	b9eb      	cbnz	r3, 800abda <__kernel_sin+0xe2>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	460b      	mov	r3, r1
 800aba2:	4650      	mov	r0, sl
 800aba4:	4659      	mov	r1, fp
 800aba6:	f7f5 fd1f 	bl	80005e8 <__aeabi_dmul>
 800abaa:	a325      	add	r3, pc, #148	; (adr r3, 800ac40 <__kernel_sin+0x148>)
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	f7f5 fb62 	bl	8000278 <__aeabi_dsub>
 800abb4:	4642      	mov	r2, r8
 800abb6:	464b      	mov	r3, r9
 800abb8:	f7f5 fd16 	bl	80005e8 <__aeabi_dmul>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4620      	mov	r0, r4
 800abc2:	4629      	mov	r1, r5
 800abc4:	f7f5 fb5a 	bl	800027c <__adddf3>
 800abc8:	4604      	mov	r4, r0
 800abca:	460d      	mov	r5, r1
 800abcc:	ec45 4b10 	vmov	d0, r4, r5
 800abd0:	b003      	add	sp, #12
 800abd2:	ecbd 8b04 	vpop	{d8-d9}
 800abd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abda:	4b1b      	ldr	r3, [pc, #108]	; (800ac48 <__kernel_sin+0x150>)
 800abdc:	ec51 0b18 	vmov	r0, r1, d8
 800abe0:	2200      	movs	r2, #0
 800abe2:	f7f5 fd01 	bl	80005e8 <__aeabi_dmul>
 800abe6:	4632      	mov	r2, r6
 800abe8:	ec41 0b19 	vmov	d9, r0, r1
 800abec:	463b      	mov	r3, r7
 800abee:	4640      	mov	r0, r8
 800abf0:	4649      	mov	r1, r9
 800abf2:	f7f5 fcf9 	bl	80005e8 <__aeabi_dmul>
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	ec51 0b19 	vmov	r0, r1, d9
 800abfe:	f7f5 fb3b 	bl	8000278 <__aeabi_dsub>
 800ac02:	4652      	mov	r2, sl
 800ac04:	465b      	mov	r3, fp
 800ac06:	f7f5 fcef 	bl	80005e8 <__aeabi_dmul>
 800ac0a:	ec53 2b18 	vmov	r2, r3, d8
 800ac0e:	f7f5 fb33 	bl	8000278 <__aeabi_dsub>
 800ac12:	a30b      	add	r3, pc, #44	; (adr r3, 800ac40 <__kernel_sin+0x148>)
 800ac14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac18:	4606      	mov	r6, r0
 800ac1a:	460f      	mov	r7, r1
 800ac1c:	4640      	mov	r0, r8
 800ac1e:	4649      	mov	r1, r9
 800ac20:	f7f5 fce2 	bl	80005e8 <__aeabi_dmul>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4630      	mov	r0, r6
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	f7f5 fb26 	bl	800027c <__adddf3>
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	4620      	mov	r0, r4
 800ac36:	4629      	mov	r1, r5
 800ac38:	f7f5 fb1e 	bl	8000278 <__aeabi_dsub>
 800ac3c:	e7c4      	b.n	800abc8 <__kernel_sin+0xd0>
 800ac3e:	bf00      	nop
 800ac40:	55555549 	.word	0x55555549
 800ac44:	3fc55555 	.word	0x3fc55555
 800ac48:	3fe00000 	.word	0x3fe00000
 800ac4c:	5acfd57c 	.word	0x5acfd57c
 800ac50:	3de5d93a 	.word	0x3de5d93a
 800ac54:	8a2b9ceb 	.word	0x8a2b9ceb
 800ac58:	3e5ae5e6 	.word	0x3e5ae5e6
 800ac5c:	57b1fe7d 	.word	0x57b1fe7d
 800ac60:	3ec71de3 	.word	0x3ec71de3
 800ac64:	19c161d5 	.word	0x19c161d5
 800ac68:	3f2a01a0 	.word	0x3f2a01a0
 800ac6c:	1110f8a6 	.word	0x1110f8a6
 800ac70:	3f811111 	.word	0x3f811111
 800ac74:	00000000 	.word	0x00000000

0800ac78 <__ieee754_asin>:
 800ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7c:	ed2d 8b04 	vpush	{d8-d9}
 800ac80:	ec55 4b10 	vmov	r4, r5, d0
 800ac84:	4bcc      	ldr	r3, [pc, #816]	; (800afb8 <__ieee754_asin+0x340>)
 800ac86:	b083      	sub	sp, #12
 800ac88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ac8c:	4598      	cmp	r8, r3
 800ac8e:	9501      	str	r5, [sp, #4]
 800ac90:	dd33      	ble.n	800acfa <__ieee754_asin+0x82>
 800ac92:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800ac96:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800ac9a:	ea58 0804 	orrs.w	r8, r8, r4
 800ac9e:	d117      	bne.n	800acd0 <__ieee754_asin+0x58>
 800aca0:	a3ab      	add	r3, pc, #684	; (adr r3, 800af50 <__ieee754_asin+0x2d8>)
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	ee10 0a10 	vmov	r0, s0
 800acaa:	4629      	mov	r1, r5
 800acac:	f7f5 fc9c 	bl	80005e8 <__aeabi_dmul>
 800acb0:	a3a9      	add	r3, pc, #676	; (adr r3, 800af58 <__ieee754_asin+0x2e0>)
 800acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb6:	4606      	mov	r6, r0
 800acb8:	460f      	mov	r7, r1
 800acba:	4620      	mov	r0, r4
 800acbc:	4629      	mov	r1, r5
 800acbe:	f7f5 fc93 	bl	80005e8 <__aeabi_dmul>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	4630      	mov	r0, r6
 800acc8:	4639      	mov	r1, r7
 800acca:	f7f5 fad7 	bl	800027c <__adddf3>
 800acce:	e00b      	b.n	800ace8 <__ieee754_asin+0x70>
 800acd0:	ee10 2a10 	vmov	r2, s0
 800acd4:	462b      	mov	r3, r5
 800acd6:	ee10 0a10 	vmov	r0, s0
 800acda:	4629      	mov	r1, r5
 800acdc:	f7f5 facc 	bl	8000278 <__aeabi_dsub>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	f7f5 fdaa 	bl	800083c <__aeabi_ddiv>
 800ace8:	4604      	mov	r4, r0
 800acea:	460d      	mov	r5, r1
 800acec:	ec45 4b10 	vmov	d0, r4, r5
 800acf0:	b003      	add	sp, #12
 800acf2:	ecbd 8b04 	vpop	{d8-d9}
 800acf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acfa:	4bb0      	ldr	r3, [pc, #704]	; (800afbc <__ieee754_asin+0x344>)
 800acfc:	4598      	cmp	r8, r3
 800acfe:	dc11      	bgt.n	800ad24 <__ieee754_asin+0xac>
 800ad00:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ad04:	f280 80ae 	bge.w	800ae64 <__ieee754_asin+0x1ec>
 800ad08:	a395      	add	r3, pc, #596	; (adr r3, 800af60 <__ieee754_asin+0x2e8>)
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	ee10 0a10 	vmov	r0, s0
 800ad12:	4629      	mov	r1, r5
 800ad14:	f7f5 fab2 	bl	800027c <__adddf3>
 800ad18:	4ba9      	ldr	r3, [pc, #676]	; (800afc0 <__ieee754_asin+0x348>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f7f5 fef4 	bl	8000b08 <__aeabi_dcmpgt>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d1e3      	bne.n	800acec <__ieee754_asin+0x74>
 800ad24:	ec45 4b10 	vmov	d0, r4, r5
 800ad28:	f7ff fc1c 	bl	800a564 <fabs>
 800ad2c:	49a4      	ldr	r1, [pc, #656]	; (800afc0 <__ieee754_asin+0x348>)
 800ad2e:	ec53 2b10 	vmov	r2, r3, d0
 800ad32:	2000      	movs	r0, #0
 800ad34:	f7f5 faa0 	bl	8000278 <__aeabi_dsub>
 800ad38:	4ba2      	ldr	r3, [pc, #648]	; (800afc4 <__ieee754_asin+0x34c>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f7f5 fc54 	bl	80005e8 <__aeabi_dmul>
 800ad40:	a389      	add	r3, pc, #548	; (adr r3, 800af68 <__ieee754_asin+0x2f0>)
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	4604      	mov	r4, r0
 800ad48:	460d      	mov	r5, r1
 800ad4a:	f7f5 fc4d 	bl	80005e8 <__aeabi_dmul>
 800ad4e:	a388      	add	r3, pc, #544	; (adr r3, 800af70 <__ieee754_asin+0x2f8>)
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	f7f5 fa92 	bl	800027c <__adddf3>
 800ad58:	4622      	mov	r2, r4
 800ad5a:	462b      	mov	r3, r5
 800ad5c:	f7f5 fc44 	bl	80005e8 <__aeabi_dmul>
 800ad60:	a385      	add	r3, pc, #532	; (adr r3, 800af78 <__ieee754_asin+0x300>)
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	f7f5 fa87 	bl	8000278 <__aeabi_dsub>
 800ad6a:	4622      	mov	r2, r4
 800ad6c:	462b      	mov	r3, r5
 800ad6e:	f7f5 fc3b 	bl	80005e8 <__aeabi_dmul>
 800ad72:	a383      	add	r3, pc, #524	; (adr r3, 800af80 <__ieee754_asin+0x308>)
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	f7f5 fa80 	bl	800027c <__adddf3>
 800ad7c:	4622      	mov	r2, r4
 800ad7e:	462b      	mov	r3, r5
 800ad80:	f7f5 fc32 	bl	80005e8 <__aeabi_dmul>
 800ad84:	a380      	add	r3, pc, #512	; (adr r3, 800af88 <__ieee754_asin+0x310>)
 800ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8a:	f7f5 fa75 	bl	8000278 <__aeabi_dsub>
 800ad8e:	4622      	mov	r2, r4
 800ad90:	462b      	mov	r3, r5
 800ad92:	f7f5 fc29 	bl	80005e8 <__aeabi_dmul>
 800ad96:	a37e      	add	r3, pc, #504	; (adr r3, 800af90 <__ieee754_asin+0x318>)
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f7f5 fa6e 	bl	800027c <__adddf3>
 800ada0:	4622      	mov	r2, r4
 800ada2:	462b      	mov	r3, r5
 800ada4:	f7f5 fc20 	bl	80005e8 <__aeabi_dmul>
 800ada8:	a37b      	add	r3, pc, #492	; (adr r3, 800af98 <__ieee754_asin+0x320>)
 800adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adae:	ec41 0b18 	vmov	d8, r0, r1
 800adb2:	4620      	mov	r0, r4
 800adb4:	4629      	mov	r1, r5
 800adb6:	f7f5 fc17 	bl	80005e8 <__aeabi_dmul>
 800adba:	a379      	add	r3, pc, #484	; (adr r3, 800afa0 <__ieee754_asin+0x328>)
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	f7f5 fa5a 	bl	8000278 <__aeabi_dsub>
 800adc4:	4622      	mov	r2, r4
 800adc6:	462b      	mov	r3, r5
 800adc8:	f7f5 fc0e 	bl	80005e8 <__aeabi_dmul>
 800adcc:	a376      	add	r3, pc, #472	; (adr r3, 800afa8 <__ieee754_asin+0x330>)
 800adce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add2:	f7f5 fa53 	bl	800027c <__adddf3>
 800add6:	4622      	mov	r2, r4
 800add8:	462b      	mov	r3, r5
 800adda:	f7f5 fc05 	bl	80005e8 <__aeabi_dmul>
 800adde:	a374      	add	r3, pc, #464	; (adr r3, 800afb0 <__ieee754_asin+0x338>)
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	f7f5 fa48 	bl	8000278 <__aeabi_dsub>
 800ade8:	4622      	mov	r2, r4
 800adea:	462b      	mov	r3, r5
 800adec:	f7f5 fbfc 	bl	80005e8 <__aeabi_dmul>
 800adf0:	4b73      	ldr	r3, [pc, #460]	; (800afc0 <__ieee754_asin+0x348>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	f7f5 fa42 	bl	800027c <__adddf3>
 800adf8:	ec45 4b10 	vmov	d0, r4, r5
 800adfc:	4606      	mov	r6, r0
 800adfe:	460f      	mov	r7, r1
 800ae00:	f7ff fcd2 	bl	800a7a8 <__ieee754_sqrt>
 800ae04:	4b70      	ldr	r3, [pc, #448]	; (800afc8 <__ieee754_asin+0x350>)
 800ae06:	4598      	cmp	r8, r3
 800ae08:	ec5b ab10 	vmov	sl, fp, d0
 800ae0c:	f340 80de 	ble.w	800afcc <__ieee754_asin+0x354>
 800ae10:	4632      	mov	r2, r6
 800ae12:	463b      	mov	r3, r7
 800ae14:	ec51 0b18 	vmov	r0, r1, d8
 800ae18:	f7f5 fd10 	bl	800083c <__aeabi_ddiv>
 800ae1c:	4652      	mov	r2, sl
 800ae1e:	465b      	mov	r3, fp
 800ae20:	f7f5 fbe2 	bl	80005e8 <__aeabi_dmul>
 800ae24:	4652      	mov	r2, sl
 800ae26:	465b      	mov	r3, fp
 800ae28:	f7f5 fa28 	bl	800027c <__adddf3>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
 800ae30:	f7f5 fa24 	bl	800027c <__adddf3>
 800ae34:	a348      	add	r3, pc, #288	; (adr r3, 800af58 <__ieee754_asin+0x2e0>)
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	f7f5 fa1d 	bl	8000278 <__aeabi_dsub>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	460b      	mov	r3, r1
 800ae42:	a143      	add	r1, pc, #268	; (adr r1, 800af50 <__ieee754_asin+0x2d8>)
 800ae44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae48:	f7f5 fa16 	bl	8000278 <__aeabi_dsub>
 800ae4c:	9b01      	ldr	r3, [sp, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	bfdc      	itt	le
 800ae52:	4602      	movle	r2, r0
 800ae54:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800ae58:	4604      	mov	r4, r0
 800ae5a:	460d      	mov	r5, r1
 800ae5c:	bfdc      	itt	le
 800ae5e:	4614      	movle	r4, r2
 800ae60:	461d      	movle	r5, r3
 800ae62:	e743      	b.n	800acec <__ieee754_asin+0x74>
 800ae64:	ee10 2a10 	vmov	r2, s0
 800ae68:	ee10 0a10 	vmov	r0, s0
 800ae6c:	462b      	mov	r3, r5
 800ae6e:	4629      	mov	r1, r5
 800ae70:	f7f5 fbba 	bl	80005e8 <__aeabi_dmul>
 800ae74:	a33c      	add	r3, pc, #240	; (adr r3, 800af68 <__ieee754_asin+0x2f0>)
 800ae76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7a:	4606      	mov	r6, r0
 800ae7c:	460f      	mov	r7, r1
 800ae7e:	f7f5 fbb3 	bl	80005e8 <__aeabi_dmul>
 800ae82:	a33b      	add	r3, pc, #236	; (adr r3, 800af70 <__ieee754_asin+0x2f8>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	f7f5 f9f8 	bl	800027c <__adddf3>
 800ae8c:	4632      	mov	r2, r6
 800ae8e:	463b      	mov	r3, r7
 800ae90:	f7f5 fbaa 	bl	80005e8 <__aeabi_dmul>
 800ae94:	a338      	add	r3, pc, #224	; (adr r3, 800af78 <__ieee754_asin+0x300>)
 800ae96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9a:	f7f5 f9ed 	bl	8000278 <__aeabi_dsub>
 800ae9e:	4632      	mov	r2, r6
 800aea0:	463b      	mov	r3, r7
 800aea2:	f7f5 fba1 	bl	80005e8 <__aeabi_dmul>
 800aea6:	a336      	add	r3, pc, #216	; (adr r3, 800af80 <__ieee754_asin+0x308>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	f7f5 f9e6 	bl	800027c <__adddf3>
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	463b      	mov	r3, r7
 800aeb4:	f7f5 fb98 	bl	80005e8 <__aeabi_dmul>
 800aeb8:	a333      	add	r3, pc, #204	; (adr r3, 800af88 <__ieee754_asin+0x310>)
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	f7f5 f9db 	bl	8000278 <__aeabi_dsub>
 800aec2:	4632      	mov	r2, r6
 800aec4:	463b      	mov	r3, r7
 800aec6:	f7f5 fb8f 	bl	80005e8 <__aeabi_dmul>
 800aeca:	a331      	add	r3, pc, #196	; (adr r3, 800af90 <__ieee754_asin+0x318>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	f7f5 f9d4 	bl	800027c <__adddf3>
 800aed4:	4632      	mov	r2, r6
 800aed6:	463b      	mov	r3, r7
 800aed8:	f7f5 fb86 	bl	80005e8 <__aeabi_dmul>
 800aedc:	a32e      	add	r3, pc, #184	; (adr r3, 800af98 <__ieee754_asin+0x320>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	4680      	mov	r8, r0
 800aee4:	4689      	mov	r9, r1
 800aee6:	4630      	mov	r0, r6
 800aee8:	4639      	mov	r1, r7
 800aeea:	f7f5 fb7d 	bl	80005e8 <__aeabi_dmul>
 800aeee:	a32c      	add	r3, pc, #176	; (adr r3, 800afa0 <__ieee754_asin+0x328>)
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	f7f5 f9c0 	bl	8000278 <__aeabi_dsub>
 800aef8:	4632      	mov	r2, r6
 800aefa:	463b      	mov	r3, r7
 800aefc:	f7f5 fb74 	bl	80005e8 <__aeabi_dmul>
 800af00:	a329      	add	r3, pc, #164	; (adr r3, 800afa8 <__ieee754_asin+0x330>)
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	f7f5 f9b9 	bl	800027c <__adddf3>
 800af0a:	4632      	mov	r2, r6
 800af0c:	463b      	mov	r3, r7
 800af0e:	f7f5 fb6b 	bl	80005e8 <__aeabi_dmul>
 800af12:	a327      	add	r3, pc, #156	; (adr r3, 800afb0 <__ieee754_asin+0x338>)
 800af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af18:	f7f5 f9ae 	bl	8000278 <__aeabi_dsub>
 800af1c:	4632      	mov	r2, r6
 800af1e:	463b      	mov	r3, r7
 800af20:	f7f5 fb62 	bl	80005e8 <__aeabi_dmul>
 800af24:	4b26      	ldr	r3, [pc, #152]	; (800afc0 <__ieee754_asin+0x348>)
 800af26:	2200      	movs	r2, #0
 800af28:	f7f5 f9a8 	bl	800027c <__adddf3>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	4640      	mov	r0, r8
 800af32:	4649      	mov	r1, r9
 800af34:	f7f5 fc82 	bl	800083c <__aeabi_ddiv>
 800af38:	4622      	mov	r2, r4
 800af3a:	462b      	mov	r3, r5
 800af3c:	f7f5 fb54 	bl	80005e8 <__aeabi_dmul>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	4620      	mov	r0, r4
 800af46:	4629      	mov	r1, r5
 800af48:	e6bf      	b.n	800acca <__ieee754_asin+0x52>
 800af4a:	bf00      	nop
 800af4c:	f3af 8000 	nop.w
 800af50:	54442d18 	.word	0x54442d18
 800af54:	3ff921fb 	.word	0x3ff921fb
 800af58:	33145c07 	.word	0x33145c07
 800af5c:	3c91a626 	.word	0x3c91a626
 800af60:	8800759c 	.word	0x8800759c
 800af64:	7e37e43c 	.word	0x7e37e43c
 800af68:	0dfdf709 	.word	0x0dfdf709
 800af6c:	3f023de1 	.word	0x3f023de1
 800af70:	7501b288 	.word	0x7501b288
 800af74:	3f49efe0 	.word	0x3f49efe0
 800af78:	b5688f3b 	.word	0xb5688f3b
 800af7c:	3fa48228 	.word	0x3fa48228
 800af80:	0e884455 	.word	0x0e884455
 800af84:	3fc9c155 	.word	0x3fc9c155
 800af88:	03eb6f7d 	.word	0x03eb6f7d
 800af8c:	3fd4d612 	.word	0x3fd4d612
 800af90:	55555555 	.word	0x55555555
 800af94:	3fc55555 	.word	0x3fc55555
 800af98:	b12e9282 	.word	0xb12e9282
 800af9c:	3fb3b8c5 	.word	0x3fb3b8c5
 800afa0:	1b8d0159 	.word	0x1b8d0159
 800afa4:	3fe6066c 	.word	0x3fe6066c
 800afa8:	9c598ac8 	.word	0x9c598ac8
 800afac:	40002ae5 	.word	0x40002ae5
 800afb0:	1c8a2d4b 	.word	0x1c8a2d4b
 800afb4:	40033a27 	.word	0x40033a27
 800afb8:	3fefffff 	.word	0x3fefffff
 800afbc:	3fdfffff 	.word	0x3fdfffff
 800afc0:	3ff00000 	.word	0x3ff00000
 800afc4:	3fe00000 	.word	0x3fe00000
 800afc8:	3fef3332 	.word	0x3fef3332
 800afcc:	ee10 2a10 	vmov	r2, s0
 800afd0:	ee10 0a10 	vmov	r0, s0
 800afd4:	465b      	mov	r3, fp
 800afd6:	4659      	mov	r1, fp
 800afd8:	f7f5 f950 	bl	800027c <__adddf3>
 800afdc:	4632      	mov	r2, r6
 800afde:	463b      	mov	r3, r7
 800afe0:	ec41 0b19 	vmov	d9, r0, r1
 800afe4:	ec51 0b18 	vmov	r0, r1, d8
 800afe8:	f7f5 fc28 	bl	800083c <__aeabi_ddiv>
 800afec:	4602      	mov	r2, r0
 800afee:	460b      	mov	r3, r1
 800aff0:	ec51 0b19 	vmov	r0, r1, d9
 800aff4:	f7f5 faf8 	bl	80005e8 <__aeabi_dmul>
 800aff8:	f04f 0800 	mov.w	r8, #0
 800affc:	4606      	mov	r6, r0
 800affe:	460f      	mov	r7, r1
 800b000:	4642      	mov	r2, r8
 800b002:	465b      	mov	r3, fp
 800b004:	4640      	mov	r0, r8
 800b006:	4659      	mov	r1, fp
 800b008:	f7f5 faee 	bl	80005e8 <__aeabi_dmul>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4620      	mov	r0, r4
 800b012:	4629      	mov	r1, r5
 800b014:	f7f5 f930 	bl	8000278 <__aeabi_dsub>
 800b018:	4642      	mov	r2, r8
 800b01a:	4604      	mov	r4, r0
 800b01c:	460d      	mov	r5, r1
 800b01e:	465b      	mov	r3, fp
 800b020:	4650      	mov	r0, sl
 800b022:	4659      	mov	r1, fp
 800b024:	f7f5 f92a 	bl	800027c <__adddf3>
 800b028:	4602      	mov	r2, r0
 800b02a:	460b      	mov	r3, r1
 800b02c:	4620      	mov	r0, r4
 800b02e:	4629      	mov	r1, r5
 800b030:	f7f5 fc04 	bl	800083c <__aeabi_ddiv>
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	f7f5 f920 	bl	800027c <__adddf3>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	a113      	add	r1, pc, #76	; (adr r1, 800b090 <__ieee754_asin+0x418>)
 800b042:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b046:	f7f5 f917 	bl	8000278 <__aeabi_dsub>
 800b04a:	4602      	mov	r2, r0
 800b04c:	460b      	mov	r3, r1
 800b04e:	4630      	mov	r0, r6
 800b050:	4639      	mov	r1, r7
 800b052:	f7f5 f911 	bl	8000278 <__aeabi_dsub>
 800b056:	4642      	mov	r2, r8
 800b058:	4604      	mov	r4, r0
 800b05a:	460d      	mov	r5, r1
 800b05c:	465b      	mov	r3, fp
 800b05e:	4640      	mov	r0, r8
 800b060:	4659      	mov	r1, fp
 800b062:	f7f5 f90b 	bl	800027c <__adddf3>
 800b066:	4602      	mov	r2, r0
 800b068:	460b      	mov	r3, r1
 800b06a:	a10b      	add	r1, pc, #44	; (adr r1, 800b098 <__ieee754_asin+0x420>)
 800b06c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b070:	f7f5 f902 	bl	8000278 <__aeabi_dsub>
 800b074:	4602      	mov	r2, r0
 800b076:	460b      	mov	r3, r1
 800b078:	4620      	mov	r0, r4
 800b07a:	4629      	mov	r1, r5
 800b07c:	f7f5 f8fc 	bl	8000278 <__aeabi_dsub>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	a104      	add	r1, pc, #16	; (adr r1, 800b098 <__ieee754_asin+0x420>)
 800b086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b08a:	e6dd      	b.n	800ae48 <__ieee754_asin+0x1d0>
 800b08c:	f3af 8000 	nop.w
 800b090:	33145c07 	.word	0x33145c07
 800b094:	3c91a626 	.word	0x3c91a626
 800b098:	54442d18 	.word	0x54442d18
 800b09c:	3fe921fb 	.word	0x3fe921fb

0800b0a0 <__ieee754_atan2>:
 800b0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a4:	ec57 6b11 	vmov	r6, r7, d1
 800b0a8:	4273      	negs	r3, r6
 800b0aa:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b228 <__ieee754_atan2+0x188>
 800b0ae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b0b2:	4333      	orrs	r3, r6
 800b0b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b0b8:	4543      	cmp	r3, r8
 800b0ba:	ec51 0b10 	vmov	r0, r1, d0
 800b0be:	ee11 5a10 	vmov	r5, s2
 800b0c2:	d80a      	bhi.n	800b0da <__ieee754_atan2+0x3a>
 800b0c4:	4244      	negs	r4, r0
 800b0c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b0ca:	4304      	orrs	r4, r0
 800b0cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b0d0:	4544      	cmp	r4, r8
 800b0d2:	ee10 9a10 	vmov	r9, s0
 800b0d6:	468e      	mov	lr, r1
 800b0d8:	d907      	bls.n	800b0ea <__ieee754_atan2+0x4a>
 800b0da:	4632      	mov	r2, r6
 800b0dc:	463b      	mov	r3, r7
 800b0de:	f7f5 f8cd 	bl	800027c <__adddf3>
 800b0e2:	ec41 0b10 	vmov	d0, r0, r1
 800b0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b0ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b0f2:	4334      	orrs	r4, r6
 800b0f4:	d103      	bne.n	800b0fe <__ieee754_atan2+0x5e>
 800b0f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0fa:	f001 b8d9 	b.w	800c2b0 <atan>
 800b0fe:	17bc      	asrs	r4, r7, #30
 800b100:	f004 0402 	and.w	r4, r4, #2
 800b104:	ea53 0909 	orrs.w	r9, r3, r9
 800b108:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b10c:	d107      	bne.n	800b11e <__ieee754_atan2+0x7e>
 800b10e:	2c02      	cmp	r4, #2
 800b110:	d05f      	beq.n	800b1d2 <__ieee754_atan2+0x132>
 800b112:	2c03      	cmp	r4, #3
 800b114:	d1e5      	bne.n	800b0e2 <__ieee754_atan2+0x42>
 800b116:	a140      	add	r1, pc, #256	; (adr r1, 800b218 <__ieee754_atan2+0x178>)
 800b118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b11c:	e7e1      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b11e:	4315      	orrs	r5, r2
 800b120:	d106      	bne.n	800b130 <__ieee754_atan2+0x90>
 800b122:	f1be 0f00 	cmp.w	lr, #0
 800b126:	da5f      	bge.n	800b1e8 <__ieee754_atan2+0x148>
 800b128:	a13d      	add	r1, pc, #244	; (adr r1, 800b220 <__ieee754_atan2+0x180>)
 800b12a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b12e:	e7d8      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b130:	4542      	cmp	r2, r8
 800b132:	d10f      	bne.n	800b154 <__ieee754_atan2+0xb4>
 800b134:	4293      	cmp	r3, r2
 800b136:	f104 34ff 	add.w	r4, r4, #4294967295
 800b13a:	d107      	bne.n	800b14c <__ieee754_atan2+0xac>
 800b13c:	2c02      	cmp	r4, #2
 800b13e:	d84c      	bhi.n	800b1da <__ieee754_atan2+0x13a>
 800b140:	4b33      	ldr	r3, [pc, #204]	; (800b210 <__ieee754_atan2+0x170>)
 800b142:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b146:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b14a:	e7ca      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b14c:	2c02      	cmp	r4, #2
 800b14e:	d848      	bhi.n	800b1e2 <__ieee754_atan2+0x142>
 800b150:	4b30      	ldr	r3, [pc, #192]	; (800b214 <__ieee754_atan2+0x174>)
 800b152:	e7f6      	b.n	800b142 <__ieee754_atan2+0xa2>
 800b154:	4543      	cmp	r3, r8
 800b156:	d0e4      	beq.n	800b122 <__ieee754_atan2+0x82>
 800b158:	1a9b      	subs	r3, r3, r2
 800b15a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b15e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b162:	da1e      	bge.n	800b1a2 <__ieee754_atan2+0x102>
 800b164:	2f00      	cmp	r7, #0
 800b166:	da01      	bge.n	800b16c <__ieee754_atan2+0xcc>
 800b168:	323c      	adds	r2, #60	; 0x3c
 800b16a:	db1e      	blt.n	800b1aa <__ieee754_atan2+0x10a>
 800b16c:	4632      	mov	r2, r6
 800b16e:	463b      	mov	r3, r7
 800b170:	f7f5 fb64 	bl	800083c <__aeabi_ddiv>
 800b174:	ec41 0b10 	vmov	d0, r0, r1
 800b178:	f7ff f9f4 	bl	800a564 <fabs>
 800b17c:	f001 f898 	bl	800c2b0 <atan>
 800b180:	ec51 0b10 	vmov	r0, r1, d0
 800b184:	2c01      	cmp	r4, #1
 800b186:	d013      	beq.n	800b1b0 <__ieee754_atan2+0x110>
 800b188:	2c02      	cmp	r4, #2
 800b18a:	d015      	beq.n	800b1b8 <__ieee754_atan2+0x118>
 800b18c:	2c00      	cmp	r4, #0
 800b18e:	d0a8      	beq.n	800b0e2 <__ieee754_atan2+0x42>
 800b190:	a317      	add	r3, pc, #92	; (adr r3, 800b1f0 <__ieee754_atan2+0x150>)
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	f7f5 f86f 	bl	8000278 <__aeabi_dsub>
 800b19a:	a317      	add	r3, pc, #92	; (adr r3, 800b1f8 <__ieee754_atan2+0x158>)
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	e014      	b.n	800b1cc <__ieee754_atan2+0x12c>
 800b1a2:	a117      	add	r1, pc, #92	; (adr r1, 800b200 <__ieee754_atan2+0x160>)
 800b1a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1a8:	e7ec      	b.n	800b184 <__ieee754_atan2+0xe4>
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	e7e9      	b.n	800b184 <__ieee754_atan2+0xe4>
 800b1b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	e794      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b1b8:	a30d      	add	r3, pc, #52	; (adr r3, 800b1f0 <__ieee754_atan2+0x150>)
 800b1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1be:	f7f5 f85b 	bl	8000278 <__aeabi_dsub>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	a10c      	add	r1, pc, #48	; (adr r1, 800b1f8 <__ieee754_atan2+0x158>)
 800b1c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1cc:	f7f5 f854 	bl	8000278 <__aeabi_dsub>
 800b1d0:	e787      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b1d2:	a109      	add	r1, pc, #36	; (adr r1, 800b1f8 <__ieee754_atan2+0x158>)
 800b1d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1d8:	e783      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b1da:	a10b      	add	r1, pc, #44	; (adr r1, 800b208 <__ieee754_atan2+0x168>)
 800b1dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1e0:	e77f      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	e77c      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b1e8:	a105      	add	r1, pc, #20	; (adr r1, 800b200 <__ieee754_atan2+0x160>)
 800b1ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1ee:	e778      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b1f0:	33145c07 	.word	0x33145c07
 800b1f4:	3ca1a626 	.word	0x3ca1a626
 800b1f8:	54442d18 	.word	0x54442d18
 800b1fc:	400921fb 	.word	0x400921fb
 800b200:	54442d18 	.word	0x54442d18
 800b204:	3ff921fb 	.word	0x3ff921fb
 800b208:	54442d18 	.word	0x54442d18
 800b20c:	3fe921fb 	.word	0x3fe921fb
 800b210:	08010878 	.word	0x08010878
 800b214:	08010890 	.word	0x08010890
 800b218:	54442d18 	.word	0x54442d18
 800b21c:	c00921fb 	.word	0xc00921fb
 800b220:	54442d18 	.word	0x54442d18
 800b224:	bff921fb 	.word	0xbff921fb
 800b228:	7ff00000 	.word	0x7ff00000

0800b22c <__ieee754_fmod>:
 800b22c:	ec53 2b11 	vmov	r2, r3, d1
 800b230:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800b234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b238:	ea5c 0402 	orrs.w	r4, ip, r2
 800b23c:	ec51 0b10 	vmov	r0, r1, d0
 800b240:	ee11 7a10 	vmov	r7, s2
 800b244:	ee11 ea10 	vmov	lr, s2
 800b248:	461e      	mov	r6, r3
 800b24a:	d00c      	beq.n	800b266 <__ieee754_fmod+0x3a>
 800b24c:	4c78      	ldr	r4, [pc, #480]	; (800b430 <__ieee754_fmod+0x204>)
 800b24e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800b252:	45a0      	cmp	r8, r4
 800b254:	4689      	mov	r9, r1
 800b256:	dc06      	bgt.n	800b266 <__ieee754_fmod+0x3a>
 800b258:	4254      	negs	r4, r2
 800b25a:	4d76      	ldr	r5, [pc, #472]	; (800b434 <__ieee754_fmod+0x208>)
 800b25c:	4314      	orrs	r4, r2
 800b25e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800b262:	42ac      	cmp	r4, r5
 800b264:	d909      	bls.n	800b27a <__ieee754_fmod+0x4e>
 800b266:	f7f5 f9bf 	bl	80005e8 <__aeabi_dmul>
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	f7f5 fae5 	bl	800083c <__aeabi_ddiv>
 800b272:	ec41 0b10 	vmov	d0, r0, r1
 800b276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b27a:	45e0      	cmp	r8, ip
 800b27c:	ee10 aa10 	vmov	sl, s0
 800b280:	ee10 4a10 	vmov	r4, s0
 800b284:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b288:	dc09      	bgt.n	800b29e <__ieee754_fmod+0x72>
 800b28a:	dbf2      	blt.n	800b272 <__ieee754_fmod+0x46>
 800b28c:	4290      	cmp	r0, r2
 800b28e:	d3f0      	bcc.n	800b272 <__ieee754_fmod+0x46>
 800b290:	d105      	bne.n	800b29e <__ieee754_fmod+0x72>
 800b292:	4b69      	ldr	r3, [pc, #420]	; (800b438 <__ieee754_fmod+0x20c>)
 800b294:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800b298:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b29c:	e7e9      	b.n	800b272 <__ieee754_fmod+0x46>
 800b29e:	4a65      	ldr	r2, [pc, #404]	; (800b434 <__ieee754_fmod+0x208>)
 800b2a0:	ea19 0f02 	tst.w	r9, r2
 800b2a4:	d148      	bne.n	800b338 <__ieee754_fmod+0x10c>
 800b2a6:	f1b8 0f00 	cmp.w	r8, #0
 800b2aa:	d13d      	bne.n	800b328 <__ieee754_fmod+0xfc>
 800b2ac:	4963      	ldr	r1, [pc, #396]	; (800b43c <__ieee754_fmod+0x210>)
 800b2ae:	4653      	mov	r3, sl
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	dc36      	bgt.n	800b322 <__ieee754_fmod+0xf6>
 800b2b4:	4216      	tst	r6, r2
 800b2b6:	d14f      	bne.n	800b358 <__ieee754_fmod+0x12c>
 800b2b8:	f1bc 0f00 	cmp.w	ip, #0
 800b2bc:	d144      	bne.n	800b348 <__ieee754_fmod+0x11c>
 800b2be:	4a5f      	ldr	r2, [pc, #380]	; (800b43c <__ieee754_fmod+0x210>)
 800b2c0:	463b      	mov	r3, r7
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	dc3d      	bgt.n	800b342 <__ieee754_fmod+0x116>
 800b2c6:	485e      	ldr	r0, [pc, #376]	; (800b440 <__ieee754_fmod+0x214>)
 800b2c8:	4281      	cmp	r1, r0
 800b2ca:	db4a      	blt.n	800b362 <__ieee754_fmod+0x136>
 800b2cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2d4:	485a      	ldr	r0, [pc, #360]	; (800b440 <__ieee754_fmod+0x214>)
 800b2d6:	4282      	cmp	r2, r0
 800b2d8:	db57      	blt.n	800b38a <__ieee754_fmod+0x15e>
 800b2da:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b2de:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800b2e2:	1a89      	subs	r1, r1, r2
 800b2e4:	1b98      	subs	r0, r3, r6
 800b2e6:	eba4 070e 	sub.w	r7, r4, lr
 800b2ea:	2900      	cmp	r1, #0
 800b2ec:	d162      	bne.n	800b3b4 <__ieee754_fmod+0x188>
 800b2ee:	4574      	cmp	r4, lr
 800b2f0:	bf38      	it	cc
 800b2f2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	bfa4      	itt	ge
 800b2fa:	463c      	movge	r4, r7
 800b2fc:	4603      	movge	r3, r0
 800b2fe:	ea53 0104 	orrs.w	r1, r3, r4
 800b302:	d0c6      	beq.n	800b292 <__ieee754_fmod+0x66>
 800b304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b308:	db69      	blt.n	800b3de <__ieee754_fmod+0x1b2>
 800b30a:	494d      	ldr	r1, [pc, #308]	; (800b440 <__ieee754_fmod+0x214>)
 800b30c:	428a      	cmp	r2, r1
 800b30e:	db6c      	blt.n	800b3ea <__ieee754_fmod+0x1be>
 800b310:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b314:	432b      	orrs	r3, r5
 800b316:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800b31a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b31e:	4620      	mov	r0, r4
 800b320:	e7a7      	b.n	800b272 <__ieee754_fmod+0x46>
 800b322:	3901      	subs	r1, #1
 800b324:	005b      	lsls	r3, r3, #1
 800b326:	e7c3      	b.n	800b2b0 <__ieee754_fmod+0x84>
 800b328:	4945      	ldr	r1, [pc, #276]	; (800b440 <__ieee754_fmod+0x214>)
 800b32a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b32e:	2b00      	cmp	r3, #0
 800b330:	ddc0      	ble.n	800b2b4 <__ieee754_fmod+0x88>
 800b332:	3901      	subs	r1, #1
 800b334:	005b      	lsls	r3, r3, #1
 800b336:	e7fa      	b.n	800b32e <__ieee754_fmod+0x102>
 800b338:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b33c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b340:	e7b8      	b.n	800b2b4 <__ieee754_fmod+0x88>
 800b342:	3a01      	subs	r2, #1
 800b344:	005b      	lsls	r3, r3, #1
 800b346:	e7bc      	b.n	800b2c2 <__ieee754_fmod+0x96>
 800b348:	4a3d      	ldr	r2, [pc, #244]	; (800b440 <__ieee754_fmod+0x214>)
 800b34a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800b34e:	2b00      	cmp	r3, #0
 800b350:	ddb9      	ble.n	800b2c6 <__ieee754_fmod+0x9a>
 800b352:	3a01      	subs	r2, #1
 800b354:	005b      	lsls	r3, r3, #1
 800b356:	e7fa      	b.n	800b34e <__ieee754_fmod+0x122>
 800b358:	ea4f 522c 	mov.w	r2, ip, asr #20
 800b35c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b360:	e7b1      	b.n	800b2c6 <__ieee754_fmod+0x9a>
 800b362:	1a40      	subs	r0, r0, r1
 800b364:	281f      	cmp	r0, #31
 800b366:	dc0a      	bgt.n	800b37e <__ieee754_fmod+0x152>
 800b368:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800b36c:	fa08 f800 	lsl.w	r8, r8, r0
 800b370:	fa2a f303 	lsr.w	r3, sl, r3
 800b374:	ea43 0308 	orr.w	r3, r3, r8
 800b378:	fa0a f400 	lsl.w	r4, sl, r0
 800b37c:	e7aa      	b.n	800b2d4 <__ieee754_fmod+0xa8>
 800b37e:	4b31      	ldr	r3, [pc, #196]	; (800b444 <__ieee754_fmod+0x218>)
 800b380:	1a5b      	subs	r3, r3, r1
 800b382:	fa0a f303 	lsl.w	r3, sl, r3
 800b386:	2400      	movs	r4, #0
 800b388:	e7a4      	b.n	800b2d4 <__ieee754_fmod+0xa8>
 800b38a:	1a80      	subs	r0, r0, r2
 800b38c:	281f      	cmp	r0, #31
 800b38e:	dc0a      	bgt.n	800b3a6 <__ieee754_fmod+0x17a>
 800b390:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800b394:	fa0c fc00 	lsl.w	ip, ip, r0
 800b398:	fa27 f606 	lsr.w	r6, r7, r6
 800b39c:	ea46 060c 	orr.w	r6, r6, ip
 800b3a0:	fa07 fe00 	lsl.w	lr, r7, r0
 800b3a4:	e79d      	b.n	800b2e2 <__ieee754_fmod+0xb6>
 800b3a6:	4e27      	ldr	r6, [pc, #156]	; (800b444 <__ieee754_fmod+0x218>)
 800b3a8:	1ab6      	subs	r6, r6, r2
 800b3aa:	fa07 f606 	lsl.w	r6, r7, r6
 800b3ae:	f04f 0e00 	mov.w	lr, #0
 800b3b2:	e796      	b.n	800b2e2 <__ieee754_fmod+0xb6>
 800b3b4:	4574      	cmp	r4, lr
 800b3b6:	bf38      	it	cc
 800b3b8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	da05      	bge.n	800b3cc <__ieee754_fmod+0x1a0>
 800b3c0:	0fe0      	lsrs	r0, r4, #31
 800b3c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b3c6:	0064      	lsls	r4, r4, #1
 800b3c8:	3901      	subs	r1, #1
 800b3ca:	e78b      	b.n	800b2e4 <__ieee754_fmod+0xb8>
 800b3cc:	ea50 0307 	orrs.w	r3, r0, r7
 800b3d0:	f43f af5f 	beq.w	800b292 <__ieee754_fmod+0x66>
 800b3d4:	0ffb      	lsrs	r3, r7, #31
 800b3d6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b3da:	007c      	lsls	r4, r7, #1
 800b3dc:	e7f4      	b.n	800b3c8 <__ieee754_fmod+0x19c>
 800b3de:	0fe1      	lsrs	r1, r4, #31
 800b3e0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b3e4:	0064      	lsls	r4, r4, #1
 800b3e6:	3a01      	subs	r2, #1
 800b3e8:	e78c      	b.n	800b304 <__ieee754_fmod+0xd8>
 800b3ea:	1a89      	subs	r1, r1, r2
 800b3ec:	2914      	cmp	r1, #20
 800b3ee:	dc0a      	bgt.n	800b406 <__ieee754_fmod+0x1da>
 800b3f0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b3f4:	fa03 f202 	lsl.w	r2, r3, r2
 800b3f8:	40cc      	lsrs	r4, r1
 800b3fa:	4322      	orrs	r2, r4
 800b3fc:	410b      	asrs	r3, r1
 800b3fe:	ea43 0105 	orr.w	r1, r3, r5
 800b402:	4610      	mov	r0, r2
 800b404:	e735      	b.n	800b272 <__ieee754_fmod+0x46>
 800b406:	291f      	cmp	r1, #31
 800b408:	dc07      	bgt.n	800b41a <__ieee754_fmod+0x1ee>
 800b40a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b40e:	40cc      	lsrs	r4, r1
 800b410:	fa03 f202 	lsl.w	r2, r3, r2
 800b414:	4322      	orrs	r2, r4
 800b416:	462b      	mov	r3, r5
 800b418:	e7f1      	b.n	800b3fe <__ieee754_fmod+0x1d2>
 800b41a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b41e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b422:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b426:	32e2      	adds	r2, #226	; 0xe2
 800b428:	fa43 f202 	asr.w	r2, r3, r2
 800b42c:	e7f3      	b.n	800b416 <__ieee754_fmod+0x1ea>
 800b42e:	bf00      	nop
 800b430:	7fefffff 	.word	0x7fefffff
 800b434:	7ff00000 	.word	0x7ff00000
 800b438:	080108a8 	.word	0x080108a8
 800b43c:	fffffbed 	.word	0xfffffbed
 800b440:	fffffc02 	.word	0xfffffc02
 800b444:	fffffbe2 	.word	0xfffffbe2

0800b448 <__ieee754_pow>:
 800b448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	ed2d 8b06 	vpush	{d8-d10}
 800b450:	b089      	sub	sp, #36	; 0x24
 800b452:	ed8d 1b00 	vstr	d1, [sp]
 800b456:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b45a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b45e:	ea58 0102 	orrs.w	r1, r8, r2
 800b462:	ec57 6b10 	vmov	r6, r7, d0
 800b466:	d115      	bne.n	800b494 <__ieee754_pow+0x4c>
 800b468:	19b3      	adds	r3, r6, r6
 800b46a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b46e:	4152      	adcs	r2, r2
 800b470:	4299      	cmp	r1, r3
 800b472:	4b89      	ldr	r3, [pc, #548]	; (800b698 <__ieee754_pow+0x250>)
 800b474:	4193      	sbcs	r3, r2
 800b476:	f080 84d1 	bcs.w	800be1c <__ieee754_pow+0x9d4>
 800b47a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b47e:	4630      	mov	r0, r6
 800b480:	4639      	mov	r1, r7
 800b482:	f7f4 fefb 	bl	800027c <__adddf3>
 800b486:	ec41 0b10 	vmov	d0, r0, r1
 800b48a:	b009      	add	sp, #36	; 0x24
 800b48c:	ecbd 8b06 	vpop	{d8-d10}
 800b490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b494:	4b81      	ldr	r3, [pc, #516]	; (800b69c <__ieee754_pow+0x254>)
 800b496:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b49a:	429c      	cmp	r4, r3
 800b49c:	ee10 aa10 	vmov	sl, s0
 800b4a0:	463d      	mov	r5, r7
 800b4a2:	dc06      	bgt.n	800b4b2 <__ieee754_pow+0x6a>
 800b4a4:	d101      	bne.n	800b4aa <__ieee754_pow+0x62>
 800b4a6:	2e00      	cmp	r6, #0
 800b4a8:	d1e7      	bne.n	800b47a <__ieee754_pow+0x32>
 800b4aa:	4598      	cmp	r8, r3
 800b4ac:	dc01      	bgt.n	800b4b2 <__ieee754_pow+0x6a>
 800b4ae:	d10f      	bne.n	800b4d0 <__ieee754_pow+0x88>
 800b4b0:	b172      	cbz	r2, 800b4d0 <__ieee754_pow+0x88>
 800b4b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b4b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b4ba:	ea55 050a 	orrs.w	r5, r5, sl
 800b4be:	d1dc      	bne.n	800b47a <__ieee754_pow+0x32>
 800b4c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b4c4:	18db      	adds	r3, r3, r3
 800b4c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b4ca:	4152      	adcs	r2, r2
 800b4cc:	429d      	cmp	r5, r3
 800b4ce:	e7d0      	b.n	800b472 <__ieee754_pow+0x2a>
 800b4d0:	2d00      	cmp	r5, #0
 800b4d2:	da3b      	bge.n	800b54c <__ieee754_pow+0x104>
 800b4d4:	4b72      	ldr	r3, [pc, #456]	; (800b6a0 <__ieee754_pow+0x258>)
 800b4d6:	4598      	cmp	r8, r3
 800b4d8:	dc51      	bgt.n	800b57e <__ieee754_pow+0x136>
 800b4da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b4de:	4598      	cmp	r8, r3
 800b4e0:	f340 84ab 	ble.w	800be3a <__ieee754_pow+0x9f2>
 800b4e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b4e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b4ec:	2b14      	cmp	r3, #20
 800b4ee:	dd0f      	ble.n	800b510 <__ieee754_pow+0xc8>
 800b4f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b4f4:	fa22 f103 	lsr.w	r1, r2, r3
 800b4f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	f040 849c 	bne.w	800be3a <__ieee754_pow+0x9f2>
 800b502:	f001 0101 	and.w	r1, r1, #1
 800b506:	f1c1 0302 	rsb	r3, r1, #2
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	b182      	cbz	r2, 800b530 <__ieee754_pow+0xe8>
 800b50e:	e05f      	b.n	800b5d0 <__ieee754_pow+0x188>
 800b510:	2a00      	cmp	r2, #0
 800b512:	d15b      	bne.n	800b5cc <__ieee754_pow+0x184>
 800b514:	f1c3 0314 	rsb	r3, r3, #20
 800b518:	fa48 f103 	asr.w	r1, r8, r3
 800b51c:	fa01 f303 	lsl.w	r3, r1, r3
 800b520:	4543      	cmp	r3, r8
 800b522:	f040 8487 	bne.w	800be34 <__ieee754_pow+0x9ec>
 800b526:	f001 0101 	and.w	r1, r1, #1
 800b52a:	f1c1 0302 	rsb	r3, r1, #2
 800b52e:	9304      	str	r3, [sp, #16]
 800b530:	4b5c      	ldr	r3, [pc, #368]	; (800b6a4 <__ieee754_pow+0x25c>)
 800b532:	4598      	cmp	r8, r3
 800b534:	d132      	bne.n	800b59c <__ieee754_pow+0x154>
 800b536:	f1b9 0f00 	cmp.w	r9, #0
 800b53a:	f280 8477 	bge.w	800be2c <__ieee754_pow+0x9e4>
 800b53e:	4959      	ldr	r1, [pc, #356]	; (800b6a4 <__ieee754_pow+0x25c>)
 800b540:	4632      	mov	r2, r6
 800b542:	463b      	mov	r3, r7
 800b544:	2000      	movs	r0, #0
 800b546:	f7f5 f979 	bl	800083c <__aeabi_ddiv>
 800b54a:	e79c      	b.n	800b486 <__ieee754_pow+0x3e>
 800b54c:	2300      	movs	r3, #0
 800b54e:	9304      	str	r3, [sp, #16]
 800b550:	2a00      	cmp	r2, #0
 800b552:	d13d      	bne.n	800b5d0 <__ieee754_pow+0x188>
 800b554:	4b51      	ldr	r3, [pc, #324]	; (800b69c <__ieee754_pow+0x254>)
 800b556:	4598      	cmp	r8, r3
 800b558:	d1ea      	bne.n	800b530 <__ieee754_pow+0xe8>
 800b55a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b55e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b562:	ea53 030a 	orrs.w	r3, r3, sl
 800b566:	f000 8459 	beq.w	800be1c <__ieee754_pow+0x9d4>
 800b56a:	4b4f      	ldr	r3, [pc, #316]	; (800b6a8 <__ieee754_pow+0x260>)
 800b56c:	429c      	cmp	r4, r3
 800b56e:	dd08      	ble.n	800b582 <__ieee754_pow+0x13a>
 800b570:	f1b9 0f00 	cmp.w	r9, #0
 800b574:	f2c0 8456 	blt.w	800be24 <__ieee754_pow+0x9dc>
 800b578:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b57c:	e783      	b.n	800b486 <__ieee754_pow+0x3e>
 800b57e:	2302      	movs	r3, #2
 800b580:	e7e5      	b.n	800b54e <__ieee754_pow+0x106>
 800b582:	f1b9 0f00 	cmp.w	r9, #0
 800b586:	f04f 0000 	mov.w	r0, #0
 800b58a:	f04f 0100 	mov.w	r1, #0
 800b58e:	f6bf af7a 	bge.w	800b486 <__ieee754_pow+0x3e>
 800b592:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b596:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b59a:	e774      	b.n	800b486 <__ieee754_pow+0x3e>
 800b59c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b5a0:	d106      	bne.n	800b5b0 <__ieee754_pow+0x168>
 800b5a2:	4632      	mov	r2, r6
 800b5a4:	463b      	mov	r3, r7
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	f7f5 f81d 	bl	80005e8 <__aeabi_dmul>
 800b5ae:	e76a      	b.n	800b486 <__ieee754_pow+0x3e>
 800b5b0:	4b3e      	ldr	r3, [pc, #248]	; (800b6ac <__ieee754_pow+0x264>)
 800b5b2:	4599      	cmp	r9, r3
 800b5b4:	d10c      	bne.n	800b5d0 <__ieee754_pow+0x188>
 800b5b6:	2d00      	cmp	r5, #0
 800b5b8:	db0a      	blt.n	800b5d0 <__ieee754_pow+0x188>
 800b5ba:	ec47 6b10 	vmov	d0, r6, r7
 800b5be:	b009      	add	sp, #36	; 0x24
 800b5c0:	ecbd 8b06 	vpop	{d8-d10}
 800b5c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c8:	f7ff b8ee 	b.w	800a7a8 <__ieee754_sqrt>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	9304      	str	r3, [sp, #16]
 800b5d0:	ec47 6b10 	vmov	d0, r6, r7
 800b5d4:	f7fe ffc6 	bl	800a564 <fabs>
 800b5d8:	ec51 0b10 	vmov	r0, r1, d0
 800b5dc:	f1ba 0f00 	cmp.w	sl, #0
 800b5e0:	d129      	bne.n	800b636 <__ieee754_pow+0x1ee>
 800b5e2:	b124      	cbz	r4, 800b5ee <__ieee754_pow+0x1a6>
 800b5e4:	4b2f      	ldr	r3, [pc, #188]	; (800b6a4 <__ieee754_pow+0x25c>)
 800b5e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d123      	bne.n	800b636 <__ieee754_pow+0x1ee>
 800b5ee:	f1b9 0f00 	cmp.w	r9, #0
 800b5f2:	da05      	bge.n	800b600 <__ieee754_pow+0x1b8>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	492a      	ldr	r1, [pc, #168]	; (800b6a4 <__ieee754_pow+0x25c>)
 800b5fc:	f7f5 f91e 	bl	800083c <__aeabi_ddiv>
 800b600:	2d00      	cmp	r5, #0
 800b602:	f6bf af40 	bge.w	800b486 <__ieee754_pow+0x3e>
 800b606:	9b04      	ldr	r3, [sp, #16]
 800b608:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b60c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b610:	431c      	orrs	r4, r3
 800b612:	d108      	bne.n	800b626 <__ieee754_pow+0x1de>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4610      	mov	r0, r2
 800b61a:	4619      	mov	r1, r3
 800b61c:	f7f4 fe2c 	bl	8000278 <__aeabi_dsub>
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	e78f      	b.n	800b546 <__ieee754_pow+0xfe>
 800b626:	9b04      	ldr	r3, [sp, #16]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	f47f af2c 	bne.w	800b486 <__ieee754_pow+0x3e>
 800b62e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b632:	4619      	mov	r1, r3
 800b634:	e727      	b.n	800b486 <__ieee754_pow+0x3e>
 800b636:	0feb      	lsrs	r3, r5, #31
 800b638:	3b01      	subs	r3, #1
 800b63a:	9306      	str	r3, [sp, #24]
 800b63c:	9a06      	ldr	r2, [sp, #24]
 800b63e:	9b04      	ldr	r3, [sp, #16]
 800b640:	4313      	orrs	r3, r2
 800b642:	d102      	bne.n	800b64a <__ieee754_pow+0x202>
 800b644:	4632      	mov	r2, r6
 800b646:	463b      	mov	r3, r7
 800b648:	e7e6      	b.n	800b618 <__ieee754_pow+0x1d0>
 800b64a:	4b19      	ldr	r3, [pc, #100]	; (800b6b0 <__ieee754_pow+0x268>)
 800b64c:	4598      	cmp	r8, r3
 800b64e:	f340 80fb 	ble.w	800b848 <__ieee754_pow+0x400>
 800b652:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b656:	4598      	cmp	r8, r3
 800b658:	4b13      	ldr	r3, [pc, #76]	; (800b6a8 <__ieee754_pow+0x260>)
 800b65a:	dd0c      	ble.n	800b676 <__ieee754_pow+0x22e>
 800b65c:	429c      	cmp	r4, r3
 800b65e:	dc0f      	bgt.n	800b680 <__ieee754_pow+0x238>
 800b660:	f1b9 0f00 	cmp.w	r9, #0
 800b664:	da0f      	bge.n	800b686 <__ieee754_pow+0x23e>
 800b666:	2000      	movs	r0, #0
 800b668:	b009      	add	sp, #36	; 0x24
 800b66a:	ecbd 8b06 	vpop	{d8-d10}
 800b66e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b672:	f001 bbb2 	b.w	800cdda <__math_oflow>
 800b676:	429c      	cmp	r4, r3
 800b678:	dbf2      	blt.n	800b660 <__ieee754_pow+0x218>
 800b67a:	4b0a      	ldr	r3, [pc, #40]	; (800b6a4 <__ieee754_pow+0x25c>)
 800b67c:	429c      	cmp	r4, r3
 800b67e:	dd19      	ble.n	800b6b4 <__ieee754_pow+0x26c>
 800b680:	f1b9 0f00 	cmp.w	r9, #0
 800b684:	dcef      	bgt.n	800b666 <__ieee754_pow+0x21e>
 800b686:	2000      	movs	r0, #0
 800b688:	b009      	add	sp, #36	; 0x24
 800b68a:	ecbd 8b06 	vpop	{d8-d10}
 800b68e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b692:	f001 bb99 	b.w	800cdc8 <__math_uflow>
 800b696:	bf00      	nop
 800b698:	fff00000 	.word	0xfff00000
 800b69c:	7ff00000 	.word	0x7ff00000
 800b6a0:	433fffff 	.word	0x433fffff
 800b6a4:	3ff00000 	.word	0x3ff00000
 800b6a8:	3fefffff 	.word	0x3fefffff
 800b6ac:	3fe00000 	.word	0x3fe00000
 800b6b0:	41e00000 	.word	0x41e00000
 800b6b4:	4b60      	ldr	r3, [pc, #384]	; (800b838 <__ieee754_pow+0x3f0>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f7f4 fdde 	bl	8000278 <__aeabi_dsub>
 800b6bc:	a354      	add	r3, pc, #336	; (adr r3, 800b810 <__ieee754_pow+0x3c8>)
 800b6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	460d      	mov	r5, r1
 800b6c6:	f7f4 ff8f 	bl	80005e8 <__aeabi_dmul>
 800b6ca:	a353      	add	r3, pc, #332	; (adr r3, 800b818 <__ieee754_pow+0x3d0>)
 800b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d0:	4606      	mov	r6, r0
 800b6d2:	460f      	mov	r7, r1
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	f7f4 ff86 	bl	80005e8 <__aeabi_dmul>
 800b6dc:	4b57      	ldr	r3, [pc, #348]	; (800b83c <__ieee754_pow+0x3f4>)
 800b6de:	4682      	mov	sl, r0
 800b6e0:	468b      	mov	fp, r1
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	f7f4 ff7e 	bl	80005e8 <__aeabi_dmul>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	a14b      	add	r1, pc, #300	; (adr r1, 800b820 <__ieee754_pow+0x3d8>)
 800b6f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6f6:	f7f4 fdbf 	bl	8000278 <__aeabi_dsub>
 800b6fa:	4622      	mov	r2, r4
 800b6fc:	462b      	mov	r3, r5
 800b6fe:	f7f4 ff73 	bl	80005e8 <__aeabi_dmul>
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	2000      	movs	r0, #0
 800b708:	494d      	ldr	r1, [pc, #308]	; (800b840 <__ieee754_pow+0x3f8>)
 800b70a:	f7f4 fdb5 	bl	8000278 <__aeabi_dsub>
 800b70e:	4622      	mov	r2, r4
 800b710:	4680      	mov	r8, r0
 800b712:	4689      	mov	r9, r1
 800b714:	462b      	mov	r3, r5
 800b716:	4620      	mov	r0, r4
 800b718:	4629      	mov	r1, r5
 800b71a:	f7f4 ff65 	bl	80005e8 <__aeabi_dmul>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	4640      	mov	r0, r8
 800b724:	4649      	mov	r1, r9
 800b726:	f7f4 ff5f 	bl	80005e8 <__aeabi_dmul>
 800b72a:	a33f      	add	r3, pc, #252	; (adr r3, 800b828 <__ieee754_pow+0x3e0>)
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	f7f4 ff5a 	bl	80005e8 <__aeabi_dmul>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4650      	mov	r0, sl
 800b73a:	4659      	mov	r1, fp
 800b73c:	f7f4 fd9c 	bl	8000278 <__aeabi_dsub>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4680      	mov	r8, r0
 800b746:	4689      	mov	r9, r1
 800b748:	4630      	mov	r0, r6
 800b74a:	4639      	mov	r1, r7
 800b74c:	f7f4 fd96 	bl	800027c <__adddf3>
 800b750:	2000      	movs	r0, #0
 800b752:	4632      	mov	r2, r6
 800b754:	463b      	mov	r3, r7
 800b756:	4604      	mov	r4, r0
 800b758:	460d      	mov	r5, r1
 800b75a:	f7f4 fd8d 	bl	8000278 <__aeabi_dsub>
 800b75e:	4602      	mov	r2, r0
 800b760:	460b      	mov	r3, r1
 800b762:	4640      	mov	r0, r8
 800b764:	4649      	mov	r1, r9
 800b766:	f7f4 fd87 	bl	8000278 <__aeabi_dsub>
 800b76a:	9b04      	ldr	r3, [sp, #16]
 800b76c:	9a06      	ldr	r2, [sp, #24]
 800b76e:	3b01      	subs	r3, #1
 800b770:	4313      	orrs	r3, r2
 800b772:	4682      	mov	sl, r0
 800b774:	468b      	mov	fp, r1
 800b776:	f040 81e7 	bne.w	800bb48 <__ieee754_pow+0x700>
 800b77a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b830 <__ieee754_pow+0x3e8>
 800b77e:	eeb0 8a47 	vmov.f32	s16, s14
 800b782:	eef0 8a67 	vmov.f32	s17, s15
 800b786:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b78a:	2600      	movs	r6, #0
 800b78c:	4632      	mov	r2, r6
 800b78e:	463b      	mov	r3, r7
 800b790:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b794:	f7f4 fd70 	bl	8000278 <__aeabi_dsub>
 800b798:	4622      	mov	r2, r4
 800b79a:	462b      	mov	r3, r5
 800b79c:	f7f4 ff24 	bl	80005e8 <__aeabi_dmul>
 800b7a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7a4:	4680      	mov	r8, r0
 800b7a6:	4689      	mov	r9, r1
 800b7a8:	4650      	mov	r0, sl
 800b7aa:	4659      	mov	r1, fp
 800b7ac:	f7f4 ff1c 	bl	80005e8 <__aeabi_dmul>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	4649      	mov	r1, r9
 800b7b8:	f7f4 fd60 	bl	800027c <__adddf3>
 800b7bc:	4632      	mov	r2, r6
 800b7be:	463b      	mov	r3, r7
 800b7c0:	4680      	mov	r8, r0
 800b7c2:	4689      	mov	r9, r1
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	4629      	mov	r1, r5
 800b7c8:	f7f4 ff0e 	bl	80005e8 <__aeabi_dmul>
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	460d      	mov	r5, r1
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	f7f4 fd50 	bl	800027c <__adddf3>
 800b7dc:	4b19      	ldr	r3, [pc, #100]	; (800b844 <__ieee754_pow+0x3fc>)
 800b7de:	4299      	cmp	r1, r3
 800b7e0:	ec45 4b19 	vmov	d9, r4, r5
 800b7e4:	4606      	mov	r6, r0
 800b7e6:	460f      	mov	r7, r1
 800b7e8:	468b      	mov	fp, r1
 800b7ea:	f340 82f0 	ble.w	800bdce <__ieee754_pow+0x986>
 800b7ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b7f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b7f6:	4303      	orrs	r3, r0
 800b7f8:	f000 81e4 	beq.w	800bbc4 <__ieee754_pow+0x77c>
 800b7fc:	ec51 0b18 	vmov	r0, r1, d8
 800b800:	2200      	movs	r2, #0
 800b802:	2300      	movs	r3, #0
 800b804:	f7f5 f962 	bl	8000acc <__aeabi_dcmplt>
 800b808:	3800      	subs	r0, #0
 800b80a:	bf18      	it	ne
 800b80c:	2001      	movne	r0, #1
 800b80e:	e72b      	b.n	800b668 <__ieee754_pow+0x220>
 800b810:	60000000 	.word	0x60000000
 800b814:	3ff71547 	.word	0x3ff71547
 800b818:	f85ddf44 	.word	0xf85ddf44
 800b81c:	3e54ae0b 	.word	0x3e54ae0b
 800b820:	55555555 	.word	0x55555555
 800b824:	3fd55555 	.word	0x3fd55555
 800b828:	652b82fe 	.word	0x652b82fe
 800b82c:	3ff71547 	.word	0x3ff71547
 800b830:	00000000 	.word	0x00000000
 800b834:	bff00000 	.word	0xbff00000
 800b838:	3ff00000 	.word	0x3ff00000
 800b83c:	3fd00000 	.word	0x3fd00000
 800b840:	3fe00000 	.word	0x3fe00000
 800b844:	408fffff 	.word	0x408fffff
 800b848:	4bd5      	ldr	r3, [pc, #852]	; (800bba0 <__ieee754_pow+0x758>)
 800b84a:	402b      	ands	r3, r5
 800b84c:	2200      	movs	r2, #0
 800b84e:	b92b      	cbnz	r3, 800b85c <__ieee754_pow+0x414>
 800b850:	4bd4      	ldr	r3, [pc, #848]	; (800bba4 <__ieee754_pow+0x75c>)
 800b852:	f7f4 fec9 	bl	80005e8 <__aeabi_dmul>
 800b856:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b85a:	460c      	mov	r4, r1
 800b85c:	1523      	asrs	r3, r4, #20
 800b85e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b862:	4413      	add	r3, r2
 800b864:	9305      	str	r3, [sp, #20]
 800b866:	4bd0      	ldr	r3, [pc, #832]	; (800bba8 <__ieee754_pow+0x760>)
 800b868:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b86c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b870:	429c      	cmp	r4, r3
 800b872:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b876:	dd08      	ble.n	800b88a <__ieee754_pow+0x442>
 800b878:	4bcc      	ldr	r3, [pc, #816]	; (800bbac <__ieee754_pow+0x764>)
 800b87a:	429c      	cmp	r4, r3
 800b87c:	f340 8162 	ble.w	800bb44 <__ieee754_pow+0x6fc>
 800b880:	9b05      	ldr	r3, [sp, #20]
 800b882:	3301      	adds	r3, #1
 800b884:	9305      	str	r3, [sp, #20]
 800b886:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b88a:	2400      	movs	r4, #0
 800b88c:	00e3      	lsls	r3, r4, #3
 800b88e:	9307      	str	r3, [sp, #28]
 800b890:	4bc7      	ldr	r3, [pc, #796]	; (800bbb0 <__ieee754_pow+0x768>)
 800b892:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b896:	ed93 7b00 	vldr	d7, [r3]
 800b89a:	4629      	mov	r1, r5
 800b89c:	ec53 2b17 	vmov	r2, r3, d7
 800b8a0:	eeb0 9a47 	vmov.f32	s18, s14
 800b8a4:	eef0 9a67 	vmov.f32	s19, s15
 800b8a8:	4682      	mov	sl, r0
 800b8aa:	f7f4 fce5 	bl	8000278 <__aeabi_dsub>
 800b8ae:	4652      	mov	r2, sl
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	460f      	mov	r7, r1
 800b8b4:	462b      	mov	r3, r5
 800b8b6:	ec51 0b19 	vmov	r0, r1, d9
 800b8ba:	f7f4 fcdf 	bl	800027c <__adddf3>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	49bb      	ldr	r1, [pc, #748]	; (800bbb4 <__ieee754_pow+0x76c>)
 800b8c6:	f7f4 ffb9 	bl	800083c <__aeabi_ddiv>
 800b8ca:	ec41 0b1a 	vmov	d10, r0, r1
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	4639      	mov	r1, r7
 800b8d6:	f7f4 fe87 	bl	80005e8 <__aeabi_dmul>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8e0:	9302      	str	r3, [sp, #8]
 800b8e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b8e6:	46ab      	mov	fp, r5
 800b8e8:	106d      	asrs	r5, r5, #1
 800b8ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b8ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b8f2:	ec41 0b18 	vmov	d8, r0, r1
 800b8f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	4640      	mov	r0, r8
 800b8fe:	4649      	mov	r1, r9
 800b900:	4614      	mov	r4, r2
 800b902:	461d      	mov	r5, r3
 800b904:	f7f4 fe70 	bl	80005e8 <__aeabi_dmul>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	4630      	mov	r0, r6
 800b90e:	4639      	mov	r1, r7
 800b910:	f7f4 fcb2 	bl	8000278 <__aeabi_dsub>
 800b914:	ec53 2b19 	vmov	r2, r3, d9
 800b918:	4606      	mov	r6, r0
 800b91a:	460f      	mov	r7, r1
 800b91c:	4620      	mov	r0, r4
 800b91e:	4629      	mov	r1, r5
 800b920:	f7f4 fcaa 	bl	8000278 <__aeabi_dsub>
 800b924:	4602      	mov	r2, r0
 800b926:	460b      	mov	r3, r1
 800b928:	4650      	mov	r0, sl
 800b92a:	4659      	mov	r1, fp
 800b92c:	f7f4 fca4 	bl	8000278 <__aeabi_dsub>
 800b930:	4642      	mov	r2, r8
 800b932:	464b      	mov	r3, r9
 800b934:	f7f4 fe58 	bl	80005e8 <__aeabi_dmul>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4630      	mov	r0, r6
 800b93e:	4639      	mov	r1, r7
 800b940:	f7f4 fc9a 	bl	8000278 <__aeabi_dsub>
 800b944:	ec53 2b1a 	vmov	r2, r3, d10
 800b948:	f7f4 fe4e 	bl	80005e8 <__aeabi_dmul>
 800b94c:	ec53 2b18 	vmov	r2, r3, d8
 800b950:	ec41 0b19 	vmov	d9, r0, r1
 800b954:	ec51 0b18 	vmov	r0, r1, d8
 800b958:	f7f4 fe46 	bl	80005e8 <__aeabi_dmul>
 800b95c:	a37c      	add	r3, pc, #496	; (adr r3, 800bb50 <__ieee754_pow+0x708>)
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	4604      	mov	r4, r0
 800b964:	460d      	mov	r5, r1
 800b966:	f7f4 fe3f 	bl	80005e8 <__aeabi_dmul>
 800b96a:	a37b      	add	r3, pc, #492	; (adr r3, 800bb58 <__ieee754_pow+0x710>)
 800b96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b970:	f7f4 fc84 	bl	800027c <__adddf3>
 800b974:	4622      	mov	r2, r4
 800b976:	462b      	mov	r3, r5
 800b978:	f7f4 fe36 	bl	80005e8 <__aeabi_dmul>
 800b97c:	a378      	add	r3, pc, #480	; (adr r3, 800bb60 <__ieee754_pow+0x718>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f7f4 fc7b 	bl	800027c <__adddf3>
 800b986:	4622      	mov	r2, r4
 800b988:	462b      	mov	r3, r5
 800b98a:	f7f4 fe2d 	bl	80005e8 <__aeabi_dmul>
 800b98e:	a376      	add	r3, pc, #472	; (adr r3, 800bb68 <__ieee754_pow+0x720>)
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	f7f4 fc72 	bl	800027c <__adddf3>
 800b998:	4622      	mov	r2, r4
 800b99a:	462b      	mov	r3, r5
 800b99c:	f7f4 fe24 	bl	80005e8 <__aeabi_dmul>
 800b9a0:	a373      	add	r3, pc, #460	; (adr r3, 800bb70 <__ieee754_pow+0x728>)
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	f7f4 fc69 	bl	800027c <__adddf3>
 800b9aa:	4622      	mov	r2, r4
 800b9ac:	462b      	mov	r3, r5
 800b9ae:	f7f4 fe1b 	bl	80005e8 <__aeabi_dmul>
 800b9b2:	a371      	add	r3, pc, #452	; (adr r3, 800bb78 <__ieee754_pow+0x730>)
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f7f4 fc60 	bl	800027c <__adddf3>
 800b9bc:	4622      	mov	r2, r4
 800b9be:	4606      	mov	r6, r0
 800b9c0:	460f      	mov	r7, r1
 800b9c2:	462b      	mov	r3, r5
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	f7f4 fe0e 	bl	80005e8 <__aeabi_dmul>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	f7f4 fe08 	bl	80005e8 <__aeabi_dmul>
 800b9d8:	4642      	mov	r2, r8
 800b9da:	4604      	mov	r4, r0
 800b9dc:	460d      	mov	r5, r1
 800b9de:	464b      	mov	r3, r9
 800b9e0:	ec51 0b18 	vmov	r0, r1, d8
 800b9e4:	f7f4 fc4a 	bl	800027c <__adddf3>
 800b9e8:	ec53 2b19 	vmov	r2, r3, d9
 800b9ec:	f7f4 fdfc 	bl	80005e8 <__aeabi_dmul>
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	462b      	mov	r3, r5
 800b9f4:	f7f4 fc42 	bl	800027c <__adddf3>
 800b9f8:	4642      	mov	r2, r8
 800b9fa:	4682      	mov	sl, r0
 800b9fc:	468b      	mov	fp, r1
 800b9fe:	464b      	mov	r3, r9
 800ba00:	4640      	mov	r0, r8
 800ba02:	4649      	mov	r1, r9
 800ba04:	f7f4 fdf0 	bl	80005e8 <__aeabi_dmul>
 800ba08:	4b6b      	ldr	r3, [pc, #428]	; (800bbb8 <__ieee754_pow+0x770>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	460f      	mov	r7, r1
 800ba10:	f7f4 fc34 	bl	800027c <__adddf3>
 800ba14:	4652      	mov	r2, sl
 800ba16:	465b      	mov	r3, fp
 800ba18:	f7f4 fc30 	bl	800027c <__adddf3>
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	4604      	mov	r4, r0
 800ba20:	460d      	mov	r5, r1
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	4640      	mov	r0, r8
 800ba28:	4649      	mov	r1, r9
 800ba2a:	f7f4 fddd 	bl	80005e8 <__aeabi_dmul>
 800ba2e:	4b62      	ldr	r3, [pc, #392]	; (800bbb8 <__ieee754_pow+0x770>)
 800ba30:	4680      	mov	r8, r0
 800ba32:	4689      	mov	r9, r1
 800ba34:	2200      	movs	r2, #0
 800ba36:	4620      	mov	r0, r4
 800ba38:	4629      	mov	r1, r5
 800ba3a:	f7f4 fc1d 	bl	8000278 <__aeabi_dsub>
 800ba3e:	4632      	mov	r2, r6
 800ba40:	463b      	mov	r3, r7
 800ba42:	f7f4 fc19 	bl	8000278 <__aeabi_dsub>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4650      	mov	r0, sl
 800ba4c:	4659      	mov	r1, fp
 800ba4e:	f7f4 fc13 	bl	8000278 <__aeabi_dsub>
 800ba52:	ec53 2b18 	vmov	r2, r3, d8
 800ba56:	f7f4 fdc7 	bl	80005e8 <__aeabi_dmul>
 800ba5a:	4622      	mov	r2, r4
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	460f      	mov	r7, r1
 800ba60:	462b      	mov	r3, r5
 800ba62:	ec51 0b19 	vmov	r0, r1, d9
 800ba66:	f7f4 fdbf 	bl	80005e8 <__aeabi_dmul>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4630      	mov	r0, r6
 800ba70:	4639      	mov	r1, r7
 800ba72:	f7f4 fc03 	bl	800027c <__adddf3>
 800ba76:	4606      	mov	r6, r0
 800ba78:	460f      	mov	r7, r1
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4640      	mov	r0, r8
 800ba80:	4649      	mov	r1, r9
 800ba82:	f7f4 fbfb 	bl	800027c <__adddf3>
 800ba86:	a33e      	add	r3, pc, #248	; (adr r3, 800bb80 <__ieee754_pow+0x738>)
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	4604      	mov	r4, r0
 800ba90:	460d      	mov	r5, r1
 800ba92:	f7f4 fda9 	bl	80005e8 <__aeabi_dmul>
 800ba96:	4642      	mov	r2, r8
 800ba98:	ec41 0b18 	vmov	d8, r0, r1
 800ba9c:	464b      	mov	r3, r9
 800ba9e:	4620      	mov	r0, r4
 800baa0:	4629      	mov	r1, r5
 800baa2:	f7f4 fbe9 	bl	8000278 <__aeabi_dsub>
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	4630      	mov	r0, r6
 800baac:	4639      	mov	r1, r7
 800baae:	f7f4 fbe3 	bl	8000278 <__aeabi_dsub>
 800bab2:	a335      	add	r3, pc, #212	; (adr r3, 800bb88 <__ieee754_pow+0x740>)
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	f7f4 fd96 	bl	80005e8 <__aeabi_dmul>
 800babc:	a334      	add	r3, pc, #208	; (adr r3, 800bb90 <__ieee754_pow+0x748>)
 800babe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac2:	4606      	mov	r6, r0
 800bac4:	460f      	mov	r7, r1
 800bac6:	4620      	mov	r0, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	f7f4 fd8d 	bl	80005e8 <__aeabi_dmul>
 800bace:	4602      	mov	r2, r0
 800bad0:	460b      	mov	r3, r1
 800bad2:	4630      	mov	r0, r6
 800bad4:	4639      	mov	r1, r7
 800bad6:	f7f4 fbd1 	bl	800027c <__adddf3>
 800bada:	9a07      	ldr	r2, [sp, #28]
 800badc:	4b37      	ldr	r3, [pc, #220]	; (800bbbc <__ieee754_pow+0x774>)
 800bade:	4413      	add	r3, r2
 800bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae4:	f7f4 fbca 	bl	800027c <__adddf3>
 800bae8:	4682      	mov	sl, r0
 800baea:	9805      	ldr	r0, [sp, #20]
 800baec:	468b      	mov	fp, r1
 800baee:	f7f4 fd11 	bl	8000514 <__aeabi_i2d>
 800baf2:	9a07      	ldr	r2, [sp, #28]
 800baf4:	4b32      	ldr	r3, [pc, #200]	; (800bbc0 <__ieee754_pow+0x778>)
 800baf6:	4413      	add	r3, r2
 800baf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bafc:	4606      	mov	r6, r0
 800bafe:	460f      	mov	r7, r1
 800bb00:	4652      	mov	r2, sl
 800bb02:	465b      	mov	r3, fp
 800bb04:	ec51 0b18 	vmov	r0, r1, d8
 800bb08:	f7f4 fbb8 	bl	800027c <__adddf3>
 800bb0c:	4642      	mov	r2, r8
 800bb0e:	464b      	mov	r3, r9
 800bb10:	f7f4 fbb4 	bl	800027c <__adddf3>
 800bb14:	4632      	mov	r2, r6
 800bb16:	463b      	mov	r3, r7
 800bb18:	f7f4 fbb0 	bl	800027c <__adddf3>
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	4632      	mov	r2, r6
 800bb20:	463b      	mov	r3, r7
 800bb22:	4604      	mov	r4, r0
 800bb24:	460d      	mov	r5, r1
 800bb26:	f7f4 fba7 	bl	8000278 <__aeabi_dsub>
 800bb2a:	4642      	mov	r2, r8
 800bb2c:	464b      	mov	r3, r9
 800bb2e:	f7f4 fba3 	bl	8000278 <__aeabi_dsub>
 800bb32:	ec53 2b18 	vmov	r2, r3, d8
 800bb36:	f7f4 fb9f 	bl	8000278 <__aeabi_dsub>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4650      	mov	r0, sl
 800bb40:	4659      	mov	r1, fp
 800bb42:	e610      	b.n	800b766 <__ieee754_pow+0x31e>
 800bb44:	2401      	movs	r4, #1
 800bb46:	e6a1      	b.n	800b88c <__ieee754_pow+0x444>
 800bb48:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bb98 <__ieee754_pow+0x750>
 800bb4c:	e617      	b.n	800b77e <__ieee754_pow+0x336>
 800bb4e:	bf00      	nop
 800bb50:	4a454eef 	.word	0x4a454eef
 800bb54:	3fca7e28 	.word	0x3fca7e28
 800bb58:	93c9db65 	.word	0x93c9db65
 800bb5c:	3fcd864a 	.word	0x3fcd864a
 800bb60:	a91d4101 	.word	0xa91d4101
 800bb64:	3fd17460 	.word	0x3fd17460
 800bb68:	518f264d 	.word	0x518f264d
 800bb6c:	3fd55555 	.word	0x3fd55555
 800bb70:	db6fabff 	.word	0xdb6fabff
 800bb74:	3fdb6db6 	.word	0x3fdb6db6
 800bb78:	33333303 	.word	0x33333303
 800bb7c:	3fe33333 	.word	0x3fe33333
 800bb80:	e0000000 	.word	0xe0000000
 800bb84:	3feec709 	.word	0x3feec709
 800bb88:	dc3a03fd 	.word	0xdc3a03fd
 800bb8c:	3feec709 	.word	0x3feec709
 800bb90:	145b01f5 	.word	0x145b01f5
 800bb94:	be3e2fe0 	.word	0xbe3e2fe0
 800bb98:	00000000 	.word	0x00000000
 800bb9c:	3ff00000 	.word	0x3ff00000
 800bba0:	7ff00000 	.word	0x7ff00000
 800bba4:	43400000 	.word	0x43400000
 800bba8:	0003988e 	.word	0x0003988e
 800bbac:	000bb679 	.word	0x000bb679
 800bbb0:	080108b8 	.word	0x080108b8
 800bbb4:	3ff00000 	.word	0x3ff00000
 800bbb8:	40080000 	.word	0x40080000
 800bbbc:	080108d8 	.word	0x080108d8
 800bbc0:	080108c8 	.word	0x080108c8
 800bbc4:	a3b3      	add	r3, pc, #716	; (adr r3, 800be94 <__ieee754_pow+0xa4c>)
 800bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbca:	4640      	mov	r0, r8
 800bbcc:	4649      	mov	r1, r9
 800bbce:	f7f4 fb55 	bl	800027c <__adddf3>
 800bbd2:	4622      	mov	r2, r4
 800bbd4:	ec41 0b1a 	vmov	d10, r0, r1
 800bbd8:	462b      	mov	r3, r5
 800bbda:	4630      	mov	r0, r6
 800bbdc:	4639      	mov	r1, r7
 800bbde:	f7f4 fb4b 	bl	8000278 <__aeabi_dsub>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	ec51 0b1a 	vmov	r0, r1, d10
 800bbea:	f7f4 ff8d 	bl	8000b08 <__aeabi_dcmpgt>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	f47f ae04 	bne.w	800b7fc <__ieee754_pow+0x3b4>
 800bbf4:	4aa2      	ldr	r2, [pc, #648]	; (800be80 <__ieee754_pow+0xa38>)
 800bbf6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	f340 8107 	ble.w	800be0e <__ieee754_pow+0x9c6>
 800bc00:	151b      	asrs	r3, r3, #20
 800bc02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bc06:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bc0a:	fa4a fa03 	asr.w	sl, sl, r3
 800bc0e:	44da      	add	sl, fp
 800bc10:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bc14:	489b      	ldr	r0, [pc, #620]	; (800be84 <__ieee754_pow+0xa3c>)
 800bc16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bc1a:	4108      	asrs	r0, r1
 800bc1c:	ea00 030a 	and.w	r3, r0, sl
 800bc20:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800bc24:	f1c1 0114 	rsb	r1, r1, #20
 800bc28:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bc2c:	fa4a fa01 	asr.w	sl, sl, r1
 800bc30:	f1bb 0f00 	cmp.w	fp, #0
 800bc34:	f04f 0200 	mov.w	r2, #0
 800bc38:	4620      	mov	r0, r4
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	bfb8      	it	lt
 800bc3e:	f1ca 0a00 	rsblt	sl, sl, #0
 800bc42:	f7f4 fb19 	bl	8000278 <__aeabi_dsub>
 800bc46:	ec41 0b19 	vmov	d9, r0, r1
 800bc4a:	4642      	mov	r2, r8
 800bc4c:	464b      	mov	r3, r9
 800bc4e:	ec51 0b19 	vmov	r0, r1, d9
 800bc52:	f7f4 fb13 	bl	800027c <__adddf3>
 800bc56:	a37a      	add	r3, pc, #488	; (adr r3, 800be40 <__ieee754_pow+0x9f8>)
 800bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	4604      	mov	r4, r0
 800bc60:	460d      	mov	r5, r1
 800bc62:	f7f4 fcc1 	bl	80005e8 <__aeabi_dmul>
 800bc66:	ec53 2b19 	vmov	r2, r3, d9
 800bc6a:	4606      	mov	r6, r0
 800bc6c:	460f      	mov	r7, r1
 800bc6e:	4620      	mov	r0, r4
 800bc70:	4629      	mov	r1, r5
 800bc72:	f7f4 fb01 	bl	8000278 <__aeabi_dsub>
 800bc76:	4602      	mov	r2, r0
 800bc78:	460b      	mov	r3, r1
 800bc7a:	4640      	mov	r0, r8
 800bc7c:	4649      	mov	r1, r9
 800bc7e:	f7f4 fafb 	bl	8000278 <__aeabi_dsub>
 800bc82:	a371      	add	r3, pc, #452	; (adr r3, 800be48 <__ieee754_pow+0xa00>)
 800bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc88:	f7f4 fcae 	bl	80005e8 <__aeabi_dmul>
 800bc8c:	a370      	add	r3, pc, #448	; (adr r3, 800be50 <__ieee754_pow+0xa08>)
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	4680      	mov	r8, r0
 800bc94:	4689      	mov	r9, r1
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	f7f4 fca5 	bl	80005e8 <__aeabi_dmul>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4640      	mov	r0, r8
 800bca4:	4649      	mov	r1, r9
 800bca6:	f7f4 fae9 	bl	800027c <__adddf3>
 800bcaa:	4604      	mov	r4, r0
 800bcac:	460d      	mov	r5, r1
 800bcae:	4602      	mov	r2, r0
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	f7f4 fae1 	bl	800027c <__adddf3>
 800bcba:	4632      	mov	r2, r6
 800bcbc:	463b      	mov	r3, r7
 800bcbe:	4680      	mov	r8, r0
 800bcc0:	4689      	mov	r9, r1
 800bcc2:	f7f4 fad9 	bl	8000278 <__aeabi_dsub>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	460b      	mov	r3, r1
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	f7f4 fad3 	bl	8000278 <__aeabi_dsub>
 800bcd2:	4642      	mov	r2, r8
 800bcd4:	4606      	mov	r6, r0
 800bcd6:	460f      	mov	r7, r1
 800bcd8:	464b      	mov	r3, r9
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4649      	mov	r1, r9
 800bcde:	f7f4 fc83 	bl	80005e8 <__aeabi_dmul>
 800bce2:	a35d      	add	r3, pc, #372	; (adr r3, 800be58 <__ieee754_pow+0xa10>)
 800bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce8:	4604      	mov	r4, r0
 800bcea:	460d      	mov	r5, r1
 800bcec:	f7f4 fc7c 	bl	80005e8 <__aeabi_dmul>
 800bcf0:	a35b      	add	r3, pc, #364	; (adr r3, 800be60 <__ieee754_pow+0xa18>)
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	f7f4 fabf 	bl	8000278 <__aeabi_dsub>
 800bcfa:	4622      	mov	r2, r4
 800bcfc:	462b      	mov	r3, r5
 800bcfe:	f7f4 fc73 	bl	80005e8 <__aeabi_dmul>
 800bd02:	a359      	add	r3, pc, #356	; (adr r3, 800be68 <__ieee754_pow+0xa20>)
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	f7f4 fab8 	bl	800027c <__adddf3>
 800bd0c:	4622      	mov	r2, r4
 800bd0e:	462b      	mov	r3, r5
 800bd10:	f7f4 fc6a 	bl	80005e8 <__aeabi_dmul>
 800bd14:	a356      	add	r3, pc, #344	; (adr r3, 800be70 <__ieee754_pow+0xa28>)
 800bd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1a:	f7f4 faad 	bl	8000278 <__aeabi_dsub>
 800bd1e:	4622      	mov	r2, r4
 800bd20:	462b      	mov	r3, r5
 800bd22:	f7f4 fc61 	bl	80005e8 <__aeabi_dmul>
 800bd26:	a354      	add	r3, pc, #336	; (adr r3, 800be78 <__ieee754_pow+0xa30>)
 800bd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2c:	f7f4 faa6 	bl	800027c <__adddf3>
 800bd30:	4622      	mov	r2, r4
 800bd32:	462b      	mov	r3, r5
 800bd34:	f7f4 fc58 	bl	80005e8 <__aeabi_dmul>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4640      	mov	r0, r8
 800bd3e:	4649      	mov	r1, r9
 800bd40:	f7f4 fa9a 	bl	8000278 <__aeabi_dsub>
 800bd44:	4604      	mov	r4, r0
 800bd46:	460d      	mov	r5, r1
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4640      	mov	r0, r8
 800bd4e:	4649      	mov	r1, r9
 800bd50:	f7f4 fc4a 	bl	80005e8 <__aeabi_dmul>
 800bd54:	2200      	movs	r2, #0
 800bd56:	ec41 0b19 	vmov	d9, r0, r1
 800bd5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd5e:	4620      	mov	r0, r4
 800bd60:	4629      	mov	r1, r5
 800bd62:	f7f4 fa89 	bl	8000278 <__aeabi_dsub>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	ec51 0b19 	vmov	r0, r1, d9
 800bd6e:	f7f4 fd65 	bl	800083c <__aeabi_ddiv>
 800bd72:	4632      	mov	r2, r6
 800bd74:	4604      	mov	r4, r0
 800bd76:	460d      	mov	r5, r1
 800bd78:	463b      	mov	r3, r7
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	f7f4 fc33 	bl	80005e8 <__aeabi_dmul>
 800bd82:	4632      	mov	r2, r6
 800bd84:	463b      	mov	r3, r7
 800bd86:	f7f4 fa79 	bl	800027c <__adddf3>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	4620      	mov	r0, r4
 800bd90:	4629      	mov	r1, r5
 800bd92:	f7f4 fa71 	bl	8000278 <__aeabi_dsub>
 800bd96:	4642      	mov	r2, r8
 800bd98:	464b      	mov	r3, r9
 800bd9a:	f7f4 fa6d 	bl	8000278 <__aeabi_dsub>
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4602      	mov	r2, r0
 800bda2:	4939      	ldr	r1, [pc, #228]	; (800be88 <__ieee754_pow+0xa40>)
 800bda4:	2000      	movs	r0, #0
 800bda6:	f7f4 fa67 	bl	8000278 <__aeabi_dsub>
 800bdaa:	ec41 0b10 	vmov	d0, r0, r1
 800bdae:	ee10 3a90 	vmov	r3, s1
 800bdb2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bdb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdba:	da2b      	bge.n	800be14 <__ieee754_pow+0x9cc>
 800bdbc:	4650      	mov	r0, sl
 800bdbe:	f000 ff67 	bl	800cc90 <scalbn>
 800bdc2:	ec51 0b10 	vmov	r0, r1, d0
 800bdc6:	ec53 2b18 	vmov	r2, r3, d8
 800bdca:	f7ff bbee 	b.w	800b5aa <__ieee754_pow+0x162>
 800bdce:	4b2f      	ldr	r3, [pc, #188]	; (800be8c <__ieee754_pow+0xa44>)
 800bdd0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bdd4:	429e      	cmp	r6, r3
 800bdd6:	f77f af0d 	ble.w	800bbf4 <__ieee754_pow+0x7ac>
 800bdda:	4b2d      	ldr	r3, [pc, #180]	; (800be90 <__ieee754_pow+0xa48>)
 800bddc:	440b      	add	r3, r1
 800bdde:	4303      	orrs	r3, r0
 800bde0:	d009      	beq.n	800bdf6 <__ieee754_pow+0x9ae>
 800bde2:	ec51 0b18 	vmov	r0, r1, d8
 800bde6:	2200      	movs	r2, #0
 800bde8:	2300      	movs	r3, #0
 800bdea:	f7f4 fe6f 	bl	8000acc <__aeabi_dcmplt>
 800bdee:	3800      	subs	r0, #0
 800bdf0:	bf18      	it	ne
 800bdf2:	2001      	movne	r0, #1
 800bdf4:	e448      	b.n	800b688 <__ieee754_pow+0x240>
 800bdf6:	4622      	mov	r2, r4
 800bdf8:	462b      	mov	r3, r5
 800bdfa:	f7f4 fa3d 	bl	8000278 <__aeabi_dsub>
 800bdfe:	4642      	mov	r2, r8
 800be00:	464b      	mov	r3, r9
 800be02:	f7f4 fe77 	bl	8000af4 <__aeabi_dcmpge>
 800be06:	2800      	cmp	r0, #0
 800be08:	f43f aef4 	beq.w	800bbf4 <__ieee754_pow+0x7ac>
 800be0c:	e7e9      	b.n	800bde2 <__ieee754_pow+0x99a>
 800be0e:	f04f 0a00 	mov.w	sl, #0
 800be12:	e71a      	b.n	800bc4a <__ieee754_pow+0x802>
 800be14:	ec51 0b10 	vmov	r0, r1, d0
 800be18:	4619      	mov	r1, r3
 800be1a:	e7d4      	b.n	800bdc6 <__ieee754_pow+0x97e>
 800be1c:	491a      	ldr	r1, [pc, #104]	; (800be88 <__ieee754_pow+0xa40>)
 800be1e:	2000      	movs	r0, #0
 800be20:	f7ff bb31 	b.w	800b486 <__ieee754_pow+0x3e>
 800be24:	2000      	movs	r0, #0
 800be26:	2100      	movs	r1, #0
 800be28:	f7ff bb2d 	b.w	800b486 <__ieee754_pow+0x3e>
 800be2c:	4630      	mov	r0, r6
 800be2e:	4639      	mov	r1, r7
 800be30:	f7ff bb29 	b.w	800b486 <__ieee754_pow+0x3e>
 800be34:	9204      	str	r2, [sp, #16]
 800be36:	f7ff bb7b 	b.w	800b530 <__ieee754_pow+0xe8>
 800be3a:	2300      	movs	r3, #0
 800be3c:	f7ff bb65 	b.w	800b50a <__ieee754_pow+0xc2>
 800be40:	00000000 	.word	0x00000000
 800be44:	3fe62e43 	.word	0x3fe62e43
 800be48:	fefa39ef 	.word	0xfefa39ef
 800be4c:	3fe62e42 	.word	0x3fe62e42
 800be50:	0ca86c39 	.word	0x0ca86c39
 800be54:	be205c61 	.word	0xbe205c61
 800be58:	72bea4d0 	.word	0x72bea4d0
 800be5c:	3e663769 	.word	0x3e663769
 800be60:	c5d26bf1 	.word	0xc5d26bf1
 800be64:	3ebbbd41 	.word	0x3ebbbd41
 800be68:	af25de2c 	.word	0xaf25de2c
 800be6c:	3f11566a 	.word	0x3f11566a
 800be70:	16bebd93 	.word	0x16bebd93
 800be74:	3f66c16c 	.word	0x3f66c16c
 800be78:	5555553e 	.word	0x5555553e
 800be7c:	3fc55555 	.word	0x3fc55555
 800be80:	3fe00000 	.word	0x3fe00000
 800be84:	fff00000 	.word	0xfff00000
 800be88:	3ff00000 	.word	0x3ff00000
 800be8c:	4090cbff 	.word	0x4090cbff
 800be90:	3f6f3400 	.word	0x3f6f3400
 800be94:	652b82fe 	.word	0x652b82fe
 800be98:	3c971547 	.word	0x3c971547
 800be9c:	00000000 	.word	0x00000000

0800bea0 <__ieee754_rem_pio2>:
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	ed2d 8b02 	vpush	{d8}
 800bea8:	ec55 4b10 	vmov	r4, r5, d0
 800beac:	4bca      	ldr	r3, [pc, #808]	; (800c1d8 <__ieee754_rem_pio2+0x338>)
 800beae:	b08b      	sub	sp, #44	; 0x2c
 800beb0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800beb4:	4598      	cmp	r8, r3
 800beb6:	4682      	mov	sl, r0
 800beb8:	9502      	str	r5, [sp, #8]
 800beba:	dc08      	bgt.n	800bece <__ieee754_rem_pio2+0x2e>
 800bebc:	2200      	movs	r2, #0
 800bebe:	2300      	movs	r3, #0
 800bec0:	ed80 0b00 	vstr	d0, [r0]
 800bec4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bec8:	f04f 0b00 	mov.w	fp, #0
 800becc:	e028      	b.n	800bf20 <__ieee754_rem_pio2+0x80>
 800bece:	4bc3      	ldr	r3, [pc, #780]	; (800c1dc <__ieee754_rem_pio2+0x33c>)
 800bed0:	4598      	cmp	r8, r3
 800bed2:	dc78      	bgt.n	800bfc6 <__ieee754_rem_pio2+0x126>
 800bed4:	9b02      	ldr	r3, [sp, #8]
 800bed6:	4ec2      	ldr	r6, [pc, #776]	; (800c1e0 <__ieee754_rem_pio2+0x340>)
 800bed8:	2b00      	cmp	r3, #0
 800beda:	ee10 0a10 	vmov	r0, s0
 800bede:	a3b0      	add	r3, pc, #704	; (adr r3, 800c1a0 <__ieee754_rem_pio2+0x300>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	4629      	mov	r1, r5
 800bee6:	dd39      	ble.n	800bf5c <__ieee754_rem_pio2+0xbc>
 800bee8:	f7f4 f9c6 	bl	8000278 <__aeabi_dsub>
 800beec:	45b0      	cmp	r8, r6
 800beee:	4604      	mov	r4, r0
 800bef0:	460d      	mov	r5, r1
 800bef2:	d01b      	beq.n	800bf2c <__ieee754_rem_pio2+0x8c>
 800bef4:	a3ac      	add	r3, pc, #688	; (adr r3, 800c1a8 <__ieee754_rem_pio2+0x308>)
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	f7f4 f9bd 	bl	8000278 <__aeabi_dsub>
 800befe:	4602      	mov	r2, r0
 800bf00:	460b      	mov	r3, r1
 800bf02:	e9ca 2300 	strd	r2, r3, [sl]
 800bf06:	4620      	mov	r0, r4
 800bf08:	4629      	mov	r1, r5
 800bf0a:	f7f4 f9b5 	bl	8000278 <__aeabi_dsub>
 800bf0e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c1a8 <__ieee754_rem_pio2+0x308>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	f7f4 f9b0 	bl	8000278 <__aeabi_dsub>
 800bf18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bf1c:	f04f 0b01 	mov.w	fp, #1
 800bf20:	4658      	mov	r0, fp
 800bf22:	b00b      	add	sp, #44	; 0x2c
 800bf24:	ecbd 8b02 	vpop	{d8}
 800bf28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf2c:	a3a0      	add	r3, pc, #640	; (adr r3, 800c1b0 <__ieee754_rem_pio2+0x310>)
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	f7f4 f9a1 	bl	8000278 <__aeabi_dsub>
 800bf36:	a3a0      	add	r3, pc, #640	; (adr r3, 800c1b8 <__ieee754_rem_pio2+0x318>)
 800bf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	460d      	mov	r5, r1
 800bf40:	f7f4 f99a 	bl	8000278 <__aeabi_dsub>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	e9ca 2300 	strd	r2, r3, [sl]
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	4629      	mov	r1, r5
 800bf50:	f7f4 f992 	bl	8000278 <__aeabi_dsub>
 800bf54:	a398      	add	r3, pc, #608	; (adr r3, 800c1b8 <__ieee754_rem_pio2+0x318>)
 800bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5a:	e7db      	b.n	800bf14 <__ieee754_rem_pio2+0x74>
 800bf5c:	f7f4 f98e 	bl	800027c <__adddf3>
 800bf60:	45b0      	cmp	r8, r6
 800bf62:	4604      	mov	r4, r0
 800bf64:	460d      	mov	r5, r1
 800bf66:	d016      	beq.n	800bf96 <__ieee754_rem_pio2+0xf6>
 800bf68:	a38f      	add	r3, pc, #572	; (adr r3, 800c1a8 <__ieee754_rem_pio2+0x308>)
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	f7f4 f985 	bl	800027c <__adddf3>
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	e9ca 2300 	strd	r2, r3, [sl]
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	f7f4 f97b 	bl	8000278 <__aeabi_dsub>
 800bf82:	a389      	add	r3, pc, #548	; (adr r3, 800c1a8 <__ieee754_rem_pio2+0x308>)
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	f7f4 f978 	bl	800027c <__adddf3>
 800bf8c:	f04f 3bff 	mov.w	fp, #4294967295
 800bf90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bf94:	e7c4      	b.n	800bf20 <__ieee754_rem_pio2+0x80>
 800bf96:	a386      	add	r3, pc, #536	; (adr r3, 800c1b0 <__ieee754_rem_pio2+0x310>)
 800bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9c:	f7f4 f96e 	bl	800027c <__adddf3>
 800bfa0:	a385      	add	r3, pc, #532	; (adr r3, 800c1b8 <__ieee754_rem_pio2+0x318>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	460d      	mov	r5, r1
 800bfaa:	f7f4 f967 	bl	800027c <__adddf3>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	e9ca 2300 	strd	r2, r3, [sl]
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	4629      	mov	r1, r5
 800bfba:	f7f4 f95d 	bl	8000278 <__aeabi_dsub>
 800bfbe:	a37e      	add	r3, pc, #504	; (adr r3, 800c1b8 <__ieee754_rem_pio2+0x318>)
 800bfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc4:	e7e0      	b.n	800bf88 <__ieee754_rem_pio2+0xe8>
 800bfc6:	4b87      	ldr	r3, [pc, #540]	; (800c1e4 <__ieee754_rem_pio2+0x344>)
 800bfc8:	4598      	cmp	r8, r3
 800bfca:	f300 80d8 	bgt.w	800c17e <__ieee754_rem_pio2+0x2de>
 800bfce:	f7fe fac9 	bl	800a564 <fabs>
 800bfd2:	ec55 4b10 	vmov	r4, r5, d0
 800bfd6:	ee10 0a10 	vmov	r0, s0
 800bfda:	a379      	add	r3, pc, #484	; (adr r3, 800c1c0 <__ieee754_rem_pio2+0x320>)
 800bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	f7f4 fb01 	bl	80005e8 <__aeabi_dmul>
 800bfe6:	4b80      	ldr	r3, [pc, #512]	; (800c1e8 <__ieee754_rem_pio2+0x348>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f7f4 f947 	bl	800027c <__adddf3>
 800bfee:	f7f4 fdab 	bl	8000b48 <__aeabi_d2iz>
 800bff2:	4683      	mov	fp, r0
 800bff4:	f7f4 fa8e 	bl	8000514 <__aeabi_i2d>
 800bff8:	4602      	mov	r2, r0
 800bffa:	460b      	mov	r3, r1
 800bffc:	ec43 2b18 	vmov	d8, r2, r3
 800c000:	a367      	add	r3, pc, #412	; (adr r3, 800c1a0 <__ieee754_rem_pio2+0x300>)
 800c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c006:	f7f4 faef 	bl	80005e8 <__aeabi_dmul>
 800c00a:	4602      	mov	r2, r0
 800c00c:	460b      	mov	r3, r1
 800c00e:	4620      	mov	r0, r4
 800c010:	4629      	mov	r1, r5
 800c012:	f7f4 f931 	bl	8000278 <__aeabi_dsub>
 800c016:	a364      	add	r3, pc, #400	; (adr r3, 800c1a8 <__ieee754_rem_pio2+0x308>)
 800c018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01c:	4606      	mov	r6, r0
 800c01e:	460f      	mov	r7, r1
 800c020:	ec51 0b18 	vmov	r0, r1, d8
 800c024:	f7f4 fae0 	bl	80005e8 <__aeabi_dmul>
 800c028:	f1bb 0f1f 	cmp.w	fp, #31
 800c02c:	4604      	mov	r4, r0
 800c02e:	460d      	mov	r5, r1
 800c030:	dc0d      	bgt.n	800c04e <__ieee754_rem_pio2+0x1ae>
 800c032:	4b6e      	ldr	r3, [pc, #440]	; (800c1ec <__ieee754_rem_pio2+0x34c>)
 800c034:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03c:	4543      	cmp	r3, r8
 800c03e:	d006      	beq.n	800c04e <__ieee754_rem_pio2+0x1ae>
 800c040:	4622      	mov	r2, r4
 800c042:	462b      	mov	r3, r5
 800c044:	4630      	mov	r0, r6
 800c046:	4639      	mov	r1, r7
 800c048:	f7f4 f916 	bl	8000278 <__aeabi_dsub>
 800c04c:	e00e      	b.n	800c06c <__ieee754_rem_pio2+0x1cc>
 800c04e:	462b      	mov	r3, r5
 800c050:	4622      	mov	r2, r4
 800c052:	4630      	mov	r0, r6
 800c054:	4639      	mov	r1, r7
 800c056:	f7f4 f90f 	bl	8000278 <__aeabi_dsub>
 800c05a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c05e:	9303      	str	r3, [sp, #12]
 800c060:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c064:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c068:	2b10      	cmp	r3, #16
 800c06a:	dc02      	bgt.n	800c072 <__ieee754_rem_pio2+0x1d2>
 800c06c:	e9ca 0100 	strd	r0, r1, [sl]
 800c070:	e039      	b.n	800c0e6 <__ieee754_rem_pio2+0x246>
 800c072:	a34f      	add	r3, pc, #316	; (adr r3, 800c1b0 <__ieee754_rem_pio2+0x310>)
 800c074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c078:	ec51 0b18 	vmov	r0, r1, d8
 800c07c:	f7f4 fab4 	bl	80005e8 <__aeabi_dmul>
 800c080:	4604      	mov	r4, r0
 800c082:	460d      	mov	r5, r1
 800c084:	4602      	mov	r2, r0
 800c086:	460b      	mov	r3, r1
 800c088:	4630      	mov	r0, r6
 800c08a:	4639      	mov	r1, r7
 800c08c:	f7f4 f8f4 	bl	8000278 <__aeabi_dsub>
 800c090:	4602      	mov	r2, r0
 800c092:	460b      	mov	r3, r1
 800c094:	4680      	mov	r8, r0
 800c096:	4689      	mov	r9, r1
 800c098:	4630      	mov	r0, r6
 800c09a:	4639      	mov	r1, r7
 800c09c:	f7f4 f8ec 	bl	8000278 <__aeabi_dsub>
 800c0a0:	4622      	mov	r2, r4
 800c0a2:	462b      	mov	r3, r5
 800c0a4:	f7f4 f8e8 	bl	8000278 <__aeabi_dsub>
 800c0a8:	a343      	add	r3, pc, #268	; (adr r3, 800c1b8 <__ieee754_rem_pio2+0x318>)
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	460d      	mov	r5, r1
 800c0b2:	ec51 0b18 	vmov	r0, r1, d8
 800c0b6:	f7f4 fa97 	bl	80005e8 <__aeabi_dmul>
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	462b      	mov	r3, r5
 800c0be:	f7f4 f8db 	bl	8000278 <__aeabi_dsub>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	460d      	mov	r5, r1
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	f7f4 f8d3 	bl	8000278 <__aeabi_dsub>
 800c0d2:	9a03      	ldr	r2, [sp, #12]
 800c0d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	2b31      	cmp	r3, #49	; 0x31
 800c0dc:	dc24      	bgt.n	800c128 <__ieee754_rem_pio2+0x288>
 800c0de:	e9ca 0100 	strd	r0, r1, [sl]
 800c0e2:	4646      	mov	r6, r8
 800c0e4:	464f      	mov	r7, r9
 800c0e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	4642      	mov	r2, r8
 800c0ee:	464b      	mov	r3, r9
 800c0f0:	4639      	mov	r1, r7
 800c0f2:	f7f4 f8c1 	bl	8000278 <__aeabi_dsub>
 800c0f6:	462b      	mov	r3, r5
 800c0f8:	4622      	mov	r2, r4
 800c0fa:	f7f4 f8bd 	bl	8000278 <__aeabi_dsub>
 800c0fe:	9b02      	ldr	r3, [sp, #8]
 800c100:	2b00      	cmp	r3, #0
 800c102:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c106:	f6bf af0b 	bge.w	800bf20 <__ieee754_rem_pio2+0x80>
 800c10a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c10e:	f8ca 3004 	str.w	r3, [sl, #4]
 800c112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c116:	f8ca 8000 	str.w	r8, [sl]
 800c11a:	f8ca 0008 	str.w	r0, [sl, #8]
 800c11e:	f8ca 300c 	str.w	r3, [sl, #12]
 800c122:	f1cb 0b00 	rsb	fp, fp, #0
 800c126:	e6fb      	b.n	800bf20 <__ieee754_rem_pio2+0x80>
 800c128:	a327      	add	r3, pc, #156	; (adr r3, 800c1c8 <__ieee754_rem_pio2+0x328>)
 800c12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12e:	ec51 0b18 	vmov	r0, r1, d8
 800c132:	f7f4 fa59 	bl	80005e8 <__aeabi_dmul>
 800c136:	4604      	mov	r4, r0
 800c138:	460d      	mov	r5, r1
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
 800c13e:	4640      	mov	r0, r8
 800c140:	4649      	mov	r1, r9
 800c142:	f7f4 f899 	bl	8000278 <__aeabi_dsub>
 800c146:	4602      	mov	r2, r0
 800c148:	460b      	mov	r3, r1
 800c14a:	4606      	mov	r6, r0
 800c14c:	460f      	mov	r7, r1
 800c14e:	4640      	mov	r0, r8
 800c150:	4649      	mov	r1, r9
 800c152:	f7f4 f891 	bl	8000278 <__aeabi_dsub>
 800c156:	4622      	mov	r2, r4
 800c158:	462b      	mov	r3, r5
 800c15a:	f7f4 f88d 	bl	8000278 <__aeabi_dsub>
 800c15e:	a31c      	add	r3, pc, #112	; (adr r3, 800c1d0 <__ieee754_rem_pio2+0x330>)
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	4604      	mov	r4, r0
 800c166:	460d      	mov	r5, r1
 800c168:	ec51 0b18 	vmov	r0, r1, d8
 800c16c:	f7f4 fa3c 	bl	80005e8 <__aeabi_dmul>
 800c170:	4622      	mov	r2, r4
 800c172:	462b      	mov	r3, r5
 800c174:	f7f4 f880 	bl	8000278 <__aeabi_dsub>
 800c178:	4604      	mov	r4, r0
 800c17a:	460d      	mov	r5, r1
 800c17c:	e760      	b.n	800c040 <__ieee754_rem_pio2+0x1a0>
 800c17e:	4b1c      	ldr	r3, [pc, #112]	; (800c1f0 <__ieee754_rem_pio2+0x350>)
 800c180:	4598      	cmp	r8, r3
 800c182:	dd37      	ble.n	800c1f4 <__ieee754_rem_pio2+0x354>
 800c184:	ee10 2a10 	vmov	r2, s0
 800c188:	462b      	mov	r3, r5
 800c18a:	4620      	mov	r0, r4
 800c18c:	4629      	mov	r1, r5
 800c18e:	f7f4 f873 	bl	8000278 <__aeabi_dsub>
 800c192:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c196:	e9ca 0100 	strd	r0, r1, [sl]
 800c19a:	e695      	b.n	800bec8 <__ieee754_rem_pio2+0x28>
 800c19c:	f3af 8000 	nop.w
 800c1a0:	54400000 	.word	0x54400000
 800c1a4:	3ff921fb 	.word	0x3ff921fb
 800c1a8:	1a626331 	.word	0x1a626331
 800c1ac:	3dd0b461 	.word	0x3dd0b461
 800c1b0:	1a600000 	.word	0x1a600000
 800c1b4:	3dd0b461 	.word	0x3dd0b461
 800c1b8:	2e037073 	.word	0x2e037073
 800c1bc:	3ba3198a 	.word	0x3ba3198a
 800c1c0:	6dc9c883 	.word	0x6dc9c883
 800c1c4:	3fe45f30 	.word	0x3fe45f30
 800c1c8:	2e000000 	.word	0x2e000000
 800c1cc:	3ba3198a 	.word	0x3ba3198a
 800c1d0:	252049c1 	.word	0x252049c1
 800c1d4:	397b839a 	.word	0x397b839a
 800c1d8:	3fe921fb 	.word	0x3fe921fb
 800c1dc:	4002d97b 	.word	0x4002d97b
 800c1e0:	3ff921fb 	.word	0x3ff921fb
 800c1e4:	413921fb 	.word	0x413921fb
 800c1e8:	3fe00000 	.word	0x3fe00000
 800c1ec:	080108e8 	.word	0x080108e8
 800c1f0:	7fefffff 	.word	0x7fefffff
 800c1f4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800c1f8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800c1fc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800c200:	4620      	mov	r0, r4
 800c202:	460d      	mov	r5, r1
 800c204:	f7f4 fca0 	bl	8000b48 <__aeabi_d2iz>
 800c208:	f7f4 f984 	bl	8000514 <__aeabi_i2d>
 800c20c:	4602      	mov	r2, r0
 800c20e:	460b      	mov	r3, r1
 800c210:	4620      	mov	r0, r4
 800c212:	4629      	mov	r1, r5
 800c214:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c218:	f7f4 f82e 	bl	8000278 <__aeabi_dsub>
 800c21c:	4b21      	ldr	r3, [pc, #132]	; (800c2a4 <__ieee754_rem_pio2+0x404>)
 800c21e:	2200      	movs	r2, #0
 800c220:	f7f4 f9e2 	bl	80005e8 <__aeabi_dmul>
 800c224:	460d      	mov	r5, r1
 800c226:	4604      	mov	r4, r0
 800c228:	f7f4 fc8e 	bl	8000b48 <__aeabi_d2iz>
 800c22c:	f7f4 f972 	bl	8000514 <__aeabi_i2d>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	4620      	mov	r0, r4
 800c236:	4629      	mov	r1, r5
 800c238:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c23c:	f7f4 f81c 	bl	8000278 <__aeabi_dsub>
 800c240:	4b18      	ldr	r3, [pc, #96]	; (800c2a4 <__ieee754_rem_pio2+0x404>)
 800c242:	2200      	movs	r2, #0
 800c244:	f7f4 f9d0 	bl	80005e8 <__aeabi_dmul>
 800c248:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c24c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800c250:	2703      	movs	r7, #3
 800c252:	2400      	movs	r4, #0
 800c254:	2500      	movs	r5, #0
 800c256:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800c25a:	4622      	mov	r2, r4
 800c25c:	462b      	mov	r3, r5
 800c25e:	46b9      	mov	r9, r7
 800c260:	3f01      	subs	r7, #1
 800c262:	f7f4 fc29 	bl	8000ab8 <__aeabi_dcmpeq>
 800c266:	2800      	cmp	r0, #0
 800c268:	d1f5      	bne.n	800c256 <__ieee754_rem_pio2+0x3b6>
 800c26a:	4b0f      	ldr	r3, [pc, #60]	; (800c2a8 <__ieee754_rem_pio2+0x408>)
 800c26c:	9301      	str	r3, [sp, #4]
 800c26e:	2302      	movs	r3, #2
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	4632      	mov	r2, r6
 800c274:	464b      	mov	r3, r9
 800c276:	4651      	mov	r1, sl
 800c278:	a804      	add	r0, sp, #16
 800c27a:	f000 fdb9 	bl	800cdf0 <__kernel_rem_pio2>
 800c27e:	9b02      	ldr	r3, [sp, #8]
 800c280:	2b00      	cmp	r3, #0
 800c282:	4683      	mov	fp, r0
 800c284:	f6bf ae4c 	bge.w	800bf20 <__ieee754_rem_pio2+0x80>
 800c288:	e9da 2100 	ldrd	r2, r1, [sl]
 800c28c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c290:	e9ca 2300 	strd	r2, r3, [sl]
 800c294:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c298:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c29c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c2a0:	e73f      	b.n	800c122 <__ieee754_rem_pio2+0x282>
 800c2a2:	bf00      	nop
 800c2a4:	41700000 	.word	0x41700000
 800c2a8:	08010968 	.word	0x08010968
 800c2ac:	00000000 	.word	0x00000000

0800c2b0 <atan>:
 800c2b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b4:	ec55 4b10 	vmov	r4, r5, d0
 800c2b8:	4bc3      	ldr	r3, [pc, #780]	; (800c5c8 <atan+0x318>)
 800c2ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c2be:	429e      	cmp	r6, r3
 800c2c0:	46ab      	mov	fp, r5
 800c2c2:	dd18      	ble.n	800c2f6 <atan+0x46>
 800c2c4:	4bc1      	ldr	r3, [pc, #772]	; (800c5cc <atan+0x31c>)
 800c2c6:	429e      	cmp	r6, r3
 800c2c8:	dc01      	bgt.n	800c2ce <atan+0x1e>
 800c2ca:	d109      	bne.n	800c2e0 <atan+0x30>
 800c2cc:	b144      	cbz	r4, 800c2e0 <atan+0x30>
 800c2ce:	4622      	mov	r2, r4
 800c2d0:	462b      	mov	r3, r5
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	f7f3 ffd1 	bl	800027c <__adddf3>
 800c2da:	4604      	mov	r4, r0
 800c2dc:	460d      	mov	r5, r1
 800c2de:	e006      	b.n	800c2ee <atan+0x3e>
 800c2e0:	f1bb 0f00 	cmp.w	fp, #0
 800c2e4:	f300 8131 	bgt.w	800c54a <atan+0x29a>
 800c2e8:	a59b      	add	r5, pc, #620	; (adr r5, 800c558 <atan+0x2a8>)
 800c2ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2ee:	ec45 4b10 	vmov	d0, r4, r5
 800c2f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f6:	4bb6      	ldr	r3, [pc, #728]	; (800c5d0 <atan+0x320>)
 800c2f8:	429e      	cmp	r6, r3
 800c2fa:	dc14      	bgt.n	800c326 <atan+0x76>
 800c2fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c300:	429e      	cmp	r6, r3
 800c302:	dc0d      	bgt.n	800c320 <atan+0x70>
 800c304:	a396      	add	r3, pc, #600	; (adr r3, 800c560 <atan+0x2b0>)
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	ee10 0a10 	vmov	r0, s0
 800c30e:	4629      	mov	r1, r5
 800c310:	f7f3 ffb4 	bl	800027c <__adddf3>
 800c314:	4baf      	ldr	r3, [pc, #700]	; (800c5d4 <atan+0x324>)
 800c316:	2200      	movs	r2, #0
 800c318:	f7f4 fbf6 	bl	8000b08 <__aeabi_dcmpgt>
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d1e6      	bne.n	800c2ee <atan+0x3e>
 800c320:	f04f 3aff 	mov.w	sl, #4294967295
 800c324:	e02b      	b.n	800c37e <atan+0xce>
 800c326:	f7fe f91d 	bl	800a564 <fabs>
 800c32a:	4bab      	ldr	r3, [pc, #684]	; (800c5d8 <atan+0x328>)
 800c32c:	429e      	cmp	r6, r3
 800c32e:	ec55 4b10 	vmov	r4, r5, d0
 800c332:	f300 80bf 	bgt.w	800c4b4 <atan+0x204>
 800c336:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c33a:	429e      	cmp	r6, r3
 800c33c:	f300 80a0 	bgt.w	800c480 <atan+0x1d0>
 800c340:	ee10 2a10 	vmov	r2, s0
 800c344:	ee10 0a10 	vmov	r0, s0
 800c348:	462b      	mov	r3, r5
 800c34a:	4629      	mov	r1, r5
 800c34c:	f7f3 ff96 	bl	800027c <__adddf3>
 800c350:	4ba0      	ldr	r3, [pc, #640]	; (800c5d4 <atan+0x324>)
 800c352:	2200      	movs	r2, #0
 800c354:	f7f3 ff90 	bl	8000278 <__aeabi_dsub>
 800c358:	2200      	movs	r2, #0
 800c35a:	4606      	mov	r6, r0
 800c35c:	460f      	mov	r7, r1
 800c35e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c362:	4620      	mov	r0, r4
 800c364:	4629      	mov	r1, r5
 800c366:	f7f3 ff89 	bl	800027c <__adddf3>
 800c36a:	4602      	mov	r2, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	4630      	mov	r0, r6
 800c370:	4639      	mov	r1, r7
 800c372:	f7f4 fa63 	bl	800083c <__aeabi_ddiv>
 800c376:	f04f 0a00 	mov.w	sl, #0
 800c37a:	4604      	mov	r4, r0
 800c37c:	460d      	mov	r5, r1
 800c37e:	4622      	mov	r2, r4
 800c380:	462b      	mov	r3, r5
 800c382:	4620      	mov	r0, r4
 800c384:	4629      	mov	r1, r5
 800c386:	f7f4 f92f 	bl	80005e8 <__aeabi_dmul>
 800c38a:	4602      	mov	r2, r0
 800c38c:	460b      	mov	r3, r1
 800c38e:	4680      	mov	r8, r0
 800c390:	4689      	mov	r9, r1
 800c392:	f7f4 f929 	bl	80005e8 <__aeabi_dmul>
 800c396:	a374      	add	r3, pc, #464	; (adr r3, 800c568 <atan+0x2b8>)
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	4606      	mov	r6, r0
 800c39e:	460f      	mov	r7, r1
 800c3a0:	f7f4 f922 	bl	80005e8 <__aeabi_dmul>
 800c3a4:	a372      	add	r3, pc, #456	; (adr r3, 800c570 <atan+0x2c0>)
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	f7f3 ff67 	bl	800027c <__adddf3>
 800c3ae:	4632      	mov	r2, r6
 800c3b0:	463b      	mov	r3, r7
 800c3b2:	f7f4 f919 	bl	80005e8 <__aeabi_dmul>
 800c3b6:	a370      	add	r3, pc, #448	; (adr r3, 800c578 <atan+0x2c8>)
 800c3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3bc:	f7f3 ff5e 	bl	800027c <__adddf3>
 800c3c0:	4632      	mov	r2, r6
 800c3c2:	463b      	mov	r3, r7
 800c3c4:	f7f4 f910 	bl	80005e8 <__aeabi_dmul>
 800c3c8:	a36d      	add	r3, pc, #436	; (adr r3, 800c580 <atan+0x2d0>)
 800c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ce:	f7f3 ff55 	bl	800027c <__adddf3>
 800c3d2:	4632      	mov	r2, r6
 800c3d4:	463b      	mov	r3, r7
 800c3d6:	f7f4 f907 	bl	80005e8 <__aeabi_dmul>
 800c3da:	a36b      	add	r3, pc, #428	; (adr r3, 800c588 <atan+0x2d8>)
 800c3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e0:	f7f3 ff4c 	bl	800027c <__adddf3>
 800c3e4:	4632      	mov	r2, r6
 800c3e6:	463b      	mov	r3, r7
 800c3e8:	f7f4 f8fe 	bl	80005e8 <__aeabi_dmul>
 800c3ec:	a368      	add	r3, pc, #416	; (adr r3, 800c590 <atan+0x2e0>)
 800c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f2:	f7f3 ff43 	bl	800027c <__adddf3>
 800c3f6:	4642      	mov	r2, r8
 800c3f8:	464b      	mov	r3, r9
 800c3fa:	f7f4 f8f5 	bl	80005e8 <__aeabi_dmul>
 800c3fe:	a366      	add	r3, pc, #408	; (adr r3, 800c598 <atan+0x2e8>)
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	4680      	mov	r8, r0
 800c406:	4689      	mov	r9, r1
 800c408:	4630      	mov	r0, r6
 800c40a:	4639      	mov	r1, r7
 800c40c:	f7f4 f8ec 	bl	80005e8 <__aeabi_dmul>
 800c410:	a363      	add	r3, pc, #396	; (adr r3, 800c5a0 <atan+0x2f0>)
 800c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c416:	f7f3 ff2f 	bl	8000278 <__aeabi_dsub>
 800c41a:	4632      	mov	r2, r6
 800c41c:	463b      	mov	r3, r7
 800c41e:	f7f4 f8e3 	bl	80005e8 <__aeabi_dmul>
 800c422:	a361      	add	r3, pc, #388	; (adr r3, 800c5a8 <atan+0x2f8>)
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	f7f3 ff26 	bl	8000278 <__aeabi_dsub>
 800c42c:	4632      	mov	r2, r6
 800c42e:	463b      	mov	r3, r7
 800c430:	f7f4 f8da 	bl	80005e8 <__aeabi_dmul>
 800c434:	a35e      	add	r3, pc, #376	; (adr r3, 800c5b0 <atan+0x300>)
 800c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43a:	f7f3 ff1d 	bl	8000278 <__aeabi_dsub>
 800c43e:	4632      	mov	r2, r6
 800c440:	463b      	mov	r3, r7
 800c442:	f7f4 f8d1 	bl	80005e8 <__aeabi_dmul>
 800c446:	a35c      	add	r3, pc, #368	; (adr r3, 800c5b8 <atan+0x308>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	f7f3 ff14 	bl	8000278 <__aeabi_dsub>
 800c450:	4632      	mov	r2, r6
 800c452:	463b      	mov	r3, r7
 800c454:	f7f4 f8c8 	bl	80005e8 <__aeabi_dmul>
 800c458:	4602      	mov	r2, r0
 800c45a:	460b      	mov	r3, r1
 800c45c:	4640      	mov	r0, r8
 800c45e:	4649      	mov	r1, r9
 800c460:	f7f3 ff0c 	bl	800027c <__adddf3>
 800c464:	4622      	mov	r2, r4
 800c466:	462b      	mov	r3, r5
 800c468:	f7f4 f8be 	bl	80005e8 <__aeabi_dmul>
 800c46c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c470:	4602      	mov	r2, r0
 800c472:	460b      	mov	r3, r1
 800c474:	d14b      	bne.n	800c50e <atan+0x25e>
 800c476:	4620      	mov	r0, r4
 800c478:	4629      	mov	r1, r5
 800c47a:	f7f3 fefd 	bl	8000278 <__aeabi_dsub>
 800c47e:	e72c      	b.n	800c2da <atan+0x2a>
 800c480:	ee10 0a10 	vmov	r0, s0
 800c484:	4b53      	ldr	r3, [pc, #332]	; (800c5d4 <atan+0x324>)
 800c486:	2200      	movs	r2, #0
 800c488:	4629      	mov	r1, r5
 800c48a:	f7f3 fef5 	bl	8000278 <__aeabi_dsub>
 800c48e:	4b51      	ldr	r3, [pc, #324]	; (800c5d4 <atan+0x324>)
 800c490:	4606      	mov	r6, r0
 800c492:	460f      	mov	r7, r1
 800c494:	2200      	movs	r2, #0
 800c496:	4620      	mov	r0, r4
 800c498:	4629      	mov	r1, r5
 800c49a:	f7f3 feef 	bl	800027c <__adddf3>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	f7f4 f9c9 	bl	800083c <__aeabi_ddiv>
 800c4aa:	f04f 0a01 	mov.w	sl, #1
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	460d      	mov	r5, r1
 800c4b2:	e764      	b.n	800c37e <atan+0xce>
 800c4b4:	4b49      	ldr	r3, [pc, #292]	; (800c5dc <atan+0x32c>)
 800c4b6:	429e      	cmp	r6, r3
 800c4b8:	da1d      	bge.n	800c4f6 <atan+0x246>
 800c4ba:	ee10 0a10 	vmov	r0, s0
 800c4be:	4b48      	ldr	r3, [pc, #288]	; (800c5e0 <atan+0x330>)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	f7f3 fed8 	bl	8000278 <__aeabi_dsub>
 800c4c8:	4b45      	ldr	r3, [pc, #276]	; (800c5e0 <atan+0x330>)
 800c4ca:	4606      	mov	r6, r0
 800c4cc:	460f      	mov	r7, r1
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	f7f4 f888 	bl	80005e8 <__aeabi_dmul>
 800c4d8:	4b3e      	ldr	r3, [pc, #248]	; (800c5d4 <atan+0x324>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f7f3 fece 	bl	800027c <__adddf3>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	4639      	mov	r1, r7
 800c4e8:	f7f4 f9a8 	bl	800083c <__aeabi_ddiv>
 800c4ec:	f04f 0a02 	mov.w	sl, #2
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	460d      	mov	r5, r1
 800c4f4:	e743      	b.n	800c37e <atan+0xce>
 800c4f6:	462b      	mov	r3, r5
 800c4f8:	ee10 2a10 	vmov	r2, s0
 800c4fc:	4939      	ldr	r1, [pc, #228]	; (800c5e4 <atan+0x334>)
 800c4fe:	2000      	movs	r0, #0
 800c500:	f7f4 f99c 	bl	800083c <__aeabi_ddiv>
 800c504:	f04f 0a03 	mov.w	sl, #3
 800c508:	4604      	mov	r4, r0
 800c50a:	460d      	mov	r5, r1
 800c50c:	e737      	b.n	800c37e <atan+0xce>
 800c50e:	4b36      	ldr	r3, [pc, #216]	; (800c5e8 <atan+0x338>)
 800c510:	4e36      	ldr	r6, [pc, #216]	; (800c5ec <atan+0x33c>)
 800c512:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f3 fead 	bl	8000278 <__aeabi_dsub>
 800c51e:	4622      	mov	r2, r4
 800c520:	462b      	mov	r3, r5
 800c522:	f7f3 fea9 	bl	8000278 <__aeabi_dsub>
 800c526:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c52a:	4602      	mov	r2, r0
 800c52c:	460b      	mov	r3, r1
 800c52e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c532:	f7f3 fea1 	bl	8000278 <__aeabi_dsub>
 800c536:	f1bb 0f00 	cmp.w	fp, #0
 800c53a:	4604      	mov	r4, r0
 800c53c:	460d      	mov	r5, r1
 800c53e:	f6bf aed6 	bge.w	800c2ee <atan+0x3e>
 800c542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c546:	461d      	mov	r5, r3
 800c548:	e6d1      	b.n	800c2ee <atan+0x3e>
 800c54a:	a51d      	add	r5, pc, #116	; (adr r5, 800c5c0 <atan+0x310>)
 800c54c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c550:	e6cd      	b.n	800c2ee <atan+0x3e>
 800c552:	bf00      	nop
 800c554:	f3af 8000 	nop.w
 800c558:	54442d18 	.word	0x54442d18
 800c55c:	bff921fb 	.word	0xbff921fb
 800c560:	8800759c 	.word	0x8800759c
 800c564:	7e37e43c 	.word	0x7e37e43c
 800c568:	e322da11 	.word	0xe322da11
 800c56c:	3f90ad3a 	.word	0x3f90ad3a
 800c570:	24760deb 	.word	0x24760deb
 800c574:	3fa97b4b 	.word	0x3fa97b4b
 800c578:	a0d03d51 	.word	0xa0d03d51
 800c57c:	3fb10d66 	.word	0x3fb10d66
 800c580:	c54c206e 	.word	0xc54c206e
 800c584:	3fb745cd 	.word	0x3fb745cd
 800c588:	920083ff 	.word	0x920083ff
 800c58c:	3fc24924 	.word	0x3fc24924
 800c590:	5555550d 	.word	0x5555550d
 800c594:	3fd55555 	.word	0x3fd55555
 800c598:	2c6a6c2f 	.word	0x2c6a6c2f
 800c59c:	bfa2b444 	.word	0xbfa2b444
 800c5a0:	52defd9a 	.word	0x52defd9a
 800c5a4:	3fadde2d 	.word	0x3fadde2d
 800c5a8:	af749a6d 	.word	0xaf749a6d
 800c5ac:	3fb3b0f2 	.word	0x3fb3b0f2
 800c5b0:	fe231671 	.word	0xfe231671
 800c5b4:	3fbc71c6 	.word	0x3fbc71c6
 800c5b8:	9998ebc4 	.word	0x9998ebc4
 800c5bc:	3fc99999 	.word	0x3fc99999
 800c5c0:	54442d18 	.word	0x54442d18
 800c5c4:	3ff921fb 	.word	0x3ff921fb
 800c5c8:	440fffff 	.word	0x440fffff
 800c5cc:	7ff00000 	.word	0x7ff00000
 800c5d0:	3fdbffff 	.word	0x3fdbffff
 800c5d4:	3ff00000 	.word	0x3ff00000
 800c5d8:	3ff2ffff 	.word	0x3ff2ffff
 800c5dc:	40038000 	.word	0x40038000
 800c5e0:	3ff80000 	.word	0x3ff80000
 800c5e4:	bff00000 	.word	0xbff00000
 800c5e8:	08010a90 	.word	0x08010a90
 800c5ec:	08010a70 	.word	0x08010a70

0800c5f0 <__kernel_cosf>:
 800c5f0:	ee10 3a10 	vmov	r3, s0
 800c5f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c5fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c600:	da05      	bge.n	800c60e <__kernel_cosf+0x1e>
 800c602:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c606:	ee17 2a90 	vmov	r2, s15
 800c60a:	2a00      	cmp	r2, #0
 800c60c:	d03b      	beq.n	800c686 <__kernel_cosf+0x96>
 800c60e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c612:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c68c <__kernel_cosf+0x9c>
 800c616:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800c690 <__kernel_cosf+0xa0>
 800c61a:	4a1e      	ldr	r2, [pc, #120]	; (800c694 <__kernel_cosf+0xa4>)
 800c61c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c620:	4293      	cmp	r3, r2
 800c622:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800c698 <__kernel_cosf+0xa8>
 800c626:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c62a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800c69c <__kernel_cosf+0xac>
 800c62e:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c632:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800c6a0 <__kernel_cosf+0xb0>
 800c636:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c63a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800c6a4 <__kernel_cosf+0xb4>
 800c63e:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c642:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800c646:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c64a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c64e:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c652:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c656:	dc04      	bgt.n	800c662 <__kernel_cosf+0x72>
 800c658:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c65c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800c660:	4770      	bx	lr
 800c662:	4a11      	ldr	r2, [pc, #68]	; (800c6a8 <__kernel_cosf+0xb8>)
 800c664:	4293      	cmp	r3, r2
 800c666:	bfda      	itte	le
 800c668:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c66c:	ee07 3a10 	vmovle	s14, r3
 800c670:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800c674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c678:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800c67c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c680:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c684:	4770      	bx	lr
 800c686:	eeb0 0a66 	vmov.f32	s0, s13
 800c68a:	4770      	bx	lr
 800c68c:	ad47d74e 	.word	0xad47d74e
 800c690:	310f74f6 	.word	0x310f74f6
 800c694:	3e999999 	.word	0x3e999999
 800c698:	b493f27c 	.word	0xb493f27c
 800c69c:	37d00d01 	.word	0x37d00d01
 800c6a0:	bab60b61 	.word	0xbab60b61
 800c6a4:	3d2aaaab 	.word	0x3d2aaaab
 800c6a8:	3f480000 	.word	0x3f480000

0800c6ac <__kernel_sinf>:
 800c6ac:	ee10 3a10 	vmov	r3, s0
 800c6b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c6b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c6b8:	da04      	bge.n	800c6c4 <__kernel_sinf+0x18>
 800c6ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c6be:	ee17 3a90 	vmov	r3, s15
 800c6c2:	b35b      	cbz	r3, 800c71c <__kernel_sinf+0x70>
 800c6c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c6c8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c720 <__kernel_sinf+0x74>
 800c6cc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c724 <__kernel_sinf+0x78>
 800c6d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c6d4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c728 <__kernel_sinf+0x7c>
 800c6d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c6dc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c72c <__kernel_sinf+0x80>
 800c6e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c6e4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c730 <__kernel_sinf+0x84>
 800c6e8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c6ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c6f0:	b930      	cbnz	r0, 800c700 <__kernel_sinf+0x54>
 800c6f2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c734 <__kernel_sinf+0x88>
 800c6f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c6fa:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c6fe:	4770      	bx	lr
 800c700:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c704:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c708:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c70c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c710:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c738 <__kernel_sinf+0x8c>
 800c714:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c718:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	2f2ec9d3 	.word	0x2f2ec9d3
 800c724:	b2d72f34 	.word	0xb2d72f34
 800c728:	3638ef1b 	.word	0x3638ef1b
 800c72c:	b9500d01 	.word	0xb9500d01
 800c730:	3c088889 	.word	0x3c088889
 800c734:	be2aaaab 	.word	0xbe2aaaab
 800c738:	3e2aaaab 	.word	0x3e2aaaab

0800c73c <__ieee754_atan2f>:
 800c73c:	ee10 2a90 	vmov	r2, s1
 800c740:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c744:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c748:	b510      	push	{r4, lr}
 800c74a:	eef0 7a40 	vmov.f32	s15, s0
 800c74e:	dc06      	bgt.n	800c75e <__ieee754_atan2f+0x22>
 800c750:	ee10 0a10 	vmov	r0, s0
 800c754:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c758:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c75c:	dd04      	ble.n	800c768 <__ieee754_atan2f+0x2c>
 800c75e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c762:	eeb0 0a67 	vmov.f32	s0, s15
 800c766:	bd10      	pop	{r4, pc}
 800c768:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c76c:	d103      	bne.n	800c776 <__ieee754_atan2f+0x3a>
 800c76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c772:	f000 b9af 	b.w	800cad4 <atanf>
 800c776:	1794      	asrs	r4, r2, #30
 800c778:	f004 0402 	and.w	r4, r4, #2
 800c77c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c780:	b943      	cbnz	r3, 800c794 <__ieee754_atan2f+0x58>
 800c782:	2c02      	cmp	r4, #2
 800c784:	d05e      	beq.n	800c844 <__ieee754_atan2f+0x108>
 800c786:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c858 <__ieee754_atan2f+0x11c>
 800c78a:	2c03      	cmp	r4, #3
 800c78c:	bf08      	it	eq
 800c78e:	eef0 7a47 	vmoveq.f32	s15, s14
 800c792:	e7e6      	b.n	800c762 <__ieee754_atan2f+0x26>
 800c794:	b941      	cbnz	r1, 800c7a8 <__ieee754_atan2f+0x6c>
 800c796:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c85c <__ieee754_atan2f+0x120>
 800c79a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c860 <__ieee754_atan2f+0x124>
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	bfb8      	it	lt
 800c7a2:	eef0 7a47 	vmovlt.f32	s15, s14
 800c7a6:	e7dc      	b.n	800c762 <__ieee754_atan2f+0x26>
 800c7a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c7ac:	d110      	bne.n	800c7d0 <__ieee754_atan2f+0x94>
 800c7ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c7b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c7b6:	d107      	bne.n	800c7c8 <__ieee754_atan2f+0x8c>
 800c7b8:	2c02      	cmp	r4, #2
 800c7ba:	d846      	bhi.n	800c84a <__ieee754_atan2f+0x10e>
 800c7bc:	4b29      	ldr	r3, [pc, #164]	; (800c864 <__ieee754_atan2f+0x128>)
 800c7be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c7c2:	edd3 7a00 	vldr	s15, [r3]
 800c7c6:	e7cc      	b.n	800c762 <__ieee754_atan2f+0x26>
 800c7c8:	2c02      	cmp	r4, #2
 800c7ca:	d841      	bhi.n	800c850 <__ieee754_atan2f+0x114>
 800c7cc:	4b26      	ldr	r3, [pc, #152]	; (800c868 <__ieee754_atan2f+0x12c>)
 800c7ce:	e7f6      	b.n	800c7be <__ieee754_atan2f+0x82>
 800c7d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c7d4:	d0df      	beq.n	800c796 <__ieee754_atan2f+0x5a>
 800c7d6:	1a5b      	subs	r3, r3, r1
 800c7d8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800c7dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c7e0:	da1a      	bge.n	800c818 <__ieee754_atan2f+0xdc>
 800c7e2:	2a00      	cmp	r2, #0
 800c7e4:	da01      	bge.n	800c7ea <__ieee754_atan2f+0xae>
 800c7e6:	313c      	adds	r1, #60	; 0x3c
 800c7e8:	db19      	blt.n	800c81e <__ieee754_atan2f+0xe2>
 800c7ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c7ee:	f000 fa45 	bl	800cc7c <fabsf>
 800c7f2:	f000 f96f 	bl	800cad4 <atanf>
 800c7f6:	eef0 7a40 	vmov.f32	s15, s0
 800c7fa:	2c01      	cmp	r4, #1
 800c7fc:	d012      	beq.n	800c824 <__ieee754_atan2f+0xe8>
 800c7fe:	2c02      	cmp	r4, #2
 800c800:	d017      	beq.n	800c832 <__ieee754_atan2f+0xf6>
 800c802:	2c00      	cmp	r4, #0
 800c804:	d0ad      	beq.n	800c762 <__ieee754_atan2f+0x26>
 800c806:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c86c <__ieee754_atan2f+0x130>
 800c80a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c80e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c870 <__ieee754_atan2f+0x134>
 800c812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c816:	e7a4      	b.n	800c762 <__ieee754_atan2f+0x26>
 800c818:	eddf 7a10 	vldr	s15, [pc, #64]	; 800c85c <__ieee754_atan2f+0x120>
 800c81c:	e7ed      	b.n	800c7fa <__ieee754_atan2f+0xbe>
 800c81e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c874 <__ieee754_atan2f+0x138>
 800c822:	e7ea      	b.n	800c7fa <__ieee754_atan2f+0xbe>
 800c824:	ee17 3a90 	vmov	r3, s15
 800c828:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c82c:	ee07 3a90 	vmov	s15, r3
 800c830:	e797      	b.n	800c762 <__ieee754_atan2f+0x26>
 800c832:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800c86c <__ieee754_atan2f+0x130>
 800c836:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c83a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800c870 <__ieee754_atan2f+0x134>
 800c83e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c842:	e78e      	b.n	800c762 <__ieee754_atan2f+0x26>
 800c844:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800c870 <__ieee754_atan2f+0x134>
 800c848:	e78b      	b.n	800c762 <__ieee754_atan2f+0x26>
 800c84a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c878 <__ieee754_atan2f+0x13c>
 800c84e:	e788      	b.n	800c762 <__ieee754_atan2f+0x26>
 800c850:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c874 <__ieee754_atan2f+0x138>
 800c854:	e785      	b.n	800c762 <__ieee754_atan2f+0x26>
 800c856:	bf00      	nop
 800c858:	c0490fdb 	.word	0xc0490fdb
 800c85c:	3fc90fdb 	.word	0x3fc90fdb
 800c860:	bfc90fdb 	.word	0xbfc90fdb
 800c864:	08010ab0 	.word	0x08010ab0
 800c868:	08010abc 	.word	0x08010abc
 800c86c:	33bbbd2e 	.word	0x33bbbd2e
 800c870:	40490fdb 	.word	0x40490fdb
 800c874:	00000000 	.word	0x00000000
 800c878:	3f490fdb 	.word	0x3f490fdb

0800c87c <__ieee754_rem_pio2f>:
 800c87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c87e:	ee10 6a10 	vmov	r6, s0
 800c882:	4b86      	ldr	r3, [pc, #536]	; (800ca9c <__ieee754_rem_pio2f+0x220>)
 800c884:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c888:	429d      	cmp	r5, r3
 800c88a:	b087      	sub	sp, #28
 800c88c:	4604      	mov	r4, r0
 800c88e:	dc05      	bgt.n	800c89c <__ieee754_rem_pio2f+0x20>
 800c890:	2300      	movs	r3, #0
 800c892:	ed80 0a00 	vstr	s0, [r0]
 800c896:	6043      	str	r3, [r0, #4]
 800c898:	2000      	movs	r0, #0
 800c89a:	e020      	b.n	800c8de <__ieee754_rem_pio2f+0x62>
 800c89c:	4b80      	ldr	r3, [pc, #512]	; (800caa0 <__ieee754_rem_pio2f+0x224>)
 800c89e:	429d      	cmp	r5, r3
 800c8a0:	dc38      	bgt.n	800c914 <__ieee754_rem_pio2f+0x98>
 800c8a2:	2e00      	cmp	r6, #0
 800c8a4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800caa4 <__ieee754_rem_pio2f+0x228>
 800c8a8:	4b7f      	ldr	r3, [pc, #508]	; (800caa8 <__ieee754_rem_pio2f+0x22c>)
 800c8aa:	f025 050f 	bic.w	r5, r5, #15
 800c8ae:	dd18      	ble.n	800c8e2 <__ieee754_rem_pio2f+0x66>
 800c8b0:	429d      	cmp	r5, r3
 800c8b2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c8b6:	bf09      	itett	eq
 800c8b8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800caac <__ieee754_rem_pio2f+0x230>
 800c8bc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800cab0 <__ieee754_rem_pio2f+0x234>
 800c8c0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c8c4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800cab4 <__ieee754_rem_pio2f+0x238>
 800c8c8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c8cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c8d0:	edc0 6a00 	vstr	s13, [r0]
 800c8d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8d8:	edc0 7a01 	vstr	s15, [r0, #4]
 800c8dc:	2001      	movs	r0, #1
 800c8de:	b007      	add	sp, #28
 800c8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8e2:	429d      	cmp	r5, r3
 800c8e4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c8e8:	bf09      	itett	eq
 800c8ea:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800caac <__ieee754_rem_pio2f+0x230>
 800c8ee:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800cab0 <__ieee754_rem_pio2f+0x234>
 800c8f2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c8f6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800cab4 <__ieee754_rem_pio2f+0x238>
 800c8fa:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c8fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c902:	edc0 6a00 	vstr	s13, [r0]
 800c906:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c90a:	edc0 7a01 	vstr	s15, [r0, #4]
 800c90e:	f04f 30ff 	mov.w	r0, #4294967295
 800c912:	e7e4      	b.n	800c8de <__ieee754_rem_pio2f+0x62>
 800c914:	4b68      	ldr	r3, [pc, #416]	; (800cab8 <__ieee754_rem_pio2f+0x23c>)
 800c916:	429d      	cmp	r5, r3
 800c918:	dc71      	bgt.n	800c9fe <__ieee754_rem_pio2f+0x182>
 800c91a:	f000 f9af 	bl	800cc7c <fabsf>
 800c91e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800cabc <__ieee754_rem_pio2f+0x240>
 800c922:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c926:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c92a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c92e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c932:	ee17 0a90 	vmov	r0, s15
 800c936:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800caa4 <__ieee754_rem_pio2f+0x228>
 800c93a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c93e:	281f      	cmp	r0, #31
 800c940:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800cab0 <__ieee754_rem_pio2f+0x234>
 800c944:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c948:	eeb1 6a47 	vneg.f32	s12, s14
 800c94c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c950:	ee16 2a90 	vmov	r2, s13
 800c954:	dc1c      	bgt.n	800c990 <__ieee754_rem_pio2f+0x114>
 800c956:	495a      	ldr	r1, [pc, #360]	; (800cac0 <__ieee754_rem_pio2f+0x244>)
 800c958:	1e47      	subs	r7, r0, #1
 800c95a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c95e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c962:	428b      	cmp	r3, r1
 800c964:	d014      	beq.n	800c990 <__ieee754_rem_pio2f+0x114>
 800c966:	6022      	str	r2, [r4, #0]
 800c968:	ed94 7a00 	vldr	s14, [r4]
 800c96c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c970:	2e00      	cmp	r6, #0
 800c972:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c976:	ed84 0a01 	vstr	s0, [r4, #4]
 800c97a:	dab0      	bge.n	800c8de <__ieee754_rem_pio2f+0x62>
 800c97c:	eeb1 7a47 	vneg.f32	s14, s14
 800c980:	eeb1 0a40 	vneg.f32	s0, s0
 800c984:	ed84 7a00 	vstr	s14, [r4]
 800c988:	ed84 0a01 	vstr	s0, [r4, #4]
 800c98c:	4240      	negs	r0, r0
 800c98e:	e7a6      	b.n	800c8de <__ieee754_rem_pio2f+0x62>
 800c990:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c994:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800c998:	2908      	cmp	r1, #8
 800c99a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c99e:	dde2      	ble.n	800c966 <__ieee754_rem_pio2f+0xea>
 800c9a0:	eddf 5a42 	vldr	s11, [pc, #264]	; 800caac <__ieee754_rem_pio2f+0x230>
 800c9a4:	eef0 6a40 	vmov.f32	s13, s0
 800c9a8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c9ac:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c9b0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c9b4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800cab4 <__ieee754_rem_pio2f+0x238>
 800c9b8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c9bc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c9c0:	ee15 2a90 	vmov	r2, s11
 800c9c4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c9c8:	1a5b      	subs	r3, r3, r1
 800c9ca:	2b19      	cmp	r3, #25
 800c9cc:	dc04      	bgt.n	800c9d8 <__ieee754_rem_pio2f+0x15c>
 800c9ce:	edc4 5a00 	vstr	s11, [r4]
 800c9d2:	eeb0 0a66 	vmov.f32	s0, s13
 800c9d6:	e7c7      	b.n	800c968 <__ieee754_rem_pio2f+0xec>
 800c9d8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800cac4 <__ieee754_rem_pio2f+0x248>
 800c9dc:	eeb0 0a66 	vmov.f32	s0, s13
 800c9e0:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c9e4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c9e8:	eddf 6a37 	vldr	s13, [pc, #220]	; 800cac8 <__ieee754_rem_pio2f+0x24c>
 800c9ec:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c9f0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c9f4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c9f8:	ed84 7a00 	vstr	s14, [r4]
 800c9fc:	e7b4      	b.n	800c968 <__ieee754_rem_pio2f+0xec>
 800c9fe:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ca02:	db06      	blt.n	800ca12 <__ieee754_rem_pio2f+0x196>
 800ca04:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ca08:	edc0 7a01 	vstr	s15, [r0, #4]
 800ca0c:	edc0 7a00 	vstr	s15, [r0]
 800ca10:	e742      	b.n	800c898 <__ieee754_rem_pio2f+0x1c>
 800ca12:	15ea      	asrs	r2, r5, #23
 800ca14:	3a86      	subs	r2, #134	; 0x86
 800ca16:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ca22:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800cacc <__ieee754_rem_pio2f+0x250>
 800ca26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ca2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca2e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ca32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ca36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ca3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ca3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca42:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ca46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ca4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ca4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca52:	edcd 7a05 	vstr	s15, [sp, #20]
 800ca56:	d11e      	bne.n	800ca96 <__ieee754_rem_pio2f+0x21a>
 800ca58:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ca5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca60:	bf14      	ite	ne
 800ca62:	2302      	movne	r3, #2
 800ca64:	2301      	moveq	r3, #1
 800ca66:	491a      	ldr	r1, [pc, #104]	; (800cad0 <__ieee754_rem_pio2f+0x254>)
 800ca68:	9101      	str	r1, [sp, #4]
 800ca6a:	2102      	movs	r1, #2
 800ca6c:	9100      	str	r1, [sp, #0]
 800ca6e:	a803      	add	r0, sp, #12
 800ca70:	4621      	mov	r1, r4
 800ca72:	f000 fd0b 	bl	800d48c <__kernel_rem_pio2f>
 800ca76:	2e00      	cmp	r6, #0
 800ca78:	f6bf af31 	bge.w	800c8de <__ieee754_rem_pio2f+0x62>
 800ca7c:	edd4 7a00 	vldr	s15, [r4]
 800ca80:	eef1 7a67 	vneg.f32	s15, s15
 800ca84:	edc4 7a00 	vstr	s15, [r4]
 800ca88:	edd4 7a01 	vldr	s15, [r4, #4]
 800ca8c:	eef1 7a67 	vneg.f32	s15, s15
 800ca90:	edc4 7a01 	vstr	s15, [r4, #4]
 800ca94:	e77a      	b.n	800c98c <__ieee754_rem_pio2f+0x110>
 800ca96:	2303      	movs	r3, #3
 800ca98:	e7e5      	b.n	800ca66 <__ieee754_rem_pio2f+0x1ea>
 800ca9a:	bf00      	nop
 800ca9c:	3f490fd8 	.word	0x3f490fd8
 800caa0:	4016cbe3 	.word	0x4016cbe3
 800caa4:	3fc90f80 	.word	0x3fc90f80
 800caa8:	3fc90fd0 	.word	0x3fc90fd0
 800caac:	37354400 	.word	0x37354400
 800cab0:	37354443 	.word	0x37354443
 800cab4:	2e85a308 	.word	0x2e85a308
 800cab8:	43490f80 	.word	0x43490f80
 800cabc:	3f22f984 	.word	0x3f22f984
 800cac0:	08010ac8 	.word	0x08010ac8
 800cac4:	2e85a300 	.word	0x2e85a300
 800cac8:	248d3132 	.word	0x248d3132
 800cacc:	43800000 	.word	0x43800000
 800cad0:	08010b48 	.word	0x08010b48

0800cad4 <atanf>:
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	ee10 5a10 	vmov	r5, s0
 800cada:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800cade:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800cae2:	eef0 7a40 	vmov.f32	s15, s0
 800cae6:	db10      	blt.n	800cb0a <atanf+0x36>
 800cae8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800caec:	dd04      	ble.n	800caf8 <atanf+0x24>
 800caee:	ee70 7a00 	vadd.f32	s15, s0, s0
 800caf2:	eeb0 0a67 	vmov.f32	s0, s15
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800cc30 <atanf+0x15c>
 800cafc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800cc34 <atanf+0x160>
 800cb00:	2d00      	cmp	r5, #0
 800cb02:	bfd8      	it	le
 800cb04:	eef0 7a47 	vmovle.f32	s15, s14
 800cb08:	e7f3      	b.n	800caf2 <atanf+0x1e>
 800cb0a:	4b4b      	ldr	r3, [pc, #300]	; (800cc38 <atanf+0x164>)
 800cb0c:	429c      	cmp	r4, r3
 800cb0e:	dc10      	bgt.n	800cb32 <atanf+0x5e>
 800cb10:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800cb14:	da0a      	bge.n	800cb2c <atanf+0x58>
 800cb16:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800cc3c <atanf+0x168>
 800cb1a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cb1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb22:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb2a:	dce2      	bgt.n	800caf2 <atanf+0x1e>
 800cb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb30:	e013      	b.n	800cb5a <atanf+0x86>
 800cb32:	f000 f8a3 	bl	800cc7c <fabsf>
 800cb36:	4b42      	ldr	r3, [pc, #264]	; (800cc40 <atanf+0x16c>)
 800cb38:	429c      	cmp	r4, r3
 800cb3a:	dc4f      	bgt.n	800cbdc <atanf+0x108>
 800cb3c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800cb40:	429c      	cmp	r4, r3
 800cb42:	dc41      	bgt.n	800cbc8 <atanf+0xf4>
 800cb44:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800cb48:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cb4c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cb50:	2300      	movs	r3, #0
 800cb52:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cb56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cb5a:	1c5a      	adds	r2, r3, #1
 800cb5c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800cb60:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cc44 <atanf+0x170>
 800cb64:	eddf 5a38 	vldr	s11, [pc, #224]	; 800cc48 <atanf+0x174>
 800cb68:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800cc4c <atanf+0x178>
 800cb6c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cb70:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cb74:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800cc50 <atanf+0x17c>
 800cb78:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cb7c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800cc54 <atanf+0x180>
 800cb80:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cb84:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800cc58 <atanf+0x184>
 800cb88:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cb8c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cc5c <atanf+0x188>
 800cb90:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cb94:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800cc60 <atanf+0x18c>
 800cb98:	eea6 5a87 	vfma.f32	s10, s13, s14
 800cb9c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800cc64 <atanf+0x190>
 800cba0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cba4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800cc68 <atanf+0x194>
 800cba8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800cbac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800cc6c <atanf+0x198>
 800cbb0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cbb4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cbb8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800cbbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cbc0:	d121      	bne.n	800cc06 <atanf+0x132>
 800cbc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbc6:	e794      	b.n	800caf2 <atanf+0x1e>
 800cbc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cbcc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cbd0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cbda:	e7be      	b.n	800cb5a <atanf+0x86>
 800cbdc:	4b24      	ldr	r3, [pc, #144]	; (800cc70 <atanf+0x19c>)
 800cbde:	429c      	cmp	r4, r3
 800cbe0:	dc0b      	bgt.n	800cbfa <atanf+0x126>
 800cbe2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800cbe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbea:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cbee:	2302      	movs	r3, #2
 800cbf0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cbf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbf8:	e7af      	b.n	800cb5a <atanf+0x86>
 800cbfa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cbfe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cc02:	2303      	movs	r3, #3
 800cc04:	e7a9      	b.n	800cb5a <atanf+0x86>
 800cc06:	4a1b      	ldr	r2, [pc, #108]	; (800cc74 <atanf+0x1a0>)
 800cc08:	491b      	ldr	r1, [pc, #108]	; (800cc78 <atanf+0x1a4>)
 800cc0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cc0e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cc12:	edd3 6a00 	vldr	s13, [r3]
 800cc16:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cc1a:	2d00      	cmp	r5, #0
 800cc1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cc20:	edd2 7a00 	vldr	s15, [r2]
 800cc24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc28:	bfb8      	it	lt
 800cc2a:	eef1 7a67 	vneglt.f32	s15, s15
 800cc2e:	e760      	b.n	800caf2 <atanf+0x1e>
 800cc30:	3fc90fdb 	.word	0x3fc90fdb
 800cc34:	bfc90fdb 	.word	0xbfc90fdb
 800cc38:	3edfffff 	.word	0x3edfffff
 800cc3c:	7149f2ca 	.word	0x7149f2ca
 800cc40:	3f97ffff 	.word	0x3f97ffff
 800cc44:	3c8569d7 	.word	0x3c8569d7
 800cc48:	3d4bda59 	.word	0x3d4bda59
 800cc4c:	bd6ef16b 	.word	0xbd6ef16b
 800cc50:	3d886b35 	.word	0x3d886b35
 800cc54:	3dba2e6e 	.word	0x3dba2e6e
 800cc58:	3e124925 	.word	0x3e124925
 800cc5c:	3eaaaaab 	.word	0x3eaaaaab
 800cc60:	bd15a221 	.word	0xbd15a221
 800cc64:	bd9d8795 	.word	0xbd9d8795
 800cc68:	bde38e38 	.word	0xbde38e38
 800cc6c:	be4ccccd 	.word	0xbe4ccccd
 800cc70:	401bffff 	.word	0x401bffff
 800cc74:	08010e60 	.word	0x08010e60
 800cc78:	08010e70 	.word	0x08010e70

0800cc7c <fabsf>:
 800cc7c:	ee10 3a10 	vmov	r3, s0
 800cc80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc84:	ee00 3a10 	vmov	s0, r3
 800cc88:	4770      	bx	lr
 800cc8a:	0000      	movs	r0, r0
 800cc8c:	0000      	movs	r0, r0
	...

0800cc90 <scalbn>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	ec55 4b10 	vmov	r4, r5, d0
 800cc96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	462b      	mov	r3, r5
 800cc9e:	b999      	cbnz	r1, 800ccc8 <scalbn+0x38>
 800cca0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cca4:	4323      	orrs	r3, r4
 800cca6:	d03f      	beq.n	800cd28 <scalbn+0x98>
 800cca8:	4b35      	ldr	r3, [pc, #212]	; (800cd80 <scalbn+0xf0>)
 800ccaa:	4629      	mov	r1, r5
 800ccac:	ee10 0a10 	vmov	r0, s0
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f7f3 fc99 	bl	80005e8 <__aeabi_dmul>
 800ccb6:	4b33      	ldr	r3, [pc, #204]	; (800cd84 <scalbn+0xf4>)
 800ccb8:	429e      	cmp	r6, r3
 800ccba:	4604      	mov	r4, r0
 800ccbc:	460d      	mov	r5, r1
 800ccbe:	da10      	bge.n	800cce2 <scalbn+0x52>
 800ccc0:	a327      	add	r3, pc, #156	; (adr r3, 800cd60 <scalbn+0xd0>)
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	e01f      	b.n	800cd08 <scalbn+0x78>
 800ccc8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cccc:	4291      	cmp	r1, r2
 800ccce:	d10c      	bne.n	800ccea <scalbn+0x5a>
 800ccd0:	ee10 2a10 	vmov	r2, s0
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	4629      	mov	r1, r5
 800ccd8:	f7f3 fad0 	bl	800027c <__adddf3>
 800ccdc:	4604      	mov	r4, r0
 800ccde:	460d      	mov	r5, r1
 800cce0:	e022      	b.n	800cd28 <scalbn+0x98>
 800cce2:	460b      	mov	r3, r1
 800cce4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cce8:	3936      	subs	r1, #54	; 0x36
 800ccea:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ccee:	4296      	cmp	r6, r2
 800ccf0:	dd0d      	ble.n	800cd0e <scalbn+0x7e>
 800ccf2:	2d00      	cmp	r5, #0
 800ccf4:	a11c      	add	r1, pc, #112	; (adr r1, 800cd68 <scalbn+0xd8>)
 800ccf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccfa:	da02      	bge.n	800cd02 <scalbn+0x72>
 800ccfc:	a11c      	add	r1, pc, #112	; (adr r1, 800cd70 <scalbn+0xe0>)
 800ccfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd02:	a319      	add	r3, pc, #100	; (adr r3, 800cd68 <scalbn+0xd8>)
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	f7f3 fc6e 	bl	80005e8 <__aeabi_dmul>
 800cd0c:	e7e6      	b.n	800ccdc <scalbn+0x4c>
 800cd0e:	1872      	adds	r2, r6, r1
 800cd10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cd14:	428a      	cmp	r2, r1
 800cd16:	dcec      	bgt.n	800ccf2 <scalbn+0x62>
 800cd18:	2a00      	cmp	r2, #0
 800cd1a:	dd08      	ble.n	800cd2e <scalbn+0x9e>
 800cd1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cd28:	ec45 4b10 	vmov	d0, r4, r5
 800cd2c:	bd70      	pop	{r4, r5, r6, pc}
 800cd2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cd32:	da08      	bge.n	800cd46 <scalbn+0xb6>
 800cd34:	2d00      	cmp	r5, #0
 800cd36:	a10a      	add	r1, pc, #40	; (adr r1, 800cd60 <scalbn+0xd0>)
 800cd38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd3c:	dac0      	bge.n	800ccc0 <scalbn+0x30>
 800cd3e:	a10e      	add	r1, pc, #56	; (adr r1, 800cd78 <scalbn+0xe8>)
 800cd40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd44:	e7bc      	b.n	800ccc0 <scalbn+0x30>
 800cd46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd4a:	3236      	adds	r2, #54	; 0x36
 800cd4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cd54:	4620      	mov	r0, r4
 800cd56:	4b0c      	ldr	r3, [pc, #48]	; (800cd88 <scalbn+0xf8>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	e7d5      	b.n	800cd08 <scalbn+0x78>
 800cd5c:	f3af 8000 	nop.w
 800cd60:	c2f8f359 	.word	0xc2f8f359
 800cd64:	01a56e1f 	.word	0x01a56e1f
 800cd68:	8800759c 	.word	0x8800759c
 800cd6c:	7e37e43c 	.word	0x7e37e43c
 800cd70:	8800759c 	.word	0x8800759c
 800cd74:	fe37e43c 	.word	0xfe37e43c
 800cd78:	c2f8f359 	.word	0xc2f8f359
 800cd7c:	81a56e1f 	.word	0x81a56e1f
 800cd80:	43500000 	.word	0x43500000
 800cd84:	ffff3cb0 	.word	0xffff3cb0
 800cd88:	3c900000 	.word	0x3c900000

0800cd8c <with_errno>:
 800cd8c:	b570      	push	{r4, r5, r6, lr}
 800cd8e:	4604      	mov	r4, r0
 800cd90:	460d      	mov	r5, r1
 800cd92:	4616      	mov	r6, r2
 800cd94:	f001 fe96 	bl	800eac4 <__errno>
 800cd98:	4629      	mov	r1, r5
 800cd9a:	6006      	str	r6, [r0, #0]
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	bd70      	pop	{r4, r5, r6, pc}

0800cda0 <xflow>:
 800cda0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cda2:	4614      	mov	r4, r2
 800cda4:	461d      	mov	r5, r3
 800cda6:	b108      	cbz	r0, 800cdac <xflow+0xc>
 800cda8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cdac:	e9cd 2300 	strd	r2, r3, [sp]
 800cdb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	f7f3 fc16 	bl	80005e8 <__aeabi_dmul>
 800cdbc:	2222      	movs	r2, #34	; 0x22
 800cdbe:	b003      	add	sp, #12
 800cdc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdc4:	f7ff bfe2 	b.w	800cd8c <with_errno>

0800cdc8 <__math_uflow>:
 800cdc8:	b508      	push	{r3, lr}
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cdd0:	f7ff ffe6 	bl	800cda0 <xflow>
 800cdd4:	ec41 0b10 	vmov	d0, r0, r1
 800cdd8:	bd08      	pop	{r3, pc}

0800cdda <__math_oflow>:
 800cdda:	b508      	push	{r3, lr}
 800cddc:	2200      	movs	r2, #0
 800cdde:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cde2:	f7ff ffdd 	bl	800cda0 <xflow>
 800cde6:	ec41 0b10 	vmov	d0, r0, r1
 800cdea:	bd08      	pop	{r3, pc}
 800cdec:	0000      	movs	r0, r0
	...

0800cdf0 <__kernel_rem_pio2>:
 800cdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf4:	ed2d 8b02 	vpush	{d8}
 800cdf8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cdfc:	f112 0f14 	cmn.w	r2, #20
 800ce00:	9306      	str	r3, [sp, #24]
 800ce02:	9104      	str	r1, [sp, #16]
 800ce04:	4bc2      	ldr	r3, [pc, #776]	; (800d110 <__kernel_rem_pio2+0x320>)
 800ce06:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ce08:	9009      	str	r0, [sp, #36]	; 0x24
 800ce0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	9b06      	ldr	r3, [sp, #24]
 800ce12:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce16:	bfa8      	it	ge
 800ce18:	1ed4      	subge	r4, r2, #3
 800ce1a:	9305      	str	r3, [sp, #20]
 800ce1c:	bfb2      	itee	lt
 800ce1e:	2400      	movlt	r4, #0
 800ce20:	2318      	movge	r3, #24
 800ce22:	fb94 f4f3 	sdivge	r4, r4, r3
 800ce26:	f06f 0317 	mvn.w	r3, #23
 800ce2a:	fb04 3303 	mla	r3, r4, r3, r3
 800ce2e:	eb03 0a02 	add.w	sl, r3, r2
 800ce32:	9b00      	ldr	r3, [sp, #0]
 800ce34:	9a05      	ldr	r2, [sp, #20]
 800ce36:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800d100 <__kernel_rem_pio2+0x310>
 800ce3a:	eb03 0802 	add.w	r8, r3, r2
 800ce3e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ce40:	1aa7      	subs	r7, r4, r2
 800ce42:	ae20      	add	r6, sp, #128	; 0x80
 800ce44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ce48:	2500      	movs	r5, #0
 800ce4a:	4545      	cmp	r5, r8
 800ce4c:	dd13      	ble.n	800ce76 <__kernel_rem_pio2+0x86>
 800ce4e:	9b06      	ldr	r3, [sp, #24]
 800ce50:	aa20      	add	r2, sp, #128	; 0x80
 800ce52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ce56:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ce5a:	f04f 0800 	mov.w	r8, #0
 800ce5e:	9b00      	ldr	r3, [sp, #0]
 800ce60:	4598      	cmp	r8, r3
 800ce62:	dc31      	bgt.n	800cec8 <__kernel_rem_pio2+0xd8>
 800ce64:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800d100 <__kernel_rem_pio2+0x310>
 800ce68:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ce6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce70:	462f      	mov	r7, r5
 800ce72:	2600      	movs	r6, #0
 800ce74:	e01b      	b.n	800ceae <__kernel_rem_pio2+0xbe>
 800ce76:	42ef      	cmn	r7, r5
 800ce78:	d407      	bmi.n	800ce8a <__kernel_rem_pio2+0x9a>
 800ce7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ce7e:	f7f3 fb49 	bl	8000514 <__aeabi_i2d>
 800ce82:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ce86:	3501      	adds	r5, #1
 800ce88:	e7df      	b.n	800ce4a <__kernel_rem_pio2+0x5a>
 800ce8a:	ec51 0b18 	vmov	r0, r1, d8
 800ce8e:	e7f8      	b.n	800ce82 <__kernel_rem_pio2+0x92>
 800ce90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ce98:	f7f3 fba6 	bl	80005e8 <__aeabi_dmul>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	460b      	mov	r3, r1
 800cea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cea4:	f7f3 f9ea 	bl	800027c <__adddf3>
 800cea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ceac:	3601      	adds	r6, #1
 800ceae:	9b05      	ldr	r3, [sp, #20]
 800ceb0:	429e      	cmp	r6, r3
 800ceb2:	f1a7 0708 	sub.w	r7, r7, #8
 800ceb6:	ddeb      	ble.n	800ce90 <__kernel_rem_pio2+0xa0>
 800ceb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cebc:	f108 0801 	add.w	r8, r8, #1
 800cec0:	ecab 7b02 	vstmia	fp!, {d7}
 800cec4:	3508      	adds	r5, #8
 800cec6:	e7ca      	b.n	800ce5e <__kernel_rem_pio2+0x6e>
 800cec8:	9b00      	ldr	r3, [sp, #0]
 800ceca:	aa0c      	add	r2, sp, #48	; 0x30
 800cecc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ced0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ced2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ced4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ced8:	9c00      	ldr	r4, [sp, #0]
 800ceda:	930a      	str	r3, [sp, #40]	; 0x28
 800cedc:	00e3      	lsls	r3, r4, #3
 800cede:	9308      	str	r3, [sp, #32]
 800cee0:	ab98      	add	r3, sp, #608	; 0x260
 800cee2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cee6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ceea:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ceee:	ab70      	add	r3, sp, #448	; 0x1c0
 800cef0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800cef4:	46c3      	mov	fp, r8
 800cef6:	46a1      	mov	r9, r4
 800cef8:	f1b9 0f00 	cmp.w	r9, #0
 800cefc:	f1a5 0508 	sub.w	r5, r5, #8
 800cf00:	dc77      	bgt.n	800cff2 <__kernel_rem_pio2+0x202>
 800cf02:	ec47 6b10 	vmov	d0, r6, r7
 800cf06:	4650      	mov	r0, sl
 800cf08:	f7ff fec2 	bl	800cc90 <scalbn>
 800cf0c:	ec57 6b10 	vmov	r6, r7, d0
 800cf10:	2200      	movs	r2, #0
 800cf12:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cf16:	ee10 0a10 	vmov	r0, s0
 800cf1a:	4639      	mov	r1, r7
 800cf1c:	f7f3 fb64 	bl	80005e8 <__aeabi_dmul>
 800cf20:	ec41 0b10 	vmov	d0, r0, r1
 800cf24:	f000 fd8c 	bl	800da40 <floor>
 800cf28:	4b7a      	ldr	r3, [pc, #488]	; (800d114 <__kernel_rem_pio2+0x324>)
 800cf2a:	ec51 0b10 	vmov	r0, r1, d0
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f7f3 fb5a 	bl	80005e8 <__aeabi_dmul>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4630      	mov	r0, r6
 800cf3a:	4639      	mov	r1, r7
 800cf3c:	f7f3 f99c 	bl	8000278 <__aeabi_dsub>
 800cf40:	460f      	mov	r7, r1
 800cf42:	4606      	mov	r6, r0
 800cf44:	f7f3 fe00 	bl	8000b48 <__aeabi_d2iz>
 800cf48:	9002      	str	r0, [sp, #8]
 800cf4a:	f7f3 fae3 	bl	8000514 <__aeabi_i2d>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	4630      	mov	r0, r6
 800cf54:	4639      	mov	r1, r7
 800cf56:	f7f3 f98f 	bl	8000278 <__aeabi_dsub>
 800cf5a:	f1ba 0f00 	cmp.w	sl, #0
 800cf5e:	4606      	mov	r6, r0
 800cf60:	460f      	mov	r7, r1
 800cf62:	dd6d      	ble.n	800d040 <__kernel_rem_pio2+0x250>
 800cf64:	1e61      	subs	r1, r4, #1
 800cf66:	ab0c      	add	r3, sp, #48	; 0x30
 800cf68:	9d02      	ldr	r5, [sp, #8]
 800cf6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf6e:	f1ca 0018 	rsb	r0, sl, #24
 800cf72:	fa43 f200 	asr.w	r2, r3, r0
 800cf76:	4415      	add	r5, r2
 800cf78:	4082      	lsls	r2, r0
 800cf7a:	1a9b      	subs	r3, r3, r2
 800cf7c:	aa0c      	add	r2, sp, #48	; 0x30
 800cf7e:	9502      	str	r5, [sp, #8]
 800cf80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cf84:	f1ca 0217 	rsb	r2, sl, #23
 800cf88:	fa43 fb02 	asr.w	fp, r3, r2
 800cf8c:	f1bb 0f00 	cmp.w	fp, #0
 800cf90:	dd65      	ble.n	800d05e <__kernel_rem_pio2+0x26e>
 800cf92:	9b02      	ldr	r3, [sp, #8]
 800cf94:	2200      	movs	r2, #0
 800cf96:	3301      	adds	r3, #1
 800cf98:	9302      	str	r3, [sp, #8]
 800cf9a:	4615      	mov	r5, r2
 800cf9c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cfa0:	4294      	cmp	r4, r2
 800cfa2:	f300 809f 	bgt.w	800d0e4 <__kernel_rem_pio2+0x2f4>
 800cfa6:	f1ba 0f00 	cmp.w	sl, #0
 800cfaa:	dd07      	ble.n	800cfbc <__kernel_rem_pio2+0x1cc>
 800cfac:	f1ba 0f01 	cmp.w	sl, #1
 800cfb0:	f000 80c1 	beq.w	800d136 <__kernel_rem_pio2+0x346>
 800cfb4:	f1ba 0f02 	cmp.w	sl, #2
 800cfb8:	f000 80c7 	beq.w	800d14a <__kernel_rem_pio2+0x35a>
 800cfbc:	f1bb 0f02 	cmp.w	fp, #2
 800cfc0:	d14d      	bne.n	800d05e <__kernel_rem_pio2+0x26e>
 800cfc2:	4632      	mov	r2, r6
 800cfc4:	463b      	mov	r3, r7
 800cfc6:	4954      	ldr	r1, [pc, #336]	; (800d118 <__kernel_rem_pio2+0x328>)
 800cfc8:	2000      	movs	r0, #0
 800cfca:	f7f3 f955 	bl	8000278 <__aeabi_dsub>
 800cfce:	4606      	mov	r6, r0
 800cfd0:	460f      	mov	r7, r1
 800cfd2:	2d00      	cmp	r5, #0
 800cfd4:	d043      	beq.n	800d05e <__kernel_rem_pio2+0x26e>
 800cfd6:	4650      	mov	r0, sl
 800cfd8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800d108 <__kernel_rem_pio2+0x318>
 800cfdc:	f7ff fe58 	bl	800cc90 <scalbn>
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	ec53 2b10 	vmov	r2, r3, d0
 800cfe8:	f7f3 f946 	bl	8000278 <__aeabi_dsub>
 800cfec:	4606      	mov	r6, r0
 800cfee:	460f      	mov	r7, r1
 800cff0:	e035      	b.n	800d05e <__kernel_rem_pio2+0x26e>
 800cff2:	4b4a      	ldr	r3, [pc, #296]	; (800d11c <__kernel_rem_pio2+0x32c>)
 800cff4:	2200      	movs	r2, #0
 800cff6:	4630      	mov	r0, r6
 800cff8:	4639      	mov	r1, r7
 800cffa:	f7f3 faf5 	bl	80005e8 <__aeabi_dmul>
 800cffe:	f7f3 fda3 	bl	8000b48 <__aeabi_d2iz>
 800d002:	f7f3 fa87 	bl	8000514 <__aeabi_i2d>
 800d006:	4602      	mov	r2, r0
 800d008:	460b      	mov	r3, r1
 800d00a:	ec43 2b18 	vmov	d8, r2, r3
 800d00e:	4b44      	ldr	r3, [pc, #272]	; (800d120 <__kernel_rem_pio2+0x330>)
 800d010:	2200      	movs	r2, #0
 800d012:	f7f3 fae9 	bl	80005e8 <__aeabi_dmul>
 800d016:	4602      	mov	r2, r0
 800d018:	460b      	mov	r3, r1
 800d01a:	4630      	mov	r0, r6
 800d01c:	4639      	mov	r1, r7
 800d01e:	f7f3 f92b 	bl	8000278 <__aeabi_dsub>
 800d022:	f7f3 fd91 	bl	8000b48 <__aeabi_d2iz>
 800d026:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d02a:	f84b 0b04 	str.w	r0, [fp], #4
 800d02e:	ec51 0b18 	vmov	r0, r1, d8
 800d032:	f7f3 f923 	bl	800027c <__adddf3>
 800d036:	f109 39ff 	add.w	r9, r9, #4294967295
 800d03a:	4606      	mov	r6, r0
 800d03c:	460f      	mov	r7, r1
 800d03e:	e75b      	b.n	800cef8 <__kernel_rem_pio2+0x108>
 800d040:	d106      	bne.n	800d050 <__kernel_rem_pio2+0x260>
 800d042:	1e63      	subs	r3, r4, #1
 800d044:	aa0c      	add	r2, sp, #48	; 0x30
 800d046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d04a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800d04e:	e79d      	b.n	800cf8c <__kernel_rem_pio2+0x19c>
 800d050:	4b34      	ldr	r3, [pc, #208]	; (800d124 <__kernel_rem_pio2+0x334>)
 800d052:	2200      	movs	r2, #0
 800d054:	f7f3 fd4e 	bl	8000af4 <__aeabi_dcmpge>
 800d058:	2800      	cmp	r0, #0
 800d05a:	d140      	bne.n	800d0de <__kernel_rem_pio2+0x2ee>
 800d05c:	4683      	mov	fp, r0
 800d05e:	2200      	movs	r2, #0
 800d060:	2300      	movs	r3, #0
 800d062:	4630      	mov	r0, r6
 800d064:	4639      	mov	r1, r7
 800d066:	f7f3 fd27 	bl	8000ab8 <__aeabi_dcmpeq>
 800d06a:	2800      	cmp	r0, #0
 800d06c:	f000 80c1 	beq.w	800d1f2 <__kernel_rem_pio2+0x402>
 800d070:	1e65      	subs	r5, r4, #1
 800d072:	462b      	mov	r3, r5
 800d074:	2200      	movs	r2, #0
 800d076:	9900      	ldr	r1, [sp, #0]
 800d078:	428b      	cmp	r3, r1
 800d07a:	da6d      	bge.n	800d158 <__kernel_rem_pio2+0x368>
 800d07c:	2a00      	cmp	r2, #0
 800d07e:	f000 808a 	beq.w	800d196 <__kernel_rem_pio2+0x3a6>
 800d082:	ab0c      	add	r3, sp, #48	; 0x30
 800d084:	f1aa 0a18 	sub.w	sl, sl, #24
 800d088:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f000 80ae 	beq.w	800d1ee <__kernel_rem_pio2+0x3fe>
 800d092:	4650      	mov	r0, sl
 800d094:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800d108 <__kernel_rem_pio2+0x318>
 800d098:	f7ff fdfa 	bl	800cc90 <scalbn>
 800d09c:	1c6b      	adds	r3, r5, #1
 800d09e:	00da      	lsls	r2, r3, #3
 800d0a0:	9205      	str	r2, [sp, #20]
 800d0a2:	ec57 6b10 	vmov	r6, r7, d0
 800d0a6:	aa70      	add	r2, sp, #448	; 0x1c0
 800d0a8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800d11c <__kernel_rem_pio2+0x32c>
 800d0ac:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800d0b0:	462c      	mov	r4, r5
 800d0b2:	f04f 0800 	mov.w	r8, #0
 800d0b6:	2c00      	cmp	r4, #0
 800d0b8:	f280 80d4 	bge.w	800d264 <__kernel_rem_pio2+0x474>
 800d0bc:	462c      	mov	r4, r5
 800d0be:	2c00      	cmp	r4, #0
 800d0c0:	f2c0 8102 	blt.w	800d2c8 <__kernel_rem_pio2+0x4d8>
 800d0c4:	4b18      	ldr	r3, [pc, #96]	; (800d128 <__kernel_rem_pio2+0x338>)
 800d0c6:	461e      	mov	r6, r3
 800d0c8:	ab70      	add	r3, sp, #448	; 0x1c0
 800d0ca:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800d0ce:	1b2b      	subs	r3, r5, r4
 800d0d0:	f04f 0900 	mov.w	r9, #0
 800d0d4:	f04f 0a00 	mov.w	sl, #0
 800d0d8:	2700      	movs	r7, #0
 800d0da:	9306      	str	r3, [sp, #24]
 800d0dc:	e0e6      	b.n	800d2ac <__kernel_rem_pio2+0x4bc>
 800d0de:	f04f 0b02 	mov.w	fp, #2
 800d0e2:	e756      	b.n	800cf92 <__kernel_rem_pio2+0x1a2>
 800d0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800d0e8:	bb05      	cbnz	r5, 800d12c <__kernel_rem_pio2+0x33c>
 800d0ea:	b123      	cbz	r3, 800d0f6 <__kernel_rem_pio2+0x306>
 800d0ec:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d0f0:	f8c8 3000 	str.w	r3, [r8]
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	3201      	adds	r2, #1
 800d0f8:	f108 0804 	add.w	r8, r8, #4
 800d0fc:	461d      	mov	r5, r3
 800d0fe:	e74f      	b.n	800cfa0 <__kernel_rem_pio2+0x1b0>
	...
 800d10c:	3ff00000 	.word	0x3ff00000
 800d110:	08010ec0 	.word	0x08010ec0
 800d114:	40200000 	.word	0x40200000
 800d118:	3ff00000 	.word	0x3ff00000
 800d11c:	3e700000 	.word	0x3e700000
 800d120:	41700000 	.word	0x41700000
 800d124:	3fe00000 	.word	0x3fe00000
 800d128:	08010e80 	.word	0x08010e80
 800d12c:	1acb      	subs	r3, r1, r3
 800d12e:	f8c8 3000 	str.w	r3, [r8]
 800d132:	462b      	mov	r3, r5
 800d134:	e7df      	b.n	800d0f6 <__kernel_rem_pio2+0x306>
 800d136:	1e62      	subs	r2, r4, #1
 800d138:	ab0c      	add	r3, sp, #48	; 0x30
 800d13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d13e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d142:	a90c      	add	r1, sp, #48	; 0x30
 800d144:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d148:	e738      	b.n	800cfbc <__kernel_rem_pio2+0x1cc>
 800d14a:	1e62      	subs	r2, r4, #1
 800d14c:	ab0c      	add	r3, sp, #48	; 0x30
 800d14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d152:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d156:	e7f4      	b.n	800d142 <__kernel_rem_pio2+0x352>
 800d158:	a90c      	add	r1, sp, #48	; 0x30
 800d15a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d15e:	3b01      	subs	r3, #1
 800d160:	430a      	orrs	r2, r1
 800d162:	e788      	b.n	800d076 <__kernel_rem_pio2+0x286>
 800d164:	3301      	adds	r3, #1
 800d166:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d16a:	2900      	cmp	r1, #0
 800d16c:	d0fa      	beq.n	800d164 <__kernel_rem_pio2+0x374>
 800d16e:	9a08      	ldr	r2, [sp, #32]
 800d170:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800d174:	446a      	add	r2, sp
 800d176:	3a98      	subs	r2, #152	; 0x98
 800d178:	9208      	str	r2, [sp, #32]
 800d17a:	9a06      	ldr	r2, [sp, #24]
 800d17c:	a920      	add	r1, sp, #128	; 0x80
 800d17e:	18a2      	adds	r2, r4, r2
 800d180:	18e3      	adds	r3, r4, r3
 800d182:	f104 0801 	add.w	r8, r4, #1
 800d186:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d18a:	9302      	str	r3, [sp, #8]
 800d18c:	9b02      	ldr	r3, [sp, #8]
 800d18e:	4543      	cmp	r3, r8
 800d190:	da04      	bge.n	800d19c <__kernel_rem_pio2+0x3ac>
 800d192:	461c      	mov	r4, r3
 800d194:	e6a2      	b.n	800cedc <__kernel_rem_pio2+0xec>
 800d196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d198:	2301      	movs	r3, #1
 800d19a:	e7e4      	b.n	800d166 <__kernel_rem_pio2+0x376>
 800d19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d19e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d1a2:	f7f3 f9b7 	bl	8000514 <__aeabi_i2d>
 800d1a6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ac:	46ab      	mov	fp, r5
 800d1ae:	461c      	mov	r4, r3
 800d1b0:	f04f 0900 	mov.w	r9, #0
 800d1b4:	2600      	movs	r6, #0
 800d1b6:	2700      	movs	r7, #0
 800d1b8:	9b05      	ldr	r3, [sp, #20]
 800d1ba:	4599      	cmp	r9, r3
 800d1bc:	dd06      	ble.n	800d1cc <__kernel_rem_pio2+0x3dc>
 800d1be:	9b08      	ldr	r3, [sp, #32]
 800d1c0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d1c4:	f108 0801 	add.w	r8, r8, #1
 800d1c8:	9308      	str	r3, [sp, #32]
 800d1ca:	e7df      	b.n	800d18c <__kernel_rem_pio2+0x39c>
 800d1cc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d1d0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d1d4:	f7f3 fa08 	bl	80005e8 <__aeabi_dmul>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	460b      	mov	r3, r1
 800d1dc:	4630      	mov	r0, r6
 800d1de:	4639      	mov	r1, r7
 800d1e0:	f7f3 f84c 	bl	800027c <__adddf3>
 800d1e4:	f109 0901 	add.w	r9, r9, #1
 800d1e8:	4606      	mov	r6, r0
 800d1ea:	460f      	mov	r7, r1
 800d1ec:	e7e4      	b.n	800d1b8 <__kernel_rem_pio2+0x3c8>
 800d1ee:	3d01      	subs	r5, #1
 800d1f0:	e747      	b.n	800d082 <__kernel_rem_pio2+0x292>
 800d1f2:	ec47 6b10 	vmov	d0, r6, r7
 800d1f6:	f1ca 0000 	rsb	r0, sl, #0
 800d1fa:	f7ff fd49 	bl	800cc90 <scalbn>
 800d1fe:	ec57 6b10 	vmov	r6, r7, d0
 800d202:	4ba0      	ldr	r3, [pc, #640]	; (800d484 <__kernel_rem_pio2+0x694>)
 800d204:	ee10 0a10 	vmov	r0, s0
 800d208:	2200      	movs	r2, #0
 800d20a:	4639      	mov	r1, r7
 800d20c:	f7f3 fc72 	bl	8000af4 <__aeabi_dcmpge>
 800d210:	b1f8      	cbz	r0, 800d252 <__kernel_rem_pio2+0x462>
 800d212:	4b9d      	ldr	r3, [pc, #628]	; (800d488 <__kernel_rem_pio2+0x698>)
 800d214:	2200      	movs	r2, #0
 800d216:	4630      	mov	r0, r6
 800d218:	4639      	mov	r1, r7
 800d21a:	f7f3 f9e5 	bl	80005e8 <__aeabi_dmul>
 800d21e:	f7f3 fc93 	bl	8000b48 <__aeabi_d2iz>
 800d222:	4680      	mov	r8, r0
 800d224:	f7f3 f976 	bl	8000514 <__aeabi_i2d>
 800d228:	4b96      	ldr	r3, [pc, #600]	; (800d484 <__kernel_rem_pio2+0x694>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	f7f3 f9dc 	bl	80005e8 <__aeabi_dmul>
 800d230:	460b      	mov	r3, r1
 800d232:	4602      	mov	r2, r0
 800d234:	4639      	mov	r1, r7
 800d236:	4630      	mov	r0, r6
 800d238:	f7f3 f81e 	bl	8000278 <__aeabi_dsub>
 800d23c:	f7f3 fc84 	bl	8000b48 <__aeabi_d2iz>
 800d240:	1c65      	adds	r5, r4, #1
 800d242:	ab0c      	add	r3, sp, #48	; 0x30
 800d244:	f10a 0a18 	add.w	sl, sl, #24
 800d248:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d24c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d250:	e71f      	b.n	800d092 <__kernel_rem_pio2+0x2a2>
 800d252:	4630      	mov	r0, r6
 800d254:	4639      	mov	r1, r7
 800d256:	f7f3 fc77 	bl	8000b48 <__aeabi_d2iz>
 800d25a:	ab0c      	add	r3, sp, #48	; 0x30
 800d25c:	4625      	mov	r5, r4
 800d25e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d262:	e716      	b.n	800d092 <__kernel_rem_pio2+0x2a2>
 800d264:	ab0c      	add	r3, sp, #48	; 0x30
 800d266:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d26a:	f7f3 f953 	bl	8000514 <__aeabi_i2d>
 800d26e:	4632      	mov	r2, r6
 800d270:	463b      	mov	r3, r7
 800d272:	f7f3 f9b9 	bl	80005e8 <__aeabi_dmul>
 800d276:	4642      	mov	r2, r8
 800d278:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d27c:	464b      	mov	r3, r9
 800d27e:	4630      	mov	r0, r6
 800d280:	4639      	mov	r1, r7
 800d282:	f7f3 f9b1 	bl	80005e8 <__aeabi_dmul>
 800d286:	3c01      	subs	r4, #1
 800d288:	4606      	mov	r6, r0
 800d28a:	460f      	mov	r7, r1
 800d28c:	e713      	b.n	800d0b6 <__kernel_rem_pio2+0x2c6>
 800d28e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800d292:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d296:	f7f3 f9a7 	bl	80005e8 <__aeabi_dmul>
 800d29a:	4602      	mov	r2, r0
 800d29c:	460b      	mov	r3, r1
 800d29e:	4648      	mov	r0, r9
 800d2a0:	4651      	mov	r1, sl
 800d2a2:	f7f2 ffeb 	bl	800027c <__adddf3>
 800d2a6:	3701      	adds	r7, #1
 800d2a8:	4681      	mov	r9, r0
 800d2aa:	468a      	mov	sl, r1
 800d2ac:	9b00      	ldr	r3, [sp, #0]
 800d2ae:	429f      	cmp	r7, r3
 800d2b0:	dc02      	bgt.n	800d2b8 <__kernel_rem_pio2+0x4c8>
 800d2b2:	9b06      	ldr	r3, [sp, #24]
 800d2b4:	429f      	cmp	r7, r3
 800d2b6:	ddea      	ble.n	800d28e <__kernel_rem_pio2+0x49e>
 800d2b8:	9a06      	ldr	r2, [sp, #24]
 800d2ba:	ab48      	add	r3, sp, #288	; 0x120
 800d2bc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800d2c0:	e9c6 9a00 	strd	r9, sl, [r6]
 800d2c4:	3c01      	subs	r4, #1
 800d2c6:	e6fa      	b.n	800d0be <__kernel_rem_pio2+0x2ce>
 800d2c8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d2ca:	2b02      	cmp	r3, #2
 800d2cc:	dc0b      	bgt.n	800d2e6 <__kernel_rem_pio2+0x4f6>
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	dc39      	bgt.n	800d346 <__kernel_rem_pio2+0x556>
 800d2d2:	d05d      	beq.n	800d390 <__kernel_rem_pio2+0x5a0>
 800d2d4:	9b02      	ldr	r3, [sp, #8]
 800d2d6:	f003 0007 	and.w	r0, r3, #7
 800d2da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d2de:	ecbd 8b02 	vpop	{d8}
 800d2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d2e8:	2b03      	cmp	r3, #3
 800d2ea:	d1f3      	bne.n	800d2d4 <__kernel_rem_pio2+0x4e4>
 800d2ec:	9b05      	ldr	r3, [sp, #20]
 800d2ee:	9500      	str	r5, [sp, #0]
 800d2f0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d2f4:	eb0d 0403 	add.w	r4, sp, r3
 800d2f8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800d2fc:	46a2      	mov	sl, r4
 800d2fe:	9b00      	ldr	r3, [sp, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	f1aa 0a08 	sub.w	sl, sl, #8
 800d306:	dc69      	bgt.n	800d3dc <__kernel_rem_pio2+0x5ec>
 800d308:	46aa      	mov	sl, r5
 800d30a:	f1ba 0f01 	cmp.w	sl, #1
 800d30e:	f1a4 0408 	sub.w	r4, r4, #8
 800d312:	f300 8083 	bgt.w	800d41c <__kernel_rem_pio2+0x62c>
 800d316:	9c05      	ldr	r4, [sp, #20]
 800d318:	ab48      	add	r3, sp, #288	; 0x120
 800d31a:	441c      	add	r4, r3
 800d31c:	2000      	movs	r0, #0
 800d31e:	2100      	movs	r1, #0
 800d320:	2d01      	cmp	r5, #1
 800d322:	f300 809a 	bgt.w	800d45a <__kernel_rem_pio2+0x66a>
 800d326:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800d32a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d32e:	f1bb 0f00 	cmp.w	fp, #0
 800d332:	f040 8098 	bne.w	800d466 <__kernel_rem_pio2+0x676>
 800d336:	9b04      	ldr	r3, [sp, #16]
 800d338:	e9c3 7800 	strd	r7, r8, [r3]
 800d33c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d340:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d344:	e7c6      	b.n	800d2d4 <__kernel_rem_pio2+0x4e4>
 800d346:	9e05      	ldr	r6, [sp, #20]
 800d348:	ab48      	add	r3, sp, #288	; 0x120
 800d34a:	441e      	add	r6, r3
 800d34c:	462c      	mov	r4, r5
 800d34e:	2000      	movs	r0, #0
 800d350:	2100      	movs	r1, #0
 800d352:	2c00      	cmp	r4, #0
 800d354:	da33      	bge.n	800d3be <__kernel_rem_pio2+0x5ce>
 800d356:	f1bb 0f00 	cmp.w	fp, #0
 800d35a:	d036      	beq.n	800d3ca <__kernel_rem_pio2+0x5da>
 800d35c:	4602      	mov	r2, r0
 800d35e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d362:	9c04      	ldr	r4, [sp, #16]
 800d364:	e9c4 2300 	strd	r2, r3, [r4]
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d370:	f7f2 ff82 	bl	8000278 <__aeabi_dsub>
 800d374:	ae4a      	add	r6, sp, #296	; 0x128
 800d376:	2401      	movs	r4, #1
 800d378:	42a5      	cmp	r5, r4
 800d37a:	da29      	bge.n	800d3d0 <__kernel_rem_pio2+0x5e0>
 800d37c:	f1bb 0f00 	cmp.w	fp, #0
 800d380:	d002      	beq.n	800d388 <__kernel_rem_pio2+0x598>
 800d382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d386:	4619      	mov	r1, r3
 800d388:	9b04      	ldr	r3, [sp, #16]
 800d38a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d38e:	e7a1      	b.n	800d2d4 <__kernel_rem_pio2+0x4e4>
 800d390:	9c05      	ldr	r4, [sp, #20]
 800d392:	ab48      	add	r3, sp, #288	; 0x120
 800d394:	441c      	add	r4, r3
 800d396:	2000      	movs	r0, #0
 800d398:	2100      	movs	r1, #0
 800d39a:	2d00      	cmp	r5, #0
 800d39c:	da09      	bge.n	800d3b2 <__kernel_rem_pio2+0x5c2>
 800d39e:	f1bb 0f00 	cmp.w	fp, #0
 800d3a2:	d002      	beq.n	800d3aa <__kernel_rem_pio2+0x5ba>
 800d3a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	9b04      	ldr	r3, [sp, #16]
 800d3ac:	e9c3 0100 	strd	r0, r1, [r3]
 800d3b0:	e790      	b.n	800d2d4 <__kernel_rem_pio2+0x4e4>
 800d3b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d3b6:	f7f2 ff61 	bl	800027c <__adddf3>
 800d3ba:	3d01      	subs	r5, #1
 800d3bc:	e7ed      	b.n	800d39a <__kernel_rem_pio2+0x5aa>
 800d3be:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d3c2:	f7f2 ff5b 	bl	800027c <__adddf3>
 800d3c6:	3c01      	subs	r4, #1
 800d3c8:	e7c3      	b.n	800d352 <__kernel_rem_pio2+0x562>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	e7c8      	b.n	800d362 <__kernel_rem_pio2+0x572>
 800d3d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d3d4:	f7f2 ff52 	bl	800027c <__adddf3>
 800d3d8:	3401      	adds	r4, #1
 800d3da:	e7cd      	b.n	800d378 <__kernel_rem_pio2+0x588>
 800d3dc:	e9da 8900 	ldrd	r8, r9, [sl]
 800d3e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d3e4:	9b00      	ldr	r3, [sp, #0]
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	9300      	str	r3, [sp, #0]
 800d3ea:	4632      	mov	r2, r6
 800d3ec:	463b      	mov	r3, r7
 800d3ee:	4640      	mov	r0, r8
 800d3f0:	4649      	mov	r1, r9
 800d3f2:	f7f2 ff43 	bl	800027c <__adddf3>
 800d3f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	460b      	mov	r3, r1
 800d3fe:	4640      	mov	r0, r8
 800d400:	4649      	mov	r1, r9
 800d402:	f7f2 ff39 	bl	8000278 <__aeabi_dsub>
 800d406:	4632      	mov	r2, r6
 800d408:	463b      	mov	r3, r7
 800d40a:	f7f2 ff37 	bl	800027c <__adddf3>
 800d40e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d412:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d416:	ed8a 7b00 	vstr	d7, [sl]
 800d41a:	e770      	b.n	800d2fe <__kernel_rem_pio2+0x50e>
 800d41c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d420:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d424:	4640      	mov	r0, r8
 800d426:	4632      	mov	r2, r6
 800d428:	463b      	mov	r3, r7
 800d42a:	4649      	mov	r1, r9
 800d42c:	f7f2 ff26 	bl	800027c <__adddf3>
 800d430:	e9cd 0100 	strd	r0, r1, [sp]
 800d434:	4602      	mov	r2, r0
 800d436:	460b      	mov	r3, r1
 800d438:	4640      	mov	r0, r8
 800d43a:	4649      	mov	r1, r9
 800d43c:	f7f2 ff1c 	bl	8000278 <__aeabi_dsub>
 800d440:	4632      	mov	r2, r6
 800d442:	463b      	mov	r3, r7
 800d444:	f7f2 ff1a 	bl	800027c <__adddf3>
 800d448:	ed9d 7b00 	vldr	d7, [sp]
 800d44c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d450:	ed84 7b00 	vstr	d7, [r4]
 800d454:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d458:	e757      	b.n	800d30a <__kernel_rem_pio2+0x51a>
 800d45a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d45e:	f7f2 ff0d 	bl	800027c <__adddf3>
 800d462:	3d01      	subs	r5, #1
 800d464:	e75c      	b.n	800d320 <__kernel_rem_pio2+0x530>
 800d466:	9b04      	ldr	r3, [sp, #16]
 800d468:	9a04      	ldr	r2, [sp, #16]
 800d46a:	601f      	str	r7, [r3, #0]
 800d46c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d470:	605c      	str	r4, [r3, #4]
 800d472:	609d      	str	r5, [r3, #8]
 800d474:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d478:	60d3      	str	r3, [r2, #12]
 800d47a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d47e:	6110      	str	r0, [r2, #16]
 800d480:	6153      	str	r3, [r2, #20]
 800d482:	e727      	b.n	800d2d4 <__kernel_rem_pio2+0x4e4>
 800d484:	41700000 	.word	0x41700000
 800d488:	3e700000 	.word	0x3e700000

0800d48c <__kernel_rem_pio2f>:
 800d48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d490:	ed2d 8b04 	vpush	{d8-d9}
 800d494:	b0d9      	sub	sp, #356	; 0x164
 800d496:	4688      	mov	r8, r1
 800d498:	9002      	str	r0, [sp, #8]
 800d49a:	49b8      	ldr	r1, [pc, #736]	; (800d77c <__kernel_rem_pio2f+0x2f0>)
 800d49c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800d49e:	9301      	str	r3, [sp, #4]
 800d4a0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800d4a4:	9901      	ldr	r1, [sp, #4]
 800d4a6:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800d4a8:	f101 3bff 	add.w	fp, r1, #4294967295
 800d4ac:	1d11      	adds	r1, r2, #4
 800d4ae:	db25      	blt.n	800d4fc <__kernel_rem_pio2f+0x70>
 800d4b0:	1ed0      	subs	r0, r2, #3
 800d4b2:	bf48      	it	mi
 800d4b4:	1d10      	addmi	r0, r2, #4
 800d4b6:	10c0      	asrs	r0, r0, #3
 800d4b8:	1c45      	adds	r5, r0, #1
 800d4ba:	00e9      	lsls	r1, r5, #3
 800d4bc:	eba0 070b 	sub.w	r7, r0, fp
 800d4c0:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800d78c <__kernel_rem_pio2f+0x300>
 800d4c4:	9103      	str	r1, [sp, #12]
 800d4c6:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800d4ca:	eb0a 0c0b 	add.w	ip, sl, fp
 800d4ce:	ae1c      	add	r6, sp, #112	; 0x70
 800d4d0:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800d4d4:	2400      	movs	r4, #0
 800d4d6:	4564      	cmp	r4, ip
 800d4d8:	dd12      	ble.n	800d500 <__kernel_rem_pio2f+0x74>
 800d4da:	9901      	ldr	r1, [sp, #4]
 800d4dc:	ac1c      	add	r4, sp, #112	; 0x70
 800d4de:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800d4e2:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800d4e6:	f04f 0c00 	mov.w	ip, #0
 800d4ea:	45d4      	cmp	ip, sl
 800d4ec:	dc27      	bgt.n	800d53e <__kernel_rem_pio2f+0xb2>
 800d4ee:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d4f2:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800d78c <__kernel_rem_pio2f+0x300>
 800d4f6:	4627      	mov	r7, r4
 800d4f8:	2600      	movs	r6, #0
 800d4fa:	e016      	b.n	800d52a <__kernel_rem_pio2f+0x9e>
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	e7db      	b.n	800d4b8 <__kernel_rem_pio2f+0x2c>
 800d500:	42e7      	cmn	r7, r4
 800d502:	bf5d      	ittte	pl
 800d504:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800d508:	ee07 1a90 	vmovpl	s15, r1
 800d50c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d510:	eef0 7a47 	vmovmi.f32	s15, s14
 800d514:	ece6 7a01 	vstmia	r6!, {s15}
 800d518:	3401      	adds	r4, #1
 800d51a:	e7dc      	b.n	800d4d6 <__kernel_rem_pio2f+0x4a>
 800d51c:	ecfe 6a01 	vldmia	lr!, {s13}
 800d520:	ed97 7a00 	vldr	s14, [r7]
 800d524:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d528:	3601      	adds	r6, #1
 800d52a:	455e      	cmp	r6, fp
 800d52c:	f1a7 0704 	sub.w	r7, r7, #4
 800d530:	ddf4      	ble.n	800d51c <__kernel_rem_pio2f+0x90>
 800d532:	ece9 7a01 	vstmia	r9!, {s15}
 800d536:	f10c 0c01 	add.w	ip, ip, #1
 800d53a:	3404      	adds	r4, #4
 800d53c:	e7d5      	b.n	800d4ea <__kernel_rem_pio2f+0x5e>
 800d53e:	a908      	add	r1, sp, #32
 800d540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d544:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800d548:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800d788 <__kernel_rem_pio2f+0x2fc>
 800d54c:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800d784 <__kernel_rem_pio2f+0x2f8>
 800d550:	9105      	str	r1, [sp, #20]
 800d552:	9304      	str	r3, [sp, #16]
 800d554:	4656      	mov	r6, sl
 800d556:	00b3      	lsls	r3, r6, #2
 800d558:	9306      	str	r3, [sp, #24]
 800d55a:	ab58      	add	r3, sp, #352	; 0x160
 800d55c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d560:	ac08      	add	r4, sp, #32
 800d562:	ab44      	add	r3, sp, #272	; 0x110
 800d564:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800d568:	46a4      	mov	ip, r4
 800d56a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d56e:	4637      	mov	r7, r6
 800d570:	2f00      	cmp	r7, #0
 800d572:	f1a0 0004 	sub.w	r0, r0, #4
 800d576:	dc4a      	bgt.n	800d60e <__kernel_rem_pio2f+0x182>
 800d578:	4628      	mov	r0, r5
 800d57a:	9207      	str	r2, [sp, #28]
 800d57c:	f000 f9f8 	bl	800d970 <scalbnf>
 800d580:	eeb0 8a40 	vmov.f32	s16, s0
 800d584:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d588:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d58c:	f000 fad8 	bl	800db40 <floorf>
 800d590:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d594:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d598:	2d00      	cmp	r5, #0
 800d59a:	9a07      	ldr	r2, [sp, #28]
 800d59c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d5a0:	ee17 9a90 	vmov	r9, s15
 800d5a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5a8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d5ac:	dd41      	ble.n	800d632 <__kernel_rem_pio2f+0x1a6>
 800d5ae:	f106 3cff 	add.w	ip, r6, #4294967295
 800d5b2:	ab08      	add	r3, sp, #32
 800d5b4:	f1c5 0e08 	rsb	lr, r5, #8
 800d5b8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800d5bc:	fa47 f00e 	asr.w	r0, r7, lr
 800d5c0:	4481      	add	r9, r0
 800d5c2:	fa00 f00e 	lsl.w	r0, r0, lr
 800d5c6:	1a3f      	subs	r7, r7, r0
 800d5c8:	f1c5 0007 	rsb	r0, r5, #7
 800d5cc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800d5d0:	4107      	asrs	r7, r0
 800d5d2:	2f00      	cmp	r7, #0
 800d5d4:	dd3c      	ble.n	800d650 <__kernel_rem_pio2f+0x1c4>
 800d5d6:	f04f 0e00 	mov.w	lr, #0
 800d5da:	f109 0901 	add.w	r9, r9, #1
 800d5de:	4671      	mov	r1, lr
 800d5e0:	4576      	cmp	r6, lr
 800d5e2:	dc67      	bgt.n	800d6b4 <__kernel_rem_pio2f+0x228>
 800d5e4:	2d00      	cmp	r5, #0
 800d5e6:	dd03      	ble.n	800d5f0 <__kernel_rem_pio2f+0x164>
 800d5e8:	2d01      	cmp	r5, #1
 800d5ea:	d074      	beq.n	800d6d6 <__kernel_rem_pio2f+0x24a>
 800d5ec:	2d02      	cmp	r5, #2
 800d5ee:	d07b      	beq.n	800d6e8 <__kernel_rem_pio2f+0x25c>
 800d5f0:	2f02      	cmp	r7, #2
 800d5f2:	d12d      	bne.n	800d650 <__kernel_rem_pio2f+0x1c4>
 800d5f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d5f8:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d5fc:	b341      	cbz	r1, 800d650 <__kernel_rem_pio2f+0x1c4>
 800d5fe:	4628      	mov	r0, r5
 800d600:	9207      	str	r2, [sp, #28]
 800d602:	f000 f9b5 	bl	800d970 <scalbnf>
 800d606:	9a07      	ldr	r2, [sp, #28]
 800d608:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d60c:	e020      	b.n	800d650 <__kernel_rem_pio2f+0x1c4>
 800d60e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d612:	3f01      	subs	r7, #1
 800d614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d61c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d620:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d624:	ecac 0a01 	vstmia	ip!, {s0}
 800d628:	ed90 0a00 	vldr	s0, [r0]
 800d62c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d630:	e79e      	b.n	800d570 <__kernel_rem_pio2f+0xe4>
 800d632:	d105      	bne.n	800d640 <__kernel_rem_pio2f+0x1b4>
 800d634:	1e70      	subs	r0, r6, #1
 800d636:	ab08      	add	r3, sp, #32
 800d638:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800d63c:	11ff      	asrs	r7, r7, #7
 800d63e:	e7c8      	b.n	800d5d2 <__kernel_rem_pio2f+0x146>
 800d640:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d644:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64c:	da30      	bge.n	800d6b0 <__kernel_rem_pio2f+0x224>
 800d64e:	2700      	movs	r7, #0
 800d650:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d658:	f040 809a 	bne.w	800d790 <__kernel_rem_pio2f+0x304>
 800d65c:	1e74      	subs	r4, r6, #1
 800d65e:	46a4      	mov	ip, r4
 800d660:	2100      	movs	r1, #0
 800d662:	45d4      	cmp	ip, sl
 800d664:	da47      	bge.n	800d6f6 <__kernel_rem_pio2f+0x26a>
 800d666:	2900      	cmp	r1, #0
 800d668:	d063      	beq.n	800d732 <__kernel_rem_pio2f+0x2a6>
 800d66a:	ab08      	add	r3, sp, #32
 800d66c:	3d08      	subs	r5, #8
 800d66e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d07f      	beq.n	800d776 <__kernel_rem_pio2f+0x2ea>
 800d676:	4628      	mov	r0, r5
 800d678:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d67c:	f000 f978 	bl	800d970 <scalbnf>
 800d680:	1c63      	adds	r3, r4, #1
 800d682:	aa44      	add	r2, sp, #272	; 0x110
 800d684:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800d788 <__kernel_rem_pio2f+0x2fc>
 800d688:	0099      	lsls	r1, r3, #2
 800d68a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d68e:	4623      	mov	r3, r4
 800d690:	2b00      	cmp	r3, #0
 800d692:	f280 80ad 	bge.w	800d7f0 <__kernel_rem_pio2f+0x364>
 800d696:	4623      	mov	r3, r4
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f2c0 80cb 	blt.w	800d834 <__kernel_rem_pio2f+0x3a8>
 800d69e:	aa44      	add	r2, sp, #272	; 0x110
 800d6a0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d6a4:	4e36      	ldr	r6, [pc, #216]	; (800d780 <__kernel_rem_pio2f+0x2f4>)
 800d6a6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800d78c <__kernel_rem_pio2f+0x300>
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	1ae2      	subs	r2, r4, r3
 800d6ae:	e0b6      	b.n	800d81e <__kernel_rem_pio2f+0x392>
 800d6b0:	2702      	movs	r7, #2
 800d6b2:	e790      	b.n	800d5d6 <__kernel_rem_pio2f+0x14a>
 800d6b4:	6820      	ldr	r0, [r4, #0]
 800d6b6:	b949      	cbnz	r1, 800d6cc <__kernel_rem_pio2f+0x240>
 800d6b8:	b118      	cbz	r0, 800d6c2 <__kernel_rem_pio2f+0x236>
 800d6ba:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800d6be:	6020      	str	r0, [r4, #0]
 800d6c0:	2001      	movs	r0, #1
 800d6c2:	f10e 0e01 	add.w	lr, lr, #1
 800d6c6:	3404      	adds	r4, #4
 800d6c8:	4601      	mov	r1, r0
 800d6ca:	e789      	b.n	800d5e0 <__kernel_rem_pio2f+0x154>
 800d6cc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800d6d0:	6020      	str	r0, [r4, #0]
 800d6d2:	4608      	mov	r0, r1
 800d6d4:	e7f5      	b.n	800d6c2 <__kernel_rem_pio2f+0x236>
 800d6d6:	1e74      	subs	r4, r6, #1
 800d6d8:	ab08      	add	r3, sp, #32
 800d6da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d6de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d6e2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d6e6:	e783      	b.n	800d5f0 <__kernel_rem_pio2f+0x164>
 800d6e8:	1e74      	subs	r4, r6, #1
 800d6ea:	ab08      	add	r3, sp, #32
 800d6ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d6f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800d6f4:	e7f5      	b.n	800d6e2 <__kernel_rem_pio2f+0x256>
 800d6f6:	ab08      	add	r3, sp, #32
 800d6f8:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800d6fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d700:	4301      	orrs	r1, r0
 800d702:	e7ae      	b.n	800d662 <__kernel_rem_pio2f+0x1d6>
 800d704:	3001      	adds	r0, #1
 800d706:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800d70a:	2f00      	cmp	r7, #0
 800d70c:	d0fa      	beq.n	800d704 <__kernel_rem_pio2f+0x278>
 800d70e:	9b06      	ldr	r3, [sp, #24]
 800d710:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d714:	eb0d 0403 	add.w	r4, sp, r3
 800d718:	9b01      	ldr	r3, [sp, #4]
 800d71a:	18f7      	adds	r7, r6, r3
 800d71c:	ab1c      	add	r3, sp, #112	; 0x70
 800d71e:	f106 0c01 	add.w	ip, r6, #1
 800d722:	3c4c      	subs	r4, #76	; 0x4c
 800d724:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d728:	4430      	add	r0, r6
 800d72a:	4560      	cmp	r0, ip
 800d72c:	da04      	bge.n	800d738 <__kernel_rem_pio2f+0x2ac>
 800d72e:	4606      	mov	r6, r0
 800d730:	e711      	b.n	800d556 <__kernel_rem_pio2f+0xca>
 800d732:	9c05      	ldr	r4, [sp, #20]
 800d734:	2001      	movs	r0, #1
 800d736:	e7e6      	b.n	800d706 <__kernel_rem_pio2f+0x27a>
 800d738:	9b04      	ldr	r3, [sp, #16]
 800d73a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d73e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800d742:	9306      	str	r3, [sp, #24]
 800d744:	ee07 3a90 	vmov	s15, r3
 800d748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d74c:	2600      	movs	r6, #0
 800d74e:	ece7 7a01 	vstmia	r7!, {s15}
 800d752:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800d78c <__kernel_rem_pio2f+0x300>
 800d756:	46b9      	mov	r9, r7
 800d758:	455e      	cmp	r6, fp
 800d75a:	dd04      	ble.n	800d766 <__kernel_rem_pio2f+0x2da>
 800d75c:	ece4 7a01 	vstmia	r4!, {s15}
 800d760:	f10c 0c01 	add.w	ip, ip, #1
 800d764:	e7e1      	b.n	800d72a <__kernel_rem_pio2f+0x29e>
 800d766:	ecfe 6a01 	vldmia	lr!, {s13}
 800d76a:	ed39 7a01 	vldmdb	r9!, {s14}
 800d76e:	3601      	adds	r6, #1
 800d770:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d774:	e7f0      	b.n	800d758 <__kernel_rem_pio2f+0x2cc>
 800d776:	3c01      	subs	r4, #1
 800d778:	e777      	b.n	800d66a <__kernel_rem_pio2f+0x1de>
 800d77a:	bf00      	nop
 800d77c:	08010efc 	.word	0x08010efc
 800d780:	08010ed0 	.word	0x08010ed0
 800d784:	43800000 	.word	0x43800000
 800d788:	3b800000 	.word	0x3b800000
 800d78c:	00000000 	.word	0x00000000
 800d790:	9b03      	ldr	r3, [sp, #12]
 800d792:	eeb0 0a48 	vmov.f32	s0, s16
 800d796:	1a98      	subs	r0, r3, r2
 800d798:	f000 f8ea 	bl	800d970 <scalbnf>
 800d79c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800d784 <__kernel_rem_pio2f+0x2f8>
 800d7a0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a8:	db19      	blt.n	800d7de <__kernel_rem_pio2f+0x352>
 800d7aa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800d788 <__kernel_rem_pio2f+0x2fc>
 800d7ae:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d7b2:	aa08      	add	r2, sp, #32
 800d7b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d7b8:	1c74      	adds	r4, r6, #1
 800d7ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7be:	3508      	adds	r5, #8
 800d7c0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d7c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d7c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d7cc:	ee10 3a10 	vmov	r3, s0
 800d7d0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800d7d4:	ee17 3a90 	vmov	r3, s15
 800d7d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d7dc:	e74b      	b.n	800d676 <__kernel_rem_pio2f+0x1ea>
 800d7de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d7e2:	aa08      	add	r2, sp, #32
 800d7e4:	ee10 3a10 	vmov	r3, s0
 800d7e8:	4634      	mov	r4, r6
 800d7ea:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800d7ee:	e742      	b.n	800d676 <__kernel_rem_pio2f+0x1ea>
 800d7f0:	a808      	add	r0, sp, #32
 800d7f2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d7f6:	9001      	str	r0, [sp, #4]
 800d7f8:	ee07 0a90 	vmov	s15, r0
 800d7fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d800:	3b01      	subs	r3, #1
 800d802:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d806:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d80a:	ed62 7a01 	vstmdb	r2!, {s15}
 800d80e:	e73f      	b.n	800d690 <__kernel_rem_pio2f+0x204>
 800d810:	ecf6 6a01 	vldmia	r6!, {s13}
 800d814:	ecb5 7a01 	vldmia	r5!, {s14}
 800d818:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d81c:	3001      	adds	r0, #1
 800d81e:	4550      	cmp	r0, sl
 800d820:	dc01      	bgt.n	800d826 <__kernel_rem_pio2f+0x39a>
 800d822:	4290      	cmp	r0, r2
 800d824:	ddf4      	ble.n	800d810 <__kernel_rem_pio2f+0x384>
 800d826:	a858      	add	r0, sp, #352	; 0x160
 800d828:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d82c:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800d830:	3b01      	subs	r3, #1
 800d832:	e731      	b.n	800d698 <__kernel_rem_pio2f+0x20c>
 800d834:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800d836:	2b02      	cmp	r3, #2
 800d838:	dc09      	bgt.n	800d84e <__kernel_rem_pio2f+0x3c2>
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	dc2b      	bgt.n	800d896 <__kernel_rem_pio2f+0x40a>
 800d83e:	d044      	beq.n	800d8ca <__kernel_rem_pio2f+0x43e>
 800d840:	f009 0007 	and.w	r0, r9, #7
 800d844:	b059      	add	sp, #356	; 0x164
 800d846:	ecbd 8b04 	vpop	{d8-d9}
 800d84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800d850:	2b03      	cmp	r3, #3
 800d852:	d1f5      	bne.n	800d840 <__kernel_rem_pio2f+0x3b4>
 800d854:	aa30      	add	r2, sp, #192	; 0xc0
 800d856:	1f0b      	subs	r3, r1, #4
 800d858:	4413      	add	r3, r2
 800d85a:	461a      	mov	r2, r3
 800d85c:	4620      	mov	r0, r4
 800d85e:	2800      	cmp	r0, #0
 800d860:	f1a2 0204 	sub.w	r2, r2, #4
 800d864:	dc52      	bgt.n	800d90c <__kernel_rem_pio2f+0x480>
 800d866:	4622      	mov	r2, r4
 800d868:	2a01      	cmp	r2, #1
 800d86a:	f1a3 0304 	sub.w	r3, r3, #4
 800d86e:	dc5d      	bgt.n	800d92c <__kernel_rem_pio2f+0x4a0>
 800d870:	ab30      	add	r3, sp, #192	; 0xc0
 800d872:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800d78c <__kernel_rem_pio2f+0x300>
 800d876:	440b      	add	r3, r1
 800d878:	2c01      	cmp	r4, #1
 800d87a:	dc67      	bgt.n	800d94c <__kernel_rem_pio2f+0x4c0>
 800d87c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800d880:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800d884:	2f00      	cmp	r7, #0
 800d886:	d167      	bne.n	800d958 <__kernel_rem_pio2f+0x4cc>
 800d888:	edc8 6a00 	vstr	s13, [r8]
 800d88c:	ed88 7a01 	vstr	s14, [r8, #4]
 800d890:	edc8 7a02 	vstr	s15, [r8, #8]
 800d894:	e7d4      	b.n	800d840 <__kernel_rem_pio2f+0x3b4>
 800d896:	ab30      	add	r3, sp, #192	; 0xc0
 800d898:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800d78c <__kernel_rem_pio2f+0x300>
 800d89c:	440b      	add	r3, r1
 800d89e:	4622      	mov	r2, r4
 800d8a0:	2a00      	cmp	r2, #0
 800d8a2:	da24      	bge.n	800d8ee <__kernel_rem_pio2f+0x462>
 800d8a4:	b34f      	cbz	r7, 800d8fa <__kernel_rem_pio2f+0x46e>
 800d8a6:	eef1 7a47 	vneg.f32	s15, s14
 800d8aa:	edc8 7a00 	vstr	s15, [r8]
 800d8ae:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800d8b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d8b6:	aa31      	add	r2, sp, #196	; 0xc4
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	429c      	cmp	r4, r3
 800d8bc:	da20      	bge.n	800d900 <__kernel_rem_pio2f+0x474>
 800d8be:	b10f      	cbz	r7, 800d8c4 <__kernel_rem_pio2f+0x438>
 800d8c0:	eef1 7a67 	vneg.f32	s15, s15
 800d8c4:	edc8 7a01 	vstr	s15, [r8, #4]
 800d8c8:	e7ba      	b.n	800d840 <__kernel_rem_pio2f+0x3b4>
 800d8ca:	ab30      	add	r3, sp, #192	; 0xc0
 800d8cc:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800d78c <__kernel_rem_pio2f+0x300>
 800d8d0:	440b      	add	r3, r1
 800d8d2:	2c00      	cmp	r4, #0
 800d8d4:	da05      	bge.n	800d8e2 <__kernel_rem_pio2f+0x456>
 800d8d6:	b10f      	cbz	r7, 800d8dc <__kernel_rem_pio2f+0x450>
 800d8d8:	eef1 7a67 	vneg.f32	s15, s15
 800d8dc:	edc8 7a00 	vstr	s15, [r8]
 800d8e0:	e7ae      	b.n	800d840 <__kernel_rem_pio2f+0x3b4>
 800d8e2:	ed33 7a01 	vldmdb	r3!, {s14}
 800d8e6:	3c01      	subs	r4, #1
 800d8e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8ec:	e7f1      	b.n	800d8d2 <__kernel_rem_pio2f+0x446>
 800d8ee:	ed73 7a01 	vldmdb	r3!, {s15}
 800d8f2:	3a01      	subs	r2, #1
 800d8f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8f8:	e7d2      	b.n	800d8a0 <__kernel_rem_pio2f+0x414>
 800d8fa:	eef0 7a47 	vmov.f32	s15, s14
 800d8fe:	e7d4      	b.n	800d8aa <__kernel_rem_pio2f+0x41e>
 800d900:	ecb2 7a01 	vldmia	r2!, {s14}
 800d904:	3301      	adds	r3, #1
 800d906:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d90a:	e7d6      	b.n	800d8ba <__kernel_rem_pio2f+0x42e>
 800d90c:	edd2 7a00 	vldr	s15, [r2]
 800d910:	edd2 6a01 	vldr	s13, [r2, #4]
 800d914:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d918:	3801      	subs	r0, #1
 800d91a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d91e:	ed82 7a00 	vstr	s14, [r2]
 800d922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d926:	edc2 7a01 	vstr	s15, [r2, #4]
 800d92a:	e798      	b.n	800d85e <__kernel_rem_pio2f+0x3d2>
 800d92c:	edd3 7a00 	vldr	s15, [r3]
 800d930:	edd3 6a01 	vldr	s13, [r3, #4]
 800d934:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d938:	3a01      	subs	r2, #1
 800d93a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d93e:	ed83 7a00 	vstr	s14, [r3]
 800d942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d946:	edc3 7a01 	vstr	s15, [r3, #4]
 800d94a:	e78d      	b.n	800d868 <__kernel_rem_pio2f+0x3dc>
 800d94c:	ed33 7a01 	vldmdb	r3!, {s14}
 800d950:	3c01      	subs	r4, #1
 800d952:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d956:	e78f      	b.n	800d878 <__kernel_rem_pio2f+0x3ec>
 800d958:	eef1 6a66 	vneg.f32	s13, s13
 800d95c:	eeb1 7a47 	vneg.f32	s14, s14
 800d960:	edc8 6a00 	vstr	s13, [r8]
 800d964:	ed88 7a01 	vstr	s14, [r8, #4]
 800d968:	eef1 7a67 	vneg.f32	s15, s15
 800d96c:	e790      	b.n	800d890 <__kernel_rem_pio2f+0x404>
 800d96e:	bf00      	nop

0800d970 <scalbnf>:
 800d970:	ee10 3a10 	vmov	r3, s0
 800d974:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d978:	d02b      	beq.n	800d9d2 <scalbnf+0x62>
 800d97a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d97e:	d302      	bcc.n	800d986 <scalbnf+0x16>
 800d980:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d984:	4770      	bx	lr
 800d986:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d98a:	d123      	bne.n	800d9d4 <scalbnf+0x64>
 800d98c:	4b24      	ldr	r3, [pc, #144]	; (800da20 <scalbnf+0xb0>)
 800d98e:	eddf 7a25 	vldr	s15, [pc, #148]	; 800da24 <scalbnf+0xb4>
 800d992:	4298      	cmp	r0, r3
 800d994:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d998:	db17      	blt.n	800d9ca <scalbnf+0x5a>
 800d99a:	ee10 3a10 	vmov	r3, s0
 800d99e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d9a2:	3a19      	subs	r2, #25
 800d9a4:	f24c 3150 	movw	r1, #50000	; 0xc350
 800d9a8:	4288      	cmp	r0, r1
 800d9aa:	dd15      	ble.n	800d9d8 <scalbnf+0x68>
 800d9ac:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800da28 <scalbnf+0xb8>
 800d9b0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800da2c <scalbnf+0xbc>
 800d9b4:	ee10 3a10 	vmov	r3, s0
 800d9b8:	eeb0 7a67 	vmov.f32	s14, s15
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	bfb8      	it	lt
 800d9c0:	eef0 7a66 	vmovlt.f32	s15, s13
 800d9c4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d9c8:	4770      	bx	lr
 800d9ca:	eddf 7a19 	vldr	s15, [pc, #100]	; 800da30 <scalbnf+0xc0>
 800d9ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d9d2:	4770      	bx	lr
 800d9d4:	0dd2      	lsrs	r2, r2, #23
 800d9d6:	e7e5      	b.n	800d9a4 <scalbnf+0x34>
 800d9d8:	4410      	add	r0, r2
 800d9da:	28fe      	cmp	r0, #254	; 0xfe
 800d9dc:	dce6      	bgt.n	800d9ac <scalbnf+0x3c>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	dd06      	ble.n	800d9f0 <scalbnf+0x80>
 800d9e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d9e6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d9ea:	ee00 3a10 	vmov	s0, r3
 800d9ee:	4770      	bx	lr
 800d9f0:	f110 0f16 	cmn.w	r0, #22
 800d9f4:	da09      	bge.n	800da0a <scalbnf+0x9a>
 800d9f6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800da30 <scalbnf+0xc0>
 800d9fa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800da34 <scalbnf+0xc4>
 800d9fe:	ee10 3a10 	vmov	r3, s0
 800da02:	eeb0 7a67 	vmov.f32	s14, s15
 800da06:	2b00      	cmp	r3, #0
 800da08:	e7d9      	b.n	800d9be <scalbnf+0x4e>
 800da0a:	3019      	adds	r0, #25
 800da0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800da10:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800da14:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800da38 <scalbnf+0xc8>
 800da18:	ee07 3a90 	vmov	s15, r3
 800da1c:	e7d7      	b.n	800d9ce <scalbnf+0x5e>
 800da1e:	bf00      	nop
 800da20:	ffff3cb0 	.word	0xffff3cb0
 800da24:	4c000000 	.word	0x4c000000
 800da28:	7149f2ca 	.word	0x7149f2ca
 800da2c:	f149f2ca 	.word	0xf149f2ca
 800da30:	0da24260 	.word	0x0da24260
 800da34:	8da24260 	.word	0x8da24260
 800da38:	33000000 	.word	0x33000000
 800da3c:	00000000 	.word	0x00000000

0800da40 <floor>:
 800da40:	ec51 0b10 	vmov	r0, r1, d0
 800da44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800da48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da4c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800da50:	2e13      	cmp	r6, #19
 800da52:	ee10 5a10 	vmov	r5, s0
 800da56:	ee10 8a10 	vmov	r8, s0
 800da5a:	460c      	mov	r4, r1
 800da5c:	dc31      	bgt.n	800dac2 <floor+0x82>
 800da5e:	2e00      	cmp	r6, #0
 800da60:	da14      	bge.n	800da8c <floor+0x4c>
 800da62:	a333      	add	r3, pc, #204	; (adr r3, 800db30 <floor+0xf0>)
 800da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da68:	f7f2 fc08 	bl	800027c <__adddf3>
 800da6c:	2200      	movs	r2, #0
 800da6e:	2300      	movs	r3, #0
 800da70:	f7f3 f84a 	bl	8000b08 <__aeabi_dcmpgt>
 800da74:	b138      	cbz	r0, 800da86 <floor+0x46>
 800da76:	2c00      	cmp	r4, #0
 800da78:	da53      	bge.n	800db22 <floor+0xe2>
 800da7a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800da7e:	4325      	orrs	r5, r4
 800da80:	d052      	beq.n	800db28 <floor+0xe8>
 800da82:	4c2d      	ldr	r4, [pc, #180]	; (800db38 <floor+0xf8>)
 800da84:	2500      	movs	r5, #0
 800da86:	4621      	mov	r1, r4
 800da88:	4628      	mov	r0, r5
 800da8a:	e024      	b.n	800dad6 <floor+0x96>
 800da8c:	4f2b      	ldr	r7, [pc, #172]	; (800db3c <floor+0xfc>)
 800da8e:	4137      	asrs	r7, r6
 800da90:	ea01 0307 	and.w	r3, r1, r7
 800da94:	4303      	orrs	r3, r0
 800da96:	d01e      	beq.n	800dad6 <floor+0x96>
 800da98:	a325      	add	r3, pc, #148	; (adr r3, 800db30 <floor+0xf0>)
 800da9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9e:	f7f2 fbed 	bl	800027c <__adddf3>
 800daa2:	2200      	movs	r2, #0
 800daa4:	2300      	movs	r3, #0
 800daa6:	f7f3 f82f 	bl	8000b08 <__aeabi_dcmpgt>
 800daaa:	2800      	cmp	r0, #0
 800daac:	d0eb      	beq.n	800da86 <floor+0x46>
 800daae:	2c00      	cmp	r4, #0
 800dab0:	bfbe      	ittt	lt
 800dab2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dab6:	4133      	asrlt	r3, r6
 800dab8:	18e4      	addlt	r4, r4, r3
 800daba:	ea24 0407 	bic.w	r4, r4, r7
 800dabe:	2500      	movs	r5, #0
 800dac0:	e7e1      	b.n	800da86 <floor+0x46>
 800dac2:	2e33      	cmp	r6, #51	; 0x33
 800dac4:	dd0b      	ble.n	800dade <floor+0x9e>
 800dac6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800daca:	d104      	bne.n	800dad6 <floor+0x96>
 800dacc:	ee10 2a10 	vmov	r2, s0
 800dad0:	460b      	mov	r3, r1
 800dad2:	f7f2 fbd3 	bl	800027c <__adddf3>
 800dad6:	ec41 0b10 	vmov	d0, r0, r1
 800dada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dade:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800dae2:	f04f 37ff 	mov.w	r7, #4294967295
 800dae6:	40df      	lsrs	r7, r3
 800dae8:	4238      	tst	r0, r7
 800daea:	d0f4      	beq.n	800dad6 <floor+0x96>
 800daec:	a310      	add	r3, pc, #64	; (adr r3, 800db30 <floor+0xf0>)
 800daee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf2:	f7f2 fbc3 	bl	800027c <__adddf3>
 800daf6:	2200      	movs	r2, #0
 800daf8:	2300      	movs	r3, #0
 800dafa:	f7f3 f805 	bl	8000b08 <__aeabi_dcmpgt>
 800dafe:	2800      	cmp	r0, #0
 800db00:	d0c1      	beq.n	800da86 <floor+0x46>
 800db02:	2c00      	cmp	r4, #0
 800db04:	da0a      	bge.n	800db1c <floor+0xdc>
 800db06:	2e14      	cmp	r6, #20
 800db08:	d101      	bne.n	800db0e <floor+0xce>
 800db0a:	3401      	adds	r4, #1
 800db0c:	e006      	b.n	800db1c <floor+0xdc>
 800db0e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800db12:	2301      	movs	r3, #1
 800db14:	40b3      	lsls	r3, r6
 800db16:	441d      	add	r5, r3
 800db18:	45a8      	cmp	r8, r5
 800db1a:	d8f6      	bhi.n	800db0a <floor+0xca>
 800db1c:	ea25 0507 	bic.w	r5, r5, r7
 800db20:	e7b1      	b.n	800da86 <floor+0x46>
 800db22:	2500      	movs	r5, #0
 800db24:	462c      	mov	r4, r5
 800db26:	e7ae      	b.n	800da86 <floor+0x46>
 800db28:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800db2c:	e7ab      	b.n	800da86 <floor+0x46>
 800db2e:	bf00      	nop
 800db30:	8800759c 	.word	0x8800759c
 800db34:	7e37e43c 	.word	0x7e37e43c
 800db38:	bff00000 	.word	0xbff00000
 800db3c:	000fffff 	.word	0x000fffff

0800db40 <floorf>:
 800db40:	ee10 3a10 	vmov	r3, s0
 800db44:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800db48:	3a7f      	subs	r2, #127	; 0x7f
 800db4a:	2a16      	cmp	r2, #22
 800db4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800db50:	dc2a      	bgt.n	800dba8 <floorf+0x68>
 800db52:	2a00      	cmp	r2, #0
 800db54:	da11      	bge.n	800db7a <floorf+0x3a>
 800db56:	eddf 7a18 	vldr	s15, [pc, #96]	; 800dbb8 <floorf+0x78>
 800db5a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db5e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800db62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db66:	dd05      	ble.n	800db74 <floorf+0x34>
 800db68:	2b00      	cmp	r3, #0
 800db6a:	da23      	bge.n	800dbb4 <floorf+0x74>
 800db6c:	4a13      	ldr	r2, [pc, #76]	; (800dbbc <floorf+0x7c>)
 800db6e:	2900      	cmp	r1, #0
 800db70:	bf18      	it	ne
 800db72:	4613      	movne	r3, r2
 800db74:	ee00 3a10 	vmov	s0, r3
 800db78:	4770      	bx	lr
 800db7a:	4911      	ldr	r1, [pc, #68]	; (800dbc0 <floorf+0x80>)
 800db7c:	4111      	asrs	r1, r2
 800db7e:	420b      	tst	r3, r1
 800db80:	d0fa      	beq.n	800db78 <floorf+0x38>
 800db82:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800dbb8 <floorf+0x78>
 800db86:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800db8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db92:	ddef      	ble.n	800db74 <floorf+0x34>
 800db94:	2b00      	cmp	r3, #0
 800db96:	bfbe      	ittt	lt
 800db98:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800db9c:	fa40 f202 	asrlt.w	r2, r0, r2
 800dba0:	189b      	addlt	r3, r3, r2
 800dba2:	ea23 0301 	bic.w	r3, r3, r1
 800dba6:	e7e5      	b.n	800db74 <floorf+0x34>
 800dba8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800dbac:	d3e4      	bcc.n	800db78 <floorf+0x38>
 800dbae:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dbb2:	4770      	bx	lr
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	e7dd      	b.n	800db74 <floorf+0x34>
 800dbb8:	7149f2ca 	.word	0x7149f2ca
 800dbbc:	bf800000 	.word	0xbf800000
 800dbc0:	007fffff 	.word	0x007fffff

0800dbc4 <sulp>:
 800dbc4:	b570      	push	{r4, r5, r6, lr}
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	460d      	mov	r5, r1
 800dbca:	ec45 4b10 	vmov	d0, r4, r5
 800dbce:	4616      	mov	r6, r2
 800dbd0:	f001 ff82 	bl	800fad8 <__ulp>
 800dbd4:	ec51 0b10 	vmov	r0, r1, d0
 800dbd8:	b17e      	cbz	r6, 800dbfa <sulp+0x36>
 800dbda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dbde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	dd09      	ble.n	800dbfa <sulp+0x36>
 800dbe6:	051b      	lsls	r3, r3, #20
 800dbe8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dbec:	2400      	movs	r4, #0
 800dbee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dbf2:	4622      	mov	r2, r4
 800dbf4:	462b      	mov	r3, r5
 800dbf6:	f7f2 fcf7 	bl	80005e8 <__aeabi_dmul>
 800dbfa:	bd70      	pop	{r4, r5, r6, pc}
 800dbfc:	0000      	movs	r0, r0
	...

0800dc00 <_strtod_l>:
 800dc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc04:	ed2d 8b02 	vpush	{d8}
 800dc08:	b09b      	sub	sp, #108	; 0x6c
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	9213      	str	r2, [sp, #76]	; 0x4c
 800dc0e:	2200      	movs	r2, #0
 800dc10:	9216      	str	r2, [sp, #88]	; 0x58
 800dc12:	460d      	mov	r5, r1
 800dc14:	f04f 0800 	mov.w	r8, #0
 800dc18:	f04f 0900 	mov.w	r9, #0
 800dc1c:	460a      	mov	r2, r1
 800dc1e:	9215      	str	r2, [sp, #84]	; 0x54
 800dc20:	7811      	ldrb	r1, [r2, #0]
 800dc22:	292b      	cmp	r1, #43	; 0x2b
 800dc24:	d04c      	beq.n	800dcc0 <_strtod_l+0xc0>
 800dc26:	d83a      	bhi.n	800dc9e <_strtod_l+0x9e>
 800dc28:	290d      	cmp	r1, #13
 800dc2a:	d834      	bhi.n	800dc96 <_strtod_l+0x96>
 800dc2c:	2908      	cmp	r1, #8
 800dc2e:	d834      	bhi.n	800dc9a <_strtod_l+0x9a>
 800dc30:	2900      	cmp	r1, #0
 800dc32:	d03d      	beq.n	800dcb0 <_strtod_l+0xb0>
 800dc34:	2200      	movs	r2, #0
 800dc36:	920a      	str	r2, [sp, #40]	; 0x28
 800dc38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800dc3a:	7832      	ldrb	r2, [r6, #0]
 800dc3c:	2a30      	cmp	r2, #48	; 0x30
 800dc3e:	f040 80b4 	bne.w	800ddaa <_strtod_l+0x1aa>
 800dc42:	7872      	ldrb	r2, [r6, #1]
 800dc44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800dc48:	2a58      	cmp	r2, #88	; 0x58
 800dc4a:	d170      	bne.n	800dd2e <_strtod_l+0x12e>
 800dc4c:	9302      	str	r3, [sp, #8]
 800dc4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc50:	9301      	str	r3, [sp, #4]
 800dc52:	ab16      	add	r3, sp, #88	; 0x58
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	4a8e      	ldr	r2, [pc, #568]	; (800de90 <_strtod_l+0x290>)
 800dc58:	ab17      	add	r3, sp, #92	; 0x5c
 800dc5a:	a915      	add	r1, sp, #84	; 0x54
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	f001 f821 	bl	800eca4 <__gethex>
 800dc62:	f010 070f 	ands.w	r7, r0, #15
 800dc66:	4605      	mov	r5, r0
 800dc68:	d005      	beq.n	800dc76 <_strtod_l+0x76>
 800dc6a:	2f06      	cmp	r7, #6
 800dc6c:	d12a      	bne.n	800dcc4 <_strtod_l+0xc4>
 800dc6e:	3601      	adds	r6, #1
 800dc70:	2300      	movs	r3, #0
 800dc72:	9615      	str	r6, [sp, #84]	; 0x54
 800dc74:	930a      	str	r3, [sp, #40]	; 0x28
 800dc76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f040 857f 	bne.w	800e77c <_strtod_l+0xb7c>
 800dc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc80:	b1db      	cbz	r3, 800dcba <_strtod_l+0xba>
 800dc82:	4642      	mov	r2, r8
 800dc84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dc88:	ec43 2b10 	vmov	d0, r2, r3
 800dc8c:	b01b      	add	sp, #108	; 0x6c
 800dc8e:	ecbd 8b02 	vpop	{d8}
 800dc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc96:	2920      	cmp	r1, #32
 800dc98:	d1cc      	bne.n	800dc34 <_strtod_l+0x34>
 800dc9a:	3201      	adds	r2, #1
 800dc9c:	e7bf      	b.n	800dc1e <_strtod_l+0x1e>
 800dc9e:	292d      	cmp	r1, #45	; 0x2d
 800dca0:	d1c8      	bne.n	800dc34 <_strtod_l+0x34>
 800dca2:	2101      	movs	r1, #1
 800dca4:	910a      	str	r1, [sp, #40]	; 0x28
 800dca6:	1c51      	adds	r1, r2, #1
 800dca8:	9115      	str	r1, [sp, #84]	; 0x54
 800dcaa:	7852      	ldrb	r2, [r2, #1]
 800dcac:	2a00      	cmp	r2, #0
 800dcae:	d1c3      	bne.n	800dc38 <_strtod_l+0x38>
 800dcb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dcb2:	9515      	str	r5, [sp, #84]	; 0x54
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f040 855f 	bne.w	800e778 <_strtod_l+0xb78>
 800dcba:	4642      	mov	r2, r8
 800dcbc:	464b      	mov	r3, r9
 800dcbe:	e7e3      	b.n	800dc88 <_strtod_l+0x88>
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	e7ef      	b.n	800dca4 <_strtod_l+0xa4>
 800dcc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dcc6:	b13a      	cbz	r2, 800dcd8 <_strtod_l+0xd8>
 800dcc8:	2135      	movs	r1, #53	; 0x35
 800dcca:	a818      	add	r0, sp, #96	; 0x60
 800dccc:	f002 f801 	bl	800fcd2 <__copybits>
 800dcd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f001 fbd4 	bl	800f480 <_Bfree>
 800dcd8:	3f01      	subs	r7, #1
 800dcda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dcdc:	2f04      	cmp	r7, #4
 800dcde:	d806      	bhi.n	800dcee <_strtod_l+0xee>
 800dce0:	e8df f007 	tbb	[pc, r7]
 800dce4:	201d0314 	.word	0x201d0314
 800dce8:	14          	.byte	0x14
 800dce9:	00          	.byte	0x00
 800dcea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800dcee:	05e9      	lsls	r1, r5, #23
 800dcf0:	bf48      	it	mi
 800dcf2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800dcf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dcfa:	0d1b      	lsrs	r3, r3, #20
 800dcfc:	051b      	lsls	r3, r3, #20
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d1b9      	bne.n	800dc76 <_strtod_l+0x76>
 800dd02:	f000 fedf 	bl	800eac4 <__errno>
 800dd06:	2322      	movs	r3, #34	; 0x22
 800dd08:	6003      	str	r3, [r0, #0]
 800dd0a:	e7b4      	b.n	800dc76 <_strtod_l+0x76>
 800dd0c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800dd10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dd14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dd18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800dd1c:	e7e7      	b.n	800dcee <_strtod_l+0xee>
 800dd1e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800de98 <_strtod_l+0x298>
 800dd22:	e7e4      	b.n	800dcee <_strtod_l+0xee>
 800dd24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800dd28:	f04f 38ff 	mov.w	r8, #4294967295
 800dd2c:	e7df      	b.n	800dcee <_strtod_l+0xee>
 800dd2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd30:	1c5a      	adds	r2, r3, #1
 800dd32:	9215      	str	r2, [sp, #84]	; 0x54
 800dd34:	785b      	ldrb	r3, [r3, #1]
 800dd36:	2b30      	cmp	r3, #48	; 0x30
 800dd38:	d0f9      	beq.n	800dd2e <_strtod_l+0x12e>
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d09b      	beq.n	800dc76 <_strtod_l+0x76>
 800dd3e:	2301      	movs	r3, #1
 800dd40:	f04f 0a00 	mov.w	sl, #0
 800dd44:	9304      	str	r3, [sp, #16]
 800dd46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd48:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800dd4e:	46d3      	mov	fp, sl
 800dd50:	220a      	movs	r2, #10
 800dd52:	9815      	ldr	r0, [sp, #84]	; 0x54
 800dd54:	7806      	ldrb	r6, [r0, #0]
 800dd56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dd5a:	b2d9      	uxtb	r1, r3
 800dd5c:	2909      	cmp	r1, #9
 800dd5e:	d926      	bls.n	800ddae <_strtod_l+0x1ae>
 800dd60:	494c      	ldr	r1, [pc, #304]	; (800de94 <_strtod_l+0x294>)
 800dd62:	2201      	movs	r2, #1
 800dd64:	f000 fe55 	bl	800ea12 <strncmp>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d030      	beq.n	800ddce <_strtod_l+0x1ce>
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	4632      	mov	r2, r6
 800dd70:	9005      	str	r0, [sp, #20]
 800dd72:	465e      	mov	r6, fp
 800dd74:	4603      	mov	r3, r0
 800dd76:	2a65      	cmp	r2, #101	; 0x65
 800dd78:	d001      	beq.n	800dd7e <_strtod_l+0x17e>
 800dd7a:	2a45      	cmp	r2, #69	; 0x45
 800dd7c:	d113      	bne.n	800dda6 <_strtod_l+0x1a6>
 800dd7e:	b91e      	cbnz	r6, 800dd88 <_strtod_l+0x188>
 800dd80:	9a04      	ldr	r2, [sp, #16]
 800dd82:	4302      	orrs	r2, r0
 800dd84:	d094      	beq.n	800dcb0 <_strtod_l+0xb0>
 800dd86:	2600      	movs	r6, #0
 800dd88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800dd8a:	1c6a      	adds	r2, r5, #1
 800dd8c:	9215      	str	r2, [sp, #84]	; 0x54
 800dd8e:	786a      	ldrb	r2, [r5, #1]
 800dd90:	2a2b      	cmp	r2, #43	; 0x2b
 800dd92:	d074      	beq.n	800de7e <_strtod_l+0x27e>
 800dd94:	2a2d      	cmp	r2, #45	; 0x2d
 800dd96:	d078      	beq.n	800de8a <_strtod_l+0x28a>
 800dd98:	f04f 0c00 	mov.w	ip, #0
 800dd9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dda0:	2909      	cmp	r1, #9
 800dda2:	d97f      	bls.n	800dea4 <_strtod_l+0x2a4>
 800dda4:	9515      	str	r5, [sp, #84]	; 0x54
 800dda6:	2700      	movs	r7, #0
 800dda8:	e09e      	b.n	800dee8 <_strtod_l+0x2e8>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	e7c8      	b.n	800dd40 <_strtod_l+0x140>
 800ddae:	f1bb 0f08 	cmp.w	fp, #8
 800ddb2:	bfd8      	it	le
 800ddb4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ddb6:	f100 0001 	add.w	r0, r0, #1
 800ddba:	bfda      	itte	le
 800ddbc:	fb02 3301 	mlale	r3, r2, r1, r3
 800ddc0:	9309      	strle	r3, [sp, #36]	; 0x24
 800ddc2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ddc6:	f10b 0b01 	add.w	fp, fp, #1
 800ddca:	9015      	str	r0, [sp, #84]	; 0x54
 800ddcc:	e7c1      	b.n	800dd52 <_strtod_l+0x152>
 800ddce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddd0:	1c5a      	adds	r2, r3, #1
 800ddd2:	9215      	str	r2, [sp, #84]	; 0x54
 800ddd4:	785a      	ldrb	r2, [r3, #1]
 800ddd6:	f1bb 0f00 	cmp.w	fp, #0
 800ddda:	d037      	beq.n	800de4c <_strtod_l+0x24c>
 800dddc:	9005      	str	r0, [sp, #20]
 800ddde:	465e      	mov	r6, fp
 800dde0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dde4:	2b09      	cmp	r3, #9
 800dde6:	d912      	bls.n	800de0e <_strtod_l+0x20e>
 800dde8:	2301      	movs	r3, #1
 800ddea:	e7c4      	b.n	800dd76 <_strtod_l+0x176>
 800ddec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddee:	1c5a      	adds	r2, r3, #1
 800ddf0:	9215      	str	r2, [sp, #84]	; 0x54
 800ddf2:	785a      	ldrb	r2, [r3, #1]
 800ddf4:	3001      	adds	r0, #1
 800ddf6:	2a30      	cmp	r2, #48	; 0x30
 800ddf8:	d0f8      	beq.n	800ddec <_strtod_l+0x1ec>
 800ddfa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ddfe:	2b08      	cmp	r3, #8
 800de00:	f200 84c1 	bhi.w	800e786 <_strtod_l+0xb86>
 800de04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de06:	9005      	str	r0, [sp, #20]
 800de08:	2000      	movs	r0, #0
 800de0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800de0c:	4606      	mov	r6, r0
 800de0e:	3a30      	subs	r2, #48	; 0x30
 800de10:	f100 0301 	add.w	r3, r0, #1
 800de14:	d014      	beq.n	800de40 <_strtod_l+0x240>
 800de16:	9905      	ldr	r1, [sp, #20]
 800de18:	4419      	add	r1, r3
 800de1a:	9105      	str	r1, [sp, #20]
 800de1c:	4633      	mov	r3, r6
 800de1e:	eb00 0c06 	add.w	ip, r0, r6
 800de22:	210a      	movs	r1, #10
 800de24:	4563      	cmp	r3, ip
 800de26:	d113      	bne.n	800de50 <_strtod_l+0x250>
 800de28:	1833      	adds	r3, r6, r0
 800de2a:	2b08      	cmp	r3, #8
 800de2c:	f106 0601 	add.w	r6, r6, #1
 800de30:	4406      	add	r6, r0
 800de32:	dc1a      	bgt.n	800de6a <_strtod_l+0x26a>
 800de34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de36:	230a      	movs	r3, #10
 800de38:	fb03 2301 	mla	r3, r3, r1, r2
 800de3c:	9309      	str	r3, [sp, #36]	; 0x24
 800de3e:	2300      	movs	r3, #0
 800de40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800de42:	1c51      	adds	r1, r2, #1
 800de44:	9115      	str	r1, [sp, #84]	; 0x54
 800de46:	7852      	ldrb	r2, [r2, #1]
 800de48:	4618      	mov	r0, r3
 800de4a:	e7c9      	b.n	800dde0 <_strtod_l+0x1e0>
 800de4c:	4658      	mov	r0, fp
 800de4e:	e7d2      	b.n	800ddf6 <_strtod_l+0x1f6>
 800de50:	2b08      	cmp	r3, #8
 800de52:	f103 0301 	add.w	r3, r3, #1
 800de56:	dc03      	bgt.n	800de60 <_strtod_l+0x260>
 800de58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800de5a:	434f      	muls	r7, r1
 800de5c:	9709      	str	r7, [sp, #36]	; 0x24
 800de5e:	e7e1      	b.n	800de24 <_strtod_l+0x224>
 800de60:	2b10      	cmp	r3, #16
 800de62:	bfd8      	it	le
 800de64:	fb01 fa0a 	mulle.w	sl, r1, sl
 800de68:	e7dc      	b.n	800de24 <_strtod_l+0x224>
 800de6a:	2e10      	cmp	r6, #16
 800de6c:	bfdc      	itt	le
 800de6e:	230a      	movle	r3, #10
 800de70:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800de74:	e7e3      	b.n	800de3e <_strtod_l+0x23e>
 800de76:	2300      	movs	r3, #0
 800de78:	9305      	str	r3, [sp, #20]
 800de7a:	2301      	movs	r3, #1
 800de7c:	e780      	b.n	800dd80 <_strtod_l+0x180>
 800de7e:	f04f 0c00 	mov.w	ip, #0
 800de82:	1caa      	adds	r2, r5, #2
 800de84:	9215      	str	r2, [sp, #84]	; 0x54
 800de86:	78aa      	ldrb	r2, [r5, #2]
 800de88:	e788      	b.n	800dd9c <_strtod_l+0x19c>
 800de8a:	f04f 0c01 	mov.w	ip, #1
 800de8e:	e7f8      	b.n	800de82 <_strtod_l+0x282>
 800de90:	08010f18 	.word	0x08010f18
 800de94:	08010f08 	.word	0x08010f08
 800de98:	7ff00000 	.word	0x7ff00000
 800de9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800de9e:	1c51      	adds	r1, r2, #1
 800dea0:	9115      	str	r1, [sp, #84]	; 0x54
 800dea2:	7852      	ldrb	r2, [r2, #1]
 800dea4:	2a30      	cmp	r2, #48	; 0x30
 800dea6:	d0f9      	beq.n	800de9c <_strtod_l+0x29c>
 800dea8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800deac:	2908      	cmp	r1, #8
 800deae:	f63f af7a 	bhi.w	800dda6 <_strtod_l+0x1a6>
 800deb2:	3a30      	subs	r2, #48	; 0x30
 800deb4:	9208      	str	r2, [sp, #32]
 800deb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800deb8:	920c      	str	r2, [sp, #48]	; 0x30
 800deba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800debc:	1c57      	adds	r7, r2, #1
 800debe:	9715      	str	r7, [sp, #84]	; 0x54
 800dec0:	7852      	ldrb	r2, [r2, #1]
 800dec2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800dec6:	f1be 0f09 	cmp.w	lr, #9
 800deca:	d938      	bls.n	800df3e <_strtod_l+0x33e>
 800decc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dece:	1a7f      	subs	r7, r7, r1
 800ded0:	2f08      	cmp	r7, #8
 800ded2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ded6:	dc03      	bgt.n	800dee0 <_strtod_l+0x2e0>
 800ded8:	9908      	ldr	r1, [sp, #32]
 800deda:	428f      	cmp	r7, r1
 800dedc:	bfa8      	it	ge
 800dede:	460f      	movge	r7, r1
 800dee0:	f1bc 0f00 	cmp.w	ip, #0
 800dee4:	d000      	beq.n	800dee8 <_strtod_l+0x2e8>
 800dee6:	427f      	negs	r7, r7
 800dee8:	2e00      	cmp	r6, #0
 800deea:	d14f      	bne.n	800df8c <_strtod_l+0x38c>
 800deec:	9904      	ldr	r1, [sp, #16]
 800deee:	4301      	orrs	r1, r0
 800def0:	f47f aec1 	bne.w	800dc76 <_strtod_l+0x76>
 800def4:	2b00      	cmp	r3, #0
 800def6:	f47f aedb 	bne.w	800dcb0 <_strtod_l+0xb0>
 800defa:	2a69      	cmp	r2, #105	; 0x69
 800defc:	d029      	beq.n	800df52 <_strtod_l+0x352>
 800defe:	dc26      	bgt.n	800df4e <_strtod_l+0x34e>
 800df00:	2a49      	cmp	r2, #73	; 0x49
 800df02:	d026      	beq.n	800df52 <_strtod_l+0x352>
 800df04:	2a4e      	cmp	r2, #78	; 0x4e
 800df06:	f47f aed3 	bne.w	800dcb0 <_strtod_l+0xb0>
 800df0a:	499b      	ldr	r1, [pc, #620]	; (800e178 <_strtod_l+0x578>)
 800df0c:	a815      	add	r0, sp, #84	; 0x54
 800df0e:	f001 f909 	bl	800f124 <__match>
 800df12:	2800      	cmp	r0, #0
 800df14:	f43f aecc 	beq.w	800dcb0 <_strtod_l+0xb0>
 800df18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	2b28      	cmp	r3, #40	; 0x28
 800df1e:	d12f      	bne.n	800df80 <_strtod_l+0x380>
 800df20:	4996      	ldr	r1, [pc, #600]	; (800e17c <_strtod_l+0x57c>)
 800df22:	aa18      	add	r2, sp, #96	; 0x60
 800df24:	a815      	add	r0, sp, #84	; 0x54
 800df26:	f001 f911 	bl	800f14c <__hexnan>
 800df2a:	2805      	cmp	r0, #5
 800df2c:	d128      	bne.n	800df80 <_strtod_l+0x380>
 800df2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800df34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800df38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800df3c:	e69b      	b.n	800dc76 <_strtod_l+0x76>
 800df3e:	9f08      	ldr	r7, [sp, #32]
 800df40:	210a      	movs	r1, #10
 800df42:	fb01 2107 	mla	r1, r1, r7, r2
 800df46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800df4a:	9208      	str	r2, [sp, #32]
 800df4c:	e7b5      	b.n	800deba <_strtod_l+0x2ba>
 800df4e:	2a6e      	cmp	r2, #110	; 0x6e
 800df50:	e7d9      	b.n	800df06 <_strtod_l+0x306>
 800df52:	498b      	ldr	r1, [pc, #556]	; (800e180 <_strtod_l+0x580>)
 800df54:	a815      	add	r0, sp, #84	; 0x54
 800df56:	f001 f8e5 	bl	800f124 <__match>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	f43f aea8 	beq.w	800dcb0 <_strtod_l+0xb0>
 800df60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df62:	4988      	ldr	r1, [pc, #544]	; (800e184 <_strtod_l+0x584>)
 800df64:	3b01      	subs	r3, #1
 800df66:	a815      	add	r0, sp, #84	; 0x54
 800df68:	9315      	str	r3, [sp, #84]	; 0x54
 800df6a:	f001 f8db 	bl	800f124 <__match>
 800df6e:	b910      	cbnz	r0, 800df76 <_strtod_l+0x376>
 800df70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df72:	3301      	adds	r3, #1
 800df74:	9315      	str	r3, [sp, #84]	; 0x54
 800df76:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800e194 <_strtod_l+0x594>
 800df7a:	f04f 0800 	mov.w	r8, #0
 800df7e:	e67a      	b.n	800dc76 <_strtod_l+0x76>
 800df80:	4881      	ldr	r0, [pc, #516]	; (800e188 <_strtod_l+0x588>)
 800df82:	f7fc fc09 	bl	800a798 <nan>
 800df86:	ec59 8b10 	vmov	r8, r9, d0
 800df8a:	e674      	b.n	800dc76 <_strtod_l+0x76>
 800df8c:	9b05      	ldr	r3, [sp, #20]
 800df8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df90:	1afb      	subs	r3, r7, r3
 800df92:	f1bb 0f00 	cmp.w	fp, #0
 800df96:	bf08      	it	eq
 800df98:	46b3      	moveq	fp, r6
 800df9a:	2e10      	cmp	r6, #16
 800df9c:	9308      	str	r3, [sp, #32]
 800df9e:	4635      	mov	r5, r6
 800dfa0:	bfa8      	it	ge
 800dfa2:	2510      	movge	r5, #16
 800dfa4:	f7f2 faa6 	bl	80004f4 <__aeabi_ui2d>
 800dfa8:	2e09      	cmp	r6, #9
 800dfaa:	4680      	mov	r8, r0
 800dfac:	4689      	mov	r9, r1
 800dfae:	dd13      	ble.n	800dfd8 <_strtod_l+0x3d8>
 800dfb0:	4b76      	ldr	r3, [pc, #472]	; (800e18c <_strtod_l+0x58c>)
 800dfb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dfb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dfba:	f7f2 fb15 	bl	80005e8 <__aeabi_dmul>
 800dfbe:	4680      	mov	r8, r0
 800dfc0:	4650      	mov	r0, sl
 800dfc2:	4689      	mov	r9, r1
 800dfc4:	f7f2 fa96 	bl	80004f4 <__aeabi_ui2d>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	460b      	mov	r3, r1
 800dfcc:	4640      	mov	r0, r8
 800dfce:	4649      	mov	r1, r9
 800dfd0:	f7f2 f954 	bl	800027c <__adddf3>
 800dfd4:	4680      	mov	r8, r0
 800dfd6:	4689      	mov	r9, r1
 800dfd8:	2e0f      	cmp	r6, #15
 800dfda:	dc38      	bgt.n	800e04e <_strtod_l+0x44e>
 800dfdc:	9b08      	ldr	r3, [sp, #32]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f43f ae49 	beq.w	800dc76 <_strtod_l+0x76>
 800dfe4:	dd24      	ble.n	800e030 <_strtod_l+0x430>
 800dfe6:	2b16      	cmp	r3, #22
 800dfe8:	dc0b      	bgt.n	800e002 <_strtod_l+0x402>
 800dfea:	4968      	ldr	r1, [pc, #416]	; (800e18c <_strtod_l+0x58c>)
 800dfec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dff4:	4642      	mov	r2, r8
 800dff6:	464b      	mov	r3, r9
 800dff8:	f7f2 faf6 	bl	80005e8 <__aeabi_dmul>
 800dffc:	4680      	mov	r8, r0
 800dffe:	4689      	mov	r9, r1
 800e000:	e639      	b.n	800dc76 <_strtod_l+0x76>
 800e002:	9a08      	ldr	r2, [sp, #32]
 800e004:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800e008:	4293      	cmp	r3, r2
 800e00a:	db20      	blt.n	800e04e <_strtod_l+0x44e>
 800e00c:	4c5f      	ldr	r4, [pc, #380]	; (800e18c <_strtod_l+0x58c>)
 800e00e:	f1c6 060f 	rsb	r6, r6, #15
 800e012:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800e016:	4642      	mov	r2, r8
 800e018:	464b      	mov	r3, r9
 800e01a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e01e:	f7f2 fae3 	bl	80005e8 <__aeabi_dmul>
 800e022:	9b08      	ldr	r3, [sp, #32]
 800e024:	1b9e      	subs	r6, r3, r6
 800e026:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e02a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e02e:	e7e3      	b.n	800dff8 <_strtod_l+0x3f8>
 800e030:	9b08      	ldr	r3, [sp, #32]
 800e032:	3316      	adds	r3, #22
 800e034:	db0b      	blt.n	800e04e <_strtod_l+0x44e>
 800e036:	9b05      	ldr	r3, [sp, #20]
 800e038:	1bdf      	subs	r7, r3, r7
 800e03a:	4b54      	ldr	r3, [pc, #336]	; (800e18c <_strtod_l+0x58c>)
 800e03c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e040:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e044:	4640      	mov	r0, r8
 800e046:	4649      	mov	r1, r9
 800e048:	f7f2 fbf8 	bl	800083c <__aeabi_ddiv>
 800e04c:	e7d6      	b.n	800dffc <_strtod_l+0x3fc>
 800e04e:	9b08      	ldr	r3, [sp, #32]
 800e050:	1b75      	subs	r5, r6, r5
 800e052:	441d      	add	r5, r3
 800e054:	2d00      	cmp	r5, #0
 800e056:	dd70      	ble.n	800e13a <_strtod_l+0x53a>
 800e058:	f015 030f 	ands.w	r3, r5, #15
 800e05c:	d00a      	beq.n	800e074 <_strtod_l+0x474>
 800e05e:	494b      	ldr	r1, [pc, #300]	; (800e18c <_strtod_l+0x58c>)
 800e060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e064:	4642      	mov	r2, r8
 800e066:	464b      	mov	r3, r9
 800e068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e06c:	f7f2 fabc 	bl	80005e8 <__aeabi_dmul>
 800e070:	4680      	mov	r8, r0
 800e072:	4689      	mov	r9, r1
 800e074:	f035 050f 	bics.w	r5, r5, #15
 800e078:	d04d      	beq.n	800e116 <_strtod_l+0x516>
 800e07a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800e07e:	dd22      	ble.n	800e0c6 <_strtod_l+0x4c6>
 800e080:	2500      	movs	r5, #0
 800e082:	46ab      	mov	fp, r5
 800e084:	9509      	str	r5, [sp, #36]	; 0x24
 800e086:	9505      	str	r5, [sp, #20]
 800e088:	2322      	movs	r3, #34	; 0x22
 800e08a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e194 <_strtod_l+0x594>
 800e08e:	6023      	str	r3, [r4, #0]
 800e090:	f04f 0800 	mov.w	r8, #0
 800e094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e096:	2b00      	cmp	r3, #0
 800e098:	f43f aded 	beq.w	800dc76 <_strtod_l+0x76>
 800e09c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f001 f9ee 	bl	800f480 <_Bfree>
 800e0a4:	9905      	ldr	r1, [sp, #20]
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f001 f9ea 	bl	800f480 <_Bfree>
 800e0ac:	4659      	mov	r1, fp
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	f001 f9e6 	bl	800f480 <_Bfree>
 800e0b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f001 f9e2 	bl	800f480 <_Bfree>
 800e0bc:	4629      	mov	r1, r5
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f001 f9de 	bl	800f480 <_Bfree>
 800e0c4:	e5d7      	b.n	800dc76 <_strtod_l+0x76>
 800e0c6:	4b32      	ldr	r3, [pc, #200]	; (800e190 <_strtod_l+0x590>)
 800e0c8:	9304      	str	r3, [sp, #16]
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	112d      	asrs	r5, r5, #4
 800e0ce:	4640      	mov	r0, r8
 800e0d0:	4649      	mov	r1, r9
 800e0d2:	469a      	mov	sl, r3
 800e0d4:	2d01      	cmp	r5, #1
 800e0d6:	dc21      	bgt.n	800e11c <_strtod_l+0x51c>
 800e0d8:	b10b      	cbz	r3, 800e0de <_strtod_l+0x4de>
 800e0da:	4680      	mov	r8, r0
 800e0dc:	4689      	mov	r9, r1
 800e0de:	492c      	ldr	r1, [pc, #176]	; (800e190 <_strtod_l+0x590>)
 800e0e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e0e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e0e8:	4642      	mov	r2, r8
 800e0ea:	464b      	mov	r3, r9
 800e0ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0f0:	f7f2 fa7a 	bl	80005e8 <__aeabi_dmul>
 800e0f4:	4b27      	ldr	r3, [pc, #156]	; (800e194 <_strtod_l+0x594>)
 800e0f6:	460a      	mov	r2, r1
 800e0f8:	400b      	ands	r3, r1
 800e0fa:	4927      	ldr	r1, [pc, #156]	; (800e198 <_strtod_l+0x598>)
 800e0fc:	428b      	cmp	r3, r1
 800e0fe:	4680      	mov	r8, r0
 800e100:	d8be      	bhi.n	800e080 <_strtod_l+0x480>
 800e102:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e106:	428b      	cmp	r3, r1
 800e108:	bf86      	itte	hi
 800e10a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800e19c <_strtod_l+0x59c>
 800e10e:	f04f 38ff 	movhi.w	r8, #4294967295
 800e112:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e116:	2300      	movs	r3, #0
 800e118:	9304      	str	r3, [sp, #16]
 800e11a:	e07b      	b.n	800e214 <_strtod_l+0x614>
 800e11c:	07ea      	lsls	r2, r5, #31
 800e11e:	d505      	bpl.n	800e12c <_strtod_l+0x52c>
 800e120:	9b04      	ldr	r3, [sp, #16]
 800e122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e126:	f7f2 fa5f 	bl	80005e8 <__aeabi_dmul>
 800e12a:	2301      	movs	r3, #1
 800e12c:	9a04      	ldr	r2, [sp, #16]
 800e12e:	3208      	adds	r2, #8
 800e130:	f10a 0a01 	add.w	sl, sl, #1
 800e134:	106d      	asrs	r5, r5, #1
 800e136:	9204      	str	r2, [sp, #16]
 800e138:	e7cc      	b.n	800e0d4 <_strtod_l+0x4d4>
 800e13a:	d0ec      	beq.n	800e116 <_strtod_l+0x516>
 800e13c:	426d      	negs	r5, r5
 800e13e:	f015 020f 	ands.w	r2, r5, #15
 800e142:	d00a      	beq.n	800e15a <_strtod_l+0x55a>
 800e144:	4b11      	ldr	r3, [pc, #68]	; (800e18c <_strtod_l+0x58c>)
 800e146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e14a:	4640      	mov	r0, r8
 800e14c:	4649      	mov	r1, r9
 800e14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e152:	f7f2 fb73 	bl	800083c <__aeabi_ddiv>
 800e156:	4680      	mov	r8, r0
 800e158:	4689      	mov	r9, r1
 800e15a:	112d      	asrs	r5, r5, #4
 800e15c:	d0db      	beq.n	800e116 <_strtod_l+0x516>
 800e15e:	2d1f      	cmp	r5, #31
 800e160:	dd1e      	ble.n	800e1a0 <_strtod_l+0x5a0>
 800e162:	2500      	movs	r5, #0
 800e164:	46ab      	mov	fp, r5
 800e166:	9509      	str	r5, [sp, #36]	; 0x24
 800e168:	9505      	str	r5, [sp, #20]
 800e16a:	2322      	movs	r3, #34	; 0x22
 800e16c:	f04f 0800 	mov.w	r8, #0
 800e170:	f04f 0900 	mov.w	r9, #0
 800e174:	6023      	str	r3, [r4, #0]
 800e176:	e78d      	b.n	800e094 <_strtod_l+0x494>
 800e178:	08010f13 	.word	0x08010f13
 800e17c:	08010f2c 	.word	0x08010f2c
 800e180:	08010f0a 	.word	0x08010f0a
 800e184:	08010f0d 	.word	0x08010f0d
 800e188:	08011290 	.word	0x08011290
 800e18c:	08011080 	.word	0x08011080
 800e190:	08011058 	.word	0x08011058
 800e194:	7ff00000 	.word	0x7ff00000
 800e198:	7ca00000 	.word	0x7ca00000
 800e19c:	7fefffff 	.word	0x7fefffff
 800e1a0:	f015 0310 	ands.w	r3, r5, #16
 800e1a4:	bf18      	it	ne
 800e1a6:	236a      	movne	r3, #106	; 0x6a
 800e1a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800e54c <_strtod_l+0x94c>
 800e1ac:	9304      	str	r3, [sp, #16]
 800e1ae:	4640      	mov	r0, r8
 800e1b0:	4649      	mov	r1, r9
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	07ea      	lsls	r2, r5, #31
 800e1b6:	d504      	bpl.n	800e1c2 <_strtod_l+0x5c2>
 800e1b8:	e9da 2300 	ldrd	r2, r3, [sl]
 800e1bc:	f7f2 fa14 	bl	80005e8 <__aeabi_dmul>
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	106d      	asrs	r5, r5, #1
 800e1c4:	f10a 0a08 	add.w	sl, sl, #8
 800e1c8:	d1f4      	bne.n	800e1b4 <_strtod_l+0x5b4>
 800e1ca:	b10b      	cbz	r3, 800e1d0 <_strtod_l+0x5d0>
 800e1cc:	4680      	mov	r8, r0
 800e1ce:	4689      	mov	r9, r1
 800e1d0:	9b04      	ldr	r3, [sp, #16]
 800e1d2:	b1bb      	cbz	r3, 800e204 <_strtod_l+0x604>
 800e1d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e1d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	4649      	mov	r1, r9
 800e1e0:	dd10      	ble.n	800e204 <_strtod_l+0x604>
 800e1e2:	2b1f      	cmp	r3, #31
 800e1e4:	f340 811e 	ble.w	800e424 <_strtod_l+0x824>
 800e1e8:	2b34      	cmp	r3, #52	; 0x34
 800e1ea:	bfde      	ittt	le
 800e1ec:	f04f 33ff 	movle.w	r3, #4294967295
 800e1f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e1f4:	4093      	lslle	r3, r2
 800e1f6:	f04f 0800 	mov.w	r8, #0
 800e1fa:	bfcc      	ite	gt
 800e1fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e200:	ea03 0901 	andle.w	r9, r3, r1
 800e204:	2200      	movs	r2, #0
 800e206:	2300      	movs	r3, #0
 800e208:	4640      	mov	r0, r8
 800e20a:	4649      	mov	r1, r9
 800e20c:	f7f2 fc54 	bl	8000ab8 <__aeabi_dcmpeq>
 800e210:	2800      	cmp	r0, #0
 800e212:	d1a6      	bne.n	800e162 <_strtod_l+0x562>
 800e214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e21a:	4633      	mov	r3, r6
 800e21c:	465a      	mov	r2, fp
 800e21e:	4620      	mov	r0, r4
 800e220:	f001 f996 	bl	800f550 <__s2b>
 800e224:	9009      	str	r0, [sp, #36]	; 0x24
 800e226:	2800      	cmp	r0, #0
 800e228:	f43f af2a 	beq.w	800e080 <_strtod_l+0x480>
 800e22c:	9a08      	ldr	r2, [sp, #32]
 800e22e:	9b05      	ldr	r3, [sp, #20]
 800e230:	2a00      	cmp	r2, #0
 800e232:	eba3 0307 	sub.w	r3, r3, r7
 800e236:	bfa8      	it	ge
 800e238:	2300      	movge	r3, #0
 800e23a:	930c      	str	r3, [sp, #48]	; 0x30
 800e23c:	2500      	movs	r5, #0
 800e23e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e242:	9312      	str	r3, [sp, #72]	; 0x48
 800e244:	46ab      	mov	fp, r5
 800e246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e248:	4620      	mov	r0, r4
 800e24a:	6859      	ldr	r1, [r3, #4]
 800e24c:	f001 f8d8 	bl	800f400 <_Balloc>
 800e250:	9005      	str	r0, [sp, #20]
 800e252:	2800      	cmp	r0, #0
 800e254:	f43f af18 	beq.w	800e088 <_strtod_l+0x488>
 800e258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e25a:	691a      	ldr	r2, [r3, #16]
 800e25c:	3202      	adds	r2, #2
 800e25e:	f103 010c 	add.w	r1, r3, #12
 800e262:	0092      	lsls	r2, r2, #2
 800e264:	300c      	adds	r0, #12
 800e266:	f000 fc5a 	bl	800eb1e <memcpy>
 800e26a:	ec49 8b10 	vmov	d0, r8, r9
 800e26e:	aa18      	add	r2, sp, #96	; 0x60
 800e270:	a917      	add	r1, sp, #92	; 0x5c
 800e272:	4620      	mov	r0, r4
 800e274:	f001 fca0 	bl	800fbb8 <__d2b>
 800e278:	ec49 8b18 	vmov	d8, r8, r9
 800e27c:	9016      	str	r0, [sp, #88]	; 0x58
 800e27e:	2800      	cmp	r0, #0
 800e280:	f43f af02 	beq.w	800e088 <_strtod_l+0x488>
 800e284:	2101      	movs	r1, #1
 800e286:	4620      	mov	r0, r4
 800e288:	f001 f9fa 	bl	800f680 <__i2b>
 800e28c:	4683      	mov	fp, r0
 800e28e:	2800      	cmp	r0, #0
 800e290:	f43f aefa 	beq.w	800e088 <_strtod_l+0x488>
 800e294:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e296:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e298:	2e00      	cmp	r6, #0
 800e29a:	bfab      	itete	ge
 800e29c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e29e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e2a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e2a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e2a6:	bfac      	ite	ge
 800e2a8:	eb06 0a03 	addge.w	sl, r6, r3
 800e2ac:	1b9f      	sublt	r7, r3, r6
 800e2ae:	9b04      	ldr	r3, [sp, #16]
 800e2b0:	1af6      	subs	r6, r6, r3
 800e2b2:	4416      	add	r6, r2
 800e2b4:	4ba0      	ldr	r3, [pc, #640]	; (800e538 <_strtod_l+0x938>)
 800e2b6:	3e01      	subs	r6, #1
 800e2b8:	429e      	cmp	r6, r3
 800e2ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e2be:	f280 80c4 	bge.w	800e44a <_strtod_l+0x84a>
 800e2c2:	1b9b      	subs	r3, r3, r6
 800e2c4:	2b1f      	cmp	r3, #31
 800e2c6:	eba2 0203 	sub.w	r2, r2, r3
 800e2ca:	f04f 0101 	mov.w	r1, #1
 800e2ce:	f300 80b0 	bgt.w	800e432 <_strtod_l+0x832>
 800e2d2:	fa01 f303 	lsl.w	r3, r1, r3
 800e2d6:	930e      	str	r3, [sp, #56]	; 0x38
 800e2d8:	2300      	movs	r3, #0
 800e2da:	930d      	str	r3, [sp, #52]	; 0x34
 800e2dc:	eb0a 0602 	add.w	r6, sl, r2
 800e2e0:	9b04      	ldr	r3, [sp, #16]
 800e2e2:	45b2      	cmp	sl, r6
 800e2e4:	4417      	add	r7, r2
 800e2e6:	441f      	add	r7, r3
 800e2e8:	4653      	mov	r3, sl
 800e2ea:	bfa8      	it	ge
 800e2ec:	4633      	movge	r3, r6
 800e2ee:	42bb      	cmp	r3, r7
 800e2f0:	bfa8      	it	ge
 800e2f2:	463b      	movge	r3, r7
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	bfc2      	ittt	gt
 800e2f8:	1af6      	subgt	r6, r6, r3
 800e2fa:	1aff      	subgt	r7, r7, r3
 800e2fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e302:	2b00      	cmp	r3, #0
 800e304:	dd17      	ble.n	800e336 <_strtod_l+0x736>
 800e306:	4659      	mov	r1, fp
 800e308:	461a      	mov	r2, r3
 800e30a:	4620      	mov	r0, r4
 800e30c:	f001 fa78 	bl	800f800 <__pow5mult>
 800e310:	4683      	mov	fp, r0
 800e312:	2800      	cmp	r0, #0
 800e314:	f43f aeb8 	beq.w	800e088 <_strtod_l+0x488>
 800e318:	4601      	mov	r1, r0
 800e31a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e31c:	4620      	mov	r0, r4
 800e31e:	f001 f9c5 	bl	800f6ac <__multiply>
 800e322:	900b      	str	r0, [sp, #44]	; 0x2c
 800e324:	2800      	cmp	r0, #0
 800e326:	f43f aeaf 	beq.w	800e088 <_strtod_l+0x488>
 800e32a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e32c:	4620      	mov	r0, r4
 800e32e:	f001 f8a7 	bl	800f480 <_Bfree>
 800e332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e334:	9316      	str	r3, [sp, #88]	; 0x58
 800e336:	2e00      	cmp	r6, #0
 800e338:	f300 808c 	bgt.w	800e454 <_strtod_l+0x854>
 800e33c:	9b08      	ldr	r3, [sp, #32]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	dd08      	ble.n	800e354 <_strtod_l+0x754>
 800e342:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e344:	9905      	ldr	r1, [sp, #20]
 800e346:	4620      	mov	r0, r4
 800e348:	f001 fa5a 	bl	800f800 <__pow5mult>
 800e34c:	9005      	str	r0, [sp, #20]
 800e34e:	2800      	cmp	r0, #0
 800e350:	f43f ae9a 	beq.w	800e088 <_strtod_l+0x488>
 800e354:	2f00      	cmp	r7, #0
 800e356:	dd08      	ble.n	800e36a <_strtod_l+0x76a>
 800e358:	9905      	ldr	r1, [sp, #20]
 800e35a:	463a      	mov	r2, r7
 800e35c:	4620      	mov	r0, r4
 800e35e:	f001 faa9 	bl	800f8b4 <__lshift>
 800e362:	9005      	str	r0, [sp, #20]
 800e364:	2800      	cmp	r0, #0
 800e366:	f43f ae8f 	beq.w	800e088 <_strtod_l+0x488>
 800e36a:	f1ba 0f00 	cmp.w	sl, #0
 800e36e:	dd08      	ble.n	800e382 <_strtod_l+0x782>
 800e370:	4659      	mov	r1, fp
 800e372:	4652      	mov	r2, sl
 800e374:	4620      	mov	r0, r4
 800e376:	f001 fa9d 	bl	800f8b4 <__lshift>
 800e37a:	4683      	mov	fp, r0
 800e37c:	2800      	cmp	r0, #0
 800e37e:	f43f ae83 	beq.w	800e088 <_strtod_l+0x488>
 800e382:	9a05      	ldr	r2, [sp, #20]
 800e384:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e386:	4620      	mov	r0, r4
 800e388:	f001 fb1c 	bl	800f9c4 <__mdiff>
 800e38c:	4605      	mov	r5, r0
 800e38e:	2800      	cmp	r0, #0
 800e390:	f43f ae7a 	beq.w	800e088 <_strtod_l+0x488>
 800e394:	68c3      	ldr	r3, [r0, #12]
 800e396:	930b      	str	r3, [sp, #44]	; 0x2c
 800e398:	2300      	movs	r3, #0
 800e39a:	60c3      	str	r3, [r0, #12]
 800e39c:	4659      	mov	r1, fp
 800e39e:	f001 faf5 	bl	800f98c <__mcmp>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	da60      	bge.n	800e468 <_strtod_l+0x868>
 800e3a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3a8:	ea53 0308 	orrs.w	r3, r3, r8
 800e3ac:	f040 8084 	bne.w	800e4b8 <_strtod_l+0x8b8>
 800e3b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d17f      	bne.n	800e4b8 <_strtod_l+0x8b8>
 800e3b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e3bc:	0d1b      	lsrs	r3, r3, #20
 800e3be:	051b      	lsls	r3, r3, #20
 800e3c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e3c4:	d978      	bls.n	800e4b8 <_strtod_l+0x8b8>
 800e3c6:	696b      	ldr	r3, [r5, #20]
 800e3c8:	b913      	cbnz	r3, 800e3d0 <_strtod_l+0x7d0>
 800e3ca:	692b      	ldr	r3, [r5, #16]
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	dd73      	ble.n	800e4b8 <_strtod_l+0x8b8>
 800e3d0:	4629      	mov	r1, r5
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	f001 fa6d 	bl	800f8b4 <__lshift>
 800e3da:	4659      	mov	r1, fp
 800e3dc:	4605      	mov	r5, r0
 800e3de:	f001 fad5 	bl	800f98c <__mcmp>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	dd68      	ble.n	800e4b8 <_strtod_l+0x8b8>
 800e3e6:	9904      	ldr	r1, [sp, #16]
 800e3e8:	4a54      	ldr	r2, [pc, #336]	; (800e53c <_strtod_l+0x93c>)
 800e3ea:	464b      	mov	r3, r9
 800e3ec:	2900      	cmp	r1, #0
 800e3ee:	f000 8084 	beq.w	800e4fa <_strtod_l+0x8fa>
 800e3f2:	ea02 0109 	and.w	r1, r2, r9
 800e3f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e3fa:	dc7e      	bgt.n	800e4fa <_strtod_l+0x8fa>
 800e3fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e400:	f77f aeb3 	ble.w	800e16a <_strtod_l+0x56a>
 800e404:	4b4e      	ldr	r3, [pc, #312]	; (800e540 <_strtod_l+0x940>)
 800e406:	4640      	mov	r0, r8
 800e408:	4649      	mov	r1, r9
 800e40a:	2200      	movs	r2, #0
 800e40c:	f7f2 f8ec 	bl	80005e8 <__aeabi_dmul>
 800e410:	4b4a      	ldr	r3, [pc, #296]	; (800e53c <_strtod_l+0x93c>)
 800e412:	400b      	ands	r3, r1
 800e414:	4680      	mov	r8, r0
 800e416:	4689      	mov	r9, r1
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f47f ae3f 	bne.w	800e09c <_strtod_l+0x49c>
 800e41e:	2322      	movs	r3, #34	; 0x22
 800e420:	6023      	str	r3, [r4, #0]
 800e422:	e63b      	b.n	800e09c <_strtod_l+0x49c>
 800e424:	f04f 32ff 	mov.w	r2, #4294967295
 800e428:	fa02 f303 	lsl.w	r3, r2, r3
 800e42c:	ea03 0808 	and.w	r8, r3, r8
 800e430:	e6e8      	b.n	800e204 <_strtod_l+0x604>
 800e432:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e436:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e43a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e43e:	36e2      	adds	r6, #226	; 0xe2
 800e440:	fa01 f306 	lsl.w	r3, r1, r6
 800e444:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e448:	e748      	b.n	800e2dc <_strtod_l+0x6dc>
 800e44a:	2100      	movs	r1, #0
 800e44c:	2301      	movs	r3, #1
 800e44e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800e452:	e743      	b.n	800e2dc <_strtod_l+0x6dc>
 800e454:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e456:	4632      	mov	r2, r6
 800e458:	4620      	mov	r0, r4
 800e45a:	f001 fa2b 	bl	800f8b4 <__lshift>
 800e45e:	9016      	str	r0, [sp, #88]	; 0x58
 800e460:	2800      	cmp	r0, #0
 800e462:	f47f af6b 	bne.w	800e33c <_strtod_l+0x73c>
 800e466:	e60f      	b.n	800e088 <_strtod_l+0x488>
 800e468:	46ca      	mov	sl, r9
 800e46a:	d171      	bne.n	800e550 <_strtod_l+0x950>
 800e46c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e46e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e472:	b352      	cbz	r2, 800e4ca <_strtod_l+0x8ca>
 800e474:	4a33      	ldr	r2, [pc, #204]	; (800e544 <_strtod_l+0x944>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d12a      	bne.n	800e4d0 <_strtod_l+0x8d0>
 800e47a:	9b04      	ldr	r3, [sp, #16]
 800e47c:	4641      	mov	r1, r8
 800e47e:	b1fb      	cbz	r3, 800e4c0 <_strtod_l+0x8c0>
 800e480:	4b2e      	ldr	r3, [pc, #184]	; (800e53c <_strtod_l+0x93c>)
 800e482:	ea09 0303 	and.w	r3, r9, r3
 800e486:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e48a:	f04f 32ff 	mov.w	r2, #4294967295
 800e48e:	d81a      	bhi.n	800e4c6 <_strtod_l+0x8c6>
 800e490:	0d1b      	lsrs	r3, r3, #20
 800e492:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e496:	fa02 f303 	lsl.w	r3, r2, r3
 800e49a:	4299      	cmp	r1, r3
 800e49c:	d118      	bne.n	800e4d0 <_strtod_l+0x8d0>
 800e49e:	4b2a      	ldr	r3, [pc, #168]	; (800e548 <_strtod_l+0x948>)
 800e4a0:	459a      	cmp	sl, r3
 800e4a2:	d102      	bne.n	800e4aa <_strtod_l+0x8aa>
 800e4a4:	3101      	adds	r1, #1
 800e4a6:	f43f adef 	beq.w	800e088 <_strtod_l+0x488>
 800e4aa:	4b24      	ldr	r3, [pc, #144]	; (800e53c <_strtod_l+0x93c>)
 800e4ac:	ea0a 0303 	and.w	r3, sl, r3
 800e4b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e4b4:	f04f 0800 	mov.w	r8, #0
 800e4b8:	9b04      	ldr	r3, [sp, #16]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1a2      	bne.n	800e404 <_strtod_l+0x804>
 800e4be:	e5ed      	b.n	800e09c <_strtod_l+0x49c>
 800e4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c4:	e7e9      	b.n	800e49a <_strtod_l+0x89a>
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	e7e7      	b.n	800e49a <_strtod_l+0x89a>
 800e4ca:	ea53 0308 	orrs.w	r3, r3, r8
 800e4ce:	d08a      	beq.n	800e3e6 <_strtod_l+0x7e6>
 800e4d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4d2:	b1e3      	cbz	r3, 800e50e <_strtod_l+0x90e>
 800e4d4:	ea13 0f0a 	tst.w	r3, sl
 800e4d8:	d0ee      	beq.n	800e4b8 <_strtod_l+0x8b8>
 800e4da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4dc:	9a04      	ldr	r2, [sp, #16]
 800e4de:	4640      	mov	r0, r8
 800e4e0:	4649      	mov	r1, r9
 800e4e2:	b1c3      	cbz	r3, 800e516 <_strtod_l+0x916>
 800e4e4:	f7ff fb6e 	bl	800dbc4 <sulp>
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	ec51 0b18 	vmov	r0, r1, d8
 800e4f0:	f7f1 fec4 	bl	800027c <__adddf3>
 800e4f4:	4680      	mov	r8, r0
 800e4f6:	4689      	mov	r9, r1
 800e4f8:	e7de      	b.n	800e4b8 <_strtod_l+0x8b8>
 800e4fa:	4013      	ands	r3, r2
 800e4fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e500:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e504:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e508:	f04f 38ff 	mov.w	r8, #4294967295
 800e50c:	e7d4      	b.n	800e4b8 <_strtod_l+0x8b8>
 800e50e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e510:	ea13 0f08 	tst.w	r3, r8
 800e514:	e7e0      	b.n	800e4d8 <_strtod_l+0x8d8>
 800e516:	f7ff fb55 	bl	800dbc4 <sulp>
 800e51a:	4602      	mov	r2, r0
 800e51c:	460b      	mov	r3, r1
 800e51e:	ec51 0b18 	vmov	r0, r1, d8
 800e522:	f7f1 fea9 	bl	8000278 <__aeabi_dsub>
 800e526:	2200      	movs	r2, #0
 800e528:	2300      	movs	r3, #0
 800e52a:	4680      	mov	r8, r0
 800e52c:	4689      	mov	r9, r1
 800e52e:	f7f2 fac3 	bl	8000ab8 <__aeabi_dcmpeq>
 800e532:	2800      	cmp	r0, #0
 800e534:	d0c0      	beq.n	800e4b8 <_strtod_l+0x8b8>
 800e536:	e618      	b.n	800e16a <_strtod_l+0x56a>
 800e538:	fffffc02 	.word	0xfffffc02
 800e53c:	7ff00000 	.word	0x7ff00000
 800e540:	39500000 	.word	0x39500000
 800e544:	000fffff 	.word	0x000fffff
 800e548:	7fefffff 	.word	0x7fefffff
 800e54c:	08010f40 	.word	0x08010f40
 800e550:	4659      	mov	r1, fp
 800e552:	4628      	mov	r0, r5
 800e554:	f001 fb8a 	bl	800fc6c <__ratio>
 800e558:	ec57 6b10 	vmov	r6, r7, d0
 800e55c:	ee10 0a10 	vmov	r0, s0
 800e560:	2200      	movs	r2, #0
 800e562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e566:	4639      	mov	r1, r7
 800e568:	f7f2 faba 	bl	8000ae0 <__aeabi_dcmple>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d071      	beq.n	800e654 <_strtod_l+0xa54>
 800e570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e572:	2b00      	cmp	r3, #0
 800e574:	d17c      	bne.n	800e670 <_strtod_l+0xa70>
 800e576:	f1b8 0f00 	cmp.w	r8, #0
 800e57a:	d15a      	bne.n	800e632 <_strtod_l+0xa32>
 800e57c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e580:	2b00      	cmp	r3, #0
 800e582:	d15d      	bne.n	800e640 <_strtod_l+0xa40>
 800e584:	4b90      	ldr	r3, [pc, #576]	; (800e7c8 <_strtod_l+0xbc8>)
 800e586:	2200      	movs	r2, #0
 800e588:	4630      	mov	r0, r6
 800e58a:	4639      	mov	r1, r7
 800e58c:	f7f2 fa9e 	bl	8000acc <__aeabi_dcmplt>
 800e590:	2800      	cmp	r0, #0
 800e592:	d15c      	bne.n	800e64e <_strtod_l+0xa4e>
 800e594:	4630      	mov	r0, r6
 800e596:	4639      	mov	r1, r7
 800e598:	4b8c      	ldr	r3, [pc, #560]	; (800e7cc <_strtod_l+0xbcc>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	f7f2 f824 	bl	80005e8 <__aeabi_dmul>
 800e5a0:	4606      	mov	r6, r0
 800e5a2:	460f      	mov	r7, r1
 800e5a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e5a8:	9606      	str	r6, [sp, #24]
 800e5aa:	9307      	str	r3, [sp, #28]
 800e5ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e5b4:	4b86      	ldr	r3, [pc, #536]	; (800e7d0 <_strtod_l+0xbd0>)
 800e5b6:	ea0a 0303 	and.w	r3, sl, r3
 800e5ba:	930d      	str	r3, [sp, #52]	; 0x34
 800e5bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e5be:	4b85      	ldr	r3, [pc, #532]	; (800e7d4 <_strtod_l+0xbd4>)
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	f040 8090 	bne.w	800e6e6 <_strtod_l+0xae6>
 800e5c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800e5ca:	ec49 8b10 	vmov	d0, r8, r9
 800e5ce:	f001 fa83 	bl	800fad8 <__ulp>
 800e5d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5d6:	ec51 0b10 	vmov	r0, r1, d0
 800e5da:	f7f2 f805 	bl	80005e8 <__aeabi_dmul>
 800e5de:	4642      	mov	r2, r8
 800e5e0:	464b      	mov	r3, r9
 800e5e2:	f7f1 fe4b 	bl	800027c <__adddf3>
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	4979      	ldr	r1, [pc, #484]	; (800e7d0 <_strtod_l+0xbd0>)
 800e5ea:	4a7b      	ldr	r2, [pc, #492]	; (800e7d8 <_strtod_l+0xbd8>)
 800e5ec:	4019      	ands	r1, r3
 800e5ee:	4291      	cmp	r1, r2
 800e5f0:	4680      	mov	r8, r0
 800e5f2:	d944      	bls.n	800e67e <_strtod_l+0xa7e>
 800e5f4:	ee18 2a90 	vmov	r2, s17
 800e5f8:	4b78      	ldr	r3, [pc, #480]	; (800e7dc <_strtod_l+0xbdc>)
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d104      	bne.n	800e608 <_strtod_l+0xa08>
 800e5fe:	ee18 3a10 	vmov	r3, s16
 800e602:	3301      	adds	r3, #1
 800e604:	f43f ad40 	beq.w	800e088 <_strtod_l+0x488>
 800e608:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e7dc <_strtod_l+0xbdc>
 800e60c:	f04f 38ff 	mov.w	r8, #4294967295
 800e610:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e612:	4620      	mov	r0, r4
 800e614:	f000 ff34 	bl	800f480 <_Bfree>
 800e618:	9905      	ldr	r1, [sp, #20]
 800e61a:	4620      	mov	r0, r4
 800e61c:	f000 ff30 	bl	800f480 <_Bfree>
 800e620:	4659      	mov	r1, fp
 800e622:	4620      	mov	r0, r4
 800e624:	f000 ff2c 	bl	800f480 <_Bfree>
 800e628:	4629      	mov	r1, r5
 800e62a:	4620      	mov	r0, r4
 800e62c:	f000 ff28 	bl	800f480 <_Bfree>
 800e630:	e609      	b.n	800e246 <_strtod_l+0x646>
 800e632:	f1b8 0f01 	cmp.w	r8, #1
 800e636:	d103      	bne.n	800e640 <_strtod_l+0xa40>
 800e638:	f1b9 0f00 	cmp.w	r9, #0
 800e63c:	f43f ad95 	beq.w	800e16a <_strtod_l+0x56a>
 800e640:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800e798 <_strtod_l+0xb98>
 800e644:	4f60      	ldr	r7, [pc, #384]	; (800e7c8 <_strtod_l+0xbc8>)
 800e646:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e64a:	2600      	movs	r6, #0
 800e64c:	e7ae      	b.n	800e5ac <_strtod_l+0x9ac>
 800e64e:	4f5f      	ldr	r7, [pc, #380]	; (800e7cc <_strtod_l+0xbcc>)
 800e650:	2600      	movs	r6, #0
 800e652:	e7a7      	b.n	800e5a4 <_strtod_l+0x9a4>
 800e654:	4b5d      	ldr	r3, [pc, #372]	; (800e7cc <_strtod_l+0xbcc>)
 800e656:	4630      	mov	r0, r6
 800e658:	4639      	mov	r1, r7
 800e65a:	2200      	movs	r2, #0
 800e65c:	f7f1 ffc4 	bl	80005e8 <__aeabi_dmul>
 800e660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e662:	4606      	mov	r6, r0
 800e664:	460f      	mov	r7, r1
 800e666:	2b00      	cmp	r3, #0
 800e668:	d09c      	beq.n	800e5a4 <_strtod_l+0x9a4>
 800e66a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e66e:	e79d      	b.n	800e5ac <_strtod_l+0x9ac>
 800e670:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e7a0 <_strtod_l+0xba0>
 800e674:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e678:	ec57 6b17 	vmov	r6, r7, d7
 800e67c:	e796      	b.n	800e5ac <_strtod_l+0x9ac>
 800e67e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e682:	9b04      	ldr	r3, [sp, #16]
 800e684:	46ca      	mov	sl, r9
 800e686:	2b00      	cmp	r3, #0
 800e688:	d1c2      	bne.n	800e610 <_strtod_l+0xa10>
 800e68a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e68e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e690:	0d1b      	lsrs	r3, r3, #20
 800e692:	051b      	lsls	r3, r3, #20
 800e694:	429a      	cmp	r2, r3
 800e696:	d1bb      	bne.n	800e610 <_strtod_l+0xa10>
 800e698:	4630      	mov	r0, r6
 800e69a:	4639      	mov	r1, r7
 800e69c:	f7f2 fc12 	bl	8000ec4 <__aeabi_d2lz>
 800e6a0:	f7f1 ff74 	bl	800058c <__aeabi_l2d>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	4630      	mov	r0, r6
 800e6aa:	4639      	mov	r1, r7
 800e6ac:	f7f1 fde4 	bl	8000278 <__aeabi_dsub>
 800e6b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e6b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6b6:	ea43 0308 	orr.w	r3, r3, r8
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	4606      	mov	r6, r0
 800e6be:	460f      	mov	r7, r1
 800e6c0:	d054      	beq.n	800e76c <_strtod_l+0xb6c>
 800e6c2:	a339      	add	r3, pc, #228	; (adr r3, 800e7a8 <_strtod_l+0xba8>)
 800e6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c8:	f7f2 fa00 	bl	8000acc <__aeabi_dcmplt>
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	f47f ace5 	bne.w	800e09c <_strtod_l+0x49c>
 800e6d2:	a337      	add	r3, pc, #220	; (adr r3, 800e7b0 <_strtod_l+0xbb0>)
 800e6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d8:	4630      	mov	r0, r6
 800e6da:	4639      	mov	r1, r7
 800e6dc:	f7f2 fa14 	bl	8000b08 <__aeabi_dcmpgt>
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d095      	beq.n	800e610 <_strtod_l+0xa10>
 800e6e4:	e4da      	b.n	800e09c <_strtod_l+0x49c>
 800e6e6:	9b04      	ldr	r3, [sp, #16]
 800e6e8:	b333      	cbz	r3, 800e738 <_strtod_l+0xb38>
 800e6ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e6f0:	d822      	bhi.n	800e738 <_strtod_l+0xb38>
 800e6f2:	a331      	add	r3, pc, #196	; (adr r3, 800e7b8 <_strtod_l+0xbb8>)
 800e6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	4639      	mov	r1, r7
 800e6fc:	f7f2 f9f0 	bl	8000ae0 <__aeabi_dcmple>
 800e700:	b1a0      	cbz	r0, 800e72c <_strtod_l+0xb2c>
 800e702:	4639      	mov	r1, r7
 800e704:	4630      	mov	r0, r6
 800e706:	f7f2 fa47 	bl	8000b98 <__aeabi_d2uiz>
 800e70a:	2801      	cmp	r0, #1
 800e70c:	bf38      	it	cc
 800e70e:	2001      	movcc	r0, #1
 800e710:	f7f1 fef0 	bl	80004f4 <__aeabi_ui2d>
 800e714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e716:	4606      	mov	r6, r0
 800e718:	460f      	mov	r7, r1
 800e71a:	bb23      	cbnz	r3, 800e766 <_strtod_l+0xb66>
 800e71c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e720:	9010      	str	r0, [sp, #64]	; 0x40
 800e722:	9311      	str	r3, [sp, #68]	; 0x44
 800e724:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e728:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e72c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e72e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e730:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e734:	1a9b      	subs	r3, r3, r2
 800e736:	930f      	str	r3, [sp, #60]	; 0x3c
 800e738:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e73c:	eeb0 0a48 	vmov.f32	s0, s16
 800e740:	eef0 0a68 	vmov.f32	s1, s17
 800e744:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e748:	f001 f9c6 	bl	800fad8 <__ulp>
 800e74c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e750:	ec53 2b10 	vmov	r2, r3, d0
 800e754:	f7f1 ff48 	bl	80005e8 <__aeabi_dmul>
 800e758:	ec53 2b18 	vmov	r2, r3, d8
 800e75c:	f7f1 fd8e 	bl	800027c <__adddf3>
 800e760:	4680      	mov	r8, r0
 800e762:	4689      	mov	r9, r1
 800e764:	e78d      	b.n	800e682 <_strtod_l+0xa82>
 800e766:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e76a:	e7db      	b.n	800e724 <_strtod_l+0xb24>
 800e76c:	a314      	add	r3, pc, #80	; (adr r3, 800e7c0 <_strtod_l+0xbc0>)
 800e76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e772:	f7f2 f9ab 	bl	8000acc <__aeabi_dcmplt>
 800e776:	e7b3      	b.n	800e6e0 <_strtod_l+0xae0>
 800e778:	2300      	movs	r3, #0
 800e77a:	930a      	str	r3, [sp, #40]	; 0x28
 800e77c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e77e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e780:	6013      	str	r3, [r2, #0]
 800e782:	f7ff ba7c 	b.w	800dc7e <_strtod_l+0x7e>
 800e786:	2a65      	cmp	r2, #101	; 0x65
 800e788:	f43f ab75 	beq.w	800de76 <_strtod_l+0x276>
 800e78c:	2a45      	cmp	r2, #69	; 0x45
 800e78e:	f43f ab72 	beq.w	800de76 <_strtod_l+0x276>
 800e792:	2301      	movs	r3, #1
 800e794:	f7ff bbaa 	b.w	800deec <_strtod_l+0x2ec>
 800e798:	00000000 	.word	0x00000000
 800e79c:	bff00000 	.word	0xbff00000
 800e7a0:	00000000 	.word	0x00000000
 800e7a4:	3ff00000 	.word	0x3ff00000
 800e7a8:	94a03595 	.word	0x94a03595
 800e7ac:	3fdfffff 	.word	0x3fdfffff
 800e7b0:	35afe535 	.word	0x35afe535
 800e7b4:	3fe00000 	.word	0x3fe00000
 800e7b8:	ffc00000 	.word	0xffc00000
 800e7bc:	41dfffff 	.word	0x41dfffff
 800e7c0:	94a03595 	.word	0x94a03595
 800e7c4:	3fcfffff 	.word	0x3fcfffff
 800e7c8:	3ff00000 	.word	0x3ff00000
 800e7cc:	3fe00000 	.word	0x3fe00000
 800e7d0:	7ff00000 	.word	0x7ff00000
 800e7d4:	7fe00000 	.word	0x7fe00000
 800e7d8:	7c9fffff 	.word	0x7c9fffff
 800e7dc:	7fefffff 	.word	0x7fefffff

0800e7e0 <strtod>:
 800e7e0:	460a      	mov	r2, r1
 800e7e2:	4601      	mov	r1, r0
 800e7e4:	4802      	ldr	r0, [pc, #8]	; (800e7f0 <strtod+0x10>)
 800e7e6:	4b03      	ldr	r3, [pc, #12]	; (800e7f4 <strtod+0x14>)
 800e7e8:	6800      	ldr	r0, [r0, #0]
 800e7ea:	f7ff ba09 	b.w	800dc00 <_strtod_l>
 800e7ee:	bf00      	nop
 800e7f0:	200001e4 	.word	0x200001e4
 800e7f4:	2000002c 	.word	0x2000002c

0800e7f8 <std>:
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	b510      	push	{r4, lr}
 800e7fc:	4604      	mov	r4, r0
 800e7fe:	e9c0 3300 	strd	r3, r3, [r0]
 800e802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e806:	6083      	str	r3, [r0, #8]
 800e808:	8181      	strh	r1, [r0, #12]
 800e80a:	6643      	str	r3, [r0, #100]	; 0x64
 800e80c:	81c2      	strh	r2, [r0, #14]
 800e80e:	6183      	str	r3, [r0, #24]
 800e810:	4619      	mov	r1, r3
 800e812:	2208      	movs	r2, #8
 800e814:	305c      	adds	r0, #92	; 0x5c
 800e816:	f000 f8f4 	bl	800ea02 <memset>
 800e81a:	4b0d      	ldr	r3, [pc, #52]	; (800e850 <std+0x58>)
 800e81c:	6263      	str	r3, [r4, #36]	; 0x24
 800e81e:	4b0d      	ldr	r3, [pc, #52]	; (800e854 <std+0x5c>)
 800e820:	62a3      	str	r3, [r4, #40]	; 0x28
 800e822:	4b0d      	ldr	r3, [pc, #52]	; (800e858 <std+0x60>)
 800e824:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e826:	4b0d      	ldr	r3, [pc, #52]	; (800e85c <std+0x64>)
 800e828:	6323      	str	r3, [r4, #48]	; 0x30
 800e82a:	4b0d      	ldr	r3, [pc, #52]	; (800e860 <std+0x68>)
 800e82c:	6224      	str	r4, [r4, #32]
 800e82e:	429c      	cmp	r4, r3
 800e830:	d006      	beq.n	800e840 <std+0x48>
 800e832:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e836:	4294      	cmp	r4, r2
 800e838:	d002      	beq.n	800e840 <std+0x48>
 800e83a:	33d0      	adds	r3, #208	; 0xd0
 800e83c:	429c      	cmp	r4, r3
 800e83e:	d105      	bne.n	800e84c <std+0x54>
 800e840:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e848:	f000 b966 	b.w	800eb18 <__retarget_lock_init_recursive>
 800e84c:	bd10      	pop	{r4, pc}
 800e84e:	bf00      	nop
 800e850:	0800e97d 	.word	0x0800e97d
 800e854:	0800e99f 	.word	0x0800e99f
 800e858:	0800e9d7 	.word	0x0800e9d7
 800e85c:	0800e9fb 	.word	0x0800e9fb
 800e860:	200008a8 	.word	0x200008a8

0800e864 <stdio_exit_handler>:
 800e864:	4a02      	ldr	r2, [pc, #8]	; (800e870 <stdio_exit_handler+0xc>)
 800e866:	4903      	ldr	r1, [pc, #12]	; (800e874 <stdio_exit_handler+0x10>)
 800e868:	4803      	ldr	r0, [pc, #12]	; (800e878 <stdio_exit_handler+0x14>)
 800e86a:	f000 b869 	b.w	800e940 <_fwalk_sglue>
 800e86e:	bf00      	nop
 800e870:	20000020 	.word	0x20000020
 800e874:	0800fe81 	.word	0x0800fe81
 800e878:	20000198 	.word	0x20000198

0800e87c <cleanup_stdio>:
 800e87c:	6841      	ldr	r1, [r0, #4]
 800e87e:	4b0c      	ldr	r3, [pc, #48]	; (800e8b0 <cleanup_stdio+0x34>)
 800e880:	4299      	cmp	r1, r3
 800e882:	b510      	push	{r4, lr}
 800e884:	4604      	mov	r4, r0
 800e886:	d001      	beq.n	800e88c <cleanup_stdio+0x10>
 800e888:	f001 fafa 	bl	800fe80 <_fflush_r>
 800e88c:	68a1      	ldr	r1, [r4, #8]
 800e88e:	4b09      	ldr	r3, [pc, #36]	; (800e8b4 <cleanup_stdio+0x38>)
 800e890:	4299      	cmp	r1, r3
 800e892:	d002      	beq.n	800e89a <cleanup_stdio+0x1e>
 800e894:	4620      	mov	r0, r4
 800e896:	f001 faf3 	bl	800fe80 <_fflush_r>
 800e89a:	68e1      	ldr	r1, [r4, #12]
 800e89c:	4b06      	ldr	r3, [pc, #24]	; (800e8b8 <cleanup_stdio+0x3c>)
 800e89e:	4299      	cmp	r1, r3
 800e8a0:	d004      	beq.n	800e8ac <cleanup_stdio+0x30>
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8a8:	f001 baea 	b.w	800fe80 <_fflush_r>
 800e8ac:	bd10      	pop	{r4, pc}
 800e8ae:	bf00      	nop
 800e8b0:	200008a8 	.word	0x200008a8
 800e8b4:	20000910 	.word	0x20000910
 800e8b8:	20000978 	.word	0x20000978

0800e8bc <global_stdio_init.part.0>:
 800e8bc:	b510      	push	{r4, lr}
 800e8be:	4b0b      	ldr	r3, [pc, #44]	; (800e8ec <global_stdio_init.part.0+0x30>)
 800e8c0:	4c0b      	ldr	r4, [pc, #44]	; (800e8f0 <global_stdio_init.part.0+0x34>)
 800e8c2:	4a0c      	ldr	r2, [pc, #48]	; (800e8f4 <global_stdio_init.part.0+0x38>)
 800e8c4:	601a      	str	r2, [r3, #0]
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	2104      	movs	r1, #4
 800e8cc:	f7ff ff94 	bl	800e7f8 <std>
 800e8d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	2109      	movs	r1, #9
 800e8d8:	f7ff ff8e 	bl	800e7f8 <std>
 800e8dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e8e0:	2202      	movs	r2, #2
 800e8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8e6:	2112      	movs	r1, #18
 800e8e8:	f7ff bf86 	b.w	800e7f8 <std>
 800e8ec:	200009e0 	.word	0x200009e0
 800e8f0:	200008a8 	.word	0x200008a8
 800e8f4:	0800e865 	.word	0x0800e865

0800e8f8 <__sfp_lock_acquire>:
 800e8f8:	4801      	ldr	r0, [pc, #4]	; (800e900 <__sfp_lock_acquire+0x8>)
 800e8fa:	f000 b90e 	b.w	800eb1a <__retarget_lock_acquire_recursive>
 800e8fe:	bf00      	nop
 800e900:	200009e9 	.word	0x200009e9

0800e904 <__sfp_lock_release>:
 800e904:	4801      	ldr	r0, [pc, #4]	; (800e90c <__sfp_lock_release+0x8>)
 800e906:	f000 b909 	b.w	800eb1c <__retarget_lock_release_recursive>
 800e90a:	bf00      	nop
 800e90c:	200009e9 	.word	0x200009e9

0800e910 <__sinit>:
 800e910:	b510      	push	{r4, lr}
 800e912:	4604      	mov	r4, r0
 800e914:	f7ff fff0 	bl	800e8f8 <__sfp_lock_acquire>
 800e918:	6a23      	ldr	r3, [r4, #32]
 800e91a:	b11b      	cbz	r3, 800e924 <__sinit+0x14>
 800e91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e920:	f7ff bff0 	b.w	800e904 <__sfp_lock_release>
 800e924:	4b04      	ldr	r3, [pc, #16]	; (800e938 <__sinit+0x28>)
 800e926:	6223      	str	r3, [r4, #32]
 800e928:	4b04      	ldr	r3, [pc, #16]	; (800e93c <__sinit+0x2c>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d1f5      	bne.n	800e91c <__sinit+0xc>
 800e930:	f7ff ffc4 	bl	800e8bc <global_stdio_init.part.0>
 800e934:	e7f2      	b.n	800e91c <__sinit+0xc>
 800e936:	bf00      	nop
 800e938:	0800e87d 	.word	0x0800e87d
 800e93c:	200009e0 	.word	0x200009e0

0800e940 <_fwalk_sglue>:
 800e940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e944:	4607      	mov	r7, r0
 800e946:	4688      	mov	r8, r1
 800e948:	4614      	mov	r4, r2
 800e94a:	2600      	movs	r6, #0
 800e94c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e950:	f1b9 0901 	subs.w	r9, r9, #1
 800e954:	d505      	bpl.n	800e962 <_fwalk_sglue+0x22>
 800e956:	6824      	ldr	r4, [r4, #0]
 800e958:	2c00      	cmp	r4, #0
 800e95a:	d1f7      	bne.n	800e94c <_fwalk_sglue+0xc>
 800e95c:	4630      	mov	r0, r6
 800e95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e962:	89ab      	ldrh	r3, [r5, #12]
 800e964:	2b01      	cmp	r3, #1
 800e966:	d907      	bls.n	800e978 <_fwalk_sglue+0x38>
 800e968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e96c:	3301      	adds	r3, #1
 800e96e:	d003      	beq.n	800e978 <_fwalk_sglue+0x38>
 800e970:	4629      	mov	r1, r5
 800e972:	4638      	mov	r0, r7
 800e974:	47c0      	blx	r8
 800e976:	4306      	orrs	r6, r0
 800e978:	3568      	adds	r5, #104	; 0x68
 800e97a:	e7e9      	b.n	800e950 <_fwalk_sglue+0x10>

0800e97c <__sread>:
 800e97c:	b510      	push	{r4, lr}
 800e97e:	460c      	mov	r4, r1
 800e980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e984:	f000 f87a 	bl	800ea7c <_read_r>
 800e988:	2800      	cmp	r0, #0
 800e98a:	bfab      	itete	ge
 800e98c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e98e:	89a3      	ldrhlt	r3, [r4, #12]
 800e990:	181b      	addge	r3, r3, r0
 800e992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e996:	bfac      	ite	ge
 800e998:	6563      	strge	r3, [r4, #84]	; 0x54
 800e99a:	81a3      	strhlt	r3, [r4, #12]
 800e99c:	bd10      	pop	{r4, pc}

0800e99e <__swrite>:
 800e99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a2:	461f      	mov	r7, r3
 800e9a4:	898b      	ldrh	r3, [r1, #12]
 800e9a6:	05db      	lsls	r3, r3, #23
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	4616      	mov	r6, r2
 800e9ae:	d505      	bpl.n	800e9bc <__swrite+0x1e>
 800e9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9b4:	2302      	movs	r3, #2
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f000 f84e 	bl	800ea58 <_lseek_r>
 800e9bc:	89a3      	ldrh	r3, [r4, #12]
 800e9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9c6:	81a3      	strh	r3, [r4, #12]
 800e9c8:	4632      	mov	r2, r6
 800e9ca:	463b      	mov	r3, r7
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d2:	f000 b865 	b.w	800eaa0 <_write_r>

0800e9d6 <__sseek>:
 800e9d6:	b510      	push	{r4, lr}
 800e9d8:	460c      	mov	r4, r1
 800e9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9de:	f000 f83b 	bl	800ea58 <_lseek_r>
 800e9e2:	1c43      	adds	r3, r0, #1
 800e9e4:	89a3      	ldrh	r3, [r4, #12]
 800e9e6:	bf15      	itete	ne
 800e9e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e9ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e9ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e9f2:	81a3      	strheq	r3, [r4, #12]
 800e9f4:	bf18      	it	ne
 800e9f6:	81a3      	strhne	r3, [r4, #12]
 800e9f8:	bd10      	pop	{r4, pc}

0800e9fa <__sclose>:
 800e9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9fe:	f000 b81b 	b.w	800ea38 <_close_r>

0800ea02 <memset>:
 800ea02:	4402      	add	r2, r0
 800ea04:	4603      	mov	r3, r0
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d100      	bne.n	800ea0c <memset+0xa>
 800ea0a:	4770      	bx	lr
 800ea0c:	f803 1b01 	strb.w	r1, [r3], #1
 800ea10:	e7f9      	b.n	800ea06 <memset+0x4>

0800ea12 <strncmp>:
 800ea12:	b510      	push	{r4, lr}
 800ea14:	b16a      	cbz	r2, 800ea32 <strncmp+0x20>
 800ea16:	3901      	subs	r1, #1
 800ea18:	1884      	adds	r4, r0, r2
 800ea1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d103      	bne.n	800ea2e <strncmp+0x1c>
 800ea26:	42a0      	cmp	r0, r4
 800ea28:	d001      	beq.n	800ea2e <strncmp+0x1c>
 800ea2a:	2a00      	cmp	r2, #0
 800ea2c:	d1f5      	bne.n	800ea1a <strncmp+0x8>
 800ea2e:	1ad0      	subs	r0, r2, r3
 800ea30:	bd10      	pop	{r4, pc}
 800ea32:	4610      	mov	r0, r2
 800ea34:	e7fc      	b.n	800ea30 <strncmp+0x1e>
	...

0800ea38 <_close_r>:
 800ea38:	b538      	push	{r3, r4, r5, lr}
 800ea3a:	4d06      	ldr	r5, [pc, #24]	; (800ea54 <_close_r+0x1c>)
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	4604      	mov	r4, r0
 800ea40:	4608      	mov	r0, r1
 800ea42:	602b      	str	r3, [r5, #0]
 800ea44:	f7f3 fee1 	bl	800280a <_close>
 800ea48:	1c43      	adds	r3, r0, #1
 800ea4a:	d102      	bne.n	800ea52 <_close_r+0x1a>
 800ea4c:	682b      	ldr	r3, [r5, #0]
 800ea4e:	b103      	cbz	r3, 800ea52 <_close_r+0x1a>
 800ea50:	6023      	str	r3, [r4, #0]
 800ea52:	bd38      	pop	{r3, r4, r5, pc}
 800ea54:	200009e4 	.word	0x200009e4

0800ea58 <_lseek_r>:
 800ea58:	b538      	push	{r3, r4, r5, lr}
 800ea5a:	4d07      	ldr	r5, [pc, #28]	; (800ea78 <_lseek_r+0x20>)
 800ea5c:	4604      	mov	r4, r0
 800ea5e:	4608      	mov	r0, r1
 800ea60:	4611      	mov	r1, r2
 800ea62:	2200      	movs	r2, #0
 800ea64:	602a      	str	r2, [r5, #0]
 800ea66:	461a      	mov	r2, r3
 800ea68:	f7f3 fef6 	bl	8002858 <_lseek>
 800ea6c:	1c43      	adds	r3, r0, #1
 800ea6e:	d102      	bne.n	800ea76 <_lseek_r+0x1e>
 800ea70:	682b      	ldr	r3, [r5, #0]
 800ea72:	b103      	cbz	r3, 800ea76 <_lseek_r+0x1e>
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	bd38      	pop	{r3, r4, r5, pc}
 800ea78:	200009e4 	.word	0x200009e4

0800ea7c <_read_r>:
 800ea7c:	b538      	push	{r3, r4, r5, lr}
 800ea7e:	4d07      	ldr	r5, [pc, #28]	; (800ea9c <_read_r+0x20>)
 800ea80:	4604      	mov	r4, r0
 800ea82:	4608      	mov	r0, r1
 800ea84:	4611      	mov	r1, r2
 800ea86:	2200      	movs	r2, #0
 800ea88:	602a      	str	r2, [r5, #0]
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	f7f3 fe84 	bl	8002798 <_read>
 800ea90:	1c43      	adds	r3, r0, #1
 800ea92:	d102      	bne.n	800ea9a <_read_r+0x1e>
 800ea94:	682b      	ldr	r3, [r5, #0]
 800ea96:	b103      	cbz	r3, 800ea9a <_read_r+0x1e>
 800ea98:	6023      	str	r3, [r4, #0]
 800ea9a:	bd38      	pop	{r3, r4, r5, pc}
 800ea9c:	200009e4 	.word	0x200009e4

0800eaa0 <_write_r>:
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	4d07      	ldr	r5, [pc, #28]	; (800eac0 <_write_r+0x20>)
 800eaa4:	4604      	mov	r4, r0
 800eaa6:	4608      	mov	r0, r1
 800eaa8:	4611      	mov	r1, r2
 800eaaa:	2200      	movs	r2, #0
 800eaac:	602a      	str	r2, [r5, #0]
 800eaae:	461a      	mov	r2, r3
 800eab0:	f7f3 fe8f 	bl	80027d2 <_write>
 800eab4:	1c43      	adds	r3, r0, #1
 800eab6:	d102      	bne.n	800eabe <_write_r+0x1e>
 800eab8:	682b      	ldr	r3, [r5, #0]
 800eaba:	b103      	cbz	r3, 800eabe <_write_r+0x1e>
 800eabc:	6023      	str	r3, [r4, #0]
 800eabe:	bd38      	pop	{r3, r4, r5, pc}
 800eac0:	200009e4 	.word	0x200009e4

0800eac4 <__errno>:
 800eac4:	4b01      	ldr	r3, [pc, #4]	; (800eacc <__errno+0x8>)
 800eac6:	6818      	ldr	r0, [r3, #0]
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	200001e4 	.word	0x200001e4

0800ead0 <__libc_init_array>:
 800ead0:	b570      	push	{r4, r5, r6, lr}
 800ead2:	4d0d      	ldr	r5, [pc, #52]	; (800eb08 <__libc_init_array+0x38>)
 800ead4:	4c0d      	ldr	r4, [pc, #52]	; (800eb0c <__libc_init_array+0x3c>)
 800ead6:	1b64      	subs	r4, r4, r5
 800ead8:	10a4      	asrs	r4, r4, #2
 800eada:	2600      	movs	r6, #0
 800eadc:	42a6      	cmp	r6, r4
 800eade:	d109      	bne.n	800eaf4 <__libc_init_array+0x24>
 800eae0:	4d0b      	ldr	r5, [pc, #44]	; (800eb10 <__libc_init_array+0x40>)
 800eae2:	4c0c      	ldr	r4, [pc, #48]	; (800eb14 <__libc_init_array+0x44>)
 800eae4:	f001 fe8a 	bl	80107fc <_init>
 800eae8:	1b64      	subs	r4, r4, r5
 800eaea:	10a4      	asrs	r4, r4, #2
 800eaec:	2600      	movs	r6, #0
 800eaee:	42a6      	cmp	r6, r4
 800eaf0:	d105      	bne.n	800eafe <__libc_init_array+0x2e>
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}
 800eaf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eaf8:	4798      	blx	r3
 800eafa:	3601      	adds	r6, #1
 800eafc:	e7ee      	b.n	800eadc <__libc_init_array+0xc>
 800eafe:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb02:	4798      	blx	r3
 800eb04:	3601      	adds	r6, #1
 800eb06:	e7f2      	b.n	800eaee <__libc_init_array+0x1e>
 800eb08:	080112cc 	.word	0x080112cc
 800eb0c:	080112cc 	.word	0x080112cc
 800eb10:	080112cc 	.word	0x080112cc
 800eb14:	080112d4 	.word	0x080112d4

0800eb18 <__retarget_lock_init_recursive>:
 800eb18:	4770      	bx	lr

0800eb1a <__retarget_lock_acquire_recursive>:
 800eb1a:	4770      	bx	lr

0800eb1c <__retarget_lock_release_recursive>:
 800eb1c:	4770      	bx	lr

0800eb1e <memcpy>:
 800eb1e:	440a      	add	r2, r1
 800eb20:	4291      	cmp	r1, r2
 800eb22:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb26:	d100      	bne.n	800eb2a <memcpy+0xc>
 800eb28:	4770      	bx	lr
 800eb2a:	b510      	push	{r4, lr}
 800eb2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb34:	4291      	cmp	r1, r2
 800eb36:	d1f9      	bne.n	800eb2c <memcpy+0xe>
 800eb38:	bd10      	pop	{r4, pc}
	...

0800eb3c <_free_r>:
 800eb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb3e:	2900      	cmp	r1, #0
 800eb40:	d044      	beq.n	800ebcc <_free_r+0x90>
 800eb42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb46:	9001      	str	r0, [sp, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f1a1 0404 	sub.w	r4, r1, #4
 800eb4e:	bfb8      	it	lt
 800eb50:	18e4      	addlt	r4, r4, r3
 800eb52:	f000 fc49 	bl	800f3e8 <__malloc_lock>
 800eb56:	4a1e      	ldr	r2, [pc, #120]	; (800ebd0 <_free_r+0x94>)
 800eb58:	9801      	ldr	r0, [sp, #4]
 800eb5a:	6813      	ldr	r3, [r2, #0]
 800eb5c:	b933      	cbnz	r3, 800eb6c <_free_r+0x30>
 800eb5e:	6063      	str	r3, [r4, #4]
 800eb60:	6014      	str	r4, [r2, #0]
 800eb62:	b003      	add	sp, #12
 800eb64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb68:	f000 bc44 	b.w	800f3f4 <__malloc_unlock>
 800eb6c:	42a3      	cmp	r3, r4
 800eb6e:	d908      	bls.n	800eb82 <_free_r+0x46>
 800eb70:	6825      	ldr	r5, [r4, #0]
 800eb72:	1961      	adds	r1, r4, r5
 800eb74:	428b      	cmp	r3, r1
 800eb76:	bf01      	itttt	eq
 800eb78:	6819      	ldreq	r1, [r3, #0]
 800eb7a:	685b      	ldreq	r3, [r3, #4]
 800eb7c:	1949      	addeq	r1, r1, r5
 800eb7e:	6021      	streq	r1, [r4, #0]
 800eb80:	e7ed      	b.n	800eb5e <_free_r+0x22>
 800eb82:	461a      	mov	r2, r3
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	b10b      	cbz	r3, 800eb8c <_free_r+0x50>
 800eb88:	42a3      	cmp	r3, r4
 800eb8a:	d9fa      	bls.n	800eb82 <_free_r+0x46>
 800eb8c:	6811      	ldr	r1, [r2, #0]
 800eb8e:	1855      	adds	r5, r2, r1
 800eb90:	42a5      	cmp	r5, r4
 800eb92:	d10b      	bne.n	800ebac <_free_r+0x70>
 800eb94:	6824      	ldr	r4, [r4, #0]
 800eb96:	4421      	add	r1, r4
 800eb98:	1854      	adds	r4, r2, r1
 800eb9a:	42a3      	cmp	r3, r4
 800eb9c:	6011      	str	r1, [r2, #0]
 800eb9e:	d1e0      	bne.n	800eb62 <_free_r+0x26>
 800eba0:	681c      	ldr	r4, [r3, #0]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	6053      	str	r3, [r2, #4]
 800eba6:	440c      	add	r4, r1
 800eba8:	6014      	str	r4, [r2, #0]
 800ebaa:	e7da      	b.n	800eb62 <_free_r+0x26>
 800ebac:	d902      	bls.n	800ebb4 <_free_r+0x78>
 800ebae:	230c      	movs	r3, #12
 800ebb0:	6003      	str	r3, [r0, #0]
 800ebb2:	e7d6      	b.n	800eb62 <_free_r+0x26>
 800ebb4:	6825      	ldr	r5, [r4, #0]
 800ebb6:	1961      	adds	r1, r4, r5
 800ebb8:	428b      	cmp	r3, r1
 800ebba:	bf04      	itt	eq
 800ebbc:	6819      	ldreq	r1, [r3, #0]
 800ebbe:	685b      	ldreq	r3, [r3, #4]
 800ebc0:	6063      	str	r3, [r4, #4]
 800ebc2:	bf04      	itt	eq
 800ebc4:	1949      	addeq	r1, r1, r5
 800ebc6:	6021      	streq	r1, [r4, #0]
 800ebc8:	6054      	str	r4, [r2, #4]
 800ebca:	e7ca      	b.n	800eb62 <_free_r+0x26>
 800ebcc:	b003      	add	sp, #12
 800ebce:	bd30      	pop	{r4, r5, pc}
 800ebd0:	200009ec 	.word	0x200009ec

0800ebd4 <rshift>:
 800ebd4:	6903      	ldr	r3, [r0, #16]
 800ebd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ebda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebde:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ebe2:	f100 0414 	add.w	r4, r0, #20
 800ebe6:	dd45      	ble.n	800ec74 <rshift+0xa0>
 800ebe8:	f011 011f 	ands.w	r1, r1, #31
 800ebec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ebf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ebf4:	d10c      	bne.n	800ec10 <rshift+0x3c>
 800ebf6:	f100 0710 	add.w	r7, r0, #16
 800ebfa:	4629      	mov	r1, r5
 800ebfc:	42b1      	cmp	r1, r6
 800ebfe:	d334      	bcc.n	800ec6a <rshift+0x96>
 800ec00:	1a9b      	subs	r3, r3, r2
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	1eea      	subs	r2, r5, #3
 800ec06:	4296      	cmp	r6, r2
 800ec08:	bf38      	it	cc
 800ec0a:	2300      	movcc	r3, #0
 800ec0c:	4423      	add	r3, r4
 800ec0e:	e015      	b.n	800ec3c <rshift+0x68>
 800ec10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ec14:	f1c1 0820 	rsb	r8, r1, #32
 800ec18:	40cf      	lsrs	r7, r1
 800ec1a:	f105 0e04 	add.w	lr, r5, #4
 800ec1e:	46a1      	mov	r9, r4
 800ec20:	4576      	cmp	r6, lr
 800ec22:	46f4      	mov	ip, lr
 800ec24:	d815      	bhi.n	800ec52 <rshift+0x7e>
 800ec26:	1a9a      	subs	r2, r3, r2
 800ec28:	0092      	lsls	r2, r2, #2
 800ec2a:	3a04      	subs	r2, #4
 800ec2c:	3501      	adds	r5, #1
 800ec2e:	42ae      	cmp	r6, r5
 800ec30:	bf38      	it	cc
 800ec32:	2200      	movcc	r2, #0
 800ec34:	18a3      	adds	r3, r4, r2
 800ec36:	50a7      	str	r7, [r4, r2]
 800ec38:	b107      	cbz	r7, 800ec3c <rshift+0x68>
 800ec3a:	3304      	adds	r3, #4
 800ec3c:	1b1a      	subs	r2, r3, r4
 800ec3e:	42a3      	cmp	r3, r4
 800ec40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ec44:	bf08      	it	eq
 800ec46:	2300      	moveq	r3, #0
 800ec48:	6102      	str	r2, [r0, #16]
 800ec4a:	bf08      	it	eq
 800ec4c:	6143      	streq	r3, [r0, #20]
 800ec4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec52:	f8dc c000 	ldr.w	ip, [ip]
 800ec56:	fa0c fc08 	lsl.w	ip, ip, r8
 800ec5a:	ea4c 0707 	orr.w	r7, ip, r7
 800ec5e:	f849 7b04 	str.w	r7, [r9], #4
 800ec62:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec66:	40cf      	lsrs	r7, r1
 800ec68:	e7da      	b.n	800ec20 <rshift+0x4c>
 800ec6a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ec6e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ec72:	e7c3      	b.n	800ebfc <rshift+0x28>
 800ec74:	4623      	mov	r3, r4
 800ec76:	e7e1      	b.n	800ec3c <rshift+0x68>

0800ec78 <__hexdig_fun>:
 800ec78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ec7c:	2b09      	cmp	r3, #9
 800ec7e:	d802      	bhi.n	800ec86 <__hexdig_fun+0xe>
 800ec80:	3820      	subs	r0, #32
 800ec82:	b2c0      	uxtb	r0, r0
 800ec84:	4770      	bx	lr
 800ec86:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ec8a:	2b05      	cmp	r3, #5
 800ec8c:	d801      	bhi.n	800ec92 <__hexdig_fun+0x1a>
 800ec8e:	3847      	subs	r0, #71	; 0x47
 800ec90:	e7f7      	b.n	800ec82 <__hexdig_fun+0xa>
 800ec92:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ec96:	2b05      	cmp	r3, #5
 800ec98:	d801      	bhi.n	800ec9e <__hexdig_fun+0x26>
 800ec9a:	3827      	subs	r0, #39	; 0x27
 800ec9c:	e7f1      	b.n	800ec82 <__hexdig_fun+0xa>
 800ec9e:	2000      	movs	r0, #0
 800eca0:	4770      	bx	lr
	...

0800eca4 <__gethex>:
 800eca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca8:	4617      	mov	r7, r2
 800ecaa:	680a      	ldr	r2, [r1, #0]
 800ecac:	b085      	sub	sp, #20
 800ecae:	f102 0b02 	add.w	fp, r2, #2
 800ecb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ecb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ecba:	4681      	mov	r9, r0
 800ecbc:	468a      	mov	sl, r1
 800ecbe:	9302      	str	r3, [sp, #8]
 800ecc0:	32fe      	adds	r2, #254	; 0xfe
 800ecc2:	eb02 030b 	add.w	r3, r2, fp
 800ecc6:	46d8      	mov	r8, fp
 800ecc8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800eccc:	9301      	str	r3, [sp, #4]
 800ecce:	2830      	cmp	r0, #48	; 0x30
 800ecd0:	d0f7      	beq.n	800ecc2 <__gethex+0x1e>
 800ecd2:	f7ff ffd1 	bl	800ec78 <__hexdig_fun>
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d138      	bne.n	800ed4e <__gethex+0xaa>
 800ecdc:	49a7      	ldr	r1, [pc, #668]	; (800ef7c <__gethex+0x2d8>)
 800ecde:	2201      	movs	r2, #1
 800ece0:	4640      	mov	r0, r8
 800ece2:	f7ff fe96 	bl	800ea12 <strncmp>
 800ece6:	4606      	mov	r6, r0
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d169      	bne.n	800edc0 <__gethex+0x11c>
 800ecec:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ecf0:	465d      	mov	r5, fp
 800ecf2:	f7ff ffc1 	bl	800ec78 <__hexdig_fun>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	d064      	beq.n	800edc4 <__gethex+0x120>
 800ecfa:	465a      	mov	r2, fp
 800ecfc:	7810      	ldrb	r0, [r2, #0]
 800ecfe:	2830      	cmp	r0, #48	; 0x30
 800ed00:	4690      	mov	r8, r2
 800ed02:	f102 0201 	add.w	r2, r2, #1
 800ed06:	d0f9      	beq.n	800ecfc <__gethex+0x58>
 800ed08:	f7ff ffb6 	bl	800ec78 <__hexdig_fun>
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	fab0 f480 	clz	r4, r0
 800ed12:	0964      	lsrs	r4, r4, #5
 800ed14:	465e      	mov	r6, fp
 800ed16:	9301      	str	r3, [sp, #4]
 800ed18:	4642      	mov	r2, r8
 800ed1a:	4615      	mov	r5, r2
 800ed1c:	3201      	adds	r2, #1
 800ed1e:	7828      	ldrb	r0, [r5, #0]
 800ed20:	f7ff ffaa 	bl	800ec78 <__hexdig_fun>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d1f8      	bne.n	800ed1a <__gethex+0x76>
 800ed28:	4994      	ldr	r1, [pc, #592]	; (800ef7c <__gethex+0x2d8>)
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	4628      	mov	r0, r5
 800ed2e:	f7ff fe70 	bl	800ea12 <strncmp>
 800ed32:	b978      	cbnz	r0, 800ed54 <__gethex+0xb0>
 800ed34:	b946      	cbnz	r6, 800ed48 <__gethex+0xa4>
 800ed36:	1c6e      	adds	r6, r5, #1
 800ed38:	4632      	mov	r2, r6
 800ed3a:	4615      	mov	r5, r2
 800ed3c:	3201      	adds	r2, #1
 800ed3e:	7828      	ldrb	r0, [r5, #0]
 800ed40:	f7ff ff9a 	bl	800ec78 <__hexdig_fun>
 800ed44:	2800      	cmp	r0, #0
 800ed46:	d1f8      	bne.n	800ed3a <__gethex+0x96>
 800ed48:	1b73      	subs	r3, r6, r5
 800ed4a:	009e      	lsls	r6, r3, #2
 800ed4c:	e004      	b.n	800ed58 <__gethex+0xb4>
 800ed4e:	2400      	movs	r4, #0
 800ed50:	4626      	mov	r6, r4
 800ed52:	e7e1      	b.n	800ed18 <__gethex+0x74>
 800ed54:	2e00      	cmp	r6, #0
 800ed56:	d1f7      	bne.n	800ed48 <__gethex+0xa4>
 800ed58:	782b      	ldrb	r3, [r5, #0]
 800ed5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ed5e:	2b50      	cmp	r3, #80	; 0x50
 800ed60:	d13d      	bne.n	800edde <__gethex+0x13a>
 800ed62:	786b      	ldrb	r3, [r5, #1]
 800ed64:	2b2b      	cmp	r3, #43	; 0x2b
 800ed66:	d02f      	beq.n	800edc8 <__gethex+0x124>
 800ed68:	2b2d      	cmp	r3, #45	; 0x2d
 800ed6a:	d031      	beq.n	800edd0 <__gethex+0x12c>
 800ed6c:	1c69      	adds	r1, r5, #1
 800ed6e:	f04f 0b00 	mov.w	fp, #0
 800ed72:	7808      	ldrb	r0, [r1, #0]
 800ed74:	f7ff ff80 	bl	800ec78 <__hexdig_fun>
 800ed78:	1e42      	subs	r2, r0, #1
 800ed7a:	b2d2      	uxtb	r2, r2
 800ed7c:	2a18      	cmp	r2, #24
 800ed7e:	d82e      	bhi.n	800edde <__gethex+0x13a>
 800ed80:	f1a0 0210 	sub.w	r2, r0, #16
 800ed84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ed88:	f7ff ff76 	bl	800ec78 <__hexdig_fun>
 800ed8c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ed90:	fa5f fc8c 	uxtb.w	ip, ip
 800ed94:	f1bc 0f18 	cmp.w	ip, #24
 800ed98:	d91d      	bls.n	800edd6 <__gethex+0x132>
 800ed9a:	f1bb 0f00 	cmp.w	fp, #0
 800ed9e:	d000      	beq.n	800eda2 <__gethex+0xfe>
 800eda0:	4252      	negs	r2, r2
 800eda2:	4416      	add	r6, r2
 800eda4:	f8ca 1000 	str.w	r1, [sl]
 800eda8:	b1dc      	cbz	r4, 800ede2 <__gethex+0x13e>
 800edaa:	9b01      	ldr	r3, [sp, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	bf14      	ite	ne
 800edb0:	f04f 0800 	movne.w	r8, #0
 800edb4:	f04f 0806 	moveq.w	r8, #6
 800edb8:	4640      	mov	r0, r8
 800edba:	b005      	add	sp, #20
 800edbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edc0:	4645      	mov	r5, r8
 800edc2:	4626      	mov	r6, r4
 800edc4:	2401      	movs	r4, #1
 800edc6:	e7c7      	b.n	800ed58 <__gethex+0xb4>
 800edc8:	f04f 0b00 	mov.w	fp, #0
 800edcc:	1ca9      	adds	r1, r5, #2
 800edce:	e7d0      	b.n	800ed72 <__gethex+0xce>
 800edd0:	f04f 0b01 	mov.w	fp, #1
 800edd4:	e7fa      	b.n	800edcc <__gethex+0x128>
 800edd6:	230a      	movs	r3, #10
 800edd8:	fb03 0002 	mla	r0, r3, r2, r0
 800eddc:	e7d0      	b.n	800ed80 <__gethex+0xdc>
 800edde:	4629      	mov	r1, r5
 800ede0:	e7e0      	b.n	800eda4 <__gethex+0x100>
 800ede2:	eba5 0308 	sub.w	r3, r5, r8
 800ede6:	3b01      	subs	r3, #1
 800ede8:	4621      	mov	r1, r4
 800edea:	2b07      	cmp	r3, #7
 800edec:	dc0a      	bgt.n	800ee04 <__gethex+0x160>
 800edee:	4648      	mov	r0, r9
 800edf0:	f000 fb06 	bl	800f400 <_Balloc>
 800edf4:	4604      	mov	r4, r0
 800edf6:	b940      	cbnz	r0, 800ee0a <__gethex+0x166>
 800edf8:	4b61      	ldr	r3, [pc, #388]	; (800ef80 <__gethex+0x2dc>)
 800edfa:	4602      	mov	r2, r0
 800edfc:	21e4      	movs	r1, #228	; 0xe4
 800edfe:	4861      	ldr	r0, [pc, #388]	; (800ef84 <__gethex+0x2e0>)
 800ee00:	f001 f876 	bl	800fef0 <__assert_func>
 800ee04:	3101      	adds	r1, #1
 800ee06:	105b      	asrs	r3, r3, #1
 800ee08:	e7ef      	b.n	800edea <__gethex+0x146>
 800ee0a:	f100 0a14 	add.w	sl, r0, #20
 800ee0e:	2300      	movs	r3, #0
 800ee10:	495a      	ldr	r1, [pc, #360]	; (800ef7c <__gethex+0x2d8>)
 800ee12:	f8cd a004 	str.w	sl, [sp, #4]
 800ee16:	469b      	mov	fp, r3
 800ee18:	45a8      	cmp	r8, r5
 800ee1a:	d342      	bcc.n	800eea2 <__gethex+0x1fe>
 800ee1c:	9801      	ldr	r0, [sp, #4]
 800ee1e:	f840 bb04 	str.w	fp, [r0], #4
 800ee22:	eba0 000a 	sub.w	r0, r0, sl
 800ee26:	1080      	asrs	r0, r0, #2
 800ee28:	6120      	str	r0, [r4, #16]
 800ee2a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ee2e:	4658      	mov	r0, fp
 800ee30:	f000 fbd8 	bl	800f5e4 <__hi0bits>
 800ee34:	683d      	ldr	r5, [r7, #0]
 800ee36:	eba8 0000 	sub.w	r0, r8, r0
 800ee3a:	42a8      	cmp	r0, r5
 800ee3c:	dd59      	ble.n	800eef2 <__gethex+0x24e>
 800ee3e:	eba0 0805 	sub.w	r8, r0, r5
 800ee42:	4641      	mov	r1, r8
 800ee44:	4620      	mov	r0, r4
 800ee46:	f000 ff67 	bl	800fd18 <__any_on>
 800ee4a:	4683      	mov	fp, r0
 800ee4c:	b1b8      	cbz	r0, 800ee7e <__gethex+0x1da>
 800ee4e:	f108 33ff 	add.w	r3, r8, #4294967295
 800ee52:	1159      	asrs	r1, r3, #5
 800ee54:	f003 021f 	and.w	r2, r3, #31
 800ee58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ee5c:	f04f 0b01 	mov.w	fp, #1
 800ee60:	fa0b f202 	lsl.w	r2, fp, r2
 800ee64:	420a      	tst	r2, r1
 800ee66:	d00a      	beq.n	800ee7e <__gethex+0x1da>
 800ee68:	455b      	cmp	r3, fp
 800ee6a:	dd06      	ble.n	800ee7a <__gethex+0x1d6>
 800ee6c:	f1a8 0102 	sub.w	r1, r8, #2
 800ee70:	4620      	mov	r0, r4
 800ee72:	f000 ff51 	bl	800fd18 <__any_on>
 800ee76:	2800      	cmp	r0, #0
 800ee78:	d138      	bne.n	800eeec <__gethex+0x248>
 800ee7a:	f04f 0b02 	mov.w	fp, #2
 800ee7e:	4641      	mov	r1, r8
 800ee80:	4620      	mov	r0, r4
 800ee82:	f7ff fea7 	bl	800ebd4 <rshift>
 800ee86:	4446      	add	r6, r8
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	42b3      	cmp	r3, r6
 800ee8c:	da41      	bge.n	800ef12 <__gethex+0x26e>
 800ee8e:	4621      	mov	r1, r4
 800ee90:	4648      	mov	r0, r9
 800ee92:	f000 faf5 	bl	800f480 <_Bfree>
 800ee96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee98:	2300      	movs	r3, #0
 800ee9a:	6013      	str	r3, [r2, #0]
 800ee9c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800eea0:	e78a      	b.n	800edb8 <__gethex+0x114>
 800eea2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800eea6:	2a2e      	cmp	r2, #46	; 0x2e
 800eea8:	d014      	beq.n	800eed4 <__gethex+0x230>
 800eeaa:	2b20      	cmp	r3, #32
 800eeac:	d106      	bne.n	800eebc <__gethex+0x218>
 800eeae:	9b01      	ldr	r3, [sp, #4]
 800eeb0:	f843 bb04 	str.w	fp, [r3], #4
 800eeb4:	f04f 0b00 	mov.w	fp, #0
 800eeb8:	9301      	str	r3, [sp, #4]
 800eeba:	465b      	mov	r3, fp
 800eebc:	7828      	ldrb	r0, [r5, #0]
 800eebe:	9303      	str	r3, [sp, #12]
 800eec0:	f7ff feda 	bl	800ec78 <__hexdig_fun>
 800eec4:	9b03      	ldr	r3, [sp, #12]
 800eec6:	f000 000f 	and.w	r0, r0, #15
 800eeca:	4098      	lsls	r0, r3
 800eecc:	ea4b 0b00 	orr.w	fp, fp, r0
 800eed0:	3304      	adds	r3, #4
 800eed2:	e7a1      	b.n	800ee18 <__gethex+0x174>
 800eed4:	45a8      	cmp	r8, r5
 800eed6:	d8e8      	bhi.n	800eeaa <__gethex+0x206>
 800eed8:	2201      	movs	r2, #1
 800eeda:	4628      	mov	r0, r5
 800eedc:	9303      	str	r3, [sp, #12]
 800eede:	f7ff fd98 	bl	800ea12 <strncmp>
 800eee2:	4926      	ldr	r1, [pc, #152]	; (800ef7c <__gethex+0x2d8>)
 800eee4:	9b03      	ldr	r3, [sp, #12]
 800eee6:	2800      	cmp	r0, #0
 800eee8:	d1df      	bne.n	800eeaa <__gethex+0x206>
 800eeea:	e795      	b.n	800ee18 <__gethex+0x174>
 800eeec:	f04f 0b03 	mov.w	fp, #3
 800eef0:	e7c5      	b.n	800ee7e <__gethex+0x1da>
 800eef2:	da0b      	bge.n	800ef0c <__gethex+0x268>
 800eef4:	eba5 0800 	sub.w	r8, r5, r0
 800eef8:	4621      	mov	r1, r4
 800eefa:	4642      	mov	r2, r8
 800eefc:	4648      	mov	r0, r9
 800eefe:	f000 fcd9 	bl	800f8b4 <__lshift>
 800ef02:	eba6 0608 	sub.w	r6, r6, r8
 800ef06:	4604      	mov	r4, r0
 800ef08:	f100 0a14 	add.w	sl, r0, #20
 800ef0c:	f04f 0b00 	mov.w	fp, #0
 800ef10:	e7ba      	b.n	800ee88 <__gethex+0x1e4>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	42b3      	cmp	r3, r6
 800ef16:	dd73      	ble.n	800f000 <__gethex+0x35c>
 800ef18:	1b9e      	subs	r6, r3, r6
 800ef1a:	42b5      	cmp	r5, r6
 800ef1c:	dc34      	bgt.n	800ef88 <__gethex+0x2e4>
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	d023      	beq.n	800ef6c <__gethex+0x2c8>
 800ef24:	2b03      	cmp	r3, #3
 800ef26:	d025      	beq.n	800ef74 <__gethex+0x2d0>
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d115      	bne.n	800ef58 <__gethex+0x2b4>
 800ef2c:	42b5      	cmp	r5, r6
 800ef2e:	d113      	bne.n	800ef58 <__gethex+0x2b4>
 800ef30:	2d01      	cmp	r5, #1
 800ef32:	d10b      	bne.n	800ef4c <__gethex+0x2a8>
 800ef34:	9a02      	ldr	r2, [sp, #8]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6013      	str	r3, [r2, #0]
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	6123      	str	r3, [r4, #16]
 800ef3e:	f8ca 3000 	str.w	r3, [sl]
 800ef42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef44:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ef48:	601c      	str	r4, [r3, #0]
 800ef4a:	e735      	b.n	800edb8 <__gethex+0x114>
 800ef4c:	1e69      	subs	r1, r5, #1
 800ef4e:	4620      	mov	r0, r4
 800ef50:	f000 fee2 	bl	800fd18 <__any_on>
 800ef54:	2800      	cmp	r0, #0
 800ef56:	d1ed      	bne.n	800ef34 <__gethex+0x290>
 800ef58:	4621      	mov	r1, r4
 800ef5a:	4648      	mov	r0, r9
 800ef5c:	f000 fa90 	bl	800f480 <_Bfree>
 800ef60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef62:	2300      	movs	r3, #0
 800ef64:	6013      	str	r3, [r2, #0]
 800ef66:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ef6a:	e725      	b.n	800edb8 <__gethex+0x114>
 800ef6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d1f2      	bne.n	800ef58 <__gethex+0x2b4>
 800ef72:	e7df      	b.n	800ef34 <__gethex+0x290>
 800ef74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d1dc      	bne.n	800ef34 <__gethex+0x290>
 800ef7a:	e7ed      	b.n	800ef58 <__gethex+0x2b4>
 800ef7c:	08010f08 	.word	0x08010f08
 800ef80:	08010f70 	.word	0x08010f70
 800ef84:	08010f81 	.word	0x08010f81
 800ef88:	f106 38ff 	add.w	r8, r6, #4294967295
 800ef8c:	f1bb 0f00 	cmp.w	fp, #0
 800ef90:	d133      	bne.n	800effa <__gethex+0x356>
 800ef92:	f1b8 0f00 	cmp.w	r8, #0
 800ef96:	d004      	beq.n	800efa2 <__gethex+0x2fe>
 800ef98:	4641      	mov	r1, r8
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f000 febc 	bl	800fd18 <__any_on>
 800efa0:	4683      	mov	fp, r0
 800efa2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800efa6:	2301      	movs	r3, #1
 800efa8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800efac:	f008 081f 	and.w	r8, r8, #31
 800efb0:	fa03 f308 	lsl.w	r3, r3, r8
 800efb4:	4213      	tst	r3, r2
 800efb6:	4631      	mov	r1, r6
 800efb8:	4620      	mov	r0, r4
 800efba:	bf18      	it	ne
 800efbc:	f04b 0b02 	orrne.w	fp, fp, #2
 800efc0:	1bad      	subs	r5, r5, r6
 800efc2:	f7ff fe07 	bl	800ebd4 <rshift>
 800efc6:	687e      	ldr	r6, [r7, #4]
 800efc8:	f04f 0802 	mov.w	r8, #2
 800efcc:	f1bb 0f00 	cmp.w	fp, #0
 800efd0:	d04a      	beq.n	800f068 <__gethex+0x3c4>
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2b02      	cmp	r3, #2
 800efd6:	d016      	beq.n	800f006 <__gethex+0x362>
 800efd8:	2b03      	cmp	r3, #3
 800efda:	d018      	beq.n	800f00e <__gethex+0x36a>
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d109      	bne.n	800eff4 <__gethex+0x350>
 800efe0:	f01b 0f02 	tst.w	fp, #2
 800efe4:	d006      	beq.n	800eff4 <__gethex+0x350>
 800efe6:	f8da 3000 	ldr.w	r3, [sl]
 800efea:	ea4b 0b03 	orr.w	fp, fp, r3
 800efee:	f01b 0f01 	tst.w	fp, #1
 800eff2:	d10f      	bne.n	800f014 <__gethex+0x370>
 800eff4:	f048 0810 	orr.w	r8, r8, #16
 800eff8:	e036      	b.n	800f068 <__gethex+0x3c4>
 800effa:	f04f 0b01 	mov.w	fp, #1
 800effe:	e7d0      	b.n	800efa2 <__gethex+0x2fe>
 800f000:	f04f 0801 	mov.w	r8, #1
 800f004:	e7e2      	b.n	800efcc <__gethex+0x328>
 800f006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f008:	f1c3 0301 	rsb	r3, r3, #1
 800f00c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f00e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f010:	2b00      	cmp	r3, #0
 800f012:	d0ef      	beq.n	800eff4 <__gethex+0x350>
 800f014:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f018:	f104 0214 	add.w	r2, r4, #20
 800f01c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f020:	9301      	str	r3, [sp, #4]
 800f022:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f026:	2300      	movs	r3, #0
 800f028:	4694      	mov	ip, r2
 800f02a:	f852 1b04 	ldr.w	r1, [r2], #4
 800f02e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f032:	d01e      	beq.n	800f072 <__gethex+0x3ce>
 800f034:	3101      	adds	r1, #1
 800f036:	f8cc 1000 	str.w	r1, [ip]
 800f03a:	f1b8 0f02 	cmp.w	r8, #2
 800f03e:	f104 0214 	add.w	r2, r4, #20
 800f042:	d13d      	bne.n	800f0c0 <__gethex+0x41c>
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	3b01      	subs	r3, #1
 800f048:	42ab      	cmp	r3, r5
 800f04a:	d10b      	bne.n	800f064 <__gethex+0x3c0>
 800f04c:	1169      	asrs	r1, r5, #5
 800f04e:	2301      	movs	r3, #1
 800f050:	f005 051f 	and.w	r5, r5, #31
 800f054:	fa03 f505 	lsl.w	r5, r3, r5
 800f058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f05c:	421d      	tst	r5, r3
 800f05e:	bf18      	it	ne
 800f060:	f04f 0801 	movne.w	r8, #1
 800f064:	f048 0820 	orr.w	r8, r8, #32
 800f068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f06a:	601c      	str	r4, [r3, #0]
 800f06c:	9b02      	ldr	r3, [sp, #8]
 800f06e:	601e      	str	r6, [r3, #0]
 800f070:	e6a2      	b.n	800edb8 <__gethex+0x114>
 800f072:	4290      	cmp	r0, r2
 800f074:	f842 3c04 	str.w	r3, [r2, #-4]
 800f078:	d8d6      	bhi.n	800f028 <__gethex+0x384>
 800f07a:	68a2      	ldr	r2, [r4, #8]
 800f07c:	4593      	cmp	fp, r2
 800f07e:	db17      	blt.n	800f0b0 <__gethex+0x40c>
 800f080:	6861      	ldr	r1, [r4, #4]
 800f082:	4648      	mov	r0, r9
 800f084:	3101      	adds	r1, #1
 800f086:	f000 f9bb 	bl	800f400 <_Balloc>
 800f08a:	4682      	mov	sl, r0
 800f08c:	b918      	cbnz	r0, 800f096 <__gethex+0x3f2>
 800f08e:	4b1b      	ldr	r3, [pc, #108]	; (800f0fc <__gethex+0x458>)
 800f090:	4602      	mov	r2, r0
 800f092:	2184      	movs	r1, #132	; 0x84
 800f094:	e6b3      	b.n	800edfe <__gethex+0x15a>
 800f096:	6922      	ldr	r2, [r4, #16]
 800f098:	3202      	adds	r2, #2
 800f09a:	f104 010c 	add.w	r1, r4, #12
 800f09e:	0092      	lsls	r2, r2, #2
 800f0a0:	300c      	adds	r0, #12
 800f0a2:	f7ff fd3c 	bl	800eb1e <memcpy>
 800f0a6:	4621      	mov	r1, r4
 800f0a8:	4648      	mov	r0, r9
 800f0aa:	f000 f9e9 	bl	800f480 <_Bfree>
 800f0ae:	4654      	mov	r4, sl
 800f0b0:	6922      	ldr	r2, [r4, #16]
 800f0b2:	1c51      	adds	r1, r2, #1
 800f0b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f0b8:	6121      	str	r1, [r4, #16]
 800f0ba:	2101      	movs	r1, #1
 800f0bc:	6151      	str	r1, [r2, #20]
 800f0be:	e7bc      	b.n	800f03a <__gethex+0x396>
 800f0c0:	6921      	ldr	r1, [r4, #16]
 800f0c2:	4559      	cmp	r1, fp
 800f0c4:	dd0b      	ble.n	800f0de <__gethex+0x43a>
 800f0c6:	2101      	movs	r1, #1
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f7ff fd83 	bl	800ebd4 <rshift>
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	3601      	adds	r6, #1
 800f0d2:	42b3      	cmp	r3, r6
 800f0d4:	f6ff aedb 	blt.w	800ee8e <__gethex+0x1ea>
 800f0d8:	f04f 0801 	mov.w	r8, #1
 800f0dc:	e7c2      	b.n	800f064 <__gethex+0x3c0>
 800f0de:	f015 051f 	ands.w	r5, r5, #31
 800f0e2:	d0f9      	beq.n	800f0d8 <__gethex+0x434>
 800f0e4:	9b01      	ldr	r3, [sp, #4]
 800f0e6:	441a      	add	r2, r3
 800f0e8:	f1c5 0520 	rsb	r5, r5, #32
 800f0ec:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f0f0:	f000 fa78 	bl	800f5e4 <__hi0bits>
 800f0f4:	42a8      	cmp	r0, r5
 800f0f6:	dbe6      	blt.n	800f0c6 <__gethex+0x422>
 800f0f8:	e7ee      	b.n	800f0d8 <__gethex+0x434>
 800f0fa:	bf00      	nop
 800f0fc:	08010f70 	.word	0x08010f70

0800f100 <L_shift>:
 800f100:	f1c2 0208 	rsb	r2, r2, #8
 800f104:	0092      	lsls	r2, r2, #2
 800f106:	b570      	push	{r4, r5, r6, lr}
 800f108:	f1c2 0620 	rsb	r6, r2, #32
 800f10c:	6843      	ldr	r3, [r0, #4]
 800f10e:	6804      	ldr	r4, [r0, #0]
 800f110:	fa03 f506 	lsl.w	r5, r3, r6
 800f114:	432c      	orrs	r4, r5
 800f116:	40d3      	lsrs	r3, r2
 800f118:	6004      	str	r4, [r0, #0]
 800f11a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f11e:	4288      	cmp	r0, r1
 800f120:	d3f4      	bcc.n	800f10c <L_shift+0xc>
 800f122:	bd70      	pop	{r4, r5, r6, pc}

0800f124 <__match>:
 800f124:	b530      	push	{r4, r5, lr}
 800f126:	6803      	ldr	r3, [r0, #0]
 800f128:	3301      	adds	r3, #1
 800f12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f12e:	b914      	cbnz	r4, 800f136 <__match+0x12>
 800f130:	6003      	str	r3, [r0, #0]
 800f132:	2001      	movs	r0, #1
 800f134:	bd30      	pop	{r4, r5, pc}
 800f136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f13a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f13e:	2d19      	cmp	r5, #25
 800f140:	bf98      	it	ls
 800f142:	3220      	addls	r2, #32
 800f144:	42a2      	cmp	r2, r4
 800f146:	d0f0      	beq.n	800f12a <__match+0x6>
 800f148:	2000      	movs	r0, #0
 800f14a:	e7f3      	b.n	800f134 <__match+0x10>

0800f14c <__hexnan>:
 800f14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f150:	680b      	ldr	r3, [r1, #0]
 800f152:	6801      	ldr	r1, [r0, #0]
 800f154:	115e      	asrs	r6, r3, #5
 800f156:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f15a:	f013 031f 	ands.w	r3, r3, #31
 800f15e:	b087      	sub	sp, #28
 800f160:	bf18      	it	ne
 800f162:	3604      	addne	r6, #4
 800f164:	2500      	movs	r5, #0
 800f166:	1f37      	subs	r7, r6, #4
 800f168:	4682      	mov	sl, r0
 800f16a:	4690      	mov	r8, r2
 800f16c:	9301      	str	r3, [sp, #4]
 800f16e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f172:	46b9      	mov	r9, r7
 800f174:	463c      	mov	r4, r7
 800f176:	9502      	str	r5, [sp, #8]
 800f178:	46ab      	mov	fp, r5
 800f17a:	784a      	ldrb	r2, [r1, #1]
 800f17c:	1c4b      	adds	r3, r1, #1
 800f17e:	9303      	str	r3, [sp, #12]
 800f180:	b342      	cbz	r2, 800f1d4 <__hexnan+0x88>
 800f182:	4610      	mov	r0, r2
 800f184:	9105      	str	r1, [sp, #20]
 800f186:	9204      	str	r2, [sp, #16]
 800f188:	f7ff fd76 	bl	800ec78 <__hexdig_fun>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d14f      	bne.n	800f230 <__hexnan+0xe4>
 800f190:	9a04      	ldr	r2, [sp, #16]
 800f192:	9905      	ldr	r1, [sp, #20]
 800f194:	2a20      	cmp	r2, #32
 800f196:	d818      	bhi.n	800f1ca <__hexnan+0x7e>
 800f198:	9b02      	ldr	r3, [sp, #8]
 800f19a:	459b      	cmp	fp, r3
 800f19c:	dd13      	ble.n	800f1c6 <__hexnan+0x7a>
 800f19e:	454c      	cmp	r4, r9
 800f1a0:	d206      	bcs.n	800f1b0 <__hexnan+0x64>
 800f1a2:	2d07      	cmp	r5, #7
 800f1a4:	dc04      	bgt.n	800f1b0 <__hexnan+0x64>
 800f1a6:	462a      	mov	r2, r5
 800f1a8:	4649      	mov	r1, r9
 800f1aa:	4620      	mov	r0, r4
 800f1ac:	f7ff ffa8 	bl	800f100 <L_shift>
 800f1b0:	4544      	cmp	r4, r8
 800f1b2:	d950      	bls.n	800f256 <__hexnan+0x10a>
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	f1a4 0904 	sub.w	r9, r4, #4
 800f1ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800f1be:	f8cd b008 	str.w	fp, [sp, #8]
 800f1c2:	464c      	mov	r4, r9
 800f1c4:	461d      	mov	r5, r3
 800f1c6:	9903      	ldr	r1, [sp, #12]
 800f1c8:	e7d7      	b.n	800f17a <__hexnan+0x2e>
 800f1ca:	2a29      	cmp	r2, #41	; 0x29
 800f1cc:	d155      	bne.n	800f27a <__hexnan+0x12e>
 800f1ce:	3102      	adds	r1, #2
 800f1d0:	f8ca 1000 	str.w	r1, [sl]
 800f1d4:	f1bb 0f00 	cmp.w	fp, #0
 800f1d8:	d04f      	beq.n	800f27a <__hexnan+0x12e>
 800f1da:	454c      	cmp	r4, r9
 800f1dc:	d206      	bcs.n	800f1ec <__hexnan+0xa0>
 800f1de:	2d07      	cmp	r5, #7
 800f1e0:	dc04      	bgt.n	800f1ec <__hexnan+0xa0>
 800f1e2:	462a      	mov	r2, r5
 800f1e4:	4649      	mov	r1, r9
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f7ff ff8a 	bl	800f100 <L_shift>
 800f1ec:	4544      	cmp	r4, r8
 800f1ee:	d934      	bls.n	800f25a <__hexnan+0x10e>
 800f1f0:	f1a8 0204 	sub.w	r2, r8, #4
 800f1f4:	4623      	mov	r3, r4
 800f1f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800f1fa:	f842 1f04 	str.w	r1, [r2, #4]!
 800f1fe:	429f      	cmp	r7, r3
 800f200:	d2f9      	bcs.n	800f1f6 <__hexnan+0xaa>
 800f202:	1b3b      	subs	r3, r7, r4
 800f204:	f023 0303 	bic.w	r3, r3, #3
 800f208:	3304      	adds	r3, #4
 800f20a:	3e03      	subs	r6, #3
 800f20c:	3401      	adds	r4, #1
 800f20e:	42a6      	cmp	r6, r4
 800f210:	bf38      	it	cc
 800f212:	2304      	movcc	r3, #4
 800f214:	4443      	add	r3, r8
 800f216:	2200      	movs	r2, #0
 800f218:	f843 2b04 	str.w	r2, [r3], #4
 800f21c:	429f      	cmp	r7, r3
 800f21e:	d2fb      	bcs.n	800f218 <__hexnan+0xcc>
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	b91b      	cbnz	r3, 800f22c <__hexnan+0xe0>
 800f224:	4547      	cmp	r7, r8
 800f226:	d126      	bne.n	800f276 <__hexnan+0x12a>
 800f228:	2301      	movs	r3, #1
 800f22a:	603b      	str	r3, [r7, #0]
 800f22c:	2005      	movs	r0, #5
 800f22e:	e025      	b.n	800f27c <__hexnan+0x130>
 800f230:	3501      	adds	r5, #1
 800f232:	2d08      	cmp	r5, #8
 800f234:	f10b 0b01 	add.w	fp, fp, #1
 800f238:	dd06      	ble.n	800f248 <__hexnan+0xfc>
 800f23a:	4544      	cmp	r4, r8
 800f23c:	d9c3      	bls.n	800f1c6 <__hexnan+0x7a>
 800f23e:	2300      	movs	r3, #0
 800f240:	f844 3c04 	str.w	r3, [r4, #-4]
 800f244:	2501      	movs	r5, #1
 800f246:	3c04      	subs	r4, #4
 800f248:	6822      	ldr	r2, [r4, #0]
 800f24a:	f000 000f 	and.w	r0, r0, #15
 800f24e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f252:	6020      	str	r0, [r4, #0]
 800f254:	e7b7      	b.n	800f1c6 <__hexnan+0x7a>
 800f256:	2508      	movs	r5, #8
 800f258:	e7b5      	b.n	800f1c6 <__hexnan+0x7a>
 800f25a:	9b01      	ldr	r3, [sp, #4]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d0df      	beq.n	800f220 <__hexnan+0xd4>
 800f260:	f1c3 0320 	rsb	r3, r3, #32
 800f264:	f04f 32ff 	mov.w	r2, #4294967295
 800f268:	40da      	lsrs	r2, r3
 800f26a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f26e:	4013      	ands	r3, r2
 800f270:	f846 3c04 	str.w	r3, [r6, #-4]
 800f274:	e7d4      	b.n	800f220 <__hexnan+0xd4>
 800f276:	3f04      	subs	r7, #4
 800f278:	e7d2      	b.n	800f220 <__hexnan+0xd4>
 800f27a:	2004      	movs	r0, #4
 800f27c:	b007      	add	sp, #28
 800f27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800f284 <sbrk_aligned>:
 800f284:	b570      	push	{r4, r5, r6, lr}
 800f286:	4e0e      	ldr	r6, [pc, #56]	; (800f2c0 <sbrk_aligned+0x3c>)
 800f288:	460c      	mov	r4, r1
 800f28a:	6831      	ldr	r1, [r6, #0]
 800f28c:	4605      	mov	r5, r0
 800f28e:	b911      	cbnz	r1, 800f296 <sbrk_aligned+0x12>
 800f290:	f000 fe1e 	bl	800fed0 <_sbrk_r>
 800f294:	6030      	str	r0, [r6, #0]
 800f296:	4621      	mov	r1, r4
 800f298:	4628      	mov	r0, r5
 800f29a:	f000 fe19 	bl	800fed0 <_sbrk_r>
 800f29e:	1c43      	adds	r3, r0, #1
 800f2a0:	d00a      	beq.n	800f2b8 <sbrk_aligned+0x34>
 800f2a2:	1cc4      	adds	r4, r0, #3
 800f2a4:	f024 0403 	bic.w	r4, r4, #3
 800f2a8:	42a0      	cmp	r0, r4
 800f2aa:	d007      	beq.n	800f2bc <sbrk_aligned+0x38>
 800f2ac:	1a21      	subs	r1, r4, r0
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	f000 fe0e 	bl	800fed0 <_sbrk_r>
 800f2b4:	3001      	adds	r0, #1
 800f2b6:	d101      	bne.n	800f2bc <sbrk_aligned+0x38>
 800f2b8:	f04f 34ff 	mov.w	r4, #4294967295
 800f2bc:	4620      	mov	r0, r4
 800f2be:	bd70      	pop	{r4, r5, r6, pc}
 800f2c0:	200009f0 	.word	0x200009f0

0800f2c4 <_malloc_r>:
 800f2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2c8:	1ccd      	adds	r5, r1, #3
 800f2ca:	f025 0503 	bic.w	r5, r5, #3
 800f2ce:	3508      	adds	r5, #8
 800f2d0:	2d0c      	cmp	r5, #12
 800f2d2:	bf38      	it	cc
 800f2d4:	250c      	movcc	r5, #12
 800f2d6:	2d00      	cmp	r5, #0
 800f2d8:	4607      	mov	r7, r0
 800f2da:	db01      	blt.n	800f2e0 <_malloc_r+0x1c>
 800f2dc:	42a9      	cmp	r1, r5
 800f2de:	d905      	bls.n	800f2ec <_malloc_r+0x28>
 800f2e0:	230c      	movs	r3, #12
 800f2e2:	603b      	str	r3, [r7, #0]
 800f2e4:	2600      	movs	r6, #0
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f3c0 <_malloc_r+0xfc>
 800f2f0:	f000 f87a 	bl	800f3e8 <__malloc_lock>
 800f2f4:	f8d8 3000 	ldr.w	r3, [r8]
 800f2f8:	461c      	mov	r4, r3
 800f2fa:	bb5c      	cbnz	r4, 800f354 <_malloc_r+0x90>
 800f2fc:	4629      	mov	r1, r5
 800f2fe:	4638      	mov	r0, r7
 800f300:	f7ff ffc0 	bl	800f284 <sbrk_aligned>
 800f304:	1c43      	adds	r3, r0, #1
 800f306:	4604      	mov	r4, r0
 800f308:	d155      	bne.n	800f3b6 <_malloc_r+0xf2>
 800f30a:	f8d8 4000 	ldr.w	r4, [r8]
 800f30e:	4626      	mov	r6, r4
 800f310:	2e00      	cmp	r6, #0
 800f312:	d145      	bne.n	800f3a0 <_malloc_r+0xdc>
 800f314:	2c00      	cmp	r4, #0
 800f316:	d048      	beq.n	800f3aa <_malloc_r+0xe6>
 800f318:	6823      	ldr	r3, [r4, #0]
 800f31a:	4631      	mov	r1, r6
 800f31c:	4638      	mov	r0, r7
 800f31e:	eb04 0903 	add.w	r9, r4, r3
 800f322:	f000 fdd5 	bl	800fed0 <_sbrk_r>
 800f326:	4581      	cmp	r9, r0
 800f328:	d13f      	bne.n	800f3aa <_malloc_r+0xe6>
 800f32a:	6821      	ldr	r1, [r4, #0]
 800f32c:	1a6d      	subs	r5, r5, r1
 800f32e:	4629      	mov	r1, r5
 800f330:	4638      	mov	r0, r7
 800f332:	f7ff ffa7 	bl	800f284 <sbrk_aligned>
 800f336:	3001      	adds	r0, #1
 800f338:	d037      	beq.n	800f3aa <_malloc_r+0xe6>
 800f33a:	6823      	ldr	r3, [r4, #0]
 800f33c:	442b      	add	r3, r5
 800f33e:	6023      	str	r3, [r4, #0]
 800f340:	f8d8 3000 	ldr.w	r3, [r8]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d038      	beq.n	800f3ba <_malloc_r+0xf6>
 800f348:	685a      	ldr	r2, [r3, #4]
 800f34a:	42a2      	cmp	r2, r4
 800f34c:	d12b      	bne.n	800f3a6 <_malloc_r+0xe2>
 800f34e:	2200      	movs	r2, #0
 800f350:	605a      	str	r2, [r3, #4]
 800f352:	e00f      	b.n	800f374 <_malloc_r+0xb0>
 800f354:	6822      	ldr	r2, [r4, #0]
 800f356:	1b52      	subs	r2, r2, r5
 800f358:	d41f      	bmi.n	800f39a <_malloc_r+0xd6>
 800f35a:	2a0b      	cmp	r2, #11
 800f35c:	d917      	bls.n	800f38e <_malloc_r+0xca>
 800f35e:	1961      	adds	r1, r4, r5
 800f360:	42a3      	cmp	r3, r4
 800f362:	6025      	str	r5, [r4, #0]
 800f364:	bf18      	it	ne
 800f366:	6059      	strne	r1, [r3, #4]
 800f368:	6863      	ldr	r3, [r4, #4]
 800f36a:	bf08      	it	eq
 800f36c:	f8c8 1000 	streq.w	r1, [r8]
 800f370:	5162      	str	r2, [r4, r5]
 800f372:	604b      	str	r3, [r1, #4]
 800f374:	4638      	mov	r0, r7
 800f376:	f104 060b 	add.w	r6, r4, #11
 800f37a:	f000 f83b 	bl	800f3f4 <__malloc_unlock>
 800f37e:	f026 0607 	bic.w	r6, r6, #7
 800f382:	1d23      	adds	r3, r4, #4
 800f384:	1af2      	subs	r2, r6, r3
 800f386:	d0ae      	beq.n	800f2e6 <_malloc_r+0x22>
 800f388:	1b9b      	subs	r3, r3, r6
 800f38a:	50a3      	str	r3, [r4, r2]
 800f38c:	e7ab      	b.n	800f2e6 <_malloc_r+0x22>
 800f38e:	42a3      	cmp	r3, r4
 800f390:	6862      	ldr	r2, [r4, #4]
 800f392:	d1dd      	bne.n	800f350 <_malloc_r+0x8c>
 800f394:	f8c8 2000 	str.w	r2, [r8]
 800f398:	e7ec      	b.n	800f374 <_malloc_r+0xb0>
 800f39a:	4623      	mov	r3, r4
 800f39c:	6864      	ldr	r4, [r4, #4]
 800f39e:	e7ac      	b.n	800f2fa <_malloc_r+0x36>
 800f3a0:	4634      	mov	r4, r6
 800f3a2:	6876      	ldr	r6, [r6, #4]
 800f3a4:	e7b4      	b.n	800f310 <_malloc_r+0x4c>
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	e7cc      	b.n	800f344 <_malloc_r+0x80>
 800f3aa:	230c      	movs	r3, #12
 800f3ac:	603b      	str	r3, [r7, #0]
 800f3ae:	4638      	mov	r0, r7
 800f3b0:	f000 f820 	bl	800f3f4 <__malloc_unlock>
 800f3b4:	e797      	b.n	800f2e6 <_malloc_r+0x22>
 800f3b6:	6025      	str	r5, [r4, #0]
 800f3b8:	e7dc      	b.n	800f374 <_malloc_r+0xb0>
 800f3ba:	605b      	str	r3, [r3, #4]
 800f3bc:	deff      	udf	#255	; 0xff
 800f3be:	bf00      	nop
 800f3c0:	200009ec 	.word	0x200009ec

0800f3c4 <__ascii_mbtowc>:
 800f3c4:	b082      	sub	sp, #8
 800f3c6:	b901      	cbnz	r1, 800f3ca <__ascii_mbtowc+0x6>
 800f3c8:	a901      	add	r1, sp, #4
 800f3ca:	b142      	cbz	r2, 800f3de <__ascii_mbtowc+0x1a>
 800f3cc:	b14b      	cbz	r3, 800f3e2 <__ascii_mbtowc+0x1e>
 800f3ce:	7813      	ldrb	r3, [r2, #0]
 800f3d0:	600b      	str	r3, [r1, #0]
 800f3d2:	7812      	ldrb	r2, [r2, #0]
 800f3d4:	1e10      	subs	r0, r2, #0
 800f3d6:	bf18      	it	ne
 800f3d8:	2001      	movne	r0, #1
 800f3da:	b002      	add	sp, #8
 800f3dc:	4770      	bx	lr
 800f3de:	4610      	mov	r0, r2
 800f3e0:	e7fb      	b.n	800f3da <__ascii_mbtowc+0x16>
 800f3e2:	f06f 0001 	mvn.w	r0, #1
 800f3e6:	e7f8      	b.n	800f3da <__ascii_mbtowc+0x16>

0800f3e8 <__malloc_lock>:
 800f3e8:	4801      	ldr	r0, [pc, #4]	; (800f3f0 <__malloc_lock+0x8>)
 800f3ea:	f7ff bb96 	b.w	800eb1a <__retarget_lock_acquire_recursive>
 800f3ee:	bf00      	nop
 800f3f0:	200009e8 	.word	0x200009e8

0800f3f4 <__malloc_unlock>:
 800f3f4:	4801      	ldr	r0, [pc, #4]	; (800f3fc <__malloc_unlock+0x8>)
 800f3f6:	f7ff bb91 	b.w	800eb1c <__retarget_lock_release_recursive>
 800f3fa:	bf00      	nop
 800f3fc:	200009e8 	.word	0x200009e8

0800f400 <_Balloc>:
 800f400:	b570      	push	{r4, r5, r6, lr}
 800f402:	69c6      	ldr	r6, [r0, #28]
 800f404:	4604      	mov	r4, r0
 800f406:	460d      	mov	r5, r1
 800f408:	b976      	cbnz	r6, 800f428 <_Balloc+0x28>
 800f40a:	2010      	movs	r0, #16
 800f40c:	f000 fda4 	bl	800ff58 <malloc>
 800f410:	4602      	mov	r2, r0
 800f412:	61e0      	str	r0, [r4, #28]
 800f414:	b920      	cbnz	r0, 800f420 <_Balloc+0x20>
 800f416:	4b18      	ldr	r3, [pc, #96]	; (800f478 <_Balloc+0x78>)
 800f418:	4818      	ldr	r0, [pc, #96]	; (800f47c <_Balloc+0x7c>)
 800f41a:	216b      	movs	r1, #107	; 0x6b
 800f41c:	f000 fd68 	bl	800fef0 <__assert_func>
 800f420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f424:	6006      	str	r6, [r0, #0]
 800f426:	60c6      	str	r6, [r0, #12]
 800f428:	69e6      	ldr	r6, [r4, #28]
 800f42a:	68f3      	ldr	r3, [r6, #12]
 800f42c:	b183      	cbz	r3, 800f450 <_Balloc+0x50>
 800f42e:	69e3      	ldr	r3, [r4, #28]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f436:	b9b8      	cbnz	r0, 800f468 <_Balloc+0x68>
 800f438:	2101      	movs	r1, #1
 800f43a:	fa01 f605 	lsl.w	r6, r1, r5
 800f43e:	1d72      	adds	r2, r6, #5
 800f440:	0092      	lsls	r2, r2, #2
 800f442:	4620      	mov	r0, r4
 800f444:	f000 fd72 	bl	800ff2c <_calloc_r>
 800f448:	b160      	cbz	r0, 800f464 <_Balloc+0x64>
 800f44a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f44e:	e00e      	b.n	800f46e <_Balloc+0x6e>
 800f450:	2221      	movs	r2, #33	; 0x21
 800f452:	2104      	movs	r1, #4
 800f454:	4620      	mov	r0, r4
 800f456:	f000 fd69 	bl	800ff2c <_calloc_r>
 800f45a:	69e3      	ldr	r3, [r4, #28]
 800f45c:	60f0      	str	r0, [r6, #12]
 800f45e:	68db      	ldr	r3, [r3, #12]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1e4      	bne.n	800f42e <_Balloc+0x2e>
 800f464:	2000      	movs	r0, #0
 800f466:	bd70      	pop	{r4, r5, r6, pc}
 800f468:	6802      	ldr	r2, [r0, #0]
 800f46a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f46e:	2300      	movs	r3, #0
 800f470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f474:	e7f7      	b.n	800f466 <_Balloc+0x66>
 800f476:	bf00      	nop
 800f478:	08010fe1 	.word	0x08010fe1
 800f47c:	08010ff8 	.word	0x08010ff8

0800f480 <_Bfree>:
 800f480:	b570      	push	{r4, r5, r6, lr}
 800f482:	69c6      	ldr	r6, [r0, #28]
 800f484:	4605      	mov	r5, r0
 800f486:	460c      	mov	r4, r1
 800f488:	b976      	cbnz	r6, 800f4a8 <_Bfree+0x28>
 800f48a:	2010      	movs	r0, #16
 800f48c:	f000 fd64 	bl	800ff58 <malloc>
 800f490:	4602      	mov	r2, r0
 800f492:	61e8      	str	r0, [r5, #28]
 800f494:	b920      	cbnz	r0, 800f4a0 <_Bfree+0x20>
 800f496:	4b09      	ldr	r3, [pc, #36]	; (800f4bc <_Bfree+0x3c>)
 800f498:	4809      	ldr	r0, [pc, #36]	; (800f4c0 <_Bfree+0x40>)
 800f49a:	218f      	movs	r1, #143	; 0x8f
 800f49c:	f000 fd28 	bl	800fef0 <__assert_func>
 800f4a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4a4:	6006      	str	r6, [r0, #0]
 800f4a6:	60c6      	str	r6, [r0, #12]
 800f4a8:	b13c      	cbz	r4, 800f4ba <_Bfree+0x3a>
 800f4aa:	69eb      	ldr	r3, [r5, #28]
 800f4ac:	6862      	ldr	r2, [r4, #4]
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f4b4:	6021      	str	r1, [r4, #0]
 800f4b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}
 800f4bc:	08010fe1 	.word	0x08010fe1
 800f4c0:	08010ff8 	.word	0x08010ff8

0800f4c4 <__multadd>:
 800f4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c8:	690d      	ldr	r5, [r1, #16]
 800f4ca:	4607      	mov	r7, r0
 800f4cc:	460c      	mov	r4, r1
 800f4ce:	461e      	mov	r6, r3
 800f4d0:	f101 0c14 	add.w	ip, r1, #20
 800f4d4:	2000      	movs	r0, #0
 800f4d6:	f8dc 3000 	ldr.w	r3, [ip]
 800f4da:	b299      	uxth	r1, r3
 800f4dc:	fb02 6101 	mla	r1, r2, r1, r6
 800f4e0:	0c1e      	lsrs	r6, r3, #16
 800f4e2:	0c0b      	lsrs	r3, r1, #16
 800f4e4:	fb02 3306 	mla	r3, r2, r6, r3
 800f4e8:	b289      	uxth	r1, r1
 800f4ea:	3001      	adds	r0, #1
 800f4ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f4f0:	4285      	cmp	r5, r0
 800f4f2:	f84c 1b04 	str.w	r1, [ip], #4
 800f4f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f4fa:	dcec      	bgt.n	800f4d6 <__multadd+0x12>
 800f4fc:	b30e      	cbz	r6, 800f542 <__multadd+0x7e>
 800f4fe:	68a3      	ldr	r3, [r4, #8]
 800f500:	42ab      	cmp	r3, r5
 800f502:	dc19      	bgt.n	800f538 <__multadd+0x74>
 800f504:	6861      	ldr	r1, [r4, #4]
 800f506:	4638      	mov	r0, r7
 800f508:	3101      	adds	r1, #1
 800f50a:	f7ff ff79 	bl	800f400 <_Balloc>
 800f50e:	4680      	mov	r8, r0
 800f510:	b928      	cbnz	r0, 800f51e <__multadd+0x5a>
 800f512:	4602      	mov	r2, r0
 800f514:	4b0c      	ldr	r3, [pc, #48]	; (800f548 <__multadd+0x84>)
 800f516:	480d      	ldr	r0, [pc, #52]	; (800f54c <__multadd+0x88>)
 800f518:	21ba      	movs	r1, #186	; 0xba
 800f51a:	f000 fce9 	bl	800fef0 <__assert_func>
 800f51e:	6922      	ldr	r2, [r4, #16]
 800f520:	3202      	adds	r2, #2
 800f522:	f104 010c 	add.w	r1, r4, #12
 800f526:	0092      	lsls	r2, r2, #2
 800f528:	300c      	adds	r0, #12
 800f52a:	f7ff faf8 	bl	800eb1e <memcpy>
 800f52e:	4621      	mov	r1, r4
 800f530:	4638      	mov	r0, r7
 800f532:	f7ff ffa5 	bl	800f480 <_Bfree>
 800f536:	4644      	mov	r4, r8
 800f538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f53c:	3501      	adds	r5, #1
 800f53e:	615e      	str	r6, [r3, #20]
 800f540:	6125      	str	r5, [r4, #16]
 800f542:	4620      	mov	r0, r4
 800f544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f548:	08010f70 	.word	0x08010f70
 800f54c:	08010ff8 	.word	0x08010ff8

0800f550 <__s2b>:
 800f550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f554:	460c      	mov	r4, r1
 800f556:	4615      	mov	r5, r2
 800f558:	461f      	mov	r7, r3
 800f55a:	2209      	movs	r2, #9
 800f55c:	3308      	adds	r3, #8
 800f55e:	4606      	mov	r6, r0
 800f560:	fb93 f3f2 	sdiv	r3, r3, r2
 800f564:	2100      	movs	r1, #0
 800f566:	2201      	movs	r2, #1
 800f568:	429a      	cmp	r2, r3
 800f56a:	db09      	blt.n	800f580 <__s2b+0x30>
 800f56c:	4630      	mov	r0, r6
 800f56e:	f7ff ff47 	bl	800f400 <_Balloc>
 800f572:	b940      	cbnz	r0, 800f586 <__s2b+0x36>
 800f574:	4602      	mov	r2, r0
 800f576:	4b19      	ldr	r3, [pc, #100]	; (800f5dc <__s2b+0x8c>)
 800f578:	4819      	ldr	r0, [pc, #100]	; (800f5e0 <__s2b+0x90>)
 800f57a:	21d3      	movs	r1, #211	; 0xd3
 800f57c:	f000 fcb8 	bl	800fef0 <__assert_func>
 800f580:	0052      	lsls	r2, r2, #1
 800f582:	3101      	adds	r1, #1
 800f584:	e7f0      	b.n	800f568 <__s2b+0x18>
 800f586:	9b08      	ldr	r3, [sp, #32]
 800f588:	6143      	str	r3, [r0, #20]
 800f58a:	2d09      	cmp	r5, #9
 800f58c:	f04f 0301 	mov.w	r3, #1
 800f590:	6103      	str	r3, [r0, #16]
 800f592:	dd16      	ble.n	800f5c2 <__s2b+0x72>
 800f594:	f104 0909 	add.w	r9, r4, #9
 800f598:	46c8      	mov	r8, r9
 800f59a:	442c      	add	r4, r5
 800f59c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f5a0:	4601      	mov	r1, r0
 800f5a2:	3b30      	subs	r3, #48	; 0x30
 800f5a4:	220a      	movs	r2, #10
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	f7ff ff8c 	bl	800f4c4 <__multadd>
 800f5ac:	45a0      	cmp	r8, r4
 800f5ae:	d1f5      	bne.n	800f59c <__s2b+0x4c>
 800f5b0:	f1a5 0408 	sub.w	r4, r5, #8
 800f5b4:	444c      	add	r4, r9
 800f5b6:	1b2d      	subs	r5, r5, r4
 800f5b8:	1963      	adds	r3, r4, r5
 800f5ba:	42bb      	cmp	r3, r7
 800f5bc:	db04      	blt.n	800f5c8 <__s2b+0x78>
 800f5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5c2:	340a      	adds	r4, #10
 800f5c4:	2509      	movs	r5, #9
 800f5c6:	e7f6      	b.n	800f5b6 <__s2b+0x66>
 800f5c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f5cc:	4601      	mov	r1, r0
 800f5ce:	3b30      	subs	r3, #48	; 0x30
 800f5d0:	220a      	movs	r2, #10
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	f7ff ff76 	bl	800f4c4 <__multadd>
 800f5d8:	e7ee      	b.n	800f5b8 <__s2b+0x68>
 800f5da:	bf00      	nop
 800f5dc:	08010f70 	.word	0x08010f70
 800f5e0:	08010ff8 	.word	0x08010ff8

0800f5e4 <__hi0bits>:
 800f5e4:	0c03      	lsrs	r3, r0, #16
 800f5e6:	041b      	lsls	r3, r3, #16
 800f5e8:	b9d3      	cbnz	r3, 800f620 <__hi0bits+0x3c>
 800f5ea:	0400      	lsls	r0, r0, #16
 800f5ec:	2310      	movs	r3, #16
 800f5ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f5f2:	bf04      	itt	eq
 800f5f4:	0200      	lsleq	r0, r0, #8
 800f5f6:	3308      	addeq	r3, #8
 800f5f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f5fc:	bf04      	itt	eq
 800f5fe:	0100      	lsleq	r0, r0, #4
 800f600:	3304      	addeq	r3, #4
 800f602:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f606:	bf04      	itt	eq
 800f608:	0080      	lsleq	r0, r0, #2
 800f60a:	3302      	addeq	r3, #2
 800f60c:	2800      	cmp	r0, #0
 800f60e:	db05      	blt.n	800f61c <__hi0bits+0x38>
 800f610:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f614:	f103 0301 	add.w	r3, r3, #1
 800f618:	bf08      	it	eq
 800f61a:	2320      	moveq	r3, #32
 800f61c:	4618      	mov	r0, r3
 800f61e:	4770      	bx	lr
 800f620:	2300      	movs	r3, #0
 800f622:	e7e4      	b.n	800f5ee <__hi0bits+0xa>

0800f624 <__lo0bits>:
 800f624:	6803      	ldr	r3, [r0, #0]
 800f626:	f013 0207 	ands.w	r2, r3, #7
 800f62a:	d00c      	beq.n	800f646 <__lo0bits+0x22>
 800f62c:	07d9      	lsls	r1, r3, #31
 800f62e:	d422      	bmi.n	800f676 <__lo0bits+0x52>
 800f630:	079a      	lsls	r2, r3, #30
 800f632:	bf49      	itett	mi
 800f634:	085b      	lsrmi	r3, r3, #1
 800f636:	089b      	lsrpl	r3, r3, #2
 800f638:	6003      	strmi	r3, [r0, #0]
 800f63a:	2201      	movmi	r2, #1
 800f63c:	bf5c      	itt	pl
 800f63e:	6003      	strpl	r3, [r0, #0]
 800f640:	2202      	movpl	r2, #2
 800f642:	4610      	mov	r0, r2
 800f644:	4770      	bx	lr
 800f646:	b299      	uxth	r1, r3
 800f648:	b909      	cbnz	r1, 800f64e <__lo0bits+0x2a>
 800f64a:	0c1b      	lsrs	r3, r3, #16
 800f64c:	2210      	movs	r2, #16
 800f64e:	b2d9      	uxtb	r1, r3
 800f650:	b909      	cbnz	r1, 800f656 <__lo0bits+0x32>
 800f652:	3208      	adds	r2, #8
 800f654:	0a1b      	lsrs	r3, r3, #8
 800f656:	0719      	lsls	r1, r3, #28
 800f658:	bf04      	itt	eq
 800f65a:	091b      	lsreq	r3, r3, #4
 800f65c:	3204      	addeq	r2, #4
 800f65e:	0799      	lsls	r1, r3, #30
 800f660:	bf04      	itt	eq
 800f662:	089b      	lsreq	r3, r3, #2
 800f664:	3202      	addeq	r2, #2
 800f666:	07d9      	lsls	r1, r3, #31
 800f668:	d403      	bmi.n	800f672 <__lo0bits+0x4e>
 800f66a:	085b      	lsrs	r3, r3, #1
 800f66c:	f102 0201 	add.w	r2, r2, #1
 800f670:	d003      	beq.n	800f67a <__lo0bits+0x56>
 800f672:	6003      	str	r3, [r0, #0]
 800f674:	e7e5      	b.n	800f642 <__lo0bits+0x1e>
 800f676:	2200      	movs	r2, #0
 800f678:	e7e3      	b.n	800f642 <__lo0bits+0x1e>
 800f67a:	2220      	movs	r2, #32
 800f67c:	e7e1      	b.n	800f642 <__lo0bits+0x1e>
	...

0800f680 <__i2b>:
 800f680:	b510      	push	{r4, lr}
 800f682:	460c      	mov	r4, r1
 800f684:	2101      	movs	r1, #1
 800f686:	f7ff febb 	bl	800f400 <_Balloc>
 800f68a:	4602      	mov	r2, r0
 800f68c:	b928      	cbnz	r0, 800f69a <__i2b+0x1a>
 800f68e:	4b05      	ldr	r3, [pc, #20]	; (800f6a4 <__i2b+0x24>)
 800f690:	4805      	ldr	r0, [pc, #20]	; (800f6a8 <__i2b+0x28>)
 800f692:	f240 1145 	movw	r1, #325	; 0x145
 800f696:	f000 fc2b 	bl	800fef0 <__assert_func>
 800f69a:	2301      	movs	r3, #1
 800f69c:	6144      	str	r4, [r0, #20]
 800f69e:	6103      	str	r3, [r0, #16]
 800f6a0:	bd10      	pop	{r4, pc}
 800f6a2:	bf00      	nop
 800f6a4:	08010f70 	.word	0x08010f70
 800f6a8:	08010ff8 	.word	0x08010ff8

0800f6ac <__multiply>:
 800f6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b0:	4691      	mov	r9, r2
 800f6b2:	690a      	ldr	r2, [r1, #16]
 800f6b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	bfb8      	it	lt
 800f6bc:	460b      	movlt	r3, r1
 800f6be:	460c      	mov	r4, r1
 800f6c0:	bfbc      	itt	lt
 800f6c2:	464c      	movlt	r4, r9
 800f6c4:	4699      	movlt	r9, r3
 800f6c6:	6927      	ldr	r7, [r4, #16]
 800f6c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f6cc:	68a3      	ldr	r3, [r4, #8]
 800f6ce:	6861      	ldr	r1, [r4, #4]
 800f6d0:	eb07 060a 	add.w	r6, r7, sl
 800f6d4:	42b3      	cmp	r3, r6
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	bfb8      	it	lt
 800f6da:	3101      	addlt	r1, #1
 800f6dc:	f7ff fe90 	bl	800f400 <_Balloc>
 800f6e0:	b930      	cbnz	r0, 800f6f0 <__multiply+0x44>
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	4b44      	ldr	r3, [pc, #272]	; (800f7f8 <__multiply+0x14c>)
 800f6e6:	4845      	ldr	r0, [pc, #276]	; (800f7fc <__multiply+0x150>)
 800f6e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f6ec:	f000 fc00 	bl	800fef0 <__assert_func>
 800f6f0:	f100 0514 	add.w	r5, r0, #20
 800f6f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f6f8:	462b      	mov	r3, r5
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	4543      	cmp	r3, r8
 800f6fe:	d321      	bcc.n	800f744 <__multiply+0x98>
 800f700:	f104 0314 	add.w	r3, r4, #20
 800f704:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f708:	f109 0314 	add.w	r3, r9, #20
 800f70c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f710:	9202      	str	r2, [sp, #8]
 800f712:	1b3a      	subs	r2, r7, r4
 800f714:	3a15      	subs	r2, #21
 800f716:	f022 0203 	bic.w	r2, r2, #3
 800f71a:	3204      	adds	r2, #4
 800f71c:	f104 0115 	add.w	r1, r4, #21
 800f720:	428f      	cmp	r7, r1
 800f722:	bf38      	it	cc
 800f724:	2204      	movcc	r2, #4
 800f726:	9201      	str	r2, [sp, #4]
 800f728:	9a02      	ldr	r2, [sp, #8]
 800f72a:	9303      	str	r3, [sp, #12]
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d80c      	bhi.n	800f74a <__multiply+0x9e>
 800f730:	2e00      	cmp	r6, #0
 800f732:	dd03      	ble.n	800f73c <__multiply+0x90>
 800f734:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d05b      	beq.n	800f7f4 <__multiply+0x148>
 800f73c:	6106      	str	r6, [r0, #16]
 800f73e:	b005      	add	sp, #20
 800f740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f744:	f843 2b04 	str.w	r2, [r3], #4
 800f748:	e7d8      	b.n	800f6fc <__multiply+0x50>
 800f74a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f74e:	f1ba 0f00 	cmp.w	sl, #0
 800f752:	d024      	beq.n	800f79e <__multiply+0xf2>
 800f754:	f104 0e14 	add.w	lr, r4, #20
 800f758:	46a9      	mov	r9, r5
 800f75a:	f04f 0c00 	mov.w	ip, #0
 800f75e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f762:	f8d9 1000 	ldr.w	r1, [r9]
 800f766:	fa1f fb82 	uxth.w	fp, r2
 800f76a:	b289      	uxth	r1, r1
 800f76c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f770:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f774:	f8d9 2000 	ldr.w	r2, [r9]
 800f778:	4461      	add	r1, ip
 800f77a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f77e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f782:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f786:	b289      	uxth	r1, r1
 800f788:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f78c:	4577      	cmp	r7, lr
 800f78e:	f849 1b04 	str.w	r1, [r9], #4
 800f792:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f796:	d8e2      	bhi.n	800f75e <__multiply+0xb2>
 800f798:	9a01      	ldr	r2, [sp, #4]
 800f79a:	f845 c002 	str.w	ip, [r5, r2]
 800f79e:	9a03      	ldr	r2, [sp, #12]
 800f7a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f7a4:	3304      	adds	r3, #4
 800f7a6:	f1b9 0f00 	cmp.w	r9, #0
 800f7aa:	d021      	beq.n	800f7f0 <__multiply+0x144>
 800f7ac:	6829      	ldr	r1, [r5, #0]
 800f7ae:	f104 0c14 	add.w	ip, r4, #20
 800f7b2:	46ae      	mov	lr, r5
 800f7b4:	f04f 0a00 	mov.w	sl, #0
 800f7b8:	f8bc b000 	ldrh.w	fp, [ip]
 800f7bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f7c0:	fb09 220b 	mla	r2, r9, fp, r2
 800f7c4:	4452      	add	r2, sl
 800f7c6:	b289      	uxth	r1, r1
 800f7c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f7cc:	f84e 1b04 	str.w	r1, [lr], #4
 800f7d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f7d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7d8:	f8be 1000 	ldrh.w	r1, [lr]
 800f7dc:	fb09 110a 	mla	r1, r9, sl, r1
 800f7e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f7e4:	4567      	cmp	r7, ip
 800f7e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7ea:	d8e5      	bhi.n	800f7b8 <__multiply+0x10c>
 800f7ec:	9a01      	ldr	r2, [sp, #4]
 800f7ee:	50a9      	str	r1, [r5, r2]
 800f7f0:	3504      	adds	r5, #4
 800f7f2:	e799      	b.n	800f728 <__multiply+0x7c>
 800f7f4:	3e01      	subs	r6, #1
 800f7f6:	e79b      	b.n	800f730 <__multiply+0x84>
 800f7f8:	08010f70 	.word	0x08010f70
 800f7fc:	08010ff8 	.word	0x08010ff8

0800f800 <__pow5mult>:
 800f800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f804:	4615      	mov	r5, r2
 800f806:	f012 0203 	ands.w	r2, r2, #3
 800f80a:	4606      	mov	r6, r0
 800f80c:	460f      	mov	r7, r1
 800f80e:	d007      	beq.n	800f820 <__pow5mult+0x20>
 800f810:	4c25      	ldr	r4, [pc, #148]	; (800f8a8 <__pow5mult+0xa8>)
 800f812:	3a01      	subs	r2, #1
 800f814:	2300      	movs	r3, #0
 800f816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f81a:	f7ff fe53 	bl	800f4c4 <__multadd>
 800f81e:	4607      	mov	r7, r0
 800f820:	10ad      	asrs	r5, r5, #2
 800f822:	d03d      	beq.n	800f8a0 <__pow5mult+0xa0>
 800f824:	69f4      	ldr	r4, [r6, #28]
 800f826:	b97c      	cbnz	r4, 800f848 <__pow5mult+0x48>
 800f828:	2010      	movs	r0, #16
 800f82a:	f000 fb95 	bl	800ff58 <malloc>
 800f82e:	4602      	mov	r2, r0
 800f830:	61f0      	str	r0, [r6, #28]
 800f832:	b928      	cbnz	r0, 800f840 <__pow5mult+0x40>
 800f834:	4b1d      	ldr	r3, [pc, #116]	; (800f8ac <__pow5mult+0xac>)
 800f836:	481e      	ldr	r0, [pc, #120]	; (800f8b0 <__pow5mult+0xb0>)
 800f838:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f83c:	f000 fb58 	bl	800fef0 <__assert_func>
 800f840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f844:	6004      	str	r4, [r0, #0]
 800f846:	60c4      	str	r4, [r0, #12]
 800f848:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f84c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f850:	b94c      	cbnz	r4, 800f866 <__pow5mult+0x66>
 800f852:	f240 2171 	movw	r1, #625	; 0x271
 800f856:	4630      	mov	r0, r6
 800f858:	f7ff ff12 	bl	800f680 <__i2b>
 800f85c:	2300      	movs	r3, #0
 800f85e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f862:	4604      	mov	r4, r0
 800f864:	6003      	str	r3, [r0, #0]
 800f866:	f04f 0900 	mov.w	r9, #0
 800f86a:	07eb      	lsls	r3, r5, #31
 800f86c:	d50a      	bpl.n	800f884 <__pow5mult+0x84>
 800f86e:	4639      	mov	r1, r7
 800f870:	4622      	mov	r2, r4
 800f872:	4630      	mov	r0, r6
 800f874:	f7ff ff1a 	bl	800f6ac <__multiply>
 800f878:	4639      	mov	r1, r7
 800f87a:	4680      	mov	r8, r0
 800f87c:	4630      	mov	r0, r6
 800f87e:	f7ff fdff 	bl	800f480 <_Bfree>
 800f882:	4647      	mov	r7, r8
 800f884:	106d      	asrs	r5, r5, #1
 800f886:	d00b      	beq.n	800f8a0 <__pow5mult+0xa0>
 800f888:	6820      	ldr	r0, [r4, #0]
 800f88a:	b938      	cbnz	r0, 800f89c <__pow5mult+0x9c>
 800f88c:	4622      	mov	r2, r4
 800f88e:	4621      	mov	r1, r4
 800f890:	4630      	mov	r0, r6
 800f892:	f7ff ff0b 	bl	800f6ac <__multiply>
 800f896:	6020      	str	r0, [r4, #0]
 800f898:	f8c0 9000 	str.w	r9, [r0]
 800f89c:	4604      	mov	r4, r0
 800f89e:	e7e4      	b.n	800f86a <__pow5mult+0x6a>
 800f8a0:	4638      	mov	r0, r7
 800f8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8a6:	bf00      	nop
 800f8a8:	08011148 	.word	0x08011148
 800f8ac:	08010fe1 	.word	0x08010fe1
 800f8b0:	08010ff8 	.word	0x08010ff8

0800f8b4 <__lshift>:
 800f8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8b8:	460c      	mov	r4, r1
 800f8ba:	6849      	ldr	r1, [r1, #4]
 800f8bc:	6923      	ldr	r3, [r4, #16]
 800f8be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8c2:	68a3      	ldr	r3, [r4, #8]
 800f8c4:	4607      	mov	r7, r0
 800f8c6:	4691      	mov	r9, r2
 800f8c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8cc:	f108 0601 	add.w	r6, r8, #1
 800f8d0:	42b3      	cmp	r3, r6
 800f8d2:	db0b      	blt.n	800f8ec <__lshift+0x38>
 800f8d4:	4638      	mov	r0, r7
 800f8d6:	f7ff fd93 	bl	800f400 <_Balloc>
 800f8da:	4605      	mov	r5, r0
 800f8dc:	b948      	cbnz	r0, 800f8f2 <__lshift+0x3e>
 800f8de:	4602      	mov	r2, r0
 800f8e0:	4b28      	ldr	r3, [pc, #160]	; (800f984 <__lshift+0xd0>)
 800f8e2:	4829      	ldr	r0, [pc, #164]	; (800f988 <__lshift+0xd4>)
 800f8e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f8e8:	f000 fb02 	bl	800fef0 <__assert_func>
 800f8ec:	3101      	adds	r1, #1
 800f8ee:	005b      	lsls	r3, r3, #1
 800f8f0:	e7ee      	b.n	800f8d0 <__lshift+0x1c>
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	f100 0114 	add.w	r1, r0, #20
 800f8f8:	f100 0210 	add.w	r2, r0, #16
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	4553      	cmp	r3, sl
 800f900:	db33      	blt.n	800f96a <__lshift+0xb6>
 800f902:	6920      	ldr	r0, [r4, #16]
 800f904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f908:	f104 0314 	add.w	r3, r4, #20
 800f90c:	f019 091f 	ands.w	r9, r9, #31
 800f910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f914:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f918:	d02b      	beq.n	800f972 <__lshift+0xbe>
 800f91a:	f1c9 0e20 	rsb	lr, r9, #32
 800f91e:	468a      	mov	sl, r1
 800f920:	2200      	movs	r2, #0
 800f922:	6818      	ldr	r0, [r3, #0]
 800f924:	fa00 f009 	lsl.w	r0, r0, r9
 800f928:	4310      	orrs	r0, r2
 800f92a:	f84a 0b04 	str.w	r0, [sl], #4
 800f92e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f932:	459c      	cmp	ip, r3
 800f934:	fa22 f20e 	lsr.w	r2, r2, lr
 800f938:	d8f3      	bhi.n	800f922 <__lshift+0x6e>
 800f93a:	ebac 0304 	sub.w	r3, ip, r4
 800f93e:	3b15      	subs	r3, #21
 800f940:	f023 0303 	bic.w	r3, r3, #3
 800f944:	3304      	adds	r3, #4
 800f946:	f104 0015 	add.w	r0, r4, #21
 800f94a:	4584      	cmp	ip, r0
 800f94c:	bf38      	it	cc
 800f94e:	2304      	movcc	r3, #4
 800f950:	50ca      	str	r2, [r1, r3]
 800f952:	b10a      	cbz	r2, 800f958 <__lshift+0xa4>
 800f954:	f108 0602 	add.w	r6, r8, #2
 800f958:	3e01      	subs	r6, #1
 800f95a:	4638      	mov	r0, r7
 800f95c:	612e      	str	r6, [r5, #16]
 800f95e:	4621      	mov	r1, r4
 800f960:	f7ff fd8e 	bl	800f480 <_Bfree>
 800f964:	4628      	mov	r0, r5
 800f966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f96a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f96e:	3301      	adds	r3, #1
 800f970:	e7c5      	b.n	800f8fe <__lshift+0x4a>
 800f972:	3904      	subs	r1, #4
 800f974:	f853 2b04 	ldr.w	r2, [r3], #4
 800f978:	f841 2f04 	str.w	r2, [r1, #4]!
 800f97c:	459c      	cmp	ip, r3
 800f97e:	d8f9      	bhi.n	800f974 <__lshift+0xc0>
 800f980:	e7ea      	b.n	800f958 <__lshift+0xa4>
 800f982:	bf00      	nop
 800f984:	08010f70 	.word	0x08010f70
 800f988:	08010ff8 	.word	0x08010ff8

0800f98c <__mcmp>:
 800f98c:	b530      	push	{r4, r5, lr}
 800f98e:	6902      	ldr	r2, [r0, #16]
 800f990:	690c      	ldr	r4, [r1, #16]
 800f992:	1b12      	subs	r2, r2, r4
 800f994:	d10e      	bne.n	800f9b4 <__mcmp+0x28>
 800f996:	f100 0314 	add.w	r3, r0, #20
 800f99a:	3114      	adds	r1, #20
 800f99c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f9a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f9a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f9a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f9ac:	42a5      	cmp	r5, r4
 800f9ae:	d003      	beq.n	800f9b8 <__mcmp+0x2c>
 800f9b0:	d305      	bcc.n	800f9be <__mcmp+0x32>
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	4610      	mov	r0, r2
 800f9b6:	bd30      	pop	{r4, r5, pc}
 800f9b8:	4283      	cmp	r3, r0
 800f9ba:	d3f3      	bcc.n	800f9a4 <__mcmp+0x18>
 800f9bc:	e7fa      	b.n	800f9b4 <__mcmp+0x28>
 800f9be:	f04f 32ff 	mov.w	r2, #4294967295
 800f9c2:	e7f7      	b.n	800f9b4 <__mcmp+0x28>

0800f9c4 <__mdiff>:
 800f9c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c8:	460c      	mov	r4, r1
 800f9ca:	4606      	mov	r6, r0
 800f9cc:	4611      	mov	r1, r2
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	4690      	mov	r8, r2
 800f9d2:	f7ff ffdb 	bl	800f98c <__mcmp>
 800f9d6:	1e05      	subs	r5, r0, #0
 800f9d8:	d110      	bne.n	800f9fc <__mdiff+0x38>
 800f9da:	4629      	mov	r1, r5
 800f9dc:	4630      	mov	r0, r6
 800f9de:	f7ff fd0f 	bl	800f400 <_Balloc>
 800f9e2:	b930      	cbnz	r0, 800f9f2 <__mdiff+0x2e>
 800f9e4:	4b3a      	ldr	r3, [pc, #232]	; (800fad0 <__mdiff+0x10c>)
 800f9e6:	4602      	mov	r2, r0
 800f9e8:	f240 2137 	movw	r1, #567	; 0x237
 800f9ec:	4839      	ldr	r0, [pc, #228]	; (800fad4 <__mdiff+0x110>)
 800f9ee:	f000 fa7f 	bl	800fef0 <__assert_func>
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f9f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9fc:	bfa4      	itt	ge
 800f9fe:	4643      	movge	r3, r8
 800fa00:	46a0      	movge	r8, r4
 800fa02:	4630      	mov	r0, r6
 800fa04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fa08:	bfa6      	itte	ge
 800fa0a:	461c      	movge	r4, r3
 800fa0c:	2500      	movge	r5, #0
 800fa0e:	2501      	movlt	r5, #1
 800fa10:	f7ff fcf6 	bl	800f400 <_Balloc>
 800fa14:	b920      	cbnz	r0, 800fa20 <__mdiff+0x5c>
 800fa16:	4b2e      	ldr	r3, [pc, #184]	; (800fad0 <__mdiff+0x10c>)
 800fa18:	4602      	mov	r2, r0
 800fa1a:	f240 2145 	movw	r1, #581	; 0x245
 800fa1e:	e7e5      	b.n	800f9ec <__mdiff+0x28>
 800fa20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa24:	6926      	ldr	r6, [r4, #16]
 800fa26:	60c5      	str	r5, [r0, #12]
 800fa28:	f104 0914 	add.w	r9, r4, #20
 800fa2c:	f108 0514 	add.w	r5, r8, #20
 800fa30:	f100 0e14 	add.w	lr, r0, #20
 800fa34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fa38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fa3c:	f108 0210 	add.w	r2, r8, #16
 800fa40:	46f2      	mov	sl, lr
 800fa42:	2100      	movs	r1, #0
 800fa44:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fa4c:	fa11 f88b 	uxtah	r8, r1, fp
 800fa50:	b299      	uxth	r1, r3
 800fa52:	0c1b      	lsrs	r3, r3, #16
 800fa54:	eba8 0801 	sub.w	r8, r8, r1
 800fa58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fa5c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fa60:	fa1f f888 	uxth.w	r8, r8
 800fa64:	1419      	asrs	r1, r3, #16
 800fa66:	454e      	cmp	r6, r9
 800fa68:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fa6c:	f84a 3b04 	str.w	r3, [sl], #4
 800fa70:	d8e8      	bhi.n	800fa44 <__mdiff+0x80>
 800fa72:	1b33      	subs	r3, r6, r4
 800fa74:	3b15      	subs	r3, #21
 800fa76:	f023 0303 	bic.w	r3, r3, #3
 800fa7a:	3304      	adds	r3, #4
 800fa7c:	3415      	adds	r4, #21
 800fa7e:	42a6      	cmp	r6, r4
 800fa80:	bf38      	it	cc
 800fa82:	2304      	movcc	r3, #4
 800fa84:	441d      	add	r5, r3
 800fa86:	4473      	add	r3, lr
 800fa88:	469e      	mov	lr, r3
 800fa8a:	462e      	mov	r6, r5
 800fa8c:	4566      	cmp	r6, ip
 800fa8e:	d30e      	bcc.n	800faae <__mdiff+0xea>
 800fa90:	f10c 0203 	add.w	r2, ip, #3
 800fa94:	1b52      	subs	r2, r2, r5
 800fa96:	f022 0203 	bic.w	r2, r2, #3
 800fa9a:	3d03      	subs	r5, #3
 800fa9c:	45ac      	cmp	ip, r5
 800fa9e:	bf38      	it	cc
 800faa0:	2200      	movcc	r2, #0
 800faa2:	4413      	add	r3, r2
 800faa4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800faa8:	b17a      	cbz	r2, 800faca <__mdiff+0x106>
 800faaa:	6107      	str	r7, [r0, #16]
 800faac:	e7a4      	b.n	800f9f8 <__mdiff+0x34>
 800faae:	f856 8b04 	ldr.w	r8, [r6], #4
 800fab2:	fa11 f288 	uxtah	r2, r1, r8
 800fab6:	1414      	asrs	r4, r2, #16
 800fab8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fabc:	b292      	uxth	r2, r2
 800fabe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fac2:	f84e 2b04 	str.w	r2, [lr], #4
 800fac6:	1421      	asrs	r1, r4, #16
 800fac8:	e7e0      	b.n	800fa8c <__mdiff+0xc8>
 800faca:	3f01      	subs	r7, #1
 800facc:	e7ea      	b.n	800faa4 <__mdiff+0xe0>
 800face:	bf00      	nop
 800fad0:	08010f70 	.word	0x08010f70
 800fad4:	08010ff8 	.word	0x08010ff8

0800fad8 <__ulp>:
 800fad8:	b082      	sub	sp, #8
 800fada:	ed8d 0b00 	vstr	d0, [sp]
 800fade:	9a01      	ldr	r2, [sp, #4]
 800fae0:	4b0f      	ldr	r3, [pc, #60]	; (800fb20 <__ulp+0x48>)
 800fae2:	4013      	ands	r3, r2
 800fae4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800fae8:	2b00      	cmp	r3, #0
 800faea:	dc08      	bgt.n	800fafe <__ulp+0x26>
 800faec:	425b      	negs	r3, r3
 800faee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800faf2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800faf6:	da04      	bge.n	800fb02 <__ulp+0x2a>
 800faf8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fafc:	4113      	asrs	r3, r2
 800fafe:	2200      	movs	r2, #0
 800fb00:	e008      	b.n	800fb14 <__ulp+0x3c>
 800fb02:	f1a2 0314 	sub.w	r3, r2, #20
 800fb06:	2b1e      	cmp	r3, #30
 800fb08:	bfda      	itte	le
 800fb0a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800fb0e:	40da      	lsrle	r2, r3
 800fb10:	2201      	movgt	r2, #1
 800fb12:	2300      	movs	r3, #0
 800fb14:	4619      	mov	r1, r3
 800fb16:	4610      	mov	r0, r2
 800fb18:	ec41 0b10 	vmov	d0, r0, r1
 800fb1c:	b002      	add	sp, #8
 800fb1e:	4770      	bx	lr
 800fb20:	7ff00000 	.word	0x7ff00000

0800fb24 <__b2d>:
 800fb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb28:	6906      	ldr	r6, [r0, #16]
 800fb2a:	f100 0814 	add.w	r8, r0, #20
 800fb2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fb32:	1f37      	subs	r7, r6, #4
 800fb34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fb38:	4610      	mov	r0, r2
 800fb3a:	f7ff fd53 	bl	800f5e4 <__hi0bits>
 800fb3e:	f1c0 0320 	rsb	r3, r0, #32
 800fb42:	280a      	cmp	r0, #10
 800fb44:	600b      	str	r3, [r1, #0]
 800fb46:	491b      	ldr	r1, [pc, #108]	; (800fbb4 <__b2d+0x90>)
 800fb48:	dc15      	bgt.n	800fb76 <__b2d+0x52>
 800fb4a:	f1c0 0c0b 	rsb	ip, r0, #11
 800fb4e:	fa22 f30c 	lsr.w	r3, r2, ip
 800fb52:	45b8      	cmp	r8, r7
 800fb54:	ea43 0501 	orr.w	r5, r3, r1
 800fb58:	bf34      	ite	cc
 800fb5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fb5e:	2300      	movcs	r3, #0
 800fb60:	3015      	adds	r0, #21
 800fb62:	fa02 f000 	lsl.w	r0, r2, r0
 800fb66:	fa23 f30c 	lsr.w	r3, r3, ip
 800fb6a:	4303      	orrs	r3, r0
 800fb6c:	461c      	mov	r4, r3
 800fb6e:	ec45 4b10 	vmov	d0, r4, r5
 800fb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb76:	45b8      	cmp	r8, r7
 800fb78:	bf3a      	itte	cc
 800fb7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fb7e:	f1a6 0708 	subcc.w	r7, r6, #8
 800fb82:	2300      	movcs	r3, #0
 800fb84:	380b      	subs	r0, #11
 800fb86:	d012      	beq.n	800fbae <__b2d+0x8a>
 800fb88:	f1c0 0120 	rsb	r1, r0, #32
 800fb8c:	fa23 f401 	lsr.w	r4, r3, r1
 800fb90:	4082      	lsls	r2, r0
 800fb92:	4322      	orrs	r2, r4
 800fb94:	4547      	cmp	r7, r8
 800fb96:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800fb9a:	bf8c      	ite	hi
 800fb9c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fba0:	2200      	movls	r2, #0
 800fba2:	4083      	lsls	r3, r0
 800fba4:	40ca      	lsrs	r2, r1
 800fba6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	e7de      	b.n	800fb6c <__b2d+0x48>
 800fbae:	ea42 0501 	orr.w	r5, r2, r1
 800fbb2:	e7db      	b.n	800fb6c <__b2d+0x48>
 800fbb4:	3ff00000 	.word	0x3ff00000

0800fbb8 <__d2b>:
 800fbb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fbbc:	460f      	mov	r7, r1
 800fbbe:	2101      	movs	r1, #1
 800fbc0:	ec59 8b10 	vmov	r8, r9, d0
 800fbc4:	4616      	mov	r6, r2
 800fbc6:	f7ff fc1b 	bl	800f400 <_Balloc>
 800fbca:	4604      	mov	r4, r0
 800fbcc:	b930      	cbnz	r0, 800fbdc <__d2b+0x24>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	4b24      	ldr	r3, [pc, #144]	; (800fc64 <__d2b+0xac>)
 800fbd2:	4825      	ldr	r0, [pc, #148]	; (800fc68 <__d2b+0xb0>)
 800fbd4:	f240 310f 	movw	r1, #783	; 0x30f
 800fbd8:	f000 f98a 	bl	800fef0 <__assert_func>
 800fbdc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fbe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fbe4:	bb2d      	cbnz	r5, 800fc32 <__d2b+0x7a>
 800fbe6:	9301      	str	r3, [sp, #4]
 800fbe8:	f1b8 0300 	subs.w	r3, r8, #0
 800fbec:	d026      	beq.n	800fc3c <__d2b+0x84>
 800fbee:	4668      	mov	r0, sp
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	f7ff fd17 	bl	800f624 <__lo0bits>
 800fbf6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fbfa:	b1e8      	cbz	r0, 800fc38 <__d2b+0x80>
 800fbfc:	f1c0 0320 	rsb	r3, r0, #32
 800fc00:	fa02 f303 	lsl.w	r3, r2, r3
 800fc04:	430b      	orrs	r3, r1
 800fc06:	40c2      	lsrs	r2, r0
 800fc08:	6163      	str	r3, [r4, #20]
 800fc0a:	9201      	str	r2, [sp, #4]
 800fc0c:	9b01      	ldr	r3, [sp, #4]
 800fc0e:	61a3      	str	r3, [r4, #24]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	bf14      	ite	ne
 800fc14:	2202      	movne	r2, #2
 800fc16:	2201      	moveq	r2, #1
 800fc18:	6122      	str	r2, [r4, #16]
 800fc1a:	b1bd      	cbz	r5, 800fc4c <__d2b+0x94>
 800fc1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fc20:	4405      	add	r5, r0
 800fc22:	603d      	str	r5, [r7, #0]
 800fc24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc28:	6030      	str	r0, [r6, #0]
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	b003      	add	sp, #12
 800fc2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc36:	e7d6      	b.n	800fbe6 <__d2b+0x2e>
 800fc38:	6161      	str	r1, [r4, #20]
 800fc3a:	e7e7      	b.n	800fc0c <__d2b+0x54>
 800fc3c:	a801      	add	r0, sp, #4
 800fc3e:	f7ff fcf1 	bl	800f624 <__lo0bits>
 800fc42:	9b01      	ldr	r3, [sp, #4]
 800fc44:	6163      	str	r3, [r4, #20]
 800fc46:	3020      	adds	r0, #32
 800fc48:	2201      	movs	r2, #1
 800fc4a:	e7e5      	b.n	800fc18 <__d2b+0x60>
 800fc4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc54:	6038      	str	r0, [r7, #0]
 800fc56:	6918      	ldr	r0, [r3, #16]
 800fc58:	f7ff fcc4 	bl	800f5e4 <__hi0bits>
 800fc5c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc60:	e7e2      	b.n	800fc28 <__d2b+0x70>
 800fc62:	bf00      	nop
 800fc64:	08010f70 	.word	0x08010f70
 800fc68:	08010ff8 	.word	0x08010ff8

0800fc6c <__ratio>:
 800fc6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc70:	4688      	mov	r8, r1
 800fc72:	4669      	mov	r1, sp
 800fc74:	4681      	mov	r9, r0
 800fc76:	f7ff ff55 	bl	800fb24 <__b2d>
 800fc7a:	a901      	add	r1, sp, #4
 800fc7c:	4640      	mov	r0, r8
 800fc7e:	ec55 4b10 	vmov	r4, r5, d0
 800fc82:	f7ff ff4f 	bl	800fb24 <__b2d>
 800fc86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc8a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fc8e:	eba3 0c02 	sub.w	ip, r3, r2
 800fc92:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fc96:	1a9b      	subs	r3, r3, r2
 800fc98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fc9c:	ec51 0b10 	vmov	r0, r1, d0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	bfd6      	itet	le
 800fca4:	460a      	movle	r2, r1
 800fca6:	462a      	movgt	r2, r5
 800fca8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fcac:	468b      	mov	fp, r1
 800fcae:	462f      	mov	r7, r5
 800fcb0:	bfd4      	ite	le
 800fcb2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fcb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fcba:	4620      	mov	r0, r4
 800fcbc:	ee10 2a10 	vmov	r2, s0
 800fcc0:	465b      	mov	r3, fp
 800fcc2:	4639      	mov	r1, r7
 800fcc4:	f7f0 fdba 	bl	800083c <__aeabi_ddiv>
 800fcc8:	ec41 0b10 	vmov	d0, r0, r1
 800fccc:	b003      	add	sp, #12
 800fcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fcd2 <__copybits>:
 800fcd2:	3901      	subs	r1, #1
 800fcd4:	b570      	push	{r4, r5, r6, lr}
 800fcd6:	1149      	asrs	r1, r1, #5
 800fcd8:	6914      	ldr	r4, [r2, #16]
 800fcda:	3101      	adds	r1, #1
 800fcdc:	f102 0314 	add.w	r3, r2, #20
 800fce0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fce4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fce8:	1f05      	subs	r5, r0, #4
 800fcea:	42a3      	cmp	r3, r4
 800fcec:	d30c      	bcc.n	800fd08 <__copybits+0x36>
 800fcee:	1aa3      	subs	r3, r4, r2
 800fcf0:	3b11      	subs	r3, #17
 800fcf2:	f023 0303 	bic.w	r3, r3, #3
 800fcf6:	3211      	adds	r2, #17
 800fcf8:	42a2      	cmp	r2, r4
 800fcfa:	bf88      	it	hi
 800fcfc:	2300      	movhi	r3, #0
 800fcfe:	4418      	add	r0, r3
 800fd00:	2300      	movs	r3, #0
 800fd02:	4288      	cmp	r0, r1
 800fd04:	d305      	bcc.n	800fd12 <__copybits+0x40>
 800fd06:	bd70      	pop	{r4, r5, r6, pc}
 800fd08:	f853 6b04 	ldr.w	r6, [r3], #4
 800fd0c:	f845 6f04 	str.w	r6, [r5, #4]!
 800fd10:	e7eb      	b.n	800fcea <__copybits+0x18>
 800fd12:	f840 3b04 	str.w	r3, [r0], #4
 800fd16:	e7f4      	b.n	800fd02 <__copybits+0x30>

0800fd18 <__any_on>:
 800fd18:	f100 0214 	add.w	r2, r0, #20
 800fd1c:	6900      	ldr	r0, [r0, #16]
 800fd1e:	114b      	asrs	r3, r1, #5
 800fd20:	4298      	cmp	r0, r3
 800fd22:	b510      	push	{r4, lr}
 800fd24:	db11      	blt.n	800fd4a <__any_on+0x32>
 800fd26:	dd0a      	ble.n	800fd3e <__any_on+0x26>
 800fd28:	f011 011f 	ands.w	r1, r1, #31
 800fd2c:	d007      	beq.n	800fd3e <__any_on+0x26>
 800fd2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fd32:	fa24 f001 	lsr.w	r0, r4, r1
 800fd36:	fa00 f101 	lsl.w	r1, r0, r1
 800fd3a:	428c      	cmp	r4, r1
 800fd3c:	d10b      	bne.n	800fd56 <__any_on+0x3e>
 800fd3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d803      	bhi.n	800fd4e <__any_on+0x36>
 800fd46:	2000      	movs	r0, #0
 800fd48:	bd10      	pop	{r4, pc}
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	e7f7      	b.n	800fd3e <__any_on+0x26>
 800fd4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd52:	2900      	cmp	r1, #0
 800fd54:	d0f5      	beq.n	800fd42 <__any_on+0x2a>
 800fd56:	2001      	movs	r0, #1
 800fd58:	e7f6      	b.n	800fd48 <__any_on+0x30>

0800fd5a <__ascii_wctomb>:
 800fd5a:	b149      	cbz	r1, 800fd70 <__ascii_wctomb+0x16>
 800fd5c:	2aff      	cmp	r2, #255	; 0xff
 800fd5e:	bf85      	ittet	hi
 800fd60:	238a      	movhi	r3, #138	; 0x8a
 800fd62:	6003      	strhi	r3, [r0, #0]
 800fd64:	700a      	strbls	r2, [r1, #0]
 800fd66:	f04f 30ff 	movhi.w	r0, #4294967295
 800fd6a:	bf98      	it	ls
 800fd6c:	2001      	movls	r0, #1
 800fd6e:	4770      	bx	lr
 800fd70:	4608      	mov	r0, r1
 800fd72:	4770      	bx	lr

0800fd74 <__sflush_r>:
 800fd74:	898a      	ldrh	r2, [r1, #12]
 800fd76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd7a:	4605      	mov	r5, r0
 800fd7c:	0710      	lsls	r0, r2, #28
 800fd7e:	460c      	mov	r4, r1
 800fd80:	d458      	bmi.n	800fe34 <__sflush_r+0xc0>
 800fd82:	684b      	ldr	r3, [r1, #4]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	dc05      	bgt.n	800fd94 <__sflush_r+0x20>
 800fd88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	dc02      	bgt.n	800fd94 <__sflush_r+0x20>
 800fd8e:	2000      	movs	r0, #0
 800fd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd96:	2e00      	cmp	r6, #0
 800fd98:	d0f9      	beq.n	800fd8e <__sflush_r+0x1a>
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fda0:	682f      	ldr	r7, [r5, #0]
 800fda2:	6a21      	ldr	r1, [r4, #32]
 800fda4:	602b      	str	r3, [r5, #0]
 800fda6:	d032      	beq.n	800fe0e <__sflush_r+0x9a>
 800fda8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdaa:	89a3      	ldrh	r3, [r4, #12]
 800fdac:	075a      	lsls	r2, r3, #29
 800fdae:	d505      	bpl.n	800fdbc <__sflush_r+0x48>
 800fdb0:	6863      	ldr	r3, [r4, #4]
 800fdb2:	1ac0      	subs	r0, r0, r3
 800fdb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fdb6:	b10b      	cbz	r3, 800fdbc <__sflush_r+0x48>
 800fdb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fdba:	1ac0      	subs	r0, r0, r3
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdc2:	6a21      	ldr	r1, [r4, #32]
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	47b0      	blx	r6
 800fdc8:	1c43      	adds	r3, r0, #1
 800fdca:	89a3      	ldrh	r3, [r4, #12]
 800fdcc:	d106      	bne.n	800fddc <__sflush_r+0x68>
 800fdce:	6829      	ldr	r1, [r5, #0]
 800fdd0:	291d      	cmp	r1, #29
 800fdd2:	d82b      	bhi.n	800fe2c <__sflush_r+0xb8>
 800fdd4:	4a29      	ldr	r2, [pc, #164]	; (800fe7c <__sflush_r+0x108>)
 800fdd6:	410a      	asrs	r2, r1
 800fdd8:	07d6      	lsls	r6, r2, #31
 800fdda:	d427      	bmi.n	800fe2c <__sflush_r+0xb8>
 800fddc:	2200      	movs	r2, #0
 800fdde:	6062      	str	r2, [r4, #4]
 800fde0:	04d9      	lsls	r1, r3, #19
 800fde2:	6922      	ldr	r2, [r4, #16]
 800fde4:	6022      	str	r2, [r4, #0]
 800fde6:	d504      	bpl.n	800fdf2 <__sflush_r+0x7e>
 800fde8:	1c42      	adds	r2, r0, #1
 800fdea:	d101      	bne.n	800fdf0 <__sflush_r+0x7c>
 800fdec:	682b      	ldr	r3, [r5, #0]
 800fdee:	b903      	cbnz	r3, 800fdf2 <__sflush_r+0x7e>
 800fdf0:	6560      	str	r0, [r4, #84]	; 0x54
 800fdf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdf4:	602f      	str	r7, [r5, #0]
 800fdf6:	2900      	cmp	r1, #0
 800fdf8:	d0c9      	beq.n	800fd8e <__sflush_r+0x1a>
 800fdfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fdfe:	4299      	cmp	r1, r3
 800fe00:	d002      	beq.n	800fe08 <__sflush_r+0x94>
 800fe02:	4628      	mov	r0, r5
 800fe04:	f7fe fe9a 	bl	800eb3c <_free_r>
 800fe08:	2000      	movs	r0, #0
 800fe0a:	6360      	str	r0, [r4, #52]	; 0x34
 800fe0c:	e7c0      	b.n	800fd90 <__sflush_r+0x1c>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	4628      	mov	r0, r5
 800fe12:	47b0      	blx	r6
 800fe14:	1c41      	adds	r1, r0, #1
 800fe16:	d1c8      	bne.n	800fdaa <__sflush_r+0x36>
 800fe18:	682b      	ldr	r3, [r5, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d0c5      	beq.n	800fdaa <__sflush_r+0x36>
 800fe1e:	2b1d      	cmp	r3, #29
 800fe20:	d001      	beq.n	800fe26 <__sflush_r+0xb2>
 800fe22:	2b16      	cmp	r3, #22
 800fe24:	d101      	bne.n	800fe2a <__sflush_r+0xb6>
 800fe26:	602f      	str	r7, [r5, #0]
 800fe28:	e7b1      	b.n	800fd8e <__sflush_r+0x1a>
 800fe2a:	89a3      	ldrh	r3, [r4, #12]
 800fe2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe30:	81a3      	strh	r3, [r4, #12]
 800fe32:	e7ad      	b.n	800fd90 <__sflush_r+0x1c>
 800fe34:	690f      	ldr	r7, [r1, #16]
 800fe36:	2f00      	cmp	r7, #0
 800fe38:	d0a9      	beq.n	800fd8e <__sflush_r+0x1a>
 800fe3a:	0793      	lsls	r3, r2, #30
 800fe3c:	680e      	ldr	r6, [r1, #0]
 800fe3e:	bf08      	it	eq
 800fe40:	694b      	ldreq	r3, [r1, #20]
 800fe42:	600f      	str	r7, [r1, #0]
 800fe44:	bf18      	it	ne
 800fe46:	2300      	movne	r3, #0
 800fe48:	eba6 0807 	sub.w	r8, r6, r7
 800fe4c:	608b      	str	r3, [r1, #8]
 800fe4e:	f1b8 0f00 	cmp.w	r8, #0
 800fe52:	dd9c      	ble.n	800fd8e <__sflush_r+0x1a>
 800fe54:	6a21      	ldr	r1, [r4, #32]
 800fe56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe58:	4643      	mov	r3, r8
 800fe5a:	463a      	mov	r2, r7
 800fe5c:	4628      	mov	r0, r5
 800fe5e:	47b0      	blx	r6
 800fe60:	2800      	cmp	r0, #0
 800fe62:	dc06      	bgt.n	800fe72 <__sflush_r+0xfe>
 800fe64:	89a3      	ldrh	r3, [r4, #12]
 800fe66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe6a:	81a3      	strh	r3, [r4, #12]
 800fe6c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe70:	e78e      	b.n	800fd90 <__sflush_r+0x1c>
 800fe72:	4407      	add	r7, r0
 800fe74:	eba8 0800 	sub.w	r8, r8, r0
 800fe78:	e7e9      	b.n	800fe4e <__sflush_r+0xda>
 800fe7a:	bf00      	nop
 800fe7c:	dfbffffe 	.word	0xdfbffffe

0800fe80 <_fflush_r>:
 800fe80:	b538      	push	{r3, r4, r5, lr}
 800fe82:	690b      	ldr	r3, [r1, #16]
 800fe84:	4605      	mov	r5, r0
 800fe86:	460c      	mov	r4, r1
 800fe88:	b913      	cbnz	r3, 800fe90 <_fflush_r+0x10>
 800fe8a:	2500      	movs	r5, #0
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	bd38      	pop	{r3, r4, r5, pc}
 800fe90:	b118      	cbz	r0, 800fe9a <_fflush_r+0x1a>
 800fe92:	6a03      	ldr	r3, [r0, #32]
 800fe94:	b90b      	cbnz	r3, 800fe9a <_fflush_r+0x1a>
 800fe96:	f7fe fd3b 	bl	800e910 <__sinit>
 800fe9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d0f3      	beq.n	800fe8a <_fflush_r+0xa>
 800fea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fea4:	07d0      	lsls	r0, r2, #31
 800fea6:	d404      	bmi.n	800feb2 <_fflush_r+0x32>
 800fea8:	0599      	lsls	r1, r3, #22
 800feaa:	d402      	bmi.n	800feb2 <_fflush_r+0x32>
 800feac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feae:	f7fe fe34 	bl	800eb1a <__retarget_lock_acquire_recursive>
 800feb2:	4628      	mov	r0, r5
 800feb4:	4621      	mov	r1, r4
 800feb6:	f7ff ff5d 	bl	800fd74 <__sflush_r>
 800feba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800febc:	07da      	lsls	r2, r3, #31
 800febe:	4605      	mov	r5, r0
 800fec0:	d4e4      	bmi.n	800fe8c <_fflush_r+0xc>
 800fec2:	89a3      	ldrh	r3, [r4, #12]
 800fec4:	059b      	lsls	r3, r3, #22
 800fec6:	d4e1      	bmi.n	800fe8c <_fflush_r+0xc>
 800fec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feca:	f7fe fe27 	bl	800eb1c <__retarget_lock_release_recursive>
 800fece:	e7dd      	b.n	800fe8c <_fflush_r+0xc>

0800fed0 <_sbrk_r>:
 800fed0:	b538      	push	{r3, r4, r5, lr}
 800fed2:	4d06      	ldr	r5, [pc, #24]	; (800feec <_sbrk_r+0x1c>)
 800fed4:	2300      	movs	r3, #0
 800fed6:	4604      	mov	r4, r0
 800fed8:	4608      	mov	r0, r1
 800feda:	602b      	str	r3, [r5, #0]
 800fedc:	f7f2 fcca 	bl	8002874 <_sbrk>
 800fee0:	1c43      	adds	r3, r0, #1
 800fee2:	d102      	bne.n	800feea <_sbrk_r+0x1a>
 800fee4:	682b      	ldr	r3, [r5, #0]
 800fee6:	b103      	cbz	r3, 800feea <_sbrk_r+0x1a>
 800fee8:	6023      	str	r3, [r4, #0]
 800feea:	bd38      	pop	{r3, r4, r5, pc}
 800feec:	200009e4 	.word	0x200009e4

0800fef0 <__assert_func>:
 800fef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fef2:	4614      	mov	r4, r2
 800fef4:	461a      	mov	r2, r3
 800fef6:	4b09      	ldr	r3, [pc, #36]	; (800ff1c <__assert_func+0x2c>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	4605      	mov	r5, r0
 800fefc:	68d8      	ldr	r0, [r3, #12]
 800fefe:	b14c      	cbz	r4, 800ff14 <__assert_func+0x24>
 800ff00:	4b07      	ldr	r3, [pc, #28]	; (800ff20 <__assert_func+0x30>)
 800ff02:	9100      	str	r1, [sp, #0]
 800ff04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff08:	4906      	ldr	r1, [pc, #24]	; (800ff24 <__assert_func+0x34>)
 800ff0a:	462b      	mov	r3, r5
 800ff0c:	f000 f82c 	bl	800ff68 <fiprintf>
 800ff10:	f000 f83c 	bl	800ff8c <abort>
 800ff14:	4b04      	ldr	r3, [pc, #16]	; (800ff28 <__assert_func+0x38>)
 800ff16:	461c      	mov	r4, r3
 800ff18:	e7f3      	b.n	800ff02 <__assert_func+0x12>
 800ff1a:	bf00      	nop
 800ff1c:	200001e4 	.word	0x200001e4
 800ff20:	08011255 	.word	0x08011255
 800ff24:	08011262 	.word	0x08011262
 800ff28:	08011290 	.word	0x08011290

0800ff2c <_calloc_r>:
 800ff2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff2e:	fba1 2402 	umull	r2, r4, r1, r2
 800ff32:	b94c      	cbnz	r4, 800ff48 <_calloc_r+0x1c>
 800ff34:	4611      	mov	r1, r2
 800ff36:	9201      	str	r2, [sp, #4]
 800ff38:	f7ff f9c4 	bl	800f2c4 <_malloc_r>
 800ff3c:	9a01      	ldr	r2, [sp, #4]
 800ff3e:	4605      	mov	r5, r0
 800ff40:	b930      	cbnz	r0, 800ff50 <_calloc_r+0x24>
 800ff42:	4628      	mov	r0, r5
 800ff44:	b003      	add	sp, #12
 800ff46:	bd30      	pop	{r4, r5, pc}
 800ff48:	220c      	movs	r2, #12
 800ff4a:	6002      	str	r2, [r0, #0]
 800ff4c:	2500      	movs	r5, #0
 800ff4e:	e7f8      	b.n	800ff42 <_calloc_r+0x16>
 800ff50:	4621      	mov	r1, r4
 800ff52:	f7fe fd56 	bl	800ea02 <memset>
 800ff56:	e7f4      	b.n	800ff42 <_calloc_r+0x16>

0800ff58 <malloc>:
 800ff58:	4b02      	ldr	r3, [pc, #8]	; (800ff64 <malloc+0xc>)
 800ff5a:	4601      	mov	r1, r0
 800ff5c:	6818      	ldr	r0, [r3, #0]
 800ff5e:	f7ff b9b1 	b.w	800f2c4 <_malloc_r>
 800ff62:	bf00      	nop
 800ff64:	200001e4 	.word	0x200001e4

0800ff68 <fiprintf>:
 800ff68:	b40e      	push	{r1, r2, r3}
 800ff6a:	b503      	push	{r0, r1, lr}
 800ff6c:	4601      	mov	r1, r0
 800ff6e:	ab03      	add	r3, sp, #12
 800ff70:	4805      	ldr	r0, [pc, #20]	; (800ff88 <fiprintf+0x20>)
 800ff72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff76:	6800      	ldr	r0, [r0, #0]
 800ff78:	9301      	str	r3, [sp, #4]
 800ff7a:	f000 f837 	bl	800ffec <_vfiprintf_r>
 800ff7e:	b002      	add	sp, #8
 800ff80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff84:	b003      	add	sp, #12
 800ff86:	4770      	bx	lr
 800ff88:	200001e4 	.word	0x200001e4

0800ff8c <abort>:
 800ff8c:	b508      	push	{r3, lr}
 800ff8e:	2006      	movs	r0, #6
 800ff90:	f000 fb94 	bl	80106bc <raise>
 800ff94:	2001      	movs	r0, #1
 800ff96:	f7f2 fbf5 	bl	8002784 <_exit>

0800ff9a <__sfputc_r>:
 800ff9a:	6893      	ldr	r3, [r2, #8]
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	b410      	push	{r4}
 800ffa2:	6093      	str	r3, [r2, #8]
 800ffa4:	da08      	bge.n	800ffb8 <__sfputc_r+0x1e>
 800ffa6:	6994      	ldr	r4, [r2, #24]
 800ffa8:	42a3      	cmp	r3, r4
 800ffaa:	db01      	blt.n	800ffb0 <__sfputc_r+0x16>
 800ffac:	290a      	cmp	r1, #10
 800ffae:	d103      	bne.n	800ffb8 <__sfputc_r+0x1e>
 800ffb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffb4:	f000 bac4 	b.w	8010540 <__swbuf_r>
 800ffb8:	6813      	ldr	r3, [r2, #0]
 800ffba:	1c58      	adds	r0, r3, #1
 800ffbc:	6010      	str	r0, [r2, #0]
 800ffbe:	7019      	strb	r1, [r3, #0]
 800ffc0:	4608      	mov	r0, r1
 800ffc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <__sfputs_r>:
 800ffc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffca:	4606      	mov	r6, r0
 800ffcc:	460f      	mov	r7, r1
 800ffce:	4614      	mov	r4, r2
 800ffd0:	18d5      	adds	r5, r2, r3
 800ffd2:	42ac      	cmp	r4, r5
 800ffd4:	d101      	bne.n	800ffda <__sfputs_r+0x12>
 800ffd6:	2000      	movs	r0, #0
 800ffd8:	e007      	b.n	800ffea <__sfputs_r+0x22>
 800ffda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffde:	463a      	mov	r2, r7
 800ffe0:	4630      	mov	r0, r6
 800ffe2:	f7ff ffda 	bl	800ff9a <__sfputc_r>
 800ffe6:	1c43      	adds	r3, r0, #1
 800ffe8:	d1f3      	bne.n	800ffd2 <__sfputs_r+0xa>
 800ffea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ffec <_vfiprintf_r>:
 800ffec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fff0:	460d      	mov	r5, r1
 800fff2:	b09d      	sub	sp, #116	; 0x74
 800fff4:	4614      	mov	r4, r2
 800fff6:	4698      	mov	r8, r3
 800fff8:	4606      	mov	r6, r0
 800fffa:	b118      	cbz	r0, 8010004 <_vfiprintf_r+0x18>
 800fffc:	6a03      	ldr	r3, [r0, #32]
 800fffe:	b90b      	cbnz	r3, 8010004 <_vfiprintf_r+0x18>
 8010000:	f7fe fc86 	bl	800e910 <__sinit>
 8010004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010006:	07d9      	lsls	r1, r3, #31
 8010008:	d405      	bmi.n	8010016 <_vfiprintf_r+0x2a>
 801000a:	89ab      	ldrh	r3, [r5, #12]
 801000c:	059a      	lsls	r2, r3, #22
 801000e:	d402      	bmi.n	8010016 <_vfiprintf_r+0x2a>
 8010010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010012:	f7fe fd82 	bl	800eb1a <__retarget_lock_acquire_recursive>
 8010016:	89ab      	ldrh	r3, [r5, #12]
 8010018:	071b      	lsls	r3, r3, #28
 801001a:	d501      	bpl.n	8010020 <_vfiprintf_r+0x34>
 801001c:	692b      	ldr	r3, [r5, #16]
 801001e:	b99b      	cbnz	r3, 8010048 <_vfiprintf_r+0x5c>
 8010020:	4629      	mov	r1, r5
 8010022:	4630      	mov	r0, r6
 8010024:	f000 faca 	bl	80105bc <__swsetup_r>
 8010028:	b170      	cbz	r0, 8010048 <_vfiprintf_r+0x5c>
 801002a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801002c:	07dc      	lsls	r4, r3, #31
 801002e:	d504      	bpl.n	801003a <_vfiprintf_r+0x4e>
 8010030:	f04f 30ff 	mov.w	r0, #4294967295
 8010034:	b01d      	add	sp, #116	; 0x74
 8010036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801003a:	89ab      	ldrh	r3, [r5, #12]
 801003c:	0598      	lsls	r0, r3, #22
 801003e:	d4f7      	bmi.n	8010030 <_vfiprintf_r+0x44>
 8010040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010042:	f7fe fd6b 	bl	800eb1c <__retarget_lock_release_recursive>
 8010046:	e7f3      	b.n	8010030 <_vfiprintf_r+0x44>
 8010048:	2300      	movs	r3, #0
 801004a:	9309      	str	r3, [sp, #36]	; 0x24
 801004c:	2320      	movs	r3, #32
 801004e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010052:	f8cd 800c 	str.w	r8, [sp, #12]
 8010056:	2330      	movs	r3, #48	; 0x30
 8010058:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801020c <_vfiprintf_r+0x220>
 801005c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010060:	f04f 0901 	mov.w	r9, #1
 8010064:	4623      	mov	r3, r4
 8010066:	469a      	mov	sl, r3
 8010068:	f813 2b01 	ldrb.w	r2, [r3], #1
 801006c:	b10a      	cbz	r2, 8010072 <_vfiprintf_r+0x86>
 801006e:	2a25      	cmp	r2, #37	; 0x25
 8010070:	d1f9      	bne.n	8010066 <_vfiprintf_r+0x7a>
 8010072:	ebba 0b04 	subs.w	fp, sl, r4
 8010076:	d00b      	beq.n	8010090 <_vfiprintf_r+0xa4>
 8010078:	465b      	mov	r3, fp
 801007a:	4622      	mov	r2, r4
 801007c:	4629      	mov	r1, r5
 801007e:	4630      	mov	r0, r6
 8010080:	f7ff ffa2 	bl	800ffc8 <__sfputs_r>
 8010084:	3001      	adds	r0, #1
 8010086:	f000 80a9 	beq.w	80101dc <_vfiprintf_r+0x1f0>
 801008a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801008c:	445a      	add	r2, fp
 801008e:	9209      	str	r2, [sp, #36]	; 0x24
 8010090:	f89a 3000 	ldrb.w	r3, [sl]
 8010094:	2b00      	cmp	r3, #0
 8010096:	f000 80a1 	beq.w	80101dc <_vfiprintf_r+0x1f0>
 801009a:	2300      	movs	r3, #0
 801009c:	f04f 32ff 	mov.w	r2, #4294967295
 80100a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100a4:	f10a 0a01 	add.w	sl, sl, #1
 80100a8:	9304      	str	r3, [sp, #16]
 80100aa:	9307      	str	r3, [sp, #28]
 80100ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100b0:	931a      	str	r3, [sp, #104]	; 0x68
 80100b2:	4654      	mov	r4, sl
 80100b4:	2205      	movs	r2, #5
 80100b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ba:	4854      	ldr	r0, [pc, #336]	; (801020c <_vfiprintf_r+0x220>)
 80100bc:	f7f0 f888 	bl	80001d0 <memchr>
 80100c0:	9a04      	ldr	r2, [sp, #16]
 80100c2:	b9d8      	cbnz	r0, 80100fc <_vfiprintf_r+0x110>
 80100c4:	06d1      	lsls	r1, r2, #27
 80100c6:	bf44      	itt	mi
 80100c8:	2320      	movmi	r3, #32
 80100ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100ce:	0713      	lsls	r3, r2, #28
 80100d0:	bf44      	itt	mi
 80100d2:	232b      	movmi	r3, #43	; 0x2b
 80100d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100d8:	f89a 3000 	ldrb.w	r3, [sl]
 80100dc:	2b2a      	cmp	r3, #42	; 0x2a
 80100de:	d015      	beq.n	801010c <_vfiprintf_r+0x120>
 80100e0:	9a07      	ldr	r2, [sp, #28]
 80100e2:	4654      	mov	r4, sl
 80100e4:	2000      	movs	r0, #0
 80100e6:	f04f 0c0a 	mov.w	ip, #10
 80100ea:	4621      	mov	r1, r4
 80100ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100f0:	3b30      	subs	r3, #48	; 0x30
 80100f2:	2b09      	cmp	r3, #9
 80100f4:	d94d      	bls.n	8010192 <_vfiprintf_r+0x1a6>
 80100f6:	b1b0      	cbz	r0, 8010126 <_vfiprintf_r+0x13a>
 80100f8:	9207      	str	r2, [sp, #28]
 80100fa:	e014      	b.n	8010126 <_vfiprintf_r+0x13a>
 80100fc:	eba0 0308 	sub.w	r3, r0, r8
 8010100:	fa09 f303 	lsl.w	r3, r9, r3
 8010104:	4313      	orrs	r3, r2
 8010106:	9304      	str	r3, [sp, #16]
 8010108:	46a2      	mov	sl, r4
 801010a:	e7d2      	b.n	80100b2 <_vfiprintf_r+0xc6>
 801010c:	9b03      	ldr	r3, [sp, #12]
 801010e:	1d19      	adds	r1, r3, #4
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	9103      	str	r1, [sp, #12]
 8010114:	2b00      	cmp	r3, #0
 8010116:	bfbb      	ittet	lt
 8010118:	425b      	neglt	r3, r3
 801011a:	f042 0202 	orrlt.w	r2, r2, #2
 801011e:	9307      	strge	r3, [sp, #28]
 8010120:	9307      	strlt	r3, [sp, #28]
 8010122:	bfb8      	it	lt
 8010124:	9204      	strlt	r2, [sp, #16]
 8010126:	7823      	ldrb	r3, [r4, #0]
 8010128:	2b2e      	cmp	r3, #46	; 0x2e
 801012a:	d10c      	bne.n	8010146 <_vfiprintf_r+0x15a>
 801012c:	7863      	ldrb	r3, [r4, #1]
 801012e:	2b2a      	cmp	r3, #42	; 0x2a
 8010130:	d134      	bne.n	801019c <_vfiprintf_r+0x1b0>
 8010132:	9b03      	ldr	r3, [sp, #12]
 8010134:	1d1a      	adds	r2, r3, #4
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	9203      	str	r2, [sp, #12]
 801013a:	2b00      	cmp	r3, #0
 801013c:	bfb8      	it	lt
 801013e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010142:	3402      	adds	r4, #2
 8010144:	9305      	str	r3, [sp, #20]
 8010146:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801021c <_vfiprintf_r+0x230>
 801014a:	7821      	ldrb	r1, [r4, #0]
 801014c:	2203      	movs	r2, #3
 801014e:	4650      	mov	r0, sl
 8010150:	f7f0 f83e 	bl	80001d0 <memchr>
 8010154:	b138      	cbz	r0, 8010166 <_vfiprintf_r+0x17a>
 8010156:	9b04      	ldr	r3, [sp, #16]
 8010158:	eba0 000a 	sub.w	r0, r0, sl
 801015c:	2240      	movs	r2, #64	; 0x40
 801015e:	4082      	lsls	r2, r0
 8010160:	4313      	orrs	r3, r2
 8010162:	3401      	adds	r4, #1
 8010164:	9304      	str	r3, [sp, #16]
 8010166:	f814 1b01 	ldrb.w	r1, [r4], #1
 801016a:	4829      	ldr	r0, [pc, #164]	; (8010210 <_vfiprintf_r+0x224>)
 801016c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010170:	2206      	movs	r2, #6
 8010172:	f7f0 f82d 	bl	80001d0 <memchr>
 8010176:	2800      	cmp	r0, #0
 8010178:	d03f      	beq.n	80101fa <_vfiprintf_r+0x20e>
 801017a:	4b26      	ldr	r3, [pc, #152]	; (8010214 <_vfiprintf_r+0x228>)
 801017c:	bb1b      	cbnz	r3, 80101c6 <_vfiprintf_r+0x1da>
 801017e:	9b03      	ldr	r3, [sp, #12]
 8010180:	3307      	adds	r3, #7
 8010182:	f023 0307 	bic.w	r3, r3, #7
 8010186:	3308      	adds	r3, #8
 8010188:	9303      	str	r3, [sp, #12]
 801018a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801018c:	443b      	add	r3, r7
 801018e:	9309      	str	r3, [sp, #36]	; 0x24
 8010190:	e768      	b.n	8010064 <_vfiprintf_r+0x78>
 8010192:	fb0c 3202 	mla	r2, ip, r2, r3
 8010196:	460c      	mov	r4, r1
 8010198:	2001      	movs	r0, #1
 801019a:	e7a6      	b.n	80100ea <_vfiprintf_r+0xfe>
 801019c:	2300      	movs	r3, #0
 801019e:	3401      	adds	r4, #1
 80101a0:	9305      	str	r3, [sp, #20]
 80101a2:	4619      	mov	r1, r3
 80101a4:	f04f 0c0a 	mov.w	ip, #10
 80101a8:	4620      	mov	r0, r4
 80101aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101ae:	3a30      	subs	r2, #48	; 0x30
 80101b0:	2a09      	cmp	r2, #9
 80101b2:	d903      	bls.n	80101bc <_vfiprintf_r+0x1d0>
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d0c6      	beq.n	8010146 <_vfiprintf_r+0x15a>
 80101b8:	9105      	str	r1, [sp, #20]
 80101ba:	e7c4      	b.n	8010146 <_vfiprintf_r+0x15a>
 80101bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80101c0:	4604      	mov	r4, r0
 80101c2:	2301      	movs	r3, #1
 80101c4:	e7f0      	b.n	80101a8 <_vfiprintf_r+0x1bc>
 80101c6:	ab03      	add	r3, sp, #12
 80101c8:	9300      	str	r3, [sp, #0]
 80101ca:	462a      	mov	r2, r5
 80101cc:	4b12      	ldr	r3, [pc, #72]	; (8010218 <_vfiprintf_r+0x22c>)
 80101ce:	a904      	add	r1, sp, #16
 80101d0:	4630      	mov	r0, r6
 80101d2:	f3af 8000 	nop.w
 80101d6:	4607      	mov	r7, r0
 80101d8:	1c78      	adds	r0, r7, #1
 80101da:	d1d6      	bne.n	801018a <_vfiprintf_r+0x19e>
 80101dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101de:	07d9      	lsls	r1, r3, #31
 80101e0:	d405      	bmi.n	80101ee <_vfiprintf_r+0x202>
 80101e2:	89ab      	ldrh	r3, [r5, #12]
 80101e4:	059a      	lsls	r2, r3, #22
 80101e6:	d402      	bmi.n	80101ee <_vfiprintf_r+0x202>
 80101e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101ea:	f7fe fc97 	bl	800eb1c <__retarget_lock_release_recursive>
 80101ee:	89ab      	ldrh	r3, [r5, #12]
 80101f0:	065b      	lsls	r3, r3, #25
 80101f2:	f53f af1d 	bmi.w	8010030 <_vfiprintf_r+0x44>
 80101f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101f8:	e71c      	b.n	8010034 <_vfiprintf_r+0x48>
 80101fa:	ab03      	add	r3, sp, #12
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	462a      	mov	r2, r5
 8010200:	4b05      	ldr	r3, [pc, #20]	; (8010218 <_vfiprintf_r+0x22c>)
 8010202:	a904      	add	r1, sp, #16
 8010204:	4630      	mov	r0, r6
 8010206:	f000 f879 	bl	80102fc <_printf_i>
 801020a:	e7e4      	b.n	80101d6 <_vfiprintf_r+0x1ea>
 801020c:	08011291 	.word	0x08011291
 8010210:	0801129b 	.word	0x0801129b
 8010214:	00000000 	.word	0x00000000
 8010218:	0800ffc9 	.word	0x0800ffc9
 801021c:	08011297 	.word	0x08011297

08010220 <_printf_common>:
 8010220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010224:	4616      	mov	r6, r2
 8010226:	4699      	mov	r9, r3
 8010228:	688a      	ldr	r2, [r1, #8]
 801022a:	690b      	ldr	r3, [r1, #16]
 801022c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010230:	4293      	cmp	r3, r2
 8010232:	bfb8      	it	lt
 8010234:	4613      	movlt	r3, r2
 8010236:	6033      	str	r3, [r6, #0]
 8010238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801023c:	4607      	mov	r7, r0
 801023e:	460c      	mov	r4, r1
 8010240:	b10a      	cbz	r2, 8010246 <_printf_common+0x26>
 8010242:	3301      	adds	r3, #1
 8010244:	6033      	str	r3, [r6, #0]
 8010246:	6823      	ldr	r3, [r4, #0]
 8010248:	0699      	lsls	r1, r3, #26
 801024a:	bf42      	ittt	mi
 801024c:	6833      	ldrmi	r3, [r6, #0]
 801024e:	3302      	addmi	r3, #2
 8010250:	6033      	strmi	r3, [r6, #0]
 8010252:	6825      	ldr	r5, [r4, #0]
 8010254:	f015 0506 	ands.w	r5, r5, #6
 8010258:	d106      	bne.n	8010268 <_printf_common+0x48>
 801025a:	f104 0a19 	add.w	sl, r4, #25
 801025e:	68e3      	ldr	r3, [r4, #12]
 8010260:	6832      	ldr	r2, [r6, #0]
 8010262:	1a9b      	subs	r3, r3, r2
 8010264:	42ab      	cmp	r3, r5
 8010266:	dc26      	bgt.n	80102b6 <_printf_common+0x96>
 8010268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801026c:	1e13      	subs	r3, r2, #0
 801026e:	6822      	ldr	r2, [r4, #0]
 8010270:	bf18      	it	ne
 8010272:	2301      	movne	r3, #1
 8010274:	0692      	lsls	r2, r2, #26
 8010276:	d42b      	bmi.n	80102d0 <_printf_common+0xb0>
 8010278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801027c:	4649      	mov	r1, r9
 801027e:	4638      	mov	r0, r7
 8010280:	47c0      	blx	r8
 8010282:	3001      	adds	r0, #1
 8010284:	d01e      	beq.n	80102c4 <_printf_common+0xa4>
 8010286:	6823      	ldr	r3, [r4, #0]
 8010288:	6922      	ldr	r2, [r4, #16]
 801028a:	f003 0306 	and.w	r3, r3, #6
 801028e:	2b04      	cmp	r3, #4
 8010290:	bf02      	ittt	eq
 8010292:	68e5      	ldreq	r5, [r4, #12]
 8010294:	6833      	ldreq	r3, [r6, #0]
 8010296:	1aed      	subeq	r5, r5, r3
 8010298:	68a3      	ldr	r3, [r4, #8]
 801029a:	bf0c      	ite	eq
 801029c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102a0:	2500      	movne	r5, #0
 80102a2:	4293      	cmp	r3, r2
 80102a4:	bfc4      	itt	gt
 80102a6:	1a9b      	subgt	r3, r3, r2
 80102a8:	18ed      	addgt	r5, r5, r3
 80102aa:	2600      	movs	r6, #0
 80102ac:	341a      	adds	r4, #26
 80102ae:	42b5      	cmp	r5, r6
 80102b0:	d11a      	bne.n	80102e8 <_printf_common+0xc8>
 80102b2:	2000      	movs	r0, #0
 80102b4:	e008      	b.n	80102c8 <_printf_common+0xa8>
 80102b6:	2301      	movs	r3, #1
 80102b8:	4652      	mov	r2, sl
 80102ba:	4649      	mov	r1, r9
 80102bc:	4638      	mov	r0, r7
 80102be:	47c0      	blx	r8
 80102c0:	3001      	adds	r0, #1
 80102c2:	d103      	bne.n	80102cc <_printf_common+0xac>
 80102c4:	f04f 30ff 	mov.w	r0, #4294967295
 80102c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102cc:	3501      	adds	r5, #1
 80102ce:	e7c6      	b.n	801025e <_printf_common+0x3e>
 80102d0:	18e1      	adds	r1, r4, r3
 80102d2:	1c5a      	adds	r2, r3, #1
 80102d4:	2030      	movs	r0, #48	; 0x30
 80102d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102da:	4422      	add	r2, r4
 80102dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102e4:	3302      	adds	r3, #2
 80102e6:	e7c7      	b.n	8010278 <_printf_common+0x58>
 80102e8:	2301      	movs	r3, #1
 80102ea:	4622      	mov	r2, r4
 80102ec:	4649      	mov	r1, r9
 80102ee:	4638      	mov	r0, r7
 80102f0:	47c0      	blx	r8
 80102f2:	3001      	adds	r0, #1
 80102f4:	d0e6      	beq.n	80102c4 <_printf_common+0xa4>
 80102f6:	3601      	adds	r6, #1
 80102f8:	e7d9      	b.n	80102ae <_printf_common+0x8e>
	...

080102fc <_printf_i>:
 80102fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010300:	7e0f      	ldrb	r7, [r1, #24]
 8010302:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010304:	2f78      	cmp	r7, #120	; 0x78
 8010306:	4691      	mov	r9, r2
 8010308:	4680      	mov	r8, r0
 801030a:	460c      	mov	r4, r1
 801030c:	469a      	mov	sl, r3
 801030e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010312:	d807      	bhi.n	8010324 <_printf_i+0x28>
 8010314:	2f62      	cmp	r7, #98	; 0x62
 8010316:	d80a      	bhi.n	801032e <_printf_i+0x32>
 8010318:	2f00      	cmp	r7, #0
 801031a:	f000 80d4 	beq.w	80104c6 <_printf_i+0x1ca>
 801031e:	2f58      	cmp	r7, #88	; 0x58
 8010320:	f000 80c0 	beq.w	80104a4 <_printf_i+0x1a8>
 8010324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801032c:	e03a      	b.n	80103a4 <_printf_i+0xa8>
 801032e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010332:	2b15      	cmp	r3, #21
 8010334:	d8f6      	bhi.n	8010324 <_printf_i+0x28>
 8010336:	a101      	add	r1, pc, #4	; (adr r1, 801033c <_printf_i+0x40>)
 8010338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801033c:	08010395 	.word	0x08010395
 8010340:	080103a9 	.word	0x080103a9
 8010344:	08010325 	.word	0x08010325
 8010348:	08010325 	.word	0x08010325
 801034c:	08010325 	.word	0x08010325
 8010350:	08010325 	.word	0x08010325
 8010354:	080103a9 	.word	0x080103a9
 8010358:	08010325 	.word	0x08010325
 801035c:	08010325 	.word	0x08010325
 8010360:	08010325 	.word	0x08010325
 8010364:	08010325 	.word	0x08010325
 8010368:	080104ad 	.word	0x080104ad
 801036c:	080103d5 	.word	0x080103d5
 8010370:	08010467 	.word	0x08010467
 8010374:	08010325 	.word	0x08010325
 8010378:	08010325 	.word	0x08010325
 801037c:	080104cf 	.word	0x080104cf
 8010380:	08010325 	.word	0x08010325
 8010384:	080103d5 	.word	0x080103d5
 8010388:	08010325 	.word	0x08010325
 801038c:	08010325 	.word	0x08010325
 8010390:	0801046f 	.word	0x0801046f
 8010394:	682b      	ldr	r3, [r5, #0]
 8010396:	1d1a      	adds	r2, r3, #4
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	602a      	str	r2, [r5, #0]
 801039c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103a4:	2301      	movs	r3, #1
 80103a6:	e09f      	b.n	80104e8 <_printf_i+0x1ec>
 80103a8:	6820      	ldr	r0, [r4, #0]
 80103aa:	682b      	ldr	r3, [r5, #0]
 80103ac:	0607      	lsls	r7, r0, #24
 80103ae:	f103 0104 	add.w	r1, r3, #4
 80103b2:	6029      	str	r1, [r5, #0]
 80103b4:	d501      	bpl.n	80103ba <_printf_i+0xbe>
 80103b6:	681e      	ldr	r6, [r3, #0]
 80103b8:	e003      	b.n	80103c2 <_printf_i+0xc6>
 80103ba:	0646      	lsls	r6, r0, #25
 80103bc:	d5fb      	bpl.n	80103b6 <_printf_i+0xba>
 80103be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80103c2:	2e00      	cmp	r6, #0
 80103c4:	da03      	bge.n	80103ce <_printf_i+0xd2>
 80103c6:	232d      	movs	r3, #45	; 0x2d
 80103c8:	4276      	negs	r6, r6
 80103ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103ce:	485a      	ldr	r0, [pc, #360]	; (8010538 <_printf_i+0x23c>)
 80103d0:	230a      	movs	r3, #10
 80103d2:	e012      	b.n	80103fa <_printf_i+0xfe>
 80103d4:	682b      	ldr	r3, [r5, #0]
 80103d6:	6820      	ldr	r0, [r4, #0]
 80103d8:	1d19      	adds	r1, r3, #4
 80103da:	6029      	str	r1, [r5, #0]
 80103dc:	0605      	lsls	r5, r0, #24
 80103de:	d501      	bpl.n	80103e4 <_printf_i+0xe8>
 80103e0:	681e      	ldr	r6, [r3, #0]
 80103e2:	e002      	b.n	80103ea <_printf_i+0xee>
 80103e4:	0641      	lsls	r1, r0, #25
 80103e6:	d5fb      	bpl.n	80103e0 <_printf_i+0xe4>
 80103e8:	881e      	ldrh	r6, [r3, #0]
 80103ea:	4853      	ldr	r0, [pc, #332]	; (8010538 <_printf_i+0x23c>)
 80103ec:	2f6f      	cmp	r7, #111	; 0x6f
 80103ee:	bf0c      	ite	eq
 80103f0:	2308      	moveq	r3, #8
 80103f2:	230a      	movne	r3, #10
 80103f4:	2100      	movs	r1, #0
 80103f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103fa:	6865      	ldr	r5, [r4, #4]
 80103fc:	60a5      	str	r5, [r4, #8]
 80103fe:	2d00      	cmp	r5, #0
 8010400:	bfa2      	ittt	ge
 8010402:	6821      	ldrge	r1, [r4, #0]
 8010404:	f021 0104 	bicge.w	r1, r1, #4
 8010408:	6021      	strge	r1, [r4, #0]
 801040a:	b90e      	cbnz	r6, 8010410 <_printf_i+0x114>
 801040c:	2d00      	cmp	r5, #0
 801040e:	d04b      	beq.n	80104a8 <_printf_i+0x1ac>
 8010410:	4615      	mov	r5, r2
 8010412:	fbb6 f1f3 	udiv	r1, r6, r3
 8010416:	fb03 6711 	mls	r7, r3, r1, r6
 801041a:	5dc7      	ldrb	r7, [r0, r7]
 801041c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010420:	4637      	mov	r7, r6
 8010422:	42bb      	cmp	r3, r7
 8010424:	460e      	mov	r6, r1
 8010426:	d9f4      	bls.n	8010412 <_printf_i+0x116>
 8010428:	2b08      	cmp	r3, #8
 801042a:	d10b      	bne.n	8010444 <_printf_i+0x148>
 801042c:	6823      	ldr	r3, [r4, #0]
 801042e:	07de      	lsls	r6, r3, #31
 8010430:	d508      	bpl.n	8010444 <_printf_i+0x148>
 8010432:	6923      	ldr	r3, [r4, #16]
 8010434:	6861      	ldr	r1, [r4, #4]
 8010436:	4299      	cmp	r1, r3
 8010438:	bfde      	ittt	le
 801043a:	2330      	movle	r3, #48	; 0x30
 801043c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010440:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010444:	1b52      	subs	r2, r2, r5
 8010446:	6122      	str	r2, [r4, #16]
 8010448:	f8cd a000 	str.w	sl, [sp]
 801044c:	464b      	mov	r3, r9
 801044e:	aa03      	add	r2, sp, #12
 8010450:	4621      	mov	r1, r4
 8010452:	4640      	mov	r0, r8
 8010454:	f7ff fee4 	bl	8010220 <_printf_common>
 8010458:	3001      	adds	r0, #1
 801045a:	d14a      	bne.n	80104f2 <_printf_i+0x1f6>
 801045c:	f04f 30ff 	mov.w	r0, #4294967295
 8010460:	b004      	add	sp, #16
 8010462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	f043 0320 	orr.w	r3, r3, #32
 801046c:	6023      	str	r3, [r4, #0]
 801046e:	4833      	ldr	r0, [pc, #204]	; (801053c <_printf_i+0x240>)
 8010470:	2778      	movs	r7, #120	; 0x78
 8010472:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010476:	6823      	ldr	r3, [r4, #0]
 8010478:	6829      	ldr	r1, [r5, #0]
 801047a:	061f      	lsls	r7, r3, #24
 801047c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010480:	d402      	bmi.n	8010488 <_printf_i+0x18c>
 8010482:	065f      	lsls	r7, r3, #25
 8010484:	bf48      	it	mi
 8010486:	b2b6      	uxthmi	r6, r6
 8010488:	07df      	lsls	r7, r3, #31
 801048a:	bf48      	it	mi
 801048c:	f043 0320 	orrmi.w	r3, r3, #32
 8010490:	6029      	str	r1, [r5, #0]
 8010492:	bf48      	it	mi
 8010494:	6023      	strmi	r3, [r4, #0]
 8010496:	b91e      	cbnz	r6, 80104a0 <_printf_i+0x1a4>
 8010498:	6823      	ldr	r3, [r4, #0]
 801049a:	f023 0320 	bic.w	r3, r3, #32
 801049e:	6023      	str	r3, [r4, #0]
 80104a0:	2310      	movs	r3, #16
 80104a2:	e7a7      	b.n	80103f4 <_printf_i+0xf8>
 80104a4:	4824      	ldr	r0, [pc, #144]	; (8010538 <_printf_i+0x23c>)
 80104a6:	e7e4      	b.n	8010472 <_printf_i+0x176>
 80104a8:	4615      	mov	r5, r2
 80104aa:	e7bd      	b.n	8010428 <_printf_i+0x12c>
 80104ac:	682b      	ldr	r3, [r5, #0]
 80104ae:	6826      	ldr	r6, [r4, #0]
 80104b0:	6961      	ldr	r1, [r4, #20]
 80104b2:	1d18      	adds	r0, r3, #4
 80104b4:	6028      	str	r0, [r5, #0]
 80104b6:	0635      	lsls	r5, r6, #24
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	d501      	bpl.n	80104c0 <_printf_i+0x1c4>
 80104bc:	6019      	str	r1, [r3, #0]
 80104be:	e002      	b.n	80104c6 <_printf_i+0x1ca>
 80104c0:	0670      	lsls	r0, r6, #25
 80104c2:	d5fb      	bpl.n	80104bc <_printf_i+0x1c0>
 80104c4:	8019      	strh	r1, [r3, #0]
 80104c6:	2300      	movs	r3, #0
 80104c8:	6123      	str	r3, [r4, #16]
 80104ca:	4615      	mov	r5, r2
 80104cc:	e7bc      	b.n	8010448 <_printf_i+0x14c>
 80104ce:	682b      	ldr	r3, [r5, #0]
 80104d0:	1d1a      	adds	r2, r3, #4
 80104d2:	602a      	str	r2, [r5, #0]
 80104d4:	681d      	ldr	r5, [r3, #0]
 80104d6:	6862      	ldr	r2, [r4, #4]
 80104d8:	2100      	movs	r1, #0
 80104da:	4628      	mov	r0, r5
 80104dc:	f7ef fe78 	bl	80001d0 <memchr>
 80104e0:	b108      	cbz	r0, 80104e6 <_printf_i+0x1ea>
 80104e2:	1b40      	subs	r0, r0, r5
 80104e4:	6060      	str	r0, [r4, #4]
 80104e6:	6863      	ldr	r3, [r4, #4]
 80104e8:	6123      	str	r3, [r4, #16]
 80104ea:	2300      	movs	r3, #0
 80104ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104f0:	e7aa      	b.n	8010448 <_printf_i+0x14c>
 80104f2:	6923      	ldr	r3, [r4, #16]
 80104f4:	462a      	mov	r2, r5
 80104f6:	4649      	mov	r1, r9
 80104f8:	4640      	mov	r0, r8
 80104fa:	47d0      	blx	sl
 80104fc:	3001      	adds	r0, #1
 80104fe:	d0ad      	beq.n	801045c <_printf_i+0x160>
 8010500:	6823      	ldr	r3, [r4, #0]
 8010502:	079b      	lsls	r3, r3, #30
 8010504:	d413      	bmi.n	801052e <_printf_i+0x232>
 8010506:	68e0      	ldr	r0, [r4, #12]
 8010508:	9b03      	ldr	r3, [sp, #12]
 801050a:	4298      	cmp	r0, r3
 801050c:	bfb8      	it	lt
 801050e:	4618      	movlt	r0, r3
 8010510:	e7a6      	b.n	8010460 <_printf_i+0x164>
 8010512:	2301      	movs	r3, #1
 8010514:	4632      	mov	r2, r6
 8010516:	4649      	mov	r1, r9
 8010518:	4640      	mov	r0, r8
 801051a:	47d0      	blx	sl
 801051c:	3001      	adds	r0, #1
 801051e:	d09d      	beq.n	801045c <_printf_i+0x160>
 8010520:	3501      	adds	r5, #1
 8010522:	68e3      	ldr	r3, [r4, #12]
 8010524:	9903      	ldr	r1, [sp, #12]
 8010526:	1a5b      	subs	r3, r3, r1
 8010528:	42ab      	cmp	r3, r5
 801052a:	dcf2      	bgt.n	8010512 <_printf_i+0x216>
 801052c:	e7eb      	b.n	8010506 <_printf_i+0x20a>
 801052e:	2500      	movs	r5, #0
 8010530:	f104 0619 	add.w	r6, r4, #25
 8010534:	e7f5      	b.n	8010522 <_printf_i+0x226>
 8010536:	bf00      	nop
 8010538:	080112a2 	.word	0x080112a2
 801053c:	080112b3 	.word	0x080112b3

08010540 <__swbuf_r>:
 8010540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010542:	460e      	mov	r6, r1
 8010544:	4614      	mov	r4, r2
 8010546:	4605      	mov	r5, r0
 8010548:	b118      	cbz	r0, 8010552 <__swbuf_r+0x12>
 801054a:	6a03      	ldr	r3, [r0, #32]
 801054c:	b90b      	cbnz	r3, 8010552 <__swbuf_r+0x12>
 801054e:	f7fe f9df 	bl	800e910 <__sinit>
 8010552:	69a3      	ldr	r3, [r4, #24]
 8010554:	60a3      	str	r3, [r4, #8]
 8010556:	89a3      	ldrh	r3, [r4, #12]
 8010558:	071a      	lsls	r2, r3, #28
 801055a:	d525      	bpl.n	80105a8 <__swbuf_r+0x68>
 801055c:	6923      	ldr	r3, [r4, #16]
 801055e:	b31b      	cbz	r3, 80105a8 <__swbuf_r+0x68>
 8010560:	6823      	ldr	r3, [r4, #0]
 8010562:	6922      	ldr	r2, [r4, #16]
 8010564:	1a98      	subs	r0, r3, r2
 8010566:	6963      	ldr	r3, [r4, #20]
 8010568:	b2f6      	uxtb	r6, r6
 801056a:	4283      	cmp	r3, r0
 801056c:	4637      	mov	r7, r6
 801056e:	dc04      	bgt.n	801057a <__swbuf_r+0x3a>
 8010570:	4621      	mov	r1, r4
 8010572:	4628      	mov	r0, r5
 8010574:	f7ff fc84 	bl	800fe80 <_fflush_r>
 8010578:	b9e0      	cbnz	r0, 80105b4 <__swbuf_r+0x74>
 801057a:	68a3      	ldr	r3, [r4, #8]
 801057c:	3b01      	subs	r3, #1
 801057e:	60a3      	str	r3, [r4, #8]
 8010580:	6823      	ldr	r3, [r4, #0]
 8010582:	1c5a      	adds	r2, r3, #1
 8010584:	6022      	str	r2, [r4, #0]
 8010586:	701e      	strb	r6, [r3, #0]
 8010588:	6962      	ldr	r2, [r4, #20]
 801058a:	1c43      	adds	r3, r0, #1
 801058c:	429a      	cmp	r2, r3
 801058e:	d004      	beq.n	801059a <__swbuf_r+0x5a>
 8010590:	89a3      	ldrh	r3, [r4, #12]
 8010592:	07db      	lsls	r3, r3, #31
 8010594:	d506      	bpl.n	80105a4 <__swbuf_r+0x64>
 8010596:	2e0a      	cmp	r6, #10
 8010598:	d104      	bne.n	80105a4 <__swbuf_r+0x64>
 801059a:	4621      	mov	r1, r4
 801059c:	4628      	mov	r0, r5
 801059e:	f7ff fc6f 	bl	800fe80 <_fflush_r>
 80105a2:	b938      	cbnz	r0, 80105b4 <__swbuf_r+0x74>
 80105a4:	4638      	mov	r0, r7
 80105a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105a8:	4621      	mov	r1, r4
 80105aa:	4628      	mov	r0, r5
 80105ac:	f000 f806 	bl	80105bc <__swsetup_r>
 80105b0:	2800      	cmp	r0, #0
 80105b2:	d0d5      	beq.n	8010560 <__swbuf_r+0x20>
 80105b4:	f04f 37ff 	mov.w	r7, #4294967295
 80105b8:	e7f4      	b.n	80105a4 <__swbuf_r+0x64>
	...

080105bc <__swsetup_r>:
 80105bc:	b538      	push	{r3, r4, r5, lr}
 80105be:	4b2a      	ldr	r3, [pc, #168]	; (8010668 <__swsetup_r+0xac>)
 80105c0:	4605      	mov	r5, r0
 80105c2:	6818      	ldr	r0, [r3, #0]
 80105c4:	460c      	mov	r4, r1
 80105c6:	b118      	cbz	r0, 80105d0 <__swsetup_r+0x14>
 80105c8:	6a03      	ldr	r3, [r0, #32]
 80105ca:	b90b      	cbnz	r3, 80105d0 <__swsetup_r+0x14>
 80105cc:	f7fe f9a0 	bl	800e910 <__sinit>
 80105d0:	89a3      	ldrh	r3, [r4, #12]
 80105d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80105d6:	0718      	lsls	r0, r3, #28
 80105d8:	d422      	bmi.n	8010620 <__swsetup_r+0x64>
 80105da:	06d9      	lsls	r1, r3, #27
 80105dc:	d407      	bmi.n	80105ee <__swsetup_r+0x32>
 80105de:	2309      	movs	r3, #9
 80105e0:	602b      	str	r3, [r5, #0]
 80105e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80105e6:	81a3      	strh	r3, [r4, #12]
 80105e8:	f04f 30ff 	mov.w	r0, #4294967295
 80105ec:	e034      	b.n	8010658 <__swsetup_r+0x9c>
 80105ee:	0758      	lsls	r0, r3, #29
 80105f0:	d512      	bpl.n	8010618 <__swsetup_r+0x5c>
 80105f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105f4:	b141      	cbz	r1, 8010608 <__swsetup_r+0x4c>
 80105f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105fa:	4299      	cmp	r1, r3
 80105fc:	d002      	beq.n	8010604 <__swsetup_r+0x48>
 80105fe:	4628      	mov	r0, r5
 8010600:	f7fe fa9c 	bl	800eb3c <_free_r>
 8010604:	2300      	movs	r3, #0
 8010606:	6363      	str	r3, [r4, #52]	; 0x34
 8010608:	89a3      	ldrh	r3, [r4, #12]
 801060a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801060e:	81a3      	strh	r3, [r4, #12]
 8010610:	2300      	movs	r3, #0
 8010612:	6063      	str	r3, [r4, #4]
 8010614:	6923      	ldr	r3, [r4, #16]
 8010616:	6023      	str	r3, [r4, #0]
 8010618:	89a3      	ldrh	r3, [r4, #12]
 801061a:	f043 0308 	orr.w	r3, r3, #8
 801061e:	81a3      	strh	r3, [r4, #12]
 8010620:	6923      	ldr	r3, [r4, #16]
 8010622:	b94b      	cbnz	r3, 8010638 <__swsetup_r+0x7c>
 8010624:	89a3      	ldrh	r3, [r4, #12]
 8010626:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801062a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801062e:	d003      	beq.n	8010638 <__swsetup_r+0x7c>
 8010630:	4621      	mov	r1, r4
 8010632:	4628      	mov	r0, r5
 8010634:	f000 f884 	bl	8010740 <__smakebuf_r>
 8010638:	89a0      	ldrh	r0, [r4, #12]
 801063a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801063e:	f010 0301 	ands.w	r3, r0, #1
 8010642:	d00a      	beq.n	801065a <__swsetup_r+0x9e>
 8010644:	2300      	movs	r3, #0
 8010646:	60a3      	str	r3, [r4, #8]
 8010648:	6963      	ldr	r3, [r4, #20]
 801064a:	425b      	negs	r3, r3
 801064c:	61a3      	str	r3, [r4, #24]
 801064e:	6923      	ldr	r3, [r4, #16]
 8010650:	b943      	cbnz	r3, 8010664 <__swsetup_r+0xa8>
 8010652:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010656:	d1c4      	bne.n	80105e2 <__swsetup_r+0x26>
 8010658:	bd38      	pop	{r3, r4, r5, pc}
 801065a:	0781      	lsls	r1, r0, #30
 801065c:	bf58      	it	pl
 801065e:	6963      	ldrpl	r3, [r4, #20]
 8010660:	60a3      	str	r3, [r4, #8]
 8010662:	e7f4      	b.n	801064e <__swsetup_r+0x92>
 8010664:	2000      	movs	r0, #0
 8010666:	e7f7      	b.n	8010658 <__swsetup_r+0x9c>
 8010668:	200001e4 	.word	0x200001e4

0801066c <_raise_r>:
 801066c:	291f      	cmp	r1, #31
 801066e:	b538      	push	{r3, r4, r5, lr}
 8010670:	4604      	mov	r4, r0
 8010672:	460d      	mov	r5, r1
 8010674:	d904      	bls.n	8010680 <_raise_r+0x14>
 8010676:	2316      	movs	r3, #22
 8010678:	6003      	str	r3, [r0, #0]
 801067a:	f04f 30ff 	mov.w	r0, #4294967295
 801067e:	bd38      	pop	{r3, r4, r5, pc}
 8010680:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010682:	b112      	cbz	r2, 801068a <_raise_r+0x1e>
 8010684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010688:	b94b      	cbnz	r3, 801069e <_raise_r+0x32>
 801068a:	4620      	mov	r0, r4
 801068c:	f000 f830 	bl	80106f0 <_getpid_r>
 8010690:	462a      	mov	r2, r5
 8010692:	4601      	mov	r1, r0
 8010694:	4620      	mov	r0, r4
 8010696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801069a:	f000 b817 	b.w	80106cc <_kill_r>
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d00a      	beq.n	80106b8 <_raise_r+0x4c>
 80106a2:	1c59      	adds	r1, r3, #1
 80106a4:	d103      	bne.n	80106ae <_raise_r+0x42>
 80106a6:	2316      	movs	r3, #22
 80106a8:	6003      	str	r3, [r0, #0]
 80106aa:	2001      	movs	r0, #1
 80106ac:	e7e7      	b.n	801067e <_raise_r+0x12>
 80106ae:	2400      	movs	r4, #0
 80106b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80106b4:	4628      	mov	r0, r5
 80106b6:	4798      	blx	r3
 80106b8:	2000      	movs	r0, #0
 80106ba:	e7e0      	b.n	801067e <_raise_r+0x12>

080106bc <raise>:
 80106bc:	4b02      	ldr	r3, [pc, #8]	; (80106c8 <raise+0xc>)
 80106be:	4601      	mov	r1, r0
 80106c0:	6818      	ldr	r0, [r3, #0]
 80106c2:	f7ff bfd3 	b.w	801066c <_raise_r>
 80106c6:	bf00      	nop
 80106c8:	200001e4 	.word	0x200001e4

080106cc <_kill_r>:
 80106cc:	b538      	push	{r3, r4, r5, lr}
 80106ce:	4d07      	ldr	r5, [pc, #28]	; (80106ec <_kill_r+0x20>)
 80106d0:	2300      	movs	r3, #0
 80106d2:	4604      	mov	r4, r0
 80106d4:	4608      	mov	r0, r1
 80106d6:	4611      	mov	r1, r2
 80106d8:	602b      	str	r3, [r5, #0]
 80106da:	f7f2 f843 	bl	8002764 <_kill>
 80106de:	1c43      	adds	r3, r0, #1
 80106e0:	d102      	bne.n	80106e8 <_kill_r+0x1c>
 80106e2:	682b      	ldr	r3, [r5, #0]
 80106e4:	b103      	cbz	r3, 80106e8 <_kill_r+0x1c>
 80106e6:	6023      	str	r3, [r4, #0]
 80106e8:	bd38      	pop	{r3, r4, r5, pc}
 80106ea:	bf00      	nop
 80106ec:	200009e4 	.word	0x200009e4

080106f0 <_getpid_r>:
 80106f0:	f7f2 b830 	b.w	8002754 <_getpid>

080106f4 <__swhatbuf_r>:
 80106f4:	b570      	push	{r4, r5, r6, lr}
 80106f6:	460c      	mov	r4, r1
 80106f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106fc:	2900      	cmp	r1, #0
 80106fe:	b096      	sub	sp, #88	; 0x58
 8010700:	4615      	mov	r5, r2
 8010702:	461e      	mov	r6, r3
 8010704:	da0d      	bge.n	8010722 <__swhatbuf_r+0x2e>
 8010706:	89a3      	ldrh	r3, [r4, #12]
 8010708:	f013 0f80 	tst.w	r3, #128	; 0x80
 801070c:	f04f 0100 	mov.w	r1, #0
 8010710:	bf0c      	ite	eq
 8010712:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010716:	2340      	movne	r3, #64	; 0x40
 8010718:	2000      	movs	r0, #0
 801071a:	6031      	str	r1, [r6, #0]
 801071c:	602b      	str	r3, [r5, #0]
 801071e:	b016      	add	sp, #88	; 0x58
 8010720:	bd70      	pop	{r4, r5, r6, pc}
 8010722:	466a      	mov	r2, sp
 8010724:	f000 f848 	bl	80107b8 <_fstat_r>
 8010728:	2800      	cmp	r0, #0
 801072a:	dbec      	blt.n	8010706 <__swhatbuf_r+0x12>
 801072c:	9901      	ldr	r1, [sp, #4]
 801072e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010732:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010736:	4259      	negs	r1, r3
 8010738:	4159      	adcs	r1, r3
 801073a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801073e:	e7eb      	b.n	8010718 <__swhatbuf_r+0x24>

08010740 <__smakebuf_r>:
 8010740:	898b      	ldrh	r3, [r1, #12]
 8010742:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010744:	079d      	lsls	r5, r3, #30
 8010746:	4606      	mov	r6, r0
 8010748:	460c      	mov	r4, r1
 801074a:	d507      	bpl.n	801075c <__smakebuf_r+0x1c>
 801074c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010750:	6023      	str	r3, [r4, #0]
 8010752:	6123      	str	r3, [r4, #16]
 8010754:	2301      	movs	r3, #1
 8010756:	6163      	str	r3, [r4, #20]
 8010758:	b002      	add	sp, #8
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	ab01      	add	r3, sp, #4
 801075e:	466a      	mov	r2, sp
 8010760:	f7ff ffc8 	bl	80106f4 <__swhatbuf_r>
 8010764:	9900      	ldr	r1, [sp, #0]
 8010766:	4605      	mov	r5, r0
 8010768:	4630      	mov	r0, r6
 801076a:	f7fe fdab 	bl	800f2c4 <_malloc_r>
 801076e:	b948      	cbnz	r0, 8010784 <__smakebuf_r+0x44>
 8010770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010774:	059a      	lsls	r2, r3, #22
 8010776:	d4ef      	bmi.n	8010758 <__smakebuf_r+0x18>
 8010778:	f023 0303 	bic.w	r3, r3, #3
 801077c:	f043 0302 	orr.w	r3, r3, #2
 8010780:	81a3      	strh	r3, [r4, #12]
 8010782:	e7e3      	b.n	801074c <__smakebuf_r+0xc>
 8010784:	89a3      	ldrh	r3, [r4, #12]
 8010786:	6020      	str	r0, [r4, #0]
 8010788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801078c:	81a3      	strh	r3, [r4, #12]
 801078e:	9b00      	ldr	r3, [sp, #0]
 8010790:	6163      	str	r3, [r4, #20]
 8010792:	9b01      	ldr	r3, [sp, #4]
 8010794:	6120      	str	r0, [r4, #16]
 8010796:	b15b      	cbz	r3, 80107b0 <__smakebuf_r+0x70>
 8010798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801079c:	4630      	mov	r0, r6
 801079e:	f000 f81d 	bl	80107dc <_isatty_r>
 80107a2:	b128      	cbz	r0, 80107b0 <__smakebuf_r+0x70>
 80107a4:	89a3      	ldrh	r3, [r4, #12]
 80107a6:	f023 0303 	bic.w	r3, r3, #3
 80107aa:	f043 0301 	orr.w	r3, r3, #1
 80107ae:	81a3      	strh	r3, [r4, #12]
 80107b0:	89a3      	ldrh	r3, [r4, #12]
 80107b2:	431d      	orrs	r5, r3
 80107b4:	81a5      	strh	r5, [r4, #12]
 80107b6:	e7cf      	b.n	8010758 <__smakebuf_r+0x18>

080107b8 <_fstat_r>:
 80107b8:	b538      	push	{r3, r4, r5, lr}
 80107ba:	4d07      	ldr	r5, [pc, #28]	; (80107d8 <_fstat_r+0x20>)
 80107bc:	2300      	movs	r3, #0
 80107be:	4604      	mov	r4, r0
 80107c0:	4608      	mov	r0, r1
 80107c2:	4611      	mov	r1, r2
 80107c4:	602b      	str	r3, [r5, #0]
 80107c6:	f7f2 f82c 	bl	8002822 <_fstat>
 80107ca:	1c43      	adds	r3, r0, #1
 80107cc:	d102      	bne.n	80107d4 <_fstat_r+0x1c>
 80107ce:	682b      	ldr	r3, [r5, #0]
 80107d0:	b103      	cbz	r3, 80107d4 <_fstat_r+0x1c>
 80107d2:	6023      	str	r3, [r4, #0]
 80107d4:	bd38      	pop	{r3, r4, r5, pc}
 80107d6:	bf00      	nop
 80107d8:	200009e4 	.word	0x200009e4

080107dc <_isatty_r>:
 80107dc:	b538      	push	{r3, r4, r5, lr}
 80107de:	4d06      	ldr	r5, [pc, #24]	; (80107f8 <_isatty_r+0x1c>)
 80107e0:	2300      	movs	r3, #0
 80107e2:	4604      	mov	r4, r0
 80107e4:	4608      	mov	r0, r1
 80107e6:	602b      	str	r3, [r5, #0]
 80107e8:	f7f2 f82b 	bl	8002842 <_isatty>
 80107ec:	1c43      	adds	r3, r0, #1
 80107ee:	d102      	bne.n	80107f6 <_isatty_r+0x1a>
 80107f0:	682b      	ldr	r3, [r5, #0]
 80107f2:	b103      	cbz	r3, 80107f6 <_isatty_r+0x1a>
 80107f4:	6023      	str	r3, [r4, #0]
 80107f6:	bd38      	pop	{r3, r4, r5, pc}
 80107f8:	200009e4 	.word	0x200009e4

080107fc <_init>:
 80107fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107fe:	bf00      	nop
 8010800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010802:	bc08      	pop	{r3}
 8010804:	469e      	mov	lr, r3
 8010806:	4770      	bx	lr

08010808 <_fini>:
 8010808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801080a:	bf00      	nop
 801080c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801080e:	bc08      	pop	{r3}
 8010810:	469e      	mov	lr, r3
 8010812:	4770      	bx	lr
