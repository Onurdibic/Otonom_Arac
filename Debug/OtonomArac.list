
OtonomArac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800f648  0800f648  0001f648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcec  0800fcec  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcec  0800fcec  0001fcec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcf4  0800fcf4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fcf4  0800fcf4  0001fcf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcfc  0800fcfc  0001fcfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800fd00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000810  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200009f8  200009f8  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d4e2  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000445d  00000000  00000000  0003d73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001420  00000000  00000000  00041ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f9b  00000000  00000000  00042fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027966  00000000  00000000  00043f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d406  00000000  00000000  0006b8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d57a0  00000000  00000000  00088cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006b34  00000000  00000000  0015e468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00164f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f62c 	.word	0x0800f62c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800f62c 	.word	0x0800f62c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_frsub>:
 8000c78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	e002      	b.n	8000c84 <__addsf3>
 8000c7e:	bf00      	nop

08000c80 <__aeabi_fsub>:
 8000c80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c84 <__addsf3>:
 8000c84:	0042      	lsls	r2, r0, #1
 8000c86:	bf1f      	itttt	ne
 8000c88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c8c:	ea92 0f03 	teqne	r2, r3
 8000c90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c98:	d06a      	beq.n	8000d70 <__addsf3+0xec>
 8000c9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ca2:	bfc1      	itttt	gt
 8000ca4:	18d2      	addgt	r2, r2, r3
 8000ca6:	4041      	eorgt	r1, r0
 8000ca8:	4048      	eorgt	r0, r1
 8000caa:	4041      	eorgt	r1, r0
 8000cac:	bfb8      	it	lt
 8000cae:	425b      	neglt	r3, r3
 8000cb0:	2b19      	cmp	r3, #25
 8000cb2:	bf88      	it	hi
 8000cb4:	4770      	bxhi	lr
 8000cb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cc2:	bf18      	it	ne
 8000cc4:	4240      	negne	r0, r0
 8000cc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4249      	negne	r1, r1
 8000cd6:	ea92 0f03 	teq	r2, r3
 8000cda:	d03f      	beq.n	8000d5c <__addsf3+0xd8>
 8000cdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ce0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ce4:	eb10 000c 	adds.w	r0, r0, ip
 8000ce8:	f1c3 0320 	rsb	r3, r3, #32
 8000cec:	fa01 f103 	lsl.w	r1, r1, r3
 8000cf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__addsf3+0x78>
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d00:	d313      	bcc.n	8000d2a <__addsf3+0xa6>
 8000d02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d06:	d306      	bcc.n	8000d16 <__addsf3+0x92>
 8000d08:	0840      	lsrs	r0, r0, #1
 8000d0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d0e:	f102 0201 	add.w	r2, r2, #1
 8000d12:	2afe      	cmp	r2, #254	; 0xfe
 8000d14:	d251      	bcs.n	8000dba <__addsf3+0x136>
 8000d16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d1e:	bf08      	it	eq
 8000d20:	f020 0001 	biceq.w	r0, r0, #1
 8000d24:	ea40 0003 	orr.w	r0, r0, r3
 8000d28:	4770      	bx	lr
 8000d2a:	0049      	lsls	r1, r1, #1
 8000d2c:	eb40 0000 	adc.w	r0, r0, r0
 8000d30:	3a01      	subs	r2, #1
 8000d32:	bf28      	it	cs
 8000d34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d38:	d2ed      	bcs.n	8000d16 <__addsf3+0x92>
 8000d3a:	fab0 fc80 	clz	ip, r0
 8000d3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d42:	ebb2 020c 	subs.w	r2, r2, ip
 8000d46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d4a:	bfaa      	itet	ge
 8000d4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d50:	4252      	neglt	r2, r2
 8000d52:	4318      	orrge	r0, r3
 8000d54:	bfbc      	itt	lt
 8000d56:	40d0      	lsrlt	r0, r2
 8000d58:	4318      	orrlt	r0, r3
 8000d5a:	4770      	bx	lr
 8000d5c:	f092 0f00 	teq	r2, #0
 8000d60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d64:	bf06      	itte	eq
 8000d66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d6a:	3201      	addeq	r2, #1
 8000d6c:	3b01      	subne	r3, #1
 8000d6e:	e7b5      	b.n	8000cdc <__addsf3+0x58>
 8000d70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d78:	bf18      	it	ne
 8000d7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d7e:	d021      	beq.n	8000dc4 <__addsf3+0x140>
 8000d80:	ea92 0f03 	teq	r2, r3
 8000d84:	d004      	beq.n	8000d90 <__addsf3+0x10c>
 8000d86:	f092 0f00 	teq	r2, #0
 8000d8a:	bf08      	it	eq
 8000d8c:	4608      	moveq	r0, r1
 8000d8e:	4770      	bx	lr
 8000d90:	ea90 0f01 	teq	r0, r1
 8000d94:	bf1c      	itt	ne
 8000d96:	2000      	movne	r0, #0
 8000d98:	4770      	bxne	lr
 8000d9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d9e:	d104      	bne.n	8000daa <__addsf3+0x126>
 8000da0:	0040      	lsls	r0, r0, #1
 8000da2:	bf28      	it	cs
 8000da4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000da8:	4770      	bx	lr
 8000daa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dae:	bf3c      	itt	cc
 8000db0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000db4:	4770      	bxcc	lr
 8000db6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	4770      	bx	lr
 8000dc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dc8:	bf16      	itet	ne
 8000dca:	4608      	movne	r0, r1
 8000dcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dd0:	4601      	movne	r1, r0
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	bf06      	itte	eq
 8000dd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dda:	ea90 0f01 	teqeq	r0, r1
 8000dde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000de2:	4770      	bx	lr

08000de4 <__aeabi_ui2f>:
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	e004      	b.n	8000df4 <__aeabi_i2f+0x8>
 8000dea:	bf00      	nop

08000dec <__aeabi_i2f>:
 8000dec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000df0:	bf48      	it	mi
 8000df2:	4240      	negmi	r0, r0
 8000df4:	ea5f 0c00 	movs.w	ip, r0
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e00:	4601      	mov	r1, r0
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	e01c      	b.n	8000e42 <__aeabi_l2f+0x2a>

08000e08 <__aeabi_ul2f>:
 8000e08:	ea50 0201 	orrs.w	r2, r0, r1
 8000e0c:	bf08      	it	eq
 8000e0e:	4770      	bxeq	lr
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e00a      	b.n	8000e2c <__aeabi_l2f+0x14>
 8000e16:	bf00      	nop

08000e18 <__aeabi_l2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__aeabi_l2f+0x14>
 8000e26:	4240      	negs	r0, r0
 8000e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e2c:	ea5f 0c01 	movs.w	ip, r1
 8000e30:	bf02      	ittt	eq
 8000e32:	4684      	moveq	ip, r0
 8000e34:	4601      	moveq	r1, r0
 8000e36:	2000      	moveq	r0, #0
 8000e38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e3c:	bf08      	it	eq
 8000e3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e46:	fabc f28c 	clz	r2, ip
 8000e4a:	3a08      	subs	r2, #8
 8000e4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e50:	db10      	blt.n	8000e74 <__aeabi_l2f+0x5c>
 8000e52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e56:	4463      	add	r3, ip
 8000e58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	f020 0001 	biceq.w	r0, r0, #1
 8000e72:	4770      	bx	lr
 8000e74:	f102 0220 	add.w	r2, r2, #32
 8000e78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e84:	fa21 f202 	lsr.w	r2, r1, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_uldivmod>:
 8000e94:	b953      	cbnz	r3, 8000eac <__aeabi_uldivmod+0x18>
 8000e96:	b94a      	cbnz	r2, 8000eac <__aeabi_uldivmod+0x18>
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	bf08      	it	eq
 8000e9c:	2800      	cmpeq	r0, #0
 8000e9e:	bf1c      	itt	ne
 8000ea0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ea4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ea8:	f000 b9a6 	b.w	80011f8 <__aeabi_idiv0>
 8000eac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eb4:	f000 f83c 	bl	8000f30 <__udivmoddi4>
 8000eb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ec0:	b004      	add	sp, #16
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_d2lz>:
 8000ec4:	b538      	push	{r3, r4, r5, lr}
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4604      	mov	r4, r0
 8000ecc:	460d      	mov	r5, r1
 8000ece:	f7ff fdfd 	bl	8000acc <__aeabi_dcmplt>
 8000ed2:	b928      	cbnz	r0, 8000ee0 <__aeabi_d2lz+0x1c>
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000edc:	f000 b80a 	b.w	8000ef4 <__aeabi_d2ulz>
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ee6:	f000 f805 	bl	8000ef4 <__aeabi_d2ulz>
 8000eea:	4240      	negs	r0, r0
 8000eec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_d2ulz>:
 8000ef4:	b5d0      	push	{r4, r6, r7, lr}
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__aeabi_d2ulz+0x34>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4606      	mov	r6, r0
 8000efc:	460f      	mov	r7, r1
 8000efe:	f7ff fb73 	bl	80005e8 <__aeabi_dmul>
 8000f02:	f7ff fe49 	bl	8000b98 <__aeabi_d2uiz>
 8000f06:	4604      	mov	r4, r0
 8000f08:	f7ff faf4 	bl	80004f4 <__aeabi_ui2d>
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <__aeabi_d2ulz+0x38>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f7ff fb6a 	bl	80005e8 <__aeabi_dmul>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4630      	mov	r0, r6
 8000f1a:	4639      	mov	r1, r7
 8000f1c:	f7ff f9ac 	bl	8000278 <__aeabi_dsub>
 8000f20:	f7ff fe3a 	bl	8000b98 <__aeabi_d2uiz>
 8000f24:	4621      	mov	r1, r4
 8000f26:	bdd0      	pop	{r4, r6, r7, pc}
 8000f28:	3df00000 	.word	0x3df00000
 8000f2c:	41f00000 	.word	0x41f00000

08000f30 <__udivmoddi4>:
 8000f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f34:	9e08      	ldr	r6, [sp, #32]
 8000f36:	460d      	mov	r5, r1
 8000f38:	4604      	mov	r4, r0
 8000f3a:	460f      	mov	r7, r1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d14a      	bne.n	8000fd6 <__udivmoddi4+0xa6>
 8000f40:	428a      	cmp	r2, r1
 8000f42:	4694      	mov	ip, r2
 8000f44:	d965      	bls.n	8001012 <__udivmoddi4+0xe2>
 8000f46:	fab2 f382 	clz	r3, r2
 8000f4a:	b143      	cbz	r3, 8000f5e <__udivmoddi4+0x2e>
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	f1c3 0220 	rsb	r2, r3, #32
 8000f54:	409f      	lsls	r7, r3
 8000f56:	fa20 f202 	lsr.w	r2, r0, r2
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	409c      	lsls	r4, r3
 8000f5e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f62:	fa1f f58c 	uxth.w	r5, ip
 8000f66:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f6a:	0c22      	lsrs	r2, r4, #16
 8000f6c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f70:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f74:	fb01 f005 	mul.w	r0, r1, r5
 8000f78:	4290      	cmp	r0, r2
 8000f7a:	d90a      	bls.n	8000f92 <__udivmoddi4+0x62>
 8000f7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f84:	f080 811c 	bcs.w	80011c0 <__udivmoddi4+0x290>
 8000f88:	4290      	cmp	r0, r2
 8000f8a:	f240 8119 	bls.w	80011c0 <__udivmoddi4+0x290>
 8000f8e:	3902      	subs	r1, #2
 8000f90:	4462      	add	r2, ip
 8000f92:	1a12      	subs	r2, r2, r0
 8000f94:	b2a4      	uxth	r4, r4
 8000f96:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f9a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fa2:	fb00 f505 	mul.w	r5, r0, r5
 8000fa6:	42a5      	cmp	r5, r4
 8000fa8:	d90a      	bls.n	8000fc0 <__udivmoddi4+0x90>
 8000faa:	eb1c 0404 	adds.w	r4, ip, r4
 8000fae:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fb2:	f080 8107 	bcs.w	80011c4 <__udivmoddi4+0x294>
 8000fb6:	42a5      	cmp	r5, r4
 8000fb8:	f240 8104 	bls.w	80011c4 <__udivmoddi4+0x294>
 8000fbc:	4464      	add	r4, ip
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	b11e      	cbz	r6, 8000fd2 <__udivmoddi4+0xa2>
 8000fca:	40dc      	lsrs	r4, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e9c6 4300 	strd	r4, r3, [r6]
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d908      	bls.n	8000fec <__udivmoddi4+0xbc>
 8000fda:	2e00      	cmp	r6, #0
 8000fdc:	f000 80ed 	beq.w	80011ba <__udivmoddi4+0x28a>
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	e9c6 0500 	strd	r0, r5, [r6]
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fec:	fab3 f183 	clz	r1, r3
 8000ff0:	2900      	cmp	r1, #0
 8000ff2:	d149      	bne.n	8001088 <__udivmoddi4+0x158>
 8000ff4:	42ab      	cmp	r3, r5
 8000ff6:	d302      	bcc.n	8000ffe <__udivmoddi4+0xce>
 8000ff8:	4282      	cmp	r2, r0
 8000ffa:	f200 80f8 	bhi.w	80011ee <__udivmoddi4+0x2be>
 8000ffe:	1a84      	subs	r4, r0, r2
 8001000:	eb65 0203 	sbc.w	r2, r5, r3
 8001004:	2001      	movs	r0, #1
 8001006:	4617      	mov	r7, r2
 8001008:	2e00      	cmp	r6, #0
 800100a:	d0e2      	beq.n	8000fd2 <__udivmoddi4+0xa2>
 800100c:	e9c6 4700 	strd	r4, r7, [r6]
 8001010:	e7df      	b.n	8000fd2 <__udivmoddi4+0xa2>
 8001012:	b902      	cbnz	r2, 8001016 <__udivmoddi4+0xe6>
 8001014:	deff      	udf	#255	; 0xff
 8001016:	fab2 f382 	clz	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 8090 	bne.w	8001140 <__udivmoddi4+0x210>
 8001020:	1a8a      	subs	r2, r1, r2
 8001022:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001026:	fa1f fe8c 	uxth.w	lr, ip
 800102a:	2101      	movs	r1, #1
 800102c:	fbb2 f5f7 	udiv	r5, r2, r7
 8001030:	fb07 2015 	mls	r0, r7, r5, r2
 8001034:	0c22      	lsrs	r2, r4, #16
 8001036:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800103a:	fb0e f005 	mul.w	r0, lr, r5
 800103e:	4290      	cmp	r0, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x124>
 8001042:	eb1c 0202 	adds.w	r2, ip, r2
 8001046:	f105 38ff 	add.w	r8, r5, #4294967295
 800104a:	d202      	bcs.n	8001052 <__udivmoddi4+0x122>
 800104c:	4290      	cmp	r0, r2
 800104e:	f200 80cb 	bhi.w	80011e8 <__udivmoddi4+0x2b8>
 8001052:	4645      	mov	r5, r8
 8001054:	1a12      	subs	r2, r2, r0
 8001056:	b2a4      	uxth	r4, r4
 8001058:	fbb2 f0f7 	udiv	r0, r2, r7
 800105c:	fb07 2210 	mls	r2, r7, r0, r2
 8001060:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001064:	fb0e fe00 	mul.w	lr, lr, r0
 8001068:	45a6      	cmp	lr, r4
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x14e>
 800106c:	eb1c 0404 	adds.w	r4, ip, r4
 8001070:	f100 32ff 	add.w	r2, r0, #4294967295
 8001074:	d202      	bcs.n	800107c <__udivmoddi4+0x14c>
 8001076:	45a6      	cmp	lr, r4
 8001078:	f200 80bb 	bhi.w	80011f2 <__udivmoddi4+0x2c2>
 800107c:	4610      	mov	r0, r2
 800107e:	eba4 040e 	sub.w	r4, r4, lr
 8001082:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001086:	e79f      	b.n	8000fc8 <__udivmoddi4+0x98>
 8001088:	f1c1 0720 	rsb	r7, r1, #32
 800108c:	408b      	lsls	r3, r1
 800108e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001092:	ea4c 0c03 	orr.w	ip, ip, r3
 8001096:	fa05 f401 	lsl.w	r4, r5, r1
 800109a:	fa20 f307 	lsr.w	r3, r0, r7
 800109e:	40fd      	lsrs	r5, r7
 80010a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010a4:	4323      	orrs	r3, r4
 80010a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80010aa:	fa1f fe8c 	uxth.w	lr, ip
 80010ae:	fb09 5518 	mls	r5, r9, r8, r5
 80010b2:	0c1c      	lsrs	r4, r3, #16
 80010b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010b8:	fb08 f50e 	mul.w	r5, r8, lr
 80010bc:	42a5      	cmp	r5, r4
 80010be:	fa02 f201 	lsl.w	r2, r2, r1
 80010c2:	fa00 f001 	lsl.w	r0, r0, r1
 80010c6:	d90b      	bls.n	80010e0 <__udivmoddi4+0x1b0>
 80010c8:	eb1c 0404 	adds.w	r4, ip, r4
 80010cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80010d0:	f080 8088 	bcs.w	80011e4 <__udivmoddi4+0x2b4>
 80010d4:	42a5      	cmp	r5, r4
 80010d6:	f240 8085 	bls.w	80011e4 <__udivmoddi4+0x2b4>
 80010da:	f1a8 0802 	sub.w	r8, r8, #2
 80010de:	4464      	add	r4, ip
 80010e0:	1b64      	subs	r4, r4, r5
 80010e2:	b29d      	uxth	r5, r3
 80010e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80010e8:	fb09 4413 	mls	r4, r9, r3, r4
 80010ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80010f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80010f4:	45a6      	cmp	lr, r4
 80010f6:	d908      	bls.n	800110a <__udivmoddi4+0x1da>
 80010f8:	eb1c 0404 	adds.w	r4, ip, r4
 80010fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8001100:	d26c      	bcs.n	80011dc <__udivmoddi4+0x2ac>
 8001102:	45a6      	cmp	lr, r4
 8001104:	d96a      	bls.n	80011dc <__udivmoddi4+0x2ac>
 8001106:	3b02      	subs	r3, #2
 8001108:	4464      	add	r4, ip
 800110a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800110e:	fba3 9502 	umull	r9, r5, r3, r2
 8001112:	eba4 040e 	sub.w	r4, r4, lr
 8001116:	42ac      	cmp	r4, r5
 8001118:	46c8      	mov	r8, r9
 800111a:	46ae      	mov	lr, r5
 800111c:	d356      	bcc.n	80011cc <__udivmoddi4+0x29c>
 800111e:	d053      	beq.n	80011c8 <__udivmoddi4+0x298>
 8001120:	b156      	cbz	r6, 8001138 <__udivmoddi4+0x208>
 8001122:	ebb0 0208 	subs.w	r2, r0, r8
 8001126:	eb64 040e 	sbc.w	r4, r4, lr
 800112a:	fa04 f707 	lsl.w	r7, r4, r7
 800112e:	40ca      	lsrs	r2, r1
 8001130:	40cc      	lsrs	r4, r1
 8001132:	4317      	orrs	r7, r2
 8001134:	e9c6 7400 	strd	r7, r4, [r6]
 8001138:	4618      	mov	r0, r3
 800113a:	2100      	movs	r1, #0
 800113c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001140:	f1c3 0120 	rsb	r1, r3, #32
 8001144:	fa02 fc03 	lsl.w	ip, r2, r3
 8001148:	fa20 f201 	lsr.w	r2, r0, r1
 800114c:	fa25 f101 	lsr.w	r1, r5, r1
 8001150:	409d      	lsls	r5, r3
 8001152:	432a      	orrs	r2, r5
 8001154:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001158:	fa1f fe8c 	uxth.w	lr, ip
 800115c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001160:	fb07 1510 	mls	r5, r7, r0, r1
 8001164:	0c11      	lsrs	r1, r2, #16
 8001166:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800116a:	fb00 f50e 	mul.w	r5, r0, lr
 800116e:	428d      	cmp	r5, r1
 8001170:	fa04 f403 	lsl.w	r4, r4, r3
 8001174:	d908      	bls.n	8001188 <__udivmoddi4+0x258>
 8001176:	eb1c 0101 	adds.w	r1, ip, r1
 800117a:	f100 38ff 	add.w	r8, r0, #4294967295
 800117e:	d22f      	bcs.n	80011e0 <__udivmoddi4+0x2b0>
 8001180:	428d      	cmp	r5, r1
 8001182:	d92d      	bls.n	80011e0 <__udivmoddi4+0x2b0>
 8001184:	3802      	subs	r0, #2
 8001186:	4461      	add	r1, ip
 8001188:	1b49      	subs	r1, r1, r5
 800118a:	b292      	uxth	r2, r2
 800118c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001190:	fb07 1115 	mls	r1, r7, r5, r1
 8001194:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001198:	fb05 f10e 	mul.w	r1, r5, lr
 800119c:	4291      	cmp	r1, r2
 800119e:	d908      	bls.n	80011b2 <__udivmoddi4+0x282>
 80011a0:	eb1c 0202 	adds.w	r2, ip, r2
 80011a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80011a8:	d216      	bcs.n	80011d8 <__udivmoddi4+0x2a8>
 80011aa:	4291      	cmp	r1, r2
 80011ac:	d914      	bls.n	80011d8 <__udivmoddi4+0x2a8>
 80011ae:	3d02      	subs	r5, #2
 80011b0:	4462      	add	r2, ip
 80011b2:	1a52      	subs	r2, r2, r1
 80011b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80011b8:	e738      	b.n	800102c <__udivmoddi4+0xfc>
 80011ba:	4631      	mov	r1, r6
 80011bc:	4630      	mov	r0, r6
 80011be:	e708      	b.n	8000fd2 <__udivmoddi4+0xa2>
 80011c0:	4639      	mov	r1, r7
 80011c2:	e6e6      	b.n	8000f92 <__udivmoddi4+0x62>
 80011c4:	4610      	mov	r0, r2
 80011c6:	e6fb      	b.n	8000fc0 <__udivmoddi4+0x90>
 80011c8:	4548      	cmp	r0, r9
 80011ca:	d2a9      	bcs.n	8001120 <__udivmoddi4+0x1f0>
 80011cc:	ebb9 0802 	subs.w	r8, r9, r2
 80011d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80011d4:	3b01      	subs	r3, #1
 80011d6:	e7a3      	b.n	8001120 <__udivmoddi4+0x1f0>
 80011d8:	4645      	mov	r5, r8
 80011da:	e7ea      	b.n	80011b2 <__udivmoddi4+0x282>
 80011dc:	462b      	mov	r3, r5
 80011de:	e794      	b.n	800110a <__udivmoddi4+0x1da>
 80011e0:	4640      	mov	r0, r8
 80011e2:	e7d1      	b.n	8001188 <__udivmoddi4+0x258>
 80011e4:	46d0      	mov	r8, sl
 80011e6:	e77b      	b.n	80010e0 <__udivmoddi4+0x1b0>
 80011e8:	3d02      	subs	r5, #2
 80011ea:	4462      	add	r2, ip
 80011ec:	e732      	b.n	8001054 <__udivmoddi4+0x124>
 80011ee:	4608      	mov	r0, r1
 80011f0:	e70a      	b.n	8001008 <__udivmoddi4+0xd8>
 80011f2:	4464      	add	r4, ip
 80011f4:	3802      	subs	r0, #2
 80011f6:	e742      	b.n	800107e <__udivmoddi4+0x14e>

080011f8 <__aeabi_idiv0>:
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	4ba5      	ldr	r3, [pc, #660]	; (80014ac <MX_GPIO_Init+0x2b0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4aa4      	ldr	r2, [pc, #656]	; (80014ac <MX_GPIO_Init+0x2b0>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4ba2      	ldr	r3, [pc, #648]	; (80014ac <MX_GPIO_Init+0x2b0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	4b9e      	ldr	r3, [pc, #632]	; (80014ac <MX_GPIO_Init+0x2b0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a9d      	ldr	r2, [pc, #628]	; (80014ac <MX_GPIO_Init+0x2b0>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b9b      	ldr	r3, [pc, #620]	; (80014ac <MX_GPIO_Init+0x2b0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b97      	ldr	r3, [pc, #604]	; (80014ac <MX_GPIO_Init+0x2b0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a96      	ldr	r2, [pc, #600]	; (80014ac <MX_GPIO_Init+0x2b0>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b94      	ldr	r3, [pc, #592]	; (80014ac <MX_GPIO_Init+0x2b0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b90      	ldr	r3, [pc, #576]	; (80014ac <MX_GPIO_Init+0x2b0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a8f      	ldr	r2, [pc, #572]	; (80014ac <MX_GPIO_Init+0x2b0>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b8d      	ldr	r3, [pc, #564]	; (80014ac <MX_GPIO_Init+0x2b0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b89      	ldr	r3, [pc, #548]	; (80014ac <MX_GPIO_Init+0x2b0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a88      	ldr	r2, [pc, #544]	; (80014ac <MX_GPIO_Init+0x2b0>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b86      	ldr	r3, [pc, #536]	; (80014ac <MX_GPIO_Init+0x2b0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b82      	ldr	r3, [pc, #520]	; (80014ac <MX_GPIO_Init+0x2b0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a81      	ldr	r2, [pc, #516]	; (80014ac <MX_GPIO_Init+0x2b0>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b7f      	ldr	r3, [pc, #508]	; (80014ac <MX_GPIO_Init+0x2b0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2108      	movs	r1, #8
 80012be:	487c      	ldr	r0, [pc, #496]	; (80014b0 <MX_GPIO_Init+0x2b4>)
 80012c0:	f004 fbb6 	bl	8005a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2101      	movs	r1, #1
 80012c8:	487a      	ldr	r0, [pc, #488]	; (80014b4 <MX_GPIO_Init+0x2b8>)
 80012ca:	f004 fbb1 	bl	8005a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012ce:	2200      	movs	r2, #0
 80012d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80012d4:	4878      	ldr	r0, [pc, #480]	; (80014b8 <MX_GPIO_Init+0x2bc>)
 80012d6:	f004 fbab 	bl	8005a30 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2130      	movs	r1, #48	; 0x30
 80012de:	4877      	ldr	r0, [pc, #476]	; (80014bc <MX_GPIO_Init+0x2c0>)
 80012e0:	f004 fba6 	bl	8005a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012e4:	2308      	movs	r3, #8
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	486d      	ldr	r0, [pc, #436]	; (80014b0 <MX_GPIO_Init+0x2b4>)
 80012fc:	f004 f9fc 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	4867      	ldr	r0, [pc, #412]	; (80014b4 <MX_GPIO_Init+0x2b8>)
 8001318:	f004 f9ee 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800131c:	2308      	movs	r3, #8
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800132c:	2305      	movs	r3, #5
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	485f      	ldr	r0, [pc, #380]	; (80014b4 <MX_GPIO_Init+0x2b8>)
 8001338:	f004 f9de 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800133c:	2301      	movs	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001340:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	485b      	ldr	r0, [pc, #364]	; (80014c0 <MX_GPIO_Init+0x2c4>)
 8001352:	f004 f9d1 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001356:	2310      	movs	r3, #16
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001366:	2306      	movs	r3, #6
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	4853      	ldr	r0, [pc, #332]	; (80014c0 <MX_GPIO_Init+0x2c4>)
 8001372:	f004 f9c1 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001376:	23e0      	movs	r3, #224	; 0xe0
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001386:	2305      	movs	r3, #5
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	484b      	ldr	r0, [pc, #300]	; (80014c0 <MX_GPIO_Init+0x2c4>)
 8001392:	f004 f9b1 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001396:	2304      	movs	r3, #4
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4844      	ldr	r0, [pc, #272]	; (80014bc <MX_GPIO_Init+0x2c0>)
 80013aa:	f004 f9a5 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80013ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	483a      	ldr	r0, [pc, #232]	; (80014b0 <MX_GPIO_Init+0x2b4>)
 80013c6:	f004 f997 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013ca:	f24f 0310 	movw	r3, #61456	; 0xf010
 80013ce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4835      	ldr	r0, [pc, #212]	; (80014b8 <MX_GPIO_Init+0x2bc>)
 80013e4:	f004 f988 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013e8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013fa:	2306      	movs	r3, #6
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4619      	mov	r1, r3
 8001404:	482b      	ldr	r0, [pc, #172]	; (80014b4 <MX_GPIO_Init+0x2b8>)
 8001406:	f004 f977 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800140a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	4828      	ldr	r0, [pc, #160]	; (80014c0 <MX_GPIO_Init+0x2c4>)
 8001420:	f004 f96a 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001424:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001436:	230a      	movs	r3, #10
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	481f      	ldr	r0, [pc, #124]	; (80014c0 <MX_GPIO_Init+0x2c4>)
 8001442:	f004 f959 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001446:	2320      	movs	r3, #32
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4817      	ldr	r0, [pc, #92]	; (80014b8 <MX_GPIO_Init+0x2bc>)
 800145a:	f004 f94d 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800145e:	2330      	movs	r3, #48	; 0x30
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4811      	ldr	r0, [pc, #68]	; (80014bc <MX_GPIO_Init+0x2c0>)
 8001476:	f004 f93f 	bl	80056f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800147a:	2302      	movs	r3, #2
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800147e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4808      	ldr	r0, [pc, #32]	; (80014b0 <MX_GPIO_Init+0x2b4>)
 8001490:	f004 f932 	bl	80056f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2017      	movs	r0, #23
 800149a:	f004 f864 	bl	8005566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800149e:	2017      	movs	r0, #23
 80014a0:	f004 f87d 	bl	800559e <HAL_NVIC_EnableIRQ>

}
 80014a4:	bf00      	nop
 80014a6:	3730      	adds	r7, #48	; 0x30
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020000 	.word	0x40020000

080014c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_I2C1_Init+0x50>)
 80014ca:	4a13      	ldr	r2, [pc, #76]	; (8001518 <MX_I2C1_Init+0x54>)
 80014cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_I2C1_Init+0x50>)
 80014d0:	4a12      	ldr	r2, [pc, #72]	; (800151c <MX_I2C1_Init+0x58>)
 80014d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_I2C1_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_I2C1_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_I2C1_Init+0x50>)
 80014e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_I2C1_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_I2C1_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_I2C1_Init+0x50>)
 8001502:	f004 fad3 	bl	8005aac <HAL_I2C_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800150c:	f000 ff2e 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000204 	.word	0x20000204
 8001518:	40005400 	.word	0x40005400
 800151c:	000186a0 	.word	0x000186a0

08001520 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_I2C2_Init+0x50>)
 8001526:	4a13      	ldr	r2, [pc, #76]	; (8001574 <MX_I2C2_Init+0x54>)
 8001528:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_I2C2_Init+0x50>)
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <MX_I2C2_Init+0x58>)
 800152e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_I2C2_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_I2C2_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_I2C2_Init+0x50>)
 800153e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001542:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_I2C2_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_I2C2_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <MX_I2C2_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_I2C2_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_I2C2_Init+0x50>)
 800155e:	f004 faa5 	bl	8005aac <HAL_I2C_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001568:	f000 ff00 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000258 	.word	0x20000258
 8001574:	40005800 	.word	0x40005800
 8001578:	000186a0 	.word	0x000186a0

0800157c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_I2C3_Init+0x50>)
 8001582:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <MX_I2C3_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_I2C3_Init+0x50>)
 8001588:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_I2C3_Init+0x58>)
 800158a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_I2C3_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_I2C3_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_I2C3_Init+0x50>)
 800159a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <MX_I2C3_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_I2C3_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <MX_I2C3_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_I2C3_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <MX_I2C3_Init+0x50>)
 80015ba:	f004 fa77 	bl	8005aac <HAL_I2C_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015c4:	f000 fed2 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200002ac 	.word	0x200002ac
 80015d0:	40005c00 	.word	0x40005c00
 80015d4:	000186a0 	.word	0x000186a0

080015d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08e      	sub	sp, #56	; 0x38
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a5c      	ldr	r2, [pc, #368]	; (8001768 <HAL_I2C_MspInit+0x190>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12d      	bne.n	8001656 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	4b5b      	ldr	r3, [pc, #364]	; (800176c <HAL_I2C_MspInit+0x194>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a5a      	ldr	r2, [pc, #360]	; (800176c <HAL_I2C_MspInit+0x194>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b58      	ldr	r3, [pc, #352]	; (800176c <HAL_I2C_MspInit+0x194>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	623b      	str	r3, [r7, #32]
 8001614:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001616:	f44f 7310 	mov.w	r3, #576	; 0x240
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161c:	2312      	movs	r3, #18
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001620:	2301      	movs	r3, #1
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001628:	2304      	movs	r3, #4
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	484f      	ldr	r0, [pc, #316]	; (8001770 <HAL_I2C_MspInit+0x198>)
 8001634:	f004 f860 	bl	80056f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	4b4b      	ldr	r3, [pc, #300]	; (800176c <HAL_I2C_MspInit+0x194>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	4a4a      	ldr	r2, [pc, #296]	; (800176c <HAL_I2C_MspInit+0x194>)
 8001642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001646:	6413      	str	r3, [r2, #64]	; 0x40
 8001648:	4b48      	ldr	r3, [pc, #288]	; (800176c <HAL_I2C_MspInit+0x194>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001654:	e083      	b.n	800175e <HAL_I2C_MspInit+0x186>
  else if(i2cHandle->Instance==I2C2)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a46      	ldr	r2, [pc, #280]	; (8001774 <HAL_I2C_MspInit+0x19c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d12d      	bne.n	80016bc <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	4b41      	ldr	r3, [pc, #260]	; (800176c <HAL_I2C_MspInit+0x194>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	4a40      	ldr	r2, [pc, #256]	; (800176c <HAL_I2C_MspInit+0x194>)
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	6313      	str	r3, [r2, #48]	; 0x30
 8001670:	4b3e      	ldr	r3, [pc, #248]	; (800176c <HAL_I2C_MspInit+0x194>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
 800167a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800167c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001682:	2312      	movs	r3, #18
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800168e:	2304      	movs	r3, #4
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	4835      	ldr	r0, [pc, #212]	; (8001770 <HAL_I2C_MspInit+0x198>)
 800169a:	f004 f82d 	bl	80056f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	4b32      	ldr	r3, [pc, #200]	; (800176c <HAL_I2C_MspInit+0x194>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a31      	ldr	r2, [pc, #196]	; (800176c <HAL_I2C_MspInit+0x194>)
 80016a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b2f      	ldr	r3, [pc, #188]	; (800176c <HAL_I2C_MspInit+0x194>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
}
 80016ba:	e050      	b.n	800175e <HAL_I2C_MspInit+0x186>
  else if(i2cHandle->Instance==I2C3)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a2d      	ldr	r2, [pc, #180]	; (8001778 <HAL_I2C_MspInit+0x1a0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d14b      	bne.n	800175e <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <HAL_I2C_MspInit+0x194>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a27      	ldr	r2, [pc, #156]	; (800176c <HAL_I2C_MspInit+0x194>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_I2C_MspInit+0x194>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_I2C_MspInit+0x194>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a20      	ldr	r2, [pc, #128]	; (800176c <HAL_I2C_MspInit+0x194>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_I2C_MspInit+0x194>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001704:	2312      	movs	r3, #18
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001710:	2304      	movs	r3, #4
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	4818      	ldr	r0, [pc, #96]	; (800177c <HAL_I2C_MspInit+0x1a4>)
 800171c:	f003 ffec 	bl	80056f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001726:	2312      	movs	r3, #18
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001732:	2304      	movs	r3, #4
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173a:	4619      	mov	r1, r3
 800173c:	4810      	ldr	r0, [pc, #64]	; (8001780 <HAL_I2C_MspInit+0x1a8>)
 800173e:	f003 ffdb 	bl	80056f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_I2C_MspInit+0x194>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_I2C_MspInit+0x194>)
 800174c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_I2C_MspInit+0x194>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
}
 800175e:	bf00      	nop
 8001760:	3738      	adds	r7, #56	; 0x38
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40005400 	.word	0x40005400
 800176c:	40023800 	.word	0x40023800
 8001770:	40020400 	.word	0x40020400
 8001774:	40005800 	.word	0x40005800
 8001778:	40005c00 	.word	0x40005c00
 800177c:	40020800 	.word	0x40020800
 8001780:	40020000 	.word	0x40020000

08001784 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d106      	bne.n	80017a6 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3371      	adds	r3, #113	; 0x71
 800179c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800179e:	e002      	b.n	80017a6 <prv_parse_number+0x22>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <prv_parse_number+0x30>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b20      	cmp	r3, #32
 80017b2:	d0f5      	beq.n	80017a0 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b2d      	cmp	r3, #45	; 0x2d
 80017ba:	d104      	bne.n	80017c6 <prv_parse_number+0x42>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <prv_parse_number+0x44>
 80017c6:	2300      	movs	r3, #0
 80017c8:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80017ca:	e00d      	b.n	80017e8 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	461a      	mov	r2, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	3b30      	subs	r3, #48	; 0x30
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <prv_parse_number+0x7a>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b2f      	cmp	r3, #47	; 0x2f
 80017f4:	d903      	bls.n	80017fe <prv_parse_number+0x7a>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b39      	cmp	r3, #57	; 0x39
 80017fc:	d9e6      	bls.n	80017cc <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 80017fe:	7afb      	ldrb	r3, [r7, #11]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <prv_parse_number+0x86>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	425b      	negs	r3, r3
 8001808:	e000      	b.n	800180c <prv_parse_number+0x88>
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d106      	bne.n	8001836 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3371      	adds	r3, #113	; 0x71
 800182c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800182e:	e002      	b.n	8001836 <prv_parse_float_number+0x1e>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <prv_parse_float_number+0x2c>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b20      	cmp	r3, #32
 8001842:	d0f5      	beq.n	8001830 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8001844:	2100      	movs	r1, #0
 8001846:	6838      	ldr	r0, [r7, #0]
 8001848:	f00b fee2 	bl	800d610 <strtod>
 800184c:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8001850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001854:	ec43 2b17 	vmov	d7, r2, r3
}
 8001858:	eeb0 0a47 	vmov.f32	s0, s14
 800185c:	eef0 0a67 	vmov.f32	s1, s15
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8001870:	2100      	movs	r1, #0
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffd0 	bl	8001818 <prv_parse_float_number>
 8001878:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800187c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001880:	f7ff f962 	bl	8000b48 <__aeabi_d2iz>
 8001884:	4603      	mov	r3, r0
 8001886:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <prv_parse_lat_long+0x94>)
 8001888:	fb82 1203 	smull	r1, r2, r2, r3
 800188c:	1152      	asrs	r2, r2, #5
 800188e:	17db      	asrs	r3, r3, #31
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe3e 	bl	8000514 <__aeabi_i2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <prv_parse_lat_long+0x98>)
 80018a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018aa:	f7fe fe9d 	bl	80005e8 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018b6:	f7fe fcdf 	bl	8000278 <__aeabi_dsub>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <prv_parse_lat_long+0x9c>)
 80018c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018cc:	f7fe ffb6 	bl	800083c <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018d8:	f7fe fcd0 	bl	800027c <__adddf3>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80018e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80018ec:	eeb0 0a47 	vmov.f32	s0, s14
 80018f0:	eef0 0a67 	vmov.f32	s1, s15
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	51eb851f 	.word	0x51eb851f
 8001900:	40590000 	.word	0x40590000
 8001904:	404e0000 	.word	0x404e0000

08001908 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8001908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001918:	2900      	cmp	r1, #0
 800191a:	d169      	bne.n	80019f0 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3371      	adds	r3, #113	; 0x71
 8001920:	2206      	movs	r2, #6
 8001922:	49ba      	ldr	r1, [pc, #744]	; (8001c0c <prv_parse_term+0x304>)
 8001924:	4618      	mov	r0, r3
 8001926:	f00b ff8c 	bl	800d842 <strncmp>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d009      	beq.n	8001944 <prv_parse_term+0x3c>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3371      	adds	r3, #113	; 0x71
 8001934:	2206      	movs	r2, #6
 8001936:	49b6      	ldr	r1, [pc, #728]	; (8001c10 <prv_parse_term+0x308>)
 8001938:	4618      	mov	r0, r3
 800193a:	f00b ff82 	bl	800d842 <strncmp>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d104      	bne.n	800194e <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800194c:	e04e      	b.n	80019ec <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3371      	adds	r3, #113	; 0x71
 8001952:	2206      	movs	r2, #6
 8001954:	49af      	ldr	r1, [pc, #700]	; (8001c14 <prv_parse_term+0x30c>)
 8001956:	4618      	mov	r0, r3
 8001958:	f00b ff73 	bl	800d842 <strncmp>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <prv_parse_term+0x6e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3371      	adds	r3, #113	; 0x71
 8001966:	2206      	movs	r2, #6
 8001968:	49ab      	ldr	r1, [pc, #684]	; (8001c18 <prv_parse_term+0x310>)
 800196a:	4618      	mov	r0, r3
 800196c:	f00b ff69 	bl	800d842 <strncmp>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d104      	bne.n	8001980 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2202      	movs	r2, #2
 800197a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800197e:	e035      	b.n	80019ec <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3371      	adds	r3, #113	; 0x71
 8001984:	2206      	movs	r2, #6
 8001986:	49a5      	ldr	r1, [pc, #660]	; (8001c1c <prv_parse_term+0x314>)
 8001988:	4618      	mov	r0, r3
 800198a:	f00b ff5a 	bl	800d842 <strncmp>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d009      	beq.n	80019a8 <prv_parse_term+0xa0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3371      	adds	r3, #113	; 0x71
 8001998:	2206      	movs	r2, #6
 800199a:	49a1      	ldr	r1, [pc, #644]	; (8001c20 <prv_parse_term+0x318>)
 800199c:	4618      	mov	r0, r3
 800199e:	f00b ff50 	bl	800d842 <strncmp>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d104      	bne.n	80019b2 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2203      	movs	r2, #3
 80019ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80019b0:	e01c      	b.n	80019ec <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3371      	adds	r3, #113	; 0x71
 80019b6:	2206      	movs	r2, #6
 80019b8:	499a      	ldr	r1, [pc, #616]	; (8001c24 <prv_parse_term+0x31c>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00b ff41 	bl	800d842 <strncmp>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <prv_parse_term+0xd2>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3371      	adds	r3, #113	; 0x71
 80019ca:	2206      	movs	r2, #6
 80019cc:	4996      	ldr	r1, [pc, #600]	; (8001c28 <prv_parse_term+0x320>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f00b ff37 	bl	800d842 <strncmp>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d104      	bne.n	80019e4 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2204      	movs	r2, #4
 80019de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80019e2:	e003      	b.n	80019ec <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e231      	b.n	8001e54 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80019f6:	2900      	cmp	r1, #0
 80019f8:	f000 822b 	beq.w	8001e52 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001a02:	2901      	cmp	r1, #1
 8001a04:	f040 80c9 	bne.w	8001b9a <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	2b0a      	cmp	r3, #10
 8001a12:	f200 8213 	bhi.w	8001e3c <prv_parse_term+0x534>
 8001a16:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <prv_parse_term+0x114>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001a49 	.word	0x08001a49
 8001a20:	08001ac3 	.word	0x08001ac3
 8001a24:	08001ad9 	.word	0x08001ad9
 8001a28:	08001b03 	.word	0x08001b03
 8001a2c:	08001b19 	.word	0x08001b19
 8001a30:	08001b43 	.word	0x08001b43
 8001a34:	08001b57 	.word	0x08001b57
 8001a38:	08001e3d 	.word	0x08001e3d
 8001a3c:	08001b6b 	.word	0x08001b6b
 8001a40:	08001e3d 	.word	0x08001e3d
 8001a44:	08001b83 	.word	0x08001b83
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a4e:	3b30      	subs	r3, #48	; 0x30
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001a62:	4413      	add	r3, r2
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	3b30      	subs	r3, #48	; 0x30
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001a76:	3b30      	subs	r3, #48	; 0x30
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3b30      	subs	r3, #48	; 0x30
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001a9e:	3b30      	subs	r3, #48	; 0x30
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	3b30      	subs	r3, #48	; 0x30
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8001ac0:	e1c7      	b.n	8001e52 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fed0 	bl	8001868 <prv_parse_lat_long>
 8001ac8:	eeb0 7a40 	vmov.f32	s14, s0
 8001acc:	eef0 7a60 	vmov.f32	s15, s1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001ad6:	e1bc      	b.n	8001e52 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001ade:	2b53      	cmp	r3, #83	; 0x53
 8001ae0:	d005      	beq.n	8001aee <prv_parse_term+0x1e6>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001ae8:	2b73      	cmp	r3, #115	; 0x73
 8001aea:	f040 81a9 	bne.w	8001e40 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001af4:	4690      	mov	r8, r2
 8001af6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8001b00:	e19e      	b.n	8001e40 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff feb0 	bl	8001868 <prv_parse_lat_long>
 8001b08:	eeb0 7a40 	vmov.f32	s14, s0
 8001b0c:	eef0 7a60 	vmov.f32	s15, s1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001b16:	e19c      	b.n	8001e52 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b1e:	2b57      	cmp	r3, #87	; 0x57
 8001b20:	d005      	beq.n	8001b2e <prv_parse_term+0x226>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b28:	2b77      	cmp	r3, #119	; 0x77
 8001b2a:	f040 818b 	bne.w	8001e44 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001b34:	4614      	mov	r4, r2
 8001b36:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8001b40:	e180      	b.n	8001e44 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8001b42:	2100      	movs	r1, #0
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fe1d 	bl	8001784 <prv_parse_number>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8001b54:	e17d      	b.n	8001e52 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8001b56:	2100      	movs	r1, #0
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fe13 	bl	8001784 <prv_parse_number>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8001b68:	e173      	b.n	8001e52 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fe53 	bl	8001818 <prv_parse_float_number>
 8001b72:	eeb0 7a40 	vmov.f32	s14, s0
 8001b76:	eef0 7a60 	vmov.f32	s15, s1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001b80:	e167      	b.n	8001e52 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001b82:	2100      	movs	r1, #0
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff fe47 	bl	8001818 <prv_parse_float_number>
 8001b8a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b8e:	eef0 7a60 	vmov.f32	s15, s1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001b98:	e15b      	b.n	8001e52 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001ba0:	2902      	cmp	r1, #2
 8001ba2:	f040 8083 	bne.w	8001cac <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001bac:	3b02      	subs	r3, #2
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	d860      	bhi.n	8001c74 <prv_parse_term+0x36c>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <prv_parse_term+0x2b0>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001bf9 	.word	0x08001bf9
 8001bbc:	08001c75 	.word	0x08001c75
 8001bc0:	08001c75 	.word	0x08001c75
 8001bc4:	08001c75 	.word	0x08001c75
 8001bc8:	08001c75 	.word	0x08001c75
 8001bcc:	08001c75 	.word	0x08001c75
 8001bd0:	08001c75 	.word	0x08001c75
 8001bd4:	08001c75 	.word	0x08001c75
 8001bd8:	08001c75 	.word	0x08001c75
 8001bdc:	08001c75 	.word	0x08001c75
 8001be0:	08001c75 	.word	0x08001c75
 8001be4:	08001c75 	.word	0x08001c75
 8001be8:	08001c75 	.word	0x08001c75
 8001bec:	08001c2d 	.word	0x08001c2d
 8001bf0:	08001c45 	.word	0x08001c45
 8001bf4:	08001c5d 	.word	0x08001c5d
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fdc2 	bl	8001784 <prv_parse_number>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 8001c0a:	e122      	b.n	8001e52 <prv_parse_term+0x54a>
 8001c0c:	0800f648 	.word	0x0800f648
 8001c10:	0800f650 	.word	0x0800f650
 8001c14:	0800f658 	.word	0x0800f658
 8001c18:	0800f660 	.word	0x0800f660
 8001c1c:	0800f668 	.word	0x0800f668
 8001c20:	0800f670 	.word	0x0800f670
 8001c24:	0800f678 	.word	0x0800f678
 8001c28:	0800f680 	.word	0x0800f680
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fdf2 	bl	8001818 <prv_parse_float_number>
 8001c34:	eeb0 7a40 	vmov.f32	s14, s0
 8001c38:	eef0 7a60 	vmov.f32	s15, s1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001c42:	e106      	b.n	8001e52 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8001c44:	2100      	movs	r1, #0
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fde6 	bl	8001818 <prv_parse_float_number>
 8001c4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c50:	eef0 7a60 	vmov.f32	s15, s1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001c5a:	e0fa      	b.n	8001e52 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fdda 	bl	8001818 <prv_parse_float_number>
 8001c64:	eeb0 7a40 	vmov.f32	s14, s0
 8001c68:	eef0 7a60 	vmov.f32	s15, s1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001c72:	e0ee      	b.n	8001e52 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	f240 80e4 	bls.w	8001e48 <prv_parse_term+0x540>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001c86:	2b0e      	cmp	r3, #14
 8001c88:	f200 80de 	bhi.w	8001e48 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fd78 	bl	8001784 <prv_parse_number>
 8001c94:	4602      	mov	r2, r0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	b2d1      	uxtb	r1, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	460a      	mov	r2, r1
 8001ca6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8001caa:	e0cd      	b.n	8001e48 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001cb2:	2903      	cmp	r1, #3
 8001cb4:	d11b      	bne.n	8001cee <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d002      	beq.n	8001cc6 <prv_parse_term+0x3be>
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d00a      	beq.n	8001cda <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001cc4:	e0c5      	b.n	8001e52 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fd5b 	bl	8001784 <prv_parse_number>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8001cd8:	e0bb      	b.n	8001e52 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fd51 	bl	8001784 <prv_parse_number>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001cec:	e0b1      	b.n	8001e52 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001cf4:	2904      	cmp	r1, #4
 8001cf6:	f040 80ac 	bne.w	8001e52 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001d00:	3902      	subs	r1, #2
 8001d02:	2909      	cmp	r1, #9
 8001d04:	f200 80a2 	bhi.w	8001e4c <prv_parse_term+0x544>
 8001d08:	a001      	add	r0, pc, #4	; (adr r0, 8001d10 <prv_parse_term+0x408>)
 8001d0a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001d0e:	bf00      	nop
 8001d10:	08001d39 	.word	0x08001d39
 8001d14:	08001e4d 	.word	0x08001e4d
 8001d18:	08001e4d 	.word	0x08001e4d
 8001d1c:	08001e4d 	.word	0x08001e4d
 8001d20:	08001e4d 	.word	0x08001e4d
 8001d24:	08001d53 	.word	0x08001d53
 8001d28:	08001d6b 	.word	0x08001d6b
 8001d2c:	08001d83 	.word	0x08001d83
 8001d30:	08001dfd 	.word	0x08001dfd
 8001d34:	08001e15 	.word	0x08001e15
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d3e:	2b41      	cmp	r3, #65	; 0x41
 8001d40:	bf0c      	ite	eq
 8001d42:	2301      	moveq	r3, #1
 8001d44:	2300      	movne	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001d50:	e07f      	b.n	8001e52 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8001d52:	2100      	movs	r1, #0
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fd5f 	bl	8001818 <prv_parse_float_number>
 8001d5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001d5e:	eef0 7a60 	vmov.f32	s15, s1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001d68:	e073      	b.n	8001e52 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff fd53 	bl	8001818 <prv_parse_float_number>
 8001d72:	eeb0 7a40 	vmov.f32	s14, s0
 8001d76:	eef0 7a60 	vmov.f32	s15, s1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001d80:	e067      	b.n	8001e52 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d88:	3b30      	subs	r3, #48	; 0x30
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	3b30      	subs	r3, #48	; 0x30
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001db0:	3b30      	subs	r3, #48	; 0x30
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	3b30      	subs	r3, #48	; 0x30
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001dd8:	3b30      	subs	r3, #48	; 0x30
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001dec:	4413      	add	r3, r2
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3b30      	subs	r3, #48	; 0x30
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8001dfa:	e02a      	b.n	8001e52 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fd0a 	bl	8001818 <prv_parse_float_number>
 8001e04:	eeb0 7a40 	vmov.f32	s14, s0
 8001e08:	eef0 7a60 	vmov.f32	s15, s1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001e12:	e01e      	b.n	8001e52 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001e1a:	2957      	cmp	r1, #87	; 0x57
 8001e1c:	d004      	beq.n	8001e28 <prv_parse_term+0x520>
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001e24:	2977      	cmp	r1, #119	; 0x77
 8001e26:	d113      	bne.n	8001e50 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8001e2e:	4602      	mov	r2, r0
 8001e30:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8001e3a:	e009      	b.n	8001e50 <prv_parse_term+0x548>
                break;
 8001e3c:	bf00      	nop
 8001e3e:	e008      	b.n	8001e52 <prv_parse_term+0x54a>
                break;
 8001e40:	bf00      	nop
 8001e42:	e006      	b.n	8001e52 <prv_parse_term+0x54a>
                break;
 8001e44:	bf00      	nop
 8001e46:	e004      	b.n	8001e52 <prv_parse_term+0x54a>
                break;
 8001e48:	bf00      	nop
 8001e4a:	e002      	b.n	8001e52 <prv_parse_term+0x54a>
            default:
                break;
 8001e4c:	bf00      	nop
 8001e4e:	e000      	b.n	8001e52 <prv_parse_term+0x54a>
                break;
 8001e50:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e5e:	bf00      	nop

08001e60 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001e6e:	2b2f      	cmp	r3, #47	; 0x2f
 8001e70:	d90d      	bls.n	8001e8e <prv_check_crc+0x2e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001e78:	2b39      	cmp	r3, #57	; 0x39
 8001e7a:	d808      	bhi.n	8001e8e <prv_check_crc+0x2e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001e82:	3b30      	subs	r3, #48	; 0x30
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	b25a      	sxtb	r2, r3
 8001e8c:	e026      	b.n	8001edc <prv_check_crc+0x7c>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001e94:	2b60      	cmp	r3, #96	; 0x60
 8001e96:	d90d      	bls.n	8001eb4 <prv_check_crc+0x54>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001e9e:	2b7a      	cmp	r3, #122	; 0x7a
 8001ea0:	d808      	bhi.n	8001eb4 <prv_check_crc+0x54>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001ea8:	3b57      	subs	r3, #87	; 0x57
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	b25a      	sxtb	r2, r3
 8001eb2:	e013      	b.n	8001edc <prv_check_crc+0x7c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001eba:	2b40      	cmp	r3, #64	; 0x40
 8001ebc:	d90d      	bls.n	8001eda <prv_check_crc+0x7a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001ec4:	2b5a      	cmp	r3, #90	; 0x5a
 8001ec6:	d808      	bhi.n	8001eda <prv_check_crc+0x7a>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001ece:	3b37      	subs	r3, #55	; 0x37
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	b25a      	sxtb	r2, r3
 8001ed8:	e000      	b.n	8001edc <prv_check_crc+0x7c>
 8001eda:	2200      	movs	r2, #0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001ee2:	2b2f      	cmp	r3, #47	; 0x2f
 8001ee4:	d90c      	bls.n	8001f00 <prv_check_crc+0xa0>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001eec:	2b39      	cmp	r3, #57	; 0x39
 8001eee:	d807      	bhi.n	8001f00 <prv_check_crc+0xa0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001ef6:	b25b      	sxtb	r3, r3
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	b25b      	sxtb	r3, r3
 8001efe:	e028      	b.n	8001f52 <prv_check_crc+0xf2>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001f06:	2b60      	cmp	r3, #96	; 0x60
 8001f08:	d90e      	bls.n	8001f28 <prv_check_crc+0xc8>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001f10:	2b7a      	cmp	r3, #122	; 0x7a
 8001f12:	d809      	bhi.n	8001f28 <prv_check_crc+0xc8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001f1a:	3b57      	subs	r3, #87	; 0x57
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	b25b      	sxtb	r3, r3
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	b25b      	sxtb	r3, r3
 8001f26:	e014      	b.n	8001f52 <prv_check_crc+0xf2>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001f2e:	2b40      	cmp	r3, #64	; 0x40
 8001f30:	d90e      	bls.n	8001f50 <prv_check_crc+0xf0>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001f38:	2b5a      	cmp	r3, #90	; 0x5a
 8001f3a:	d809      	bhi.n	8001f50 <prv_check_crc+0xf0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001f42:	3b37      	subs	r3, #55	; 0x37
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	b25b      	sxtb	r3, r3
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	e000      	b.n	8001f52 <prv_check_crc+0xf2>
 8001f50:	2300      	movs	r3, #0
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d136      	bne.n	8001ff6 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ff4:	e061      	b.n	80020ba <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d121      	bne.n	8002044 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	33a1      	adds	r3, #161	; 0xa1
 800203a:	220c      	movs	r2, #12
 800203c:	4619      	mov	r1, r3
 800203e:	f00b fc86 	bl	800d94e <memcpy>
 8002042:	e03a      	b.n	80020ba <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800204a:	2b03      	cmp	r3, #3
 800204c:	d106      	bne.n	800205c <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800205a:	e02e      	b.n	80020ba <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002062:	2b04      	cmp	r3, #4
 8002064:	d129      	bne.n	80020ba <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 80020cc:	22b0      	movs	r2, #176	; 0xb0
 80020ce:	2100      	movs	r1, #0
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f00b fbae 	bl	800d832 <memset>
    return 1;
 80020d6:	2301      	movs	r3, #1
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80020f0:	e0ad      	b.n	800224e <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b24      	cmp	r3, #36	; 0x24
 80020f8:	d128      	bne.n	800214c <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3370      	adds	r3, #112	; 0x70
 80020fe:	2240      	movs	r2, #64	; 0x40
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f00b fb95 	bl	800d832 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800210e:	2b0b      	cmp	r3, #11
 8002110:	f200 8097 	bhi.w	8002242 <lwgps_process+0x162>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800211a:	4619      	mov	r1, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	440b      	add	r3, r1
 8002124:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800212e:	3301      	adds	r3, #1
 8002130:	b2da      	uxtb	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800214a:	e07a      	b.n	8002242 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b2c      	cmp	r3, #44	; 0x2c
 8002152:	d11d      	bne.n	8002190 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7ff fbd7 	bl	8001908 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4053      	eors	r3, r2
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002184:	3301      	adds	r3, #1
 8002186:	b2da      	uxtb	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800218e:	e058      	b.n	8002242 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b2a      	cmp	r3, #42	; 0x2a
 8002196:	d117      	bne.n	80021c8 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f7ff fbb5 	bl	8001908 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80021bc:	3301      	adds	r3, #1
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80021c6:	e03c      	b.n	8002242 <lwgps_process+0x162>
        } else if (*d == '\r') {
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b0d      	cmp	r3, #13
 80021ce:	d109      	bne.n	80021e4 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7ff fe45 	bl	8001e60 <prv_check_crc>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d032      	beq.n	8002242 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7ff feca 	bl	8001f76 <prv_copy_from_tmp_memory>
 80021e2:	e02e      	b.n	8002242 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4053      	eors	r3, r2
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002208:	2b0b      	cmp	r3, #11
 800220a:	d81a      	bhi.n	8002242 <lwgps_process+0x162>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002212:	4619      	mov	r1, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	440b      	add	r3, r1
 800221c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002226:	3301      	adds	r3, #1
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f47f af4e 	bne.w	80020f2 <lwgps_process+0x12>
        }
    }
    return 1;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002264:	f003 f80e 	bl	8005284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002268:	f000 f816 	bl	8002298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800226c:	f7fe ffc6 	bl	80011fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002270:	f7ff f928 	bl	80014c4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002274:	f000 fd62 	bl	8002d3c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8002278:	f000 fd36 	bl	8002ce8 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 800227c:	f7ff f97e 	bl	800157c <MX_I2C3_Init>
  MX_TIM2_Init();
 8002280:	f000 fc16 	bl	8002ab0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002284:	f000 fbbc 	bl	8002a00 <MX_TIM1_Init>
  MX_I2C2_Init();
 8002288:	f7ff f94a 	bl	8001520 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  setup();
 800228c:	f000 f874 	bl	8002378 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  loop();
 8002290:	f000 f8bc 	bl	800240c <loop>
 8002294:	e7fc      	b.n	8002290 <main+0x30>
	...

08002298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b094      	sub	sp, #80	; 0x50
 800229c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229e:	f107 0320 	add.w	r3, r7, #32
 80022a2:	2230      	movs	r2, #48	; 0x30
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f00b fac3 	bl	800d832 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	4b28      	ldr	r3, [pc, #160]	; (8002364 <SystemClock_Config+0xcc>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	4a27      	ldr	r2, [pc, #156]	; (8002364 <SystemClock_Config+0xcc>)
 80022c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ca:	6413      	str	r3, [r2, #64]	; 0x40
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <SystemClock_Config+0xcc>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d8:	2300      	movs	r3, #0
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	4b22      	ldr	r3, [pc, #136]	; (8002368 <SystemClock_Config+0xd0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a21      	ldr	r2, [pc, #132]	; (8002368 <SystemClock_Config+0xd0>)
 80022e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <SystemClock_Config+0xd0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022f4:	2301      	movs	r3, #1
 80022f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022fe:	2302      	movs	r3, #2
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002302:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002306:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002308:	2308      	movs	r3, #8
 800230a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800230c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002310:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002312:	2302      	movs	r3, #2
 8002314:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002316:	2307      	movs	r3, #7
 8002318:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800231a:	f107 0320 	add.w	r3, r7, #32
 800231e:	4618      	mov	r0, r3
 8002320:	f005 f868 	bl	80073f4 <HAL_RCC_OscConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800232a:	f000 f81f 	bl	800236c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800232e:	230f      	movs	r3, #15
 8002330:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002332:	2302      	movs	r3, #2
 8002334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800233a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800233e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002344:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	2105      	movs	r1, #5
 800234c:	4618      	mov	r0, r3
 800234e:	f005 fac9 	bl	80078e4 <HAL_RCC_ClockConfig>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002358:	f000 f808 	bl	800236c <Error_Handler>
  }
}
 800235c:	bf00      	nop
 800235e:	3750      	adds	r7, #80	; 0x50
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40023800 	.word	0x40023800
 8002368:	40007000 	.word	0x40007000

0800236c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002370:	b672      	cpsid	i
}
 8002372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002374:	e7fe      	b.n	8002374 <Error_Handler+0x8>
	...

08002378 <setup>:
void Gorevler1();
void Gorevler2();
void Gorevler3();

void setup()
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	motor1.Yapilandir();
 800237c:	4817      	ldr	r0, [pc, #92]	; (80023dc <setup+0x64>)
 800237e:	f002 f854 	bl	800442a <_ZN5Motor10YapilandirEv>
	//uart3.Yapilandir(115200, GPIOD, GPIO_PIN_8,GPIOB ,GPIO_PIN_11);
	//uart3.receiveIT(RotaData, 8);
	//HAL_UART_Receive_IT(&huart3, ArayuzData, sizeof(ArayuzData));
	ArayuzPaket.PaketKesmeInit();
 8002382:	4817      	ldr	r0, [pc, #92]	; (80023e0 <setup+0x68>)
 8002384:	f002 f9b9 	bl	80046fa <_ZN5Paket14PaketKesmeInitEv>
	gps.Yapilandir();
 8002388:	4816      	ldr	r0, [pc, #88]	; (80023e4 <setup+0x6c>)
 800238a:	f001 fa53 	bl	8003834 <_ZN3GPS10YapilandirEv>
	mag.Yapilandir();
 800238e:	4816      	ldr	r0, [pc, #88]	; (80023e8 <setup+0x70>)
 8002390:	f001 ff0e 	bl	80041b0 <_ZN5MyMag10YapilandirEv>
	//mag.KalibreEt();
	imu.DBC_MPU6500_YAPILANDIR();
 8002394:	4815      	ldr	r0, [pc, #84]	; (80023ec <setup+0x74>)
 8002396:	f001 fb0b 	bl	80039b0 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv>
	imu.DBC_GYRO_OFSET();
 800239a:	4814      	ldr	r0, [pc, #80]	; (80023ec <setup+0x74>)
 800239c:	f001 fb6e 	bl	8003a7c <_ZN5MyImu14DBC_GYRO_OFSETEv>
	timer3.Yapilandir(84000,5);
 80023a0:	2205      	movs	r2, #5
 80023a2:	4913      	ldr	r1, [pc, #76]	; (80023f0 <setup+0x78>)
 80023a4:	4813      	ldr	r0, [pc, #76]	; (80023f4 <setup+0x7c>)
 80023a6:	f002 fe4d 	bl	8005044 <_ZN5Timer10YapilandirEmm>
	timer3.AktifEt();
 80023aa:	4812      	ldr	r0, [pc, #72]	; (80023f4 <setup+0x7c>)
 80023ac:	f002 fe69 	bl	8005082 <_ZN5Timer7AktifEtEv>
	barometre.Yapilandir();
 80023b0:	4811      	ldr	r0, [pc, #68]	; (80023f8 <setup+0x80>)
 80023b2:	f000 fdcf 	bl	8002f54 <_ZN9Barometre10YapilandirEv>
	gorev.GorevAl(Gorevler2,25);
 80023b6:	2219      	movs	r2, #25
 80023b8:	4910      	ldr	r1, [pc, #64]	; (80023fc <setup+0x84>)
 80023ba:	4811      	ldr	r0, [pc, #68]	; (8002400 <setup+0x88>)
 80023bc:	f002 fd36 	bl	8004e2c <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(Gorevler3,500);
 80023c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023c4:	490f      	ldr	r1, [pc, #60]	; (8002404 <setup+0x8c>)
 80023c6:	480e      	ldr	r0, [pc, #56]	; (8002400 <setup+0x88>)
 80023c8:	f002 fd30 	bl	8004e2c <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(Gorevler1,1000);
 80023cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023d0:	490d      	ldr	r1, [pc, #52]	; (8002408 <setup+0x90>)
 80023d2:	480b      	ldr	r0, [pc, #44]	; (8002400 <setup+0x88>)
 80023d4:	f002 fd2a 	bl	8004e2c <_ZN13Gorevyonetici7GorevAlEPFvvEs>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	200005d0 	.word	0x200005d0
 80023e0:	20000700 	.word	0x20000700
 80023e4:	20000400 	.word	0x20000400
 80023e8:	20000548 	.word	0x20000548
 80023ec:	200003b8 	.word	0x200003b8
 80023f0:	00014820 	.word	0x00014820
 80023f4:	2000034c 	.word	0x2000034c
 80023f8:	20000564 	.word	0x20000564
 80023fc:	080024e1 	.word	0x080024e1
 8002400:	20000350 	.word	0x20000350
 8002404:	080025b1 	.word	0x080025b1
 8002408:	08002471 	.word	0x08002471

0800240c <loop>:

void loop()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	motor1.PWM(500);
 8002410:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002414:	4811      	ldr	r0, [pc, #68]	; (800245c <loop+0x50>)
 8002416:	f002 f821 	bl	800445c <_ZN5Motor3PWMEt>
	motor1.AciBul();
 800241a:	4810      	ldr	r0, [pc, #64]	; (800245c <loop+0x50>)
 800241c:	f002 f830 	bl	8004480 <_ZN5Motor6AciBulEv>
	tur=*motor1.TurAl();
 8002420:	480e      	ldr	r0, [pc, #56]	; (800245c <loop+0x50>)
 8002422:	f002 f8db 	bl	80045dc <_ZN5Motor5TurAlEv>
 8002426:	4603      	mov	r3, r0
 8002428:	f993 2000 	ldrsb.w	r2, [r3]
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <loop+0x54>)
 800242e:	701a      	strb	r2, [r3, #0]
	aci=*motor1.AciAl();
 8002430:	480a      	ldr	r0, [pc, #40]	; (800245c <loop+0x50>)
 8002432:	f002 f8c7 	bl	80045c4 <_ZN5Motor5AciAlEv>
 8002436:	4603      	mov	r3, r0
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <loop+0x58>)
 800243c:	6013      	str	r3, [r2, #0]
	gorev.GorevCalistir();
 800243e:	480a      	ldr	r0, [pc, #40]	; (8002468 <loop+0x5c>)
 8002440:	f002 fd76 	bl	8004f30 <_ZN13Gorevyonetici13GorevCalistirEv>
	 if(ArayuzPaket.PaketCozBayrak)
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <loop+0x60>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <loop+0x4c>
	 {
		 ArayuzPaket.PaketCoz();
 800244c:	4807      	ldr	r0, [pc, #28]	; (800246c <loop+0x60>)
 800244e:	f002 fa79 	bl	8004944 <_ZN5Paket8PaketCozEv>
		 ArayuzPaket.PaketCozBayrak = false;
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <loop+0x60>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
	 }
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200005d0 	.word	0x200005d0
 8002460:	20000304 	.word	0x20000304
 8002464:	20000300 	.word	0x20000300
 8002468:	20000350 	.word	0x20000350
 800246c:	20000700 	.word	0x20000700

08002470 <_Z9Gorevler1v>:

void Gorevler1()
{
 8002470:	b580      	push	{r7, lr}
 8002472:	ed2d 8b02 	vpush	{d8}
 8002476:	af00      	add	r7, sp, #0

	GPIOD->ODR ^= GPIO_PIN_12;
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <_Z9Gorevler1v+0x5c>)
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	4a13      	ldr	r2, [pc, #76]	; (80024cc <_Z9Gorevler1v+0x5c>)
 800247e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002482:	6153      	str	r3, [r2, #20]
	GpsPaket.PaketOlustur(*gps.LatitudeAl(),*gps.LongitudeAl());
 8002484:	4812      	ldr	r0, [pc, #72]	; (80024d0 <_Z9Gorevler1v+0x60>)
 8002486:	f001 fa4e 	bl	8003926 <_ZN3GPS10LatitudeAlEv>
 800248a:	4603      	mov	r3, r0
 800248c:	ed93 8a00 	vldr	s16, [r3]
 8002490:	480f      	ldr	r0, [pc, #60]	; (80024d0 <_Z9Gorevler1v+0x60>)
 8002492:	f001 fa55 	bl	8003940 <_ZN3GPS11LongitudeAlEv>
 8002496:	4603      	mov	r3, r0
 8002498:	edd3 7a00 	vldr	s15, [r3]
 800249c:	eef0 0a67 	vmov.f32	s1, s15
 80024a0:	eeb0 0a48 	vmov.f32	s0, s16
 80024a4:	480b      	ldr	r0, [pc, #44]	; (80024d4 <_Z9Gorevler1v+0x64>)
 80024a6:	f002 f938 	bl	800471a <_ZN5Paket12PaketOlusturEff>
	GpsPaket.gpsPaketCagir(GpsDataPacket);
 80024aa:	490b      	ldr	r1, [pc, #44]	; (80024d8 <_Z9Gorevler1v+0x68>)
 80024ac:	4809      	ldr	r0, [pc, #36]	; (80024d4 <_Z9Gorevler1v+0x64>)
 80024ae:	f002 fa1c 	bl	80048ea <_ZN5Paket13gpsPaketCagirEPh>
	HAL_UART_Transmit(&huart3, GpsDataPacket, sizeof(GpsDataPacket), HAL_MAX_DELAY);
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	220e      	movs	r2, #14
 80024b8:	4907      	ldr	r1, [pc, #28]	; (80024d8 <_Z9Gorevler1v+0x68>)
 80024ba:	4808      	ldr	r0, [pc, #32]	; (80024dc <_Z9Gorevler1v+0x6c>)
 80024bc:	f006 fd7e 	bl	8008fbc <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart3, ImuDataPacket, sizeof(ImuDataPacket), HAL_MAX_DELAY);
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	ecbd 8b02 	vpop	{d8}
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40020c00 	.word	0x40020c00
 80024d0:	20000400 	.word	0x20000400
 80024d4:	200005f8 	.word	0x200005f8
 80024d8:	20000308 	.word	0x20000308
 80024dc:	20000860 	.word	0x20000860

080024e0 <_Z9Gorevler2v>:
void Gorevler2()
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	ed2d 8b04 	vpush	{d8-d9}
 80024e6:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= GPIO_PIN_13;
 80024e8:	4b28      	ldr	r3, [pc, #160]	; (800258c <_Z9Gorevler2v+0xac>)
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	4a27      	ldr	r2, [pc, #156]	; (800258c <_Z9Gorevler2v+0xac>)
 80024ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024f2:	6153      	str	r3, [r2, #20]
	imu.DBC_ACI_BULMA();
 80024f4:	4826      	ldr	r0, [pc, #152]	; (8002590 <_Z9Gorevler2v+0xb0>)
 80024f6:	f001 fc33 	bl	8003d60 <_ZN5MyImu13DBC_ACI_BULMAEv>
	heading = *mag.HeadingOlustur();
 80024fa:	4826      	ldr	r0, [pc, #152]	; (8002594 <_Z9Gorevler2v+0xb4>)
 80024fc:	f001 febc 	bl	8004278 <_ZN5MyMag14HeadingOlusturEv>
 8002500:	4603      	mov	r3, r0
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a24      	ldr	r2, [pc, #144]	; (8002598 <_Z9Gorevler2v+0xb8>)
 8002506:	6013      	str	r3, [r2, #0]
	pitch=*imu.PitchAl();
 8002508:	4821      	ldr	r0, [pc, #132]	; (8002590 <_Z9Gorevler2v+0xb0>)
 800250a:	f001 fdf5 	bl	80040f8 <_ZN5MyImu7PitchAlEv>
 800250e:	4603      	mov	r3, r0
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a22      	ldr	r2, [pc, #136]	; (800259c <_Z9Gorevler2v+0xbc>)
 8002514:	6013      	str	r3, [r2, #0]
	roll=*imu.RollAl();
 8002516:	481e      	ldr	r0, [pc, #120]	; (8002590 <_Z9Gorevler2v+0xb0>)
 8002518:	f001 fdfa 	bl	8004110 <_ZN5MyImu6RollAlEv>
 800251c:	4603      	mov	r3, r0
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <_Z9Gorevler2v+0xc0>)
 8002522:	6013      	str	r3, [r2, #0]
	yaw=*imu.YawAl();
 8002524:	481a      	ldr	r0, [pc, #104]	; (8002590 <_Z9Gorevler2v+0xb0>)
 8002526:	f001 fdff 	bl	8004128 <_ZN5MyImu5YawAlEv>
 800252a:	4603      	mov	r3, r0
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1d      	ldr	r2, [pc, #116]	; (80025a4 <_Z9Gorevler2v+0xc4>)
 8002530:	6013      	str	r3, [r2, #0]
	ImuPaket.PaketOlustur(*imu.PitchAl(), *imu.RollAl(), *mag.HeadingOlustur(), *imu.SicaklikAl());
 8002532:	4817      	ldr	r0, [pc, #92]	; (8002590 <_Z9Gorevler2v+0xb0>)
 8002534:	f001 fde0 	bl	80040f8 <_ZN5MyImu7PitchAlEv>
 8002538:	4603      	mov	r3, r0
 800253a:	ed93 8a00 	vldr	s16, [r3]
 800253e:	4814      	ldr	r0, [pc, #80]	; (8002590 <_Z9Gorevler2v+0xb0>)
 8002540:	f001 fde6 	bl	8004110 <_ZN5MyImu6RollAlEv>
 8002544:	4603      	mov	r3, r0
 8002546:	edd3 8a00 	vldr	s17, [r3]
 800254a:	4812      	ldr	r0, [pc, #72]	; (8002594 <_Z9Gorevler2v+0xb4>)
 800254c:	f001 fe94 	bl	8004278 <_ZN5MyMag14HeadingOlusturEv>
 8002550:	4603      	mov	r3, r0
 8002552:	ed93 9a00 	vldr	s18, [r3]
 8002556:	480e      	ldr	r0, [pc, #56]	; (8002590 <_Z9Gorevler2v+0xb0>)
 8002558:	f001 fdf2 	bl	8004140 <_ZN5MyImu10SicaklikAlEv>
 800255c:	4603      	mov	r3, r0
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	eef0 1a67 	vmov.f32	s3, s15
 8002566:	eeb0 1a49 	vmov.f32	s2, s18
 800256a:	eef0 0a68 	vmov.f32	s1, s17
 800256e:	eeb0 0a48 	vmov.f32	s0, s16
 8002572:	480d      	ldr	r0, [pc, #52]	; (80025a8 <_Z9Gorevler2v+0xc8>)
 8002574:	f002 f91a 	bl	80047ac <_ZN5Paket12PaketOlusturEffff>
	ImuPaket.imuPaketCagir(ImuDataPacket);
 8002578:	490c      	ldr	r1, [pc, #48]	; (80025ac <_Z9Gorevler2v+0xcc>)
 800257a:	480b      	ldr	r0, [pc, #44]	; (80025a8 <_Z9Gorevler2v+0xc8>)
 800257c:	f002 f9c5 	bl	800490a <_ZN5Paket13imuPaketCagirEPh>
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	ecbd 8b04 	vpop	{d8-d9}
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40020c00 	.word	0x40020c00
 8002590:	200003b8 	.word	0x200003b8
 8002594:	20000548 	.word	0x20000548
 8002598:	20000348 	.word	0x20000348
 800259c:	2000033c 	.word	0x2000033c
 80025a0:	20000340 	.word	0x20000340
 80025a4:	20000344 	.word	0x20000344
 80025a8:	2000067c 	.word	0x2000067c
 80025ac:	20000318 	.word	0x20000318

080025b0 <_Z9Gorevler3v>:
void Gorevler3()
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, ImuDataPacket, sizeof(ImuDataPacket), HAL_MAX_DELAY);
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	2215      	movs	r2, #21
 80025ba:	4910      	ldr	r1, [pc, #64]	; (80025fc <_Z9Gorevler3v+0x4c>)
 80025bc:	4810      	ldr	r0, [pc, #64]	; (8002600 <_Z9Gorevler3v+0x50>)
 80025be:	f006 fcfd 	bl	8008fbc <HAL_UART_Transmit>
	temp1 = barometre.SicaklikOku();
 80025c2:	4810      	ldr	r0, [pc, #64]	; (8002604 <_Z9Gorevler3v+0x54>)
 80025c4:	f000 fd5a 	bl	800307c <_ZN9Barometre11SicaklikOkuEv>
 80025c8:	eef0 7a40 	vmov.f32	s15, s0
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <_Z9Gorevler3v+0x58>)
 80025ce:	edc3 7a00 	vstr	s15, [r3]
	press1 = barometre.BasincOku(0);
 80025d2:	2100      	movs	r1, #0
 80025d4:	480b      	ldr	r0, [pc, #44]	; (8002604 <_Z9Gorevler3v+0x54>)
 80025d6:	f000 fddb 	bl	8003190 <_ZN9Barometre9BasincOkuEh>
 80025da:	eef0 7a40 	vmov.f32	s15, s0
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <_Z9Gorevler3v+0x5c>)
 80025e0:	edc3 7a00 	vstr	s15, [r3]
	altitude1 = barometre.IrtifaOku(0);
 80025e4:	2100      	movs	r1, #0
 80025e6:	4807      	ldr	r0, [pc, #28]	; (8002604 <_Z9Gorevler3v+0x54>)
 80025e8:	f000 fde6 	bl	80031b8 <_ZN9Barometre9IrtifaOkuEh>
 80025ec:	eef0 7a40 	vmov.f32	s15, s0
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <_Z9Gorevler3v+0x60>)
 80025f2:	edc3 7a00 	vstr	s15, [r3]
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000318 	.word	0x20000318
 8002600:	20000860 	.word	0x20000860
 8002604:	20000564 	.word	0x20000564
 8002608:	20000330 	.word	0x20000330
 800260c:	20000338 	.word	0x20000338
 8002610:	20000334 	.word	0x20000334

08002614 <TIM3_IRQHandler>:
extern "C" void TIM3_IRQHandler()
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	gorev.BayrakKaldir();
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <TIM3_IRQHandler+0x10>)
 800261a:	f002 fc33 	bl	8004e84 <_ZN13Gorevyonetici12BayrakKaldirEv>
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000350 	.word	0x20000350

08002628 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a08      	ldr	r2, [pc, #32]	; (8002658 <HAL_UART_RxCpltCallback+0x30>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d102      	bne.n	8002640 <HAL_UART_RxCpltCallback+0x18>
	{
		gps.UartRxCpltCallback();
 800263a:	4808      	ldr	r0, [pc, #32]	; (800265c <HAL_UART_RxCpltCallback+0x34>)
 800263c:	f001 f910 	bl	8003860 <_ZN3GPS18UartRxCpltCallbackEv>
	}
	if (huart->Instance == USART3)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a06      	ldr	r2, [pc, #24]	; (8002660 <HAL_UART_RxCpltCallback+0x38>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d102      	bne.n	8002650 <HAL_UART_RxCpltCallback+0x28>
	{
		ArayuzPaket.BayrakKaldir();
 800264a:	4806      	ldr	r0, [pc, #24]	; (8002664 <HAL_UART_RxCpltCallback+0x3c>)
 800264c:	f002 f96d 	bl	800492a <_ZN5Paket12BayrakKaldirEv>
		//HAL_UART_Receive_IT(&huart3, ArayuzData, sizeof(ArayuzData));

	}
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40004400 	.word	0x40004400
 800265c:	20000400 	.word	0x20000400
 8002660:	40004800 	.word	0x40004800
 8002664:	20000700 	.word	0x20000700

08002668 <_Z41__static_initialization_and_destruction_0ii>:
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af04      	add	r7, sp, #16
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d13d      	bne.n	80026f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800267e:	4293      	cmp	r3, r2
 8002680:	d138      	bne.n	80026f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>
Timer timer3(TIM3);
 8002682:	491e      	ldr	r1, [pc, #120]	; (80026fc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002684:	481e      	ldr	r0, [pc, #120]	; (8002700 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002686:	f002 fccd 	bl	8005024 <_ZN5TimerC1EP11TIM_TypeDef>
Gorevyonetici gorev(TIM3);
 800268a:	491c      	ldr	r1, [pc, #112]	; (80026fc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800268c:	481d      	ldr	r0, [pc, #116]	; (8002704 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800268e:	f002 fb99 	bl	8004dc4 <_ZN13GorevyoneticiC1EP11TIM_TypeDef>
MyImu imu(&hi2c1);
 8002692:	491d      	ldr	r1, [pc, #116]	; (8002708 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002694:	481d      	ldr	r0, [pc, #116]	; (800270c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002696:	f001 f960 	bl	800395a <_ZN5MyImuC1EP17I2C_HandleTypeDef>
GPS gps(&huart2);
 800269a:	491d      	ldr	r1, [pc, #116]	; (8002710 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800269c:	481d      	ldr	r0, [pc, #116]	; (8002714 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800269e:	f001 f8a8 	bl	80037f2 <_ZN3GPSC1EP20__UART_HandleTypeDef>
MyMag mag(&hi2c3);
 80026a2:	491d      	ldr	r1, [pc, #116]	; (8002718 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80026a4:	481d      	ldr	r0, [pc, #116]	; (800271c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80026a6:	f001 fd57 	bl	8004158 <_ZN5MyMagC1EP17I2C_HandleTypeDef>
Barometre barometre(&hi2c2, 0xEE);
 80026aa:	22ee      	movs	r2, #238	; 0xee
 80026ac:	491c      	ldr	r1, [pc, #112]	; (8002720 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80026ae:	481d      	ldr	r0, [pc, #116]	; (8002724 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80026b0:	f000 fc26 	bl	8002f00 <_ZN9BarometreC1EP17I2C_HandleTypeDefh>
Motor motor1(&htim2, &htim1, GPIOB, GPIO_PIN_4, GPIOB, GPIO_PIN_5);
 80026b4:	2320      	movs	r3, #32
 80026b6:	9302      	str	r3, [sp, #8]
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	2310      	movs	r3, #16
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80026c2:	4a1a      	ldr	r2, [pc, #104]	; (800272c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80026c4:	491a      	ldr	r1, [pc, #104]	; (8002730 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80026c6:	481b      	ldr	r0, [pc, #108]	; (8002734 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80026c8:	f001 fe7a 	bl	80043c0 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_P12GPIO_TypeDeftS3_t>
Paket GpsPaket(0x12, 0x34, 0x01, 0x09); //veri boyutu 9
 80026cc:	2309      	movs	r3, #9
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2301      	movs	r3, #1
 80026d2:	2234      	movs	r2, #52	; 0x34
 80026d4:	2112      	movs	r1, #18
 80026d6:	4818      	ldr	r0, [pc, #96]	; (8002738 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80026d8:	f001 ffb1 	bl	800463e <_ZN5PaketC1Ehhhh>
Paket ImuPaket(0x12, 0x34, 0x02, 0x11);//veri boyutu 17
 80026dc:	2311      	movs	r3, #17
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2302      	movs	r3, #2
 80026e2:	2234      	movs	r2, #52	; 0x34
 80026e4:	2112      	movs	r1, #18
 80026e6:	4815      	ldr	r0, [pc, #84]	; (800273c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80026e8:	f001 ffa9 	bl	800463e <_ZN5PaketC1Ehhhh>
Paket ArayuzPaket(&huart3);
 80026ec:	4914      	ldr	r1, [pc, #80]	; (8002740 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80026ee:	4815      	ldr	r0, [pc, #84]	; (8002744 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80026f0:	f001 ff80 	bl	80045f4 <_ZN5PaketC1EP20__UART_HandleTypeDef>
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40000400 	.word	0x40000400
 8002700:	2000034c 	.word	0x2000034c
 8002704:	20000350 	.word	0x20000350
 8002708:	20000204 	.word	0x20000204
 800270c:	200003b8 	.word	0x200003b8
 8002710:	20000818 	.word	0x20000818
 8002714:	20000400 	.word	0x20000400
 8002718:	200002ac 	.word	0x200002ac
 800271c:	20000548 	.word	0x20000548
 8002720:	20000258 	.word	0x20000258
 8002724:	20000564 	.word	0x20000564
 8002728:	40020400 	.word	0x40020400
 800272c:	20000788 	.word	0x20000788
 8002730:	200007d0 	.word	0x200007d0
 8002734:	200005d0 	.word	0x200005d0
 8002738:	200005f8 	.word	0x200005f8
 800273c:	2000067c 	.word	0x2000067c
 8002740:	20000860 	.word	0x20000860
 8002744:	20000700 	.word	0x20000700

08002748 <_GLOBAL__sub_I_aci>:
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
 800274c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002750:	2001      	movs	r0, #1
 8002752:	f7ff ff89 	bl	8002668 <_Z41__static_initialization_and_destruction_0ii>
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <HAL_MspInit+0x4c>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <HAL_MspInit+0x4c>)
 8002768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <HAL_MspInit+0x4c>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_MspInit+0x4c>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_MspInit+0x4c>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_MspInit+0x4c>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002796:	2007      	movs	r0, #7
 8002798:	f002 feda 	bl	8005550 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800

080027a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027ac:	e7fe      	b.n	80027ac <NMI_Handler+0x4>

080027ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b2:	e7fe      	b.n	80027b2 <HardFault_Handler+0x4>

080027b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <MemManage_Handler+0x4>

080027ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027be:	e7fe      	b.n	80027be <BusFault_Handler+0x4>

080027c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <UsageFault_Handler+0x4>

080027c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f4:	f002 fd98 	bl	8005328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}

080027fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002800:	2080      	movs	r0, #128	; 0x80
 8002802:	f003 f92f 	bl	8005a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002806:	f44f 7080 	mov.w	r0, #256	; 0x100
 800280a:	f003 f92b 	bl	8005a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <TIM2_IRQHandler+0x10>)
 800281a:	f005 fd27 	bl	800826c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200007d0 	.word	0x200007d0

08002828 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <USART2_IRQHandler+0x10>)
 800282e:	f006 fc75 	bl	800911c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000818 	.word	0x20000818

0800283c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <USART3_IRQHandler+0x10>)
 8002842:	f006 fc6b 	bl	800911c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000860 	.word	0x20000860

08002850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return 1;
 8002854:	2301      	movs	r3, #1
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_kill>:

int _kill(int pid, int sig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800286a:	f00b f843 	bl	800d8f4 <__errno>
 800286e:	4603      	mov	r3, r0
 8002870:	2216      	movs	r2, #22
 8002872:	601a      	str	r2, [r3, #0]
  return -1;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <_exit>:

void _exit (int status)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002888:	f04f 31ff 	mov.w	r1, #4294967295
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ffe7 	bl	8002860 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002892:	e7fe      	b.n	8002892 <_exit+0x12>

08002894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e00a      	b.n	80028bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028a6:	f3af 8000 	nop.w
 80028aa:	4601      	mov	r1, r0
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	60ba      	str	r2, [r7, #8]
 80028b2:	b2ca      	uxtb	r2, r1
 80028b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3301      	adds	r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	dbf0      	blt.n	80028a6 <_read+0x12>
  }

  return len;
 80028c4:	687b      	ldr	r3, [r7, #4]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e009      	b.n	80028f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	60ba      	str	r2, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	dbf1      	blt.n	80028e0 <_write+0x12>
  }
  return len;
 80028fc:	687b      	ldr	r3, [r7, #4]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_close>:

int _close(int file)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800292e:	605a      	str	r2, [r3, #4]
  return 0;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <_isatty>:

int _isatty(int file)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002946:	2301      	movs	r3, #1
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <_sbrk+0x5c>)
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <_sbrk+0x60>)
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <_sbrk+0x64>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <_sbrk+0x64>)
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <_sbrk+0x68>)
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <_sbrk+0x64>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	429a      	cmp	r2, r3
 800299e:	d207      	bcs.n	80029b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a0:	f00a ffa8 	bl	800d8f4 <__errno>
 80029a4:	4603      	mov	r3, r0
 80029a6:	220c      	movs	r2, #12
 80029a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	e009      	b.n	80029c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <_sbrk+0x64>)
 80029c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c2:	68fb      	ldr	r3, [r7, #12]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20020000 	.word	0x20020000
 80029d0:	00000400 	.word	0x00000400
 80029d4:	20000784 	.word	0x20000784
 80029d8:	200009f8 	.word	0x200009f8

080029dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <SystemInit+0x20>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <SystemInit+0x20>)
 80029e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	; 0x30
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	2224      	movs	r2, #36	; 0x24
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f00a ff0f 	bl	800d832 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <MX_TIM1_Init+0xa8>)
 8002a1e:	4a23      	ldr	r2, [pc, #140]	; (8002aac <MX_TIM1_Init+0xac>)
 8002a20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a22:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <MX_TIM1_Init+0xa8>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a28:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <MX_TIM1_Init+0xa8>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <MX_TIM1_Init+0xa8>)
 8002a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <MX_TIM1_Init+0xa8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <MX_TIM1_Init+0xa8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <MX_TIM1_Init+0xa8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a50:	2301      	movs	r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a60:	2301      	movs	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	4619      	mov	r1, r3
 8002a72:	480d      	ldr	r0, [pc, #52]	; (8002aa8 <MX_TIM1_Init+0xa8>)
 8002a74:	f005 fac6 	bl	8008004 <HAL_TIM_Encoder_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002a7e:	f7ff fc75 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4806      	ldr	r0, [pc, #24]	; (8002aa8 <MX_TIM1_Init+0xa8>)
 8002a90:	f006 f9b4 	bl	8008dfc <HAL_TIMEx_MasterConfigSynchronization>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002a9a:	f7ff fc67 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a9e:	bf00      	nop
 8002aa0:	3730      	adds	r7, #48	; 0x30
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000788 	.word	0x20000788
 8002aac:	40010000 	.word	0x40010000

08002ab0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08e      	sub	sp, #56	; 0x38
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac4:	f107 0320 	add.w	r3, r7, #32
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
 8002adc:	615a      	str	r2, [r3, #20]
 8002ade:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002aea:	2254      	movs	r2, #84	; 0x54
 8002aec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aee:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002af4:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002afa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afc:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b08:	4823      	ldr	r0, [pc, #140]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b0a:	f005 f90b 	bl	8007d24 <HAL_TIM_Base_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002b14:	f7ff fc2a 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b22:	4619      	mov	r1, r3
 8002b24:	481c      	ldr	r0, [pc, #112]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b26:	f005 fd53 	bl	80085d0 <HAL_TIM_ConfigClockSource>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002b30:	f7ff fc1c 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b34:	4818      	ldr	r0, [pc, #96]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b36:	f005 f944 	bl	8007dc2 <HAL_TIM_PWM_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002b40:	f7ff fc14 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b4c:	f107 0320 	add.w	r3, r7, #32
 8002b50:	4619      	mov	r1, r3
 8002b52:	4811      	ldr	r0, [pc, #68]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b54:	f006 f952 	bl	8008dfc <HAL_TIMEx_MasterConfigSynchronization>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002b5e:	f7ff fc05 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b62:	2360      	movs	r3, #96	; 0x60
 8002b64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b72:	1d3b      	adds	r3, r7, #4
 8002b74:	2200      	movs	r2, #0
 8002b76:	4619      	mov	r1, r3
 8002b78:	4807      	ldr	r0, [pc, #28]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b7a:	f005 fc67 	bl	800844c <HAL_TIM_PWM_ConfigChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002b84:	f7ff fbf2 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b88:	4803      	ldr	r0, [pc, #12]	; (8002b98 <MX_TIM2_Init+0xe8>)
 8002b8a:	f000 f875 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8002b8e:	bf00      	nop
 8002b90:	3738      	adds	r7, #56	; 0x38
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200007d0 	.word	0x200007d0

08002b9c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <HAL_TIM_Encoder_MspInit+0x84>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d12c      	bne.n	8002c18 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002be4:	f043 0310 	orr.w	r3, r3, #16
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002bf6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4619      	mov	r1, r3
 8002c12:	4805      	ldr	r0, [pc, #20]	; (8002c28 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002c14:	f002 fd70 	bl	80056f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40021000 	.word	0x40021000

08002c2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d115      	bne.n	8002c6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_TIM_Base_MspInit+0x48>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <HAL_TIM_Base_MspInit+0x48>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_TIM_Base_MspInit+0x48>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	201c      	movs	r0, #28
 8002c60:	f002 fc81 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c64:	201c      	movs	r0, #28
 8002c66:	f002 fc9a 	bl	800559e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800

08002c78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d11e      	bne.n	8002cd8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_TIM_MspPostInit+0x68>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a0f      	ldr	r2, [pc, #60]	; (8002ce0 <HAL_TIM_MspPostInit+0x68>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <HAL_TIM_MspPostInit+0x68>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ccc:	f107 030c 	add.w	r3, r7, #12
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4804      	ldr	r0, [pc, #16]	; (8002ce4 <HAL_TIM_MspPostInit+0x6c>)
 8002cd4:	f002 fd10 	bl	80056f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002cd8:	bf00      	nop
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020000 	.word	0x40020000

08002ce8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <MX_USART2_UART_Init+0x4c>)
 8002cee:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <MX_USART2_UART_Init+0x50>)
 8002cf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <MX_USART2_UART_Init+0x4c>)
 8002cf4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002cf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <MX_USART2_UART_Init+0x4c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <MX_USART2_UART_Init+0x4c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <MX_USART2_UART_Init+0x4c>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <MX_USART2_UART_Init+0x4c>)
 8002d0e:	220c      	movs	r2, #12
 8002d10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <MX_USART2_UART_Init+0x4c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <MX_USART2_UART_Init+0x4c>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d1e:	4805      	ldr	r0, [pc, #20]	; (8002d34 <MX_USART2_UART_Init+0x4c>)
 8002d20:	f006 f8fc 	bl	8008f1c <HAL_UART_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d2a:	f7ff fb1f 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000818 	.word	0x20000818
 8002d38:	40004400 	.word	0x40004400

08002d3c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d40:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <MX_USART3_UART_Init+0x4c>)
 8002d42:	4a12      	ldr	r2, [pc, #72]	; (8002d8c <MX_USART3_UART_Init+0x50>)
 8002d44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <MX_USART3_UART_Init+0x4c>)
 8002d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <MX_USART3_UART_Init+0x4c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <MX_USART3_UART_Init+0x4c>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <MX_USART3_UART_Init+0x4c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d60:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <MX_USART3_UART_Init+0x4c>)
 8002d62:	220c      	movs	r2, #12
 8002d64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d66:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <MX_USART3_UART_Init+0x4c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <MX_USART3_UART_Init+0x4c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d72:	4805      	ldr	r0, [pc, #20]	; (8002d88 <MX_USART3_UART_Init+0x4c>)
 8002d74:	f006 f8d2 	bl	8008f1c <HAL_UART_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d7e:	f7ff faf5 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000860 	.word	0x20000860
 8002d8c:	40004800 	.word	0x40004800

08002d90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08c      	sub	sp, #48	; 0x30
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 031c 	add.w	r3, r7, #28
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a3a      	ldr	r2, [pc, #232]	; (8002e98 <HAL_UART_MspInit+0x108>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d134      	bne.n	8002e1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a38      	ldr	r2, [pc, #224]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	61bb      	str	r3, [r7, #24]
 8002dcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	4b32      	ldr	r3, [pc, #200]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a31      	ldr	r2, [pc, #196]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dea:	230c      	movs	r3, #12
 8002dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df6:	2303      	movs	r3, #3
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfe:	f107 031c 	add.w	r3, r7, #28
 8002e02:	4619      	mov	r1, r3
 8002e04:	4826      	ldr	r0, [pc, #152]	; (8002ea0 <HAL_UART_MspInit+0x110>)
 8002e06:	f002 fc77 	bl	80056f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	2026      	movs	r0, #38	; 0x26
 8002e10:	f002 fba9 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e14:	2026      	movs	r0, #38	; 0x26
 8002e16:	f002 fbc2 	bl	800559e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e1a:	e039      	b.n	8002e90 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a20      	ldr	r2, [pc, #128]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d134      	bne.n	8002e90 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002e4c:	f043 0308 	orr.w	r3, r3, #8
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e70:	2307      	movs	r3, #7
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e74:	f107 031c 	add.w	r3, r7, #28
 8002e78:	4619      	mov	r1, r3
 8002e7a:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <HAL_UART_MspInit+0x118>)
 8002e7c:	f002 fc3c 	bl	80056f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2100      	movs	r1, #0
 8002e84:	2027      	movs	r0, #39	; 0x27
 8002e86:	f002 fb6e 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e8a:	2027      	movs	r0, #39	; 0x27
 8002e8c:	f002 fb87 	bl	800559e <HAL_NVIC_EnableIRQ>
}
 8002e90:	bf00      	nop
 8002e92:	3730      	adds	r7, #48	; 0x30
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40004400 	.word	0x40004400
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40004800 	.word	0x40004800
 8002ea8:	40020c00 	.word	0x40020c00

08002eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002eb0:	f7ff fd94 	bl	80029dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eb6:	490d      	ldr	r1, [pc, #52]	; (8002eec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ef0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ebc:	e002      	b.n	8002ec4 <LoopCopyDataInit>

08002ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec2:	3304      	adds	r3, #4

08002ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec8:	d3f9      	bcc.n	8002ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ecc:	4c0a      	ldr	r4, [pc, #40]	; (8002ef8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed0:	e001      	b.n	8002ed6 <LoopFillZerobss>

08002ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed4:	3204      	adds	r2, #4

08002ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed8:	d3fb      	bcc.n	8002ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eda:	f00a fd11 	bl	800d900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ede:	f7ff f9bf 	bl	8002260 <main>
  bx  lr    
 8002ee2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ee4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eec:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002ef0:	0800fd00 	.word	0x0800fd00
  ldr r2, =_sbss
 8002ef4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002ef8:	200009f8 	.word	0x200009f8

08002efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC_IRQHandler>
	...

08002f00 <_ZN9BarometreC1EP17I2C_HandleTypeDefh>:
 *      Author: onurd
 */
#include "Barometre.h"
#include <math.h>

Barometre::Barometre(I2C_HandleTypeDef* hi2c, uint8_t address)
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	71fb      	strb	r3, [r7, #7]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3306      	adds	r3, #6
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	60da      	str	r2, [r3, #12]
 8002f1c:	611a      	str	r2, [r3, #16]
 8002f1e:	829a      	strh	r2, [r3, #20]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <_ZN9BarometreC1EP17I2C_HandleTypeDefh+0x50>)
 8002f24:	61da      	str	r2, [r3, #28]
{
    this->hi2c=hi2c;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	601a      	str	r2, [r3, #0]
	this->address=address;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	79fa      	ldrb	r2, [r7, #7]
 8002f30:	711a      	strb	r2, [r3, #4]
	T=0;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	661a      	str	r2, [r3, #96]	; 0x60
	P=0;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	47c5e680 	.word	0x47c5e680

08002f54 <_ZN9Barometre10YapilandirEv>:

void Barometre::Yapilandir()
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af04      	add	r7, sp, #16
 8002f5a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(hi2c, address, 0xAA, 1, calibDatas, 22, 100);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	791b      	ldrb	r3, [r3, #4]
 8002f64:	b299      	uxth	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3306      	adds	r3, #6
 8002f6a:	2264      	movs	r2, #100	; 0x64
 8002f6c:	9202      	str	r2, [sp, #8]
 8002f6e:	2216      	movs	r2, #22
 8002f70:	9201      	str	r2, [sp, #4]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2301      	movs	r3, #1
 8002f76:	22aa      	movs	r2, #170	; 0xaa
 8002f78:	f003 fb06 	bl	8006588 <HAL_I2C_Mem_Read>
	AC1 = (calibDatas[0] << 8) | calibDatas[1];
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	799b      	ldrb	r3, [r3, #6]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	b21a      	sxth	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	79db      	ldrb	r3, [r3, #7]
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	b21a      	sxth	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	841a      	strh	r2, [r3, #32]
	AC2 = (calibDatas[2] << 8) | calibDatas[3];
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	7a1b      	ldrb	r3, [r3, #8]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	7a5b      	ldrb	r3, [r3, #9]
 8002f9e:	b21b      	sxth	r3, r3
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b21a      	sxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	845a      	strh	r2, [r3, #34]	; 0x22
	AC3 = (calibDatas[4] << 8) | calibDatas[5];
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7a9b      	ldrb	r3, [r3, #10]
 8002fac:	021b      	lsls	r3, r3, #8
 8002fae:	b21a      	sxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7adb      	ldrb	r3, [r3, #11]
 8002fb4:	b21b      	sxth	r3, r3
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b21a      	sxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	849a      	strh	r2, [r3, #36]	; 0x24
	AC4 = (calibDatas[6] << 8) | calibDatas[7];
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7b1b      	ldrb	r3, [r3, #12]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	b21a      	sxth	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	7b5b      	ldrb	r3, [r3, #13]
 8002fca:	b21b      	sxth	r3, r3
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b21b      	sxth	r3, r3
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	84da      	strh	r2, [r3, #38]	; 0x26
	AC5 = (calibDatas[8] << 8) | calibDatas[9];
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	7b9b      	ldrb	r3, [r3, #14]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	b21a      	sxth	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7bdb      	ldrb	r3, [r3, #15]
 8002fe2:	b21b      	sxth	r3, r3
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	b21b      	sxth	r3, r3
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	851a      	strh	r2, [r3, #40]	; 0x28
	AC6 =(calibDatas[10] << 8) | calibDatas[11];
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7c1b      	ldrb	r3, [r3, #16]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	b21a      	sxth	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7c5b      	ldrb	r3, [r3, #17]
 8002ffa:	b21b      	sxth	r3, r3
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	b21b      	sxth	r3, r3
 8003000:	b29a      	uxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	855a      	strh	r2, [r3, #42]	; 0x2a
	B1 = (calibDatas[12] << 8) | calibDatas[13];
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	7c9b      	ldrb	r3, [r3, #18]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	b21a      	sxth	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	7cdb      	ldrb	r3, [r3, #19]
 8003012:	b21b      	sxth	r3, r3
 8003014:	4313      	orrs	r3, r2
 8003016:	b21a      	sxth	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	859a      	strh	r2, [r3, #44]	; 0x2c
	B2 = (calibDatas[14] << 8) | calibDatas[15];
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7d1b      	ldrb	r3, [r3, #20]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	b21a      	sxth	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7d5b      	ldrb	r3, [r3, #21]
 8003028:	b21b      	sxth	r3, r3
 800302a:	4313      	orrs	r3, r2
 800302c:	b21a      	sxth	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	85da      	strh	r2, [r3, #46]	; 0x2e
	MB = (calibDatas[16] << 8) | calibDatas[17];
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7d9b      	ldrb	r3, [r3, #22]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	b21a      	sxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7ddb      	ldrb	r3, [r3, #23]
 800303e:	b21b      	sxth	r3, r3
 8003040:	4313      	orrs	r3, r2
 8003042:	b21a      	sxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	861a      	strh	r2, [r3, #48]	; 0x30
	MC = (calibDatas[18] << 8) | calibDatas[19];
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	7e1b      	ldrb	r3, [r3, #24]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	b21a      	sxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7e5b      	ldrb	r3, [r3, #25]
 8003054:	b21b      	sxth	r3, r3
 8003056:	4313      	orrs	r3, r2
 8003058:	b21a      	sxth	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	865a      	strh	r2, [r3, #50]	; 0x32
	MD = (calibDatas[20] << 8) | calibDatas[21];
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7e9b      	ldrb	r3, [r3, #26]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	b21a      	sxth	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	7edb      	ldrb	r3, [r3, #27]
 800306a:	b21b      	sxth	r3, r3
 800306c:	4313      	orrs	r3, r2
 800306e:	b21a      	sxth	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <_ZN9Barometre11SicaklikOkuEv>:

float Barometre::SicaklikOku()
{
 800307c:	b5b0      	push	{r4, r5, r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	UT = regSicaklikOku();
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 facf 	bl	8003628 <_ZN9Barometre14regSicaklikOkuEv>
 800308a:	4603      	mov	r3, r0
 800308c:	461a      	mov	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	639a      	str	r2, [r3, #56]	; 0x38
	X1 = (UT - AC6) * AC5 / pow(2, 15);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd fa35 	bl	8000514 <__aeabi_i2d>
 80030aa:	4604      	mov	r4, r0
 80030ac:	460d      	mov	r5, r1
 80030ae:	210f      	movs	r1, #15
 80030b0:	2002      	movs	r0, #2
 80030b2:	f000 fb61 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80030b6:	ec53 2b10 	vmov	r2, r3, d0
 80030ba:	4620      	mov	r0, r4
 80030bc:	4629      	mov	r1, r5
 80030be:	f7fd fbbd 	bl	800083c <__aeabi_ddiv>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4610      	mov	r0, r2
 80030c8:	4619      	mov	r1, r3
 80030ca:	f7fd fd3d 	bl	8000b48 <__aeabi_d2iz>
 80030ce:	4602      	mov	r2, r0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
	X2 = (MC * pow(2, 11)) / (X1 + MD);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fa1a 	bl	8000514 <__aeabi_i2d>
 80030e0:	4604      	mov	r4, r0
 80030e2:	460d      	mov	r5, r1
 80030e4:	210b      	movs	r1, #11
 80030e6:	2002      	movs	r0, #2
 80030e8:	f000 fb46 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80030ec:	ec53 2b10 	vmov	r2, r3, d0
 80030f0:	4620      	mov	r0, r4
 80030f2:	4629      	mov	r1, r5
 80030f4:	f7fd fa78 	bl	80005e8 <__aeabi_dmul>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4614      	mov	r4, r2
 80030fe:	461d      	mov	r5, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	; 0x34
 800310a:	4413      	add	r3, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fa01 	bl	8000514 <__aeabi_i2d>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4620      	mov	r0, r4
 8003118:	4629      	mov	r1, r5
 800311a:	f7fd fb8f 	bl	800083c <__aeabi_ddiv>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	f7fd fd0f 	bl	8000b48 <__aeabi_d2iz>
 800312a:	4602      	mov	r2, r0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	645a      	str	r2, [r3, #68]	; 0x44
	B5 = X1 + X2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	441a      	add	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	651a      	str	r2, [r3, #80]	; 0x50
	T = (B5 + 8) / pow(2, 4);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003142:	3308      	adds	r3, #8
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd f9e5 	bl	8000514 <__aeabi_i2d>
 800314a:	4604      	mov	r4, r0
 800314c:	460d      	mov	r5, r1
 800314e:	2104      	movs	r1, #4
 8003150:	2002      	movs	r0, #2
 8003152:	f000 fb11 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003156:	ec53 2b10 	vmov	r2, r3, d0
 800315a:	4620      	mov	r0, r4
 800315c:	4629      	mov	r1, r5
 800315e:	f7fd fb6d 	bl	800083c <__aeabi_ddiv>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	f7fd fd35 	bl	8000bd8 <__aeabi_d2f>
 800316e:	4602      	mov	r2, r0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	661a      	str	r2, [r3, #96]	; 0x60
    return T / 10.0;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800317a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800317e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003182:	eef0 7a66 	vmov.f32	s15, s13
}
 8003186:	eeb0 0a67 	vmov.f32	s0, s15
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bdb0      	pop	{r4, r5, r7, pc}

08003190 <_ZN9Barometre9BasincOkuEh>:

float Barometre::BasincOku(uint8_t oss)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	70fb      	strb	r3, [r7, #3]
    BasincHesapla(oss);
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f84b 	bl	800323c <_ZN9Barometre13BasincHesaplaEh>
    return P;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031aa:	ee07 3a90 	vmov	s15, r3
}
 80031ae:	eeb0 0a67 	vmov.f32	s0, s15
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_ZN9Barometre9IrtifaOkuEh>:

float Barometre::IrtifaOku(uint8_t oss)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
    BasincOku(oss);
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	4619      	mov	r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ffe1 	bl	8003190 <_ZN9Barometre9BasincOkuEh>
    return 44330 * (1 - (pow((P / Po), 1 / 5.255)));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80031da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031de:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8003228 <_ZN9Barometre9IrtifaOkuEh+0x70>
 80031e2:	eeb0 0a66 	vmov.f32	s0, s13
 80031e6:	f000 fae7 	bl	80037b8 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80031ea:	ec53 2b10 	vmov	r2, r3, d0
 80031ee:	f04f 0000 	mov.w	r0, #0
 80031f2:	4911      	ldr	r1, [pc, #68]	; (8003238 <_ZN9Barometre9IrtifaOkuEh+0x80>)
 80031f4:	f7fd f840 	bl	8000278 <__aeabi_dsub>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4610      	mov	r0, r2
 80031fe:	4619      	mov	r1, r3
 8003200:	a30b      	add	r3, pc, #44	; (adr r3, 8003230 <_ZN9Barometre9IrtifaOkuEh+0x78>)
 8003202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003206:	f7fd f9ef 	bl	80005e8 <__aeabi_dmul>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	f7fd fce1 	bl	8000bd8 <__aeabi_d2f>
 8003216:	4603      	mov	r3, r0
 8003218:	ee07 3a90 	vmov	s15, r3
}
 800321c:	eeb0 0a67 	vmov.f32	s0, s15
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	ccd9456c 	.word	0xccd9456c
 800322c:	3fc85b95 	.word	0x3fc85b95
 8003230:	00000000 	.word	0x00000000
 8003234:	40e5a540 	.word	0x40e5a540
 8003238:	3ff00000 	.word	0x3ff00000

0800323c <_ZN9Barometre13BasincHesaplaEh>:

void Barometre::BasincHesapla(uint8_t oss)
{
 800323c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	70fb      	strb	r3, [r7, #3]
    UP = regBasincOku(oss);
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	4619      	mov	r1, r3
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fa0a 	bl	8003668 <_ZN9Barometre12regBasincOkuEh>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	63da      	str	r2, [r3, #60]	; 0x3c
    B6 = B5 - 4000;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003260:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
    X1 = (B2 * (B6 * B6 / pow(2, 12))) / pow(2, 11);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd f950 	bl	8000514 <__aeabi_i2d>
 8003274:	4604      	mov	r4, r0
 8003276:	460d      	mov	r5, r1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003280:	fb02 f303 	mul.w	r3, r2, r3
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd f945 	bl	8000514 <__aeabi_i2d>
 800328a:	4680      	mov	r8, r0
 800328c:	4689      	mov	r9, r1
 800328e:	210c      	movs	r1, #12
 8003290:	2002      	movs	r0, #2
 8003292:	f000 fa71 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003296:	ec53 2b10 	vmov	r2, r3, d0
 800329a:	4640      	mov	r0, r8
 800329c:	4649      	mov	r1, r9
 800329e:	f7fd facd 	bl	800083c <__aeabi_ddiv>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4620      	mov	r0, r4
 80032a8:	4629      	mov	r1, r5
 80032aa:	f7fd f99d 	bl	80005e8 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4614      	mov	r4, r2
 80032b4:	461d      	mov	r5, r3
 80032b6:	210b      	movs	r1, #11
 80032b8:	2002      	movs	r0, #2
 80032ba:	f000 fa5d 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80032be:	ec53 2b10 	vmov	r2, r3, d0
 80032c2:	4620      	mov	r0, r4
 80032c4:	4629      	mov	r1, r5
 80032c6:	f7fd fab9 	bl	800083c <__aeabi_ddiv>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f7fd fc39 	bl	8000b48 <__aeabi_d2iz>
 80032d6:	4602      	mov	r2, r0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
    X2 = AC2 * B6 / pow(2, 11);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80032e2:	461a      	mov	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f911 	bl	8000514 <__aeabi_i2d>
 80032f2:	4604      	mov	r4, r0
 80032f4:	460d      	mov	r5, r1
 80032f6:	210b      	movs	r1, #11
 80032f8:	2002      	movs	r0, #2
 80032fa:	f000 fa3d 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80032fe:	ec53 2b10 	vmov	r2, r3, d0
 8003302:	4620      	mov	r0, r4
 8003304:	4629      	mov	r1, r5
 8003306:	f7fd fa99 	bl	800083c <__aeabi_ddiv>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4610      	mov	r0, r2
 8003310:	4619      	mov	r1, r3
 8003312:	f7fd fc19 	bl	8000b48 <__aeabi_d2iz>
 8003316:	4602      	mov	r2, r0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
    X3 = X1 + X2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	441a      	add	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	649a      	str	r2, [r3, #72]	; 0x48
    B3 = (((AC1 * 4 + X3) << oss) + 2) / 4;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003330:	009a      	lsls	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003336:	441a      	add	r2, r3
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	3302      	adds	r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	da00      	bge.n	8003346 <_ZN9Barometre13BasincHesaplaEh+0x10a>
 8003344:	3303      	adds	r3, #3
 8003346:	109b      	asrs	r3, r3, #2
 8003348:	461a      	mov	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	64da      	str	r2, [r3, #76]	; 0x4c
    X1 = AC3 * B6 / pow(2, 13);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003354:	461a      	mov	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335a:	fb02 f303 	mul.w	r3, r2, r3
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd f8d8 	bl	8000514 <__aeabi_i2d>
 8003364:	4604      	mov	r4, r0
 8003366:	460d      	mov	r5, r1
 8003368:	210d      	movs	r1, #13
 800336a:	2002      	movs	r0, #2
 800336c:	f000 fa04 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003370:	ec53 2b10 	vmov	r2, r3, d0
 8003374:	4620      	mov	r0, r4
 8003376:	4629      	mov	r1, r5
 8003378:	f7fd fa60 	bl	800083c <__aeabi_ddiv>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	f7fd fbe0 	bl	8000b48 <__aeabi_d2iz>
 8003388:	4602      	mov	r2, r0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
    X2 = (B1 * (B6 * B6 / pow(2, 12))) / pow(2, 16);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f8bd 	bl	8000514 <__aeabi_i2d>
 800339a:	4604      	mov	r4, r0
 800339c:	460d      	mov	r5, r1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd f8b2 	bl	8000514 <__aeabi_i2d>
 80033b0:	4680      	mov	r8, r0
 80033b2:	4689      	mov	r9, r1
 80033b4:	210c      	movs	r1, #12
 80033b6:	2002      	movs	r0, #2
 80033b8:	f000 f9de 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80033bc:	ec53 2b10 	vmov	r2, r3, d0
 80033c0:	4640      	mov	r0, r8
 80033c2:	4649      	mov	r1, r9
 80033c4:	f7fd fa3a 	bl	800083c <__aeabi_ddiv>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4620      	mov	r0, r4
 80033ce:	4629      	mov	r1, r5
 80033d0:	f7fd f90a 	bl	80005e8 <__aeabi_dmul>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4614      	mov	r4, r2
 80033da:	461d      	mov	r5, r3
 80033dc:	2110      	movs	r1, #16
 80033de:	2002      	movs	r0, #2
 80033e0:	f000 f9ca 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80033e4:	ec53 2b10 	vmov	r2, r3, d0
 80033e8:	4620      	mov	r0, r4
 80033ea:	4629      	mov	r1, r5
 80033ec:	f7fd fa26 	bl	800083c <__aeabi_ddiv>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	f7fd fba6 	bl	8000b48 <__aeabi_d2iz>
 80033fc:	4602      	mov	r2, r0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	645a      	str	r2, [r3, #68]	; 0x44
    X3 = ((X1 + X2) + 2) / pow(2, 2);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	4413      	add	r3, r2
 800340c:	3302      	adds	r3, #2
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd f880 	bl	8000514 <__aeabi_i2d>
 8003414:	4604      	mov	r4, r0
 8003416:	460d      	mov	r5, r1
 8003418:	2102      	movs	r1, #2
 800341a:	2002      	movs	r0, #2
 800341c:	f000 f9ac 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003420:	ec53 2b10 	vmov	r2, r3, d0
 8003424:	4620      	mov	r0, r4
 8003426:	4629      	mov	r1, r5
 8003428:	f7fd fa08 	bl	800083c <__aeabi_ddiv>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f7fd fb88 	bl	8000b48 <__aeabi_d2iz>
 8003438:	4602      	mov	r2, r0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	649a      	str	r2, [r3, #72]	; 0x48
    B4 = AC4 * (unsigned long)(X3 + 32768) / pow(2, 15);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003442:	461a      	mov	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd f84f 	bl	80004f4 <__aeabi_ui2d>
 8003456:	4604      	mov	r4, r0
 8003458:	460d      	mov	r5, r1
 800345a:	210f      	movs	r1, #15
 800345c:	2002      	movs	r0, #2
 800345e:	f000 f98b 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003462:	ec53 2b10 	vmov	r2, r3, d0
 8003466:	4620      	mov	r0, r4
 8003468:	4629      	mov	r1, r5
 800346a:	f7fd f9e7 	bl	800083c <__aeabi_ddiv>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	f7fd fb8f 	bl	8000b98 <__aeabi_d2uiz>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	659a      	str	r2, [r3, #88]	; 0x58
    B7 = ((unsigned long)UP - B3) * (50000 >> oss);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003484:	461a      	mov	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8003492:	fa41 f202 	asr.w	r2, r1, r2
 8003496:	fb03 f202 	mul.w	r2, r3, r2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	65da      	str	r2, [r3, #92]	; 0x5c
    P = (B7 < 0x80000000) ? (B7 * 2) / B4 : (B7 / B4) * 2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	db0b      	blt.n	80034be <_ZN9Barometre13BasincHesaplaEh+0x282>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034aa:	005a      	lsls	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	ee07 3a90 	vmov	s15, r3
 80034b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034bc:	e00a      	b.n	80034d4 <_ZN9Barometre13BasincHesaplaEh+0x298>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    X1 = (P / pow(2, 8)) * (P / pow(2, 8));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd f82a 	bl	8000538 <__aeabi_f2d>
 80034e4:	4604      	mov	r4, r0
 80034e6:	460d      	mov	r5, r1
 80034e8:	2108      	movs	r1, #8
 80034ea:	2002      	movs	r0, #2
 80034ec:	f000 f944 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80034f0:	ec53 2b10 	vmov	r2, r3, d0
 80034f4:	4620      	mov	r0, r4
 80034f6:	4629      	mov	r1, r5
 80034f8:	f7fd f9a0 	bl	800083c <__aeabi_ddiv>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4690      	mov	r8, r2
 8003502:	4699      	mov	r9, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd f815 	bl	8000538 <__aeabi_f2d>
 800350e:	4604      	mov	r4, r0
 8003510:	460d      	mov	r5, r1
 8003512:	2108      	movs	r1, #8
 8003514:	2002      	movs	r0, #2
 8003516:	f000 f92f 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800351a:	ec53 2b10 	vmov	r2, r3, d0
 800351e:	4620      	mov	r0, r4
 8003520:	4629      	mov	r1, r5
 8003522:	f7fd f98b 	bl	800083c <__aeabi_ddiv>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4640      	mov	r0, r8
 800352c:	4649      	mov	r1, r9
 800352e:	f7fd f85b 	bl	80005e8 <__aeabi_dmul>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	f7fd fb05 	bl	8000b48 <__aeabi_d2iz>
 800353e:	4602      	mov	r2, r0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
    X1 = (X1 * 3038) / pow(2, 16);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f640 32de 	movw	r2, #3038	; 0xbde
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	4618      	mov	r0, r3
 8003552:	f7fc ffdf 	bl	8000514 <__aeabi_i2d>
 8003556:	4604      	mov	r4, r0
 8003558:	460d      	mov	r5, r1
 800355a:	2110      	movs	r1, #16
 800355c:	2002      	movs	r0, #2
 800355e:	f000 f90b 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003562:	ec53 2b10 	vmov	r2, r3, d0
 8003566:	4620      	mov	r0, r4
 8003568:	4629      	mov	r1, r5
 800356a:	f7fd f967 	bl	800083c <__aeabi_ddiv>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	f7fd fae7 	bl	8000b48 <__aeabi_d2iz>
 800357a:	4602      	mov	r2, r0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
    X2 = (-7357 * P) / pow(2, 16);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003586:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003624 <_ZN9Barometre13BasincHesaplaEh+0x3e8>
 800358a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800358e:	ee17 0a90 	vmov	r0, s15
 8003592:	f7fc ffd1 	bl	8000538 <__aeabi_f2d>
 8003596:	4604      	mov	r4, r0
 8003598:	460d      	mov	r5, r1
 800359a:	2110      	movs	r1, #16
 800359c:	2002      	movs	r0, #2
 800359e:	f000 f8eb 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80035a2:	ec53 2b10 	vmov	r2, r3, d0
 80035a6:	4620      	mov	r0, r4
 80035a8:	4629      	mov	r1, r5
 80035aa:	f7fd f947 	bl	800083c <__aeabi_ddiv>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4610      	mov	r0, r2
 80035b4:	4619      	mov	r1, r3
 80035b6:	f7fd fac7 	bl	8000b48 <__aeabi_d2iz>
 80035ba:	4602      	mov	r2, r0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	645a      	str	r2, [r3, #68]	; 0x44
    P = P + (X1 + X2 + 3791) / pow(2, 4);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fc ffb7 	bl	8000538 <__aeabi_f2d>
 80035ca:	4604      	mov	r4, r0
 80035cc:	460d      	mov	r5, r1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	4413      	add	r3, r2
 80035d8:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ff99 	bl	8000514 <__aeabi_i2d>
 80035e2:	4680      	mov	r8, r0
 80035e4:	4689      	mov	r9, r1
 80035e6:	2104      	movs	r1, #4
 80035e8:	2002      	movs	r0, #2
 80035ea:	f000 f8c5 	bl	8003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80035ee:	ec53 2b10 	vmov	r2, r3, d0
 80035f2:	4640      	mov	r0, r8
 80035f4:	4649      	mov	r1, r9
 80035f6:	f7fd f921 	bl	800083c <__aeabi_ddiv>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4620      	mov	r0, r4
 8003600:	4629      	mov	r1, r5
 8003602:	f7fc fe3b 	bl	800027c <__adddf3>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4610      	mov	r0, r2
 800360c:	4619      	mov	r1, r3
 800360e:	f7fd fae3 	bl	8000bd8 <__aeabi_d2f>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003622:	bf00      	nop
 8003624:	c5e5e800 	.word	0xc5e5e800

08003628 <_ZN9Barometre14regSicaklikOkuEv>:

uint16_t Barometre::regSicaklikOku()
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af02      	add	r7, sp, #8
 800362e:	6078      	str	r0, [r7, #4]
    data = 0x2E;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	222e      	movs	r2, #46	; 0x2e
 8003634:	715a      	strb	r2, [r3, #5]
    uint8_t tempRAW[2] = {0};
 8003636:	2300      	movs	r3, #0
 8003638:	81bb      	strh	r3, [r7, #12]

    writeAndRead(tempRAW, data, 'T', 4);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	795a      	ldrb	r2, [r3, #5]
 800363e:	f107 010c 	add.w	r1, r7, #12
 8003642:	2304      	movs	r3, #4
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2354      	movs	r3, #84	; 0x54
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f83d 	bl	80036c8 <_ZN9Barometre12writeAndReadEPhhch>
    return ((tempRAW[0] << 8) | tempRAW[1]);
 800364e:	7b3b      	ldrb	r3, [r7, #12]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	b21a      	sxth	r2, r3
 8003654:	7b7b      	ldrb	r3, [r7, #13]
 8003656:	b21b      	sxth	r3, r3
 8003658:	4313      	orrs	r3, r2
 800365a:	b21b      	sxth	r3, r3
 800365c:	b29b      	uxth	r3, r3
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <_ZN9Barometre12regBasincOkuEh>:

uint16_t Barometre::regBasincOku(uint8_t oss)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af02      	add	r7, sp, #8
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	70fb      	strb	r3, [r7, #3]
    data = 0x34 + (oss << 6);
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	019b      	lsls	r3, r3, #6
 8003678:	b2db      	uxtb	r3, r3
 800367a:	3334      	adds	r3, #52	; 0x34
 800367c:	b2da      	uxtb	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	715a      	strb	r2, [r3, #5]
    uint8_t pressRaw[3] = {0};
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <_ZN9Barometre12regBasincOkuEh+0x5c>)
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	81bb      	strh	r3, [r7, #12]
 8003688:	2300      	movs	r3, #0
 800368a:	73bb      	strb	r3, [r7, #14]

    writeAndRead(pressRaw, data, 'P', oss);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	795a      	ldrb	r2, [r3, #5]
 8003690:	f107 010c 	add.w	r1, r7, #12
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2350      	movs	r3, #80	; 0x50
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f814 	bl	80036c8 <_ZN9Barometre12writeAndReadEPhhch>
    return (((pressRaw[0] << 16) + (pressRaw[1] << 8) + pressRaw[2]) >> (8 - oss));
 80036a0:	7b3b      	ldrb	r3, [r7, #12]
 80036a2:	041a      	lsls	r2, r3, #16
 80036a4:	7b7b      	ldrb	r3, [r7, #13]
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	4413      	add	r3, r2
 80036aa:	7bba      	ldrb	r2, [r7, #14]
 80036ac:	441a      	add	r2, r3
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	f1c3 0308 	rsb	r3, r3, #8
 80036b4:	fa42 f303 	asr.w	r3, r2, r3
 80036b8:	b29b      	uxth	r3, r3
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	0800f688 	.word	0x0800f688

080036c8 <_ZN9Barometre12writeAndReadEPhhch>:

void Barometre::writeAndRead(uint8_t* raw, uint8_t data, char sens, uint8_t oss)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	; 0x28
 80036cc:	af04      	add	r7, sp, #16
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	460b      	mov	r3, r1
 80036d8:	71fb      	strb	r3, [r7, #7]
 80036da:	4613      	mov	r3, r2
 80036dc:	71bb      	strb	r3, [r7, #6]
    uint8_t size;
    HAL_I2C_Mem_Write(hi2c, address, 0xF4, 1, &data, 1, 100);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	791b      	ldrb	r3, [r3, #4]
 80036e6:	b299      	uxth	r1, r3
 80036e8:	2364      	movs	r3, #100	; 0x64
 80036ea:	9302      	str	r3, [sp, #8]
 80036ec:	2301      	movs	r3, #1
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2301      	movs	r3, #1
 80036f6:	22f4      	movs	r2, #244	; 0xf4
 80036f8:	f002 fe4c 	bl	8006394 <HAL_I2C_Mem_Write>

    if (sens == 'P')
 80036fc:	79bb      	ldrb	r3, [r7, #6]
 80036fe:	2b50      	cmp	r3, #80	; 0x50
 8003700:	d121      	bne.n	8003746 <_ZN9Barometre12writeAndReadEPhhch+0x7e>
    {
        size = 3;
 8003702:	2303      	movs	r3, #3
 8003704:	75fb      	strb	r3, [r7, #23]
        if (oss == 0) HAL_Delay(5);
 8003706:	f897 3020 	ldrb.w	r3, [r7, #32]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <_ZN9Barometre12writeAndReadEPhhch+0x4e>
 800370e:	2005      	movs	r0, #5
 8003710:	f001 fe2a 	bl	8005368 <HAL_Delay>
 8003714:	e01c      	b.n	8003750 <_ZN9Barometre12writeAndReadEPhhch+0x88>
        else if (oss == 1) HAL_Delay(8);
 8003716:	f897 3020 	ldrb.w	r3, [r7, #32]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d103      	bne.n	8003726 <_ZN9Barometre12writeAndReadEPhhch+0x5e>
 800371e:	2008      	movs	r0, #8
 8003720:	f001 fe22 	bl	8005368 <HAL_Delay>
 8003724:	e014      	b.n	8003750 <_ZN9Barometre12writeAndReadEPhhch+0x88>
        else if (oss == 2) HAL_Delay(14);
 8003726:	f897 3020 	ldrb.w	r3, [r7, #32]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d103      	bne.n	8003736 <_ZN9Barometre12writeAndReadEPhhch+0x6e>
 800372e:	200e      	movs	r0, #14
 8003730:	f001 fe1a 	bl	8005368 <HAL_Delay>
 8003734:	e00c      	b.n	8003750 <_ZN9Barometre12writeAndReadEPhhch+0x88>
        else if (oss == 3) HAL_Delay(26);
 8003736:	f897 3020 	ldrb.w	r3, [r7, #32]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d108      	bne.n	8003750 <_ZN9Barometre12writeAndReadEPhhch+0x88>
 800373e:	201a      	movs	r0, #26
 8003740:	f001 fe12 	bl	8005368 <HAL_Delay>
 8003744:	e004      	b.n	8003750 <_ZN9Barometre12writeAndReadEPhhch+0x88>
    }
    else
    {
        size = 2;
 8003746:	2302      	movs	r3, #2
 8003748:	75fb      	strb	r3, [r7, #23]
        HAL_Delay(5);
 800374a:	2005      	movs	r0, #5
 800374c:	f001 fe0c 	bl	8005368 <HAL_Delay>
    }

    HAL_I2C_Mem_Read(hi2c, address, 0xF6, 1, raw, size, 100);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	791b      	ldrb	r3, [r3, #4]
 8003758:	b299      	uxth	r1, r3
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	b29b      	uxth	r3, r3
 800375e:	2264      	movs	r2, #100	; 0x64
 8003760:	9202      	str	r2, [sp, #8]
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2301      	movs	r3, #1
 800376a:	22f6      	movs	r2, #246	; 0xf6
 800376c:	f002 ff0c 	bl	8006588 <HAL_I2C_Mem_Read>
}
 8003770:	bf00      	nop
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8003778:	b5b0      	push	{r4, r5, r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fc fec6 	bl	8000514 <__aeabi_i2d>
 8003788:	4604      	mov	r4, r0
 800378a:	460d      	mov	r5, r1
 800378c:	6838      	ldr	r0, [r7, #0]
 800378e:	f7fc fec1 	bl	8000514 <__aeabi_i2d>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	ec43 2b11 	vmov	d1, r2, r3
 800379a:	ec45 4b10 	vmov	d0, r4, r5
 800379e:	f006 fc77 	bl	800a090 <pow>
 80037a2:	eeb0 7a40 	vmov.f32	s14, s0
 80037a6:	eef0 7a60 	vmov.f32	s15, s1
    }
 80037aa:	eeb0 0a47 	vmov.f32	s0, s14
 80037ae:	eef0 0a67 	vmov.f32	s1, s15
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bdb0      	pop	{r4, r5, r7, pc}

080037b8 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	ed87 0a03 	vstr	s0, [r7, #12]
 80037c2:	ed87 1b00 	vstr	d1, [r7]
      return pow(__type(__x), __type(__y));
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7fc feb6 	bl	8000538 <__aeabi_f2d>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	ed97 1b00 	vldr	d1, [r7]
 80037d4:	ec43 2b10 	vmov	d0, r2, r3
 80037d8:	f006 fc5a 	bl	800a090 <pow>
 80037dc:	eeb0 7a40 	vmov.f32	s14, s0
 80037e0:	eef0 7a60 	vmov.f32	s15, s1
    }
 80037e4:	eeb0 0a47 	vmov.f32	s0, s14
 80037e8:	eef0 0a67 	vmov.f32	s1, s15
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <_ZN3GPSC1EP20__UART_HandleTypeDef>:
 *  Created on: Jun 29, 2024
 *      Author: onurd
 */
#include "Gps.h"

GPS::GPS(UART_HandleTypeDef* huart)
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
{
	this->huart_=huart;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	601a      	str	r2, [r3, #0]
	this->rxIndex_u8=0;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	this->rxData_u8=0;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	this->latitude_f32=0;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	this->longitude_f32=0;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <_ZN3GPS10YapilandirEv>:

void GPS::Yapilandir()
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    lwgps_init(&gps_);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3308      	adds	r3, #8
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fc3f 	bl	80020c4 <lwgps_init>
    HAL_UART_Receive_IT(huart_, &rxData_u8, 1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f203 1339 	addw	r3, r3, #313	; 0x139
 8003850:	2201      	movs	r2, #1
 8003852:	4619      	mov	r1, r3
 8003854:	f005 fc3d 	bl	80090d2 <HAL_UART_Receive_IT>
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_ZN3GPS18UartRxCpltCallbackEv>:

void GPS::UartRxCpltCallback()
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
    if (rxData_u8 != '\n' && rxIndex_u8 < sizeof(rxBuffer_))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800386e:	2b0a      	cmp	r3, #10
 8003870:	d016      	beq.n	80038a0 <_ZN3GPS18UartRxCpltCallbackEv+0x40>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8003878:	b25b      	sxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	db10      	blt.n	80038a0 <_ZN3GPS18UartRxCpltCallbackEv+0x40>
    {
        rxBuffer_[rxIndex_u8++] = rxData_u8;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	b2d1      	uxtb	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	f882 1138 	strb.w	r1, [r2, #312]	; 0x138
 800388e:	4619      	mov	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	440b      	add	r3, r1
 800389a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800389e:	e017      	b.n	80038d0 <_ZN3GPS18UartRxCpltCallbackEv+0x70>
    }
    else
    {
        lwgps_process(&gps_, rxBuffer_, rxIndex_u8 + 1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f103 0008 	add.w	r0, r3, #8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80038b2:	3301      	adds	r3, #1
 80038b4:	461a      	mov	r2, r3
 80038b6:	f7fe fc13 	bl	80020e0 <lwgps_process>
        GpsDataCek();
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f815 	bl	80038ea <_ZN3GPS10GpsDataCekEv>
        rxIndex_u8 = 0;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
        rxData_u8 = 0;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    }
    HAL_UART_Receive_IT(huart_, &rxData_u8, 1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f203 1339 	addw	r3, r3, #313	; 0x139
 80038da:	2201      	movs	r2, #1
 80038dc:	4619      	mov	r1, r3
 80038de:	f005 fbf8 	bl	80090d2 <HAL_UART_Receive_IT>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <_ZN3GPS10GpsDataCekEv>:

void GPS::GpsDataCek()
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
	 latitude_f32 = gps_.latitude;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	f7fd f96c 	bl	8000bd8 <__aeabi_d2f>
 8003900:	4602      	mov	r2, r0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	 longitude_f32 = gps_.longitude;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800390e:	4610      	mov	r0, r2
 8003910:	4619      	mov	r1, r3
 8003912:	f7fd f961 	bl	8000bd8 <__aeabi_d2f>
 8003916:	4602      	mov	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <_ZN3GPS10LatitudeAlEv>:

float* GPS::LatitudeAl()
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
    return &latitude_f32;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f503 739e 	add.w	r3, r3, #316	; 0x13c
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <_ZN3GPS11LongitudeAlEv>:

float* GPS::LongitudeAl()
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
    return &longitude_f32;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
}
 800394e:	4618      	mov	r0, r3
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <_ZN5MyImuC1EP17I2C_HandleTypeDef>:
#define ACC_CNFG_REG 0X1C
#define MPU6500_ADDRESS 0x68<< 1
#define WHO_AM_I 0x75
#define RESET_BIT 0x80

MyImu::MyImu(I2C_HandleTypeDef *hi2c)
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
{
	this->hi2c=hi2c;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	601a      	str	r2, [r3, #0]
}
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <_ZN5MyImu17DBC_MPU6500_ResetEv>:

void MyImu::DBC_MPU6500_Reset()
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af04      	add	r7, sp, #16
 800397e:	6078      	str	r0, [r7, #4]
	data_u8 = RESET_BIT;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2280      	movs	r2, #128	; 0x80
 8003984:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS , PWR_MGMT_1_REG, 1, &data_u8, 1, 100);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	2264      	movs	r2, #100	; 0x64
 8003990:	9202      	str	r2, [sp, #8]
 8003992:	2201      	movs	r2, #1
 8003994:	9201      	str	r2, [sp, #4]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	2301      	movs	r3, #1
 800399a:	226b      	movs	r2, #107	; 0x6b
 800399c:	21d0      	movs	r1, #208	; 0xd0
 800399e:	f002 fcf9 	bl	8006394 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80039a2:	2064      	movs	r0, #100	; 0x64
 80039a4:	f001 fce0 	bl	8005368 <HAL_Delay>
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv>:
void MyImu::DBC_MPU6500_YAPILANDIR()
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af04      	add	r7, sp, #16
 80039b6:	6078      	str	r0, [r7, #4]
	uint8_t check_u8;
	DBC_MPU6500_Reset();
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ffdd 	bl	8003978 <_ZN5MyImu17DBC_MPU6500_ResetEv>
	// yoklama sorgusu versiyon sorgusu crc kontrol ,

	HAL_I2C_Mem_Read(hi2c, MPU6500_ADDRESS , WHO_AM_I, 1, &check_u8, 1, 1000);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039c6:	9302      	str	r3, [sp, #8]
 80039c8:	2301      	movs	r3, #1
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	f107 030f 	add.w	r3, r7, #15
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	2301      	movs	r3, #1
 80039d4:	2275      	movs	r2, #117	; 0x75
 80039d6:	21d0      	movs	r1, #208	; 0xd0
 80039d8:	f002 fdd6 	bl	8006588 <HAL_I2C_Mem_Read>
	if (check_u8 == 0x70)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b70      	cmp	r3, #112	; 0x70
 80039e0:	d147      	bne.n	8003a72 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv+0xc2>
	{
		data_u8 = 0x00;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS , PWR_MGMT_1_REG, 1, &data_u8, 1, 1000);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039f4:	9202      	str	r2, [sp, #8]
 80039f6:	2201      	movs	r2, #1
 80039f8:	9201      	str	r2, [sp, #4]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2301      	movs	r3, #1
 80039fe:	226b      	movs	r2, #107	; 0x6b
 8003a00:	21d0      	movs	r1, #208	; 0xd0
 8003a02:	f002 fcc7 	bl	8006394 <HAL_I2C_Mem_Write>
		// SMPLRT_DIV register
		data_u8 = 0x07;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2207      	movs	r2, #7
 8003a0a:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS ,SMPLRT_DIV_REG, 1, &data_u8, 1, 1000);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a18:	9202      	str	r2, [sp, #8]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	9201      	str	r2, [sp, #4]
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	2301      	movs	r3, #1
 8003a22:	2219      	movs	r2, #25
 8003a24:	21d0      	movs	r1, #208	; 0xd0
 8003a26:	f002 fcb5 	bl	8006394 <HAL_I2C_Mem_Write>
		//  ACCEL_CONFIG Register ±2g(00),±4g(01),±8g(10),±16g(11) 4:3
		data_u8 = 0x00;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS, ACC_CNFG_REG, 1, &data_u8, 1, 1000);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a3c:	9202      	str	r2, [sp, #8]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	9201      	str	r2, [sp, #4]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2301      	movs	r3, #1
 8003a46:	221c      	movs	r2, #28
 8003a48:	21d0      	movs	r1, #208	; 0xd0
 8003a4a:	f002 fca3 	bl	8006394 <HAL_I2C_Mem_Write>
		//  GYRO_CONFIG Register +250dps(00),+500dps(01),+1000dps(10),+2000dps(11) 4:3
		data_u8 = 0x00;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS , GYRO_CNFG_REG, 1, &data_u8, 1, 1000);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a60:	9202      	str	r2, [sp, #8]
 8003a62:	2201      	movs	r2, #1
 8003a64:	9201      	str	r2, [sp, #4]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2301      	movs	r3, #1
 8003a6a:	221b      	movs	r2, #27
 8003a6c:	21d0      	movs	r1, #208	; 0xd0
 8003a6e:	f002 fc91 	bl	8006394 <HAL_I2C_Mem_Write>
	}
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <_ZN5MyImu14DBC_GYRO_OFSETEv>:

void MyImu::DBC_GYRO_OFSET()
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	for(int i=0; i<2000; i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	e032      	b.n	8003af0 <_ZN5MyImu14DBC_GYRO_OFSETEv+0x74>
	{
		DBC_GYRO_OKU();
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f92e 	bl	8003cec <_ZN5MyImu12DBC_GYRO_OKUEv>

		gyroHesap[0] += gyroEksen[0];
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	ed93 7a05 	vldr	s14, [r3, #20]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003a9c:	ee07 3a90 	vmov	s15, r3
 8003aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	edc3 7a05 	vstr	s15, [r3, #20]
	    gyroHesap[1] += gyroEksen[1];
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	ed93 7a06 	vldr	s14, [r3, #24]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	edc3 7a06 	vstr	s15, [r3, #24]
	    gyroHesap[2] += gyroEksen[2];
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	ed93 7a07 	vldr	s14, [r3, #28]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003ad8:	ee07 3a90 	vmov	s15, r3
 8003adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	edc3 7a07 	vstr	s15, [r3, #28]
	for(int i=0; i<2000; i++)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3301      	adds	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003af6:	dbc8      	blt.n	8003a8a <_ZN5MyImu14DBC_GYRO_OFSETEv+0xe>
	 }
		gyroHesap[0] /= 2000;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	ed93 7a05 	vldr	s14, [r3, #20]
 8003afe:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003b44 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 8003b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	edc3 7a05 	vstr	s15, [r3, #20]
		gyroHesap[1] /= 2000;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003b12:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003b44 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 8003b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	edc3 7a06 	vstr	s15, [r3, #24]
	    gyroHesap[2] /= 2000;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	ed93 7a07 	vldr	s14, [r3, #28]
 8003b26:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003b44 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 8003b2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	edc3 7a07 	vstr	s15, [r3, #28]
	    //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	    HAL_Delay(100);
 8003b34:	2064      	movs	r0, #100	; 0x64
 8003b36:	f001 fc17 	bl	8005368 <HAL_Delay>
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	44fa0000 	.word	0x44fa0000

08003b48 <_ZN5MyImu12DBC_DATA_OKUEv>:
void MyImu::DBC_DATA_OKU()
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
    DBC_ACC_OKU();
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f843 	bl	8003bdc <_ZN5MyImu11DBC_ACC_OKUEv>
    DBC_SICAKLIK_OKU();
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f87a 	bl	8003c50 <_ZN5MyImu16DBC_SICAKLIK_OKUEv>
    DBC_GYRO_OKU();
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f8c5 	bl	8003cec <_ZN5MyImu12DBC_GYRO_OKUEv>

    gyroEksen[0] -= gyroHesap[0];
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003b68:	ee07 3a90 	vmov	s15, r3
 8003b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b7e:	ee17 3a90 	vmov	r3, s15
 8003b82:	b21a      	sxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	80da      	strh	r2, [r3, #6]
    gyroEksen[1] -= gyroHesap[1];
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ba4:	ee17 3a90 	vmov	r3, s15
 8003ba8:	b21a      	sxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	811a      	strh	r2, [r3, #8]
    gyroEksen[2] -= gyroHesap[2];
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003bb4:	ee07 3a90 	vmov	s15, r3
 8003bb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8003bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bca:	ee17 3a90 	vmov	r3, s15
 8003bce:	b21a      	sxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	815a      	strh	r2, [r3, #10]
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <_ZN5MyImu11DBC_ACC_OKUEv>:
void MyImu::DBC_ACC_OKU()
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	6078      	str	r0, [r7, #4]
	uint8_t accBuffer[6];

	accBuffer[0] = 0x3B;
 8003be4:	233b      	movs	r3, #59	; 0x3b
 8003be6:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c, MPU6500_ADDRESS, accBuffer, 1, 10);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	f107 0208 	add.w	r2, r7, #8
 8003bf0:	230a      	movs	r3, #10
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	21d0      	movs	r1, #208	; 0xd0
 8003bf8:	f002 f89c 	bl	8005d34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU6500_ADDRESS, accBuffer, 6, 10);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	f107 0208 	add.w	r2, r7, #8
 8003c04:	230a      	movs	r3, #10
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2306      	movs	r3, #6
 8003c0a:	21d0      	movs	r1, #208	; 0xd0
 8003c0c:	f002 f990 	bl	8005f30 <HAL_I2C_Master_Receive>
	accEksen[0] = (accBuffer[0] << 8 | accBuffer[1]);
 8003c10:	7a3b      	ldrb	r3, [r7, #8]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	b21a      	sxth	r2, r3
 8003c16:	7a7b      	ldrb	r3, [r7, #9]
 8003c18:	b21b      	sxth	r3, r3
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	b21a      	sxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	819a      	strh	r2, [r3, #12]
	accEksen[1] = (accBuffer[2] << 8 | accBuffer[3]);
 8003c22:	7abb      	ldrb	r3, [r7, #10]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	b21a      	sxth	r2, r3
 8003c28:	7afb      	ldrb	r3, [r7, #11]
 8003c2a:	b21b      	sxth	r3, r3
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	b21a      	sxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	81da      	strh	r2, [r3, #14]
	accEksen[2] = (accBuffer[4] << 8 | accBuffer[5]);
 8003c34:	7b3b      	ldrb	r3, [r7, #12]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	b21a      	sxth	r2, r3
 8003c3a:	7b7b      	ldrb	r3, [r7, #13]
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b21a      	sxth	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	821a      	strh	r2, [r3, #16]
}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <_ZN5MyImu16DBC_SICAKLIK_OKUEv>:
void MyImu::DBC_SICAKLIK_OKU()
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	6078      	str	r0, [r7, #4]
	uint8_t sicaklikBuffer[2];

	sicaklikBuffer[0] = 0x41;
 8003c58:	2341      	movs	r3, #65	; 0x41
 8003c5a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hi2c, MPU6500_ADDRESS, sicaklikBuffer, 1, 10);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	f107 020c 	add.w	r2, r7, #12
 8003c64:	230a      	movs	r3, #10
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2301      	movs	r3, #1
 8003c6a:	21d0      	movs	r1, #208	; 0xd0
 8003c6c:	f002 f862 	bl	8005d34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU6500_ADDRESS, sicaklikBuffer, 2, 10);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	f107 020c 	add.w	r2, r7, #12
 8003c78:	230a      	movs	r3, #10
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	21d0      	movs	r1, #208	; 0xd0
 8003c80:	f002 f956 	bl	8005f30 <HAL_I2C_Master_Receive>
	hamSicaklik_u16 = (sicaklikBuffer[0] << 8 | sicaklikBuffer[1]);
 8003c84:	7b3b      	ldrb	r3, [r7, #12]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	b21a      	sxth	r2, r3
 8003c8a:	7b7b      	ldrb	r3, [r7, #13]
 8003c8c:	b21b      	sxth	r3, r3
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	b21b      	sxth	r3, r3
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	Sicaklik_f=((float)((float)hamSicaklik_u16 / 340.0)) + 36.53;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ca0:	ee07 3a90 	vmov	s15, r3
 8003ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003ce8 <_ZN5MyImu16DBC_SICAKLIK_OKUEv+0x98>
 8003cac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003cb0:	ee16 0a90 	vmov	r0, s13
 8003cb4:	f7fc fc40 	bl	8000538 <__aeabi_f2d>
 8003cb8:	a309      	add	r3, pc, #36	; (adr r3, 8003ce0 <_ZN5MyImu16DBC_SICAKLIK_OKUEv+0x90>)
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	f7fc fadd 	bl	800027c <__adddf3>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f7fc ff85 	bl	8000bd8 <__aeabi_d2f>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	f3af 8000 	nop.w
 8003ce0:	0a3d70a4 	.word	0x0a3d70a4
 8003ce4:	404243d7 	.word	0x404243d7
 8003ce8:	43aa0000 	.word	0x43aa0000

08003cec <_ZN5MyImu12DBC_GYRO_OKUEv>:
void MyImu::DBC_GYRO_OKU()
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	6078      	str	r0, [r7, #4]
	uint8_t gyroBuffer[6];

	gyroBuffer[0] = 0x43;
 8003cf4:	2343      	movs	r3, #67	; 0x43
 8003cf6:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c, MPU6500_ADDRESS, gyroBuffer, 1, 10);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	f107 0208 	add.w	r2, r7, #8
 8003d00:	230a      	movs	r3, #10
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2301      	movs	r3, #1
 8003d06:	21d0      	movs	r1, #208	; 0xd0
 8003d08:	f002 f814 	bl	8005d34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU6500_ADDRESS, gyroBuffer, 6, 10);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	f107 0208 	add.w	r2, r7, #8
 8003d14:	230a      	movs	r3, #10
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2306      	movs	r3, #6
 8003d1a:	21d0      	movs	r1, #208	; 0xd0
 8003d1c:	f002 f908 	bl	8005f30 <HAL_I2C_Master_Receive>
	gyroEksen[0] = (gyroBuffer[0] << 8 | gyroBuffer[1]);
 8003d20:	7a3b      	ldrb	r3, [r7, #8]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	b21a      	sxth	r2, r3
 8003d26:	7a7b      	ldrb	r3, [r7, #9]
 8003d28:	b21b      	sxth	r3, r3
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	b21a      	sxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	80da      	strh	r2, [r3, #6]
	gyroEksen[1] = (gyroBuffer[2] << 8 | gyroBuffer[3]);
 8003d32:	7abb      	ldrb	r3, [r7, #10]
 8003d34:	021b      	lsls	r3, r3, #8
 8003d36:	b21a      	sxth	r2, r3
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	b21b      	sxth	r3, r3
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b21a      	sxth	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	811a      	strh	r2, [r3, #8]
	gyroEksen[2] = (gyroBuffer[4] << 8 | gyroBuffer[5]);
 8003d44:	7b3b      	ldrb	r3, [r7, #12]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	b21a      	sxth	r2, r3
 8003d4a:	7b7b      	ldrb	r3, [r7, #13]
 8003d4c:	b21b      	sxth	r3, r3
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	b21a      	sxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	815a      	strh	r2, [r3, #10]

}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <_ZN5MyImu13DBC_ACI_BULMAEv>:
void MyImu::DBC_ACI_BULMA()
{
 8003d60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
	DBC_DATA_OKU();//0.0014 0.000001066
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff feec 	bl	8003b48 <_ZN5MyImu12DBC_DATA_OKUEv>
	//Ham Veri Iyilestirmeleri
	gyroPitchAci_f += gyroEksen[0] * 0.000207;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fc fbdf 	bl	8000538 <__aeabi_f2d>
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	460d      	mov	r5, r1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fc fbc5 	bl	8000514 <__aeabi_i2d>
 8003d8a:	a3cf      	add	r3, pc, #828	; (adr r3, 80040c8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x368>)
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	f7fc fc2a 	bl	80005e8 <__aeabi_dmul>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4620      	mov	r0, r4
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	f7fc fa6e 	bl	800027c <__adddf3>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	f7fc ff16 	bl	8000bd8 <__aeabi_d2f>
 8003dac:	4602      	mov	r2, r0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
	gyroRollAci_f += gyroEksen[1] * 0.000207;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc fbbe 	bl	8000538 <__aeabi_f2d>
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	460d      	mov	r5, r1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fc fba4 	bl	8000514 <__aeabi_i2d>
 8003dcc:	a3be      	add	r3, pc, #760	; (adr r3, 80040c8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x368>)
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc fc09 	bl	80005e8 <__aeabi_dmul>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4620      	mov	r0, r4
 8003ddc:	4629      	mov	r1, r5
 8003dde:	f7fc fa4d 	bl	800027c <__adddf3>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4610      	mov	r0, r2
 8003de8:	4619      	mov	r1, r3
 8003dea:	f7fc fef5 	bl	8000bd8 <__aeabi_d2f>
 8003dee:	4602      	mov	r2, r0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	62da      	str	r2, [r3, #44]	; 0x2c
	gyroYawAci_f += gyroEksen[2] * 0.000207;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fc fb9d 	bl	8000538 <__aeabi_f2d>
 8003dfe:	4604      	mov	r4, r0
 8003e00:	460d      	mov	r5, r1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fc fb83 	bl	8000514 <__aeabi_i2d>
 8003e0e:	a3ae      	add	r3, pc, #696	; (adr r3, 80040c8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x368>)
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f7fc fbe8 	bl	80005e8 <__aeabi_dmul>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	4629      	mov	r1, r5
 8003e20:	f7fc fa2c 	bl	800027c <__adddf3>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	f7fc fed4 	bl	8000bd8 <__aeabi_d2f>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	635a      	str	r2, [r3, #52]	; 0x34

	gyroPitchAci_f += gyroRollAci_f * sin(gyroEksen[2]* 0.000001066);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc fb7c 	bl	8000538 <__aeabi_f2d>
 8003e40:	4604      	mov	r4, r0
 8003e42:	460d      	mov	r5, r1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fc fb75 	bl	8000538 <__aeabi_f2d>
 8003e4e:	4680      	mov	r8, r0
 8003e50:	4689      	mov	r9, r1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc fb5b 	bl	8000514 <__aeabi_i2d>
 8003e5e:	a39c      	add	r3, pc, #624	; (adr r3, 80040d0 <_ZN5MyImu13DBC_ACI_BULMAEv+0x370>)
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	f7fc fbc0 	bl	80005e8 <__aeabi_dmul>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	ec43 2b17 	vmov	d7, r2, r3
 8003e70:	eeb0 0a47 	vmov.f32	s0, s14
 8003e74:	eef0 0a67 	vmov.f32	s1, s15
 8003e78:	f006 f9b2 	bl	800a1e0 <sin>
 8003e7c:	ec53 2b10 	vmov	r2, r3, d0
 8003e80:	4640      	mov	r0, r8
 8003e82:	4649      	mov	r1, r9
 8003e84:	f7fc fbb0 	bl	80005e8 <__aeabi_dmul>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	4629      	mov	r1, r5
 8003e90:	f7fc f9f4 	bl	800027c <__adddf3>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	f7fc fe9c 	bl	8000bd8 <__aeabi_d2f>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
	gyroRollAci_f -= gyroPitchAci_f * sin(gyroEksen[2]* 0.000001066);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fc fb44 	bl	8000538 <__aeabi_f2d>
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	460d      	mov	r5, r1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fc fb3d 	bl	8000538 <__aeabi_f2d>
 8003ebe:	4680      	mov	r8, r0
 8003ec0:	4689      	mov	r9, r1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fc fb23 	bl	8000514 <__aeabi_i2d>
 8003ece:	a380      	add	r3, pc, #512	; (adr r3, 80040d0 <_ZN5MyImu13DBC_ACI_BULMAEv+0x370>)
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f7fc fb88 	bl	80005e8 <__aeabi_dmul>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	ec43 2b17 	vmov	d7, r2, r3
 8003ee0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ee4:	eef0 0a67 	vmov.f32	s1, s15
 8003ee8:	f006 f97a 	bl	800a1e0 <sin>
 8003eec:	ec53 2b10 	vmov	r2, r3, d0
 8003ef0:	4640      	mov	r0, r8
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	f7fc fb78 	bl	80005e8 <__aeabi_dmul>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4620      	mov	r0, r4
 8003efe:	4629      	mov	r1, r5
 8003f00:	f7fc f9ba 	bl	8000278 <__aeabi_dsub>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	f7fc fe64 	bl	8000bd8 <__aeabi_d2f>
 8003f10:	4602      	mov	r2, r0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	62da      	str	r2, [r3, #44]	; 0x2c

	accToplamVektor_s16 = sqrt((accEksen[0]*accEksen[0])+(accEksen[1]*accEksen[1])+(accEksen[2]*accEksen[2]));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f24:	fb03 f202 	mul.w	r2, r3, r2
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	441a      	add	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003f42:	4619      	mov	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	4413      	add	r3, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc fadf 	bl	8000514 <__aeabi_i2d>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	ec43 2b10 	vmov	d0, r2, r3
 8003f5e:	f006 f907 	bl	800a170 <sqrt>
 8003f62:	ec53 2b10 	vmov	r2, r3, d0
 8003f66:	4610      	mov	r0, r2
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f7fc fded 	bl	8000b48 <__aeabi_d2iz>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	b21a      	sxth	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	841a      	strh	r2, [r3, #32]

	//57.296 =1 /(3.142 /180)
	accPitchAci_f = asin((float)accEksen[1]/accToplamVektor_s16)*57.296;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f96:	ee16 0a90 	vmov	r0, s13
 8003f9a:	f7fc facd 	bl	8000538 <__aeabi_f2d>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	ec43 2b10 	vmov	d0, r2, r3
 8003fa6:	f006 f80f 	bl	8009fc8 <asin>
 8003faa:	ec51 0b10 	vmov	r0, r1, d0
 8003fae:	a34a      	add	r3, pc, #296	; (adr r3, 80040d8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x378>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc fb18 	bl	80005e8 <__aeabi_dmul>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f7fc fe0a 	bl	8000bd8 <__aeabi_d2f>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24
	accRollAci_f = asin((float)accEksen[0]/accToplamVektor_s16)*-57.296;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003fd0:	ee07 3a90 	vmov	s15, r3
 8003fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003fea:	ee16 0a90 	vmov	r0, s13
 8003fee:	f7fc faa3 	bl	8000538 <__aeabi_f2d>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	ec43 2b10 	vmov	d0, r2, r3
 8003ffa:	f005 ffe5 	bl	8009fc8 <asin>
 8003ffe:	ec51 0b10 	vmov	r0, r1, d0
 8004002:	a337      	add	r3, pc, #220	; (adr r3, 80040e0 <_ZN5MyImu13DBC_ACI_BULMAEv+0x380>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f7fc faee 	bl	80005e8 <__aeabi_dmul>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	f7fc fde0 	bl	8000bd8 <__aeabi_d2f>
 8004018:	4602      	mov	r2, r0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	629a      	str	r2, [r3, #40]	; 0x28

	pitchAcisi_f = gyroPitchAci_f * 0.9 + accPitchAci_f * 0.1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	4618      	mov	r0, r3
 8004024:	f7fc fa88 	bl	8000538 <__aeabi_f2d>
 8004028:	a32f      	add	r3, pc, #188	; (adr r3, 80040e8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x388>)
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f7fc fadb 	bl	80005e8 <__aeabi_dmul>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4614      	mov	r4, r2
 8004038:	461d      	mov	r5, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc fa7a 	bl	8000538 <__aeabi_f2d>
 8004044:	a32a      	add	r3, pc, #168	; (adr r3, 80040f0 <_ZN5MyImu13DBC_ACI_BULMAEv+0x390>)
 8004046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404a:	f7fc facd 	bl	80005e8 <__aeabi_dmul>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4620      	mov	r0, r4
 8004054:	4629      	mov	r1, r5
 8004056:	f7fc f911 	bl	800027c <__adddf3>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	f7fc fdb9 	bl	8000bd8 <__aeabi_d2f>
 8004066:	4602      	mov	r2, r0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c
	rollAci_f = gyroRollAci_f * 0.9 + accRollAci_f * 0.1;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4618      	mov	r0, r3
 8004072:	f7fc fa61 	bl	8000538 <__aeabi_f2d>
 8004076:	a31c      	add	r3, pc, #112	; (adr r3, 80040e8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x388>)
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	f7fc fab4 	bl	80005e8 <__aeabi_dmul>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4614      	mov	r4, r2
 8004086:	461d      	mov	r5, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	4618      	mov	r0, r3
 800408e:	f7fc fa53 	bl	8000538 <__aeabi_f2d>
 8004092:	a317      	add	r3, pc, #92	; (adr r3, 80040f0 <_ZN5MyImu13DBC_ACI_BULMAEv+0x390>)
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f7fc faa6 	bl	80005e8 <__aeabi_dmul>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4620      	mov	r0, r4
 80040a2:	4629      	mov	r1, r5
 80040a4:	f7fc f8ea 	bl	800027c <__adddf3>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	f7fc fd92 	bl	8000bd8 <__aeabi_d2f>
 80040b4:	4602      	mov	r2, r0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040c4:	f3af 8000 	nop.w
 80040c8:	75e6362a 	.word	0x75e6362a
 80040cc:	3f2b21c4 	.word	0x3f2b21c4
 80040d0:	652c6e62 	.word	0x652c6e62
 80040d4:	3eb1e26f 	.word	0x3eb1e26f
 80040d8:	53f7ced9 	.word	0x53f7ced9
 80040dc:	404ca5e3 	.word	0x404ca5e3
 80040e0:	53f7ced9 	.word	0x53f7ced9
 80040e4:	c04ca5e3 	.word	0xc04ca5e3
 80040e8:	cccccccd 	.word	0xcccccccd
 80040ec:	3feccccc 	.word	0x3feccccc
 80040f0:	9999999a 	.word	0x9999999a
 80040f4:	3fb99999 	.word	0x3fb99999

080040f8 <_ZN5MyImu7PitchAlEv>:

float* MyImu::PitchAl()
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    return &pitchAcisi_f;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	333c      	adds	r3, #60	; 0x3c
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <_ZN5MyImu6RollAlEv>:

float* MyImu::RollAl()
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
    return &rollAci_f;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3338      	adds	r3, #56	; 0x38
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <_ZN5MyImu5YawAlEv>:
float* MyImu::YawAl()
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
    return &gyroYawAci_f;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3334      	adds	r3, #52	; 0x34
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <_ZN5MyImu10SicaklikAlEv>:
float* MyImu::SicaklikAl()
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
    return &Sicaklik_f;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3344      	adds	r3, #68	; 0x44
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <_ZN5MyMagC1EP17I2C_HandleTypeDef>:
#include "Mag.h"

#define HMC5883L_ADDRESS 0x1E << 1 // I2C adresi

MyMag::MyMag(I2C_HandleTypeDef *hi2c)
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
{
  this->hi2c = hi2c;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	601a      	str	r2, [r3, #0]
  x_s16 = y_s16 = z_s16 = 0;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	811a      	strh	r2, [r3, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	80da      	strh	r2, [r3, #6]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	809a      	strh	r2, [r3, #4]
  heading_f = headingAcisi_f = 0.0f;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	619a      	str	r2, [r3, #24]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	615a      	str	r2, [r3, #20]
  xOffset_f = yOffset_f =0.0f;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	611a      	str	r2, [r3, #16]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	60da      	str	r2, [r3, #12]
}
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <_ZN5MyMag10YapilandirEv>:

void MyMag::Yapilandir()
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	6078      	str	r0, [r7, #4]
	//Configuration Register A
	uint8_t dataCRA[2] = {HMC5883_REGISTER_MAG_CRA_REG_M, 0x70}; // 8 ortalama, 15 Hz, normal ölçüm
 80041b8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80041bc:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDRESS, dataCRA, 2, 100);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	f107 0214 	add.w	r2, r7, #20
 80041c6:	2364      	movs	r3, #100	; 0x64
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	2302      	movs	r3, #2
 80041cc:	213c      	movs	r1, #60	; 0x3c
 80041ce:	f001 fdb1 	bl	8005d34 <HAL_I2C_Master_Transmit>

	// Configuration Register B
	uint8_t dataCRB[2] = {HMC5883_REGISTER_MAG_CRB_REG_M, HMC5883_MAGGAIN_1_3}; // Kazanç = +/- 1.3
 80041d2:	f242 0301 	movw	r3, #8193	; 0x2001
 80041d6:	823b      	strh	r3, [r7, #16]
	HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDRESS, dataCRB, 2, 100);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	f107 0210 	add.w	r2, r7, #16
 80041e0:	2364      	movs	r3, #100	; 0x64
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	2302      	movs	r3, #2
 80041e6:	213c      	movs	r1, #60	; 0x3c
 80041e8:	f001 fda4 	bl	8005d34 <HAL_I2C_Master_Transmit>

	// Mode Register
	uint8_t dataMR[2] = {HMC5883_REGISTER_MAG_MR_REG_M, 0x00}; // Sürekli ölçüm modu
 80041ec:	2302      	movs	r3, #2
 80041ee:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDRESS, dataMR, 2, 100);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	f107 020c 	add.w	r2, r7, #12
 80041f8:	2364      	movs	r3, #100	; 0x64
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	2302      	movs	r3, #2
 80041fe:	213c      	movs	r1, #60	; 0x3c
 8004200:	f001 fd98 	bl	8005d34 <HAL_I2C_Master_Transmit>
}
 8004204:	bf00      	nop
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <_ZN5MyMag10MagDataOkuEPsS0_S0_>:

void MyMag::MagDataOku(int16_t *x_s16, int16_t *y_s16, int16_t *z_s16)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af04      	add	r7, sp, #16
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
  uint8_t buffer[6];
  HAL_I2C_Mem_Read(hi2c, HMC5883L_ADDRESS, HMC5883_REGISTER_MAG_OUT_X_H_M, 1, buffer, 6, 100);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	2364      	movs	r3, #100	; 0x64
 8004220:	9302      	str	r3, [sp, #8]
 8004222:	2306      	movs	r3, #6
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	f107 0310 	add.w	r3, r7, #16
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	2301      	movs	r3, #1
 800422e:	2203      	movs	r2, #3
 8004230:	213c      	movs	r1, #60	; 0x3c
 8004232:	f002 f9a9 	bl	8006588 <HAL_I2C_Mem_Read>

  *x_s16 = (int16_t)((buffer[0] << 8) | buffer[1]);
 8004236:	7c3b      	ldrb	r3, [r7, #16]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	b21a      	sxth	r2, r3
 800423c:	7c7b      	ldrb	r3, [r7, #17]
 800423e:	b21b      	sxth	r3, r3
 8004240:	4313      	orrs	r3, r2
 8004242:	b21a      	sxth	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	801a      	strh	r2, [r3, #0]
  *z_s16 = (int16_t)((buffer[2] << 8) | buffer[3]);
 8004248:	7cbb      	ldrb	r3, [r7, #18]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	b21a      	sxth	r2, r3
 800424e:	7cfb      	ldrb	r3, [r7, #19]
 8004250:	b21b      	sxth	r3, r3
 8004252:	4313      	orrs	r3, r2
 8004254:	b21a      	sxth	r2, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	801a      	strh	r2, [r3, #0]
  *y_s16 = (int16_t)((buffer[4] << 8) | buffer[5]);
 800425a:	7d3b      	ldrb	r3, [r7, #20]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	b21a      	sxth	r2, r3
 8004260:	7d7b      	ldrb	r3, [r7, #21]
 8004262:	b21b      	sxth	r3, r3
 8004264:	4313      	orrs	r3, r2
 8004266:	b21a      	sxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	801a      	strh	r2, [r3, #0]
}
 800426c:	bf00      	nop
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	0000      	movs	r0, r0
	...

08004278 <_ZN5MyMag14HeadingOlusturEv>:

    xOffset_f = (xMax + xMin) / 2;
    yOffset_f = (yMax + yMin) / 2;
}
float* MyMag::HeadingOlustur()
{
 8004278:	b5b0      	push	{r4, r5, r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	float kalibreliX_f, kalibreliY_f;
	MagDataOku(&x_s16,&y_s16,&z_s16);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	1d19      	adds	r1, r3, #4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	1d9a      	adds	r2, r3, #6
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3308      	adds	r3, #8
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ffbd 	bl	800420c <_ZN5MyMag10MagDataOkuEPsS0_S0_>

	kalibreliX_f = x_s16 - xOffset_f;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004298:	ee07 3a90 	vmov	s15, r3
 800429c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80042a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042aa:	edc7 7a03 	vstr	s15, [r7, #12]
	kalibreliY_f = y_s16 - yOffset_f;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80042b4:	ee07 3a90 	vmov	s15, r3
 80042b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	edd3 7a04 	vldr	s15, [r3, #16]
 80042c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042c6:	edc7 7a02 	vstr	s15, [r7, #8]

	//heading_f = atan2(kalibreliX_f, kalibreliY_f);

	heading_f = atan2((y_s16), (x_s16));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fc f91f 	bl	8000514 <__aeabi_i2d>
 80042d6:	4604      	mov	r4, r0
 80042d8:	460d      	mov	r5, r1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fc f917 	bl	8000514 <__aeabi_i2d>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	ec43 2b11 	vmov	d1, r2, r3
 80042ee:	ec45 4b10 	vmov	d0, r4, r5
 80042f2:	f005 fe9d 	bl	800a030 <atan2>
 80042f6:	ec53 2b10 	vmov	r2, r3, d0
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	f7fc fc6b 	bl	8000bd8 <__aeabi_d2f>
 8004302:	4602      	mov	r2, r0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	615a      	str	r2, [r3, #20]
	if(heading_f < 0)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	edd3 7a05 	vldr	s15, [r3, #20]
 800430e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004316:	d512      	bpl.n	800433e <_ZN5MyMag14HeadingOlusturEv+0xc6>
		heading_f += 2*M_PI;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	4618      	mov	r0, r3
 800431e:	f7fc f90b 	bl	8000538 <__aeabi_f2d>
 8004322:	a323      	add	r3, pc, #140	; (adr r3, 80043b0 <_ZN5MyMag14HeadingOlusturEv+0x138>)
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f7fb ffa8 	bl	800027c <__adddf3>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4610      	mov	r0, r2
 8004332:	4619      	mov	r1, r3
 8004334:	f7fc fc50 	bl	8000bd8 <__aeabi_d2f>
 8004338:	4602      	mov	r2, r0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	615a      	str	r2, [r3, #20]

	if(heading_f > 2*M_PI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	4618      	mov	r0, r3
 8004344:	f7fc f8f8 	bl	8000538 <__aeabi_f2d>
 8004348:	a319      	add	r3, pc, #100	; (adr r3, 80043b0 <_ZN5MyMag14HeadingOlusturEv+0x138>)
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f7fc fbdb 	bl	8000b08 <__aeabi_dcmpgt>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <_ZN5MyMag14HeadingOlusturEv+0x106>
		heading_f -= 2*M_PI;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fc f8eb 	bl	8000538 <__aeabi_f2d>
 8004362:	a313      	add	r3, pc, #76	; (adr r3, 80043b0 <_ZN5MyMag14HeadingOlusturEv+0x138>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f7fb ff86 	bl	8000278 <__aeabi_dsub>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	f7fc fc30 	bl	8000bd8 <__aeabi_d2f>
 8004378:	4602      	mov	r2, r0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	615a      	str	r2, [r3, #20]


	headingAcisi_f = heading_f * (180/M_PI);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fc f8d8 	bl	8000538 <__aeabi_f2d>
 8004388:	a30b      	add	r3, pc, #44	; (adr r3, 80043b8 <_ZN5MyMag14HeadingOlusturEv+0x140>)
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f7fc f92b 	bl	80005e8 <__aeabi_dmul>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	f7fc fc1d 	bl	8000bd8 <__aeabi_d2f>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	619a      	str	r2, [r3, #24]

	return &headingAcisi_f;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3318      	adds	r3, #24

}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bdb0      	pop	{r4, r5, r7, pc}
 80043b0:	54442d18 	.word	0x54442d18
 80043b4:	401921fb 	.word	0x401921fb
 80043b8:	1a63c1f8 	.word	0x1a63c1f8
 80043bc:	404ca5dc 	.word	0x404ca5dc

080043c0 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_P12GPIO_TypeDeftS3_t>:
 *
 *  Created on: Jun 29, 2024
 *      Author: onurd
 */
#include "Motor.h"
Motor::Motor(TIM_HandleTypeDef* htim_pwm, TIM_HandleTypeDef* htim_enc, GPIO_TypeDef* in1_port, uint16_t in1_pin, GPIO_TypeDef* in2_port, uint16_t in2_pin)
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	615a      	str	r2, [r3, #20]
 80043d6:	68f9      	ldr	r1, [r7, #12]
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	841a      	strh	r2, [r3, #32]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	845a      	strh	r2, [r3, #34]	; 0x22
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
	 htim_pwm_ = htim_pwm;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	601a      	str	r2, [r3, #0]
	 htim_enc_ = htim_enc;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	605a      	str	r2, [r3, #4]
	 in1_port_ = in1_port;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	609a      	str	r2, [r3, #8]
	 in1_pin_ = in1_pin;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8b3a      	ldrh	r2, [r7, #24]
 800440e:	821a      	strh	r2, [r3, #16]
	 in2_port_ = in2_port;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	60da      	str	r2, [r3, #12]
	 in2_pin_ = in2_pin;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8c3a      	ldrh	r2, [r7, #32]
 800441a:	825a      	strh	r2, [r3, #18]
}
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <_ZN5Motor10YapilandirEv>:
void Motor::Yapilandir()
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim_pwm_, TIM_CHANNEL_1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f003 fd1b 	bl	8007e74 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(htim_enc_, TIM_CHANNEL_ALL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	213c      	movs	r1, #60	; 0x3c
 8004444:	4618      	mov	r0, r3
 8004446:	f003 fe83 	bl	8008150 <HAL_TIM_Encoder_Start>
    __HAL_TIM_SET_COUNTER(htim_enc_, 0);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2200      	movs	r2, #0
 8004452:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <_ZN5Motor3PWMEt>:
void Motor::PWM(uint16_t pwmDeger_u16)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(htim_pwm_, TIM_CHANNEL_1, pwmDeger_u16); // (0-1000)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	887a      	ldrh	r2, [r7, #2]
 8004470:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <_ZN5Motor6AciBulEv>:
void Motor::AciBul()
{
 8004480:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
	simdikiEncoderDegeri_s16 = __HAL_TIM_GET_COUNTER(htim_enc_);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	b21a      	sxth	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	845a      	strh	r2, [r3, #34]	; 0x22
	int16_t delta = simdikiEncoderDegeri_s16 - oncekiEncoderDegeri_s16;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800449e:	b29a      	uxth	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	81fb      	strh	r3, [r7, #14]

	IleriGit();
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f870 	bl	8004594 <_ZN5Motor8IleriGitEv>
	// Encoder taşması kontrolü
	if (delta < -32767)
 80044b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044b8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
	else if (delta > 32767)
	{
		delta -= 65536; // örnek onceki -32740 simdiki 32750 delta 65490 adım 46
	}

	toplamEncoderDegeri_s64 += delta;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80044c2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80044c6:	17c8      	asrs	r0, r1, #31
 80044c8:	460c      	mov	r4, r1
 80044ca:	4605      	mov	r5, r0
 80044cc:	eb12 0804 	adds.w	r8, r2, r4
 80044d0:	eb43 0905 	adc.w	r9, r3, r5
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	e9c3 8906 	strd	r8, r9, [r3, #24]
	oncekiEncoderDegeri_s16 = simdikiEncoderDegeri_s16;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	841a      	strh	r2, [r3, #32]

	motorAci_f = fmod(((float)toplamEncoderDegeri_s64 * 0.02347), 360.0);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	f7fc fc93 	bl	8000e18 <__aeabi_l2f>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fc f81f 	bl	8000538 <__aeabi_f2d>
 80044fa:	a324      	add	r3, pc, #144	; (adr r3, 800458c <_ZN5Motor6AciBulEv+0x10c>)
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f7fc f872 	bl	80005e8 <__aeabi_dmul>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	ec43 2b17 	vmov	d7, r2, r3
 800450c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8004580 <_ZN5Motor6AciBulEv+0x100>
 8004510:	eeb0 0a47 	vmov.f32	s0, s14
 8004514:	eef0 0a67 	vmov.f32	s1, s15
 8004518:	f005 fd8c 	bl	800a034 <fmod>
 800451c:	ec53 2b10 	vmov	r2, r3, d0
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	f7fc fb58 	bl	8000bd8 <__aeabi_d2f>
 8004528:	4602      	mov	r2, r0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	615a      	str	r2, [r3, #20]
	motorTur_u8 = ((float)toplamEncoderDegeri_s64 * 0.02347)/ 360.0;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	f7fc fc6e 	bl	8000e18 <__aeabi_l2f>
 800453c:	4603      	mov	r3, r0
 800453e:	4618      	mov	r0, r3
 8004540:	f7fb fffa 	bl	8000538 <__aeabi_f2d>
 8004544:	a311      	add	r3, pc, #68	; (adr r3, 800458c <_ZN5Motor6AciBulEv+0x10c>)
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f7fc f84d 	bl	80005e8 <__aeabi_dmul>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <_ZN5Motor6AciBulEv+0x108>)
 800455c:	f7fc f96e 	bl	800083c <__aeabi_ddiv>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	f7fc faee 	bl	8000b48 <__aeabi_d2iz>
 800456c:	4603      	mov	r3, r0
 800456e:	b25a      	sxtb	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004580:	00000000 	.word	0x00000000
 8004584:	40768000 	.word	0x40768000
 8004588:	40768000 	.word	0x40768000
 800458c:	09bf9c63 	.word	0x09bf9c63
 8004590:	3f980885 	.word	0x3f980885

08004594 <_ZN5Motor8IleriGitEv>:
void Motor::IleriGit()
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(in1_port_, in1_pin_, GPIO_PIN_SET); // IN1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6898      	ldr	r0, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8a1b      	ldrh	r3, [r3, #16]
 80045a4:	2201      	movs	r2, #1
 80045a6:	4619      	mov	r1, r3
 80045a8:	f001 fa42 	bl	8005a30 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(in2_port_, in2_pin_, GPIO_PIN_RESET); // IN2
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68d8      	ldr	r0, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8a5b      	ldrh	r3, [r3, #18]
 80045b4:	2200      	movs	r2, #0
 80045b6:	4619      	mov	r1, r3
 80045b8:	f001 fa3a 	bl	8005a30 <HAL_GPIO_WritePin>
}
 80045bc:	bf00      	nop
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <_ZN5Motor5AciAlEv>:
{
	HAL_GPIO_WritePin(in1_port_, in1_pin_, GPIO_PIN_RESET); // IN1
	HAL_GPIO_WritePin(in2_port_, in2_pin_, GPIO_PIN_RESET); // IN2
}
float* Motor::AciAl()
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
    return &motorAci_f;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3314      	adds	r3, #20
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <_ZN5Motor5TurAlEv>:

int8_t* Motor::TurAl()
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
    return &motorTur_u8;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3324      	adds	r3, #36	; 0x24
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <_ZN5PaketC1EP20__UART_HandleTypeDef>:
	GPS=0x01 ,
	VERSIYON=0x02

};

Paket::Paket(UART_HandleTypeDef* huart)
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	659a      	str	r2, [r3, #88]	; 0x58
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	65da      	str	r2, [r3, #92]	; 0x5c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
{
	this->huart=huart;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	605a      	str	r2, [r3, #4]

}
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <_ZN5PaketC1Ehhhh>:
Paket::Paket(uint8_t baslik1_u8, uint8_t baslik2_u8, uint8_t paketTipi_u8, uint8_t dataBoyutu_u8)
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	4608      	mov	r0, r1
 8004648:	4611      	mov	r1, r2
 800464a:	461a      	mov	r2, r3
 800464c:	4603      	mov	r3, r0
 800464e:	70fb      	strb	r3, [r7, #3]
 8004650:	460b      	mov	r3, r1
 8004652:	70bb      	strb	r3, [r7, #2]
 8004654:	4613      	mov	r3, r2
 8004656:	707b      	strb	r3, [r7, #1]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	659a      	str	r2, [r3, #88]	; 0x58
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	65da      	str	r2, [r3, #92]	; 0x5c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	67da      	str	r2, [r3, #124]	; 0x7c
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
{
	this->baslik1_u8=baslik1_u8;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	this->baslik2_u8=baslik2_u8;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	78ba      	ldrb	r2, [r7, #2]
 8004690:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	this->paketTipi_u8=paketTipi_u8;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	787a      	ldrb	r2, [r7, #1]
 8004698:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	this->dataBoyutu_u8=dataBoyutu_u8;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	7c3a      	ldrb	r2, [r7, #16]
 80046a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	this->latitude=0;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	661a      	str	r2, [r3, #96]	; 0x60
	this->longitude=0;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	665a      	str	r2, [r3, #100]	; 0x64
	this->pitch=0;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	669a      	str	r2, [r3, #104]	; 0x68
	this->roll=0;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	66da      	str	r2, [r3, #108]	; 0x6c
	this->heading=0;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	671a      	str	r2, [r3, #112]	; 0x70
	this->sicaklik=0;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	675a      	str	r2, [r3, #116]	; 0x74
    memset(gpspaket, 0, sizeof(gpspaket));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3308      	adds	r3, #8
 80046d8:	220e      	movs	r2, #14
 80046da:	2100      	movs	r1, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f009 f8a8 	bl	800d832 <memset>
    memset(imupaket, 0, sizeof(imupaket));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3316      	adds	r3, #22
 80046e6:	2215      	movs	r2, #21
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f009 f8a1 	bl	800d832 <memset>
}
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <_ZN5Paket14PaketKesmeInitEv>:
void Paket::PaketKesmeInit()
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, ArayuzData, sizeof(ArayuzData));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6858      	ldr	r0, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	332b      	adds	r3, #43	; 0x2b
 800470a:	220c      	movs	r2, #12
 800470c:	4619      	mov	r1, r3
 800470e:	f004 fce0 	bl	80090d2 <HAL_UART_Receive_IT>
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <_ZN5Paket12PaketOlusturEff>:
void Paket::PaketOlustur(float latitude,float longitude)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	ed87 0a02 	vstr	s0, [r7, #8]
 8004726:	edc7 0a01 	vstr	s1, [r7, #4]

    gpspaket[0] = 0x12;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2212      	movs	r2, #18
 800472e:	721a      	strb	r2, [r3, #8]
    gpspaket[1] = 0x34;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2234      	movs	r2, #52	; 0x34
 8004734:	725a      	strb	r2, [r3, #9]
    gpspaket[2] = 0x01;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	729a      	strb	r2, [r3, #10]
    gpspaket[3] = 0x09;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2209      	movs	r2, #9
 8004740:	72da      	strb	r2, [r3, #11]
    this->latitude = latitude;
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	661a      	str	r2, [r3, #96]	; 0x60
    this->longitude = longitude;
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	665a      	str	r2, [r3, #100]	; 0x64

    floatToBytes(&latitude, latBytes_u8);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f103 0247 	add.w	r2, r3, #71	; 0x47
 8004754:	f107 0308 	add.w	r3, r7, #8
 8004758:	4619      	mov	r1, r3
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 faf4 	bl	8004d48 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&longitude, lonBytes_u8);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f103 024b 	add.w	r2, r3, #75	; 0x4b
 8004766:	1d3b      	adds	r3, r7, #4
 8004768:	4619      	mov	r1, r3
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 faec 	bl	8004d48 <_ZN5Paket12floatToBytesEPfPh>

    memcpy(gpspaket + 4, latBytes_u8, 4);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3308      	adds	r3, #8
 8004774:	3304      	adds	r3, #4
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	3247      	adds	r2, #71	; 0x47
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	601a      	str	r2, [r3, #0]
    memcpy(gpspaket + 8, lonBytes_u8, 4);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3308      	adds	r3, #8
 8004782:	3308      	adds	r3, #8
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	324b      	adds	r2, #75	; 0x4b
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	601a      	str	r2, [r3, #0]
    gpspaket[13]=CRC8Hesaplama(gpspaket,4, 12);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f103 0108 	add.w	r1, r3, #8
 8004792:	230c      	movs	r3, #12
 8004794:	2204      	movs	r2, #4
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fa2e 	bl	8004bf8 <_ZN5Paket13CRC8HesaplamaEPhhh>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	755a      	strb	r2, [r3, #21]
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <_ZN5Paket12PaketOlusturEffff>:
void Paket::PaketOlustur(float pitch,float roll,float heading,float sicaklik)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6178      	str	r0, [r7, #20]
 80047b4:	ed87 0a04 	vstr	s0, [r7, #16]
 80047b8:	edc7 0a03 	vstr	s1, [r7, #12]
 80047bc:	ed87 1a02 	vstr	s2, [r7, #8]
 80047c0:	edc7 1a01 	vstr	s3, [r7, #4]
    imupaket[0] = 0x12;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2212      	movs	r2, #18
 80047c8:	759a      	strb	r2, [r3, #22]
    imupaket[1] = 0x34;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2234      	movs	r2, #52	; 0x34
 80047ce:	75da      	strb	r2, [r3, #23]
    imupaket[2] = 0x02;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2202      	movs	r2, #2
 80047d4:	761a      	strb	r2, [r3, #24]
    imupaket[3] = 0x11;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2211      	movs	r2, #17
 80047da:	765a      	strb	r2, [r3, #25]
    this->pitch = pitch;
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	669a      	str	r2, [r3, #104]	; 0x68
    this->roll = roll;
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	66da      	str	r2, [r3, #108]	; 0x6c
    this->heading = heading;
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	671a      	str	r2, [r3, #112]	; 0x70
    this-> sicaklik = sicaklik;
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	675a      	str	r2, [r3, #116]	; 0x74

    floatToBytes(&pitch, pitchBytes_u8);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f103 0237 	add.w	r2, r3, #55	; 0x37
 80047fa:	f107 0310 	add.w	r3, r7, #16
 80047fe:	4619      	mov	r1, r3
 8004800:	6978      	ldr	r0, [r7, #20]
 8004802:	f000 faa1 	bl	8004d48 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&roll, rollBytes_u8);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 800480c:	f107 030c 	add.w	r3, r7, #12
 8004810:	4619      	mov	r1, r3
 8004812:	6978      	ldr	r0, [r7, #20]
 8004814:	f000 fa98 	bl	8004d48 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&heading, headingBytes_u8);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 800481e:	f107 0308 	add.w	r3, r7, #8
 8004822:	4619      	mov	r1, r3
 8004824:	6978      	ldr	r0, [r7, #20]
 8004826:	f000 fa8f 	bl	8004d48 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&sicaklik, sicaklikBytes_u8);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f103 0243 	add.w	r2, r3, #67	; 0x43
 8004830:	1d3b      	adds	r3, r7, #4
 8004832:	4619      	mov	r1, r3
 8004834:	6978      	ldr	r0, [r7, #20]
 8004836:	f000 fa87 	bl	8004d48 <_ZN5Paket12floatToBytesEPfPh>

    memcpy(imupaket + 4, pitchBytes_u8, 4);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	3316      	adds	r3, #22
 800483e:	3304      	adds	r3, #4
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	3237      	adds	r2, #55	; 0x37
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	601a      	str	r2, [r3, #0]
    memcpy(imupaket + 8, rollBytes_u8, 4);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	3316      	adds	r3, #22
 800484c:	3308      	adds	r3, #8
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	323b      	adds	r2, #59	; 0x3b
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	601a      	str	r2, [r3, #0]
    memcpy(imupaket + 12, headingBytes_u8, 4);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	3316      	adds	r3, #22
 800485a:	330c      	adds	r3, #12
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	323f      	adds	r2, #63	; 0x3f
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	601a      	str	r2, [r3, #0]
    memcpy(imupaket + 16, sicaklikBytes_u8, 4);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	3316      	adds	r3, #22
 8004868:	3310      	adds	r3, #16
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	3243      	adds	r2, #67	; 0x43
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	601a      	str	r2, [r3, #0]

    imupaket[20] = CRC8Hesaplama(imupaket, 4,20);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f103 0116 	add.w	r1, r3, #22
 8004878:	2314      	movs	r3, #20
 800487a:	2204      	movs	r2, #4
 800487c:	6978      	ldr	r0, [r7, #20]
 800487e:	f000 f9bb 	bl	8004bf8 <_ZN5Paket13CRC8HesaplamaEPhhh>
 8004882:	4603      	mov	r3, r0
 8004884:	461a      	mov	r2, r3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 800488c:	bf00      	nop
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <_ZN5Paket20PaketOlusturveGonderEhhh>:
void Paket::PaketOlusturveGonder(uint8_t b,uint8_t o,uint8_t s)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	4608      	mov	r0, r1
 800489e:	4611      	mov	r1, r2
 80048a0:	461a      	mov	r2, r3
 80048a2:	4603      	mov	r3, r0
 80048a4:	70fb      	strb	r3, [r7, #3]
 80048a6:	460b      	mov	r3, r1
 80048a8:	70bb      	strb	r3, [r7, #2]
 80048aa:	4613      	mov	r3, r2
 80048ac:	707b      	strb	r3, [r7, #1]
	ArayuzData[2]=0x03;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2203      	movs	r2, #3
 80048b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	ArayuzData[4]=b;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	78fa      	ldrb	r2, [r7, #3]
 80048ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	ArayuzData[5]=o;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	78ba      	ldrb	r2, [r7, #2]
 80048c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	ArayuzData[6]=s;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	787a      	ldrb	r2, [r7, #1]
 80048ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	HAL_UART_Transmit(huart, ArayuzData, sizeof(ArayuzData), 1000);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6858      	ldr	r0, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f103 012b 	add.w	r1, r3, #43	; 0x2b
 80048d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048dc:	220c      	movs	r2, #12
 80048de:	f004 fb6d 	bl	8008fbc <HAL_UART_Transmit>

}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <_ZN5Paket13gpsPaketCagirEPh>:
void Paket::gpsPaketCagir(uint8_t *kopyaDizi)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
	memcpy(kopyaDizi, gpspaket, sizeof(gpspaket));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3308      	adds	r3, #8
 80048f8:	220e      	movs	r2, #14
 80048fa:	4619      	mov	r1, r3
 80048fc:	6838      	ldr	r0, [r7, #0]
 80048fe:	f009 f826 	bl	800d94e <memcpy>
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <_ZN5Paket13imuPaketCagirEPh>:
void Paket::imuPaketCagir(uint8_t *kopyaDizi)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
	memcpy(kopyaDizi, imupaket, sizeof(imupaket));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3316      	adds	r3, #22
 8004918:	2215      	movs	r2, #21
 800491a:	4619      	mov	r1, r3
 800491c:	6838      	ldr	r0, [r7, #0]
 800491e:	f009 f816 	bl	800d94e <memcpy>
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <_ZN5Paket12BayrakKaldirEv>:

void Paket::BayrakKaldir()
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
	PaketCozBayrak=true;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	701a      	strb	r2, [r3, #0]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <_ZN5Paket8PaketCozEv>:
void Paket::PaketCoz()
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    Durumlar Durum = Baslik1Coz;
 800494c:	2300      	movs	r3, #0
 800494e:	73fb      	strb	r3, [r7, #15]
    Paketler Paket = VERSIYON;
 8004950:	2302      	movs	r3, #2
 8004952:	73bb      	strb	r3, [r7, #14]
    bool islem=true;
 8004954:	2301      	movs	r3, #1
 8004956:	737b      	strb	r3, [r7, #13]
    while (islem)
 8004958:	bf00      	nop
 800495a:	e13a      	b.n	8004bd2 <_ZN5Paket8PaketCozEv+0x28e>
    {
        switch (Durum)
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	2b04      	cmp	r3, #4
 8004960:	f200 8137 	bhi.w	8004bd2 <_ZN5Paket8PaketCozEv+0x28e>
 8004964:	a201      	add	r2, pc, #4	; (adr r2, 800496c <_ZN5Paket8PaketCozEv+0x28>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	08004981 	.word	0x08004981
 8004970:	080049c3 	.word	0x080049c3
 8004974:	08004a27 	.word	0x08004a27
 8004978:	08004a89 	.word	0x08004a89
 800497c:	08004af1 	.word	0x08004af1
        {
            case Baslik1Coz:
                if (ArayuzData[startIndex_u32] == 0x12 && ArayuzData[startIndex_u32] != 0)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	4413      	add	r3, r2
 8004988:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800498c:	2b12      	cmp	r3, #18
 800498e:	d109      	bne.n	80049a4 <_ZN5Paket8PaketCozEv+0x60>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	4413      	add	r3, r2
 8004998:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <_ZN5Paket8PaketCozEv+0x60>
                {
                    Durum = Baslik2Coz;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
                }
                startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	1c59      	adds	r1, r3, #1
 80049aa:	4b92      	ldr	r3, [pc, #584]	; (8004bf4 <_ZN5Paket8PaketCozEv+0x2b0>)
 80049ac:	fba3 2301 	umull	r2, r3, r3, r1
 80049b0:	08da      	lsrs	r2, r3, #3
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	1aca      	subs	r2, r1, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	659a      	str	r2, [r3, #88]	; 0x58
                break;
 80049c0:	e107      	b.n	8004bd2 <_ZN5Paket8PaketCozEv+0x28e>

            case Baslik2Coz:
                if (ArayuzData[startIndex_u32] == 0x34 && ArayuzData[startIndex_u32] != 0)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4413      	add	r3, r2
 80049ca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80049ce:	2b34      	cmp	r3, #52	; 0x34
 80049d0:	d118      	bne.n	8004a04 <_ZN5Paket8PaketCozEv+0xc0>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	4413      	add	r3, r2
 80049da:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d010      	beq.n	8004a04 <_ZN5Paket8PaketCozEv+0xc0>
                {
                    Durum = PaketTuruSec;
 80049e2:	2302      	movs	r3, #2
 80049e4:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	1c59      	adds	r1, r3, #1
 80049ec:	4b81      	ldr	r3, [pc, #516]	; (8004bf4 <_ZN5Paket8PaketCozEv+0x2b0>)
 80049ee:	fba3 2301 	umull	r2, r3, r3, r1
 80049f2:	08da      	lsrs	r2, r3, #3
 80049f4:	4613      	mov	r3, r2
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	1aca      	subs	r2, r1, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	659a      	str	r2, [r3, #88]	; 0x58
 8004a02:	e00f      	b.n	8004a24 <_ZN5Paket8PaketCozEv+0xe0>
                }
                else
                {
                    Durum = Baslik1Coz;
 8004a04:	2300      	movs	r3, #0
 8004a06:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0c:	1c59      	adds	r1, r3, #1
 8004a0e:	4b79      	ldr	r3, [pc, #484]	; (8004bf4 <_ZN5Paket8PaketCozEv+0x2b0>)
 8004a10:	fba3 2301 	umull	r2, r3, r3, r1
 8004a14:	08da      	lsrs	r2, r3, #3
 8004a16:	4613      	mov	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	1aca      	subs	r2, r1, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	659a      	str	r2, [r3, #88]	; 0x58
                }
                break;
 8004a24:	e0d5      	b.n	8004bd2 <_ZN5Paket8PaketCozEv+0x28e>

            case PaketTuruSec:
                if (ArayuzData[startIndex_u32] != 0)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d017      	beq.n	8004a66 <_ZN5Paket8PaketCozEv+0x122>
                {
                    Paket = (Paketler)ArayuzData[startIndex_u32];
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004a42:	73bb      	strb	r3, [r7, #14]
                    Durum = DataBoyutuAl;
 8004a44:	2303      	movs	r3, #3
 8004a46:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4c:	1c59      	adds	r1, r3, #1
 8004a4e:	4b69      	ldr	r3, [pc, #420]	; (8004bf4 <_ZN5Paket8PaketCozEv+0x2b0>)
 8004a50:	fba3 2301 	umull	r2, r3, r3, r1
 8004a54:	08da      	lsrs	r2, r3, #3
 8004a56:	4613      	mov	r3, r2
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	1aca      	subs	r2, r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	659a      	str	r2, [r3, #88]	; 0x58
 8004a64:	e0b5      	b.n	8004bd2 <_ZN5Paket8PaketCozEv+0x28e>
                }
                else
                {
                    Durum = Baslik1Coz;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	1c59      	adds	r1, r3, #1
 8004a70:	4b60      	ldr	r3, [pc, #384]	; (8004bf4 <_ZN5Paket8PaketCozEv+0x2b0>)
 8004a72:	fba3 2301 	umull	r2, r3, r3, r1
 8004a76:	08da      	lsrs	r2, r3, #3
 8004a78:	4613      	mov	r3, r2
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	1aca      	subs	r2, r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	659a      	str	r2, [r3, #88]	; 0x58
                }
                break;
 8004a86:	e0a4      	b.n	8004bd2 <_ZN5Paket8PaketCozEv+0x28e>

            case DataBoyutuAl:
                if (ArayuzData[startIndex_u32] != 0)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01a      	beq.n	8004ace <_ZN5Paket8PaketCozEv+0x18a>
                {
                    dataLength_s16 = ArayuzData[startIndex_u32];
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004aa4:	b21a      	sxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
                    Durum = DataOku;
 8004aac:	2304      	movs	r3, #4
 8004aae:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	1c59      	adds	r1, r3, #1
 8004ab6:	4b4f      	ldr	r3, [pc, #316]	; (8004bf4 <_ZN5Paket8PaketCozEv+0x2b0>)
 8004ab8:	fba3 2301 	umull	r2, r3, r3, r1
 8004abc:	08da      	lsrs	r2, r3, #3
 8004abe:	4613      	mov	r3, r2
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	1aca      	subs	r2, r1, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	659a      	str	r2, [r3, #88]	; 0x58
 8004acc:	e081      	b.n	8004bd2 <_ZN5Paket8PaketCozEv+0x28e>
                }
                else
                {
                    Durum = Baslik1Coz;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzData);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	1c59      	adds	r1, r3, #1
 8004ad8:	4b46      	ldr	r3, [pc, #280]	; (8004bf4 <_ZN5Paket8PaketCozEv+0x2b0>)
 8004ada:	fba3 2301 	umull	r2, r3, r3, r1
 8004ade:	08da      	lsrs	r2, r3, #3
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	1aca      	subs	r2, r1, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	659a      	str	r2, [r3, #88]	; 0x58
                }
                break;
 8004aee:	e070      	b.n	8004bd2 <_ZN5Paket8PaketCozEv+0x28e>

            case DataOku:
                if (Paket == GPS && dataLength_s16 == 8)
 8004af0:	7bbb      	ldrb	r3, [r7, #14]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d146      	bne.n	8004b84 <_ZN5Paket8PaketCozEv+0x240>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d141      	bne.n	8004b84 <_ZN5Paket8PaketCozEv+0x240>
                {
                    ArayuzEnlem_f = bytesToFloat(ArayuzData, startIndex_u32);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f103 012b 	add.w	r1, r3, #43	; 0x2b
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f8b1 	bl	8004c74 <_ZN5Paket12bytesToFloatEPKhl>
 8004b12:	eef0 7a40 	vmov.f32	s15, s0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
                    ArayuzBoylam_f = bytesToFloat(ArayuzData, (startIndex_u32 + 4) % sizeof(ArayuzData));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f103 002b 	add.w	r0, r3, #43	; 0x2b
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b26:	1d19      	adds	r1, r3, #4
 8004b28:	4b32      	ldr	r3, [pc, #200]	; (8004bf4 <_ZN5Paket8PaketCozEv+0x2b0>)
 8004b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b2e:	08da      	lsrs	r2, r3, #3
 8004b30:	4613      	mov	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	1aca      	subs	r2, r1, r3
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4601      	mov	r1, r0
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f897 	bl	8004c74 <_ZN5Paket12bytesToFloatEPKhl>
 8004b46:	eef0 7a40 	vmov.f32	s15, s0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80


                    if (ArayuzEnlem_f != 0 && ArayuzBoylam_f != 0)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8004b56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    {

                    }

                    startIndex_u32 = (startIndex_u32 + dataLength_s16) % sizeof(ArayuzData);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 8004b68:	1899      	adds	r1, r3, r2
 8004b6a:	4b22      	ldr	r3, [pc, #136]	; (8004bf4 <_ZN5Paket8PaketCozEv+0x2b0>)
 8004b6c:	fba3 2301 	umull	r2, r3, r3, r1
 8004b70:	08da      	lsrs	r2, r3, #3
 8004b72:	4613      	mov	r3, r2
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	1aca      	subs	r2, r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	659a      	str	r2, [r3, #88]	; 0x58
                    Durum = Baslik1Coz;
 8004b80:	2300      	movs	r3, #0
 8004b82:	73fb      	strb	r3, [r7, #15]
                }
                if (Paket == VERSIYON && dataLength_s16 == 8)
 8004b84:	7bbb      	ldrb	r3, [r7, #14]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d11e      	bne.n	8004bc8 <_ZN5Paket8PaketCozEv+0x284>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d119      	bne.n	8004bc8 <_ZN5Paket8PaketCozEv+0x284>
                {

                	PaketOlusturveGonder(0,0,4);
 8004b94:	2304      	movs	r3, #4
 8004b96:	2200      	movs	r2, #0
 8004b98:	2100      	movs	r1, #0
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fe7a 	bl	8004894 <_ZN5Paket20PaketOlusturveGonderEhhh>
                	startIndex_u32 = (startIndex_u32 + dataLength_s16) % sizeof(ArayuzData);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 8004baa:	1899      	adds	r1, r3, r2
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <_ZN5Paket8PaketCozEv+0x2b0>)
 8004bae:	fba3 2301 	umull	r2, r3, r3, r1
 8004bb2:	08da      	lsrs	r2, r3, #3
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	1aca      	subs	r2, r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	659a      	str	r2, [r3, #88]	; 0x58
                	Durum = Baslik1Coz;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	e003      	b.n	8004bd0 <_ZN5Paket8PaketCozEv+0x28c>
                }
                else
                {
                	Durum = Baslik1Coz;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	73fb      	strb	r3, [r7, #15]
                	islem=false;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	737b      	strb	r3, [r7, #13]
                }
                break;
 8004bd0:	bf00      	nop
    while (islem)
 8004bd2:	7b7b      	ldrb	r3, [r7, #13]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f47f aec1 	bne.w	800495c <_ZN5Paket8PaketCozEv+0x18>
        }
    }

    HAL_UART_Receive_IT(huart, ArayuzData, sizeof(ArayuzData));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6858      	ldr	r0, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	332b      	adds	r3, #43	; 0x2b
 8004be2:	220c      	movs	r2, #12
 8004be4:	4619      	mov	r1, r3
 8004be6:	f004 fa74 	bl	80090d2 <HAL_UART_Receive_IT>
}
 8004bea:	bf00      	nop
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	aaaaaaab 	.word	0xaaaaaaab

08004bf8 <_ZN5Paket13CRC8HesaplamaEPhhh>:

uint8_t Paket::CRC8Hesaplama(uint8_t *data, uint8_t start ,uint8_t end)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	4611      	mov	r1, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	460b      	mov	r3, r1
 8004c08:	71fb      	strb	r3, [r7, #7]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	71bb      	strb	r3, [r7, #6]
    uint8_t crc = 0x00;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = start; i < end; i++)
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	75bb      	strb	r3, [r7, #22]
 8004c16:	e021      	b.n	8004c5c <_ZN5Paket13CRC8HesaplamaEPhhh+0x64>
    {
        crc ^= data[i]; // CRC değerini, dizinin bir sonraki byte ile XOR
 8004c18:	7dbb      	ldrb	r3, [r7, #22]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	781a      	ldrb	r2, [r3, #0]
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	4053      	eors	r3, r2
 8004c24:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) //Her bir byte için döngü
 8004c26:	2300      	movs	r3, #0
 8004c28:	757b      	strb	r3, [r7, #21]
 8004c2a:	e011      	b.n	8004c50 <_ZN5Paket13CRC8HesaplamaEPhhh+0x58>
        {
            if (crc & 0x80)//CRC değerinin en soldaki biti 1 mi
 8004c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	da07      	bge.n	8004c44 <_ZN5Paket13CRC8HesaplamaEPhhh+0x4c>
            {
                crc = (crc << 1) ^ 0X07; //En yüksek bit birse CRC değerini bir bit sola kaydır ve XOR işlemi yap
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	b25b      	sxtb	r3, r3
 8004c3a:	f083 0307 	eor.w	r3, r3, #7
 8004c3e:	b25b      	sxtb	r3, r3
 8004c40:	75fb      	strb	r3, [r7, #23]
 8004c42:	e002      	b.n	8004c4a <_ZN5Paket13CRC8HesaplamaEPhhh+0x52>
            }
            else
            {
                crc <<= 1; //En yüksek bit sıfırsa CRC değerini bir bit sola kaydır
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) //Her bir byte için döngü
 8004c4a:	7d7b      	ldrb	r3, [r7, #21]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	757b      	strb	r3, [r7, #21]
 8004c50:	7d7b      	ldrb	r3, [r7, #21]
 8004c52:	2b07      	cmp	r3, #7
 8004c54:	d9ea      	bls.n	8004c2c <_ZN5Paket13CRC8HesaplamaEPhhh+0x34>
    for (uint8_t i = start; i < end; i++)
 8004c56:	7dbb      	ldrb	r3, [r7, #22]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	75bb      	strb	r3, [r7, #22]
 8004c5c:	7dba      	ldrb	r2, [r7, #22]
 8004c5e:	79bb      	ldrb	r3, [r7, #6]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d3d9      	bcc.n	8004c18 <_ZN5Paket13CRC8HesaplamaEPhhh+0x20>
            }
        }
    }

    return crc;
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <_ZN5Paket12bytesToFloatEPKhl>:

float Paket::bytesToFloat(const uint8_t* buffer, int32_t startIndex) {
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
   intBits_u32 =(buffer[(startIndex + 3) % 120] << 24) |
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	1cda      	adds	r2, r3, #3
 8004c84:	4b2f      	ldr	r3, [pc, #188]	; (8004d44 <_ZN5Paket12bytesToFloatEPKhl+0xd0>)
 8004c86:	fb83 1302 	smull	r1, r3, r3, r2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	1199      	asrs	r1, r3, #6
 8004c8e:	17d3      	asrs	r3, r2, #31
 8004c90:	1ac9      	subs	r1, r1, r3
 8004c92:	460b      	mov	r3, r1
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	1a5b      	subs	r3, r3, r1
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	1ad1      	subs	r1, r2, r3
 8004c9c:	460a      	mov	r2, r1
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	0618      	lsls	r0, r3, #24
    		(buffer[(startIndex + 2) % 120] << 16) |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1c9a      	adds	r2, r3, #2
 8004caa:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <_ZN5Paket12bytesToFloatEPKhl+0xd0>)
 8004cac:	fb83 1302 	smull	r1, r3, r3, r2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	1199      	asrs	r1, r3, #6
 8004cb4:	17d3      	asrs	r3, r2, #31
 8004cb6:	1ac9      	subs	r1, r1, r3
 8004cb8:	460b      	mov	r3, r1
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a5b      	subs	r3, r3, r1
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	1ad1      	subs	r1, r2, r3
 8004cc2:	460a      	mov	r2, r1
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	041b      	lsls	r3, r3, #16
   intBits_u32 =(buffer[(startIndex + 3) % 120] << 24) |
 8004ccc:	4318      	orrs	r0, r3
			(buffer[(startIndex + 1) % 120] << 8)  |
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <_ZN5Paket12bytesToFloatEPKhl+0xd0>)
 8004cd4:	fb83 1302 	smull	r1, r3, r3, r2
 8004cd8:	4413      	add	r3, r2
 8004cda:	1199      	asrs	r1, r3, #6
 8004cdc:	17d3      	asrs	r3, r2, #31
 8004cde:	1ac9      	subs	r1, r1, r3
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	1a5b      	subs	r3, r3, r1
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	1ad1      	subs	r1, r2, r3
 8004cea:	460a      	mov	r2, r1
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4413      	add	r3, r2
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	021b      	lsls	r3, r3, #8
    		(buffer[(startIndex + 2) % 120] << 16) |
 8004cf4:	4318      	orrs	r0, r3
			(buffer[(startIndex + 0) % 120] << 0)  ;
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <_ZN5Paket12bytesToFloatEPKhl+0xd0>)
 8004cfa:	fb83 1302 	smull	r1, r3, r3, r2
 8004cfe:	4413      	add	r3, r2
 8004d00:	1199      	asrs	r1, r3, #6
 8004d02:	17d3      	asrs	r3, r2, #31
 8004d04:	1ac9      	subs	r1, r1, r3
 8004d06:	460b      	mov	r3, r1
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	1a5b      	subs	r3, r3, r1
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	1ad1      	subs	r1, r2, r3
 8004d10:	460a      	mov	r2, r1
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4413      	add	r3, r2
 8004d16:	781b      	ldrb	r3, [r3, #0]
			(buffer[(startIndex + 1) % 120] << 8)  |
 8004d18:	4303      	orrs	r3, r0
 8004d1a:	461a      	mov	r2, r3
   intBits_u32 =(buffer[(startIndex + 3) % 120] << 24) |
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	65da      	str	r2, [r3, #92]	; 0x5c

    memcpy(&sonuc, &intBits_u32, sizeof(sonuc));
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3378      	adds	r3, #120	; 0x78
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	325c      	adds	r2, #92	; 0x5c
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	601a      	str	r2, [r3, #0]
    return sonuc;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d30:	ee07 3a90 	vmov	s15, r3
}
 8004d34:	eeb0 0a67 	vmov.f32	s0, s15
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	88888889 	.word	0x88888889

08004d48 <_ZN5Paket12floatToBytesEPfPh>:

uint32_t Paket::floatToBytes(float *Deger_f, uint8_t* bytes)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
    uint8_t* p = (uint8_t*)Deger_f;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 4; i++)
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e00a      	b.n	8004d74 <_ZN5Paket12floatToBytesEPfPh+0x2c>
    {
        bytes[i] = p[i];
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	441a      	add	r2, r3
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	440b      	add	r3, r1
 8004d6a:	7812      	ldrb	r2, [r2, #0]
 8004d6c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	3301      	adds	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	ddf1      	ble.n	8004d5e <_ZN5Paket12floatToBytesEPfPh+0x16>
    }
    return (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | (bytes[0] & 0xFF);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3303      	adds	r3, #3
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	061a      	lsls	r2, r3, #24
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3302      	adds	r3, #2
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	4313      	orrs	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	7812      	ldrb	r2, [r2, #0]
 8004d9a:	4313      	orrs	r3, r2
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <_ZN5GorevC1Ev>:
#include "stm32f4xx_hal.h"
#include "stdint.h"

#define maxGorev 10

struct Gorev {
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	719a      	strb	r2, [r3, #6]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <_ZN13GorevyoneticiC1EP11TIM_TypeDef>:
#include "gorevyonetici.h"


Gorevyonetici::Gorevyonetici(TIM_TypeDef* pTimerAlan)
 8004dc4:	b5b0      	push	{r4, r5, r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	705a      	strb	r2, [r3, #1]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	709a      	strb	r2, [r3, #2]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	70da      	strb	r2, [r3, #3]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	711a      	strb	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3310      	adds	r3, #16
 8004df0:	2409      	movs	r4, #9
 8004df2:	461d      	mov	r5, r3
 8004df4:	e004      	b.n	8004e00 <_ZN13GorevyoneticiC1EP11TIM_TypeDef+0x3c>
 8004df6:	4628      	mov	r0, r5
 8004df8:	f7ff ffd6 	bl	8004da8 <_ZN5GorevC1Ev>
 8004dfc:	3508      	adds	r5, #8
 8004dfe:	3c01      	subs	r4, #1
 8004e00:	2c00      	cmp	r4, #0
 8004e02:	daf8      	bge.n	8004df6 <_ZN13GorevyoneticiC1EP11TIM_TypeDef+0x32>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
{
    this->pTimerAlan = pTimerAlan;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	609a      	str	r2, [r3, #8]
}
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bdb0      	pop	{r4, r5, r7, pc}

08004e2c <_ZN13Gorevyonetici7GorevAlEPFvvEs>:

void Gorevyonetici::GorevAl(void (*gorev)(), int16_t ms_s16)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	4613      	mov	r3, r2
 8004e38:	80fb      	strh	r3, [r7, #6]
	if (gorevSayac < maxGorev)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004e40:	2b09      	cmp	r3, #9
 8004e42:	d819      	bhi.n	8004e78 <_ZN13Gorevyonetici7GorevAlEPFvvEs+0x4c>
	{
	    gorevler[gorevSayac].gorev = gorev;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3202      	adds	r2, #2
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	    gorevler[gorevSayac].ms_s16 = ms_s16;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	3302      	adds	r3, #2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	4413      	add	r3, r2
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	809a      	strh	r2, [r3, #4]
	    gorevSayac++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004e6e:	3301      	adds	r3, #1
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <_ZN13Gorevyonetici12BayrakKaldirEv>:
void Gorevyonetici::BayrakKaldir()
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
    pTimerAlan->SR &= ~(TIM_SR_UIF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	611a      	str	r2, [r3, #16]
    Counter_u16++;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    for (int i = 0; i < gorevSayac; i++)
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e01b      	b.n	8004eea <_ZN13Gorevyonetici12BayrakKaldirEv+0x66>
    {
		if (0 == Counter_u16 % gorevler[i].ms_s16)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3302      	adds	r3, #2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	440b      	add	r3, r1
 8004ec4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004ec8:	fb92 f1f3 	sdiv	r1, r2, r3
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d106      	bne.n	8004ee4 <_ZN13Gorevyonetici12BayrakKaldirEv+0x60>
		{
		   gorevler[i].Bayrak = true;
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3302      	adds	r3, #2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4413      	add	r3, r2
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	719a      	strb	r2, [r3, #6]
    for (int i = 0; i < gorevSayac; i++)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	dbdc      	blt.n	8004eb2 <_ZN13Gorevyonetici12BayrakKaldirEv+0x2e>
		}
     }
    if (Counter_u16 % 1000 == 0)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004efe:	4a0b      	ldr	r2, [pc, #44]	; (8004f2c <_ZN13Gorevyonetici12BayrakKaldirEv+0xa8>)
 8004f00:	fba2 1203 	umull	r1, r2, r2, r3
 8004f04:	0992      	lsrs	r2, r2, #6
 8004f06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f0a:	fb01 f202 	mul.w	r2, r1, r2
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d103      	bne.n	8004f1e <_ZN13Gorevyonetici12BayrakKaldirEv+0x9a>
  	{
  	    Counter_u16=0;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  	}
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	10624dd3 	.word	0x10624dd3

08004f30 <_ZN13Gorevyonetici13GorevCalistirEv>:

void Gorevyonetici::GorevCalistir()
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < gorevSayac; i++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	e01e      	b.n	8004f7c <_ZN13Gorevyonetici13GorevCalistirEv+0x4c>
	{
		if (gorevler[i].Bayrak && gorevler[i].gorev)
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3302      	adds	r3, #2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	4413      	add	r3, r2
 8004f48:	799b      	ldrb	r3, [r3, #6]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d013      	beq.n	8004f76 <_ZN13Gorevyonetici13GorevCalistirEv+0x46>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	3202      	adds	r2, #2
 8004f54:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00c      	beq.n	8004f76 <_ZN13Gorevyonetici13GorevCalistirEv+0x46>
	    {
	        gorevler[i].Bayrak = false;
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3302      	adds	r3, #2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4413      	add	r3, r2
 8004f66:	2200      	movs	r2, #0
 8004f68:	719a      	strb	r2, [r3, #6]
	        gorevler[i].gorev();
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	3202      	adds	r2, #2
 8004f70:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004f74:	4798      	blx	r3
	for (int i = 0; i < gorevSayac; i++)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004f82:	461a      	mov	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4293      	cmp	r3, r2
 8004f88:	dbd9      	blt.n	8004f3e <_ZN13Gorevyonetici13GorevCalistirEv+0xe>
	    }
	}

}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	db0b      	blt.n	8004fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	f003 021f 	and.w	r2, r3, #31
 8004fac:	4907      	ldr	r1, [pc, #28]	; (8004fcc <__NVIC_EnableIRQ+0x38>)
 8004fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	e000e100 	.word	0xe000e100

08004fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	6039      	str	r1, [r7, #0]
 8004fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	db0a      	blt.n	8004ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	490c      	ldr	r1, [pc, #48]	; (800501c <__NVIC_SetPriority+0x4c>)
 8004fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fee:	0112      	lsls	r2, r2, #4
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ff8:	e00a      	b.n	8005010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	4908      	ldr	r1, [pc, #32]	; (8005020 <__NVIC_SetPriority+0x50>)
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	3b04      	subs	r3, #4
 8005008:	0112      	lsls	r2, r2, #4
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	440b      	add	r3, r1
 800500e:	761a      	strb	r2, [r3, #24]
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	e000e100 	.word	0xe000e100
 8005020:	e000ed00 	.word	0xe000ed00

08005024 <_ZN5TimerC1EP11TIM_TypeDef>:
#include "mytimer.h"

Timer::Timer(TIM_TypeDef* pTimerAlan)
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
{
    this->pTimerAlan = pTimerAlan;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	601a      	str	r2, [r3, #0]
    TimerClockAktifEt();
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f837 	bl	80050a8 <_ZN5Timer17TimerClockAktifEtEv>
}
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <_ZN5Timer10YapilandirEmm>:

void Timer::Yapilandir(uint32_t prescaler_u32, uint32_t period_u32)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
	pTimerAlan->PSC = prescaler_u32 - 1;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	3a01      	subs	r2, #1
 8005058:	629a      	str	r2, [r3, #40]	; 0x28
	pTimerAlan->ARR = period_u32 - 1;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	3a01      	subs	r2, #1
 8005062:	62da      	str	r2, [r3, #44]	; 0x2c
	pTimerAlan->DIER |= TIM_DIER_UIE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	60da      	str	r2, [r3, #12]
    TimerInterruptAktifEt();
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f8a5 	bl	80051c4 <_ZN5Timer21TimerInterruptAktifEtEv>
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <_ZN5Timer7AktifEtEv>:

void Timer::AktifEt()
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
	pTimerAlan->CR1 |= TIM_CR1_CEN;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0201 	orr.w	r2, r2, #1
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <_ZN5Timer17TimerClockAktifEtEv>:
{
    return pTimerAlan->CNT;
}

void Timer::TimerClockAktifEt()
{
 80050a8:	b480      	push	{r7}
 80050aa:	b089      	sub	sp, #36	; 0x24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
    if (this->pTimerAlan == TIM2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b8:	d10e      	bne.n	80050d8 <_ZN5Timer17TimerClockAktifEtEv+0x30>
    {
        __HAL_RCC_TIM2_CLK_ENABLE();
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	4b3b      	ldr	r3, [pc, #236]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	4a3a      	ldr	r2, [pc, #232]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ca:	4b38      	ldr	r3, [pc, #224]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	61fb      	str	r3, [r7, #28]
 80050d4:	69fb      	ldr	r3, [r7, #28]
    }
    else if (this->pTimerAlan == TIM7)
    {
        __HAL_RCC_TIM7_CLK_ENABLE();
    }
}
 80050d6:	e062      	b.n	800519e <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM3)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a34      	ldr	r2, [pc, #208]	; (80051b0 <_ZN5Timer17TimerClockAktifEtEv+0x108>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10e      	bne.n	8005100 <_ZN5Timer17TimerClockAktifEtEv+0x58>
        __HAL_RCC_TIM3_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	4b31      	ldr	r3, [pc, #196]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	4a30      	ldr	r2, [pc, #192]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80050ec:	f043 0302 	orr.w	r3, r3, #2
 80050f0:	6413      	str	r3, [r2, #64]	; 0x40
 80050f2:	4b2e      	ldr	r3, [pc, #184]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	69bb      	ldr	r3, [r7, #24]
}
 80050fe:	e04e      	b.n	800519e <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM4)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2b      	ldr	r2, [pc, #172]	; (80051b4 <_ZN5Timer17TimerClockAktifEtEv+0x10c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10e      	bne.n	8005128 <_ZN5Timer17TimerClockAktifEtEv+0x80>
        __HAL_RCC_TIM4_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	4b27      	ldr	r3, [pc, #156]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	4a26      	ldr	r2, [pc, #152]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005114:	f043 0304 	orr.w	r3, r3, #4
 8005118:	6413      	str	r3, [r2, #64]	; 0x40
 800511a:	4b24      	ldr	r3, [pc, #144]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	697b      	ldr	r3, [r7, #20]
}
 8005126:	e03a      	b.n	800519e <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM5)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <_ZN5Timer17TimerClockAktifEtEv+0x110>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d10e      	bne.n	8005150 <_ZN5Timer17TimerClockAktifEtEv+0xa8>
        __HAL_RCC_TIM5_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	4b1d      	ldr	r3, [pc, #116]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 800513c:	f043 0308 	orr.w	r3, r3, #8
 8005140:	6413      	str	r3, [r2, #64]	; 0x40
 8005142:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	693b      	ldr	r3, [r7, #16]
}
 800514e:	e026      	b.n	800519e <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM6)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a19      	ldr	r2, [pc, #100]	; (80051bc <_ZN5Timer17TimerClockAktifEtEv+0x114>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d10e      	bne.n	8005178 <_ZN5Timer17TimerClockAktifEtEv+0xd0>
        __HAL_RCC_TIM6_CLK_ENABLE();
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	4a12      	ldr	r2, [pc, #72]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005164:	f043 0310 	orr.w	r3, r3, #16
 8005168:	6413      	str	r3, [r2, #64]	; 0x40
 800516a:	4b10      	ldr	r3, [pc, #64]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
}
 8005176:	e012      	b.n	800519e <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM7)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <_ZN5Timer17TimerClockAktifEtEv+0x118>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d10d      	bne.n	800519e <_ZN5Timer17TimerClockAktifEtEv+0xf6>
        __HAL_RCC_TIM7_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	4b09      	ldr	r3, [pc, #36]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	4a08      	ldr	r2, [pc, #32]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 800518c:	f043 0320 	orr.w	r3, r3, #32
 8005190:	6413      	str	r3, [r2, #64]	; 0x40
 8005192:	4b06      	ldr	r3, [pc, #24]	; (80051ac <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	60bb      	str	r3, [r7, #8]
 800519c:	68bb      	ldr	r3, [r7, #8]
}
 800519e:	bf00      	nop
 80051a0:	3724      	adds	r7, #36	; 0x24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40023800 	.word	0x40023800
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40001000 	.word	0x40001000
 80051c0:	40001400 	.word	0x40001400

080051c4 <_ZN5Timer21TimerInterruptAktifEtEv>:

void Timer::TimerInterruptAktifEt()
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
    if (this->pTimerAlan == TIM2)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d4:	d107      	bne.n	80051e6 <_ZN5Timer21TimerInterruptAktifEtEv+0x22>
    {
        NVIC_EnableIRQ(TIM2_IRQn);
 80051d6:	201c      	movs	r0, #28
 80051d8:	f7ff fedc 	bl	8004f94 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM2_IRQn, 2);
 80051dc:	2102      	movs	r1, #2
 80051de:	201c      	movs	r0, #28
 80051e0:	f7ff fef6 	bl	8004fd0 <__NVIC_SetPriority>
    else if (this->pTimerAlan == TIM7)
    {
        NVIC_EnableIRQ(TIM7_IRQn);
        NVIC_SetPriority(TIM7_IRQn, 2);
    }
}
 80051e4:	e03f      	b.n	8005266 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM3)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a21      	ldr	r2, [pc, #132]	; (8005270 <_ZN5Timer21TimerInterruptAktifEtEv+0xac>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d107      	bne.n	8005200 <_ZN5Timer21TimerInterruptAktifEtEv+0x3c>
        NVIC_EnableIRQ(TIM3_IRQn);
 80051f0:	201d      	movs	r0, #29
 80051f2:	f7ff fecf 	bl	8004f94 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM3_IRQn, 2);
 80051f6:	2102      	movs	r1, #2
 80051f8:	201d      	movs	r0, #29
 80051fa:	f7ff fee9 	bl	8004fd0 <__NVIC_SetPriority>
}
 80051fe:	e032      	b.n	8005266 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM4)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <_ZN5Timer21TimerInterruptAktifEtEv+0xb0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d107      	bne.n	800521a <_ZN5Timer21TimerInterruptAktifEtEv+0x56>
        NVIC_EnableIRQ(TIM4_IRQn);
 800520a:	201e      	movs	r0, #30
 800520c:	f7ff fec2 	bl	8004f94 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM4_IRQn, 2);
 8005210:	2102      	movs	r1, #2
 8005212:	201e      	movs	r0, #30
 8005214:	f7ff fedc 	bl	8004fd0 <__NVIC_SetPriority>
}
 8005218:	e025      	b.n	8005266 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM5)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a16      	ldr	r2, [pc, #88]	; (8005278 <_ZN5Timer21TimerInterruptAktifEtEv+0xb4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d107      	bne.n	8005234 <_ZN5Timer21TimerInterruptAktifEtEv+0x70>
        NVIC_EnableIRQ(TIM5_IRQn);
 8005224:	2032      	movs	r0, #50	; 0x32
 8005226:	f7ff feb5 	bl	8004f94 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM5_IRQn, 2);
 800522a:	2102      	movs	r1, #2
 800522c:	2032      	movs	r0, #50	; 0x32
 800522e:	f7ff fecf 	bl	8004fd0 <__NVIC_SetPriority>
}
 8005232:	e018      	b.n	8005266 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM6)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a10      	ldr	r2, [pc, #64]	; (800527c <_ZN5Timer21TimerInterruptAktifEtEv+0xb8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d107      	bne.n	800524e <_ZN5Timer21TimerInterruptAktifEtEv+0x8a>
        NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800523e:	2036      	movs	r0, #54	; 0x36
 8005240:	f7ff fea8 	bl	8004f94 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM6_DAC_IRQn, 2);
 8005244:	2102      	movs	r1, #2
 8005246:	2036      	movs	r0, #54	; 0x36
 8005248:	f7ff fec2 	bl	8004fd0 <__NVIC_SetPriority>
}
 800524c:	e00b      	b.n	8005266 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM7)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a0b      	ldr	r2, [pc, #44]	; (8005280 <_ZN5Timer21TimerInterruptAktifEtEv+0xbc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d106      	bne.n	8005266 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
        NVIC_EnableIRQ(TIM7_IRQn);
 8005258:	2037      	movs	r0, #55	; 0x37
 800525a:	f7ff fe9b 	bl	8004f94 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM7_IRQn, 2);
 800525e:	2102      	movs	r1, #2
 8005260:	2037      	movs	r0, #55	; 0x37
 8005262:	f7ff feb5 	bl	8004fd0 <__NVIC_SetPriority>
}
 8005266:	bf00      	nop
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800
 8005278:	40000c00 	.word	0x40000c00
 800527c:	40001000 	.word	0x40001000
 8005280:	40001400 	.word	0x40001400

08005284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <HAL_Init+0x40>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0d      	ldr	r2, [pc, #52]	; (80052c4 <HAL_Init+0x40>)
 800528e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005294:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <HAL_Init+0x40>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <HAL_Init+0x40>)
 800529a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800529e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052a0:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <HAL_Init+0x40>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a07      	ldr	r2, [pc, #28]	; (80052c4 <HAL_Init+0x40>)
 80052a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052ac:	2003      	movs	r0, #3
 80052ae:	f000 f94f 	bl	8005550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052b2:	2000      	movs	r0, #0
 80052b4:	f000 f808 	bl	80052c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052b8:	f7fd fa4e 	bl	8002758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40023c00 	.word	0x40023c00

080052c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052d0:	4b12      	ldr	r3, [pc, #72]	; (800531c <HAL_InitTick+0x54>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_InitTick+0x58>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	4619      	mov	r1, r3
 80052da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052de:	fbb3 f3f1 	udiv	r3, r3, r1
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f967 	bl	80055ba <HAL_SYSTICK_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e00e      	b.n	8005314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b0f      	cmp	r3, #15
 80052fa:	d80a      	bhi.n	8005312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052fc:	2200      	movs	r2, #0
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	f04f 30ff 	mov.w	r0, #4294967295
 8005304:	f000 f92f 	bl	8005566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005308:	4a06      	ldr	r2, [pc, #24]	; (8005324 <HAL_InitTick+0x5c>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	e000      	b.n	8005314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000000 	.word	0x20000000
 8005320:	20000008 	.word	0x20000008
 8005324:	20000004 	.word	0x20000004

08005328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800532c:	4b06      	ldr	r3, [pc, #24]	; (8005348 <HAL_IncTick+0x20>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	4b06      	ldr	r3, [pc, #24]	; (800534c <HAL_IncTick+0x24>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4413      	add	r3, r2
 8005338:	4a04      	ldr	r2, [pc, #16]	; (800534c <HAL_IncTick+0x24>)
 800533a:	6013      	str	r3, [r2, #0]
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	20000008 	.word	0x20000008
 800534c:	200008a8 	.word	0x200008a8

08005350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return uwTick;
 8005354:	4b03      	ldr	r3, [pc, #12]	; (8005364 <HAL_GetTick+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	200008a8 	.word	0x200008a8

08005368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005370:	f7ff ffee 	bl	8005350 <HAL_GetTick>
 8005374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d005      	beq.n	800538e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <HAL_Delay+0x44>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800538e:	bf00      	nop
 8005390:	f7ff ffde 	bl	8005350 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	429a      	cmp	r2, r3
 800539e:	d8f7      	bhi.n	8005390 <HAL_Delay+0x28>
  {
  }
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000008 	.word	0x20000008

080053b0 <__NVIC_SetPriorityGrouping>:
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053cc:	4013      	ands	r3, r2
 80053ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053e2:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	60d3      	str	r3, [r2, #12]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	e000ed00 	.word	0xe000ed00

080053f8 <__NVIC_GetPriorityGrouping>:
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053fc:	4b04      	ldr	r3, [pc, #16]	; (8005410 <__NVIC_GetPriorityGrouping+0x18>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	0a1b      	lsrs	r3, r3, #8
 8005402:	f003 0307 	and.w	r3, r3, #7
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	e000ed00 	.word	0xe000ed00

08005414 <__NVIC_EnableIRQ>:
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005422:	2b00      	cmp	r3, #0
 8005424:	db0b      	blt.n	800543e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	f003 021f 	and.w	r2, r3, #31
 800542c:	4907      	ldr	r1, [pc, #28]	; (800544c <__NVIC_EnableIRQ+0x38>)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	2001      	movs	r0, #1
 8005436:	fa00 f202 	lsl.w	r2, r0, r2
 800543a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	e000e100 	.word	0xe000e100

08005450 <__NVIC_SetPriority>:
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	6039      	str	r1, [r7, #0]
 800545a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800545c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005460:	2b00      	cmp	r3, #0
 8005462:	db0a      	blt.n	800547a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	490c      	ldr	r1, [pc, #48]	; (800549c <__NVIC_SetPriority+0x4c>)
 800546a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546e:	0112      	lsls	r2, r2, #4
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	440b      	add	r3, r1
 8005474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005478:	e00a      	b.n	8005490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	4908      	ldr	r1, [pc, #32]	; (80054a0 <__NVIC_SetPriority+0x50>)
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	3b04      	subs	r3, #4
 8005488:	0112      	lsls	r2, r2, #4
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	440b      	add	r3, r1
 800548e:	761a      	strb	r2, [r3, #24]
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	e000e100 	.word	0xe000e100
 80054a0:	e000ed00 	.word	0xe000ed00

080054a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b089      	sub	sp, #36	; 0x24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f1c3 0307 	rsb	r3, r3, #7
 80054be:	2b04      	cmp	r3, #4
 80054c0:	bf28      	it	cs
 80054c2:	2304      	movcs	r3, #4
 80054c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	3304      	adds	r3, #4
 80054ca:	2b06      	cmp	r3, #6
 80054cc:	d902      	bls.n	80054d4 <NVIC_EncodePriority+0x30>
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	3b03      	subs	r3, #3
 80054d2:	e000      	b.n	80054d6 <NVIC_EncodePriority+0x32>
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d8:	f04f 32ff 	mov.w	r2, #4294967295
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43da      	mvns	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	401a      	ands	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054ec:	f04f 31ff 	mov.w	r1, #4294967295
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	fa01 f303 	lsl.w	r3, r1, r3
 80054f6:	43d9      	mvns	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054fc:	4313      	orrs	r3, r2
         );
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3724      	adds	r7, #36	; 0x24
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3b01      	subs	r3, #1
 8005518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800551c:	d301      	bcc.n	8005522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800551e:	2301      	movs	r3, #1
 8005520:	e00f      	b.n	8005542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <SysTick_Config+0x40>)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3b01      	subs	r3, #1
 8005528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800552a:	210f      	movs	r1, #15
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	f7ff ff8e 	bl	8005450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <SysTick_Config+0x40>)
 8005536:	2200      	movs	r2, #0
 8005538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800553a:	4b04      	ldr	r3, [pc, #16]	; (800554c <SysTick_Config+0x40>)
 800553c:	2207      	movs	r2, #7
 800553e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	e000e010 	.word	0xe000e010

08005550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff ff29 	bl	80053b0 <__NVIC_SetPriorityGrouping>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af00      	add	r7, sp, #0
 800556c:	4603      	mov	r3, r0
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
 8005572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005578:	f7ff ff3e 	bl	80053f8 <__NVIC_GetPriorityGrouping>
 800557c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	6978      	ldr	r0, [r7, #20]
 8005584:	f7ff ff8e 	bl	80054a4 <NVIC_EncodePriority>
 8005588:	4602      	mov	r2, r0
 800558a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558e:	4611      	mov	r1, r2
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff ff5d 	bl	8005450 <__NVIC_SetPriority>
}
 8005596:	bf00      	nop
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	4603      	mov	r3, r0
 80055a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff ff31 	bl	8005414 <__NVIC_EnableIRQ>
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ffa2 	bl	800550c <SysTick_Config>
 80055c8:	4603      	mov	r3, r0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80055e0:	f7ff feb6 	bl	8005350 <HAL_GetTick>
 80055e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d008      	beq.n	8005604 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2280      	movs	r2, #128	; 0x80
 80055f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e052      	b.n	80056aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0216 	bic.w	r2, r2, #22
 8005612:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005622:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <HAL_DMA_Abort+0x62>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0208 	bic.w	r2, r2, #8
 8005642:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005654:	e013      	b.n	800567e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005656:	f7ff fe7b 	bl	8005350 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b05      	cmp	r3, #5
 8005662:	d90c      	bls.n	800567e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2203      	movs	r2, #3
 800566e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e015      	b.n	80056aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e4      	bne.n	8005656 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005690:	223f      	movs	r2, #63	; 0x3f
 8005692:	409a      	lsls	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d004      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2280      	movs	r2, #128	; 0x80
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e00c      	b.n	80056ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2205      	movs	r2, #5
 80056d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0201 	bic.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b089      	sub	sp, #36	; 0x24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800570a:	2300      	movs	r3, #0
 800570c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	e16b      	b.n	80059ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005714:	2201      	movs	r2, #1
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4013      	ands	r3, r2
 8005726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	429a      	cmp	r2, r3
 800572e:	f040 815a 	bne.w	80059e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b01      	cmp	r3, #1
 800573c:	d005      	beq.n	800574a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005746:	2b02      	cmp	r3, #2
 8005748:	d130      	bne.n	80057ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	2203      	movs	r2, #3
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4313      	orrs	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005780:	2201      	movs	r2, #1
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	091b      	lsrs	r3, r3, #4
 8005796:	f003 0201 	and.w	r2, r3, #1
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d017      	beq.n	80057e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	2203      	movs	r2, #3
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	43db      	mvns	r3, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4013      	ands	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4313      	orrs	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d123      	bne.n	800583c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	08da      	lsrs	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3208      	adds	r2, #8
 80057fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	220f      	movs	r2, #15
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	43db      	mvns	r3, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4013      	ands	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	4313      	orrs	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	08da      	lsrs	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3208      	adds	r2, #8
 8005836:	69b9      	ldr	r1, [r7, #24]
 8005838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	2203      	movs	r2, #3
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	43db      	mvns	r3, r3
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4013      	ands	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 0203 	and.w	r2, r3, #3
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4313      	orrs	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 80b4 	beq.w	80059e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	4b60      	ldr	r3, [pc, #384]	; (8005a04 <HAL_GPIO_Init+0x30c>)
 8005884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005886:	4a5f      	ldr	r2, [pc, #380]	; (8005a04 <HAL_GPIO_Init+0x30c>)
 8005888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800588c:	6453      	str	r3, [r2, #68]	; 0x44
 800588e:	4b5d      	ldr	r3, [pc, #372]	; (8005a04 <HAL_GPIO_Init+0x30c>)
 8005890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800589a:	4a5b      	ldr	r2, [pc, #364]	; (8005a08 <HAL_GPIO_Init+0x310>)
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	089b      	lsrs	r3, r3, #2
 80058a0:	3302      	adds	r3, #2
 80058a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	220f      	movs	r2, #15
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	43db      	mvns	r3, r3
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4013      	ands	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a52      	ldr	r2, [pc, #328]	; (8005a0c <HAL_GPIO_Init+0x314>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02b      	beq.n	800591e <HAL_GPIO_Init+0x226>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a51      	ldr	r2, [pc, #324]	; (8005a10 <HAL_GPIO_Init+0x318>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d025      	beq.n	800591a <HAL_GPIO_Init+0x222>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a50      	ldr	r2, [pc, #320]	; (8005a14 <HAL_GPIO_Init+0x31c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01f      	beq.n	8005916 <HAL_GPIO_Init+0x21e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a4f      	ldr	r2, [pc, #316]	; (8005a18 <HAL_GPIO_Init+0x320>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d019      	beq.n	8005912 <HAL_GPIO_Init+0x21a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a4e      	ldr	r2, [pc, #312]	; (8005a1c <HAL_GPIO_Init+0x324>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <HAL_GPIO_Init+0x216>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a4d      	ldr	r2, [pc, #308]	; (8005a20 <HAL_GPIO_Init+0x328>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00d      	beq.n	800590a <HAL_GPIO_Init+0x212>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a4c      	ldr	r2, [pc, #304]	; (8005a24 <HAL_GPIO_Init+0x32c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <HAL_GPIO_Init+0x20e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a4b      	ldr	r2, [pc, #300]	; (8005a28 <HAL_GPIO_Init+0x330>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d101      	bne.n	8005902 <HAL_GPIO_Init+0x20a>
 80058fe:	2307      	movs	r3, #7
 8005900:	e00e      	b.n	8005920 <HAL_GPIO_Init+0x228>
 8005902:	2308      	movs	r3, #8
 8005904:	e00c      	b.n	8005920 <HAL_GPIO_Init+0x228>
 8005906:	2306      	movs	r3, #6
 8005908:	e00a      	b.n	8005920 <HAL_GPIO_Init+0x228>
 800590a:	2305      	movs	r3, #5
 800590c:	e008      	b.n	8005920 <HAL_GPIO_Init+0x228>
 800590e:	2304      	movs	r3, #4
 8005910:	e006      	b.n	8005920 <HAL_GPIO_Init+0x228>
 8005912:	2303      	movs	r3, #3
 8005914:	e004      	b.n	8005920 <HAL_GPIO_Init+0x228>
 8005916:	2302      	movs	r3, #2
 8005918:	e002      	b.n	8005920 <HAL_GPIO_Init+0x228>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <HAL_GPIO_Init+0x228>
 800591e:	2300      	movs	r3, #0
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	f002 0203 	and.w	r2, r2, #3
 8005926:	0092      	lsls	r2, r2, #2
 8005928:	4093      	lsls	r3, r2
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005930:	4935      	ldr	r1, [pc, #212]	; (8005a08 <HAL_GPIO_Init+0x310>)
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	089b      	lsrs	r3, r3, #2
 8005936:	3302      	adds	r3, #2
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800593e:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <HAL_GPIO_Init+0x334>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	43db      	mvns	r3, r3
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	4013      	ands	r3, r2
 800594c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005962:	4a32      	ldr	r2, [pc, #200]	; (8005a2c <HAL_GPIO_Init+0x334>)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005968:	4b30      	ldr	r3, [pc, #192]	; (8005a2c <HAL_GPIO_Init+0x334>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800598c:	4a27      	ldr	r2, [pc, #156]	; (8005a2c <HAL_GPIO_Init+0x334>)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005992:	4b26      	ldr	r3, [pc, #152]	; (8005a2c <HAL_GPIO_Init+0x334>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059b6:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <HAL_GPIO_Init+0x334>)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059bc:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <HAL_GPIO_Init+0x334>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059e0:	4a12      	ldr	r2, [pc, #72]	; (8005a2c <HAL_GPIO_Init+0x334>)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3301      	adds	r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	2b0f      	cmp	r3, #15
 80059f0:	f67f ae90 	bls.w	8005714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	3724      	adds	r7, #36	; 0x24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800
 8005a08:	40013800 	.word	0x40013800
 8005a0c:	40020000 	.word	0x40020000
 8005a10:	40020400 	.word	0x40020400
 8005a14:	40020800 	.word	0x40020800
 8005a18:	40020c00 	.word	0x40020c00
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	40021400 	.word	0x40021400
 8005a24:	40021800 	.word	0x40021800
 8005a28:	40021c00 	.word	0x40021c00
 8005a2c:	40013c00 	.word	0x40013c00

08005a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	807b      	strh	r3, [r7, #2]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a40:	787b      	ldrb	r3, [r7, #1]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a46:	887a      	ldrh	r2, [r7, #2]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a4c:	e003      	b.n	8005a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a4e:	887b      	ldrh	r3, [r7, #2]
 8005a50:	041a      	lsls	r2, r3, #16
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	619a      	str	r2, [r3, #24]
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
	...

08005a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a6e:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a70:	695a      	ldr	r2, [r3, #20]
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	4013      	ands	r3, r2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d006      	beq.n	8005a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a7a:	4a05      	ldr	r2, [pc, #20]	; (8005a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a80:	88fb      	ldrh	r3, [r7, #6]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f806 	bl	8005a94 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40013c00 	.word	0x40013c00

08005a94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e12b      	b.n	8005d16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fb fd80 	bl	80015d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2224      	movs	r2, #36	; 0x24
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005afe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b10:	f002 f8e0 	bl	8007cd4 <HAL_RCC_GetPCLK1Freq>
 8005b14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4a81      	ldr	r2, [pc, #516]	; (8005d20 <HAL_I2C_Init+0x274>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d807      	bhi.n	8005b30 <HAL_I2C_Init+0x84>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a80      	ldr	r2, [pc, #512]	; (8005d24 <HAL_I2C_Init+0x278>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	bf94      	ite	ls
 8005b28:	2301      	movls	r3, #1
 8005b2a:	2300      	movhi	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e006      	b.n	8005b3e <HAL_I2C_Init+0x92>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4a7d      	ldr	r2, [pc, #500]	; (8005d28 <HAL_I2C_Init+0x27c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	bf94      	ite	ls
 8005b38:	2301      	movls	r3, #1
 8005b3a:	2300      	movhi	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e0e7      	b.n	8005d16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a78      	ldr	r2, [pc, #480]	; (8005d2c <HAL_I2C_Init+0x280>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	0c9b      	lsrs	r3, r3, #18
 8005b50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	4a6a      	ldr	r2, [pc, #424]	; (8005d20 <HAL_I2C_Init+0x274>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d802      	bhi.n	8005b80 <HAL_I2C_Init+0xd4>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	e009      	b.n	8005b94 <HAL_I2C_Init+0xe8>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b86:	fb02 f303 	mul.w	r3, r2, r3
 8005b8a:	4a69      	ldr	r2, [pc, #420]	; (8005d30 <HAL_I2C_Init+0x284>)
 8005b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b90:	099b      	lsrs	r3, r3, #6
 8005b92:	3301      	adds	r3, #1
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ba6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	495c      	ldr	r1, [pc, #368]	; (8005d20 <HAL_I2C_Init+0x274>)
 8005bb0:	428b      	cmp	r3, r1
 8005bb2:	d819      	bhi.n	8005be8 <HAL_I2C_Init+0x13c>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1e59      	subs	r1, r3, #1
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bc2:	1c59      	adds	r1, r3, #1
 8005bc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bc8:	400b      	ands	r3, r1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <HAL_I2C_Init+0x138>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1e59      	subs	r1, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bdc:	3301      	adds	r3, #1
 8005bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be2:	e051      	b.n	8005c88 <HAL_I2C_Init+0x1dc>
 8005be4:	2304      	movs	r3, #4
 8005be6:	e04f      	b.n	8005c88 <HAL_I2C_Init+0x1dc>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d111      	bne.n	8005c14 <HAL_I2C_Init+0x168>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1e58      	subs	r0, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6859      	ldr	r1, [r3, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	440b      	add	r3, r1
 8005bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c02:	3301      	adds	r3, #1
 8005c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2301      	moveq	r3, #1
 8005c0e:	2300      	movne	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	e012      	b.n	8005c3a <HAL_I2C_Init+0x18e>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1e58      	subs	r0, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6859      	ldr	r1, [r3, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	0099      	lsls	r1, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_I2C_Init+0x196>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e022      	b.n	8005c88 <HAL_I2C_Init+0x1dc>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10e      	bne.n	8005c68 <HAL_I2C_Init+0x1bc>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1e58      	subs	r0, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6859      	ldr	r1, [r3, #4]
 8005c52:	460b      	mov	r3, r1
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	440b      	add	r3, r1
 8005c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c66:	e00f      	b.n	8005c88 <HAL_I2C_Init+0x1dc>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	1e58      	subs	r0, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6859      	ldr	r1, [r3, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	0099      	lsls	r1, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c7e:	3301      	adds	r3, #1
 8005c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	6809      	ldr	r1, [r1, #0]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69da      	ldr	r2, [r3, #28]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005cb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6911      	ldr	r1, [r2, #16]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	68d2      	ldr	r2, [r2, #12]
 8005cc2:	4311      	orrs	r1, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	000186a0 	.word	0x000186a0
 8005d24:	001e847f 	.word	0x001e847f
 8005d28:	003d08ff 	.word	0x003d08ff
 8005d2c:	431bde83 	.word	0x431bde83
 8005d30:	10624dd3 	.word	0x10624dd3

08005d34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	460b      	mov	r3, r1
 8005d42:	817b      	strh	r3, [r7, #10]
 8005d44:	4613      	mov	r3, r2
 8005d46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d48:	f7ff fb02 	bl	8005350 <HAL_GetTick>
 8005d4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	f040 80e0 	bne.w	8005f1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	2319      	movs	r3, #25
 8005d62:	2201      	movs	r2, #1
 8005d64:	4970      	ldr	r1, [pc, #448]	; (8005f28 <HAL_I2C_Master_Transmit+0x1f4>)
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f001 f90e 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d72:	2302      	movs	r3, #2
 8005d74:	e0d3      	b.n	8005f1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_I2C_Master_Transmit+0x50>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e0cc      	b.n	8005f1e <HAL_I2C_Master_Transmit+0x1ea>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d007      	beq.n	8005daa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0201 	orr.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005db8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2221      	movs	r2, #33	; 0x21
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	893a      	ldrh	r2, [r7, #8]
 8005dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4a50      	ldr	r2, [pc, #320]	; (8005f2c <HAL_I2C_Master_Transmit+0x1f8>)
 8005dea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005dec:	8979      	ldrh	r1, [r7, #10]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	6a3a      	ldr	r2, [r7, #32]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fdfa 	bl	80069ec <I2C_MasterRequestWrite>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e08d      	b.n	8005f1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e02:	2300      	movs	r3, #0
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e18:	e066      	b.n	8005ee8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	6a39      	ldr	r1, [r7, #32]
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f001 f9cc 	bl	80071bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00d      	beq.n	8005e46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d107      	bne.n	8005e42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e06b      	b.n	8005f1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	781a      	ldrb	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d11b      	bne.n	8005ebc <HAL_I2C_Master_Transmit+0x188>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d017      	beq.n	8005ebc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	781a      	ldrb	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	6a39      	ldr	r1, [r7, #32]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f001 f9c3 	bl	800724c <I2C_WaitOnBTFFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00d      	beq.n	8005ee8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d107      	bne.n	8005ee4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e01a      	b.n	8005f1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d194      	bne.n	8005e1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e000      	b.n	8005f1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f1c:	2302      	movs	r3, #2
  }
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	00100002 	.word	0x00100002
 8005f2c:	ffff0000 	.word	0xffff0000

08005f30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08c      	sub	sp, #48	; 0x30
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	817b      	strh	r3, [r7, #10]
 8005f40:	4613      	mov	r3, r2
 8005f42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f44:	f7ff fa04 	bl	8005350 <HAL_GetTick>
 8005f48:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	f040 8217 	bne.w	8006386 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	2319      	movs	r3, #25
 8005f5e:	2201      	movs	r2, #1
 8005f60:	497c      	ldr	r1, [pc, #496]	; (8006154 <HAL_I2C_Master_Receive+0x224>)
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f001 f810 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e20a      	b.n	8006388 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <HAL_I2C_Master_Receive+0x50>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e203      	b.n	8006388 <HAL_I2C_Master_Receive+0x458>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d007      	beq.n	8005fa6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2222      	movs	r2, #34	; 0x22
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2210      	movs	r2, #16
 8005fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	893a      	ldrh	r2, [r7, #8]
 8005fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4a5c      	ldr	r2, [pc, #368]	; (8006158 <HAL_I2C_Master_Receive+0x228>)
 8005fe6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fe8:	8979      	ldrh	r1, [r7, #10]
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fd7e 	bl	8006af0 <I2C_MasterRequestRead>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e1c4      	b.n	8006388 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006002:	2b00      	cmp	r3, #0
 8006004:	d113      	bne.n	800602e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006006:	2300      	movs	r3, #0
 8006008:	623b      	str	r3, [r7, #32]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	623b      	str	r3, [r7, #32]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	623b      	str	r3, [r7, #32]
 800601a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	e198      	b.n	8006360 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006032:	2b01      	cmp	r3, #1
 8006034:	d11b      	bne.n	800606e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	e178      	b.n	8006360 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006072:	2b02      	cmp	r3, #2
 8006074:	d11b      	bne.n	80060ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006084:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006094:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006096:	2300      	movs	r3, #0
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	e158      	b.n	8006360 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060d4:	e144      	b.n	8006360 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060da:	2b03      	cmp	r3, #3
 80060dc:	f200 80f1 	bhi.w	80062c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d123      	bne.n	8006130 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f001 f8f5 	bl	80072dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e145      	b.n	8006388 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800612e:	e117      	b.n	8006360 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006134:	2b02      	cmp	r3, #2
 8006136:	d14e      	bne.n	80061d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	2200      	movs	r2, #0
 8006140:	4906      	ldr	r1, [pc, #24]	; (800615c <HAL_I2C_Master_Receive+0x22c>)
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 ff20 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e11a      	b.n	8006388 <HAL_I2C_Master_Receive+0x458>
 8006152:	bf00      	nop
 8006154:	00100002 	.word	0x00100002
 8006158:	ffff0000 	.word	0xffff0000
 800615c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800616e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061d4:	e0c4      	b.n	8006360 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	2200      	movs	r2, #0
 80061de:	496c      	ldr	r1, [pc, #432]	; (8006390 <HAL_I2C_Master_Receive+0x460>)
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fed1 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e0cb      	b.n	8006388 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	2200      	movs	r2, #0
 800623a:	4955      	ldr	r1, [pc, #340]	; (8006390 <HAL_I2C_Master_Receive+0x460>)
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fea3 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e09d      	b.n	8006388 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800625a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	3b01      	subs	r3, #1
 8006288:	b29a      	uxth	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062c0:	e04e      	b.n	8006360 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f001 f808 	bl	80072dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e058      	b.n	8006388 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b04      	cmp	r3, #4
 8006314:	d124      	bne.n	8006360 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631a:	2b03      	cmp	r3, #3
 800631c:	d107      	bne.n	800632e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800632c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006356:	b29b      	uxth	r3, r3
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006364:	2b00      	cmp	r3, #0
 8006366:	f47f aeb6 	bne.w	80060d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2220      	movs	r2, #32
 800636e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	e000      	b.n	8006388 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006386:	2302      	movs	r3, #2
  }
}
 8006388:	4618      	mov	r0, r3
 800638a:	3728      	adds	r7, #40	; 0x28
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	00010004 	.word	0x00010004

08006394 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	4608      	mov	r0, r1
 800639e:	4611      	mov	r1, r2
 80063a0:	461a      	mov	r2, r3
 80063a2:	4603      	mov	r3, r0
 80063a4:	817b      	strh	r3, [r7, #10]
 80063a6:	460b      	mov	r3, r1
 80063a8:	813b      	strh	r3, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063ae:	f7fe ffcf 	bl	8005350 <HAL_GetTick>
 80063b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b20      	cmp	r3, #32
 80063be:	f040 80d9 	bne.w	8006574 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	2319      	movs	r3, #25
 80063c8:	2201      	movs	r2, #1
 80063ca:	496d      	ldr	r1, [pc, #436]	; (8006580 <HAL_I2C_Mem_Write+0x1ec>)
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 fddb 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063d8:	2302      	movs	r3, #2
 80063da:	e0cc      	b.n	8006576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_I2C_Mem_Write+0x56>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e0c5      	b.n	8006576 <HAL_I2C_Mem_Write+0x1e2>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d007      	beq.n	8006410 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800641e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2221      	movs	r2, #33	; 0x21
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2240      	movs	r2, #64	; 0x40
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a3a      	ldr	r2, [r7, #32]
 800643a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006440:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4a4d      	ldr	r2, [pc, #308]	; (8006584 <HAL_I2C_Mem_Write+0x1f0>)
 8006450:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006452:	88f8      	ldrh	r0, [r7, #6]
 8006454:	893a      	ldrh	r2, [r7, #8]
 8006456:	8979      	ldrh	r1, [r7, #10]
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	9301      	str	r3, [sp, #4]
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	4603      	mov	r3, r0
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fc12 	bl	8006c8c <I2C_RequestMemoryWrite>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d052      	beq.n	8006514 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e081      	b.n	8006576 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fea0 	bl	80071bc <I2C_WaitOnTXEFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	2b04      	cmp	r3, #4
 8006488:	d107      	bne.n	800649a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e06b      	b.n	8006576 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	781a      	ldrb	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d11b      	bne.n	8006514 <HAL_I2C_Mem_Write+0x180>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d017      	beq.n	8006514 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1aa      	bne.n	8006472 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fe93 	bl	800724c <I2C_WaitOnBTFFlagUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00d      	beq.n	8006548 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	2b04      	cmp	r3, #4
 8006532:	d107      	bne.n	8006544 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006542:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e016      	b.n	8006576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	e000      	b.n	8006576 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006574:	2302      	movs	r3, #2
  }
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	00100002 	.word	0x00100002
 8006584:	ffff0000 	.word	0xffff0000

08006588 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08c      	sub	sp, #48	; 0x30
 800658c:	af02      	add	r7, sp, #8
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	4608      	mov	r0, r1
 8006592:	4611      	mov	r1, r2
 8006594:	461a      	mov	r2, r3
 8006596:	4603      	mov	r3, r0
 8006598:	817b      	strh	r3, [r7, #10]
 800659a:	460b      	mov	r3, r1
 800659c:	813b      	strh	r3, [r7, #8]
 800659e:	4613      	mov	r3, r2
 80065a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065a2:	f7fe fed5 	bl	8005350 <HAL_GetTick>
 80065a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	f040 8214 	bne.w	80069de <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	2319      	movs	r3, #25
 80065bc:	2201      	movs	r2, #1
 80065be:	497b      	ldr	r1, [pc, #492]	; (80067ac <HAL_I2C_Mem_Read+0x224>)
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fce1 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80065cc:	2302      	movs	r3, #2
 80065ce:	e207      	b.n	80069e0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_I2C_Mem_Read+0x56>
 80065da:	2302      	movs	r3, #2
 80065dc:	e200      	b.n	80069e0 <HAL_I2C_Mem_Read+0x458>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d007      	beq.n	8006604 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006612:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2222      	movs	r2, #34	; 0x22
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2240      	movs	r2, #64	; 0x40
 8006620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800662e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4a5b      	ldr	r2, [pc, #364]	; (80067b0 <HAL_I2C_Mem_Read+0x228>)
 8006644:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006646:	88f8      	ldrh	r0, [r7, #6]
 8006648:	893a      	ldrh	r2, [r7, #8]
 800664a:	8979      	ldrh	r1, [r7, #10]
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	4603      	mov	r3, r0
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 fbae 	bl	8006db8 <I2C_RequestMemoryRead>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e1bc      	b.n	80069e0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666a:	2b00      	cmp	r3, #0
 800666c:	d113      	bne.n	8006696 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800666e:	2300      	movs	r3, #0
 8006670:	623b      	str	r3, [r7, #32]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	623b      	str	r3, [r7, #32]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	623b      	str	r3, [r7, #32]
 8006682:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	e190      	b.n	80069b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669a:	2b01      	cmp	r3, #1
 800669c:	d11b      	bne.n	80066d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ae:	2300      	movs	r3, #0
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e170      	b.n	80069b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d11b      	bne.n	8006716 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fe:	2300      	movs	r3, #0
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	e150      	b.n	80069b8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800672c:	e144      	b.n	80069b8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006732:	2b03      	cmp	r3, #3
 8006734:	f200 80f1 	bhi.w	800691a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673c:	2b01      	cmp	r3, #1
 800673e:	d123      	bne.n	8006788 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006742:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 fdc9 	bl	80072dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e145      	b.n	80069e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006770:	3b01      	subs	r3, #1
 8006772:	b29a      	uxth	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006786:	e117      	b.n	80069b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678c:	2b02      	cmp	r3, #2
 800678e:	d14e      	bne.n	800682e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	2200      	movs	r2, #0
 8006798:	4906      	ldr	r1, [pc, #24]	; (80067b4 <HAL_I2C_Mem_Read+0x22c>)
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fbf4 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e11a      	b.n	80069e0 <HAL_I2C_Mem_Read+0x458>
 80067aa:	bf00      	nop
 80067ac:	00100002 	.word	0x00100002
 80067b0:	ffff0000 	.word	0xffff0000
 80067b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691a      	ldr	r2, [r3, #16]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800682c:	e0c4      	b.n	80069b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	2200      	movs	r2, #0
 8006836:	496c      	ldr	r1, [pc, #432]	; (80069e8 <HAL_I2C_Mem_Read+0x460>)
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 fba5 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e0cb      	b.n	80069e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691a      	ldr	r2, [r3, #16]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006880:	b29b      	uxth	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	2200      	movs	r2, #0
 8006892:	4955      	ldr	r1, [pc, #340]	; (80069e8 <HAL_I2C_Mem_Read+0x460>)
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fb77 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e09d      	b.n	80069e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691a      	ldr	r2, [r3, #16]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006902:	3b01      	subs	r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690e:	b29b      	uxth	r3, r3
 8006910:	3b01      	subs	r3, #1
 8006912:	b29a      	uxth	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006918:	e04e      	b.n	80069b8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800691a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 fcdc 	bl	80072dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e058      	b.n	80069e0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b04      	cmp	r3, #4
 800696c:	d124      	bne.n	80069b8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006972:	2b03      	cmp	r3, #3
 8006974:	d107      	bne.n	8006986 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006984:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f47f aeb6 	bne.w	800672e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	e000      	b.n	80069e0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80069de:	2302      	movs	r3, #2
  }
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3728      	adds	r7, #40	; 0x28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	00010004 	.word	0x00010004

080069ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	607a      	str	r2, [r7, #4]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	460b      	mov	r3, r1
 80069fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d006      	beq.n	8006a16 <I2C_MasterRequestWrite+0x2a>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d003      	beq.n	8006a16 <I2C_MasterRequestWrite+0x2a>
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a14:	d108      	bne.n	8006a28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	e00b      	b.n	8006a40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	2b12      	cmp	r3, #18
 8006a2e:	d107      	bne.n	8006a40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 fa9b 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00d      	beq.n	8006a74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a66:	d103      	bne.n	8006a70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e035      	b.n	8006ae0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a7c:	d108      	bne.n	8006a90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a7e:	897b      	ldrh	r3, [r7, #10]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a8c:	611a      	str	r2, [r3, #16]
 8006a8e:	e01b      	b.n	8006ac8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a90:	897b      	ldrh	r3, [r7, #10]
 8006a92:	11db      	asrs	r3, r3, #7
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	f003 0306 	and.w	r3, r3, #6
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	f063 030f 	orn	r3, r3, #15
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	490e      	ldr	r1, [pc, #56]	; (8006ae8 <I2C_MasterRequestWrite+0xfc>)
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fae4 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e010      	b.n	8006ae0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006abe:	897b      	ldrh	r3, [r7, #10]
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	4907      	ldr	r1, [pc, #28]	; (8006aec <I2C_MasterRequestWrite+0x100>)
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 fad4 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	00010008 	.word	0x00010008
 8006aec:	00010002 	.word	0x00010002

08006af0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af02      	add	r7, sp, #8
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	607a      	str	r2, [r7, #4]
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	460b      	mov	r3, r1
 8006afe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d006      	beq.n	8006b2a <I2C_MasterRequestRead+0x3a>
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d003      	beq.n	8006b2a <I2C_MasterRequestRead+0x3a>
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b28:	d108      	bne.n	8006b3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e00b      	b.n	8006b54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	2b11      	cmp	r3, #17
 8006b42:	d107      	bne.n	8006b54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 fa11 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00d      	beq.n	8006b88 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b7a:	d103      	bne.n	8006b84 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e079      	b.n	8006c7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b90:	d108      	bne.n	8006ba4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006b92:	897b      	ldrh	r3, [r7, #10]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	f043 0301 	orr.w	r3, r3, #1
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	611a      	str	r2, [r3, #16]
 8006ba2:	e05f      	b.n	8006c64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ba4:	897b      	ldrh	r3, [r7, #10]
 8006ba6:	11db      	asrs	r3, r3, #7
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f003 0306 	and.w	r3, r3, #6
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f063 030f 	orn	r3, r3, #15
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	4930      	ldr	r1, [pc, #192]	; (8006c84 <I2C_MasterRequestRead+0x194>)
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 fa5a 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e054      	b.n	8006c7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006bd2:	897b      	ldrh	r3, [r7, #10]
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	4929      	ldr	r1, [pc, #164]	; (8006c88 <I2C_MasterRequestRead+0x198>)
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 fa4a 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e044      	b.n	8006c7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	613b      	str	r3, [r7, #16]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	613b      	str	r3, [r7, #16]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f9af 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00d      	beq.n	8006c4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3e:	d103      	bne.n	8006c48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c46:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e017      	b.n	8006c7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006c4c:	897b      	ldrh	r3, [r7, #10]
 8006c4e:	11db      	asrs	r3, r3, #7
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	f003 0306 	and.w	r3, r3, #6
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f063 030e 	orn	r3, r3, #14
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4907      	ldr	r1, [pc, #28]	; (8006c88 <I2C_MasterRequestRead+0x198>)
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fa06 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	00010008 	.word	0x00010008
 8006c88:	00010002 	.word	0x00010002

08006c8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b088      	sub	sp, #32
 8006c90:	af02      	add	r7, sp, #8
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	4608      	mov	r0, r1
 8006c96:	4611      	mov	r1, r2
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	817b      	strh	r3, [r7, #10]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	813b      	strh	r3, [r7, #8]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f960 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00d      	beq.n	8006cea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cdc:	d103      	bne.n	8006ce6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e05f      	b.n	8006daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cea:	897b      	ldrh	r3, [r7, #10]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	461a      	mov	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006cf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	6a3a      	ldr	r2, [r7, #32]
 8006cfe:	492d      	ldr	r1, [pc, #180]	; (8006db4 <I2C_RequestMemoryWrite+0x128>)
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f9bb 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e04c      	b.n	8006daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d10:	2300      	movs	r3, #0
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d28:	6a39      	ldr	r1, [r7, #32]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 fa46 	bl	80071bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00d      	beq.n	8006d52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d107      	bne.n	8006d4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e02b      	b.n	8006daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d105      	bne.n	8006d64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d58:	893b      	ldrh	r3, [r7, #8]
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	611a      	str	r2, [r3, #16]
 8006d62:	e021      	b.n	8006da8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d64:	893b      	ldrh	r3, [r7, #8]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d74:	6a39      	ldr	r1, [r7, #32]
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 fa20 	bl	80071bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00d      	beq.n	8006d9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d107      	bne.n	8006d9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e005      	b.n	8006daa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d9e:	893b      	ldrh	r3, [r7, #8]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	00010002 	.word	0x00010002

08006db8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af02      	add	r7, sp, #8
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	817b      	strh	r3, [r7, #10]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	813b      	strh	r3, [r7, #8]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006de0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006df0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 f8c2 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00d      	beq.n	8006e26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e18:	d103      	bne.n	8006e22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e0aa      	b.n	8006f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e26:	897b      	ldrh	r3, [r7, #10]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	6a3a      	ldr	r2, [r7, #32]
 8006e3a:	4952      	ldr	r1, [pc, #328]	; (8006f84 <I2C_RequestMemoryRead+0x1cc>)
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f91d 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e097      	b.n	8006f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e64:	6a39      	ldr	r1, [r7, #32]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 f9a8 	bl	80071bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00d      	beq.n	8006e8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d107      	bne.n	8006e8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e076      	b.n	8006f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e8e:	88fb      	ldrh	r3, [r7, #6]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d105      	bne.n	8006ea0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e94:	893b      	ldrh	r3, [r7, #8]
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	611a      	str	r2, [r3, #16]
 8006e9e:	e021      	b.n	8006ee4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ea0:	893b      	ldrh	r3, [r7, #8]
 8006ea2:	0a1b      	lsrs	r3, r3, #8
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb0:	6a39      	ldr	r1, [r7, #32]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 f982 	bl	80071bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00d      	beq.n	8006eda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d107      	bne.n	8006ed6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ed4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e050      	b.n	8006f7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006eda:	893b      	ldrh	r3, [r7, #8]
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee6:	6a39      	ldr	r1, [r7, #32]
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f967 	bl	80071bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00d      	beq.n	8006f10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d107      	bne.n	8006f0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e035      	b.n	8006f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f82b 	bl	8006f88 <I2C_WaitOnFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00d      	beq.n	8006f54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f46:	d103      	bne.n	8006f50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e013      	b.n	8006f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f54:	897b      	ldrh	r3, [r7, #10]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f043 0301 	orr.w	r3, r3, #1
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	6a3a      	ldr	r2, [r7, #32]
 8006f68:	4906      	ldr	r1, [pc, #24]	; (8006f84 <I2C_RequestMemoryRead+0x1cc>)
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 f886 	bl	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	00010002 	.word	0x00010002

08006f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f98:	e048      	b.n	800702c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d044      	beq.n	800702c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa2:	f7fe f9d5 	bl	8005350 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d302      	bcc.n	8006fb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d139      	bne.n	800702c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	0c1b      	lsrs	r3, r3, #16
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d10d      	bne.n	8006fde <I2C_WaitOnFlagUntilTimeout+0x56>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	43da      	mvns	r2, r3
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	bf0c      	ite	eq
 8006fd4:	2301      	moveq	r3, #1
 8006fd6:	2300      	movne	r3, #0
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	461a      	mov	r2, r3
 8006fdc:	e00c      	b.n	8006ff8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	43da      	mvns	r2, r3
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bf0c      	ite	eq
 8006ff0:	2301      	moveq	r3, #1
 8006ff2:	2300      	movne	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d116      	bne.n	800702c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007018:	f043 0220 	orr.w	r2, r3, #32
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e023      	b.n	8007074 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	0c1b      	lsrs	r3, r3, #16
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b01      	cmp	r3, #1
 8007034:	d10d      	bne.n	8007052 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	43da      	mvns	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4013      	ands	r3, r2
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	bf0c      	ite	eq
 8007048:	2301      	moveq	r3, #1
 800704a:	2300      	movne	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	e00c      	b.n	800706c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	43da      	mvns	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	4013      	ands	r3, r2
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	bf0c      	ite	eq
 8007064:	2301      	moveq	r3, #1
 8007066:	2300      	movne	r3, #0
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	429a      	cmp	r2, r3
 8007070:	d093      	beq.n	8006f9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800708a:	e071      	b.n	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800709a:	d123      	bne.n	80070e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d0:	f043 0204 	orr.w	r2, r3, #4
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e067      	b.n	80071b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ea:	d041      	beq.n	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ec:	f7fe f930 	bl	8005350 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d302      	bcc.n	8007102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d136      	bne.n	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	0c1b      	lsrs	r3, r3, #16
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	d10c      	bne.n	8007126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	43da      	mvns	r2, r3
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4013      	ands	r3, r2
 8007118:	b29b      	uxth	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	bf14      	ite	ne
 800711e:	2301      	movne	r3, #1
 8007120:	2300      	moveq	r3, #0
 8007122:	b2db      	uxtb	r3, r3
 8007124:	e00b      	b.n	800713e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	43da      	mvns	r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	4013      	ands	r3, r2
 8007132:	b29b      	uxth	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	bf14      	ite	ne
 8007138:	2301      	movne	r3, #1
 800713a:	2300      	moveq	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d016      	beq.n	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2220      	movs	r2, #32
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	f043 0220 	orr.w	r2, r3, #32
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e021      	b.n	80071b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	0c1b      	lsrs	r3, r3, #16
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b01      	cmp	r3, #1
 8007178:	d10c      	bne.n	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	43da      	mvns	r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	4013      	ands	r3, r2
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	bf14      	ite	ne
 800718c:	2301      	movne	r3, #1
 800718e:	2300      	moveq	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	e00b      	b.n	80071ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	43da      	mvns	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4013      	ands	r3, r2
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	bf14      	ite	ne
 80071a6:	2301      	movne	r3, #1
 80071a8:	2300      	moveq	r3, #0
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f47f af6d 	bne.w	800708c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071c8:	e034      	b.n	8007234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 f8e3 	bl	8007396 <I2C_IsAcknowledgeFailed>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e034      	b.n	8007244 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e0:	d028      	beq.n	8007234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071e2:	f7fe f8b5 	bl	8005350 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d302      	bcc.n	80071f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d11d      	bne.n	8007234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b80      	cmp	r3, #128	; 0x80
 8007204:	d016      	beq.n	8007234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	f043 0220 	orr.w	r2, r3, #32
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e007      	b.n	8007244 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723e:	2b80      	cmp	r3, #128	; 0x80
 8007240:	d1c3      	bne.n	80071ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007258:	e034      	b.n	80072c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f89b 	bl	8007396 <I2C_IsAcknowledgeFailed>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e034      	b.n	80072d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007270:	d028      	beq.n	80072c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007272:	f7fe f86d 	bl	8005350 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	d302      	bcc.n	8007288 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d11d      	bne.n	80072c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b04      	cmp	r3, #4
 8007294:	d016      	beq.n	80072c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	f043 0220 	orr.w	r2, r3, #32
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e007      	b.n	80072d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d1c3      	bne.n	800725a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072e8:	e049      	b.n	800737e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b10      	cmp	r3, #16
 80072f6:	d119      	bne.n	800732c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0210 	mvn.w	r2, #16
 8007300:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e030      	b.n	800738e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732c:	f7fe f810 	bl	8005350 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	429a      	cmp	r2, r3
 800733a:	d302      	bcc.n	8007342 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d11d      	bne.n	800737e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	d016      	beq.n	800737e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2220      	movs	r2, #32
 800735a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f043 0220 	orr.w	r2, r3, #32
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e007      	b.n	800738e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007388:	2b40      	cmp	r3, #64	; 0x40
 800738a:	d1ae      	bne.n	80072ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ac:	d11b      	bne.n	80073e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	f043 0204 	orr.w	r2, r3, #4
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e267      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d075      	beq.n	80074fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007412:	4b88      	ldr	r3, [pc, #544]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f003 030c 	and.w	r3, r3, #12
 800741a:	2b04      	cmp	r3, #4
 800741c:	d00c      	beq.n	8007438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800741e:	4b85      	ldr	r3, [pc, #532]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007426:	2b08      	cmp	r3, #8
 8007428:	d112      	bne.n	8007450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800742a:	4b82      	ldr	r3, [pc, #520]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007436:	d10b      	bne.n	8007450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007438:	4b7e      	ldr	r3, [pc, #504]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d05b      	beq.n	80074fc <HAL_RCC_OscConfig+0x108>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d157      	bne.n	80074fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e242      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007458:	d106      	bne.n	8007468 <HAL_RCC_OscConfig+0x74>
 800745a:	4b76      	ldr	r3, [pc, #472]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a75      	ldr	r2, [pc, #468]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	e01d      	b.n	80074a4 <HAL_RCC_OscConfig+0xb0>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007470:	d10c      	bne.n	800748c <HAL_RCC_OscConfig+0x98>
 8007472:	4b70      	ldr	r3, [pc, #448]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a6f      	ldr	r2, [pc, #444]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	4b6d      	ldr	r3, [pc, #436]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a6c      	ldr	r2, [pc, #432]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	e00b      	b.n	80074a4 <HAL_RCC_OscConfig+0xb0>
 800748c:	4b69      	ldr	r3, [pc, #420]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a68      	ldr	r2, [pc, #416]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	4b66      	ldr	r3, [pc, #408]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a65      	ldr	r2, [pc, #404]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 800749e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d013      	beq.n	80074d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ac:	f7fd ff50 	bl	8005350 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074b4:	f7fd ff4c 	bl	8005350 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b64      	cmp	r3, #100	; 0x64
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e207      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074c6:	4b5b      	ldr	r3, [pc, #364]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0f0      	beq.n	80074b4 <HAL_RCC_OscConfig+0xc0>
 80074d2:	e014      	b.n	80074fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074d4:	f7fd ff3c 	bl	8005350 <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074da:	e008      	b.n	80074ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074dc:	f7fd ff38 	bl	8005350 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b64      	cmp	r3, #100	; 0x64
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e1f3      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074ee:	4b51      	ldr	r3, [pc, #324]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1f0      	bne.n	80074dc <HAL_RCC_OscConfig+0xe8>
 80074fa:	e000      	b.n	80074fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d063      	beq.n	80075d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800750a:	4b4a      	ldr	r3, [pc, #296]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 030c 	and.w	r3, r3, #12
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00b      	beq.n	800752e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007516:	4b47      	ldr	r3, [pc, #284]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800751e:	2b08      	cmp	r3, #8
 8007520:	d11c      	bne.n	800755c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007522:	4b44      	ldr	r3, [pc, #272]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d116      	bne.n	800755c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800752e:	4b41      	ldr	r3, [pc, #260]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <HAL_RCC_OscConfig+0x152>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d001      	beq.n	8007546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e1c7      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007546:	4b3b      	ldr	r3, [pc, #236]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	4937      	ldr	r1, [pc, #220]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007556:	4313      	orrs	r3, r2
 8007558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800755a:	e03a      	b.n	80075d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d020      	beq.n	80075a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007564:	4b34      	ldr	r3, [pc, #208]	; (8007638 <HAL_RCC_OscConfig+0x244>)
 8007566:	2201      	movs	r2, #1
 8007568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756a:	f7fd fef1 	bl	8005350 <HAL_GetTick>
 800756e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007570:	e008      	b.n	8007584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007572:	f7fd feed 	bl	8005350 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b02      	cmp	r3, #2
 800757e:	d901      	bls.n	8007584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e1a8      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007584:	4b2b      	ldr	r3, [pc, #172]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0f0      	beq.n	8007572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007590:	4b28      	ldr	r3, [pc, #160]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	4925      	ldr	r1, [pc, #148]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	600b      	str	r3, [r1, #0]
 80075a4:	e015      	b.n	80075d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075a6:	4b24      	ldr	r3, [pc, #144]	; (8007638 <HAL_RCC_OscConfig+0x244>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ac:	f7fd fed0 	bl	8005350 <HAL_GetTick>
 80075b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075b2:	e008      	b.n	80075c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075b4:	f7fd fecc 	bl	8005350 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d901      	bls.n	80075c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e187      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075c6:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1f0      	bne.n	80075b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0308 	and.w	r3, r3, #8
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d036      	beq.n	800764c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d016      	beq.n	8007614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075e6:	4b15      	ldr	r3, [pc, #84]	; (800763c <HAL_RCC_OscConfig+0x248>)
 80075e8:	2201      	movs	r2, #1
 80075ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ec:	f7fd feb0 	bl	8005350 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075f4:	f7fd feac 	bl	8005350 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e167      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007606:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <HAL_RCC_OscConfig+0x240>)
 8007608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0f0      	beq.n	80075f4 <HAL_RCC_OscConfig+0x200>
 8007612:	e01b      	b.n	800764c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007614:	4b09      	ldr	r3, [pc, #36]	; (800763c <HAL_RCC_OscConfig+0x248>)
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800761a:	f7fd fe99 	bl	8005350 <HAL_GetTick>
 800761e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007620:	e00e      	b.n	8007640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007622:	f7fd fe95 	bl	8005350 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	2b02      	cmp	r3, #2
 800762e:	d907      	bls.n	8007640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e150      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
 8007634:	40023800 	.word	0x40023800
 8007638:	42470000 	.word	0x42470000
 800763c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007640:	4b88      	ldr	r3, [pc, #544]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 8007642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1ea      	bne.n	8007622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 8097 	beq.w	8007788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800765a:	2300      	movs	r3, #0
 800765c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800765e:	4b81      	ldr	r3, [pc, #516]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10f      	bne.n	800768a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800766a:	2300      	movs	r3, #0
 800766c:	60bb      	str	r3, [r7, #8]
 800766e:	4b7d      	ldr	r3, [pc, #500]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	4a7c      	ldr	r2, [pc, #496]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 8007674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007678:	6413      	str	r3, [r2, #64]	; 0x40
 800767a:	4b7a      	ldr	r3, [pc, #488]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007682:	60bb      	str	r3, [r7, #8]
 8007684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007686:	2301      	movs	r3, #1
 8007688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800768a:	4b77      	ldr	r3, [pc, #476]	; (8007868 <HAL_RCC_OscConfig+0x474>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007692:	2b00      	cmp	r3, #0
 8007694:	d118      	bne.n	80076c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007696:	4b74      	ldr	r3, [pc, #464]	; (8007868 <HAL_RCC_OscConfig+0x474>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a73      	ldr	r2, [pc, #460]	; (8007868 <HAL_RCC_OscConfig+0x474>)
 800769c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076a2:	f7fd fe55 	bl	8005350 <HAL_GetTick>
 80076a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076a8:	e008      	b.n	80076bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076aa:	f7fd fe51 	bl	8005350 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e10c      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076bc:	4b6a      	ldr	r3, [pc, #424]	; (8007868 <HAL_RCC_OscConfig+0x474>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0f0      	beq.n	80076aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d106      	bne.n	80076de <HAL_RCC_OscConfig+0x2ea>
 80076d0:	4b64      	ldr	r3, [pc, #400]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 80076d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d4:	4a63      	ldr	r2, [pc, #396]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 80076d6:	f043 0301 	orr.w	r3, r3, #1
 80076da:	6713      	str	r3, [r2, #112]	; 0x70
 80076dc:	e01c      	b.n	8007718 <HAL_RCC_OscConfig+0x324>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	2b05      	cmp	r3, #5
 80076e4:	d10c      	bne.n	8007700 <HAL_RCC_OscConfig+0x30c>
 80076e6:	4b5f      	ldr	r3, [pc, #380]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 80076e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ea:	4a5e      	ldr	r2, [pc, #376]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 80076ec:	f043 0304 	orr.w	r3, r3, #4
 80076f0:	6713      	str	r3, [r2, #112]	; 0x70
 80076f2:	4b5c      	ldr	r3, [pc, #368]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 80076f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f6:	4a5b      	ldr	r2, [pc, #364]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 80076f8:	f043 0301 	orr.w	r3, r3, #1
 80076fc:	6713      	str	r3, [r2, #112]	; 0x70
 80076fe:	e00b      	b.n	8007718 <HAL_RCC_OscConfig+0x324>
 8007700:	4b58      	ldr	r3, [pc, #352]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 8007702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007704:	4a57      	ldr	r2, [pc, #348]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 8007706:	f023 0301 	bic.w	r3, r3, #1
 800770a:	6713      	str	r3, [r2, #112]	; 0x70
 800770c:	4b55      	ldr	r3, [pc, #340]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 800770e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007710:	4a54      	ldr	r2, [pc, #336]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 8007712:	f023 0304 	bic.w	r3, r3, #4
 8007716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d015      	beq.n	800774c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007720:	f7fd fe16 	bl	8005350 <HAL_GetTick>
 8007724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007726:	e00a      	b.n	800773e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007728:	f7fd fe12 	bl	8005350 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	f241 3288 	movw	r2, #5000	; 0x1388
 8007736:	4293      	cmp	r3, r2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e0cb      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800773e:	4b49      	ldr	r3, [pc, #292]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 8007740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0ee      	beq.n	8007728 <HAL_RCC_OscConfig+0x334>
 800774a:	e014      	b.n	8007776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800774c:	f7fd fe00 	bl	8005350 <HAL_GetTick>
 8007750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007752:	e00a      	b.n	800776a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007754:	f7fd fdfc 	bl	8005350 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007762:	4293      	cmp	r3, r2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e0b5      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800776a:	4b3e      	ldr	r3, [pc, #248]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 800776c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1ee      	bne.n	8007754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d105      	bne.n	8007788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800777c:	4b39      	ldr	r3, [pc, #228]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	4a38      	ldr	r2, [pc, #224]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 8007782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 80a1 	beq.w	80078d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007792:	4b34      	ldr	r3, [pc, #208]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 030c 	and.w	r3, r3, #12
 800779a:	2b08      	cmp	r3, #8
 800779c:	d05c      	beq.n	8007858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d141      	bne.n	800782a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077a6:	4b31      	ldr	r3, [pc, #196]	; (800786c <HAL_RCC_OscConfig+0x478>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077ac:	f7fd fdd0 	bl	8005350 <HAL_GetTick>
 80077b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077b4:	f7fd fdcc 	bl	8005350 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e087      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077c6:	4b27      	ldr	r3, [pc, #156]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1f0      	bne.n	80077b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69da      	ldr	r2, [r3, #28]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	019b      	lsls	r3, r3, #6
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	085b      	lsrs	r3, r3, #1
 80077ea:	3b01      	subs	r3, #1
 80077ec:	041b      	lsls	r3, r3, #16
 80077ee:	431a      	orrs	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	061b      	lsls	r3, r3, #24
 80077f6:	491b      	ldr	r1, [pc, #108]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077fc:	4b1b      	ldr	r3, [pc, #108]	; (800786c <HAL_RCC_OscConfig+0x478>)
 80077fe:	2201      	movs	r2, #1
 8007800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007802:	f7fd fda5 	bl	8005350 <HAL_GetTick>
 8007806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007808:	e008      	b.n	800781c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800780a:	f7fd fda1 	bl	8005350 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e05c      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800781c:	4b11      	ldr	r3, [pc, #68]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0f0      	beq.n	800780a <HAL_RCC_OscConfig+0x416>
 8007828:	e054      	b.n	80078d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800782a:	4b10      	ldr	r3, [pc, #64]	; (800786c <HAL_RCC_OscConfig+0x478>)
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007830:	f7fd fd8e 	bl	8005350 <HAL_GetTick>
 8007834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007836:	e008      	b.n	800784a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007838:	f7fd fd8a 	bl	8005350 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d901      	bls.n	800784a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e045      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800784a:	4b06      	ldr	r3, [pc, #24]	; (8007864 <HAL_RCC_OscConfig+0x470>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1f0      	bne.n	8007838 <HAL_RCC_OscConfig+0x444>
 8007856:	e03d      	b.n	80078d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d107      	bne.n	8007870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e038      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
 8007864:	40023800 	.word	0x40023800
 8007868:	40007000 	.word	0x40007000
 800786c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007870:	4b1b      	ldr	r3, [pc, #108]	; (80078e0 <HAL_RCC_OscConfig+0x4ec>)
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d028      	beq.n	80078d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007888:	429a      	cmp	r2, r3
 800788a:	d121      	bne.n	80078d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007896:	429a      	cmp	r2, r3
 8007898:	d11a      	bne.n	80078d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80078a0:	4013      	ands	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d111      	bne.n	80078d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b6:	085b      	lsrs	r3, r3, #1
 80078b8:	3b01      	subs	r3, #1
 80078ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078bc:	429a      	cmp	r2, r3
 80078be:	d107      	bne.n	80078d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d001      	beq.n	80078d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e000      	b.n	80078d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	40023800 	.word	0x40023800

080078e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e0cc      	b.n	8007a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078f8:	4b68      	ldr	r3, [pc, #416]	; (8007a9c <HAL_RCC_ClockConfig+0x1b8>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0307 	and.w	r3, r3, #7
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d90c      	bls.n	8007920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007906:	4b65      	ldr	r3, [pc, #404]	; (8007a9c <HAL_RCC_ClockConfig+0x1b8>)
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800790e:	4b63      	ldr	r3, [pc, #396]	; (8007a9c <HAL_RCC_ClockConfig+0x1b8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	429a      	cmp	r2, r3
 800791a:	d001      	beq.n	8007920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e0b8      	b.n	8007a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d020      	beq.n	800796e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007938:	4b59      	ldr	r3, [pc, #356]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	4a58      	ldr	r2, [pc, #352]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800793e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d005      	beq.n	800795c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007950:	4b53      	ldr	r3, [pc, #332]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	4a52      	ldr	r2, [pc, #328]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8007956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800795a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800795c:	4b50      	ldr	r3, [pc, #320]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	494d      	ldr	r1, [pc, #308]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800796a:	4313      	orrs	r3, r2
 800796c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d044      	beq.n	8007a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d107      	bne.n	8007992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007982:	4b47      	ldr	r3, [pc, #284]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d119      	bne.n	80079c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e07f      	b.n	8007a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d003      	beq.n	80079a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d107      	bne.n	80079b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079a2:	4b3f      	ldr	r3, [pc, #252]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d109      	bne.n	80079c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e06f      	b.n	8007a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079b2:	4b3b      	ldr	r3, [pc, #236]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e067      	b.n	8007a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079c2:	4b37      	ldr	r3, [pc, #220]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f023 0203 	bic.w	r2, r3, #3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	4934      	ldr	r1, [pc, #208]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079d4:	f7fd fcbc 	bl	8005350 <HAL_GetTick>
 80079d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079da:	e00a      	b.n	80079f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079dc:	f7fd fcb8 	bl	8005350 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e04f      	b.n	8007a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079f2:	4b2b      	ldr	r3, [pc, #172]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f003 020c 	and.w	r2, r3, #12
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d1eb      	bne.n	80079dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a04:	4b25      	ldr	r3, [pc, #148]	; (8007a9c <HAL_RCC_ClockConfig+0x1b8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d20c      	bcs.n	8007a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a12:	4b22      	ldr	r3, [pc, #136]	; (8007a9c <HAL_RCC_ClockConfig+0x1b8>)
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a1a:	4b20      	ldr	r3, [pc, #128]	; (8007a9c <HAL_RCC_ClockConfig+0x1b8>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d001      	beq.n	8007a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e032      	b.n	8007a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d008      	beq.n	8007a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a38:	4b19      	ldr	r3, [pc, #100]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	4916      	ldr	r1, [pc, #88]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0308 	and.w	r3, r3, #8
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d009      	beq.n	8007a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a56:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	490e      	ldr	r1, [pc, #56]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007a6a:	f000 f821 	bl	8007ab0 <HAL_RCC_GetSysClockFreq>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	091b      	lsrs	r3, r3, #4
 8007a76:	f003 030f 	and.w	r3, r3, #15
 8007a7a:	490a      	ldr	r1, [pc, #40]	; (8007aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8007a7c:	5ccb      	ldrb	r3, [r1, r3]
 8007a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a82:	4a09      	ldr	r2, [pc, #36]	; (8007aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007a86:	4b09      	ldr	r3, [pc, #36]	; (8007aac <HAL_RCC_ClockConfig+0x1c8>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fd fc1c 	bl	80052c8 <HAL_InitTick>

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	40023c00 	.word	0x40023c00
 8007aa0:	40023800 	.word	0x40023800
 8007aa4:	0800f68c 	.word	0x0800f68c
 8007aa8:	20000000 	.word	0x20000000
 8007aac:	20000004 	.word	0x20000004

08007ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ab4:	b094      	sub	sp, #80	; 0x50
 8007ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	647b      	str	r3, [r7, #68]	; 0x44
 8007abc:	2300      	movs	r3, #0
 8007abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ac8:	4b79      	ldr	r3, [pc, #484]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f003 030c 	and.w	r3, r3, #12
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d00d      	beq.n	8007af0 <HAL_RCC_GetSysClockFreq+0x40>
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	f200 80e1 	bhi.w	8007c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d003      	beq.n	8007aea <HAL_RCC_GetSysClockFreq+0x3a>
 8007ae2:	e0db      	b.n	8007c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ae4:	4b73      	ldr	r3, [pc, #460]	; (8007cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ae6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007ae8:	e0db      	b.n	8007ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007aea:	4b73      	ldr	r3, [pc, #460]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8007aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007aee:	e0d8      	b.n	8007ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007af0:	4b6f      	ldr	r3, [pc, #444]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007af8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007afa:	4b6d      	ldr	r3, [pc, #436]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d063      	beq.n	8007bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b06:	4b6a      	ldr	r3, [pc, #424]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	099b      	lsrs	r3, r3, #6
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b18:	633b      	str	r3, [r7, #48]	; 0x30
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007b22:	4622      	mov	r2, r4
 8007b24:	462b      	mov	r3, r5
 8007b26:	f04f 0000 	mov.w	r0, #0
 8007b2a:	f04f 0100 	mov.w	r1, #0
 8007b2e:	0159      	lsls	r1, r3, #5
 8007b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b34:	0150      	lsls	r0, r2, #5
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	1a51      	subs	r1, r2, r1
 8007b3e:	6139      	str	r1, [r7, #16]
 8007b40:	4629      	mov	r1, r5
 8007b42:	eb63 0301 	sbc.w	r3, r3, r1
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	f04f 0200 	mov.w	r2, #0
 8007b4c:	f04f 0300 	mov.w	r3, #0
 8007b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b54:	4659      	mov	r1, fp
 8007b56:	018b      	lsls	r3, r1, #6
 8007b58:	4651      	mov	r1, sl
 8007b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b5e:	4651      	mov	r1, sl
 8007b60:	018a      	lsls	r2, r1, #6
 8007b62:	4651      	mov	r1, sl
 8007b64:	ebb2 0801 	subs.w	r8, r2, r1
 8007b68:	4659      	mov	r1, fp
 8007b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8007b6e:	f04f 0200 	mov.w	r2, #0
 8007b72:	f04f 0300 	mov.w	r3, #0
 8007b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b82:	4690      	mov	r8, r2
 8007b84:	4699      	mov	r9, r3
 8007b86:	4623      	mov	r3, r4
 8007b88:	eb18 0303 	adds.w	r3, r8, r3
 8007b8c:	60bb      	str	r3, [r7, #8]
 8007b8e:	462b      	mov	r3, r5
 8007b90:	eb49 0303 	adc.w	r3, r9, r3
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	f04f 0200 	mov.w	r2, #0
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	024b      	lsls	r3, r1, #9
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007bac:	4621      	mov	r1, r4
 8007bae:	024a      	lsls	r2, r1, #9
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bc0:	f7f9 f968 	bl	8000e94 <__aeabi_uldivmod>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4613      	mov	r3, r2
 8007bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bcc:	e058      	b.n	8007c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bce:	4b38      	ldr	r3, [pc, #224]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	099b      	lsrs	r3, r3, #6
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	4611      	mov	r1, r2
 8007bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007bde:	623b      	str	r3, [r7, #32]
 8007be0:	2300      	movs	r3, #0
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
 8007be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007be8:	4642      	mov	r2, r8
 8007bea:	464b      	mov	r3, r9
 8007bec:	f04f 0000 	mov.w	r0, #0
 8007bf0:	f04f 0100 	mov.w	r1, #0
 8007bf4:	0159      	lsls	r1, r3, #5
 8007bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007bfa:	0150      	lsls	r0, r2, #5
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4641      	mov	r1, r8
 8007c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8007c06:	4649      	mov	r1, r9
 8007c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	f04f 0300 	mov.w	r3, #0
 8007c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007c20:	ebb2 040a 	subs.w	r4, r2, sl
 8007c24:	eb63 050b 	sbc.w	r5, r3, fp
 8007c28:	f04f 0200 	mov.w	r2, #0
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	00eb      	lsls	r3, r5, #3
 8007c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c36:	00e2      	lsls	r2, r4, #3
 8007c38:	4614      	mov	r4, r2
 8007c3a:	461d      	mov	r5, r3
 8007c3c:	4643      	mov	r3, r8
 8007c3e:	18e3      	adds	r3, r4, r3
 8007c40:	603b      	str	r3, [r7, #0]
 8007c42:	464b      	mov	r3, r9
 8007c44:	eb45 0303 	adc.w	r3, r5, r3
 8007c48:	607b      	str	r3, [r7, #4]
 8007c4a:	f04f 0200 	mov.w	r2, #0
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c56:	4629      	mov	r1, r5
 8007c58:	028b      	lsls	r3, r1, #10
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c60:	4621      	mov	r1, r4
 8007c62:	028a      	lsls	r2, r1, #10
 8007c64:	4610      	mov	r0, r2
 8007c66:	4619      	mov	r1, r3
 8007c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	61bb      	str	r3, [r7, #24]
 8007c6e:	61fa      	str	r2, [r7, #28]
 8007c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c74:	f7f9 f90e 	bl	8000e94 <__aeabi_uldivmod>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c80:	4b0b      	ldr	r3, [pc, #44]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	0c1b      	lsrs	r3, r3, #16
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c9a:	e002      	b.n	8007ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c9c:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3750      	adds	r7, #80	; 0x50
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cae:	bf00      	nop
 8007cb0:	40023800 	.word	0x40023800
 8007cb4:	00f42400 	.word	0x00f42400
 8007cb8:	007a1200 	.word	0x007a1200

08007cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cc0:	4b03      	ldr	r3, [pc, #12]	; (8007cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	20000000 	.word	0x20000000

08007cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007cd8:	f7ff fff0 	bl	8007cbc <HAL_RCC_GetHCLKFreq>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	0a9b      	lsrs	r3, r3, #10
 8007ce4:	f003 0307 	and.w	r3, r3, #7
 8007ce8:	4903      	ldr	r1, [pc, #12]	; (8007cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cea:	5ccb      	ldrb	r3, [r1, r3]
 8007cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40023800 	.word	0x40023800
 8007cf8:	0800f69c 	.word	0x0800f69c

08007cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007d00:	f7ff ffdc 	bl	8007cbc <HAL_RCC_GetHCLKFreq>
 8007d04:	4602      	mov	r2, r0
 8007d06:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	0b5b      	lsrs	r3, r3, #13
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	4903      	ldr	r1, [pc, #12]	; (8007d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d12:	5ccb      	ldrb	r3, [r1, r3]
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	40023800 	.word	0x40023800
 8007d20:	0800f69c 	.word	0x0800f69c

08007d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e041      	b.n	8007dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d106      	bne.n	8007d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7fa ff6e 	bl	8002c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f000 fd2e 	bl	80087c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e041      	b.n	8007e58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f839 	bl	8007e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2202      	movs	r2, #2
 8007df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4610      	mov	r0, r2
 8007e02:	f000 fcdf 	bl	80087c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d109      	bne.n	8007e98 <HAL_TIM_PWM_Start+0x24>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	bf14      	ite	ne
 8007e90:	2301      	movne	r3, #1
 8007e92:	2300      	moveq	r3, #0
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	e022      	b.n	8007ede <HAL_TIM_PWM_Start+0x6a>
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d109      	bne.n	8007eb2 <HAL_TIM_PWM_Start+0x3e>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	bf14      	ite	ne
 8007eaa:	2301      	movne	r3, #1
 8007eac:	2300      	moveq	r3, #0
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	e015      	b.n	8007ede <HAL_TIM_PWM_Start+0x6a>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d109      	bne.n	8007ecc <HAL_TIM_PWM_Start+0x58>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	bf14      	ite	ne
 8007ec4:	2301      	movne	r3, #1
 8007ec6:	2300      	moveq	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	e008      	b.n	8007ede <HAL_TIM_PWM_Start+0x6a>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	bf14      	ite	ne
 8007ed8:	2301      	movne	r3, #1
 8007eda:	2300      	moveq	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e07c      	b.n	8007fe0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d104      	bne.n	8007ef6 <HAL_TIM_PWM_Start+0x82>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ef4:	e013      	b.n	8007f1e <HAL_TIM_PWM_Start+0xaa>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d104      	bne.n	8007f06 <HAL_TIM_PWM_Start+0x92>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2202      	movs	r2, #2
 8007f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f04:	e00b      	b.n	8007f1e <HAL_TIM_PWM_Start+0xaa>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b08      	cmp	r3, #8
 8007f0a:	d104      	bne.n	8007f16 <HAL_TIM_PWM_Start+0xa2>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f14:	e003      	b.n	8007f1e <HAL_TIM_PWM_Start+0xaa>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2201      	movs	r2, #1
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 ff42 	bl	8008db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a2d      	ldr	r2, [pc, #180]	; (8007fe8 <HAL_TIM_PWM_Start+0x174>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d004      	beq.n	8007f40 <HAL_TIM_PWM_Start+0xcc>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a2c      	ldr	r2, [pc, #176]	; (8007fec <HAL_TIM_PWM_Start+0x178>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d101      	bne.n	8007f44 <HAL_TIM_PWM_Start+0xd0>
 8007f40:	2301      	movs	r3, #1
 8007f42:	e000      	b.n	8007f46 <HAL_TIM_PWM_Start+0xd2>
 8007f44:	2300      	movs	r3, #0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d007      	beq.n	8007f5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a22      	ldr	r2, [pc, #136]	; (8007fe8 <HAL_TIM_PWM_Start+0x174>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d022      	beq.n	8007faa <HAL_TIM_PWM_Start+0x136>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6c:	d01d      	beq.n	8007faa <HAL_TIM_PWM_Start+0x136>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a1f      	ldr	r2, [pc, #124]	; (8007ff0 <HAL_TIM_PWM_Start+0x17c>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d018      	beq.n	8007faa <HAL_TIM_PWM_Start+0x136>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ff4 <HAL_TIM_PWM_Start+0x180>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d013      	beq.n	8007faa <HAL_TIM_PWM_Start+0x136>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1c      	ldr	r2, [pc, #112]	; (8007ff8 <HAL_TIM_PWM_Start+0x184>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d00e      	beq.n	8007faa <HAL_TIM_PWM_Start+0x136>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a16      	ldr	r2, [pc, #88]	; (8007fec <HAL_TIM_PWM_Start+0x178>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d009      	beq.n	8007faa <HAL_TIM_PWM_Start+0x136>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a18      	ldr	r2, [pc, #96]	; (8007ffc <HAL_TIM_PWM_Start+0x188>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d004      	beq.n	8007faa <HAL_TIM_PWM_Start+0x136>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a16      	ldr	r2, [pc, #88]	; (8008000 <HAL_TIM_PWM_Start+0x18c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d111      	bne.n	8007fce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f003 0307 	and.w	r3, r3, #7
 8007fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2b06      	cmp	r3, #6
 8007fba:	d010      	beq.n	8007fde <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fcc:	e007      	b.n	8007fde <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f042 0201 	orr.w	r2, r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	40010000 	.word	0x40010000
 8007fec:	40010400 	.word	0x40010400
 8007ff0:	40000400 	.word	0x40000400
 8007ff4:	40000800 	.word	0x40000800
 8007ff8:	40000c00 	.word	0x40000c00
 8007ffc:	40014000 	.word	0x40014000
 8008000:	40001800 	.word	0x40001800

08008004 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e097      	b.n	8008148 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b00      	cmp	r3, #0
 8008022:	d106      	bne.n	8008032 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7fa fdb5 	bl	8002b9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6812      	ldr	r2, [r2, #0]
 8008044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008048:	f023 0307 	bic.w	r3, r3, #7
 800804c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3304      	adds	r3, #4
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f000 fbb3 	bl	80087c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008086:	f023 0303 	bic.w	r3, r3, #3
 800808a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	021b      	lsls	r3, r3, #8
 8008096:	4313      	orrs	r3, r2
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80080a4:	f023 030c 	bic.w	r3, r3, #12
 80080a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	021b      	lsls	r3, r3, #8
 80080c0:	4313      	orrs	r3, r2
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	011a      	lsls	r2, r3, #4
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	031b      	lsls	r3, r3, #12
 80080d4:	4313      	orrs	r3, r2
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	4313      	orrs	r3, r2
 80080da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80080e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80080ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	011b      	lsls	r3, r3, #4
 80080f6:	4313      	orrs	r3, r2
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008160:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008168:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008170:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008178:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d110      	bne.n	80081a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d102      	bne.n	800818c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008186:	7b7b      	ldrb	r3, [r7, #13]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d001      	beq.n	8008190 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e069      	b.n	8008264 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081a0:	e031      	b.n	8008206 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d110      	bne.n	80081ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d102      	bne.n	80081b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80081ae:	7b3b      	ldrb	r3, [r7, #12]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d001      	beq.n	80081b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e055      	b.n	8008264 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081c8:	e01d      	b.n	8008206 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d108      	bne.n	80081e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d105      	bne.n	80081e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081d6:	7b7b      	ldrb	r3, [r7, #13]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d102      	bne.n	80081e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80081dc:	7b3b      	ldrb	r3, [r7, #12]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d001      	beq.n	80081e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e03e      	b.n	8008264 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2202      	movs	r2, #2
 80081ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2202      	movs	r2, #2
 80081f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2202      	movs	r2, #2
 80081fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2202      	movs	r2, #2
 8008202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <HAL_TIM_Encoder_Start+0xc4>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2b04      	cmp	r3, #4
 8008210:	d008      	beq.n	8008224 <HAL_TIM_Encoder_Start+0xd4>
 8008212:	e00f      	b.n	8008234 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2201      	movs	r2, #1
 800821a:	2100      	movs	r1, #0
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fdc7 	bl	8008db0 <TIM_CCxChannelCmd>
      break;
 8008222:	e016      	b.n	8008252 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2201      	movs	r2, #1
 800822a:	2104      	movs	r1, #4
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fdbf 	bl	8008db0 <TIM_CCxChannelCmd>
      break;
 8008232:	e00e      	b.n	8008252 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2201      	movs	r2, #1
 800823a:	2100      	movs	r1, #0
 800823c:	4618      	mov	r0, r3
 800823e:	f000 fdb7 	bl	8008db0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2201      	movs	r2, #1
 8008248:	2104      	movs	r1, #4
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fdb0 	bl	8008db0 <TIM_CCxChannelCmd>
      break;
 8008250:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f042 0201 	orr.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d020      	beq.n	80082d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01b      	beq.n	80082d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f06f 0202 	mvn.w	r2, #2
 80082a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa65 	bl	8008786 <HAL_TIM_IC_CaptureCallback>
 80082bc:	e005      	b.n	80082ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa57 	bl	8008772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fa68 	bl	800879a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d020      	beq.n	800831c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01b      	beq.n	800831c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f06f 0204 	mvn.w	r2, #4
 80082ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2202      	movs	r2, #2
 80082f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa3f 	bl	8008786 <HAL_TIM_IC_CaptureCallback>
 8008308:	e005      	b.n	8008316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa31 	bl	8008772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fa42 	bl	800879a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f003 0308 	and.w	r3, r3, #8
 8008322:	2b00      	cmp	r3, #0
 8008324:	d020      	beq.n	8008368 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f003 0308 	and.w	r3, r3, #8
 800832c:	2b00      	cmp	r3, #0
 800832e:	d01b      	beq.n	8008368 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f06f 0208 	mvn.w	r2, #8
 8008338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2204      	movs	r2, #4
 800833e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	69db      	ldr	r3, [r3, #28]
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fa19 	bl	8008786 <HAL_TIM_IC_CaptureCallback>
 8008354:	e005      	b.n	8008362 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fa0b 	bl	8008772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fa1c 	bl	800879a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f003 0310 	and.w	r3, r3, #16
 800836e:	2b00      	cmp	r3, #0
 8008370:	d020      	beq.n	80083b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f003 0310 	and.w	r3, r3, #16
 8008378:	2b00      	cmp	r3, #0
 800837a:	d01b      	beq.n	80083b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f06f 0210 	mvn.w	r2, #16
 8008384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2208      	movs	r2, #8
 800838a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f9f3 	bl	8008786 <HAL_TIM_IC_CaptureCallback>
 80083a0:	e005      	b.n	80083ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f9e5 	bl	8008772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f9f6 	bl	800879a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00c      	beq.n	80083d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d007      	beq.n	80083d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f06f 0201 	mvn.w	r2, #1
 80083d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f9c3 	bl	800875e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00c      	beq.n	80083fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d007      	beq.n	80083fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fd86 	bl	8008f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00c      	beq.n	8008420 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	d007      	beq.n	8008420 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9c7 	bl	80087ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f003 0320 	and.w	r3, r3, #32
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00c      	beq.n	8008444 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f003 0320 	and.w	r3, r3, #32
 8008430:	2b00      	cmp	r3, #0
 8008432:	d007      	beq.n	8008444 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f06f 0220 	mvn.w	r2, #32
 800843c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fd58 	bl	8008ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008444:	bf00      	nop
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008462:	2b01      	cmp	r3, #1
 8008464:	d101      	bne.n	800846a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008466:	2302      	movs	r3, #2
 8008468:	e0ae      	b.n	80085c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b0c      	cmp	r3, #12
 8008476:	f200 809f 	bhi.w	80085b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	080084b5 	.word	0x080084b5
 8008484:	080085b9 	.word	0x080085b9
 8008488:	080085b9 	.word	0x080085b9
 800848c:	080085b9 	.word	0x080085b9
 8008490:	080084f5 	.word	0x080084f5
 8008494:	080085b9 	.word	0x080085b9
 8008498:	080085b9 	.word	0x080085b9
 800849c:	080085b9 	.word	0x080085b9
 80084a0:	08008537 	.word	0x08008537
 80084a4:	080085b9 	.word	0x080085b9
 80084a8:	080085b9 	.word	0x080085b9
 80084ac:	080085b9 	.word	0x080085b9
 80084b0:	08008577 	.word	0x08008577
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fa2e 	bl	800891c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699a      	ldr	r2, [r3, #24]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0208 	orr.w	r2, r2, #8
 80084ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	699a      	ldr	r2, [r3, #24]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0204 	bic.w	r2, r2, #4
 80084de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6999      	ldr	r1, [r3, #24]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	619a      	str	r2, [r3, #24]
      break;
 80084f2:	e064      	b.n	80085be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68b9      	ldr	r1, [r7, #8]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fa7e 	bl	80089fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800850e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699a      	ldr	r2, [r3, #24]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800851e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6999      	ldr	r1, [r3, #24]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	021a      	lsls	r2, r3, #8
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	619a      	str	r2, [r3, #24]
      break;
 8008534:	e043      	b.n	80085be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68b9      	ldr	r1, [r7, #8]
 800853c:	4618      	mov	r0, r3
 800853e:	f000 fad3 	bl	8008ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69da      	ldr	r2, [r3, #28]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f042 0208 	orr.w	r2, r2, #8
 8008550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69da      	ldr	r2, [r3, #28]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0204 	bic.w	r2, r2, #4
 8008560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	69d9      	ldr	r1, [r3, #28]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	691a      	ldr	r2, [r3, #16]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	61da      	str	r2, [r3, #28]
      break;
 8008574:	e023      	b.n	80085be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68b9      	ldr	r1, [r7, #8]
 800857c:	4618      	mov	r0, r3
 800857e:	f000 fb27 	bl	8008bd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	69da      	ldr	r2, [r3, #28]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69da      	ldr	r2, [r3, #28]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	69d9      	ldr	r1, [r3, #28]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	021a      	lsls	r2, r3, #8
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	61da      	str	r2, [r3, #28]
      break;
 80085b6:	e002      	b.n	80085be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	75fb      	strb	r3, [r7, #23]
      break;
 80085bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d101      	bne.n	80085ec <HAL_TIM_ConfigClockSource+0x1c>
 80085e8:	2302      	movs	r3, #2
 80085ea:	e0b4      	b.n	8008756 <HAL_TIM_ConfigClockSource+0x186>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2202      	movs	r2, #2
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800860a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008624:	d03e      	beq.n	80086a4 <HAL_TIM_ConfigClockSource+0xd4>
 8008626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800862a:	f200 8087 	bhi.w	800873c <HAL_TIM_ConfigClockSource+0x16c>
 800862e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008632:	f000 8086 	beq.w	8008742 <HAL_TIM_ConfigClockSource+0x172>
 8008636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800863a:	d87f      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 800863c:	2b70      	cmp	r3, #112	; 0x70
 800863e:	d01a      	beq.n	8008676 <HAL_TIM_ConfigClockSource+0xa6>
 8008640:	2b70      	cmp	r3, #112	; 0x70
 8008642:	d87b      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 8008644:	2b60      	cmp	r3, #96	; 0x60
 8008646:	d050      	beq.n	80086ea <HAL_TIM_ConfigClockSource+0x11a>
 8008648:	2b60      	cmp	r3, #96	; 0x60
 800864a:	d877      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 800864c:	2b50      	cmp	r3, #80	; 0x50
 800864e:	d03c      	beq.n	80086ca <HAL_TIM_ConfigClockSource+0xfa>
 8008650:	2b50      	cmp	r3, #80	; 0x50
 8008652:	d873      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 8008654:	2b40      	cmp	r3, #64	; 0x40
 8008656:	d058      	beq.n	800870a <HAL_TIM_ConfigClockSource+0x13a>
 8008658:	2b40      	cmp	r3, #64	; 0x40
 800865a:	d86f      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 800865c:	2b30      	cmp	r3, #48	; 0x30
 800865e:	d064      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x15a>
 8008660:	2b30      	cmp	r3, #48	; 0x30
 8008662:	d86b      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 8008664:	2b20      	cmp	r3, #32
 8008666:	d060      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x15a>
 8008668:	2b20      	cmp	r3, #32
 800866a:	d867      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 800866c:	2b00      	cmp	r3, #0
 800866e:	d05c      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x15a>
 8008670:	2b10      	cmp	r3, #16
 8008672:	d05a      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x15a>
 8008674:	e062      	b.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008686:	f000 fb73 	bl	8008d70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008698:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	609a      	str	r2, [r3, #8]
      break;
 80086a2:	e04f      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086b4:	f000 fb5c 	bl	8008d70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086c6:	609a      	str	r2, [r3, #8]
      break;
 80086c8:	e03c      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086d6:	461a      	mov	r2, r3
 80086d8:	f000 fad0 	bl	8008c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2150      	movs	r1, #80	; 0x50
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 fb29 	bl	8008d3a <TIM_ITRx_SetConfig>
      break;
 80086e8:	e02c      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086f6:	461a      	mov	r2, r3
 80086f8:	f000 faef 	bl	8008cda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2160      	movs	r1, #96	; 0x60
 8008702:	4618      	mov	r0, r3
 8008704:	f000 fb19 	bl	8008d3a <TIM_ITRx_SetConfig>
      break;
 8008708:	e01c      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008716:	461a      	mov	r2, r3
 8008718:	f000 fab0 	bl	8008c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2140      	movs	r1, #64	; 0x40
 8008722:	4618      	mov	r0, r3
 8008724:	f000 fb09 	bl	8008d3a <TIM_ITRx_SetConfig>
      break;
 8008728:	e00c      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4619      	mov	r1, r3
 8008734:	4610      	mov	r0, r2
 8008736:	f000 fb00 	bl	8008d3a <TIM_ITRx_SetConfig>
      break;
 800873a:	e003      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	73fb      	strb	r3, [r7, #15]
      break;
 8008740:	e000      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008754:	7bfb      	ldrb	r3, [r7, #15]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087b6:	bf00      	nop
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a46      	ldr	r2, [pc, #280]	; (80088f0 <TIM_Base_SetConfig+0x12c>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d013      	beq.n	8008804 <TIM_Base_SetConfig+0x40>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e2:	d00f      	beq.n	8008804 <TIM_Base_SetConfig+0x40>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a43      	ldr	r2, [pc, #268]	; (80088f4 <TIM_Base_SetConfig+0x130>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d00b      	beq.n	8008804 <TIM_Base_SetConfig+0x40>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a42      	ldr	r2, [pc, #264]	; (80088f8 <TIM_Base_SetConfig+0x134>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d007      	beq.n	8008804 <TIM_Base_SetConfig+0x40>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a41      	ldr	r2, [pc, #260]	; (80088fc <TIM_Base_SetConfig+0x138>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d003      	beq.n	8008804 <TIM_Base_SetConfig+0x40>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a40      	ldr	r2, [pc, #256]	; (8008900 <TIM_Base_SetConfig+0x13c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d108      	bne.n	8008816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a35      	ldr	r2, [pc, #212]	; (80088f0 <TIM_Base_SetConfig+0x12c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d02b      	beq.n	8008876 <TIM_Base_SetConfig+0xb2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008824:	d027      	beq.n	8008876 <TIM_Base_SetConfig+0xb2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a32      	ldr	r2, [pc, #200]	; (80088f4 <TIM_Base_SetConfig+0x130>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d023      	beq.n	8008876 <TIM_Base_SetConfig+0xb2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a31      	ldr	r2, [pc, #196]	; (80088f8 <TIM_Base_SetConfig+0x134>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01f      	beq.n	8008876 <TIM_Base_SetConfig+0xb2>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a30      	ldr	r2, [pc, #192]	; (80088fc <TIM_Base_SetConfig+0x138>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d01b      	beq.n	8008876 <TIM_Base_SetConfig+0xb2>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a2f      	ldr	r2, [pc, #188]	; (8008900 <TIM_Base_SetConfig+0x13c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d017      	beq.n	8008876 <TIM_Base_SetConfig+0xb2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a2e      	ldr	r2, [pc, #184]	; (8008904 <TIM_Base_SetConfig+0x140>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d013      	beq.n	8008876 <TIM_Base_SetConfig+0xb2>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a2d      	ldr	r2, [pc, #180]	; (8008908 <TIM_Base_SetConfig+0x144>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d00f      	beq.n	8008876 <TIM_Base_SetConfig+0xb2>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a2c      	ldr	r2, [pc, #176]	; (800890c <TIM_Base_SetConfig+0x148>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00b      	beq.n	8008876 <TIM_Base_SetConfig+0xb2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a2b      	ldr	r2, [pc, #172]	; (8008910 <TIM_Base_SetConfig+0x14c>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d007      	beq.n	8008876 <TIM_Base_SetConfig+0xb2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a2a      	ldr	r2, [pc, #168]	; (8008914 <TIM_Base_SetConfig+0x150>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d003      	beq.n	8008876 <TIM_Base_SetConfig+0xb2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a29      	ldr	r2, [pc, #164]	; (8008918 <TIM_Base_SetConfig+0x154>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d108      	bne.n	8008888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800887c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4313      	orrs	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a10      	ldr	r2, [pc, #64]	; (80088f0 <TIM_Base_SetConfig+0x12c>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d003      	beq.n	80088bc <TIM_Base_SetConfig+0xf8>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a12      	ldr	r2, [pc, #72]	; (8008900 <TIM_Base_SetConfig+0x13c>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d103      	bne.n	80088c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	691a      	ldr	r2, [r3, #16]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d105      	bne.n	80088e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	f023 0201 	bic.w	r2, r3, #1
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	611a      	str	r2, [r3, #16]
  }
}
 80088e2:	bf00      	nop
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	40010000 	.word	0x40010000
 80088f4:	40000400 	.word	0x40000400
 80088f8:	40000800 	.word	0x40000800
 80088fc:	40000c00 	.word	0x40000c00
 8008900:	40010400 	.word	0x40010400
 8008904:	40014000 	.word	0x40014000
 8008908:	40014400 	.word	0x40014400
 800890c:	40014800 	.word	0x40014800
 8008910:	40001800 	.word	0x40001800
 8008914:	40001c00 	.word	0x40001c00
 8008918:	40002000 	.word	0x40002000

0800891c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	f023 0201 	bic.w	r2, r3, #1
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 0303 	bic.w	r3, r3, #3
 8008952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f023 0302 	bic.w	r3, r3, #2
 8008964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	4313      	orrs	r3, r2
 800896e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a20      	ldr	r2, [pc, #128]	; (80089f4 <TIM_OC1_SetConfig+0xd8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d003      	beq.n	8008980 <TIM_OC1_SetConfig+0x64>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a1f      	ldr	r2, [pc, #124]	; (80089f8 <TIM_OC1_SetConfig+0xdc>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d10c      	bne.n	800899a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f023 0308 	bic.w	r3, r3, #8
 8008986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	4313      	orrs	r3, r2
 8008990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f023 0304 	bic.w	r3, r3, #4
 8008998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a15      	ldr	r2, [pc, #84]	; (80089f4 <TIM_OC1_SetConfig+0xd8>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d003      	beq.n	80089aa <TIM_OC1_SetConfig+0x8e>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a14      	ldr	r2, [pc, #80]	; (80089f8 <TIM_OC1_SetConfig+0xdc>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d111      	bne.n	80089ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	621a      	str	r2, [r3, #32]
}
 80089e8:	bf00      	nop
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	40010000 	.word	0x40010000
 80089f8:	40010400 	.word	0x40010400

080089fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	f023 0210 	bic.w	r2, r3, #16
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	021b      	lsls	r3, r3, #8
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f023 0320 	bic.w	r3, r3, #32
 8008a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a22      	ldr	r2, [pc, #136]	; (8008ae0 <TIM_OC2_SetConfig+0xe4>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d003      	beq.n	8008a64 <TIM_OC2_SetConfig+0x68>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a21      	ldr	r2, [pc, #132]	; (8008ae4 <TIM_OC2_SetConfig+0xe8>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d10d      	bne.n	8008a80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	011b      	lsls	r3, r3, #4
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a17      	ldr	r2, [pc, #92]	; (8008ae0 <TIM_OC2_SetConfig+0xe4>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d003      	beq.n	8008a90 <TIM_OC2_SetConfig+0x94>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a16      	ldr	r2, [pc, #88]	; (8008ae4 <TIM_OC2_SetConfig+0xe8>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d113      	bne.n	8008ab8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	621a      	str	r2, [r3, #32]
}
 8008ad2:	bf00      	nop
 8008ad4:	371c      	adds	r7, #28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	40010000 	.word	0x40010000
 8008ae4:	40010400 	.word	0x40010400

08008ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f023 0303 	bic.w	r3, r3, #3
 8008b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	021b      	lsls	r3, r3, #8
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a21      	ldr	r2, [pc, #132]	; (8008bc8 <TIM_OC3_SetConfig+0xe0>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d003      	beq.n	8008b4e <TIM_OC3_SetConfig+0x66>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a20      	ldr	r2, [pc, #128]	; (8008bcc <TIM_OC3_SetConfig+0xe4>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d10d      	bne.n	8008b6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	021b      	lsls	r3, r3, #8
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a16      	ldr	r2, [pc, #88]	; (8008bc8 <TIM_OC3_SetConfig+0xe0>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d003      	beq.n	8008b7a <TIM_OC3_SetConfig+0x92>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a15      	ldr	r2, [pc, #84]	; (8008bcc <TIM_OC3_SetConfig+0xe4>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d113      	bne.n	8008ba2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	011b      	lsls	r3, r3, #4
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	011b      	lsls	r3, r3, #4
 8008b9c:	693a      	ldr	r2, [r7, #16]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	621a      	str	r2, [r3, #32]
}
 8008bbc:	bf00      	nop
 8008bbe:	371c      	adds	r7, #28
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr
 8008bc8:	40010000 	.word	0x40010000
 8008bcc:	40010400 	.word	0x40010400

08008bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	031b      	lsls	r3, r3, #12
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a12      	ldr	r2, [pc, #72]	; (8008c74 <TIM_OC4_SetConfig+0xa4>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d003      	beq.n	8008c38 <TIM_OC4_SetConfig+0x68>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a11      	ldr	r2, [pc, #68]	; (8008c78 <TIM_OC4_SetConfig+0xa8>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d109      	bne.n	8008c4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	019b      	lsls	r3, r3, #6
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	621a      	str	r2, [r3, #32]
}
 8008c66:	bf00      	nop
 8008c68:	371c      	adds	r7, #28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	40010000 	.word	0x40010000
 8008c78:	40010400 	.word	0x40010400

08008c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	f023 0201 	bic.w	r2, r3, #1
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f023 030a 	bic.w	r3, r3, #10
 8008cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	621a      	str	r2, [r3, #32]
}
 8008cce:	bf00      	nop
 8008cd0:	371c      	adds	r7, #28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b087      	sub	sp, #28
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	60f8      	str	r0, [r7, #12]
 8008ce2:	60b9      	str	r1, [r7, #8]
 8008ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6a1b      	ldr	r3, [r3, #32]
 8008cf0:	f023 0210 	bic.w	r2, r3, #16
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	031b      	lsls	r3, r3, #12
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	011b      	lsls	r3, r3, #4
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	621a      	str	r2, [r3, #32]
}
 8008d2e:	bf00      	nop
 8008d30:	371c      	adds	r7, #28
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	f043 0307 	orr.w	r3, r3, #7
 8008d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	609a      	str	r2, [r3, #8]
}
 8008d64:	bf00      	nop
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	021a      	lsls	r2, r3, #8
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	431a      	orrs	r2, r3
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	609a      	str	r2, [r3, #8]
}
 8008da4:	bf00      	nop
 8008da6:	371c      	adds	r7, #28
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f003 031f 	and.w	r3, r3, #31
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a1a      	ldr	r2, [r3, #32]
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	43db      	mvns	r3, r3
 8008dd2:	401a      	ands	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6a1a      	ldr	r2, [r3, #32]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f003 031f 	and.w	r3, r3, #31
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	fa01 f303 	lsl.w	r3, r1, r3
 8008de8:	431a      	orrs	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	621a      	str	r2, [r3, #32]
}
 8008dee:	bf00      	nop
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
	...

08008dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d101      	bne.n	8008e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e05a      	b.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a21      	ldr	r2, [pc, #132]	; (8008ed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d022      	beq.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e60:	d01d      	beq.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a1d      	ldr	r2, [pc, #116]	; (8008edc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d018      	beq.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a1b      	ldr	r2, [pc, #108]	; (8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d013      	beq.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d00e      	beq.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a18      	ldr	r2, [pc, #96]	; (8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d009      	beq.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a17      	ldr	r2, [pc, #92]	; (8008eec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d004      	beq.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a15      	ldr	r2, [pc, #84]	; (8008ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d10c      	bne.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	40010000 	.word	0x40010000
 8008edc:	40000400 	.word	0x40000400
 8008ee0:	40000800 	.word	0x40000800
 8008ee4:	40000c00 	.word	0x40000c00
 8008ee8:	40010400 	.word	0x40010400
 8008eec:	40014000 	.word	0x40014000
 8008ef0:	40001800 	.word	0x40001800

08008ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e042      	b.n	8008fb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d106      	bne.n	8008f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7f9 ff24 	bl	8002d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2224      	movs	r2, #36	; 0x24
 8008f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fdbd 	bl	8009ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	691a      	ldr	r2, [r3, #16]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	695a      	ldr	r2, [r3, #20]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08a      	sub	sp, #40	; 0x28
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b20      	cmp	r3, #32
 8008fda:	d175      	bne.n	80090c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <HAL_UART_Transmit+0x2c>
 8008fe2:	88fb      	ldrh	r3, [r7, #6]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e06e      	b.n	80090ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2221      	movs	r2, #33	; 0x21
 8008ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ffa:	f7fc f9a9 	bl	8005350 <HAL_GetTick>
 8008ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	88fa      	ldrh	r2, [r7, #6]
 800900a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009014:	d108      	bne.n	8009028 <HAL_UART_Transmit+0x6c>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d104      	bne.n	8009028 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800901e:	2300      	movs	r3, #0
 8009020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	61bb      	str	r3, [r7, #24]
 8009026:	e003      	b.n	8009030 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800902c:	2300      	movs	r3, #0
 800902e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009030:	e02e      	b.n	8009090 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2200      	movs	r2, #0
 800903a:	2180      	movs	r1, #128	; 0x80
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fb1f 	bl	8009680 <UART_WaitOnFlagUntilTimeout>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d005      	beq.n	8009054 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2220      	movs	r2, #32
 800904c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e03a      	b.n	80090ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10b      	bne.n	8009072 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009068:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	3302      	adds	r3, #2
 800906e:	61bb      	str	r3, [r7, #24]
 8009070:	e007      	b.n	8009082 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	781a      	ldrb	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	3301      	adds	r3, #1
 8009080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009086:	b29b      	uxth	r3, r3
 8009088:	3b01      	subs	r3, #1
 800908a:	b29a      	uxth	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009094:	b29b      	uxth	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1cb      	bne.n	8009032 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2200      	movs	r2, #0
 80090a2:	2140      	movs	r1, #64	; 0x40
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 faeb 	bl	8009680 <UART_WaitOnFlagUntilTimeout>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d005      	beq.n	80090bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2220      	movs	r2, #32
 80090b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e006      	b.n	80090ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2220      	movs	r2, #32
 80090c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e000      	b.n	80090ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80090c8:	2302      	movs	r3, #2
  }
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3720      	adds	r7, #32
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	4613      	mov	r3, r2
 80090de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d112      	bne.n	8009112 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <HAL_UART_Receive_IT+0x26>
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e00b      	b.n	8009114 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009102:	88fb      	ldrh	r3, [r7, #6]
 8009104:	461a      	mov	r2, r3
 8009106:	68b9      	ldr	r1, [r7, #8]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 fb12 	bl	8009732 <UART_Start_Receive_IT>
 800910e:	4603      	mov	r3, r0
 8009110:	e000      	b.n	8009114 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009112:	2302      	movs	r3, #2
  }
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b0ba      	sub	sp, #232	; 0xe8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009142:	2300      	movs	r3, #0
 8009144:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009148:	2300      	movs	r3, #0
 800914a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009152:	f003 030f 	and.w	r3, r3, #15
 8009156:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800915a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10f      	bne.n	8009182 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b00      	cmp	r3, #0
 800916c:	d009      	beq.n	8009182 <HAL_UART_IRQHandler+0x66>
 800916e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fbf2 	bl	8009964 <UART_Receive_IT>
      return;
 8009180:	e25b      	b.n	800963a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009182:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 80de 	beq.w	8009348 <HAL_UART_IRQHandler+0x22c>
 800918c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	2b00      	cmp	r3, #0
 8009196:	d106      	bne.n	80091a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800919c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 80d1 	beq.w	8009348 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00b      	beq.n	80091ca <HAL_UART_IRQHandler+0xae>
 80091b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d005      	beq.n	80091ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c2:	f043 0201 	orr.w	r2, r3, #1
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ce:	f003 0304 	and.w	r3, r3, #4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00b      	beq.n	80091ee <HAL_UART_IRQHandler+0xd2>
 80091d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d005      	beq.n	80091ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e6:	f043 0202 	orr.w	r2, r3, #2
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f2:	f003 0302 	and.w	r3, r3, #2
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <HAL_UART_IRQHandler+0xf6>
 80091fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d005      	beq.n	8009212 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920a:	f043 0204 	orr.w	r2, r3, #4
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009216:	f003 0308 	and.w	r3, r3, #8
 800921a:	2b00      	cmp	r3, #0
 800921c:	d011      	beq.n	8009242 <HAL_UART_IRQHandler+0x126>
 800921e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009222:	f003 0320 	and.w	r3, r3, #32
 8009226:	2b00      	cmp	r3, #0
 8009228:	d105      	bne.n	8009236 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800922a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d005      	beq.n	8009242 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923a:	f043 0208 	orr.w	r2, r3, #8
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 81f2 	beq.w	8009630 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800924c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b00      	cmp	r3, #0
 8009256:	d008      	beq.n	800926a <HAL_UART_IRQHandler+0x14e>
 8009258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800925c:	f003 0320 	and.w	r3, r3, #32
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fb7d 	bl	8009964 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009274:	2b40      	cmp	r3, #64	; 0x40
 8009276:	bf0c      	ite	eq
 8009278:	2301      	moveq	r3, #1
 800927a:	2300      	movne	r3, #0
 800927c:	b2db      	uxtb	r3, r3
 800927e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009286:	f003 0308 	and.w	r3, r3, #8
 800928a:	2b00      	cmp	r3, #0
 800928c:	d103      	bne.n	8009296 <HAL_UART_IRQHandler+0x17a>
 800928e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009292:	2b00      	cmp	r3, #0
 8009294:	d04f      	beq.n	8009336 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fa85 	bl	80097a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a6:	2b40      	cmp	r3, #64	; 0x40
 80092a8:	d141      	bne.n	800932e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3314      	adds	r3, #20
 80092b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80092c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3314      	adds	r3, #20
 80092d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80092d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80092da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80092e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80092ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1d9      	bne.n	80092aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d013      	beq.n	8009326 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009302:	4a7e      	ldr	r2, [pc, #504]	; (80094fc <HAL_UART_IRQHandler+0x3e0>)
 8009304:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800930a:	4618      	mov	r0, r3
 800930c:	f7fc f9d1 	bl	80056b2 <HAL_DMA_Abort_IT>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d016      	beq.n	8009344 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009324:	e00e      	b.n	8009344 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f994 	bl	8009654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800932c:	e00a      	b.n	8009344 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f990 	bl	8009654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009334:	e006      	b.n	8009344 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f98c 	bl	8009654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009342:	e175      	b.n	8009630 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009344:	bf00      	nop
    return;
 8009346:	e173      	b.n	8009630 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	2b01      	cmp	r3, #1
 800934e:	f040 814f 	bne.w	80095f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009356:	f003 0310 	and.w	r3, r3, #16
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 8148 	beq.w	80095f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009364:	f003 0310 	and.w	r3, r3, #16
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 8141 	beq.w	80095f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800936e:	2300      	movs	r3, #0
 8009370:	60bb      	str	r3, [r7, #8]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	60bb      	str	r3, [r7, #8]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	60bb      	str	r3, [r7, #8]
 8009382:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938e:	2b40      	cmp	r3, #64	; 0x40
 8009390:	f040 80b6 	bne.w	8009500 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 8145 	beq.w	8009634 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093b2:	429a      	cmp	r2, r3
 80093b4:	f080 813e 	bcs.w	8009634 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ca:	f000 8088 	beq.w	80094de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	330c      	adds	r3, #12
 80093d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80093e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	330c      	adds	r3, #12
 80093f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80093fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80093fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009402:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009406:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800940a:	e841 2300 	strex	r3, r2, [r1]
 800940e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1d9      	bne.n	80093ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3314      	adds	r3, #20
 8009420:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800942a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800942c:	f023 0301 	bic.w	r3, r3, #1
 8009430:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3314      	adds	r3, #20
 800943a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800943e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009442:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009444:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009446:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800944a:	e841 2300 	strex	r3, r2, [r1]
 800944e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1e1      	bne.n	800941a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3314      	adds	r3, #20
 800945c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800946c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3314      	adds	r3, #20
 8009476:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800947a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800947c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009480:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009482:	e841 2300 	strex	r3, r2, [r1]
 8009486:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1e3      	bne.n	8009456 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2220      	movs	r2, #32
 8009492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	330c      	adds	r3, #12
 80094a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a6:	e853 3f00 	ldrex	r3, [r3]
 80094aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094ae:	f023 0310 	bic.w	r3, r3, #16
 80094b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	330c      	adds	r3, #12
 80094bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80094c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80094c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094c8:	e841 2300 	strex	r3, r2, [r1]
 80094cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e3      	bne.n	800949c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fc f87a 	bl	80055d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2202      	movs	r2, #2
 80094e2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f8b7 	bl	8009668 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094fa:	e09b      	b.n	8009634 <HAL_UART_IRQHandler+0x518>
 80094fc:	0800986d 	.word	0x0800986d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009508:	b29b      	uxth	r3, r3
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009514:	b29b      	uxth	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 808e 	beq.w	8009638 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800951c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 8089 	beq.w	8009638 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	330c      	adds	r3, #12
 800952c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	e853 3f00 	ldrex	r3, [r3]
 8009534:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800953c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	330c      	adds	r3, #12
 8009546:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800954a:	647a      	str	r2, [r7, #68]	; 0x44
 800954c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009552:	e841 2300 	strex	r3, r2, [r1]
 8009556:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1e3      	bne.n	8009526 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3314      	adds	r3, #20
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	623b      	str	r3, [r7, #32]
   return(result);
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	f023 0301 	bic.w	r3, r3, #1
 8009574:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3314      	adds	r3, #20
 800957e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009582:	633a      	str	r2, [r7, #48]	; 0x30
 8009584:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e3      	bne.n	800955e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2220      	movs	r2, #32
 800959a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	330c      	adds	r3, #12
 80095aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 0310 	bic.w	r3, r3, #16
 80095ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	330c      	adds	r3, #12
 80095c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80095c8:	61fa      	str	r2, [r7, #28]
 80095ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095cc:	69b9      	ldr	r1, [r7, #24]
 80095ce:	69fa      	ldr	r2, [r7, #28]
 80095d0:	e841 2300 	strex	r3, r2, [r1]
 80095d4:	617b      	str	r3, [r7, #20]
   return(result);
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1e3      	bne.n	80095a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095e6:	4619      	mov	r1, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f83d 	bl	8009668 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80095ee:	e023      	b.n	8009638 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80095f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d009      	beq.n	8009610 <HAL_UART_IRQHandler+0x4f4>
 80095fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f943 	bl	8009894 <UART_Transmit_IT>
    return;
 800960e:	e014      	b.n	800963a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00e      	beq.n	800963a <HAL_UART_IRQHandler+0x51e>
 800961c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009624:	2b00      	cmp	r3, #0
 8009626:	d008      	beq.n	800963a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f983 	bl	8009934 <UART_EndTransmit_IT>
    return;
 800962e:	e004      	b.n	800963a <HAL_UART_IRQHandler+0x51e>
    return;
 8009630:	bf00      	nop
 8009632:	e002      	b.n	800963a <HAL_UART_IRQHandler+0x51e>
      return;
 8009634:	bf00      	nop
 8009636:	e000      	b.n	800963a <HAL_UART_IRQHandler+0x51e>
      return;
 8009638:	bf00      	nop
  }
}
 800963a:	37e8      	adds	r7, #232	; 0xe8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	603b      	str	r3, [r7, #0]
 800968c:	4613      	mov	r3, r2
 800968e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009690:	e03b      	b.n	800970a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009698:	d037      	beq.n	800970a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800969a:	f7fb fe59 	bl	8005350 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	6a3a      	ldr	r2, [r7, #32]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d302      	bcc.n	80096b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e03a      	b.n	800972a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	f003 0304 	and.w	r3, r3, #4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d023      	beq.n	800970a <UART_WaitOnFlagUntilTimeout+0x8a>
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2b80      	cmp	r3, #128	; 0x80
 80096c6:	d020      	beq.n	800970a <UART_WaitOnFlagUntilTimeout+0x8a>
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2b40      	cmp	r3, #64	; 0x40
 80096cc:	d01d      	beq.n	800970a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0308 	and.w	r3, r3, #8
 80096d8:	2b08      	cmp	r3, #8
 80096da:	d116      	bne.n	800970a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80096dc:	2300      	movs	r3, #0
 80096de:	617b      	str	r3, [r7, #20]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	617b      	str	r3, [r7, #20]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 f857 	bl	80097a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2208      	movs	r2, #8
 80096fc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e00f      	b.n	800972a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4013      	ands	r3, r2
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	429a      	cmp	r2, r3
 8009718:	bf0c      	ite	eq
 800971a:	2301      	moveq	r3, #1
 800971c:	2300      	movne	r3, #0
 800971e:	b2db      	uxtb	r3, r3
 8009720:	461a      	mov	r2, r3
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	429a      	cmp	r2, r3
 8009726:	d0b4      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009732:	b480      	push	{r7}
 8009734:	b085      	sub	sp, #20
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	4613      	mov	r3, r2
 800973e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	88fa      	ldrh	r2, [r7, #6]
 800974a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	88fa      	ldrh	r2, [r7, #6]
 8009750:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2222      	movs	r2, #34	; 0x22
 800975c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d007      	beq.n	8009778 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009776:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	695a      	ldr	r2, [r3, #20]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f042 0201 	orr.w	r2, r2, #1
 8009786:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f042 0220 	orr.w	r2, r2, #32
 8009796:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b095      	sub	sp, #84	; 0x54
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	330c      	adds	r3, #12
 80097b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	330c      	adds	r3, #12
 80097cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097ce:	643a      	str	r2, [r7, #64]	; 0x40
 80097d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097d6:	e841 2300 	strex	r3, r2, [r1]
 80097da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e5      	bne.n	80097ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3314      	adds	r3, #20
 80097e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	f023 0301 	bic.w	r3, r3, #1
 80097f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3314      	adds	r3, #20
 8009800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009802:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009804:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e5      	bne.n	80097e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981a:	2b01      	cmp	r3, #1
 800981c:	d119      	bne.n	8009852 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	330c      	adds	r3, #12
 8009824:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	e853 3f00 	ldrex	r3, [r3]
 800982c:	60bb      	str	r3, [r7, #8]
   return(result);
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f023 0310 	bic.w	r3, r3, #16
 8009834:	647b      	str	r3, [r7, #68]	; 0x44
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	330c      	adds	r3, #12
 800983c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800983e:	61ba      	str	r2, [r7, #24]
 8009840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009842:	6979      	ldr	r1, [r7, #20]
 8009844:	69ba      	ldr	r2, [r7, #24]
 8009846:	e841 2300 	strex	r3, r2, [r1]
 800984a:	613b      	str	r3, [r7, #16]
   return(result);
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1e5      	bne.n	800981e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2220      	movs	r2, #32
 8009856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009860:	bf00      	nop
 8009862:	3754      	adds	r7, #84	; 0x54
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009878:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f7ff fee4 	bl	8009654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800988c:	bf00      	nop
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b21      	cmp	r3, #33	; 0x21
 80098a6:	d13e      	bne.n	8009926 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b0:	d114      	bne.n	80098dc <UART_Transmit_IT+0x48>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d110      	bne.n	80098dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	461a      	mov	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	1c9a      	adds	r2, r3, #2
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	621a      	str	r2, [r3, #32]
 80098da:	e008      	b.n	80098ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	1c59      	adds	r1, r3, #1
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	6211      	str	r1, [r2, #32]
 80098e6:	781a      	ldrb	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	3b01      	subs	r3, #1
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	4619      	mov	r1, r3
 80098fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10f      	bne.n	8009922 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68da      	ldr	r2, [r3, #12]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009910:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68da      	ldr	r2, [r3, #12]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009920:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	e000      	b.n	8009928 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009926:	2302      	movs	r3, #2
  }
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68da      	ldr	r2, [r3, #12]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800994a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2220      	movs	r2, #32
 8009950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff fe73 	bl	8009640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b08c      	sub	sp, #48	; 0x30
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b22      	cmp	r3, #34	; 0x22
 8009976:	f040 80ae 	bne.w	8009ad6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009982:	d117      	bne.n	80099b4 <UART_Receive_IT+0x50>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d113      	bne.n	80099b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800998c:	2300      	movs	r3, #0
 800998e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009994:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	b29b      	uxth	r3, r3
 800999e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ac:	1c9a      	adds	r2, r3, #2
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	629a      	str	r2, [r3, #40]	; 0x28
 80099b2:	e026      	b.n	8009a02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099c6:	d007      	beq.n	80099d8 <UART_Receive_IT+0x74>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10a      	bne.n	80099e6 <UART_Receive_IT+0x82>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d106      	bne.n	80099e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e2:	701a      	strb	r2, [r3, #0]
 80099e4:	e008      	b.n	80099f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d15d      	bne.n	8009ad2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68da      	ldr	r2, [r3, #12]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f022 0220 	bic.w	r2, r2, #32
 8009a24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68da      	ldr	r2, [r3, #12]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	695a      	ldr	r2, [r3, #20]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0201 	bic.w	r2, r2, #1
 8009a44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d135      	bne.n	8009ac8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	330c      	adds	r3, #12
 8009a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	e853 3f00 	ldrex	r3, [r3]
 8009a70:	613b      	str	r3, [r7, #16]
   return(result);
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	f023 0310 	bic.w	r3, r3, #16
 8009a78:	627b      	str	r3, [r7, #36]	; 0x24
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	330c      	adds	r3, #12
 8009a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a82:	623a      	str	r2, [r7, #32]
 8009a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a86:	69f9      	ldr	r1, [r7, #28]
 8009a88:	6a3a      	ldr	r2, [r7, #32]
 8009a8a:	e841 2300 	strex	r3, r2, [r1]
 8009a8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1e5      	bne.n	8009a62 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0310 	and.w	r3, r3, #16
 8009aa0:	2b10      	cmp	r3, #16
 8009aa2:	d10a      	bne.n	8009aba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	60fb      	str	r3, [r7, #12]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff fdd1 	bl	8009668 <HAL_UARTEx_RxEventCallback>
 8009ac6:	e002      	b.n	8009ace <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7f8 fdad 	bl	8002628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e002      	b.n	8009ad8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	e000      	b.n	8009ad8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009ad6:	2302      	movs	r3, #2
  }
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3730      	adds	r7, #48	; 0x30
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ae4:	b0c0      	sub	sp, #256	; 0x100
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009afc:	68d9      	ldr	r1, [r3, #12]
 8009afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	ea40 0301 	orr.w	r3, r0, r1
 8009b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	431a      	orrs	r2, r3
 8009b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009b38:	f021 010c 	bic.w	r1, r1, #12
 8009b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b46:	430b      	orrs	r3, r1
 8009b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b5a:	6999      	ldr	r1, [r3, #24]
 8009b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	ea40 0301 	orr.w	r3, r0, r1
 8009b66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	4b8f      	ldr	r3, [pc, #572]	; (8009dac <UART_SetConfig+0x2cc>)
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d005      	beq.n	8009b80 <UART_SetConfig+0xa0>
 8009b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	4b8d      	ldr	r3, [pc, #564]	; (8009db0 <UART_SetConfig+0x2d0>)
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d104      	bne.n	8009b8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b80:	f7fe f8bc 	bl	8007cfc <HAL_RCC_GetPCLK2Freq>
 8009b84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009b88:	e003      	b.n	8009b92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b8a:	f7fe f8a3 	bl	8007cd4 <HAL_RCC_GetPCLK1Freq>
 8009b8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b9c:	f040 810c 	bne.w	8009db8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009baa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009bae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009bb2:	4622      	mov	r2, r4
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	1891      	adds	r1, r2, r2
 8009bb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8009bba:	415b      	adcs	r3, r3
 8009bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	eb12 0801 	adds.w	r8, r2, r1
 8009bc8:	4629      	mov	r1, r5
 8009bca:	eb43 0901 	adc.w	r9, r3, r1
 8009bce:	f04f 0200 	mov.w	r2, #0
 8009bd2:	f04f 0300 	mov.w	r3, #0
 8009bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009be2:	4690      	mov	r8, r2
 8009be4:	4699      	mov	r9, r3
 8009be6:	4623      	mov	r3, r4
 8009be8:	eb18 0303 	adds.w	r3, r8, r3
 8009bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009bf0:	462b      	mov	r3, r5
 8009bf2:	eb49 0303 	adc.w	r3, r9, r3
 8009bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009c0e:	460b      	mov	r3, r1
 8009c10:	18db      	adds	r3, r3, r3
 8009c12:	653b      	str	r3, [r7, #80]	; 0x50
 8009c14:	4613      	mov	r3, r2
 8009c16:	eb42 0303 	adc.w	r3, r2, r3
 8009c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8009c1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009c20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009c24:	f7f7 f936 	bl	8000e94 <__aeabi_uldivmod>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4b61      	ldr	r3, [pc, #388]	; (8009db4 <UART_SetConfig+0x2d4>)
 8009c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8009c32:	095b      	lsrs	r3, r3, #5
 8009c34:	011c      	lsls	r4, r3, #4
 8009c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009c44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009c48:	4642      	mov	r2, r8
 8009c4a:	464b      	mov	r3, r9
 8009c4c:	1891      	adds	r1, r2, r2
 8009c4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009c50:	415b      	adcs	r3, r3
 8009c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009c58:	4641      	mov	r1, r8
 8009c5a:	eb12 0a01 	adds.w	sl, r2, r1
 8009c5e:	4649      	mov	r1, r9
 8009c60:	eb43 0b01 	adc.w	fp, r3, r1
 8009c64:	f04f 0200 	mov.w	r2, #0
 8009c68:	f04f 0300 	mov.w	r3, #0
 8009c6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c78:	4692      	mov	sl, r2
 8009c7a:	469b      	mov	fp, r3
 8009c7c:	4643      	mov	r3, r8
 8009c7e:	eb1a 0303 	adds.w	r3, sl, r3
 8009c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c86:	464b      	mov	r3, r9
 8009c88:	eb4b 0303 	adc.w	r3, fp, r3
 8009c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009ca0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	18db      	adds	r3, r3, r3
 8009ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8009caa:	4613      	mov	r3, r2
 8009cac:	eb42 0303 	adc.w	r3, r2, r3
 8009cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8009cb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009cb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009cba:	f7f7 f8eb 	bl	8000e94 <__aeabi_uldivmod>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	4b3b      	ldr	r3, [pc, #236]	; (8009db4 <UART_SetConfig+0x2d4>)
 8009cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8009cca:	095b      	lsrs	r3, r3, #5
 8009ccc:	2264      	movs	r2, #100	; 0x64
 8009cce:	fb02 f303 	mul.w	r3, r2, r3
 8009cd2:	1acb      	subs	r3, r1, r3
 8009cd4:	00db      	lsls	r3, r3, #3
 8009cd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009cda:	4b36      	ldr	r3, [pc, #216]	; (8009db4 <UART_SetConfig+0x2d4>)
 8009cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8009ce0:	095b      	lsrs	r3, r3, #5
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ce8:	441c      	add	r4, r3
 8009cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009cf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009cf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009cfc:	4642      	mov	r2, r8
 8009cfe:	464b      	mov	r3, r9
 8009d00:	1891      	adds	r1, r2, r2
 8009d02:	63b9      	str	r1, [r7, #56]	; 0x38
 8009d04:	415b      	adcs	r3, r3
 8009d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d0c:	4641      	mov	r1, r8
 8009d0e:	1851      	adds	r1, r2, r1
 8009d10:	6339      	str	r1, [r7, #48]	; 0x30
 8009d12:	4649      	mov	r1, r9
 8009d14:	414b      	adcs	r3, r1
 8009d16:	637b      	str	r3, [r7, #52]	; 0x34
 8009d18:	f04f 0200 	mov.w	r2, #0
 8009d1c:	f04f 0300 	mov.w	r3, #0
 8009d20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009d24:	4659      	mov	r1, fp
 8009d26:	00cb      	lsls	r3, r1, #3
 8009d28:	4651      	mov	r1, sl
 8009d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d2e:	4651      	mov	r1, sl
 8009d30:	00ca      	lsls	r2, r1, #3
 8009d32:	4610      	mov	r0, r2
 8009d34:	4619      	mov	r1, r3
 8009d36:	4603      	mov	r3, r0
 8009d38:	4642      	mov	r2, r8
 8009d3a:	189b      	adds	r3, r3, r2
 8009d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d40:	464b      	mov	r3, r9
 8009d42:	460a      	mov	r2, r1
 8009d44:	eb42 0303 	adc.w	r3, r2, r3
 8009d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009d58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009d5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009d60:	460b      	mov	r3, r1
 8009d62:	18db      	adds	r3, r3, r3
 8009d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d66:	4613      	mov	r3, r2
 8009d68:	eb42 0303 	adc.w	r3, r2, r3
 8009d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009d76:	f7f7 f88d 	bl	8000e94 <__aeabi_uldivmod>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <UART_SetConfig+0x2d4>)
 8009d80:	fba3 1302 	umull	r1, r3, r3, r2
 8009d84:	095b      	lsrs	r3, r3, #5
 8009d86:	2164      	movs	r1, #100	; 0x64
 8009d88:	fb01 f303 	mul.w	r3, r1, r3
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	00db      	lsls	r3, r3, #3
 8009d90:	3332      	adds	r3, #50	; 0x32
 8009d92:	4a08      	ldr	r2, [pc, #32]	; (8009db4 <UART_SetConfig+0x2d4>)
 8009d94:	fba2 2303 	umull	r2, r3, r2, r3
 8009d98:	095b      	lsrs	r3, r3, #5
 8009d9a:	f003 0207 	and.w	r2, r3, #7
 8009d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4422      	add	r2, r4
 8009da6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009da8:	e106      	b.n	8009fb8 <UART_SetConfig+0x4d8>
 8009daa:	bf00      	nop
 8009dac:	40011000 	.word	0x40011000
 8009db0:	40011400 	.word	0x40011400
 8009db4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009dc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009dc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009dca:	4642      	mov	r2, r8
 8009dcc:	464b      	mov	r3, r9
 8009dce:	1891      	adds	r1, r2, r2
 8009dd0:	6239      	str	r1, [r7, #32]
 8009dd2:	415b      	adcs	r3, r3
 8009dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009dda:	4641      	mov	r1, r8
 8009ddc:	1854      	adds	r4, r2, r1
 8009dde:	4649      	mov	r1, r9
 8009de0:	eb43 0501 	adc.w	r5, r3, r1
 8009de4:	f04f 0200 	mov.w	r2, #0
 8009de8:	f04f 0300 	mov.w	r3, #0
 8009dec:	00eb      	lsls	r3, r5, #3
 8009dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009df2:	00e2      	lsls	r2, r4, #3
 8009df4:	4614      	mov	r4, r2
 8009df6:	461d      	mov	r5, r3
 8009df8:	4643      	mov	r3, r8
 8009dfa:	18e3      	adds	r3, r4, r3
 8009dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e00:	464b      	mov	r3, r9
 8009e02:	eb45 0303 	adc.w	r3, r5, r3
 8009e06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e1a:	f04f 0200 	mov.w	r2, #0
 8009e1e:	f04f 0300 	mov.w	r3, #0
 8009e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009e26:	4629      	mov	r1, r5
 8009e28:	008b      	lsls	r3, r1, #2
 8009e2a:	4621      	mov	r1, r4
 8009e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e30:	4621      	mov	r1, r4
 8009e32:	008a      	lsls	r2, r1, #2
 8009e34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009e38:	f7f7 f82c 	bl	8000e94 <__aeabi_uldivmod>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4b60      	ldr	r3, [pc, #384]	; (8009fc4 <UART_SetConfig+0x4e4>)
 8009e42:	fba3 2302 	umull	r2, r3, r3, r2
 8009e46:	095b      	lsrs	r3, r3, #5
 8009e48:	011c      	lsls	r4, r3, #4
 8009e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009e58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009e5c:	4642      	mov	r2, r8
 8009e5e:	464b      	mov	r3, r9
 8009e60:	1891      	adds	r1, r2, r2
 8009e62:	61b9      	str	r1, [r7, #24]
 8009e64:	415b      	adcs	r3, r3
 8009e66:	61fb      	str	r3, [r7, #28]
 8009e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e6c:	4641      	mov	r1, r8
 8009e6e:	1851      	adds	r1, r2, r1
 8009e70:	6139      	str	r1, [r7, #16]
 8009e72:	4649      	mov	r1, r9
 8009e74:	414b      	adcs	r3, r1
 8009e76:	617b      	str	r3, [r7, #20]
 8009e78:	f04f 0200 	mov.w	r2, #0
 8009e7c:	f04f 0300 	mov.w	r3, #0
 8009e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e84:	4659      	mov	r1, fp
 8009e86:	00cb      	lsls	r3, r1, #3
 8009e88:	4651      	mov	r1, sl
 8009e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e8e:	4651      	mov	r1, sl
 8009e90:	00ca      	lsls	r2, r1, #3
 8009e92:	4610      	mov	r0, r2
 8009e94:	4619      	mov	r1, r3
 8009e96:	4603      	mov	r3, r0
 8009e98:	4642      	mov	r2, r8
 8009e9a:	189b      	adds	r3, r3, r2
 8009e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ea0:	464b      	mov	r3, r9
 8009ea2:	460a      	mov	r2, r1
 8009ea4:	eb42 0303 	adc.w	r3, r2, r3
 8009ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009eb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009eb8:	f04f 0200 	mov.w	r2, #0
 8009ebc:	f04f 0300 	mov.w	r3, #0
 8009ec0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	008b      	lsls	r3, r1, #2
 8009ec8:	4641      	mov	r1, r8
 8009eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ece:	4641      	mov	r1, r8
 8009ed0:	008a      	lsls	r2, r1, #2
 8009ed2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009ed6:	f7f6 ffdd 	bl	8000e94 <__aeabi_uldivmod>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4611      	mov	r1, r2
 8009ee0:	4b38      	ldr	r3, [pc, #224]	; (8009fc4 <UART_SetConfig+0x4e4>)
 8009ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8009ee6:	095b      	lsrs	r3, r3, #5
 8009ee8:	2264      	movs	r2, #100	; 0x64
 8009eea:	fb02 f303 	mul.w	r3, r2, r3
 8009eee:	1acb      	subs	r3, r1, r3
 8009ef0:	011b      	lsls	r3, r3, #4
 8009ef2:	3332      	adds	r3, #50	; 0x32
 8009ef4:	4a33      	ldr	r2, [pc, #204]	; (8009fc4 <UART_SetConfig+0x4e4>)
 8009ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8009efa:	095b      	lsrs	r3, r3, #5
 8009efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f00:	441c      	add	r4, r3
 8009f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f06:	2200      	movs	r2, #0
 8009f08:	673b      	str	r3, [r7, #112]	; 0x70
 8009f0a:	677a      	str	r2, [r7, #116]	; 0x74
 8009f0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009f10:	4642      	mov	r2, r8
 8009f12:	464b      	mov	r3, r9
 8009f14:	1891      	adds	r1, r2, r2
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	415b      	adcs	r3, r3
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f20:	4641      	mov	r1, r8
 8009f22:	1851      	adds	r1, r2, r1
 8009f24:	6039      	str	r1, [r7, #0]
 8009f26:	4649      	mov	r1, r9
 8009f28:	414b      	adcs	r3, r1
 8009f2a:	607b      	str	r3, [r7, #4]
 8009f2c:	f04f 0200 	mov.w	r2, #0
 8009f30:	f04f 0300 	mov.w	r3, #0
 8009f34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f38:	4659      	mov	r1, fp
 8009f3a:	00cb      	lsls	r3, r1, #3
 8009f3c:	4651      	mov	r1, sl
 8009f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f42:	4651      	mov	r1, sl
 8009f44:	00ca      	lsls	r2, r1, #3
 8009f46:	4610      	mov	r0, r2
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	4642      	mov	r2, r8
 8009f4e:	189b      	adds	r3, r3, r2
 8009f50:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f52:	464b      	mov	r3, r9
 8009f54:	460a      	mov	r2, r1
 8009f56:	eb42 0303 	adc.w	r3, r2, r3
 8009f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	663b      	str	r3, [r7, #96]	; 0x60
 8009f66:	667a      	str	r2, [r7, #100]	; 0x64
 8009f68:	f04f 0200 	mov.w	r2, #0
 8009f6c:	f04f 0300 	mov.w	r3, #0
 8009f70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009f74:	4649      	mov	r1, r9
 8009f76:	008b      	lsls	r3, r1, #2
 8009f78:	4641      	mov	r1, r8
 8009f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f7e:	4641      	mov	r1, r8
 8009f80:	008a      	lsls	r2, r1, #2
 8009f82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009f86:	f7f6 ff85 	bl	8000e94 <__aeabi_uldivmod>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4b0d      	ldr	r3, [pc, #52]	; (8009fc4 <UART_SetConfig+0x4e4>)
 8009f90:	fba3 1302 	umull	r1, r3, r3, r2
 8009f94:	095b      	lsrs	r3, r3, #5
 8009f96:	2164      	movs	r1, #100	; 0x64
 8009f98:	fb01 f303 	mul.w	r3, r1, r3
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	011b      	lsls	r3, r3, #4
 8009fa0:	3332      	adds	r3, #50	; 0x32
 8009fa2:	4a08      	ldr	r2, [pc, #32]	; (8009fc4 <UART_SetConfig+0x4e4>)
 8009fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa8:	095b      	lsrs	r3, r3, #5
 8009faa:	f003 020f 	and.w	r2, r3, #15
 8009fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4422      	add	r2, r4
 8009fb6:	609a      	str	r2, [r3, #8]
}
 8009fb8:	bf00      	nop
 8009fba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fc4:	51eb851f 	.word	0x51eb851f

08009fc8 <asin>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	ed2d 8b02 	vpush	{d8}
 8009fce:	ec55 4b10 	vmov	r4, r5, d0
 8009fd2:	f000 fbd5 	bl	800a780 <__ieee754_asin>
 8009fd6:	4622      	mov	r2, r4
 8009fd8:	462b      	mov	r3, r5
 8009fda:	4620      	mov	r0, r4
 8009fdc:	4629      	mov	r1, r5
 8009fde:	eeb0 8a40 	vmov.f32	s16, s0
 8009fe2:	eef0 8a60 	vmov.f32	s17, s1
 8009fe6:	f7f6 fd99 	bl	8000b1c <__aeabi_dcmpun>
 8009fea:	b9a8      	cbnz	r0, 800a018 <asin+0x50>
 8009fec:	ec45 4b10 	vmov	d0, r4, r5
 8009ff0:	f000 f8ea 	bl	800a1c8 <fabs>
 8009ff4:	4b0c      	ldr	r3, [pc, #48]	; (800a028 <asin+0x60>)
 8009ff6:	ec51 0b10 	vmov	r0, r1, d0
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f7f6 fd84 	bl	8000b08 <__aeabi_dcmpgt>
 800a000:	b150      	cbz	r0, 800a018 <asin+0x50>
 800a002:	f003 fc77 	bl	800d8f4 <__errno>
 800a006:	ecbd 8b02 	vpop	{d8}
 800a00a:	2321      	movs	r3, #33	; 0x21
 800a00c:	6003      	str	r3, [r0, #0]
 800a00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a012:	4806      	ldr	r0, [pc, #24]	; (800a02c <asin+0x64>)
 800a014:	f000 b948 	b.w	800a2a8 <nan>
 800a018:	eeb0 0a48 	vmov.f32	s0, s16
 800a01c:	eef0 0a68 	vmov.f32	s1, s17
 800a020:	ecbd 8b02 	vpop	{d8}
 800a024:	bd38      	pop	{r3, r4, r5, pc}
 800a026:	bf00      	nop
 800a028:	3ff00000 	.word	0x3ff00000
 800a02c:	0800fcb8 	.word	0x0800fcb8

0800a030 <atan2>:
 800a030:	f000 bdba 	b.w	800aba8 <__ieee754_atan2>

0800a034 <fmod>:
 800a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a036:	ed2d 8b02 	vpush	{d8}
 800a03a:	ec57 6b10 	vmov	r6, r7, d0
 800a03e:	ec55 4b11 	vmov	r4, r5, d1
 800a042:	f000 fe77 	bl	800ad34 <__ieee754_fmod>
 800a046:	4622      	mov	r2, r4
 800a048:	462b      	mov	r3, r5
 800a04a:	4630      	mov	r0, r6
 800a04c:	4639      	mov	r1, r7
 800a04e:	eeb0 8a40 	vmov.f32	s16, s0
 800a052:	eef0 8a60 	vmov.f32	s17, s1
 800a056:	f7f6 fd61 	bl	8000b1c <__aeabi_dcmpun>
 800a05a:	b990      	cbnz	r0, 800a082 <fmod+0x4e>
 800a05c:	2200      	movs	r2, #0
 800a05e:	2300      	movs	r3, #0
 800a060:	4620      	mov	r0, r4
 800a062:	4629      	mov	r1, r5
 800a064:	f7f6 fd28 	bl	8000ab8 <__aeabi_dcmpeq>
 800a068:	b158      	cbz	r0, 800a082 <fmod+0x4e>
 800a06a:	f003 fc43 	bl	800d8f4 <__errno>
 800a06e:	2321      	movs	r3, #33	; 0x21
 800a070:	6003      	str	r3, [r0, #0]
 800a072:	2200      	movs	r2, #0
 800a074:	2300      	movs	r3, #0
 800a076:	4610      	mov	r0, r2
 800a078:	4619      	mov	r1, r3
 800a07a:	f7f6 fbdf 	bl	800083c <__aeabi_ddiv>
 800a07e:	ec41 0b18 	vmov	d8, r0, r1
 800a082:	eeb0 0a48 	vmov.f32	s0, s16
 800a086:	eef0 0a68 	vmov.f32	s1, s17
 800a08a:	ecbd 8b02 	vpop	{d8}
 800a08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a090 <pow>:
 800a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a092:	ed2d 8b02 	vpush	{d8}
 800a096:	eeb0 8a40 	vmov.f32	s16, s0
 800a09a:	eef0 8a60 	vmov.f32	s17, s1
 800a09e:	ec55 4b11 	vmov	r4, r5, d1
 800a0a2:	f000 ff55 	bl	800af50 <__ieee754_pow>
 800a0a6:	4622      	mov	r2, r4
 800a0a8:	462b      	mov	r3, r5
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	ec57 6b10 	vmov	r6, r7, d0
 800a0b2:	f7f6 fd33 	bl	8000b1c <__aeabi_dcmpun>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d13b      	bne.n	800a132 <pow+0xa2>
 800a0ba:	ec51 0b18 	vmov	r0, r1, d8
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	f7f6 fcf9 	bl	8000ab8 <__aeabi_dcmpeq>
 800a0c6:	b1b8      	cbz	r0, 800a0f8 <pow+0x68>
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	f7f6 fcf2 	bl	8000ab8 <__aeabi_dcmpeq>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d146      	bne.n	800a166 <pow+0xd6>
 800a0d8:	ec45 4b10 	vmov	d0, r4, r5
 800a0dc:	f000 f8d8 	bl	800a290 <finite>
 800a0e0:	b338      	cbz	r0, 800a132 <pow+0xa2>
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	f7f6 fcef 	bl	8000acc <__aeabi_dcmplt>
 800a0ee:	b300      	cbz	r0, 800a132 <pow+0xa2>
 800a0f0:	f003 fc00 	bl	800d8f4 <__errno>
 800a0f4:	2322      	movs	r3, #34	; 0x22
 800a0f6:	e01b      	b.n	800a130 <pow+0xa0>
 800a0f8:	ec47 6b10 	vmov	d0, r6, r7
 800a0fc:	f000 f8c8 	bl	800a290 <finite>
 800a100:	b9e0      	cbnz	r0, 800a13c <pow+0xac>
 800a102:	eeb0 0a48 	vmov.f32	s0, s16
 800a106:	eef0 0a68 	vmov.f32	s1, s17
 800a10a:	f000 f8c1 	bl	800a290 <finite>
 800a10e:	b1a8      	cbz	r0, 800a13c <pow+0xac>
 800a110:	ec45 4b10 	vmov	d0, r4, r5
 800a114:	f000 f8bc 	bl	800a290 <finite>
 800a118:	b180      	cbz	r0, 800a13c <pow+0xac>
 800a11a:	4632      	mov	r2, r6
 800a11c:	463b      	mov	r3, r7
 800a11e:	4630      	mov	r0, r6
 800a120:	4639      	mov	r1, r7
 800a122:	f7f6 fcfb 	bl	8000b1c <__aeabi_dcmpun>
 800a126:	2800      	cmp	r0, #0
 800a128:	d0e2      	beq.n	800a0f0 <pow+0x60>
 800a12a:	f003 fbe3 	bl	800d8f4 <__errno>
 800a12e:	2321      	movs	r3, #33	; 0x21
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	ecbd 8b02 	vpop	{d8}
 800a136:	ec47 6b10 	vmov	d0, r6, r7
 800a13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a13c:	2200      	movs	r2, #0
 800a13e:	2300      	movs	r3, #0
 800a140:	4630      	mov	r0, r6
 800a142:	4639      	mov	r1, r7
 800a144:	f7f6 fcb8 	bl	8000ab8 <__aeabi_dcmpeq>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d0f2      	beq.n	800a132 <pow+0xa2>
 800a14c:	eeb0 0a48 	vmov.f32	s0, s16
 800a150:	eef0 0a68 	vmov.f32	s1, s17
 800a154:	f000 f89c 	bl	800a290 <finite>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d0ea      	beq.n	800a132 <pow+0xa2>
 800a15c:	ec45 4b10 	vmov	d0, r4, r5
 800a160:	f000 f896 	bl	800a290 <finite>
 800a164:	e7c3      	b.n	800a0ee <pow+0x5e>
 800a166:	4f01      	ldr	r7, [pc, #4]	; (800a16c <pow+0xdc>)
 800a168:	2600      	movs	r6, #0
 800a16a:	e7e2      	b.n	800a132 <pow+0xa2>
 800a16c:	3ff00000 	.word	0x3ff00000

0800a170 <sqrt>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	ed2d 8b02 	vpush	{d8}
 800a176:	ec55 4b10 	vmov	r4, r5, d0
 800a17a:	f000 f89d 	bl	800a2b8 <__ieee754_sqrt>
 800a17e:	4622      	mov	r2, r4
 800a180:	462b      	mov	r3, r5
 800a182:	4620      	mov	r0, r4
 800a184:	4629      	mov	r1, r5
 800a186:	eeb0 8a40 	vmov.f32	s16, s0
 800a18a:	eef0 8a60 	vmov.f32	s17, s1
 800a18e:	f7f6 fcc5 	bl	8000b1c <__aeabi_dcmpun>
 800a192:	b990      	cbnz	r0, 800a1ba <sqrt+0x4a>
 800a194:	2200      	movs	r2, #0
 800a196:	2300      	movs	r3, #0
 800a198:	4620      	mov	r0, r4
 800a19a:	4629      	mov	r1, r5
 800a19c:	f7f6 fc96 	bl	8000acc <__aeabi_dcmplt>
 800a1a0:	b158      	cbz	r0, 800a1ba <sqrt+0x4a>
 800a1a2:	f003 fba7 	bl	800d8f4 <__errno>
 800a1a6:	2321      	movs	r3, #33	; 0x21
 800a1a8:	6003      	str	r3, [r0, #0]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	f7f6 fb43 	bl	800083c <__aeabi_ddiv>
 800a1b6:	ec41 0b18 	vmov	d8, r0, r1
 800a1ba:	eeb0 0a48 	vmov.f32	s0, s16
 800a1be:	eef0 0a68 	vmov.f32	s1, s17
 800a1c2:	ecbd 8b02 	vpop	{d8}
 800a1c6:	bd38      	pop	{r3, r4, r5, pc}

0800a1c8 <fabs>:
 800a1c8:	ec51 0b10 	vmov	r0, r1, d0
 800a1cc:	ee10 2a10 	vmov	r2, s0
 800a1d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a1d4:	ec43 2b10 	vmov	d0, r2, r3
 800a1d8:	4770      	bx	lr
 800a1da:	0000      	movs	r0, r0
 800a1dc:	0000      	movs	r0, r0
	...

0800a1e0 <sin>:
 800a1e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1e2:	ec53 2b10 	vmov	r2, r3, d0
 800a1e6:	4828      	ldr	r0, [pc, #160]	; (800a288 <sin+0xa8>)
 800a1e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a1ec:	4281      	cmp	r1, r0
 800a1ee:	dc07      	bgt.n	800a200 <sin+0x20>
 800a1f0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a280 <sin+0xa0>
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	b005      	add	sp, #20
 800a1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1fc:	f000 ba00 	b.w	800a600 <__kernel_sin>
 800a200:	4822      	ldr	r0, [pc, #136]	; (800a28c <sin+0xac>)
 800a202:	4281      	cmp	r1, r0
 800a204:	dd09      	ble.n	800a21a <sin+0x3a>
 800a206:	ee10 0a10 	vmov	r0, s0
 800a20a:	4619      	mov	r1, r3
 800a20c:	f7f6 f834 	bl	8000278 <__aeabi_dsub>
 800a210:	ec41 0b10 	vmov	d0, r0, r1
 800a214:	b005      	add	sp, #20
 800a216:	f85d fb04 	ldr.w	pc, [sp], #4
 800a21a:	4668      	mov	r0, sp
 800a21c:	f001 fbc4 	bl	800b9a8 <__ieee754_rem_pio2>
 800a220:	f000 0003 	and.w	r0, r0, #3
 800a224:	2801      	cmp	r0, #1
 800a226:	d00c      	beq.n	800a242 <sin+0x62>
 800a228:	2802      	cmp	r0, #2
 800a22a:	d011      	beq.n	800a250 <sin+0x70>
 800a22c:	b9f0      	cbnz	r0, 800a26c <sin+0x8c>
 800a22e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a232:	ed9d 0b00 	vldr	d0, [sp]
 800a236:	2001      	movs	r0, #1
 800a238:	f000 f9e2 	bl	800a600 <__kernel_sin>
 800a23c:	ec51 0b10 	vmov	r0, r1, d0
 800a240:	e7e6      	b.n	800a210 <sin+0x30>
 800a242:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a246:	ed9d 0b00 	vldr	d0, [sp]
 800a24a:	f000 f911 	bl	800a470 <__kernel_cos>
 800a24e:	e7f5      	b.n	800a23c <sin+0x5c>
 800a250:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a254:	ed9d 0b00 	vldr	d0, [sp]
 800a258:	2001      	movs	r0, #1
 800a25a:	f000 f9d1 	bl	800a600 <__kernel_sin>
 800a25e:	ec53 2b10 	vmov	r2, r3, d0
 800a262:	ee10 0a10 	vmov	r0, s0
 800a266:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a26a:	e7d1      	b.n	800a210 <sin+0x30>
 800a26c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a270:	ed9d 0b00 	vldr	d0, [sp]
 800a274:	f000 f8fc 	bl	800a470 <__kernel_cos>
 800a278:	e7f1      	b.n	800a25e <sin+0x7e>
 800a27a:	bf00      	nop
 800a27c:	f3af 8000 	nop.w
	...
 800a288:	3fe921fb 	.word	0x3fe921fb
 800a28c:	7fefffff 	.word	0x7fefffff

0800a290 <finite>:
 800a290:	b082      	sub	sp, #8
 800a292:	ed8d 0b00 	vstr	d0, [sp]
 800a296:	9801      	ldr	r0, [sp, #4]
 800a298:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a29c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a2a0:	0fc0      	lsrs	r0, r0, #31
 800a2a2:	b002      	add	sp, #8
 800a2a4:	4770      	bx	lr
	...

0800a2a8 <nan>:
 800a2a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a2b0 <nan+0x8>
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	00000000 	.word	0x00000000
 800a2b4:	7ff80000 	.word	0x7ff80000

0800a2b8 <__ieee754_sqrt>:
 800a2b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	ec55 4b10 	vmov	r4, r5, d0
 800a2c0:	4e67      	ldr	r6, [pc, #412]	; (800a460 <__ieee754_sqrt+0x1a8>)
 800a2c2:	43ae      	bics	r6, r5
 800a2c4:	ee10 0a10 	vmov	r0, s0
 800a2c8:	ee10 2a10 	vmov	r2, s0
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	462b      	mov	r3, r5
 800a2d0:	d10d      	bne.n	800a2ee <__ieee754_sqrt+0x36>
 800a2d2:	f7f6 f989 	bl	80005e8 <__aeabi_dmul>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4620      	mov	r0, r4
 800a2dc:	4629      	mov	r1, r5
 800a2de:	f7f5 ffcd 	bl	800027c <__adddf3>
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	460d      	mov	r5, r1
 800a2e6:	ec45 4b10 	vmov	d0, r4, r5
 800a2ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ee:	2d00      	cmp	r5, #0
 800a2f0:	dc0b      	bgt.n	800a30a <__ieee754_sqrt+0x52>
 800a2f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a2f6:	4326      	orrs	r6, r4
 800a2f8:	d0f5      	beq.n	800a2e6 <__ieee754_sqrt+0x2e>
 800a2fa:	b135      	cbz	r5, 800a30a <__ieee754_sqrt+0x52>
 800a2fc:	f7f5 ffbc 	bl	8000278 <__aeabi_dsub>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	f7f6 fa9a 	bl	800083c <__aeabi_ddiv>
 800a308:	e7eb      	b.n	800a2e2 <__ieee754_sqrt+0x2a>
 800a30a:	1509      	asrs	r1, r1, #20
 800a30c:	f000 808d 	beq.w	800a42a <__ieee754_sqrt+0x172>
 800a310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a314:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a31c:	07c9      	lsls	r1, r1, #31
 800a31e:	bf5c      	itt	pl
 800a320:	005b      	lslpl	r3, r3, #1
 800a322:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a326:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a32a:	bf58      	it	pl
 800a32c:	0052      	lslpl	r2, r2, #1
 800a32e:	2500      	movs	r5, #0
 800a330:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a334:	1076      	asrs	r6, r6, #1
 800a336:	0052      	lsls	r2, r2, #1
 800a338:	f04f 0e16 	mov.w	lr, #22
 800a33c:	46ac      	mov	ip, r5
 800a33e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a342:	eb0c 0001 	add.w	r0, ip, r1
 800a346:	4298      	cmp	r0, r3
 800a348:	bfde      	ittt	le
 800a34a:	1a1b      	suble	r3, r3, r0
 800a34c:	eb00 0c01 	addle.w	ip, r0, r1
 800a350:	186d      	addle	r5, r5, r1
 800a352:	005b      	lsls	r3, r3, #1
 800a354:	f1be 0e01 	subs.w	lr, lr, #1
 800a358:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a35c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a360:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a364:	d1ed      	bne.n	800a342 <__ieee754_sqrt+0x8a>
 800a366:	4674      	mov	r4, lr
 800a368:	2720      	movs	r7, #32
 800a36a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a36e:	4563      	cmp	r3, ip
 800a370:	eb01 000e 	add.w	r0, r1, lr
 800a374:	dc02      	bgt.n	800a37c <__ieee754_sqrt+0xc4>
 800a376:	d113      	bne.n	800a3a0 <__ieee754_sqrt+0xe8>
 800a378:	4290      	cmp	r0, r2
 800a37a:	d811      	bhi.n	800a3a0 <__ieee754_sqrt+0xe8>
 800a37c:	2800      	cmp	r0, #0
 800a37e:	eb00 0e01 	add.w	lr, r0, r1
 800a382:	da57      	bge.n	800a434 <__ieee754_sqrt+0x17c>
 800a384:	f1be 0f00 	cmp.w	lr, #0
 800a388:	db54      	blt.n	800a434 <__ieee754_sqrt+0x17c>
 800a38a:	f10c 0801 	add.w	r8, ip, #1
 800a38e:	eba3 030c 	sub.w	r3, r3, ip
 800a392:	4290      	cmp	r0, r2
 800a394:	bf88      	it	hi
 800a396:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a39a:	1a12      	subs	r2, r2, r0
 800a39c:	440c      	add	r4, r1
 800a39e:	46c4      	mov	ip, r8
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	3f01      	subs	r7, #1
 800a3a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a3a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a3ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a3b0:	d1dd      	bne.n	800a36e <__ieee754_sqrt+0xb6>
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	d01b      	beq.n	800a3ee <__ieee754_sqrt+0x136>
 800a3b6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a464 <__ieee754_sqrt+0x1ac>
 800a3ba:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a468 <__ieee754_sqrt+0x1b0>
 800a3be:	e9da 0100 	ldrd	r0, r1, [sl]
 800a3c2:	e9db 2300 	ldrd	r2, r3, [fp]
 800a3c6:	f7f5 ff57 	bl	8000278 <__aeabi_dsub>
 800a3ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4640      	mov	r0, r8
 800a3d4:	4649      	mov	r1, r9
 800a3d6:	f7f6 fb83 	bl	8000ae0 <__aeabi_dcmple>
 800a3da:	b140      	cbz	r0, 800a3ee <__ieee754_sqrt+0x136>
 800a3dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a3e0:	e9da 0100 	ldrd	r0, r1, [sl]
 800a3e4:	e9db 2300 	ldrd	r2, r3, [fp]
 800a3e8:	d126      	bne.n	800a438 <__ieee754_sqrt+0x180>
 800a3ea:	3501      	adds	r5, #1
 800a3ec:	463c      	mov	r4, r7
 800a3ee:	106a      	asrs	r2, r5, #1
 800a3f0:	0863      	lsrs	r3, r4, #1
 800a3f2:	07e9      	lsls	r1, r5, #31
 800a3f4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a3f8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a3fc:	bf48      	it	mi
 800a3fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a402:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a406:	461c      	mov	r4, r3
 800a408:	e76d      	b.n	800a2e6 <__ieee754_sqrt+0x2e>
 800a40a:	0ad3      	lsrs	r3, r2, #11
 800a40c:	3815      	subs	r0, #21
 800a40e:	0552      	lsls	r2, r2, #21
 800a410:	2b00      	cmp	r3, #0
 800a412:	d0fa      	beq.n	800a40a <__ieee754_sqrt+0x152>
 800a414:	02dc      	lsls	r4, r3, #11
 800a416:	d50a      	bpl.n	800a42e <__ieee754_sqrt+0x176>
 800a418:	f1c1 0420 	rsb	r4, r1, #32
 800a41c:	fa22 f404 	lsr.w	r4, r2, r4
 800a420:	1e4d      	subs	r5, r1, #1
 800a422:	408a      	lsls	r2, r1
 800a424:	4323      	orrs	r3, r4
 800a426:	1b41      	subs	r1, r0, r5
 800a428:	e772      	b.n	800a310 <__ieee754_sqrt+0x58>
 800a42a:	4608      	mov	r0, r1
 800a42c:	e7f0      	b.n	800a410 <__ieee754_sqrt+0x158>
 800a42e:	005b      	lsls	r3, r3, #1
 800a430:	3101      	adds	r1, #1
 800a432:	e7ef      	b.n	800a414 <__ieee754_sqrt+0x15c>
 800a434:	46e0      	mov	r8, ip
 800a436:	e7aa      	b.n	800a38e <__ieee754_sqrt+0xd6>
 800a438:	f7f5 ff20 	bl	800027c <__adddf3>
 800a43c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4640      	mov	r0, r8
 800a446:	4649      	mov	r1, r9
 800a448:	f7f6 fb40 	bl	8000acc <__aeabi_dcmplt>
 800a44c:	b120      	cbz	r0, 800a458 <__ieee754_sqrt+0x1a0>
 800a44e:	1ca0      	adds	r0, r4, #2
 800a450:	bf08      	it	eq
 800a452:	3501      	addeq	r5, #1
 800a454:	3402      	adds	r4, #2
 800a456:	e7ca      	b.n	800a3ee <__ieee754_sqrt+0x136>
 800a458:	3401      	adds	r4, #1
 800a45a:	f024 0401 	bic.w	r4, r4, #1
 800a45e:	e7c6      	b.n	800a3ee <__ieee754_sqrt+0x136>
 800a460:	7ff00000 	.word	0x7ff00000
 800a464:	20000010 	.word	0x20000010
 800a468:	20000018 	.word	0x20000018
 800a46c:	00000000 	.word	0x00000000

0800a470 <__kernel_cos>:
 800a470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	ec57 6b10 	vmov	r6, r7, d0
 800a478:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a47c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a480:	ed8d 1b00 	vstr	d1, [sp]
 800a484:	da07      	bge.n	800a496 <__kernel_cos+0x26>
 800a486:	ee10 0a10 	vmov	r0, s0
 800a48a:	4639      	mov	r1, r7
 800a48c:	f7f6 fb5c 	bl	8000b48 <__aeabi_d2iz>
 800a490:	2800      	cmp	r0, #0
 800a492:	f000 8088 	beq.w	800a5a6 <__kernel_cos+0x136>
 800a496:	4632      	mov	r2, r6
 800a498:	463b      	mov	r3, r7
 800a49a:	4630      	mov	r0, r6
 800a49c:	4639      	mov	r1, r7
 800a49e:	f7f6 f8a3 	bl	80005e8 <__aeabi_dmul>
 800a4a2:	4b51      	ldr	r3, [pc, #324]	; (800a5e8 <__kernel_cos+0x178>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	460d      	mov	r5, r1
 800a4aa:	f7f6 f89d 	bl	80005e8 <__aeabi_dmul>
 800a4ae:	a340      	add	r3, pc, #256	; (adr r3, 800a5b0 <__kernel_cos+0x140>)
 800a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b4:	4682      	mov	sl, r0
 800a4b6:	468b      	mov	fp, r1
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	f7f6 f894 	bl	80005e8 <__aeabi_dmul>
 800a4c0:	a33d      	add	r3, pc, #244	; (adr r3, 800a5b8 <__kernel_cos+0x148>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	f7f5 fed9 	bl	800027c <__adddf3>
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	462b      	mov	r3, r5
 800a4ce:	f7f6 f88b 	bl	80005e8 <__aeabi_dmul>
 800a4d2:	a33b      	add	r3, pc, #236	; (adr r3, 800a5c0 <__kernel_cos+0x150>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f7f5 fece 	bl	8000278 <__aeabi_dsub>
 800a4dc:	4622      	mov	r2, r4
 800a4de:	462b      	mov	r3, r5
 800a4e0:	f7f6 f882 	bl	80005e8 <__aeabi_dmul>
 800a4e4:	a338      	add	r3, pc, #224	; (adr r3, 800a5c8 <__kernel_cos+0x158>)
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	f7f5 fec7 	bl	800027c <__adddf3>
 800a4ee:	4622      	mov	r2, r4
 800a4f0:	462b      	mov	r3, r5
 800a4f2:	f7f6 f879 	bl	80005e8 <__aeabi_dmul>
 800a4f6:	a336      	add	r3, pc, #216	; (adr r3, 800a5d0 <__kernel_cos+0x160>)
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	f7f5 febc 	bl	8000278 <__aeabi_dsub>
 800a500:	4622      	mov	r2, r4
 800a502:	462b      	mov	r3, r5
 800a504:	f7f6 f870 	bl	80005e8 <__aeabi_dmul>
 800a508:	a333      	add	r3, pc, #204	; (adr r3, 800a5d8 <__kernel_cos+0x168>)
 800a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50e:	f7f5 feb5 	bl	800027c <__adddf3>
 800a512:	4622      	mov	r2, r4
 800a514:	462b      	mov	r3, r5
 800a516:	f7f6 f867 	bl	80005e8 <__aeabi_dmul>
 800a51a:	4622      	mov	r2, r4
 800a51c:	462b      	mov	r3, r5
 800a51e:	f7f6 f863 	bl	80005e8 <__aeabi_dmul>
 800a522:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a526:	4604      	mov	r4, r0
 800a528:	460d      	mov	r5, r1
 800a52a:	4630      	mov	r0, r6
 800a52c:	4639      	mov	r1, r7
 800a52e:	f7f6 f85b 	bl	80005e8 <__aeabi_dmul>
 800a532:	460b      	mov	r3, r1
 800a534:	4602      	mov	r2, r0
 800a536:	4629      	mov	r1, r5
 800a538:	4620      	mov	r0, r4
 800a53a:	f7f5 fe9d 	bl	8000278 <__aeabi_dsub>
 800a53e:	4b2b      	ldr	r3, [pc, #172]	; (800a5ec <__kernel_cos+0x17c>)
 800a540:	4598      	cmp	r8, r3
 800a542:	4606      	mov	r6, r0
 800a544:	460f      	mov	r7, r1
 800a546:	dc10      	bgt.n	800a56a <__kernel_cos+0xfa>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4650      	mov	r0, sl
 800a54e:	4659      	mov	r1, fp
 800a550:	f7f5 fe92 	bl	8000278 <__aeabi_dsub>
 800a554:	460b      	mov	r3, r1
 800a556:	4926      	ldr	r1, [pc, #152]	; (800a5f0 <__kernel_cos+0x180>)
 800a558:	4602      	mov	r2, r0
 800a55a:	2000      	movs	r0, #0
 800a55c:	f7f5 fe8c 	bl	8000278 <__aeabi_dsub>
 800a560:	ec41 0b10 	vmov	d0, r0, r1
 800a564:	b003      	add	sp, #12
 800a566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56a:	4b22      	ldr	r3, [pc, #136]	; (800a5f4 <__kernel_cos+0x184>)
 800a56c:	4920      	ldr	r1, [pc, #128]	; (800a5f0 <__kernel_cos+0x180>)
 800a56e:	4598      	cmp	r8, r3
 800a570:	bfcc      	ite	gt
 800a572:	4d21      	ldrgt	r5, [pc, #132]	; (800a5f8 <__kernel_cos+0x188>)
 800a574:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a578:	2400      	movs	r4, #0
 800a57a:	4622      	mov	r2, r4
 800a57c:	462b      	mov	r3, r5
 800a57e:	2000      	movs	r0, #0
 800a580:	f7f5 fe7a 	bl	8000278 <__aeabi_dsub>
 800a584:	4622      	mov	r2, r4
 800a586:	4680      	mov	r8, r0
 800a588:	4689      	mov	r9, r1
 800a58a:	462b      	mov	r3, r5
 800a58c:	4650      	mov	r0, sl
 800a58e:	4659      	mov	r1, fp
 800a590:	f7f5 fe72 	bl	8000278 <__aeabi_dsub>
 800a594:	4632      	mov	r2, r6
 800a596:	463b      	mov	r3, r7
 800a598:	f7f5 fe6e 	bl	8000278 <__aeabi_dsub>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	4649      	mov	r1, r9
 800a5a4:	e7da      	b.n	800a55c <__kernel_cos+0xec>
 800a5a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a5e0 <__kernel_cos+0x170>
 800a5aa:	e7db      	b.n	800a564 <__kernel_cos+0xf4>
 800a5ac:	f3af 8000 	nop.w
 800a5b0:	be8838d4 	.word	0xbe8838d4
 800a5b4:	bda8fae9 	.word	0xbda8fae9
 800a5b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a5bc:	3e21ee9e 	.word	0x3e21ee9e
 800a5c0:	809c52ad 	.word	0x809c52ad
 800a5c4:	3e927e4f 	.word	0x3e927e4f
 800a5c8:	19cb1590 	.word	0x19cb1590
 800a5cc:	3efa01a0 	.word	0x3efa01a0
 800a5d0:	16c15177 	.word	0x16c15177
 800a5d4:	3f56c16c 	.word	0x3f56c16c
 800a5d8:	5555554c 	.word	0x5555554c
 800a5dc:	3fa55555 	.word	0x3fa55555
 800a5e0:	00000000 	.word	0x00000000
 800a5e4:	3ff00000 	.word	0x3ff00000
 800a5e8:	3fe00000 	.word	0x3fe00000
 800a5ec:	3fd33332 	.word	0x3fd33332
 800a5f0:	3ff00000 	.word	0x3ff00000
 800a5f4:	3fe90000 	.word	0x3fe90000
 800a5f8:	3fd20000 	.word	0x3fd20000
 800a5fc:	00000000 	.word	0x00000000

0800a600 <__kernel_sin>:
 800a600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a604:	ed2d 8b04 	vpush	{d8-d9}
 800a608:	eeb0 8a41 	vmov.f32	s16, s2
 800a60c:	eef0 8a61 	vmov.f32	s17, s3
 800a610:	ec55 4b10 	vmov	r4, r5, d0
 800a614:	b083      	sub	sp, #12
 800a616:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a61a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a61e:	9001      	str	r0, [sp, #4]
 800a620:	da06      	bge.n	800a630 <__kernel_sin+0x30>
 800a622:	ee10 0a10 	vmov	r0, s0
 800a626:	4629      	mov	r1, r5
 800a628:	f7f6 fa8e 	bl	8000b48 <__aeabi_d2iz>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d051      	beq.n	800a6d4 <__kernel_sin+0xd4>
 800a630:	4622      	mov	r2, r4
 800a632:	462b      	mov	r3, r5
 800a634:	4620      	mov	r0, r4
 800a636:	4629      	mov	r1, r5
 800a638:	f7f5 ffd6 	bl	80005e8 <__aeabi_dmul>
 800a63c:	4682      	mov	sl, r0
 800a63e:	468b      	mov	fp, r1
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4620      	mov	r0, r4
 800a646:	4629      	mov	r1, r5
 800a648:	f7f5 ffce 	bl	80005e8 <__aeabi_dmul>
 800a64c:	a341      	add	r3, pc, #260	; (adr r3, 800a754 <__kernel_sin+0x154>)
 800a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a652:	4680      	mov	r8, r0
 800a654:	4689      	mov	r9, r1
 800a656:	4650      	mov	r0, sl
 800a658:	4659      	mov	r1, fp
 800a65a:	f7f5 ffc5 	bl	80005e8 <__aeabi_dmul>
 800a65e:	a33f      	add	r3, pc, #252	; (adr r3, 800a75c <__kernel_sin+0x15c>)
 800a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a664:	f7f5 fe08 	bl	8000278 <__aeabi_dsub>
 800a668:	4652      	mov	r2, sl
 800a66a:	465b      	mov	r3, fp
 800a66c:	f7f5 ffbc 	bl	80005e8 <__aeabi_dmul>
 800a670:	a33c      	add	r3, pc, #240	; (adr r3, 800a764 <__kernel_sin+0x164>)
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	f7f5 fe01 	bl	800027c <__adddf3>
 800a67a:	4652      	mov	r2, sl
 800a67c:	465b      	mov	r3, fp
 800a67e:	f7f5 ffb3 	bl	80005e8 <__aeabi_dmul>
 800a682:	a33a      	add	r3, pc, #232	; (adr r3, 800a76c <__kernel_sin+0x16c>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	f7f5 fdf6 	bl	8000278 <__aeabi_dsub>
 800a68c:	4652      	mov	r2, sl
 800a68e:	465b      	mov	r3, fp
 800a690:	f7f5 ffaa 	bl	80005e8 <__aeabi_dmul>
 800a694:	a337      	add	r3, pc, #220	; (adr r3, 800a774 <__kernel_sin+0x174>)
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	f7f5 fdef 	bl	800027c <__adddf3>
 800a69e:	9b01      	ldr	r3, [sp, #4]
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	460f      	mov	r7, r1
 800a6a4:	b9eb      	cbnz	r3, 800a6e2 <__kernel_sin+0xe2>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4650      	mov	r0, sl
 800a6ac:	4659      	mov	r1, fp
 800a6ae:	f7f5 ff9b 	bl	80005e8 <__aeabi_dmul>
 800a6b2:	a325      	add	r3, pc, #148	; (adr r3, 800a748 <__kernel_sin+0x148>)
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	f7f5 fdde 	bl	8000278 <__aeabi_dsub>
 800a6bc:	4642      	mov	r2, r8
 800a6be:	464b      	mov	r3, r9
 800a6c0:	f7f5 ff92 	bl	80005e8 <__aeabi_dmul>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	f7f5 fdd6 	bl	800027c <__adddf3>
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	460d      	mov	r5, r1
 800a6d4:	ec45 4b10 	vmov	d0, r4, r5
 800a6d8:	b003      	add	sp, #12
 800a6da:	ecbd 8b04 	vpop	{d8-d9}
 800a6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e2:	4b1b      	ldr	r3, [pc, #108]	; (800a750 <__kernel_sin+0x150>)
 800a6e4:	ec51 0b18 	vmov	r0, r1, d8
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f7f5 ff7d 	bl	80005e8 <__aeabi_dmul>
 800a6ee:	4632      	mov	r2, r6
 800a6f0:	ec41 0b19 	vmov	d9, r0, r1
 800a6f4:	463b      	mov	r3, r7
 800a6f6:	4640      	mov	r0, r8
 800a6f8:	4649      	mov	r1, r9
 800a6fa:	f7f5 ff75 	bl	80005e8 <__aeabi_dmul>
 800a6fe:	4602      	mov	r2, r0
 800a700:	460b      	mov	r3, r1
 800a702:	ec51 0b19 	vmov	r0, r1, d9
 800a706:	f7f5 fdb7 	bl	8000278 <__aeabi_dsub>
 800a70a:	4652      	mov	r2, sl
 800a70c:	465b      	mov	r3, fp
 800a70e:	f7f5 ff6b 	bl	80005e8 <__aeabi_dmul>
 800a712:	ec53 2b18 	vmov	r2, r3, d8
 800a716:	f7f5 fdaf 	bl	8000278 <__aeabi_dsub>
 800a71a:	a30b      	add	r3, pc, #44	; (adr r3, 800a748 <__kernel_sin+0x148>)
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	4606      	mov	r6, r0
 800a722:	460f      	mov	r7, r1
 800a724:	4640      	mov	r0, r8
 800a726:	4649      	mov	r1, r9
 800a728:	f7f5 ff5e 	bl	80005e8 <__aeabi_dmul>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4630      	mov	r0, r6
 800a732:	4639      	mov	r1, r7
 800a734:	f7f5 fda2 	bl	800027c <__adddf3>
 800a738:	4602      	mov	r2, r0
 800a73a:	460b      	mov	r3, r1
 800a73c:	4620      	mov	r0, r4
 800a73e:	4629      	mov	r1, r5
 800a740:	f7f5 fd9a 	bl	8000278 <__aeabi_dsub>
 800a744:	e7c4      	b.n	800a6d0 <__kernel_sin+0xd0>
 800a746:	bf00      	nop
 800a748:	55555549 	.word	0x55555549
 800a74c:	3fc55555 	.word	0x3fc55555
 800a750:	3fe00000 	.word	0x3fe00000
 800a754:	5acfd57c 	.word	0x5acfd57c
 800a758:	3de5d93a 	.word	0x3de5d93a
 800a75c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a760:	3e5ae5e6 	.word	0x3e5ae5e6
 800a764:	57b1fe7d 	.word	0x57b1fe7d
 800a768:	3ec71de3 	.word	0x3ec71de3
 800a76c:	19c161d5 	.word	0x19c161d5
 800a770:	3f2a01a0 	.word	0x3f2a01a0
 800a774:	1110f8a6 	.word	0x1110f8a6
 800a778:	3f811111 	.word	0x3f811111
 800a77c:	00000000 	.word	0x00000000

0800a780 <__ieee754_asin>:
 800a780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	ed2d 8b04 	vpush	{d8-d9}
 800a788:	ec55 4b10 	vmov	r4, r5, d0
 800a78c:	4bcc      	ldr	r3, [pc, #816]	; (800aac0 <__ieee754_asin+0x340>)
 800a78e:	b083      	sub	sp, #12
 800a790:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a794:	4598      	cmp	r8, r3
 800a796:	9501      	str	r5, [sp, #4]
 800a798:	dd33      	ble.n	800a802 <__ieee754_asin+0x82>
 800a79a:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800a79e:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800a7a2:	ea58 0804 	orrs.w	r8, r8, r4
 800a7a6:	d117      	bne.n	800a7d8 <__ieee754_asin+0x58>
 800a7a8:	a3ab      	add	r3, pc, #684	; (adr r3, 800aa58 <__ieee754_asin+0x2d8>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	ee10 0a10 	vmov	r0, s0
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	f7f5 ff18 	bl	80005e8 <__aeabi_dmul>
 800a7b8:	a3a9      	add	r3, pc, #676	; (adr r3, 800aa60 <__ieee754_asin+0x2e0>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	4606      	mov	r6, r0
 800a7c0:	460f      	mov	r7, r1
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	f7f5 ff0f 	bl	80005e8 <__aeabi_dmul>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	4639      	mov	r1, r7
 800a7d2:	f7f5 fd53 	bl	800027c <__adddf3>
 800a7d6:	e00b      	b.n	800a7f0 <__ieee754_asin+0x70>
 800a7d8:	ee10 2a10 	vmov	r2, s0
 800a7dc:	462b      	mov	r3, r5
 800a7de:	ee10 0a10 	vmov	r0, s0
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	f7f5 fd48 	bl	8000278 <__aeabi_dsub>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	f7f6 f826 	bl	800083c <__aeabi_ddiv>
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	460d      	mov	r5, r1
 800a7f4:	ec45 4b10 	vmov	d0, r4, r5
 800a7f8:	b003      	add	sp, #12
 800a7fa:	ecbd 8b04 	vpop	{d8-d9}
 800a7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a802:	4bb0      	ldr	r3, [pc, #704]	; (800aac4 <__ieee754_asin+0x344>)
 800a804:	4598      	cmp	r8, r3
 800a806:	dc11      	bgt.n	800a82c <__ieee754_asin+0xac>
 800a808:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a80c:	f280 80ae 	bge.w	800a96c <__ieee754_asin+0x1ec>
 800a810:	a395      	add	r3, pc, #596	; (adr r3, 800aa68 <__ieee754_asin+0x2e8>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	ee10 0a10 	vmov	r0, s0
 800a81a:	4629      	mov	r1, r5
 800a81c:	f7f5 fd2e 	bl	800027c <__adddf3>
 800a820:	4ba9      	ldr	r3, [pc, #676]	; (800aac8 <__ieee754_asin+0x348>)
 800a822:	2200      	movs	r2, #0
 800a824:	f7f6 f970 	bl	8000b08 <__aeabi_dcmpgt>
 800a828:	2800      	cmp	r0, #0
 800a82a:	d1e3      	bne.n	800a7f4 <__ieee754_asin+0x74>
 800a82c:	ec45 4b10 	vmov	d0, r4, r5
 800a830:	f7ff fcca 	bl	800a1c8 <fabs>
 800a834:	49a4      	ldr	r1, [pc, #656]	; (800aac8 <__ieee754_asin+0x348>)
 800a836:	ec53 2b10 	vmov	r2, r3, d0
 800a83a:	2000      	movs	r0, #0
 800a83c:	f7f5 fd1c 	bl	8000278 <__aeabi_dsub>
 800a840:	4ba2      	ldr	r3, [pc, #648]	; (800aacc <__ieee754_asin+0x34c>)
 800a842:	2200      	movs	r2, #0
 800a844:	f7f5 fed0 	bl	80005e8 <__aeabi_dmul>
 800a848:	a389      	add	r3, pc, #548	; (adr r3, 800aa70 <__ieee754_asin+0x2f0>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	4604      	mov	r4, r0
 800a850:	460d      	mov	r5, r1
 800a852:	f7f5 fec9 	bl	80005e8 <__aeabi_dmul>
 800a856:	a388      	add	r3, pc, #544	; (adr r3, 800aa78 <__ieee754_asin+0x2f8>)
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	f7f5 fd0e 	bl	800027c <__adddf3>
 800a860:	4622      	mov	r2, r4
 800a862:	462b      	mov	r3, r5
 800a864:	f7f5 fec0 	bl	80005e8 <__aeabi_dmul>
 800a868:	a385      	add	r3, pc, #532	; (adr r3, 800aa80 <__ieee754_asin+0x300>)
 800a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86e:	f7f5 fd03 	bl	8000278 <__aeabi_dsub>
 800a872:	4622      	mov	r2, r4
 800a874:	462b      	mov	r3, r5
 800a876:	f7f5 feb7 	bl	80005e8 <__aeabi_dmul>
 800a87a:	a383      	add	r3, pc, #524	; (adr r3, 800aa88 <__ieee754_asin+0x308>)
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f7f5 fcfc 	bl	800027c <__adddf3>
 800a884:	4622      	mov	r2, r4
 800a886:	462b      	mov	r3, r5
 800a888:	f7f5 feae 	bl	80005e8 <__aeabi_dmul>
 800a88c:	a380      	add	r3, pc, #512	; (adr r3, 800aa90 <__ieee754_asin+0x310>)
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	f7f5 fcf1 	bl	8000278 <__aeabi_dsub>
 800a896:	4622      	mov	r2, r4
 800a898:	462b      	mov	r3, r5
 800a89a:	f7f5 fea5 	bl	80005e8 <__aeabi_dmul>
 800a89e:	a37e      	add	r3, pc, #504	; (adr r3, 800aa98 <__ieee754_asin+0x318>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f7f5 fcea 	bl	800027c <__adddf3>
 800a8a8:	4622      	mov	r2, r4
 800a8aa:	462b      	mov	r3, r5
 800a8ac:	f7f5 fe9c 	bl	80005e8 <__aeabi_dmul>
 800a8b0:	a37b      	add	r3, pc, #492	; (adr r3, 800aaa0 <__ieee754_asin+0x320>)
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	ec41 0b18 	vmov	d8, r0, r1
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	4629      	mov	r1, r5
 800a8be:	f7f5 fe93 	bl	80005e8 <__aeabi_dmul>
 800a8c2:	a379      	add	r3, pc, #484	; (adr r3, 800aaa8 <__ieee754_asin+0x328>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f7f5 fcd6 	bl	8000278 <__aeabi_dsub>
 800a8cc:	4622      	mov	r2, r4
 800a8ce:	462b      	mov	r3, r5
 800a8d0:	f7f5 fe8a 	bl	80005e8 <__aeabi_dmul>
 800a8d4:	a376      	add	r3, pc, #472	; (adr r3, 800aab0 <__ieee754_asin+0x330>)
 800a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8da:	f7f5 fccf 	bl	800027c <__adddf3>
 800a8de:	4622      	mov	r2, r4
 800a8e0:	462b      	mov	r3, r5
 800a8e2:	f7f5 fe81 	bl	80005e8 <__aeabi_dmul>
 800a8e6:	a374      	add	r3, pc, #464	; (adr r3, 800aab8 <__ieee754_asin+0x338>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f7f5 fcc4 	bl	8000278 <__aeabi_dsub>
 800a8f0:	4622      	mov	r2, r4
 800a8f2:	462b      	mov	r3, r5
 800a8f4:	f7f5 fe78 	bl	80005e8 <__aeabi_dmul>
 800a8f8:	4b73      	ldr	r3, [pc, #460]	; (800aac8 <__ieee754_asin+0x348>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f7f5 fcbe 	bl	800027c <__adddf3>
 800a900:	ec45 4b10 	vmov	d0, r4, r5
 800a904:	4606      	mov	r6, r0
 800a906:	460f      	mov	r7, r1
 800a908:	f7ff fcd6 	bl	800a2b8 <__ieee754_sqrt>
 800a90c:	4b70      	ldr	r3, [pc, #448]	; (800aad0 <__ieee754_asin+0x350>)
 800a90e:	4598      	cmp	r8, r3
 800a910:	ec5b ab10 	vmov	sl, fp, d0
 800a914:	f340 80de 	ble.w	800aad4 <__ieee754_asin+0x354>
 800a918:	4632      	mov	r2, r6
 800a91a:	463b      	mov	r3, r7
 800a91c:	ec51 0b18 	vmov	r0, r1, d8
 800a920:	f7f5 ff8c 	bl	800083c <__aeabi_ddiv>
 800a924:	4652      	mov	r2, sl
 800a926:	465b      	mov	r3, fp
 800a928:	f7f5 fe5e 	bl	80005e8 <__aeabi_dmul>
 800a92c:	4652      	mov	r2, sl
 800a92e:	465b      	mov	r3, fp
 800a930:	f7f5 fca4 	bl	800027c <__adddf3>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	f7f5 fca0 	bl	800027c <__adddf3>
 800a93c:	a348      	add	r3, pc, #288	; (adr r3, 800aa60 <__ieee754_asin+0x2e0>)
 800a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a942:	f7f5 fc99 	bl	8000278 <__aeabi_dsub>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	a143      	add	r1, pc, #268	; (adr r1, 800aa58 <__ieee754_asin+0x2d8>)
 800a94c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a950:	f7f5 fc92 	bl	8000278 <__aeabi_dsub>
 800a954:	9b01      	ldr	r3, [sp, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	bfdc      	itt	le
 800a95a:	4602      	movle	r2, r0
 800a95c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a960:	4604      	mov	r4, r0
 800a962:	460d      	mov	r5, r1
 800a964:	bfdc      	itt	le
 800a966:	4614      	movle	r4, r2
 800a968:	461d      	movle	r5, r3
 800a96a:	e743      	b.n	800a7f4 <__ieee754_asin+0x74>
 800a96c:	ee10 2a10 	vmov	r2, s0
 800a970:	ee10 0a10 	vmov	r0, s0
 800a974:	462b      	mov	r3, r5
 800a976:	4629      	mov	r1, r5
 800a978:	f7f5 fe36 	bl	80005e8 <__aeabi_dmul>
 800a97c:	a33c      	add	r3, pc, #240	; (adr r3, 800aa70 <__ieee754_asin+0x2f0>)
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	4606      	mov	r6, r0
 800a984:	460f      	mov	r7, r1
 800a986:	f7f5 fe2f 	bl	80005e8 <__aeabi_dmul>
 800a98a:	a33b      	add	r3, pc, #236	; (adr r3, 800aa78 <__ieee754_asin+0x2f8>)
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	f7f5 fc74 	bl	800027c <__adddf3>
 800a994:	4632      	mov	r2, r6
 800a996:	463b      	mov	r3, r7
 800a998:	f7f5 fe26 	bl	80005e8 <__aeabi_dmul>
 800a99c:	a338      	add	r3, pc, #224	; (adr r3, 800aa80 <__ieee754_asin+0x300>)
 800a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a2:	f7f5 fc69 	bl	8000278 <__aeabi_dsub>
 800a9a6:	4632      	mov	r2, r6
 800a9a8:	463b      	mov	r3, r7
 800a9aa:	f7f5 fe1d 	bl	80005e8 <__aeabi_dmul>
 800a9ae:	a336      	add	r3, pc, #216	; (adr r3, 800aa88 <__ieee754_asin+0x308>)
 800a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b4:	f7f5 fc62 	bl	800027c <__adddf3>
 800a9b8:	4632      	mov	r2, r6
 800a9ba:	463b      	mov	r3, r7
 800a9bc:	f7f5 fe14 	bl	80005e8 <__aeabi_dmul>
 800a9c0:	a333      	add	r3, pc, #204	; (adr r3, 800aa90 <__ieee754_asin+0x310>)
 800a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c6:	f7f5 fc57 	bl	8000278 <__aeabi_dsub>
 800a9ca:	4632      	mov	r2, r6
 800a9cc:	463b      	mov	r3, r7
 800a9ce:	f7f5 fe0b 	bl	80005e8 <__aeabi_dmul>
 800a9d2:	a331      	add	r3, pc, #196	; (adr r3, 800aa98 <__ieee754_asin+0x318>)
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	f7f5 fc50 	bl	800027c <__adddf3>
 800a9dc:	4632      	mov	r2, r6
 800a9de:	463b      	mov	r3, r7
 800a9e0:	f7f5 fe02 	bl	80005e8 <__aeabi_dmul>
 800a9e4:	a32e      	add	r3, pc, #184	; (adr r3, 800aaa0 <__ieee754_asin+0x320>)
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	4680      	mov	r8, r0
 800a9ec:	4689      	mov	r9, r1
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	4639      	mov	r1, r7
 800a9f2:	f7f5 fdf9 	bl	80005e8 <__aeabi_dmul>
 800a9f6:	a32c      	add	r3, pc, #176	; (adr r3, 800aaa8 <__ieee754_asin+0x328>)
 800a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fc:	f7f5 fc3c 	bl	8000278 <__aeabi_dsub>
 800aa00:	4632      	mov	r2, r6
 800aa02:	463b      	mov	r3, r7
 800aa04:	f7f5 fdf0 	bl	80005e8 <__aeabi_dmul>
 800aa08:	a329      	add	r3, pc, #164	; (adr r3, 800aab0 <__ieee754_asin+0x330>)
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	f7f5 fc35 	bl	800027c <__adddf3>
 800aa12:	4632      	mov	r2, r6
 800aa14:	463b      	mov	r3, r7
 800aa16:	f7f5 fde7 	bl	80005e8 <__aeabi_dmul>
 800aa1a:	a327      	add	r3, pc, #156	; (adr r3, 800aab8 <__ieee754_asin+0x338>)
 800aa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa20:	f7f5 fc2a 	bl	8000278 <__aeabi_dsub>
 800aa24:	4632      	mov	r2, r6
 800aa26:	463b      	mov	r3, r7
 800aa28:	f7f5 fdde 	bl	80005e8 <__aeabi_dmul>
 800aa2c:	4b26      	ldr	r3, [pc, #152]	; (800aac8 <__ieee754_asin+0x348>)
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f7f5 fc24 	bl	800027c <__adddf3>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4640      	mov	r0, r8
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	f7f5 fefe 	bl	800083c <__aeabi_ddiv>
 800aa40:	4622      	mov	r2, r4
 800aa42:	462b      	mov	r3, r5
 800aa44:	f7f5 fdd0 	bl	80005e8 <__aeabi_dmul>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	4629      	mov	r1, r5
 800aa50:	e6bf      	b.n	800a7d2 <__ieee754_asin+0x52>
 800aa52:	bf00      	nop
 800aa54:	f3af 8000 	nop.w
 800aa58:	54442d18 	.word	0x54442d18
 800aa5c:	3ff921fb 	.word	0x3ff921fb
 800aa60:	33145c07 	.word	0x33145c07
 800aa64:	3c91a626 	.word	0x3c91a626
 800aa68:	8800759c 	.word	0x8800759c
 800aa6c:	7e37e43c 	.word	0x7e37e43c
 800aa70:	0dfdf709 	.word	0x0dfdf709
 800aa74:	3f023de1 	.word	0x3f023de1
 800aa78:	7501b288 	.word	0x7501b288
 800aa7c:	3f49efe0 	.word	0x3f49efe0
 800aa80:	b5688f3b 	.word	0xb5688f3b
 800aa84:	3fa48228 	.word	0x3fa48228
 800aa88:	0e884455 	.word	0x0e884455
 800aa8c:	3fc9c155 	.word	0x3fc9c155
 800aa90:	03eb6f7d 	.word	0x03eb6f7d
 800aa94:	3fd4d612 	.word	0x3fd4d612
 800aa98:	55555555 	.word	0x55555555
 800aa9c:	3fc55555 	.word	0x3fc55555
 800aaa0:	b12e9282 	.word	0xb12e9282
 800aaa4:	3fb3b8c5 	.word	0x3fb3b8c5
 800aaa8:	1b8d0159 	.word	0x1b8d0159
 800aaac:	3fe6066c 	.word	0x3fe6066c
 800aab0:	9c598ac8 	.word	0x9c598ac8
 800aab4:	40002ae5 	.word	0x40002ae5
 800aab8:	1c8a2d4b 	.word	0x1c8a2d4b
 800aabc:	40033a27 	.word	0x40033a27
 800aac0:	3fefffff 	.word	0x3fefffff
 800aac4:	3fdfffff 	.word	0x3fdfffff
 800aac8:	3ff00000 	.word	0x3ff00000
 800aacc:	3fe00000 	.word	0x3fe00000
 800aad0:	3fef3332 	.word	0x3fef3332
 800aad4:	ee10 2a10 	vmov	r2, s0
 800aad8:	ee10 0a10 	vmov	r0, s0
 800aadc:	465b      	mov	r3, fp
 800aade:	4659      	mov	r1, fp
 800aae0:	f7f5 fbcc 	bl	800027c <__adddf3>
 800aae4:	4632      	mov	r2, r6
 800aae6:	463b      	mov	r3, r7
 800aae8:	ec41 0b19 	vmov	d9, r0, r1
 800aaec:	ec51 0b18 	vmov	r0, r1, d8
 800aaf0:	f7f5 fea4 	bl	800083c <__aeabi_ddiv>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	ec51 0b19 	vmov	r0, r1, d9
 800aafc:	f7f5 fd74 	bl	80005e8 <__aeabi_dmul>
 800ab00:	f04f 0800 	mov.w	r8, #0
 800ab04:	4606      	mov	r6, r0
 800ab06:	460f      	mov	r7, r1
 800ab08:	4642      	mov	r2, r8
 800ab0a:	465b      	mov	r3, fp
 800ab0c:	4640      	mov	r0, r8
 800ab0e:	4659      	mov	r1, fp
 800ab10:	f7f5 fd6a 	bl	80005e8 <__aeabi_dmul>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	4620      	mov	r0, r4
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	f7f5 fbac 	bl	8000278 <__aeabi_dsub>
 800ab20:	4642      	mov	r2, r8
 800ab22:	4604      	mov	r4, r0
 800ab24:	460d      	mov	r5, r1
 800ab26:	465b      	mov	r3, fp
 800ab28:	4650      	mov	r0, sl
 800ab2a:	4659      	mov	r1, fp
 800ab2c:	f7f5 fba6 	bl	800027c <__adddf3>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4620      	mov	r0, r4
 800ab36:	4629      	mov	r1, r5
 800ab38:	f7f5 fe80 	bl	800083c <__aeabi_ddiv>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	f7f5 fb9c 	bl	800027c <__adddf3>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	a113      	add	r1, pc, #76	; (adr r1, 800ab98 <__ieee754_asin+0x418>)
 800ab4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab4e:	f7f5 fb93 	bl	8000278 <__aeabi_dsub>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4630      	mov	r0, r6
 800ab58:	4639      	mov	r1, r7
 800ab5a:	f7f5 fb8d 	bl	8000278 <__aeabi_dsub>
 800ab5e:	4642      	mov	r2, r8
 800ab60:	4604      	mov	r4, r0
 800ab62:	460d      	mov	r5, r1
 800ab64:	465b      	mov	r3, fp
 800ab66:	4640      	mov	r0, r8
 800ab68:	4659      	mov	r1, fp
 800ab6a:	f7f5 fb87 	bl	800027c <__adddf3>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	460b      	mov	r3, r1
 800ab72:	a10b      	add	r1, pc, #44	; (adr r1, 800aba0 <__ieee754_asin+0x420>)
 800ab74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab78:	f7f5 fb7e 	bl	8000278 <__aeabi_dsub>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4620      	mov	r0, r4
 800ab82:	4629      	mov	r1, r5
 800ab84:	f7f5 fb78 	bl	8000278 <__aeabi_dsub>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	a104      	add	r1, pc, #16	; (adr r1, 800aba0 <__ieee754_asin+0x420>)
 800ab8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab92:	e6dd      	b.n	800a950 <__ieee754_asin+0x1d0>
 800ab94:	f3af 8000 	nop.w
 800ab98:	33145c07 	.word	0x33145c07
 800ab9c:	3c91a626 	.word	0x3c91a626
 800aba0:	54442d18 	.word	0x54442d18
 800aba4:	3fe921fb 	.word	0x3fe921fb

0800aba8 <__ieee754_atan2>:
 800aba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abac:	ec57 6b11 	vmov	r6, r7, d1
 800abb0:	4273      	negs	r3, r6
 800abb2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800ad30 <__ieee754_atan2+0x188>
 800abb6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800abba:	4333      	orrs	r3, r6
 800abbc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800abc0:	4543      	cmp	r3, r8
 800abc2:	ec51 0b10 	vmov	r0, r1, d0
 800abc6:	ee11 5a10 	vmov	r5, s2
 800abca:	d80a      	bhi.n	800abe2 <__ieee754_atan2+0x3a>
 800abcc:	4244      	negs	r4, r0
 800abce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800abd2:	4304      	orrs	r4, r0
 800abd4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800abd8:	4544      	cmp	r4, r8
 800abda:	ee10 9a10 	vmov	r9, s0
 800abde:	468e      	mov	lr, r1
 800abe0:	d907      	bls.n	800abf2 <__ieee754_atan2+0x4a>
 800abe2:	4632      	mov	r2, r6
 800abe4:	463b      	mov	r3, r7
 800abe6:	f7f5 fb49 	bl	800027c <__adddf3>
 800abea:	ec41 0b10 	vmov	d0, r0, r1
 800abee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abf2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800abf6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800abfa:	4334      	orrs	r4, r6
 800abfc:	d103      	bne.n	800ac06 <__ieee754_atan2+0x5e>
 800abfe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac02:	f001 b8d9 	b.w	800bdb8 <atan>
 800ac06:	17bc      	asrs	r4, r7, #30
 800ac08:	f004 0402 	and.w	r4, r4, #2
 800ac0c:	ea53 0909 	orrs.w	r9, r3, r9
 800ac10:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ac14:	d107      	bne.n	800ac26 <__ieee754_atan2+0x7e>
 800ac16:	2c02      	cmp	r4, #2
 800ac18:	d05f      	beq.n	800acda <__ieee754_atan2+0x132>
 800ac1a:	2c03      	cmp	r4, #3
 800ac1c:	d1e5      	bne.n	800abea <__ieee754_atan2+0x42>
 800ac1e:	a140      	add	r1, pc, #256	; (adr r1, 800ad20 <__ieee754_atan2+0x178>)
 800ac20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac24:	e7e1      	b.n	800abea <__ieee754_atan2+0x42>
 800ac26:	4315      	orrs	r5, r2
 800ac28:	d106      	bne.n	800ac38 <__ieee754_atan2+0x90>
 800ac2a:	f1be 0f00 	cmp.w	lr, #0
 800ac2e:	da5f      	bge.n	800acf0 <__ieee754_atan2+0x148>
 800ac30:	a13d      	add	r1, pc, #244	; (adr r1, 800ad28 <__ieee754_atan2+0x180>)
 800ac32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac36:	e7d8      	b.n	800abea <__ieee754_atan2+0x42>
 800ac38:	4542      	cmp	r2, r8
 800ac3a:	d10f      	bne.n	800ac5c <__ieee754_atan2+0xb4>
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac42:	d107      	bne.n	800ac54 <__ieee754_atan2+0xac>
 800ac44:	2c02      	cmp	r4, #2
 800ac46:	d84c      	bhi.n	800ace2 <__ieee754_atan2+0x13a>
 800ac48:	4b33      	ldr	r3, [pc, #204]	; (800ad18 <__ieee754_atan2+0x170>)
 800ac4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac52:	e7ca      	b.n	800abea <__ieee754_atan2+0x42>
 800ac54:	2c02      	cmp	r4, #2
 800ac56:	d848      	bhi.n	800acea <__ieee754_atan2+0x142>
 800ac58:	4b30      	ldr	r3, [pc, #192]	; (800ad1c <__ieee754_atan2+0x174>)
 800ac5a:	e7f6      	b.n	800ac4a <__ieee754_atan2+0xa2>
 800ac5c:	4543      	cmp	r3, r8
 800ac5e:	d0e4      	beq.n	800ac2a <__ieee754_atan2+0x82>
 800ac60:	1a9b      	subs	r3, r3, r2
 800ac62:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ac66:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ac6a:	da1e      	bge.n	800acaa <__ieee754_atan2+0x102>
 800ac6c:	2f00      	cmp	r7, #0
 800ac6e:	da01      	bge.n	800ac74 <__ieee754_atan2+0xcc>
 800ac70:	323c      	adds	r2, #60	; 0x3c
 800ac72:	db1e      	blt.n	800acb2 <__ieee754_atan2+0x10a>
 800ac74:	4632      	mov	r2, r6
 800ac76:	463b      	mov	r3, r7
 800ac78:	f7f5 fde0 	bl	800083c <__aeabi_ddiv>
 800ac7c:	ec41 0b10 	vmov	d0, r0, r1
 800ac80:	f7ff faa2 	bl	800a1c8 <fabs>
 800ac84:	f001 f898 	bl	800bdb8 <atan>
 800ac88:	ec51 0b10 	vmov	r0, r1, d0
 800ac8c:	2c01      	cmp	r4, #1
 800ac8e:	d013      	beq.n	800acb8 <__ieee754_atan2+0x110>
 800ac90:	2c02      	cmp	r4, #2
 800ac92:	d015      	beq.n	800acc0 <__ieee754_atan2+0x118>
 800ac94:	2c00      	cmp	r4, #0
 800ac96:	d0a8      	beq.n	800abea <__ieee754_atan2+0x42>
 800ac98:	a317      	add	r3, pc, #92	; (adr r3, 800acf8 <__ieee754_atan2+0x150>)
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	f7f5 faeb 	bl	8000278 <__aeabi_dsub>
 800aca2:	a317      	add	r3, pc, #92	; (adr r3, 800ad00 <__ieee754_atan2+0x158>)
 800aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca8:	e014      	b.n	800acd4 <__ieee754_atan2+0x12c>
 800acaa:	a117      	add	r1, pc, #92	; (adr r1, 800ad08 <__ieee754_atan2+0x160>)
 800acac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acb0:	e7ec      	b.n	800ac8c <__ieee754_atan2+0xe4>
 800acb2:	2000      	movs	r0, #0
 800acb4:	2100      	movs	r1, #0
 800acb6:	e7e9      	b.n	800ac8c <__ieee754_atan2+0xe4>
 800acb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acbc:	4619      	mov	r1, r3
 800acbe:	e794      	b.n	800abea <__ieee754_atan2+0x42>
 800acc0:	a30d      	add	r3, pc, #52	; (adr r3, 800acf8 <__ieee754_atan2+0x150>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	f7f5 fad7 	bl	8000278 <__aeabi_dsub>
 800acca:	4602      	mov	r2, r0
 800accc:	460b      	mov	r3, r1
 800acce:	a10c      	add	r1, pc, #48	; (adr r1, 800ad00 <__ieee754_atan2+0x158>)
 800acd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acd4:	f7f5 fad0 	bl	8000278 <__aeabi_dsub>
 800acd8:	e787      	b.n	800abea <__ieee754_atan2+0x42>
 800acda:	a109      	add	r1, pc, #36	; (adr r1, 800ad00 <__ieee754_atan2+0x158>)
 800acdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ace0:	e783      	b.n	800abea <__ieee754_atan2+0x42>
 800ace2:	a10b      	add	r1, pc, #44	; (adr r1, 800ad10 <__ieee754_atan2+0x168>)
 800ace4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ace8:	e77f      	b.n	800abea <__ieee754_atan2+0x42>
 800acea:	2000      	movs	r0, #0
 800acec:	2100      	movs	r1, #0
 800acee:	e77c      	b.n	800abea <__ieee754_atan2+0x42>
 800acf0:	a105      	add	r1, pc, #20	; (adr r1, 800ad08 <__ieee754_atan2+0x160>)
 800acf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acf6:	e778      	b.n	800abea <__ieee754_atan2+0x42>
 800acf8:	33145c07 	.word	0x33145c07
 800acfc:	3ca1a626 	.word	0x3ca1a626
 800ad00:	54442d18 	.word	0x54442d18
 800ad04:	400921fb 	.word	0x400921fb
 800ad08:	54442d18 	.word	0x54442d18
 800ad0c:	3ff921fb 	.word	0x3ff921fb
 800ad10:	54442d18 	.word	0x54442d18
 800ad14:	3fe921fb 	.word	0x3fe921fb
 800ad18:	0800f6a8 	.word	0x0800f6a8
 800ad1c:	0800f6c0 	.word	0x0800f6c0
 800ad20:	54442d18 	.word	0x54442d18
 800ad24:	c00921fb 	.word	0xc00921fb
 800ad28:	54442d18 	.word	0x54442d18
 800ad2c:	bff921fb 	.word	0xbff921fb
 800ad30:	7ff00000 	.word	0x7ff00000

0800ad34 <__ieee754_fmod>:
 800ad34:	ec53 2b11 	vmov	r2, r3, d1
 800ad38:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800ad3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad40:	ea5c 0402 	orrs.w	r4, ip, r2
 800ad44:	ec51 0b10 	vmov	r0, r1, d0
 800ad48:	ee11 7a10 	vmov	r7, s2
 800ad4c:	ee11 ea10 	vmov	lr, s2
 800ad50:	461e      	mov	r6, r3
 800ad52:	d00c      	beq.n	800ad6e <__ieee754_fmod+0x3a>
 800ad54:	4c78      	ldr	r4, [pc, #480]	; (800af38 <__ieee754_fmod+0x204>)
 800ad56:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800ad5a:	45a0      	cmp	r8, r4
 800ad5c:	4689      	mov	r9, r1
 800ad5e:	dc06      	bgt.n	800ad6e <__ieee754_fmod+0x3a>
 800ad60:	4254      	negs	r4, r2
 800ad62:	4d76      	ldr	r5, [pc, #472]	; (800af3c <__ieee754_fmod+0x208>)
 800ad64:	4314      	orrs	r4, r2
 800ad66:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800ad6a:	42ac      	cmp	r4, r5
 800ad6c:	d909      	bls.n	800ad82 <__ieee754_fmod+0x4e>
 800ad6e:	f7f5 fc3b 	bl	80005e8 <__aeabi_dmul>
 800ad72:	4602      	mov	r2, r0
 800ad74:	460b      	mov	r3, r1
 800ad76:	f7f5 fd61 	bl	800083c <__aeabi_ddiv>
 800ad7a:	ec41 0b10 	vmov	d0, r0, r1
 800ad7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad82:	45e0      	cmp	r8, ip
 800ad84:	ee10 aa10 	vmov	sl, s0
 800ad88:	ee10 4a10 	vmov	r4, s0
 800ad8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ad90:	dc09      	bgt.n	800ada6 <__ieee754_fmod+0x72>
 800ad92:	dbf2      	blt.n	800ad7a <__ieee754_fmod+0x46>
 800ad94:	4290      	cmp	r0, r2
 800ad96:	d3f0      	bcc.n	800ad7a <__ieee754_fmod+0x46>
 800ad98:	d105      	bne.n	800ada6 <__ieee754_fmod+0x72>
 800ad9a:	4b69      	ldr	r3, [pc, #420]	; (800af40 <__ieee754_fmod+0x20c>)
 800ad9c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800ada0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ada4:	e7e9      	b.n	800ad7a <__ieee754_fmod+0x46>
 800ada6:	4a65      	ldr	r2, [pc, #404]	; (800af3c <__ieee754_fmod+0x208>)
 800ada8:	ea19 0f02 	tst.w	r9, r2
 800adac:	d148      	bne.n	800ae40 <__ieee754_fmod+0x10c>
 800adae:	f1b8 0f00 	cmp.w	r8, #0
 800adb2:	d13d      	bne.n	800ae30 <__ieee754_fmod+0xfc>
 800adb4:	4963      	ldr	r1, [pc, #396]	; (800af44 <__ieee754_fmod+0x210>)
 800adb6:	4653      	mov	r3, sl
 800adb8:	2b00      	cmp	r3, #0
 800adba:	dc36      	bgt.n	800ae2a <__ieee754_fmod+0xf6>
 800adbc:	4216      	tst	r6, r2
 800adbe:	d14f      	bne.n	800ae60 <__ieee754_fmod+0x12c>
 800adc0:	f1bc 0f00 	cmp.w	ip, #0
 800adc4:	d144      	bne.n	800ae50 <__ieee754_fmod+0x11c>
 800adc6:	4a5f      	ldr	r2, [pc, #380]	; (800af44 <__ieee754_fmod+0x210>)
 800adc8:	463b      	mov	r3, r7
 800adca:	2b00      	cmp	r3, #0
 800adcc:	dc3d      	bgt.n	800ae4a <__ieee754_fmod+0x116>
 800adce:	485e      	ldr	r0, [pc, #376]	; (800af48 <__ieee754_fmod+0x214>)
 800add0:	4281      	cmp	r1, r0
 800add2:	db4a      	blt.n	800ae6a <__ieee754_fmod+0x136>
 800add4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800add8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800addc:	485a      	ldr	r0, [pc, #360]	; (800af48 <__ieee754_fmod+0x214>)
 800adde:	4282      	cmp	r2, r0
 800ade0:	db57      	blt.n	800ae92 <__ieee754_fmod+0x15e>
 800ade2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ade6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800adea:	1a89      	subs	r1, r1, r2
 800adec:	1b98      	subs	r0, r3, r6
 800adee:	eba4 070e 	sub.w	r7, r4, lr
 800adf2:	2900      	cmp	r1, #0
 800adf4:	d162      	bne.n	800aebc <__ieee754_fmod+0x188>
 800adf6:	4574      	cmp	r4, lr
 800adf8:	bf38      	it	cc
 800adfa:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800adfe:	2800      	cmp	r0, #0
 800ae00:	bfa4      	itt	ge
 800ae02:	463c      	movge	r4, r7
 800ae04:	4603      	movge	r3, r0
 800ae06:	ea53 0104 	orrs.w	r1, r3, r4
 800ae0a:	d0c6      	beq.n	800ad9a <__ieee754_fmod+0x66>
 800ae0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae10:	db69      	blt.n	800aee6 <__ieee754_fmod+0x1b2>
 800ae12:	494d      	ldr	r1, [pc, #308]	; (800af48 <__ieee754_fmod+0x214>)
 800ae14:	428a      	cmp	r2, r1
 800ae16:	db6c      	blt.n	800aef2 <__ieee754_fmod+0x1be>
 800ae18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae1c:	432b      	orrs	r3, r5
 800ae1e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800ae22:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ae26:	4620      	mov	r0, r4
 800ae28:	e7a7      	b.n	800ad7a <__ieee754_fmod+0x46>
 800ae2a:	3901      	subs	r1, #1
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	e7c3      	b.n	800adb8 <__ieee754_fmod+0x84>
 800ae30:	4945      	ldr	r1, [pc, #276]	; (800af48 <__ieee754_fmod+0x214>)
 800ae32:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	ddc0      	ble.n	800adbc <__ieee754_fmod+0x88>
 800ae3a:	3901      	subs	r1, #1
 800ae3c:	005b      	lsls	r3, r3, #1
 800ae3e:	e7fa      	b.n	800ae36 <__ieee754_fmod+0x102>
 800ae40:	ea4f 5128 	mov.w	r1, r8, asr #20
 800ae44:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ae48:	e7b8      	b.n	800adbc <__ieee754_fmod+0x88>
 800ae4a:	3a01      	subs	r2, #1
 800ae4c:	005b      	lsls	r3, r3, #1
 800ae4e:	e7bc      	b.n	800adca <__ieee754_fmod+0x96>
 800ae50:	4a3d      	ldr	r2, [pc, #244]	; (800af48 <__ieee754_fmod+0x214>)
 800ae52:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	ddb9      	ble.n	800adce <__ieee754_fmod+0x9a>
 800ae5a:	3a01      	subs	r2, #1
 800ae5c:	005b      	lsls	r3, r3, #1
 800ae5e:	e7fa      	b.n	800ae56 <__ieee754_fmod+0x122>
 800ae60:	ea4f 522c 	mov.w	r2, ip, asr #20
 800ae64:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ae68:	e7b1      	b.n	800adce <__ieee754_fmod+0x9a>
 800ae6a:	1a40      	subs	r0, r0, r1
 800ae6c:	281f      	cmp	r0, #31
 800ae6e:	dc0a      	bgt.n	800ae86 <__ieee754_fmod+0x152>
 800ae70:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800ae74:	fa08 f800 	lsl.w	r8, r8, r0
 800ae78:	fa2a f303 	lsr.w	r3, sl, r3
 800ae7c:	ea43 0308 	orr.w	r3, r3, r8
 800ae80:	fa0a f400 	lsl.w	r4, sl, r0
 800ae84:	e7aa      	b.n	800addc <__ieee754_fmod+0xa8>
 800ae86:	4b31      	ldr	r3, [pc, #196]	; (800af4c <__ieee754_fmod+0x218>)
 800ae88:	1a5b      	subs	r3, r3, r1
 800ae8a:	fa0a f303 	lsl.w	r3, sl, r3
 800ae8e:	2400      	movs	r4, #0
 800ae90:	e7a4      	b.n	800addc <__ieee754_fmod+0xa8>
 800ae92:	1a80      	subs	r0, r0, r2
 800ae94:	281f      	cmp	r0, #31
 800ae96:	dc0a      	bgt.n	800aeae <__ieee754_fmod+0x17a>
 800ae98:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800ae9c:	fa0c fc00 	lsl.w	ip, ip, r0
 800aea0:	fa27 f606 	lsr.w	r6, r7, r6
 800aea4:	ea46 060c 	orr.w	r6, r6, ip
 800aea8:	fa07 fe00 	lsl.w	lr, r7, r0
 800aeac:	e79d      	b.n	800adea <__ieee754_fmod+0xb6>
 800aeae:	4e27      	ldr	r6, [pc, #156]	; (800af4c <__ieee754_fmod+0x218>)
 800aeb0:	1ab6      	subs	r6, r6, r2
 800aeb2:	fa07 f606 	lsl.w	r6, r7, r6
 800aeb6:	f04f 0e00 	mov.w	lr, #0
 800aeba:	e796      	b.n	800adea <__ieee754_fmod+0xb6>
 800aebc:	4574      	cmp	r4, lr
 800aebe:	bf38      	it	cc
 800aec0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800aec4:	2800      	cmp	r0, #0
 800aec6:	da05      	bge.n	800aed4 <__ieee754_fmod+0x1a0>
 800aec8:	0fe0      	lsrs	r0, r4, #31
 800aeca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800aece:	0064      	lsls	r4, r4, #1
 800aed0:	3901      	subs	r1, #1
 800aed2:	e78b      	b.n	800adec <__ieee754_fmod+0xb8>
 800aed4:	ea50 0307 	orrs.w	r3, r0, r7
 800aed8:	f43f af5f 	beq.w	800ad9a <__ieee754_fmod+0x66>
 800aedc:	0ffb      	lsrs	r3, r7, #31
 800aede:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800aee2:	007c      	lsls	r4, r7, #1
 800aee4:	e7f4      	b.n	800aed0 <__ieee754_fmod+0x19c>
 800aee6:	0fe1      	lsrs	r1, r4, #31
 800aee8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800aeec:	0064      	lsls	r4, r4, #1
 800aeee:	3a01      	subs	r2, #1
 800aef0:	e78c      	b.n	800ae0c <__ieee754_fmod+0xd8>
 800aef2:	1a89      	subs	r1, r1, r2
 800aef4:	2914      	cmp	r1, #20
 800aef6:	dc0a      	bgt.n	800af0e <__ieee754_fmod+0x1da>
 800aef8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800aefc:	fa03 f202 	lsl.w	r2, r3, r2
 800af00:	40cc      	lsrs	r4, r1
 800af02:	4322      	orrs	r2, r4
 800af04:	410b      	asrs	r3, r1
 800af06:	ea43 0105 	orr.w	r1, r3, r5
 800af0a:	4610      	mov	r0, r2
 800af0c:	e735      	b.n	800ad7a <__ieee754_fmod+0x46>
 800af0e:	291f      	cmp	r1, #31
 800af10:	dc07      	bgt.n	800af22 <__ieee754_fmod+0x1ee>
 800af12:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800af16:	40cc      	lsrs	r4, r1
 800af18:	fa03 f202 	lsl.w	r2, r3, r2
 800af1c:	4322      	orrs	r2, r4
 800af1e:	462b      	mov	r3, r5
 800af20:	e7f1      	b.n	800af06 <__ieee754_fmod+0x1d2>
 800af22:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800af26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af2a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800af2e:	32e2      	adds	r2, #226	; 0xe2
 800af30:	fa43 f202 	asr.w	r2, r3, r2
 800af34:	e7f3      	b.n	800af1e <__ieee754_fmod+0x1ea>
 800af36:	bf00      	nop
 800af38:	7fefffff 	.word	0x7fefffff
 800af3c:	7ff00000 	.word	0x7ff00000
 800af40:	0800f6d8 	.word	0x0800f6d8
 800af44:	fffffbed 	.word	0xfffffbed
 800af48:	fffffc02 	.word	0xfffffc02
 800af4c:	fffffbe2 	.word	0xfffffbe2

0800af50 <__ieee754_pow>:
 800af50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	ed2d 8b06 	vpush	{d8-d10}
 800af58:	b089      	sub	sp, #36	; 0x24
 800af5a:	ed8d 1b00 	vstr	d1, [sp]
 800af5e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800af62:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800af66:	ea58 0102 	orrs.w	r1, r8, r2
 800af6a:	ec57 6b10 	vmov	r6, r7, d0
 800af6e:	d115      	bne.n	800af9c <__ieee754_pow+0x4c>
 800af70:	19b3      	adds	r3, r6, r6
 800af72:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800af76:	4152      	adcs	r2, r2
 800af78:	4299      	cmp	r1, r3
 800af7a:	4b89      	ldr	r3, [pc, #548]	; (800b1a0 <__ieee754_pow+0x250>)
 800af7c:	4193      	sbcs	r3, r2
 800af7e:	f080 84d1 	bcs.w	800b924 <__ieee754_pow+0x9d4>
 800af82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af86:	4630      	mov	r0, r6
 800af88:	4639      	mov	r1, r7
 800af8a:	f7f5 f977 	bl	800027c <__adddf3>
 800af8e:	ec41 0b10 	vmov	d0, r0, r1
 800af92:	b009      	add	sp, #36	; 0x24
 800af94:	ecbd 8b06 	vpop	{d8-d10}
 800af98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9c:	4b81      	ldr	r3, [pc, #516]	; (800b1a4 <__ieee754_pow+0x254>)
 800af9e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800afa2:	429c      	cmp	r4, r3
 800afa4:	ee10 aa10 	vmov	sl, s0
 800afa8:	463d      	mov	r5, r7
 800afaa:	dc06      	bgt.n	800afba <__ieee754_pow+0x6a>
 800afac:	d101      	bne.n	800afb2 <__ieee754_pow+0x62>
 800afae:	2e00      	cmp	r6, #0
 800afb0:	d1e7      	bne.n	800af82 <__ieee754_pow+0x32>
 800afb2:	4598      	cmp	r8, r3
 800afb4:	dc01      	bgt.n	800afba <__ieee754_pow+0x6a>
 800afb6:	d10f      	bne.n	800afd8 <__ieee754_pow+0x88>
 800afb8:	b172      	cbz	r2, 800afd8 <__ieee754_pow+0x88>
 800afba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800afbe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800afc2:	ea55 050a 	orrs.w	r5, r5, sl
 800afc6:	d1dc      	bne.n	800af82 <__ieee754_pow+0x32>
 800afc8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800afcc:	18db      	adds	r3, r3, r3
 800afce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800afd2:	4152      	adcs	r2, r2
 800afd4:	429d      	cmp	r5, r3
 800afd6:	e7d0      	b.n	800af7a <__ieee754_pow+0x2a>
 800afd8:	2d00      	cmp	r5, #0
 800afda:	da3b      	bge.n	800b054 <__ieee754_pow+0x104>
 800afdc:	4b72      	ldr	r3, [pc, #456]	; (800b1a8 <__ieee754_pow+0x258>)
 800afde:	4598      	cmp	r8, r3
 800afe0:	dc51      	bgt.n	800b086 <__ieee754_pow+0x136>
 800afe2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800afe6:	4598      	cmp	r8, r3
 800afe8:	f340 84ab 	ble.w	800b942 <__ieee754_pow+0x9f2>
 800afec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aff0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aff4:	2b14      	cmp	r3, #20
 800aff6:	dd0f      	ble.n	800b018 <__ieee754_pow+0xc8>
 800aff8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800affc:	fa22 f103 	lsr.w	r1, r2, r3
 800b000:	fa01 f303 	lsl.w	r3, r1, r3
 800b004:	4293      	cmp	r3, r2
 800b006:	f040 849c 	bne.w	800b942 <__ieee754_pow+0x9f2>
 800b00a:	f001 0101 	and.w	r1, r1, #1
 800b00e:	f1c1 0302 	rsb	r3, r1, #2
 800b012:	9304      	str	r3, [sp, #16]
 800b014:	b182      	cbz	r2, 800b038 <__ieee754_pow+0xe8>
 800b016:	e05f      	b.n	800b0d8 <__ieee754_pow+0x188>
 800b018:	2a00      	cmp	r2, #0
 800b01a:	d15b      	bne.n	800b0d4 <__ieee754_pow+0x184>
 800b01c:	f1c3 0314 	rsb	r3, r3, #20
 800b020:	fa48 f103 	asr.w	r1, r8, r3
 800b024:	fa01 f303 	lsl.w	r3, r1, r3
 800b028:	4543      	cmp	r3, r8
 800b02a:	f040 8487 	bne.w	800b93c <__ieee754_pow+0x9ec>
 800b02e:	f001 0101 	and.w	r1, r1, #1
 800b032:	f1c1 0302 	rsb	r3, r1, #2
 800b036:	9304      	str	r3, [sp, #16]
 800b038:	4b5c      	ldr	r3, [pc, #368]	; (800b1ac <__ieee754_pow+0x25c>)
 800b03a:	4598      	cmp	r8, r3
 800b03c:	d132      	bne.n	800b0a4 <__ieee754_pow+0x154>
 800b03e:	f1b9 0f00 	cmp.w	r9, #0
 800b042:	f280 8477 	bge.w	800b934 <__ieee754_pow+0x9e4>
 800b046:	4959      	ldr	r1, [pc, #356]	; (800b1ac <__ieee754_pow+0x25c>)
 800b048:	4632      	mov	r2, r6
 800b04a:	463b      	mov	r3, r7
 800b04c:	2000      	movs	r0, #0
 800b04e:	f7f5 fbf5 	bl	800083c <__aeabi_ddiv>
 800b052:	e79c      	b.n	800af8e <__ieee754_pow+0x3e>
 800b054:	2300      	movs	r3, #0
 800b056:	9304      	str	r3, [sp, #16]
 800b058:	2a00      	cmp	r2, #0
 800b05a:	d13d      	bne.n	800b0d8 <__ieee754_pow+0x188>
 800b05c:	4b51      	ldr	r3, [pc, #324]	; (800b1a4 <__ieee754_pow+0x254>)
 800b05e:	4598      	cmp	r8, r3
 800b060:	d1ea      	bne.n	800b038 <__ieee754_pow+0xe8>
 800b062:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b066:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b06a:	ea53 030a 	orrs.w	r3, r3, sl
 800b06e:	f000 8459 	beq.w	800b924 <__ieee754_pow+0x9d4>
 800b072:	4b4f      	ldr	r3, [pc, #316]	; (800b1b0 <__ieee754_pow+0x260>)
 800b074:	429c      	cmp	r4, r3
 800b076:	dd08      	ble.n	800b08a <__ieee754_pow+0x13a>
 800b078:	f1b9 0f00 	cmp.w	r9, #0
 800b07c:	f2c0 8456 	blt.w	800b92c <__ieee754_pow+0x9dc>
 800b080:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b084:	e783      	b.n	800af8e <__ieee754_pow+0x3e>
 800b086:	2302      	movs	r3, #2
 800b088:	e7e5      	b.n	800b056 <__ieee754_pow+0x106>
 800b08a:	f1b9 0f00 	cmp.w	r9, #0
 800b08e:	f04f 0000 	mov.w	r0, #0
 800b092:	f04f 0100 	mov.w	r1, #0
 800b096:	f6bf af7a 	bge.w	800af8e <__ieee754_pow+0x3e>
 800b09a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b09e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b0a2:	e774      	b.n	800af8e <__ieee754_pow+0x3e>
 800b0a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b0a8:	d106      	bne.n	800b0b8 <__ieee754_pow+0x168>
 800b0aa:	4632      	mov	r2, r6
 800b0ac:	463b      	mov	r3, r7
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	f7f5 fa99 	bl	80005e8 <__aeabi_dmul>
 800b0b6:	e76a      	b.n	800af8e <__ieee754_pow+0x3e>
 800b0b8:	4b3e      	ldr	r3, [pc, #248]	; (800b1b4 <__ieee754_pow+0x264>)
 800b0ba:	4599      	cmp	r9, r3
 800b0bc:	d10c      	bne.n	800b0d8 <__ieee754_pow+0x188>
 800b0be:	2d00      	cmp	r5, #0
 800b0c0:	db0a      	blt.n	800b0d8 <__ieee754_pow+0x188>
 800b0c2:	ec47 6b10 	vmov	d0, r6, r7
 800b0c6:	b009      	add	sp, #36	; 0x24
 800b0c8:	ecbd 8b06 	vpop	{d8-d10}
 800b0cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d0:	f7ff b8f2 	b.w	800a2b8 <__ieee754_sqrt>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	9304      	str	r3, [sp, #16]
 800b0d8:	ec47 6b10 	vmov	d0, r6, r7
 800b0dc:	f7ff f874 	bl	800a1c8 <fabs>
 800b0e0:	ec51 0b10 	vmov	r0, r1, d0
 800b0e4:	f1ba 0f00 	cmp.w	sl, #0
 800b0e8:	d129      	bne.n	800b13e <__ieee754_pow+0x1ee>
 800b0ea:	b124      	cbz	r4, 800b0f6 <__ieee754_pow+0x1a6>
 800b0ec:	4b2f      	ldr	r3, [pc, #188]	; (800b1ac <__ieee754_pow+0x25c>)
 800b0ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d123      	bne.n	800b13e <__ieee754_pow+0x1ee>
 800b0f6:	f1b9 0f00 	cmp.w	r9, #0
 800b0fa:	da05      	bge.n	800b108 <__ieee754_pow+0x1b8>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	2000      	movs	r0, #0
 800b102:	492a      	ldr	r1, [pc, #168]	; (800b1ac <__ieee754_pow+0x25c>)
 800b104:	f7f5 fb9a 	bl	800083c <__aeabi_ddiv>
 800b108:	2d00      	cmp	r5, #0
 800b10a:	f6bf af40 	bge.w	800af8e <__ieee754_pow+0x3e>
 800b10e:	9b04      	ldr	r3, [sp, #16]
 800b110:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b114:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b118:	431c      	orrs	r4, r3
 800b11a:	d108      	bne.n	800b12e <__ieee754_pow+0x1de>
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	4610      	mov	r0, r2
 800b122:	4619      	mov	r1, r3
 800b124:	f7f5 f8a8 	bl	8000278 <__aeabi_dsub>
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	e78f      	b.n	800b04e <__ieee754_pow+0xfe>
 800b12e:	9b04      	ldr	r3, [sp, #16]
 800b130:	2b01      	cmp	r3, #1
 800b132:	f47f af2c 	bne.w	800af8e <__ieee754_pow+0x3e>
 800b136:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b13a:	4619      	mov	r1, r3
 800b13c:	e727      	b.n	800af8e <__ieee754_pow+0x3e>
 800b13e:	0feb      	lsrs	r3, r5, #31
 800b140:	3b01      	subs	r3, #1
 800b142:	9306      	str	r3, [sp, #24]
 800b144:	9a06      	ldr	r2, [sp, #24]
 800b146:	9b04      	ldr	r3, [sp, #16]
 800b148:	4313      	orrs	r3, r2
 800b14a:	d102      	bne.n	800b152 <__ieee754_pow+0x202>
 800b14c:	4632      	mov	r2, r6
 800b14e:	463b      	mov	r3, r7
 800b150:	e7e6      	b.n	800b120 <__ieee754_pow+0x1d0>
 800b152:	4b19      	ldr	r3, [pc, #100]	; (800b1b8 <__ieee754_pow+0x268>)
 800b154:	4598      	cmp	r8, r3
 800b156:	f340 80fb 	ble.w	800b350 <__ieee754_pow+0x400>
 800b15a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b15e:	4598      	cmp	r8, r3
 800b160:	4b13      	ldr	r3, [pc, #76]	; (800b1b0 <__ieee754_pow+0x260>)
 800b162:	dd0c      	ble.n	800b17e <__ieee754_pow+0x22e>
 800b164:	429c      	cmp	r4, r3
 800b166:	dc0f      	bgt.n	800b188 <__ieee754_pow+0x238>
 800b168:	f1b9 0f00 	cmp.w	r9, #0
 800b16c:	da0f      	bge.n	800b18e <__ieee754_pow+0x23e>
 800b16e:	2000      	movs	r0, #0
 800b170:	b009      	add	sp, #36	; 0x24
 800b172:	ecbd 8b06 	vpop	{d8-d10}
 800b176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17a:	f001 b862 	b.w	800c242 <__math_oflow>
 800b17e:	429c      	cmp	r4, r3
 800b180:	dbf2      	blt.n	800b168 <__ieee754_pow+0x218>
 800b182:	4b0a      	ldr	r3, [pc, #40]	; (800b1ac <__ieee754_pow+0x25c>)
 800b184:	429c      	cmp	r4, r3
 800b186:	dd19      	ble.n	800b1bc <__ieee754_pow+0x26c>
 800b188:	f1b9 0f00 	cmp.w	r9, #0
 800b18c:	dcef      	bgt.n	800b16e <__ieee754_pow+0x21e>
 800b18e:	2000      	movs	r0, #0
 800b190:	b009      	add	sp, #36	; 0x24
 800b192:	ecbd 8b06 	vpop	{d8-d10}
 800b196:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19a:	f001 b849 	b.w	800c230 <__math_uflow>
 800b19e:	bf00      	nop
 800b1a0:	fff00000 	.word	0xfff00000
 800b1a4:	7ff00000 	.word	0x7ff00000
 800b1a8:	433fffff 	.word	0x433fffff
 800b1ac:	3ff00000 	.word	0x3ff00000
 800b1b0:	3fefffff 	.word	0x3fefffff
 800b1b4:	3fe00000 	.word	0x3fe00000
 800b1b8:	41e00000 	.word	0x41e00000
 800b1bc:	4b60      	ldr	r3, [pc, #384]	; (800b340 <__ieee754_pow+0x3f0>)
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f7f5 f85a 	bl	8000278 <__aeabi_dsub>
 800b1c4:	a354      	add	r3, pc, #336	; (adr r3, 800b318 <__ieee754_pow+0x3c8>)
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	460d      	mov	r5, r1
 800b1ce:	f7f5 fa0b 	bl	80005e8 <__aeabi_dmul>
 800b1d2:	a353      	add	r3, pc, #332	; (adr r3, 800b320 <__ieee754_pow+0x3d0>)
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	4606      	mov	r6, r0
 800b1da:	460f      	mov	r7, r1
 800b1dc:	4620      	mov	r0, r4
 800b1de:	4629      	mov	r1, r5
 800b1e0:	f7f5 fa02 	bl	80005e8 <__aeabi_dmul>
 800b1e4:	4b57      	ldr	r3, [pc, #348]	; (800b344 <__ieee754_pow+0x3f4>)
 800b1e6:	4682      	mov	sl, r0
 800b1e8:	468b      	mov	fp, r1
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	4629      	mov	r1, r5
 800b1f0:	f7f5 f9fa 	bl	80005e8 <__aeabi_dmul>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	a14b      	add	r1, pc, #300	; (adr r1, 800b328 <__ieee754_pow+0x3d8>)
 800b1fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1fe:	f7f5 f83b 	bl	8000278 <__aeabi_dsub>
 800b202:	4622      	mov	r2, r4
 800b204:	462b      	mov	r3, r5
 800b206:	f7f5 f9ef 	bl	80005e8 <__aeabi_dmul>
 800b20a:	4602      	mov	r2, r0
 800b20c:	460b      	mov	r3, r1
 800b20e:	2000      	movs	r0, #0
 800b210:	494d      	ldr	r1, [pc, #308]	; (800b348 <__ieee754_pow+0x3f8>)
 800b212:	f7f5 f831 	bl	8000278 <__aeabi_dsub>
 800b216:	4622      	mov	r2, r4
 800b218:	4680      	mov	r8, r0
 800b21a:	4689      	mov	r9, r1
 800b21c:	462b      	mov	r3, r5
 800b21e:	4620      	mov	r0, r4
 800b220:	4629      	mov	r1, r5
 800b222:	f7f5 f9e1 	bl	80005e8 <__aeabi_dmul>
 800b226:	4602      	mov	r2, r0
 800b228:	460b      	mov	r3, r1
 800b22a:	4640      	mov	r0, r8
 800b22c:	4649      	mov	r1, r9
 800b22e:	f7f5 f9db 	bl	80005e8 <__aeabi_dmul>
 800b232:	a33f      	add	r3, pc, #252	; (adr r3, 800b330 <__ieee754_pow+0x3e0>)
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	f7f5 f9d6 	bl	80005e8 <__aeabi_dmul>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4650      	mov	r0, sl
 800b242:	4659      	mov	r1, fp
 800b244:	f7f5 f818 	bl	8000278 <__aeabi_dsub>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4680      	mov	r8, r0
 800b24e:	4689      	mov	r9, r1
 800b250:	4630      	mov	r0, r6
 800b252:	4639      	mov	r1, r7
 800b254:	f7f5 f812 	bl	800027c <__adddf3>
 800b258:	2000      	movs	r0, #0
 800b25a:	4632      	mov	r2, r6
 800b25c:	463b      	mov	r3, r7
 800b25e:	4604      	mov	r4, r0
 800b260:	460d      	mov	r5, r1
 800b262:	f7f5 f809 	bl	8000278 <__aeabi_dsub>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	4640      	mov	r0, r8
 800b26c:	4649      	mov	r1, r9
 800b26e:	f7f5 f803 	bl	8000278 <__aeabi_dsub>
 800b272:	9b04      	ldr	r3, [sp, #16]
 800b274:	9a06      	ldr	r2, [sp, #24]
 800b276:	3b01      	subs	r3, #1
 800b278:	4313      	orrs	r3, r2
 800b27a:	4682      	mov	sl, r0
 800b27c:	468b      	mov	fp, r1
 800b27e:	f040 81e7 	bne.w	800b650 <__ieee754_pow+0x700>
 800b282:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b338 <__ieee754_pow+0x3e8>
 800b286:	eeb0 8a47 	vmov.f32	s16, s14
 800b28a:	eef0 8a67 	vmov.f32	s17, s15
 800b28e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b292:	2600      	movs	r6, #0
 800b294:	4632      	mov	r2, r6
 800b296:	463b      	mov	r3, r7
 800b298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b29c:	f7f4 ffec 	bl	8000278 <__aeabi_dsub>
 800b2a0:	4622      	mov	r2, r4
 800b2a2:	462b      	mov	r3, r5
 800b2a4:	f7f5 f9a0 	bl	80005e8 <__aeabi_dmul>
 800b2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2ac:	4680      	mov	r8, r0
 800b2ae:	4689      	mov	r9, r1
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	4659      	mov	r1, fp
 800b2b4:	f7f5 f998 	bl	80005e8 <__aeabi_dmul>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4640      	mov	r0, r8
 800b2be:	4649      	mov	r1, r9
 800b2c0:	f7f4 ffdc 	bl	800027c <__adddf3>
 800b2c4:	4632      	mov	r2, r6
 800b2c6:	463b      	mov	r3, r7
 800b2c8:	4680      	mov	r8, r0
 800b2ca:	4689      	mov	r9, r1
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	f7f5 f98a 	bl	80005e8 <__aeabi_dmul>
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	460d      	mov	r5, r1
 800b2da:	4602      	mov	r2, r0
 800b2dc:	4649      	mov	r1, r9
 800b2de:	4640      	mov	r0, r8
 800b2e0:	f7f4 ffcc 	bl	800027c <__adddf3>
 800b2e4:	4b19      	ldr	r3, [pc, #100]	; (800b34c <__ieee754_pow+0x3fc>)
 800b2e6:	4299      	cmp	r1, r3
 800b2e8:	ec45 4b19 	vmov	d9, r4, r5
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	460f      	mov	r7, r1
 800b2f0:	468b      	mov	fp, r1
 800b2f2:	f340 82f0 	ble.w	800b8d6 <__ieee754_pow+0x986>
 800b2f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b2fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b2fe:	4303      	orrs	r3, r0
 800b300:	f000 81e4 	beq.w	800b6cc <__ieee754_pow+0x77c>
 800b304:	ec51 0b18 	vmov	r0, r1, d8
 800b308:	2200      	movs	r2, #0
 800b30a:	2300      	movs	r3, #0
 800b30c:	f7f5 fbde 	bl	8000acc <__aeabi_dcmplt>
 800b310:	3800      	subs	r0, #0
 800b312:	bf18      	it	ne
 800b314:	2001      	movne	r0, #1
 800b316:	e72b      	b.n	800b170 <__ieee754_pow+0x220>
 800b318:	60000000 	.word	0x60000000
 800b31c:	3ff71547 	.word	0x3ff71547
 800b320:	f85ddf44 	.word	0xf85ddf44
 800b324:	3e54ae0b 	.word	0x3e54ae0b
 800b328:	55555555 	.word	0x55555555
 800b32c:	3fd55555 	.word	0x3fd55555
 800b330:	652b82fe 	.word	0x652b82fe
 800b334:	3ff71547 	.word	0x3ff71547
 800b338:	00000000 	.word	0x00000000
 800b33c:	bff00000 	.word	0xbff00000
 800b340:	3ff00000 	.word	0x3ff00000
 800b344:	3fd00000 	.word	0x3fd00000
 800b348:	3fe00000 	.word	0x3fe00000
 800b34c:	408fffff 	.word	0x408fffff
 800b350:	4bd5      	ldr	r3, [pc, #852]	; (800b6a8 <__ieee754_pow+0x758>)
 800b352:	402b      	ands	r3, r5
 800b354:	2200      	movs	r2, #0
 800b356:	b92b      	cbnz	r3, 800b364 <__ieee754_pow+0x414>
 800b358:	4bd4      	ldr	r3, [pc, #848]	; (800b6ac <__ieee754_pow+0x75c>)
 800b35a:	f7f5 f945 	bl	80005e8 <__aeabi_dmul>
 800b35e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b362:	460c      	mov	r4, r1
 800b364:	1523      	asrs	r3, r4, #20
 800b366:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b36a:	4413      	add	r3, r2
 800b36c:	9305      	str	r3, [sp, #20]
 800b36e:	4bd0      	ldr	r3, [pc, #832]	; (800b6b0 <__ieee754_pow+0x760>)
 800b370:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b374:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b378:	429c      	cmp	r4, r3
 800b37a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b37e:	dd08      	ble.n	800b392 <__ieee754_pow+0x442>
 800b380:	4bcc      	ldr	r3, [pc, #816]	; (800b6b4 <__ieee754_pow+0x764>)
 800b382:	429c      	cmp	r4, r3
 800b384:	f340 8162 	ble.w	800b64c <__ieee754_pow+0x6fc>
 800b388:	9b05      	ldr	r3, [sp, #20]
 800b38a:	3301      	adds	r3, #1
 800b38c:	9305      	str	r3, [sp, #20]
 800b38e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b392:	2400      	movs	r4, #0
 800b394:	00e3      	lsls	r3, r4, #3
 800b396:	9307      	str	r3, [sp, #28]
 800b398:	4bc7      	ldr	r3, [pc, #796]	; (800b6b8 <__ieee754_pow+0x768>)
 800b39a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b39e:	ed93 7b00 	vldr	d7, [r3]
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	ec53 2b17 	vmov	r2, r3, d7
 800b3a8:	eeb0 9a47 	vmov.f32	s18, s14
 800b3ac:	eef0 9a67 	vmov.f32	s19, s15
 800b3b0:	4682      	mov	sl, r0
 800b3b2:	f7f4 ff61 	bl	8000278 <__aeabi_dsub>
 800b3b6:	4652      	mov	r2, sl
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	460f      	mov	r7, r1
 800b3bc:	462b      	mov	r3, r5
 800b3be:	ec51 0b19 	vmov	r0, r1, d9
 800b3c2:	f7f4 ff5b 	bl	800027c <__adddf3>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	49bb      	ldr	r1, [pc, #748]	; (800b6bc <__ieee754_pow+0x76c>)
 800b3ce:	f7f5 fa35 	bl	800083c <__aeabi_ddiv>
 800b3d2:	ec41 0b1a 	vmov	d10, r0, r1
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	4630      	mov	r0, r6
 800b3dc:	4639      	mov	r1, r7
 800b3de:	f7f5 f903 	bl	80005e8 <__aeabi_dmul>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3e8:	9302      	str	r3, [sp, #8]
 800b3ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b3ee:	46ab      	mov	fp, r5
 800b3f0:	106d      	asrs	r5, r5, #1
 800b3f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b3f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b3fa:	ec41 0b18 	vmov	d8, r0, r1
 800b3fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b402:	2200      	movs	r2, #0
 800b404:	4640      	mov	r0, r8
 800b406:	4649      	mov	r1, r9
 800b408:	4614      	mov	r4, r2
 800b40a:	461d      	mov	r5, r3
 800b40c:	f7f5 f8ec 	bl	80005e8 <__aeabi_dmul>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	4630      	mov	r0, r6
 800b416:	4639      	mov	r1, r7
 800b418:	f7f4 ff2e 	bl	8000278 <__aeabi_dsub>
 800b41c:	ec53 2b19 	vmov	r2, r3, d9
 800b420:	4606      	mov	r6, r0
 800b422:	460f      	mov	r7, r1
 800b424:	4620      	mov	r0, r4
 800b426:	4629      	mov	r1, r5
 800b428:	f7f4 ff26 	bl	8000278 <__aeabi_dsub>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4650      	mov	r0, sl
 800b432:	4659      	mov	r1, fp
 800b434:	f7f4 ff20 	bl	8000278 <__aeabi_dsub>
 800b438:	4642      	mov	r2, r8
 800b43a:	464b      	mov	r3, r9
 800b43c:	f7f5 f8d4 	bl	80005e8 <__aeabi_dmul>
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	4630      	mov	r0, r6
 800b446:	4639      	mov	r1, r7
 800b448:	f7f4 ff16 	bl	8000278 <__aeabi_dsub>
 800b44c:	ec53 2b1a 	vmov	r2, r3, d10
 800b450:	f7f5 f8ca 	bl	80005e8 <__aeabi_dmul>
 800b454:	ec53 2b18 	vmov	r2, r3, d8
 800b458:	ec41 0b19 	vmov	d9, r0, r1
 800b45c:	ec51 0b18 	vmov	r0, r1, d8
 800b460:	f7f5 f8c2 	bl	80005e8 <__aeabi_dmul>
 800b464:	a37c      	add	r3, pc, #496	; (adr r3, 800b658 <__ieee754_pow+0x708>)
 800b466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46a:	4604      	mov	r4, r0
 800b46c:	460d      	mov	r5, r1
 800b46e:	f7f5 f8bb 	bl	80005e8 <__aeabi_dmul>
 800b472:	a37b      	add	r3, pc, #492	; (adr r3, 800b660 <__ieee754_pow+0x710>)
 800b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b478:	f7f4 ff00 	bl	800027c <__adddf3>
 800b47c:	4622      	mov	r2, r4
 800b47e:	462b      	mov	r3, r5
 800b480:	f7f5 f8b2 	bl	80005e8 <__aeabi_dmul>
 800b484:	a378      	add	r3, pc, #480	; (adr r3, 800b668 <__ieee754_pow+0x718>)
 800b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48a:	f7f4 fef7 	bl	800027c <__adddf3>
 800b48e:	4622      	mov	r2, r4
 800b490:	462b      	mov	r3, r5
 800b492:	f7f5 f8a9 	bl	80005e8 <__aeabi_dmul>
 800b496:	a376      	add	r3, pc, #472	; (adr r3, 800b670 <__ieee754_pow+0x720>)
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	f7f4 feee 	bl	800027c <__adddf3>
 800b4a0:	4622      	mov	r2, r4
 800b4a2:	462b      	mov	r3, r5
 800b4a4:	f7f5 f8a0 	bl	80005e8 <__aeabi_dmul>
 800b4a8:	a373      	add	r3, pc, #460	; (adr r3, 800b678 <__ieee754_pow+0x728>)
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	f7f4 fee5 	bl	800027c <__adddf3>
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	462b      	mov	r3, r5
 800b4b6:	f7f5 f897 	bl	80005e8 <__aeabi_dmul>
 800b4ba:	a371      	add	r3, pc, #452	; (adr r3, 800b680 <__ieee754_pow+0x730>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f7f4 fedc 	bl	800027c <__adddf3>
 800b4c4:	4622      	mov	r2, r4
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	460f      	mov	r7, r1
 800b4ca:	462b      	mov	r3, r5
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	f7f5 f88a 	bl	80005e8 <__aeabi_dmul>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4639      	mov	r1, r7
 800b4dc:	f7f5 f884 	bl	80005e8 <__aeabi_dmul>
 800b4e0:	4642      	mov	r2, r8
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	460d      	mov	r5, r1
 800b4e6:	464b      	mov	r3, r9
 800b4e8:	ec51 0b18 	vmov	r0, r1, d8
 800b4ec:	f7f4 fec6 	bl	800027c <__adddf3>
 800b4f0:	ec53 2b19 	vmov	r2, r3, d9
 800b4f4:	f7f5 f878 	bl	80005e8 <__aeabi_dmul>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	f7f4 febe 	bl	800027c <__adddf3>
 800b500:	4642      	mov	r2, r8
 800b502:	4682      	mov	sl, r0
 800b504:	468b      	mov	fp, r1
 800b506:	464b      	mov	r3, r9
 800b508:	4640      	mov	r0, r8
 800b50a:	4649      	mov	r1, r9
 800b50c:	f7f5 f86c 	bl	80005e8 <__aeabi_dmul>
 800b510:	4b6b      	ldr	r3, [pc, #428]	; (800b6c0 <__ieee754_pow+0x770>)
 800b512:	2200      	movs	r2, #0
 800b514:	4606      	mov	r6, r0
 800b516:	460f      	mov	r7, r1
 800b518:	f7f4 feb0 	bl	800027c <__adddf3>
 800b51c:	4652      	mov	r2, sl
 800b51e:	465b      	mov	r3, fp
 800b520:	f7f4 feac 	bl	800027c <__adddf3>
 800b524:	2000      	movs	r0, #0
 800b526:	4604      	mov	r4, r0
 800b528:	460d      	mov	r5, r1
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	4640      	mov	r0, r8
 800b530:	4649      	mov	r1, r9
 800b532:	f7f5 f859 	bl	80005e8 <__aeabi_dmul>
 800b536:	4b62      	ldr	r3, [pc, #392]	; (800b6c0 <__ieee754_pow+0x770>)
 800b538:	4680      	mov	r8, r0
 800b53a:	4689      	mov	r9, r1
 800b53c:	2200      	movs	r2, #0
 800b53e:	4620      	mov	r0, r4
 800b540:	4629      	mov	r1, r5
 800b542:	f7f4 fe99 	bl	8000278 <__aeabi_dsub>
 800b546:	4632      	mov	r2, r6
 800b548:	463b      	mov	r3, r7
 800b54a:	f7f4 fe95 	bl	8000278 <__aeabi_dsub>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4650      	mov	r0, sl
 800b554:	4659      	mov	r1, fp
 800b556:	f7f4 fe8f 	bl	8000278 <__aeabi_dsub>
 800b55a:	ec53 2b18 	vmov	r2, r3, d8
 800b55e:	f7f5 f843 	bl	80005e8 <__aeabi_dmul>
 800b562:	4622      	mov	r2, r4
 800b564:	4606      	mov	r6, r0
 800b566:	460f      	mov	r7, r1
 800b568:	462b      	mov	r3, r5
 800b56a:	ec51 0b19 	vmov	r0, r1, d9
 800b56e:	f7f5 f83b 	bl	80005e8 <__aeabi_dmul>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	4630      	mov	r0, r6
 800b578:	4639      	mov	r1, r7
 800b57a:	f7f4 fe7f 	bl	800027c <__adddf3>
 800b57e:	4606      	mov	r6, r0
 800b580:	460f      	mov	r7, r1
 800b582:	4602      	mov	r2, r0
 800b584:	460b      	mov	r3, r1
 800b586:	4640      	mov	r0, r8
 800b588:	4649      	mov	r1, r9
 800b58a:	f7f4 fe77 	bl	800027c <__adddf3>
 800b58e:	a33e      	add	r3, pc, #248	; (adr r3, 800b688 <__ieee754_pow+0x738>)
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	2000      	movs	r0, #0
 800b596:	4604      	mov	r4, r0
 800b598:	460d      	mov	r5, r1
 800b59a:	f7f5 f825 	bl	80005e8 <__aeabi_dmul>
 800b59e:	4642      	mov	r2, r8
 800b5a0:	ec41 0b18 	vmov	d8, r0, r1
 800b5a4:	464b      	mov	r3, r9
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	f7f4 fe65 	bl	8000278 <__aeabi_dsub>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	4639      	mov	r1, r7
 800b5b6:	f7f4 fe5f 	bl	8000278 <__aeabi_dsub>
 800b5ba:	a335      	add	r3, pc, #212	; (adr r3, 800b690 <__ieee754_pow+0x740>)
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	f7f5 f812 	bl	80005e8 <__aeabi_dmul>
 800b5c4:	a334      	add	r3, pc, #208	; (adr r3, 800b698 <__ieee754_pow+0x748>)
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	460f      	mov	r7, r1
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	f7f5 f809 	bl	80005e8 <__aeabi_dmul>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4630      	mov	r0, r6
 800b5dc:	4639      	mov	r1, r7
 800b5de:	f7f4 fe4d 	bl	800027c <__adddf3>
 800b5e2:	9a07      	ldr	r2, [sp, #28]
 800b5e4:	4b37      	ldr	r3, [pc, #220]	; (800b6c4 <__ieee754_pow+0x774>)
 800b5e6:	4413      	add	r3, r2
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	f7f4 fe46 	bl	800027c <__adddf3>
 800b5f0:	4682      	mov	sl, r0
 800b5f2:	9805      	ldr	r0, [sp, #20]
 800b5f4:	468b      	mov	fp, r1
 800b5f6:	f7f4 ff8d 	bl	8000514 <__aeabi_i2d>
 800b5fa:	9a07      	ldr	r2, [sp, #28]
 800b5fc:	4b32      	ldr	r3, [pc, #200]	; (800b6c8 <__ieee754_pow+0x778>)
 800b5fe:	4413      	add	r3, r2
 800b600:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b604:	4606      	mov	r6, r0
 800b606:	460f      	mov	r7, r1
 800b608:	4652      	mov	r2, sl
 800b60a:	465b      	mov	r3, fp
 800b60c:	ec51 0b18 	vmov	r0, r1, d8
 800b610:	f7f4 fe34 	bl	800027c <__adddf3>
 800b614:	4642      	mov	r2, r8
 800b616:	464b      	mov	r3, r9
 800b618:	f7f4 fe30 	bl	800027c <__adddf3>
 800b61c:	4632      	mov	r2, r6
 800b61e:	463b      	mov	r3, r7
 800b620:	f7f4 fe2c 	bl	800027c <__adddf3>
 800b624:	2000      	movs	r0, #0
 800b626:	4632      	mov	r2, r6
 800b628:	463b      	mov	r3, r7
 800b62a:	4604      	mov	r4, r0
 800b62c:	460d      	mov	r5, r1
 800b62e:	f7f4 fe23 	bl	8000278 <__aeabi_dsub>
 800b632:	4642      	mov	r2, r8
 800b634:	464b      	mov	r3, r9
 800b636:	f7f4 fe1f 	bl	8000278 <__aeabi_dsub>
 800b63a:	ec53 2b18 	vmov	r2, r3, d8
 800b63e:	f7f4 fe1b 	bl	8000278 <__aeabi_dsub>
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	4650      	mov	r0, sl
 800b648:	4659      	mov	r1, fp
 800b64a:	e610      	b.n	800b26e <__ieee754_pow+0x31e>
 800b64c:	2401      	movs	r4, #1
 800b64e:	e6a1      	b.n	800b394 <__ieee754_pow+0x444>
 800b650:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b6a0 <__ieee754_pow+0x750>
 800b654:	e617      	b.n	800b286 <__ieee754_pow+0x336>
 800b656:	bf00      	nop
 800b658:	4a454eef 	.word	0x4a454eef
 800b65c:	3fca7e28 	.word	0x3fca7e28
 800b660:	93c9db65 	.word	0x93c9db65
 800b664:	3fcd864a 	.word	0x3fcd864a
 800b668:	a91d4101 	.word	0xa91d4101
 800b66c:	3fd17460 	.word	0x3fd17460
 800b670:	518f264d 	.word	0x518f264d
 800b674:	3fd55555 	.word	0x3fd55555
 800b678:	db6fabff 	.word	0xdb6fabff
 800b67c:	3fdb6db6 	.word	0x3fdb6db6
 800b680:	33333303 	.word	0x33333303
 800b684:	3fe33333 	.word	0x3fe33333
 800b688:	e0000000 	.word	0xe0000000
 800b68c:	3feec709 	.word	0x3feec709
 800b690:	dc3a03fd 	.word	0xdc3a03fd
 800b694:	3feec709 	.word	0x3feec709
 800b698:	145b01f5 	.word	0x145b01f5
 800b69c:	be3e2fe0 	.word	0xbe3e2fe0
 800b6a0:	00000000 	.word	0x00000000
 800b6a4:	3ff00000 	.word	0x3ff00000
 800b6a8:	7ff00000 	.word	0x7ff00000
 800b6ac:	43400000 	.word	0x43400000
 800b6b0:	0003988e 	.word	0x0003988e
 800b6b4:	000bb679 	.word	0x000bb679
 800b6b8:	0800f6e8 	.word	0x0800f6e8
 800b6bc:	3ff00000 	.word	0x3ff00000
 800b6c0:	40080000 	.word	0x40080000
 800b6c4:	0800f708 	.word	0x0800f708
 800b6c8:	0800f6f8 	.word	0x0800f6f8
 800b6cc:	a3b3      	add	r3, pc, #716	; (adr r3, 800b99c <__ieee754_pow+0xa4c>)
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	4640      	mov	r0, r8
 800b6d4:	4649      	mov	r1, r9
 800b6d6:	f7f4 fdd1 	bl	800027c <__adddf3>
 800b6da:	4622      	mov	r2, r4
 800b6dc:	ec41 0b1a 	vmov	d10, r0, r1
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	f7f4 fdc7 	bl	8000278 <__aeabi_dsub>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	ec51 0b1a 	vmov	r0, r1, d10
 800b6f2:	f7f5 fa09 	bl	8000b08 <__aeabi_dcmpgt>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	f47f ae04 	bne.w	800b304 <__ieee754_pow+0x3b4>
 800b6fc:	4aa2      	ldr	r2, [pc, #648]	; (800b988 <__ieee754_pow+0xa38>)
 800b6fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b702:	4293      	cmp	r3, r2
 800b704:	f340 8107 	ble.w	800b916 <__ieee754_pow+0x9c6>
 800b708:	151b      	asrs	r3, r3, #20
 800b70a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b70e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b712:	fa4a fa03 	asr.w	sl, sl, r3
 800b716:	44da      	add	sl, fp
 800b718:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b71c:	489b      	ldr	r0, [pc, #620]	; (800b98c <__ieee754_pow+0xa3c>)
 800b71e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b722:	4108      	asrs	r0, r1
 800b724:	ea00 030a 	and.w	r3, r0, sl
 800b728:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b72c:	f1c1 0114 	rsb	r1, r1, #20
 800b730:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b734:	fa4a fa01 	asr.w	sl, sl, r1
 800b738:	f1bb 0f00 	cmp.w	fp, #0
 800b73c:	f04f 0200 	mov.w	r2, #0
 800b740:	4620      	mov	r0, r4
 800b742:	4629      	mov	r1, r5
 800b744:	bfb8      	it	lt
 800b746:	f1ca 0a00 	rsblt	sl, sl, #0
 800b74a:	f7f4 fd95 	bl	8000278 <__aeabi_dsub>
 800b74e:	ec41 0b19 	vmov	d9, r0, r1
 800b752:	4642      	mov	r2, r8
 800b754:	464b      	mov	r3, r9
 800b756:	ec51 0b19 	vmov	r0, r1, d9
 800b75a:	f7f4 fd8f 	bl	800027c <__adddf3>
 800b75e:	a37a      	add	r3, pc, #488	; (adr r3, 800b948 <__ieee754_pow+0x9f8>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	2000      	movs	r0, #0
 800b766:	4604      	mov	r4, r0
 800b768:	460d      	mov	r5, r1
 800b76a:	f7f4 ff3d 	bl	80005e8 <__aeabi_dmul>
 800b76e:	ec53 2b19 	vmov	r2, r3, d9
 800b772:	4606      	mov	r6, r0
 800b774:	460f      	mov	r7, r1
 800b776:	4620      	mov	r0, r4
 800b778:	4629      	mov	r1, r5
 800b77a:	f7f4 fd7d 	bl	8000278 <__aeabi_dsub>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	4640      	mov	r0, r8
 800b784:	4649      	mov	r1, r9
 800b786:	f7f4 fd77 	bl	8000278 <__aeabi_dsub>
 800b78a:	a371      	add	r3, pc, #452	; (adr r3, 800b950 <__ieee754_pow+0xa00>)
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	f7f4 ff2a 	bl	80005e8 <__aeabi_dmul>
 800b794:	a370      	add	r3, pc, #448	; (adr r3, 800b958 <__ieee754_pow+0xa08>)
 800b796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79a:	4680      	mov	r8, r0
 800b79c:	4689      	mov	r9, r1
 800b79e:	4620      	mov	r0, r4
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	f7f4 ff21 	bl	80005e8 <__aeabi_dmul>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	f7f4 fd65 	bl	800027c <__adddf3>
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	460d      	mov	r5, r1
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	4639      	mov	r1, r7
 800b7be:	f7f4 fd5d 	bl	800027c <__adddf3>
 800b7c2:	4632      	mov	r2, r6
 800b7c4:	463b      	mov	r3, r7
 800b7c6:	4680      	mov	r8, r0
 800b7c8:	4689      	mov	r9, r1
 800b7ca:	f7f4 fd55 	bl	8000278 <__aeabi_dsub>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	f7f4 fd4f 	bl	8000278 <__aeabi_dsub>
 800b7da:	4642      	mov	r2, r8
 800b7dc:	4606      	mov	r6, r0
 800b7de:	460f      	mov	r7, r1
 800b7e0:	464b      	mov	r3, r9
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	f7f4 feff 	bl	80005e8 <__aeabi_dmul>
 800b7ea:	a35d      	add	r3, pc, #372	; (adr r3, 800b960 <__ieee754_pow+0xa10>)
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	460d      	mov	r5, r1
 800b7f4:	f7f4 fef8 	bl	80005e8 <__aeabi_dmul>
 800b7f8:	a35b      	add	r3, pc, #364	; (adr r3, 800b968 <__ieee754_pow+0xa18>)
 800b7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fe:	f7f4 fd3b 	bl	8000278 <__aeabi_dsub>
 800b802:	4622      	mov	r2, r4
 800b804:	462b      	mov	r3, r5
 800b806:	f7f4 feef 	bl	80005e8 <__aeabi_dmul>
 800b80a:	a359      	add	r3, pc, #356	; (adr r3, 800b970 <__ieee754_pow+0xa20>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f7f4 fd34 	bl	800027c <__adddf3>
 800b814:	4622      	mov	r2, r4
 800b816:	462b      	mov	r3, r5
 800b818:	f7f4 fee6 	bl	80005e8 <__aeabi_dmul>
 800b81c:	a356      	add	r3, pc, #344	; (adr r3, 800b978 <__ieee754_pow+0xa28>)
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	f7f4 fd29 	bl	8000278 <__aeabi_dsub>
 800b826:	4622      	mov	r2, r4
 800b828:	462b      	mov	r3, r5
 800b82a:	f7f4 fedd 	bl	80005e8 <__aeabi_dmul>
 800b82e:	a354      	add	r3, pc, #336	; (adr r3, 800b980 <__ieee754_pow+0xa30>)
 800b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b834:	f7f4 fd22 	bl	800027c <__adddf3>
 800b838:	4622      	mov	r2, r4
 800b83a:	462b      	mov	r3, r5
 800b83c:	f7f4 fed4 	bl	80005e8 <__aeabi_dmul>
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	4640      	mov	r0, r8
 800b846:	4649      	mov	r1, r9
 800b848:	f7f4 fd16 	bl	8000278 <__aeabi_dsub>
 800b84c:	4604      	mov	r4, r0
 800b84e:	460d      	mov	r5, r1
 800b850:	4602      	mov	r2, r0
 800b852:	460b      	mov	r3, r1
 800b854:	4640      	mov	r0, r8
 800b856:	4649      	mov	r1, r9
 800b858:	f7f4 fec6 	bl	80005e8 <__aeabi_dmul>
 800b85c:	2200      	movs	r2, #0
 800b85e:	ec41 0b19 	vmov	d9, r0, r1
 800b862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b866:	4620      	mov	r0, r4
 800b868:	4629      	mov	r1, r5
 800b86a:	f7f4 fd05 	bl	8000278 <__aeabi_dsub>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	ec51 0b19 	vmov	r0, r1, d9
 800b876:	f7f4 ffe1 	bl	800083c <__aeabi_ddiv>
 800b87a:	4632      	mov	r2, r6
 800b87c:	4604      	mov	r4, r0
 800b87e:	460d      	mov	r5, r1
 800b880:	463b      	mov	r3, r7
 800b882:	4640      	mov	r0, r8
 800b884:	4649      	mov	r1, r9
 800b886:	f7f4 feaf 	bl	80005e8 <__aeabi_dmul>
 800b88a:	4632      	mov	r2, r6
 800b88c:	463b      	mov	r3, r7
 800b88e:	f7f4 fcf5 	bl	800027c <__adddf3>
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	4620      	mov	r0, r4
 800b898:	4629      	mov	r1, r5
 800b89a:	f7f4 fced 	bl	8000278 <__aeabi_dsub>
 800b89e:	4642      	mov	r2, r8
 800b8a0:	464b      	mov	r3, r9
 800b8a2:	f7f4 fce9 	bl	8000278 <__aeabi_dsub>
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	4939      	ldr	r1, [pc, #228]	; (800b990 <__ieee754_pow+0xa40>)
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	f7f4 fce3 	bl	8000278 <__aeabi_dsub>
 800b8b2:	ec41 0b10 	vmov	d0, r0, r1
 800b8b6:	ee10 3a90 	vmov	r3, s1
 800b8ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b8be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8c2:	da2b      	bge.n	800b91c <__ieee754_pow+0x9cc>
 800b8c4:	4650      	mov	r0, sl
 800b8c6:	f000 fc17 	bl	800c0f8 <scalbn>
 800b8ca:	ec51 0b10 	vmov	r0, r1, d0
 800b8ce:	ec53 2b18 	vmov	r2, r3, d8
 800b8d2:	f7ff bbee 	b.w	800b0b2 <__ieee754_pow+0x162>
 800b8d6:	4b2f      	ldr	r3, [pc, #188]	; (800b994 <__ieee754_pow+0xa44>)
 800b8d8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b8dc:	429e      	cmp	r6, r3
 800b8de:	f77f af0d 	ble.w	800b6fc <__ieee754_pow+0x7ac>
 800b8e2:	4b2d      	ldr	r3, [pc, #180]	; (800b998 <__ieee754_pow+0xa48>)
 800b8e4:	440b      	add	r3, r1
 800b8e6:	4303      	orrs	r3, r0
 800b8e8:	d009      	beq.n	800b8fe <__ieee754_pow+0x9ae>
 800b8ea:	ec51 0b18 	vmov	r0, r1, d8
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	f7f5 f8eb 	bl	8000acc <__aeabi_dcmplt>
 800b8f6:	3800      	subs	r0, #0
 800b8f8:	bf18      	it	ne
 800b8fa:	2001      	movne	r0, #1
 800b8fc:	e448      	b.n	800b190 <__ieee754_pow+0x240>
 800b8fe:	4622      	mov	r2, r4
 800b900:	462b      	mov	r3, r5
 800b902:	f7f4 fcb9 	bl	8000278 <__aeabi_dsub>
 800b906:	4642      	mov	r2, r8
 800b908:	464b      	mov	r3, r9
 800b90a:	f7f5 f8f3 	bl	8000af4 <__aeabi_dcmpge>
 800b90e:	2800      	cmp	r0, #0
 800b910:	f43f aef4 	beq.w	800b6fc <__ieee754_pow+0x7ac>
 800b914:	e7e9      	b.n	800b8ea <__ieee754_pow+0x99a>
 800b916:	f04f 0a00 	mov.w	sl, #0
 800b91a:	e71a      	b.n	800b752 <__ieee754_pow+0x802>
 800b91c:	ec51 0b10 	vmov	r0, r1, d0
 800b920:	4619      	mov	r1, r3
 800b922:	e7d4      	b.n	800b8ce <__ieee754_pow+0x97e>
 800b924:	491a      	ldr	r1, [pc, #104]	; (800b990 <__ieee754_pow+0xa40>)
 800b926:	2000      	movs	r0, #0
 800b928:	f7ff bb31 	b.w	800af8e <__ieee754_pow+0x3e>
 800b92c:	2000      	movs	r0, #0
 800b92e:	2100      	movs	r1, #0
 800b930:	f7ff bb2d 	b.w	800af8e <__ieee754_pow+0x3e>
 800b934:	4630      	mov	r0, r6
 800b936:	4639      	mov	r1, r7
 800b938:	f7ff bb29 	b.w	800af8e <__ieee754_pow+0x3e>
 800b93c:	9204      	str	r2, [sp, #16]
 800b93e:	f7ff bb7b 	b.w	800b038 <__ieee754_pow+0xe8>
 800b942:	2300      	movs	r3, #0
 800b944:	f7ff bb65 	b.w	800b012 <__ieee754_pow+0xc2>
 800b948:	00000000 	.word	0x00000000
 800b94c:	3fe62e43 	.word	0x3fe62e43
 800b950:	fefa39ef 	.word	0xfefa39ef
 800b954:	3fe62e42 	.word	0x3fe62e42
 800b958:	0ca86c39 	.word	0x0ca86c39
 800b95c:	be205c61 	.word	0xbe205c61
 800b960:	72bea4d0 	.word	0x72bea4d0
 800b964:	3e663769 	.word	0x3e663769
 800b968:	c5d26bf1 	.word	0xc5d26bf1
 800b96c:	3ebbbd41 	.word	0x3ebbbd41
 800b970:	af25de2c 	.word	0xaf25de2c
 800b974:	3f11566a 	.word	0x3f11566a
 800b978:	16bebd93 	.word	0x16bebd93
 800b97c:	3f66c16c 	.word	0x3f66c16c
 800b980:	5555553e 	.word	0x5555553e
 800b984:	3fc55555 	.word	0x3fc55555
 800b988:	3fe00000 	.word	0x3fe00000
 800b98c:	fff00000 	.word	0xfff00000
 800b990:	3ff00000 	.word	0x3ff00000
 800b994:	4090cbff 	.word	0x4090cbff
 800b998:	3f6f3400 	.word	0x3f6f3400
 800b99c:	652b82fe 	.word	0x652b82fe
 800b9a0:	3c971547 	.word	0x3c971547
 800b9a4:	00000000 	.word	0x00000000

0800b9a8 <__ieee754_rem_pio2>:
 800b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ac:	ed2d 8b02 	vpush	{d8}
 800b9b0:	ec55 4b10 	vmov	r4, r5, d0
 800b9b4:	4bca      	ldr	r3, [pc, #808]	; (800bce0 <__ieee754_rem_pio2+0x338>)
 800b9b6:	b08b      	sub	sp, #44	; 0x2c
 800b9b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b9bc:	4598      	cmp	r8, r3
 800b9be:	4682      	mov	sl, r0
 800b9c0:	9502      	str	r5, [sp, #8]
 800b9c2:	dc08      	bgt.n	800b9d6 <__ieee754_rem_pio2+0x2e>
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	ed80 0b00 	vstr	d0, [r0]
 800b9cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b9d0:	f04f 0b00 	mov.w	fp, #0
 800b9d4:	e028      	b.n	800ba28 <__ieee754_rem_pio2+0x80>
 800b9d6:	4bc3      	ldr	r3, [pc, #780]	; (800bce4 <__ieee754_rem_pio2+0x33c>)
 800b9d8:	4598      	cmp	r8, r3
 800b9da:	dc78      	bgt.n	800bace <__ieee754_rem_pio2+0x126>
 800b9dc:	9b02      	ldr	r3, [sp, #8]
 800b9de:	4ec2      	ldr	r6, [pc, #776]	; (800bce8 <__ieee754_rem_pio2+0x340>)
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	ee10 0a10 	vmov	r0, s0
 800b9e6:	a3b0      	add	r3, pc, #704	; (adr r3, 800bca8 <__ieee754_rem_pio2+0x300>)
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	dd39      	ble.n	800ba64 <__ieee754_rem_pio2+0xbc>
 800b9f0:	f7f4 fc42 	bl	8000278 <__aeabi_dsub>
 800b9f4:	45b0      	cmp	r8, r6
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	460d      	mov	r5, r1
 800b9fa:	d01b      	beq.n	800ba34 <__ieee754_rem_pio2+0x8c>
 800b9fc:	a3ac      	add	r3, pc, #688	; (adr r3, 800bcb0 <__ieee754_rem_pio2+0x308>)
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	f7f4 fc39 	bl	8000278 <__aeabi_dsub>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	e9ca 2300 	strd	r2, r3, [sl]
 800ba0e:	4620      	mov	r0, r4
 800ba10:	4629      	mov	r1, r5
 800ba12:	f7f4 fc31 	bl	8000278 <__aeabi_dsub>
 800ba16:	a3a6      	add	r3, pc, #664	; (adr r3, 800bcb0 <__ieee754_rem_pio2+0x308>)
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	f7f4 fc2c 	bl	8000278 <__aeabi_dsub>
 800ba20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba24:	f04f 0b01 	mov.w	fp, #1
 800ba28:	4658      	mov	r0, fp
 800ba2a:	b00b      	add	sp, #44	; 0x2c
 800ba2c:	ecbd 8b02 	vpop	{d8}
 800ba30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba34:	a3a0      	add	r3, pc, #640	; (adr r3, 800bcb8 <__ieee754_rem_pio2+0x310>)
 800ba36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3a:	f7f4 fc1d 	bl	8000278 <__aeabi_dsub>
 800ba3e:	a3a0      	add	r3, pc, #640	; (adr r3, 800bcc0 <__ieee754_rem_pio2+0x318>)
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	4604      	mov	r4, r0
 800ba46:	460d      	mov	r5, r1
 800ba48:	f7f4 fc16 	bl	8000278 <__aeabi_dsub>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	460b      	mov	r3, r1
 800ba50:	e9ca 2300 	strd	r2, r3, [sl]
 800ba54:	4620      	mov	r0, r4
 800ba56:	4629      	mov	r1, r5
 800ba58:	f7f4 fc0e 	bl	8000278 <__aeabi_dsub>
 800ba5c:	a398      	add	r3, pc, #608	; (adr r3, 800bcc0 <__ieee754_rem_pio2+0x318>)
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	e7db      	b.n	800ba1c <__ieee754_rem_pio2+0x74>
 800ba64:	f7f4 fc0a 	bl	800027c <__adddf3>
 800ba68:	45b0      	cmp	r8, r6
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	460d      	mov	r5, r1
 800ba6e:	d016      	beq.n	800ba9e <__ieee754_rem_pio2+0xf6>
 800ba70:	a38f      	add	r3, pc, #572	; (adr r3, 800bcb0 <__ieee754_rem_pio2+0x308>)
 800ba72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba76:	f7f4 fc01 	bl	800027c <__adddf3>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	e9ca 2300 	strd	r2, r3, [sl]
 800ba82:	4620      	mov	r0, r4
 800ba84:	4629      	mov	r1, r5
 800ba86:	f7f4 fbf7 	bl	8000278 <__aeabi_dsub>
 800ba8a:	a389      	add	r3, pc, #548	; (adr r3, 800bcb0 <__ieee754_rem_pio2+0x308>)
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	f7f4 fbf4 	bl	800027c <__adddf3>
 800ba94:	f04f 3bff 	mov.w	fp, #4294967295
 800ba98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba9c:	e7c4      	b.n	800ba28 <__ieee754_rem_pio2+0x80>
 800ba9e:	a386      	add	r3, pc, #536	; (adr r3, 800bcb8 <__ieee754_rem_pio2+0x310>)
 800baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa4:	f7f4 fbea 	bl	800027c <__adddf3>
 800baa8:	a385      	add	r3, pc, #532	; (adr r3, 800bcc0 <__ieee754_rem_pio2+0x318>)
 800baaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baae:	4604      	mov	r4, r0
 800bab0:	460d      	mov	r5, r1
 800bab2:	f7f4 fbe3 	bl	800027c <__adddf3>
 800bab6:	4602      	mov	r2, r0
 800bab8:	460b      	mov	r3, r1
 800baba:	e9ca 2300 	strd	r2, r3, [sl]
 800babe:	4620      	mov	r0, r4
 800bac0:	4629      	mov	r1, r5
 800bac2:	f7f4 fbd9 	bl	8000278 <__aeabi_dsub>
 800bac6:	a37e      	add	r3, pc, #504	; (adr r3, 800bcc0 <__ieee754_rem_pio2+0x318>)
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	e7e0      	b.n	800ba90 <__ieee754_rem_pio2+0xe8>
 800bace:	4b87      	ldr	r3, [pc, #540]	; (800bcec <__ieee754_rem_pio2+0x344>)
 800bad0:	4598      	cmp	r8, r3
 800bad2:	f300 80d8 	bgt.w	800bc86 <__ieee754_rem_pio2+0x2de>
 800bad6:	f7fe fb77 	bl	800a1c8 <fabs>
 800bada:	ec55 4b10 	vmov	r4, r5, d0
 800bade:	ee10 0a10 	vmov	r0, s0
 800bae2:	a379      	add	r3, pc, #484	; (adr r3, 800bcc8 <__ieee754_rem_pio2+0x320>)
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	4629      	mov	r1, r5
 800baea:	f7f4 fd7d 	bl	80005e8 <__aeabi_dmul>
 800baee:	4b80      	ldr	r3, [pc, #512]	; (800bcf0 <__ieee754_rem_pio2+0x348>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	f7f4 fbc3 	bl	800027c <__adddf3>
 800baf6:	f7f5 f827 	bl	8000b48 <__aeabi_d2iz>
 800bafa:	4683      	mov	fp, r0
 800bafc:	f7f4 fd0a 	bl	8000514 <__aeabi_i2d>
 800bb00:	4602      	mov	r2, r0
 800bb02:	460b      	mov	r3, r1
 800bb04:	ec43 2b18 	vmov	d8, r2, r3
 800bb08:	a367      	add	r3, pc, #412	; (adr r3, 800bca8 <__ieee754_rem_pio2+0x300>)
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	f7f4 fd6b 	bl	80005e8 <__aeabi_dmul>
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	4620      	mov	r0, r4
 800bb18:	4629      	mov	r1, r5
 800bb1a:	f7f4 fbad 	bl	8000278 <__aeabi_dsub>
 800bb1e:	a364      	add	r3, pc, #400	; (adr r3, 800bcb0 <__ieee754_rem_pio2+0x308>)
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	4606      	mov	r6, r0
 800bb26:	460f      	mov	r7, r1
 800bb28:	ec51 0b18 	vmov	r0, r1, d8
 800bb2c:	f7f4 fd5c 	bl	80005e8 <__aeabi_dmul>
 800bb30:	f1bb 0f1f 	cmp.w	fp, #31
 800bb34:	4604      	mov	r4, r0
 800bb36:	460d      	mov	r5, r1
 800bb38:	dc0d      	bgt.n	800bb56 <__ieee754_rem_pio2+0x1ae>
 800bb3a:	4b6e      	ldr	r3, [pc, #440]	; (800bcf4 <__ieee754_rem_pio2+0x34c>)
 800bb3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bb40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb44:	4543      	cmp	r3, r8
 800bb46:	d006      	beq.n	800bb56 <__ieee754_rem_pio2+0x1ae>
 800bb48:	4622      	mov	r2, r4
 800bb4a:	462b      	mov	r3, r5
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	4639      	mov	r1, r7
 800bb50:	f7f4 fb92 	bl	8000278 <__aeabi_dsub>
 800bb54:	e00e      	b.n	800bb74 <__ieee754_rem_pio2+0x1cc>
 800bb56:	462b      	mov	r3, r5
 800bb58:	4622      	mov	r2, r4
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	f7f4 fb8b 	bl	8000278 <__aeabi_dsub>
 800bb62:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bb66:	9303      	str	r3, [sp, #12]
 800bb68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb6c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800bb70:	2b10      	cmp	r3, #16
 800bb72:	dc02      	bgt.n	800bb7a <__ieee754_rem_pio2+0x1d2>
 800bb74:	e9ca 0100 	strd	r0, r1, [sl]
 800bb78:	e039      	b.n	800bbee <__ieee754_rem_pio2+0x246>
 800bb7a:	a34f      	add	r3, pc, #316	; (adr r3, 800bcb8 <__ieee754_rem_pio2+0x310>)
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	ec51 0b18 	vmov	r0, r1, d8
 800bb84:	f7f4 fd30 	bl	80005e8 <__aeabi_dmul>
 800bb88:	4604      	mov	r4, r0
 800bb8a:	460d      	mov	r5, r1
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4630      	mov	r0, r6
 800bb92:	4639      	mov	r1, r7
 800bb94:	f7f4 fb70 	bl	8000278 <__aeabi_dsub>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	4680      	mov	r8, r0
 800bb9e:	4689      	mov	r9, r1
 800bba0:	4630      	mov	r0, r6
 800bba2:	4639      	mov	r1, r7
 800bba4:	f7f4 fb68 	bl	8000278 <__aeabi_dsub>
 800bba8:	4622      	mov	r2, r4
 800bbaa:	462b      	mov	r3, r5
 800bbac:	f7f4 fb64 	bl	8000278 <__aeabi_dsub>
 800bbb0:	a343      	add	r3, pc, #268	; (adr r3, 800bcc0 <__ieee754_rem_pio2+0x318>)
 800bbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	460d      	mov	r5, r1
 800bbba:	ec51 0b18 	vmov	r0, r1, d8
 800bbbe:	f7f4 fd13 	bl	80005e8 <__aeabi_dmul>
 800bbc2:	4622      	mov	r2, r4
 800bbc4:	462b      	mov	r3, r5
 800bbc6:	f7f4 fb57 	bl	8000278 <__aeabi_dsub>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	4604      	mov	r4, r0
 800bbd0:	460d      	mov	r5, r1
 800bbd2:	4640      	mov	r0, r8
 800bbd4:	4649      	mov	r1, r9
 800bbd6:	f7f4 fb4f 	bl	8000278 <__aeabi_dsub>
 800bbda:	9a03      	ldr	r2, [sp, #12]
 800bbdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	2b31      	cmp	r3, #49	; 0x31
 800bbe4:	dc24      	bgt.n	800bc30 <__ieee754_rem_pio2+0x288>
 800bbe6:	e9ca 0100 	strd	r0, r1, [sl]
 800bbea:	4646      	mov	r6, r8
 800bbec:	464f      	mov	r7, r9
 800bbee:	e9da 8900 	ldrd	r8, r9, [sl]
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	4642      	mov	r2, r8
 800bbf6:	464b      	mov	r3, r9
 800bbf8:	4639      	mov	r1, r7
 800bbfa:	f7f4 fb3d 	bl	8000278 <__aeabi_dsub>
 800bbfe:	462b      	mov	r3, r5
 800bc00:	4622      	mov	r2, r4
 800bc02:	f7f4 fb39 	bl	8000278 <__aeabi_dsub>
 800bc06:	9b02      	ldr	r3, [sp, #8]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc0e:	f6bf af0b 	bge.w	800ba28 <__ieee754_rem_pio2+0x80>
 800bc12:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bc16:	f8ca 3004 	str.w	r3, [sl, #4]
 800bc1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc1e:	f8ca 8000 	str.w	r8, [sl]
 800bc22:	f8ca 0008 	str.w	r0, [sl, #8]
 800bc26:	f8ca 300c 	str.w	r3, [sl, #12]
 800bc2a:	f1cb 0b00 	rsb	fp, fp, #0
 800bc2e:	e6fb      	b.n	800ba28 <__ieee754_rem_pio2+0x80>
 800bc30:	a327      	add	r3, pc, #156	; (adr r3, 800bcd0 <__ieee754_rem_pio2+0x328>)
 800bc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc36:	ec51 0b18 	vmov	r0, r1, d8
 800bc3a:	f7f4 fcd5 	bl	80005e8 <__aeabi_dmul>
 800bc3e:	4604      	mov	r4, r0
 800bc40:	460d      	mov	r5, r1
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	4640      	mov	r0, r8
 800bc48:	4649      	mov	r1, r9
 800bc4a:	f7f4 fb15 	bl	8000278 <__aeabi_dsub>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	460b      	mov	r3, r1
 800bc52:	4606      	mov	r6, r0
 800bc54:	460f      	mov	r7, r1
 800bc56:	4640      	mov	r0, r8
 800bc58:	4649      	mov	r1, r9
 800bc5a:	f7f4 fb0d 	bl	8000278 <__aeabi_dsub>
 800bc5e:	4622      	mov	r2, r4
 800bc60:	462b      	mov	r3, r5
 800bc62:	f7f4 fb09 	bl	8000278 <__aeabi_dsub>
 800bc66:	a31c      	add	r3, pc, #112	; (adr r3, 800bcd8 <__ieee754_rem_pio2+0x330>)
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	460d      	mov	r5, r1
 800bc70:	ec51 0b18 	vmov	r0, r1, d8
 800bc74:	f7f4 fcb8 	bl	80005e8 <__aeabi_dmul>
 800bc78:	4622      	mov	r2, r4
 800bc7a:	462b      	mov	r3, r5
 800bc7c:	f7f4 fafc 	bl	8000278 <__aeabi_dsub>
 800bc80:	4604      	mov	r4, r0
 800bc82:	460d      	mov	r5, r1
 800bc84:	e760      	b.n	800bb48 <__ieee754_rem_pio2+0x1a0>
 800bc86:	4b1c      	ldr	r3, [pc, #112]	; (800bcf8 <__ieee754_rem_pio2+0x350>)
 800bc88:	4598      	cmp	r8, r3
 800bc8a:	dd37      	ble.n	800bcfc <__ieee754_rem_pio2+0x354>
 800bc8c:	ee10 2a10 	vmov	r2, s0
 800bc90:	462b      	mov	r3, r5
 800bc92:	4620      	mov	r0, r4
 800bc94:	4629      	mov	r1, r5
 800bc96:	f7f4 faef 	bl	8000278 <__aeabi_dsub>
 800bc9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc9e:	e9ca 0100 	strd	r0, r1, [sl]
 800bca2:	e695      	b.n	800b9d0 <__ieee754_rem_pio2+0x28>
 800bca4:	f3af 8000 	nop.w
 800bca8:	54400000 	.word	0x54400000
 800bcac:	3ff921fb 	.word	0x3ff921fb
 800bcb0:	1a626331 	.word	0x1a626331
 800bcb4:	3dd0b461 	.word	0x3dd0b461
 800bcb8:	1a600000 	.word	0x1a600000
 800bcbc:	3dd0b461 	.word	0x3dd0b461
 800bcc0:	2e037073 	.word	0x2e037073
 800bcc4:	3ba3198a 	.word	0x3ba3198a
 800bcc8:	6dc9c883 	.word	0x6dc9c883
 800bccc:	3fe45f30 	.word	0x3fe45f30
 800bcd0:	2e000000 	.word	0x2e000000
 800bcd4:	3ba3198a 	.word	0x3ba3198a
 800bcd8:	252049c1 	.word	0x252049c1
 800bcdc:	397b839a 	.word	0x397b839a
 800bce0:	3fe921fb 	.word	0x3fe921fb
 800bce4:	4002d97b 	.word	0x4002d97b
 800bce8:	3ff921fb 	.word	0x3ff921fb
 800bcec:	413921fb 	.word	0x413921fb
 800bcf0:	3fe00000 	.word	0x3fe00000
 800bcf4:	0800f718 	.word	0x0800f718
 800bcf8:	7fefffff 	.word	0x7fefffff
 800bcfc:	ea4f 5628 	mov.w	r6, r8, asr #20
 800bd00:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800bd04:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800bd08:	4620      	mov	r0, r4
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	f7f4 ff1c 	bl	8000b48 <__aeabi_d2iz>
 800bd10:	f7f4 fc00 	bl	8000514 <__aeabi_i2d>
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	4620      	mov	r0, r4
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd20:	f7f4 faaa 	bl	8000278 <__aeabi_dsub>
 800bd24:	4b21      	ldr	r3, [pc, #132]	; (800bdac <__ieee754_rem_pio2+0x404>)
 800bd26:	2200      	movs	r2, #0
 800bd28:	f7f4 fc5e 	bl	80005e8 <__aeabi_dmul>
 800bd2c:	460d      	mov	r5, r1
 800bd2e:	4604      	mov	r4, r0
 800bd30:	f7f4 ff0a 	bl	8000b48 <__aeabi_d2iz>
 800bd34:	f7f4 fbee 	bl	8000514 <__aeabi_i2d>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	4629      	mov	r1, r5
 800bd40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd44:	f7f4 fa98 	bl	8000278 <__aeabi_dsub>
 800bd48:	4b18      	ldr	r3, [pc, #96]	; (800bdac <__ieee754_rem_pio2+0x404>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f7f4 fc4c 	bl	80005e8 <__aeabi_dmul>
 800bd50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd54:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800bd58:	2703      	movs	r7, #3
 800bd5a:	2400      	movs	r4, #0
 800bd5c:	2500      	movs	r5, #0
 800bd5e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800bd62:	4622      	mov	r2, r4
 800bd64:	462b      	mov	r3, r5
 800bd66:	46b9      	mov	r9, r7
 800bd68:	3f01      	subs	r7, #1
 800bd6a:	f7f4 fea5 	bl	8000ab8 <__aeabi_dcmpeq>
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d1f5      	bne.n	800bd5e <__ieee754_rem_pio2+0x3b6>
 800bd72:	4b0f      	ldr	r3, [pc, #60]	; (800bdb0 <__ieee754_rem_pio2+0x408>)
 800bd74:	9301      	str	r3, [sp, #4]
 800bd76:	2302      	movs	r3, #2
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	4632      	mov	r2, r6
 800bd7c:	464b      	mov	r3, r9
 800bd7e:	4651      	mov	r1, sl
 800bd80:	a804      	add	r0, sp, #16
 800bd82:	f000 fa69 	bl	800c258 <__kernel_rem_pio2>
 800bd86:	9b02      	ldr	r3, [sp, #8]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	4683      	mov	fp, r0
 800bd8c:	f6bf ae4c 	bge.w	800ba28 <__ieee754_rem_pio2+0x80>
 800bd90:	e9da 2100 	ldrd	r2, r1, [sl]
 800bd94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd98:	e9ca 2300 	strd	r2, r3, [sl]
 800bd9c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bda0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bda4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bda8:	e73f      	b.n	800bc2a <__ieee754_rem_pio2+0x282>
 800bdaa:	bf00      	nop
 800bdac:	41700000 	.word	0x41700000
 800bdb0:	0800f798 	.word	0x0800f798
 800bdb4:	00000000 	.word	0x00000000

0800bdb8 <atan>:
 800bdb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdbc:	ec55 4b10 	vmov	r4, r5, d0
 800bdc0:	4bc3      	ldr	r3, [pc, #780]	; (800c0d0 <atan+0x318>)
 800bdc2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bdc6:	429e      	cmp	r6, r3
 800bdc8:	46ab      	mov	fp, r5
 800bdca:	dd18      	ble.n	800bdfe <atan+0x46>
 800bdcc:	4bc1      	ldr	r3, [pc, #772]	; (800c0d4 <atan+0x31c>)
 800bdce:	429e      	cmp	r6, r3
 800bdd0:	dc01      	bgt.n	800bdd6 <atan+0x1e>
 800bdd2:	d109      	bne.n	800bde8 <atan+0x30>
 800bdd4:	b144      	cbz	r4, 800bde8 <atan+0x30>
 800bdd6:	4622      	mov	r2, r4
 800bdd8:	462b      	mov	r3, r5
 800bdda:	4620      	mov	r0, r4
 800bddc:	4629      	mov	r1, r5
 800bdde:	f7f4 fa4d 	bl	800027c <__adddf3>
 800bde2:	4604      	mov	r4, r0
 800bde4:	460d      	mov	r5, r1
 800bde6:	e006      	b.n	800bdf6 <atan+0x3e>
 800bde8:	f1bb 0f00 	cmp.w	fp, #0
 800bdec:	f300 8131 	bgt.w	800c052 <atan+0x29a>
 800bdf0:	a59b      	add	r5, pc, #620	; (adr r5, 800c060 <atan+0x2a8>)
 800bdf2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bdf6:	ec45 4b10 	vmov	d0, r4, r5
 800bdfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfe:	4bb6      	ldr	r3, [pc, #728]	; (800c0d8 <atan+0x320>)
 800be00:	429e      	cmp	r6, r3
 800be02:	dc14      	bgt.n	800be2e <atan+0x76>
 800be04:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800be08:	429e      	cmp	r6, r3
 800be0a:	dc0d      	bgt.n	800be28 <atan+0x70>
 800be0c:	a396      	add	r3, pc, #600	; (adr r3, 800c068 <atan+0x2b0>)
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	ee10 0a10 	vmov	r0, s0
 800be16:	4629      	mov	r1, r5
 800be18:	f7f4 fa30 	bl	800027c <__adddf3>
 800be1c:	4baf      	ldr	r3, [pc, #700]	; (800c0dc <atan+0x324>)
 800be1e:	2200      	movs	r2, #0
 800be20:	f7f4 fe72 	bl	8000b08 <__aeabi_dcmpgt>
 800be24:	2800      	cmp	r0, #0
 800be26:	d1e6      	bne.n	800bdf6 <atan+0x3e>
 800be28:	f04f 3aff 	mov.w	sl, #4294967295
 800be2c:	e02b      	b.n	800be86 <atan+0xce>
 800be2e:	f7fe f9cb 	bl	800a1c8 <fabs>
 800be32:	4bab      	ldr	r3, [pc, #684]	; (800c0e0 <atan+0x328>)
 800be34:	429e      	cmp	r6, r3
 800be36:	ec55 4b10 	vmov	r4, r5, d0
 800be3a:	f300 80bf 	bgt.w	800bfbc <atan+0x204>
 800be3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800be42:	429e      	cmp	r6, r3
 800be44:	f300 80a0 	bgt.w	800bf88 <atan+0x1d0>
 800be48:	ee10 2a10 	vmov	r2, s0
 800be4c:	ee10 0a10 	vmov	r0, s0
 800be50:	462b      	mov	r3, r5
 800be52:	4629      	mov	r1, r5
 800be54:	f7f4 fa12 	bl	800027c <__adddf3>
 800be58:	4ba0      	ldr	r3, [pc, #640]	; (800c0dc <atan+0x324>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	f7f4 fa0c 	bl	8000278 <__aeabi_dsub>
 800be60:	2200      	movs	r2, #0
 800be62:	4606      	mov	r6, r0
 800be64:	460f      	mov	r7, r1
 800be66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be6a:	4620      	mov	r0, r4
 800be6c:	4629      	mov	r1, r5
 800be6e:	f7f4 fa05 	bl	800027c <__adddf3>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4630      	mov	r0, r6
 800be78:	4639      	mov	r1, r7
 800be7a:	f7f4 fcdf 	bl	800083c <__aeabi_ddiv>
 800be7e:	f04f 0a00 	mov.w	sl, #0
 800be82:	4604      	mov	r4, r0
 800be84:	460d      	mov	r5, r1
 800be86:	4622      	mov	r2, r4
 800be88:	462b      	mov	r3, r5
 800be8a:	4620      	mov	r0, r4
 800be8c:	4629      	mov	r1, r5
 800be8e:	f7f4 fbab 	bl	80005e8 <__aeabi_dmul>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4680      	mov	r8, r0
 800be98:	4689      	mov	r9, r1
 800be9a:	f7f4 fba5 	bl	80005e8 <__aeabi_dmul>
 800be9e:	a374      	add	r3, pc, #464	; (adr r3, 800c070 <atan+0x2b8>)
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	4606      	mov	r6, r0
 800bea6:	460f      	mov	r7, r1
 800bea8:	f7f4 fb9e 	bl	80005e8 <__aeabi_dmul>
 800beac:	a372      	add	r3, pc, #456	; (adr r3, 800c078 <atan+0x2c0>)
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	f7f4 f9e3 	bl	800027c <__adddf3>
 800beb6:	4632      	mov	r2, r6
 800beb8:	463b      	mov	r3, r7
 800beba:	f7f4 fb95 	bl	80005e8 <__aeabi_dmul>
 800bebe:	a370      	add	r3, pc, #448	; (adr r3, 800c080 <atan+0x2c8>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	f7f4 f9da 	bl	800027c <__adddf3>
 800bec8:	4632      	mov	r2, r6
 800beca:	463b      	mov	r3, r7
 800becc:	f7f4 fb8c 	bl	80005e8 <__aeabi_dmul>
 800bed0:	a36d      	add	r3, pc, #436	; (adr r3, 800c088 <atan+0x2d0>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	f7f4 f9d1 	bl	800027c <__adddf3>
 800beda:	4632      	mov	r2, r6
 800bedc:	463b      	mov	r3, r7
 800bede:	f7f4 fb83 	bl	80005e8 <__aeabi_dmul>
 800bee2:	a36b      	add	r3, pc, #428	; (adr r3, 800c090 <atan+0x2d8>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f7f4 f9c8 	bl	800027c <__adddf3>
 800beec:	4632      	mov	r2, r6
 800beee:	463b      	mov	r3, r7
 800bef0:	f7f4 fb7a 	bl	80005e8 <__aeabi_dmul>
 800bef4:	a368      	add	r3, pc, #416	; (adr r3, 800c098 <atan+0x2e0>)
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	f7f4 f9bf 	bl	800027c <__adddf3>
 800befe:	4642      	mov	r2, r8
 800bf00:	464b      	mov	r3, r9
 800bf02:	f7f4 fb71 	bl	80005e8 <__aeabi_dmul>
 800bf06:	a366      	add	r3, pc, #408	; (adr r3, 800c0a0 <atan+0x2e8>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	4680      	mov	r8, r0
 800bf0e:	4689      	mov	r9, r1
 800bf10:	4630      	mov	r0, r6
 800bf12:	4639      	mov	r1, r7
 800bf14:	f7f4 fb68 	bl	80005e8 <__aeabi_dmul>
 800bf18:	a363      	add	r3, pc, #396	; (adr r3, 800c0a8 <atan+0x2f0>)
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	f7f4 f9ab 	bl	8000278 <__aeabi_dsub>
 800bf22:	4632      	mov	r2, r6
 800bf24:	463b      	mov	r3, r7
 800bf26:	f7f4 fb5f 	bl	80005e8 <__aeabi_dmul>
 800bf2a:	a361      	add	r3, pc, #388	; (adr r3, 800c0b0 <atan+0x2f8>)
 800bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf30:	f7f4 f9a2 	bl	8000278 <__aeabi_dsub>
 800bf34:	4632      	mov	r2, r6
 800bf36:	463b      	mov	r3, r7
 800bf38:	f7f4 fb56 	bl	80005e8 <__aeabi_dmul>
 800bf3c:	a35e      	add	r3, pc, #376	; (adr r3, 800c0b8 <atan+0x300>)
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	f7f4 f999 	bl	8000278 <__aeabi_dsub>
 800bf46:	4632      	mov	r2, r6
 800bf48:	463b      	mov	r3, r7
 800bf4a:	f7f4 fb4d 	bl	80005e8 <__aeabi_dmul>
 800bf4e:	a35c      	add	r3, pc, #368	; (adr r3, 800c0c0 <atan+0x308>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	f7f4 f990 	bl	8000278 <__aeabi_dsub>
 800bf58:	4632      	mov	r2, r6
 800bf5a:	463b      	mov	r3, r7
 800bf5c:	f7f4 fb44 	bl	80005e8 <__aeabi_dmul>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	4640      	mov	r0, r8
 800bf66:	4649      	mov	r1, r9
 800bf68:	f7f4 f988 	bl	800027c <__adddf3>
 800bf6c:	4622      	mov	r2, r4
 800bf6e:	462b      	mov	r3, r5
 800bf70:	f7f4 fb3a 	bl	80005e8 <__aeabi_dmul>
 800bf74:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	d14b      	bne.n	800c016 <atan+0x25e>
 800bf7e:	4620      	mov	r0, r4
 800bf80:	4629      	mov	r1, r5
 800bf82:	f7f4 f979 	bl	8000278 <__aeabi_dsub>
 800bf86:	e72c      	b.n	800bde2 <atan+0x2a>
 800bf88:	ee10 0a10 	vmov	r0, s0
 800bf8c:	4b53      	ldr	r3, [pc, #332]	; (800c0dc <atan+0x324>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	4629      	mov	r1, r5
 800bf92:	f7f4 f971 	bl	8000278 <__aeabi_dsub>
 800bf96:	4b51      	ldr	r3, [pc, #324]	; (800c0dc <atan+0x324>)
 800bf98:	4606      	mov	r6, r0
 800bf9a:	460f      	mov	r7, r1
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	f7f4 f96b 	bl	800027c <__adddf3>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	4630      	mov	r0, r6
 800bfac:	4639      	mov	r1, r7
 800bfae:	f7f4 fc45 	bl	800083c <__aeabi_ddiv>
 800bfb2:	f04f 0a01 	mov.w	sl, #1
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	460d      	mov	r5, r1
 800bfba:	e764      	b.n	800be86 <atan+0xce>
 800bfbc:	4b49      	ldr	r3, [pc, #292]	; (800c0e4 <atan+0x32c>)
 800bfbe:	429e      	cmp	r6, r3
 800bfc0:	da1d      	bge.n	800bffe <atan+0x246>
 800bfc2:	ee10 0a10 	vmov	r0, s0
 800bfc6:	4b48      	ldr	r3, [pc, #288]	; (800c0e8 <atan+0x330>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	4629      	mov	r1, r5
 800bfcc:	f7f4 f954 	bl	8000278 <__aeabi_dsub>
 800bfd0:	4b45      	ldr	r3, [pc, #276]	; (800c0e8 <atan+0x330>)
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	460f      	mov	r7, r1
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	4620      	mov	r0, r4
 800bfda:	4629      	mov	r1, r5
 800bfdc:	f7f4 fb04 	bl	80005e8 <__aeabi_dmul>
 800bfe0:	4b3e      	ldr	r3, [pc, #248]	; (800c0dc <atan+0x324>)
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f7f4 f94a 	bl	800027c <__adddf3>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	460b      	mov	r3, r1
 800bfec:	4630      	mov	r0, r6
 800bfee:	4639      	mov	r1, r7
 800bff0:	f7f4 fc24 	bl	800083c <__aeabi_ddiv>
 800bff4:	f04f 0a02 	mov.w	sl, #2
 800bff8:	4604      	mov	r4, r0
 800bffa:	460d      	mov	r5, r1
 800bffc:	e743      	b.n	800be86 <atan+0xce>
 800bffe:	462b      	mov	r3, r5
 800c000:	ee10 2a10 	vmov	r2, s0
 800c004:	4939      	ldr	r1, [pc, #228]	; (800c0ec <atan+0x334>)
 800c006:	2000      	movs	r0, #0
 800c008:	f7f4 fc18 	bl	800083c <__aeabi_ddiv>
 800c00c:	f04f 0a03 	mov.w	sl, #3
 800c010:	4604      	mov	r4, r0
 800c012:	460d      	mov	r5, r1
 800c014:	e737      	b.n	800be86 <atan+0xce>
 800c016:	4b36      	ldr	r3, [pc, #216]	; (800c0f0 <atan+0x338>)
 800c018:	4e36      	ldr	r6, [pc, #216]	; (800c0f4 <atan+0x33c>)
 800c01a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c022:	f7f4 f929 	bl	8000278 <__aeabi_dsub>
 800c026:	4622      	mov	r2, r4
 800c028:	462b      	mov	r3, r5
 800c02a:	f7f4 f925 	bl	8000278 <__aeabi_dsub>
 800c02e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c03a:	f7f4 f91d 	bl	8000278 <__aeabi_dsub>
 800c03e:	f1bb 0f00 	cmp.w	fp, #0
 800c042:	4604      	mov	r4, r0
 800c044:	460d      	mov	r5, r1
 800c046:	f6bf aed6 	bge.w	800bdf6 <atan+0x3e>
 800c04a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c04e:	461d      	mov	r5, r3
 800c050:	e6d1      	b.n	800bdf6 <atan+0x3e>
 800c052:	a51d      	add	r5, pc, #116	; (adr r5, 800c0c8 <atan+0x310>)
 800c054:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c058:	e6cd      	b.n	800bdf6 <atan+0x3e>
 800c05a:	bf00      	nop
 800c05c:	f3af 8000 	nop.w
 800c060:	54442d18 	.word	0x54442d18
 800c064:	bff921fb 	.word	0xbff921fb
 800c068:	8800759c 	.word	0x8800759c
 800c06c:	7e37e43c 	.word	0x7e37e43c
 800c070:	e322da11 	.word	0xe322da11
 800c074:	3f90ad3a 	.word	0x3f90ad3a
 800c078:	24760deb 	.word	0x24760deb
 800c07c:	3fa97b4b 	.word	0x3fa97b4b
 800c080:	a0d03d51 	.word	0xa0d03d51
 800c084:	3fb10d66 	.word	0x3fb10d66
 800c088:	c54c206e 	.word	0xc54c206e
 800c08c:	3fb745cd 	.word	0x3fb745cd
 800c090:	920083ff 	.word	0x920083ff
 800c094:	3fc24924 	.word	0x3fc24924
 800c098:	5555550d 	.word	0x5555550d
 800c09c:	3fd55555 	.word	0x3fd55555
 800c0a0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c0a4:	bfa2b444 	.word	0xbfa2b444
 800c0a8:	52defd9a 	.word	0x52defd9a
 800c0ac:	3fadde2d 	.word	0x3fadde2d
 800c0b0:	af749a6d 	.word	0xaf749a6d
 800c0b4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c0b8:	fe231671 	.word	0xfe231671
 800c0bc:	3fbc71c6 	.word	0x3fbc71c6
 800c0c0:	9998ebc4 	.word	0x9998ebc4
 800c0c4:	3fc99999 	.word	0x3fc99999
 800c0c8:	54442d18 	.word	0x54442d18
 800c0cc:	3ff921fb 	.word	0x3ff921fb
 800c0d0:	440fffff 	.word	0x440fffff
 800c0d4:	7ff00000 	.word	0x7ff00000
 800c0d8:	3fdbffff 	.word	0x3fdbffff
 800c0dc:	3ff00000 	.word	0x3ff00000
 800c0e0:	3ff2ffff 	.word	0x3ff2ffff
 800c0e4:	40038000 	.word	0x40038000
 800c0e8:	3ff80000 	.word	0x3ff80000
 800c0ec:	bff00000 	.word	0xbff00000
 800c0f0:	0800f8c0 	.word	0x0800f8c0
 800c0f4:	0800f8a0 	.word	0x0800f8a0

0800c0f8 <scalbn>:
 800c0f8:	b570      	push	{r4, r5, r6, lr}
 800c0fa:	ec55 4b10 	vmov	r4, r5, d0
 800c0fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c102:	4606      	mov	r6, r0
 800c104:	462b      	mov	r3, r5
 800c106:	b999      	cbnz	r1, 800c130 <scalbn+0x38>
 800c108:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c10c:	4323      	orrs	r3, r4
 800c10e:	d03f      	beq.n	800c190 <scalbn+0x98>
 800c110:	4b35      	ldr	r3, [pc, #212]	; (800c1e8 <scalbn+0xf0>)
 800c112:	4629      	mov	r1, r5
 800c114:	ee10 0a10 	vmov	r0, s0
 800c118:	2200      	movs	r2, #0
 800c11a:	f7f4 fa65 	bl	80005e8 <__aeabi_dmul>
 800c11e:	4b33      	ldr	r3, [pc, #204]	; (800c1ec <scalbn+0xf4>)
 800c120:	429e      	cmp	r6, r3
 800c122:	4604      	mov	r4, r0
 800c124:	460d      	mov	r5, r1
 800c126:	da10      	bge.n	800c14a <scalbn+0x52>
 800c128:	a327      	add	r3, pc, #156	; (adr r3, 800c1c8 <scalbn+0xd0>)
 800c12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12e:	e01f      	b.n	800c170 <scalbn+0x78>
 800c130:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c134:	4291      	cmp	r1, r2
 800c136:	d10c      	bne.n	800c152 <scalbn+0x5a>
 800c138:	ee10 2a10 	vmov	r2, s0
 800c13c:	4620      	mov	r0, r4
 800c13e:	4629      	mov	r1, r5
 800c140:	f7f4 f89c 	bl	800027c <__adddf3>
 800c144:	4604      	mov	r4, r0
 800c146:	460d      	mov	r5, r1
 800c148:	e022      	b.n	800c190 <scalbn+0x98>
 800c14a:	460b      	mov	r3, r1
 800c14c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c150:	3936      	subs	r1, #54	; 0x36
 800c152:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c156:	4296      	cmp	r6, r2
 800c158:	dd0d      	ble.n	800c176 <scalbn+0x7e>
 800c15a:	2d00      	cmp	r5, #0
 800c15c:	a11c      	add	r1, pc, #112	; (adr r1, 800c1d0 <scalbn+0xd8>)
 800c15e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c162:	da02      	bge.n	800c16a <scalbn+0x72>
 800c164:	a11c      	add	r1, pc, #112	; (adr r1, 800c1d8 <scalbn+0xe0>)
 800c166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c16a:	a319      	add	r3, pc, #100	; (adr r3, 800c1d0 <scalbn+0xd8>)
 800c16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c170:	f7f4 fa3a 	bl	80005e8 <__aeabi_dmul>
 800c174:	e7e6      	b.n	800c144 <scalbn+0x4c>
 800c176:	1872      	adds	r2, r6, r1
 800c178:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c17c:	428a      	cmp	r2, r1
 800c17e:	dcec      	bgt.n	800c15a <scalbn+0x62>
 800c180:	2a00      	cmp	r2, #0
 800c182:	dd08      	ble.n	800c196 <scalbn+0x9e>
 800c184:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c188:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c18c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c190:	ec45 4b10 	vmov	d0, r4, r5
 800c194:	bd70      	pop	{r4, r5, r6, pc}
 800c196:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c19a:	da08      	bge.n	800c1ae <scalbn+0xb6>
 800c19c:	2d00      	cmp	r5, #0
 800c19e:	a10a      	add	r1, pc, #40	; (adr r1, 800c1c8 <scalbn+0xd0>)
 800c1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1a4:	dac0      	bge.n	800c128 <scalbn+0x30>
 800c1a6:	a10e      	add	r1, pc, #56	; (adr r1, 800c1e0 <scalbn+0xe8>)
 800c1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1ac:	e7bc      	b.n	800c128 <scalbn+0x30>
 800c1ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1b2:	3236      	adds	r2, #54	; 0x36
 800c1b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4b0c      	ldr	r3, [pc, #48]	; (800c1f0 <scalbn+0xf8>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	e7d5      	b.n	800c170 <scalbn+0x78>
 800c1c4:	f3af 8000 	nop.w
 800c1c8:	c2f8f359 	.word	0xc2f8f359
 800c1cc:	01a56e1f 	.word	0x01a56e1f
 800c1d0:	8800759c 	.word	0x8800759c
 800c1d4:	7e37e43c 	.word	0x7e37e43c
 800c1d8:	8800759c 	.word	0x8800759c
 800c1dc:	fe37e43c 	.word	0xfe37e43c
 800c1e0:	c2f8f359 	.word	0xc2f8f359
 800c1e4:	81a56e1f 	.word	0x81a56e1f
 800c1e8:	43500000 	.word	0x43500000
 800c1ec:	ffff3cb0 	.word	0xffff3cb0
 800c1f0:	3c900000 	.word	0x3c900000

0800c1f4 <with_errno>:
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	460d      	mov	r5, r1
 800c1fa:	4616      	mov	r6, r2
 800c1fc:	f001 fb7a 	bl	800d8f4 <__errno>
 800c200:	4629      	mov	r1, r5
 800c202:	6006      	str	r6, [r0, #0]
 800c204:	4620      	mov	r0, r4
 800c206:	bd70      	pop	{r4, r5, r6, pc}

0800c208 <xflow>:
 800c208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c20a:	4614      	mov	r4, r2
 800c20c:	461d      	mov	r5, r3
 800c20e:	b108      	cbz	r0, 800c214 <xflow+0xc>
 800c210:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c214:	e9cd 2300 	strd	r2, r3, [sp]
 800c218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c21c:	4620      	mov	r0, r4
 800c21e:	4629      	mov	r1, r5
 800c220:	f7f4 f9e2 	bl	80005e8 <__aeabi_dmul>
 800c224:	2222      	movs	r2, #34	; 0x22
 800c226:	b003      	add	sp, #12
 800c228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c22c:	f7ff bfe2 	b.w	800c1f4 <with_errno>

0800c230 <__math_uflow>:
 800c230:	b508      	push	{r3, lr}
 800c232:	2200      	movs	r2, #0
 800c234:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c238:	f7ff ffe6 	bl	800c208 <xflow>
 800c23c:	ec41 0b10 	vmov	d0, r0, r1
 800c240:	bd08      	pop	{r3, pc}

0800c242 <__math_oflow>:
 800c242:	b508      	push	{r3, lr}
 800c244:	2200      	movs	r2, #0
 800c246:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c24a:	f7ff ffdd 	bl	800c208 <xflow>
 800c24e:	ec41 0b10 	vmov	d0, r0, r1
 800c252:	bd08      	pop	{r3, pc}
 800c254:	0000      	movs	r0, r0
	...

0800c258 <__kernel_rem_pio2>:
 800c258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25c:	ed2d 8b02 	vpush	{d8}
 800c260:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c264:	f112 0f14 	cmn.w	r2, #20
 800c268:	9306      	str	r3, [sp, #24]
 800c26a:	9104      	str	r1, [sp, #16]
 800c26c:	4bc2      	ldr	r3, [pc, #776]	; (800c578 <__kernel_rem_pio2+0x320>)
 800c26e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c270:	9009      	str	r0, [sp, #36]	; 0x24
 800c272:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	9b06      	ldr	r3, [sp, #24]
 800c27a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c27e:	bfa8      	it	ge
 800c280:	1ed4      	subge	r4, r2, #3
 800c282:	9305      	str	r3, [sp, #20]
 800c284:	bfb2      	itee	lt
 800c286:	2400      	movlt	r4, #0
 800c288:	2318      	movge	r3, #24
 800c28a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c28e:	f06f 0317 	mvn.w	r3, #23
 800c292:	fb04 3303 	mla	r3, r4, r3, r3
 800c296:	eb03 0a02 	add.w	sl, r3, r2
 800c29a:	9b00      	ldr	r3, [sp, #0]
 800c29c:	9a05      	ldr	r2, [sp, #20]
 800c29e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800c568 <__kernel_rem_pio2+0x310>
 800c2a2:	eb03 0802 	add.w	r8, r3, r2
 800c2a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c2a8:	1aa7      	subs	r7, r4, r2
 800c2aa:	ae20      	add	r6, sp, #128	; 0x80
 800c2ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c2b0:	2500      	movs	r5, #0
 800c2b2:	4545      	cmp	r5, r8
 800c2b4:	dd13      	ble.n	800c2de <__kernel_rem_pio2+0x86>
 800c2b6:	9b06      	ldr	r3, [sp, #24]
 800c2b8:	aa20      	add	r2, sp, #128	; 0x80
 800c2ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c2be:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c2c2:	f04f 0800 	mov.w	r8, #0
 800c2c6:	9b00      	ldr	r3, [sp, #0]
 800c2c8:	4598      	cmp	r8, r3
 800c2ca:	dc31      	bgt.n	800c330 <__kernel_rem_pio2+0xd8>
 800c2cc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800c568 <__kernel_rem_pio2+0x310>
 800c2d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c2d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2d8:	462f      	mov	r7, r5
 800c2da:	2600      	movs	r6, #0
 800c2dc:	e01b      	b.n	800c316 <__kernel_rem_pio2+0xbe>
 800c2de:	42ef      	cmn	r7, r5
 800c2e0:	d407      	bmi.n	800c2f2 <__kernel_rem_pio2+0x9a>
 800c2e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c2e6:	f7f4 f915 	bl	8000514 <__aeabi_i2d>
 800c2ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c2ee:	3501      	adds	r5, #1
 800c2f0:	e7df      	b.n	800c2b2 <__kernel_rem_pio2+0x5a>
 800c2f2:	ec51 0b18 	vmov	r0, r1, d8
 800c2f6:	e7f8      	b.n	800c2ea <__kernel_rem_pio2+0x92>
 800c2f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c300:	f7f4 f972 	bl	80005e8 <__aeabi_dmul>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c30c:	f7f3 ffb6 	bl	800027c <__adddf3>
 800c310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c314:	3601      	adds	r6, #1
 800c316:	9b05      	ldr	r3, [sp, #20]
 800c318:	429e      	cmp	r6, r3
 800c31a:	f1a7 0708 	sub.w	r7, r7, #8
 800c31e:	ddeb      	ble.n	800c2f8 <__kernel_rem_pio2+0xa0>
 800c320:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c324:	f108 0801 	add.w	r8, r8, #1
 800c328:	ecab 7b02 	vstmia	fp!, {d7}
 800c32c:	3508      	adds	r5, #8
 800c32e:	e7ca      	b.n	800c2c6 <__kernel_rem_pio2+0x6e>
 800c330:	9b00      	ldr	r3, [sp, #0]
 800c332:	aa0c      	add	r2, sp, #48	; 0x30
 800c334:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c338:	930b      	str	r3, [sp, #44]	; 0x2c
 800c33a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c33c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c340:	9c00      	ldr	r4, [sp, #0]
 800c342:	930a      	str	r3, [sp, #40]	; 0x28
 800c344:	00e3      	lsls	r3, r4, #3
 800c346:	9308      	str	r3, [sp, #32]
 800c348:	ab98      	add	r3, sp, #608	; 0x260
 800c34a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c34e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c352:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800c356:	ab70      	add	r3, sp, #448	; 0x1c0
 800c358:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c35c:	46c3      	mov	fp, r8
 800c35e:	46a1      	mov	r9, r4
 800c360:	f1b9 0f00 	cmp.w	r9, #0
 800c364:	f1a5 0508 	sub.w	r5, r5, #8
 800c368:	dc77      	bgt.n	800c45a <__kernel_rem_pio2+0x202>
 800c36a:	ec47 6b10 	vmov	d0, r6, r7
 800c36e:	4650      	mov	r0, sl
 800c370:	f7ff fec2 	bl	800c0f8 <scalbn>
 800c374:	ec57 6b10 	vmov	r6, r7, d0
 800c378:	2200      	movs	r2, #0
 800c37a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c37e:	ee10 0a10 	vmov	r0, s0
 800c382:	4639      	mov	r1, r7
 800c384:	f7f4 f930 	bl	80005e8 <__aeabi_dmul>
 800c388:	ec41 0b10 	vmov	d0, r0, r1
 800c38c:	f000 fab4 	bl	800c8f8 <floor>
 800c390:	4b7a      	ldr	r3, [pc, #488]	; (800c57c <__kernel_rem_pio2+0x324>)
 800c392:	ec51 0b10 	vmov	r0, r1, d0
 800c396:	2200      	movs	r2, #0
 800c398:	f7f4 f926 	bl	80005e8 <__aeabi_dmul>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	4639      	mov	r1, r7
 800c3a4:	f7f3 ff68 	bl	8000278 <__aeabi_dsub>
 800c3a8:	460f      	mov	r7, r1
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	f7f4 fbcc 	bl	8000b48 <__aeabi_d2iz>
 800c3b0:	9002      	str	r0, [sp, #8]
 800c3b2:	f7f4 f8af 	bl	8000514 <__aeabi_i2d>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4630      	mov	r0, r6
 800c3bc:	4639      	mov	r1, r7
 800c3be:	f7f3 ff5b 	bl	8000278 <__aeabi_dsub>
 800c3c2:	f1ba 0f00 	cmp.w	sl, #0
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	460f      	mov	r7, r1
 800c3ca:	dd6d      	ble.n	800c4a8 <__kernel_rem_pio2+0x250>
 800c3cc:	1e61      	subs	r1, r4, #1
 800c3ce:	ab0c      	add	r3, sp, #48	; 0x30
 800c3d0:	9d02      	ldr	r5, [sp, #8]
 800c3d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3d6:	f1ca 0018 	rsb	r0, sl, #24
 800c3da:	fa43 f200 	asr.w	r2, r3, r0
 800c3de:	4415      	add	r5, r2
 800c3e0:	4082      	lsls	r2, r0
 800c3e2:	1a9b      	subs	r3, r3, r2
 800c3e4:	aa0c      	add	r2, sp, #48	; 0x30
 800c3e6:	9502      	str	r5, [sp, #8]
 800c3e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c3ec:	f1ca 0217 	rsb	r2, sl, #23
 800c3f0:	fa43 fb02 	asr.w	fp, r3, r2
 800c3f4:	f1bb 0f00 	cmp.w	fp, #0
 800c3f8:	dd65      	ble.n	800c4c6 <__kernel_rem_pio2+0x26e>
 800c3fa:	9b02      	ldr	r3, [sp, #8]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	3301      	adds	r3, #1
 800c400:	9302      	str	r3, [sp, #8]
 800c402:	4615      	mov	r5, r2
 800c404:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c408:	4294      	cmp	r4, r2
 800c40a:	f300 809f 	bgt.w	800c54c <__kernel_rem_pio2+0x2f4>
 800c40e:	f1ba 0f00 	cmp.w	sl, #0
 800c412:	dd07      	ble.n	800c424 <__kernel_rem_pio2+0x1cc>
 800c414:	f1ba 0f01 	cmp.w	sl, #1
 800c418:	f000 80c1 	beq.w	800c59e <__kernel_rem_pio2+0x346>
 800c41c:	f1ba 0f02 	cmp.w	sl, #2
 800c420:	f000 80c7 	beq.w	800c5b2 <__kernel_rem_pio2+0x35a>
 800c424:	f1bb 0f02 	cmp.w	fp, #2
 800c428:	d14d      	bne.n	800c4c6 <__kernel_rem_pio2+0x26e>
 800c42a:	4632      	mov	r2, r6
 800c42c:	463b      	mov	r3, r7
 800c42e:	4954      	ldr	r1, [pc, #336]	; (800c580 <__kernel_rem_pio2+0x328>)
 800c430:	2000      	movs	r0, #0
 800c432:	f7f3 ff21 	bl	8000278 <__aeabi_dsub>
 800c436:	4606      	mov	r6, r0
 800c438:	460f      	mov	r7, r1
 800c43a:	2d00      	cmp	r5, #0
 800c43c:	d043      	beq.n	800c4c6 <__kernel_rem_pio2+0x26e>
 800c43e:	4650      	mov	r0, sl
 800c440:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800c570 <__kernel_rem_pio2+0x318>
 800c444:	f7ff fe58 	bl	800c0f8 <scalbn>
 800c448:	4630      	mov	r0, r6
 800c44a:	4639      	mov	r1, r7
 800c44c:	ec53 2b10 	vmov	r2, r3, d0
 800c450:	f7f3 ff12 	bl	8000278 <__aeabi_dsub>
 800c454:	4606      	mov	r6, r0
 800c456:	460f      	mov	r7, r1
 800c458:	e035      	b.n	800c4c6 <__kernel_rem_pio2+0x26e>
 800c45a:	4b4a      	ldr	r3, [pc, #296]	; (800c584 <__kernel_rem_pio2+0x32c>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	4630      	mov	r0, r6
 800c460:	4639      	mov	r1, r7
 800c462:	f7f4 f8c1 	bl	80005e8 <__aeabi_dmul>
 800c466:	f7f4 fb6f 	bl	8000b48 <__aeabi_d2iz>
 800c46a:	f7f4 f853 	bl	8000514 <__aeabi_i2d>
 800c46e:	4602      	mov	r2, r0
 800c470:	460b      	mov	r3, r1
 800c472:	ec43 2b18 	vmov	d8, r2, r3
 800c476:	4b44      	ldr	r3, [pc, #272]	; (800c588 <__kernel_rem_pio2+0x330>)
 800c478:	2200      	movs	r2, #0
 800c47a:	f7f4 f8b5 	bl	80005e8 <__aeabi_dmul>
 800c47e:	4602      	mov	r2, r0
 800c480:	460b      	mov	r3, r1
 800c482:	4630      	mov	r0, r6
 800c484:	4639      	mov	r1, r7
 800c486:	f7f3 fef7 	bl	8000278 <__aeabi_dsub>
 800c48a:	f7f4 fb5d 	bl	8000b48 <__aeabi_d2iz>
 800c48e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c492:	f84b 0b04 	str.w	r0, [fp], #4
 800c496:	ec51 0b18 	vmov	r0, r1, d8
 800c49a:	f7f3 feef 	bl	800027c <__adddf3>
 800c49e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	460f      	mov	r7, r1
 800c4a6:	e75b      	b.n	800c360 <__kernel_rem_pio2+0x108>
 800c4a8:	d106      	bne.n	800c4b8 <__kernel_rem_pio2+0x260>
 800c4aa:	1e63      	subs	r3, r4, #1
 800c4ac:	aa0c      	add	r2, sp, #48	; 0x30
 800c4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4b2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800c4b6:	e79d      	b.n	800c3f4 <__kernel_rem_pio2+0x19c>
 800c4b8:	4b34      	ldr	r3, [pc, #208]	; (800c58c <__kernel_rem_pio2+0x334>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f7f4 fb1a 	bl	8000af4 <__aeabi_dcmpge>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	d140      	bne.n	800c546 <__kernel_rem_pio2+0x2ee>
 800c4c4:	4683      	mov	fp, r0
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	4639      	mov	r1, r7
 800c4ce:	f7f4 faf3 	bl	8000ab8 <__aeabi_dcmpeq>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	f000 80c1 	beq.w	800c65a <__kernel_rem_pio2+0x402>
 800c4d8:	1e65      	subs	r5, r4, #1
 800c4da:	462b      	mov	r3, r5
 800c4dc:	2200      	movs	r2, #0
 800c4de:	9900      	ldr	r1, [sp, #0]
 800c4e0:	428b      	cmp	r3, r1
 800c4e2:	da6d      	bge.n	800c5c0 <__kernel_rem_pio2+0x368>
 800c4e4:	2a00      	cmp	r2, #0
 800c4e6:	f000 808a 	beq.w	800c5fe <__kernel_rem_pio2+0x3a6>
 800c4ea:	ab0c      	add	r3, sp, #48	; 0x30
 800c4ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800c4f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f000 80ae 	beq.w	800c656 <__kernel_rem_pio2+0x3fe>
 800c4fa:	4650      	mov	r0, sl
 800c4fc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800c570 <__kernel_rem_pio2+0x318>
 800c500:	f7ff fdfa 	bl	800c0f8 <scalbn>
 800c504:	1c6b      	adds	r3, r5, #1
 800c506:	00da      	lsls	r2, r3, #3
 800c508:	9205      	str	r2, [sp, #20]
 800c50a:	ec57 6b10 	vmov	r6, r7, d0
 800c50e:	aa70      	add	r2, sp, #448	; 0x1c0
 800c510:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800c584 <__kernel_rem_pio2+0x32c>
 800c514:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800c518:	462c      	mov	r4, r5
 800c51a:	f04f 0800 	mov.w	r8, #0
 800c51e:	2c00      	cmp	r4, #0
 800c520:	f280 80d4 	bge.w	800c6cc <__kernel_rem_pio2+0x474>
 800c524:	462c      	mov	r4, r5
 800c526:	2c00      	cmp	r4, #0
 800c528:	f2c0 8102 	blt.w	800c730 <__kernel_rem_pio2+0x4d8>
 800c52c:	4b18      	ldr	r3, [pc, #96]	; (800c590 <__kernel_rem_pio2+0x338>)
 800c52e:	461e      	mov	r6, r3
 800c530:	ab70      	add	r3, sp, #448	; 0x1c0
 800c532:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800c536:	1b2b      	subs	r3, r5, r4
 800c538:	f04f 0900 	mov.w	r9, #0
 800c53c:	f04f 0a00 	mov.w	sl, #0
 800c540:	2700      	movs	r7, #0
 800c542:	9306      	str	r3, [sp, #24]
 800c544:	e0e6      	b.n	800c714 <__kernel_rem_pio2+0x4bc>
 800c546:	f04f 0b02 	mov.w	fp, #2
 800c54a:	e756      	b.n	800c3fa <__kernel_rem_pio2+0x1a2>
 800c54c:	f8d8 3000 	ldr.w	r3, [r8]
 800c550:	bb05      	cbnz	r5, 800c594 <__kernel_rem_pio2+0x33c>
 800c552:	b123      	cbz	r3, 800c55e <__kernel_rem_pio2+0x306>
 800c554:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c558:	f8c8 3000 	str.w	r3, [r8]
 800c55c:	2301      	movs	r3, #1
 800c55e:	3201      	adds	r2, #1
 800c560:	f108 0804 	add.w	r8, r8, #4
 800c564:	461d      	mov	r5, r3
 800c566:	e74f      	b.n	800c408 <__kernel_rem_pio2+0x1b0>
	...
 800c574:	3ff00000 	.word	0x3ff00000
 800c578:	0800f920 	.word	0x0800f920
 800c57c:	40200000 	.word	0x40200000
 800c580:	3ff00000 	.word	0x3ff00000
 800c584:	3e700000 	.word	0x3e700000
 800c588:	41700000 	.word	0x41700000
 800c58c:	3fe00000 	.word	0x3fe00000
 800c590:	0800f8e0 	.word	0x0800f8e0
 800c594:	1acb      	subs	r3, r1, r3
 800c596:	f8c8 3000 	str.w	r3, [r8]
 800c59a:	462b      	mov	r3, r5
 800c59c:	e7df      	b.n	800c55e <__kernel_rem_pio2+0x306>
 800c59e:	1e62      	subs	r2, r4, #1
 800c5a0:	ab0c      	add	r3, sp, #48	; 0x30
 800c5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c5aa:	a90c      	add	r1, sp, #48	; 0x30
 800c5ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c5b0:	e738      	b.n	800c424 <__kernel_rem_pio2+0x1cc>
 800c5b2:	1e62      	subs	r2, r4, #1
 800c5b4:	ab0c      	add	r3, sp, #48	; 0x30
 800c5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c5be:	e7f4      	b.n	800c5aa <__kernel_rem_pio2+0x352>
 800c5c0:	a90c      	add	r1, sp, #48	; 0x30
 800c5c2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	430a      	orrs	r2, r1
 800c5ca:	e788      	b.n	800c4de <__kernel_rem_pio2+0x286>
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c5d2:	2900      	cmp	r1, #0
 800c5d4:	d0fa      	beq.n	800c5cc <__kernel_rem_pio2+0x374>
 800c5d6:	9a08      	ldr	r2, [sp, #32]
 800c5d8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800c5dc:	446a      	add	r2, sp
 800c5de:	3a98      	subs	r2, #152	; 0x98
 800c5e0:	9208      	str	r2, [sp, #32]
 800c5e2:	9a06      	ldr	r2, [sp, #24]
 800c5e4:	a920      	add	r1, sp, #128	; 0x80
 800c5e6:	18a2      	adds	r2, r4, r2
 800c5e8:	18e3      	adds	r3, r4, r3
 800c5ea:	f104 0801 	add.w	r8, r4, #1
 800c5ee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c5f2:	9302      	str	r3, [sp, #8]
 800c5f4:	9b02      	ldr	r3, [sp, #8]
 800c5f6:	4543      	cmp	r3, r8
 800c5f8:	da04      	bge.n	800c604 <__kernel_rem_pio2+0x3ac>
 800c5fa:	461c      	mov	r4, r3
 800c5fc:	e6a2      	b.n	800c344 <__kernel_rem_pio2+0xec>
 800c5fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c600:	2301      	movs	r3, #1
 800c602:	e7e4      	b.n	800c5ce <__kernel_rem_pio2+0x376>
 800c604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c606:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c60a:	f7f3 ff83 	bl	8000514 <__aeabi_i2d>
 800c60e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c614:	46ab      	mov	fp, r5
 800c616:	461c      	mov	r4, r3
 800c618:	f04f 0900 	mov.w	r9, #0
 800c61c:	2600      	movs	r6, #0
 800c61e:	2700      	movs	r7, #0
 800c620:	9b05      	ldr	r3, [sp, #20]
 800c622:	4599      	cmp	r9, r3
 800c624:	dd06      	ble.n	800c634 <__kernel_rem_pio2+0x3dc>
 800c626:	9b08      	ldr	r3, [sp, #32]
 800c628:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c62c:	f108 0801 	add.w	r8, r8, #1
 800c630:	9308      	str	r3, [sp, #32]
 800c632:	e7df      	b.n	800c5f4 <__kernel_rem_pio2+0x39c>
 800c634:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c638:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c63c:	f7f3 ffd4 	bl	80005e8 <__aeabi_dmul>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	4630      	mov	r0, r6
 800c646:	4639      	mov	r1, r7
 800c648:	f7f3 fe18 	bl	800027c <__adddf3>
 800c64c:	f109 0901 	add.w	r9, r9, #1
 800c650:	4606      	mov	r6, r0
 800c652:	460f      	mov	r7, r1
 800c654:	e7e4      	b.n	800c620 <__kernel_rem_pio2+0x3c8>
 800c656:	3d01      	subs	r5, #1
 800c658:	e747      	b.n	800c4ea <__kernel_rem_pio2+0x292>
 800c65a:	ec47 6b10 	vmov	d0, r6, r7
 800c65e:	f1ca 0000 	rsb	r0, sl, #0
 800c662:	f7ff fd49 	bl	800c0f8 <scalbn>
 800c666:	ec57 6b10 	vmov	r6, r7, d0
 800c66a:	4ba0      	ldr	r3, [pc, #640]	; (800c8ec <__kernel_rem_pio2+0x694>)
 800c66c:	ee10 0a10 	vmov	r0, s0
 800c670:	2200      	movs	r2, #0
 800c672:	4639      	mov	r1, r7
 800c674:	f7f4 fa3e 	bl	8000af4 <__aeabi_dcmpge>
 800c678:	b1f8      	cbz	r0, 800c6ba <__kernel_rem_pio2+0x462>
 800c67a:	4b9d      	ldr	r3, [pc, #628]	; (800c8f0 <__kernel_rem_pio2+0x698>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	4630      	mov	r0, r6
 800c680:	4639      	mov	r1, r7
 800c682:	f7f3 ffb1 	bl	80005e8 <__aeabi_dmul>
 800c686:	f7f4 fa5f 	bl	8000b48 <__aeabi_d2iz>
 800c68a:	4680      	mov	r8, r0
 800c68c:	f7f3 ff42 	bl	8000514 <__aeabi_i2d>
 800c690:	4b96      	ldr	r3, [pc, #600]	; (800c8ec <__kernel_rem_pio2+0x694>)
 800c692:	2200      	movs	r2, #0
 800c694:	f7f3 ffa8 	bl	80005e8 <__aeabi_dmul>
 800c698:	460b      	mov	r3, r1
 800c69a:	4602      	mov	r2, r0
 800c69c:	4639      	mov	r1, r7
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f7f3 fdea 	bl	8000278 <__aeabi_dsub>
 800c6a4:	f7f4 fa50 	bl	8000b48 <__aeabi_d2iz>
 800c6a8:	1c65      	adds	r5, r4, #1
 800c6aa:	ab0c      	add	r3, sp, #48	; 0x30
 800c6ac:	f10a 0a18 	add.w	sl, sl, #24
 800c6b0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c6b4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c6b8:	e71f      	b.n	800c4fa <__kernel_rem_pio2+0x2a2>
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	4639      	mov	r1, r7
 800c6be:	f7f4 fa43 	bl	8000b48 <__aeabi_d2iz>
 800c6c2:	ab0c      	add	r3, sp, #48	; 0x30
 800c6c4:	4625      	mov	r5, r4
 800c6c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c6ca:	e716      	b.n	800c4fa <__kernel_rem_pio2+0x2a2>
 800c6cc:	ab0c      	add	r3, sp, #48	; 0x30
 800c6ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c6d2:	f7f3 ff1f 	bl	8000514 <__aeabi_i2d>
 800c6d6:	4632      	mov	r2, r6
 800c6d8:	463b      	mov	r3, r7
 800c6da:	f7f3 ff85 	bl	80005e8 <__aeabi_dmul>
 800c6de:	4642      	mov	r2, r8
 800c6e0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c6e4:	464b      	mov	r3, r9
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	4639      	mov	r1, r7
 800c6ea:	f7f3 ff7d 	bl	80005e8 <__aeabi_dmul>
 800c6ee:	3c01      	subs	r4, #1
 800c6f0:	4606      	mov	r6, r0
 800c6f2:	460f      	mov	r7, r1
 800c6f4:	e713      	b.n	800c51e <__kernel_rem_pio2+0x2c6>
 800c6f6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800c6fa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800c6fe:	f7f3 ff73 	bl	80005e8 <__aeabi_dmul>
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4648      	mov	r0, r9
 800c708:	4651      	mov	r1, sl
 800c70a:	f7f3 fdb7 	bl	800027c <__adddf3>
 800c70e:	3701      	adds	r7, #1
 800c710:	4681      	mov	r9, r0
 800c712:	468a      	mov	sl, r1
 800c714:	9b00      	ldr	r3, [sp, #0]
 800c716:	429f      	cmp	r7, r3
 800c718:	dc02      	bgt.n	800c720 <__kernel_rem_pio2+0x4c8>
 800c71a:	9b06      	ldr	r3, [sp, #24]
 800c71c:	429f      	cmp	r7, r3
 800c71e:	ddea      	ble.n	800c6f6 <__kernel_rem_pio2+0x49e>
 800c720:	9a06      	ldr	r2, [sp, #24]
 800c722:	ab48      	add	r3, sp, #288	; 0x120
 800c724:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800c728:	e9c6 9a00 	strd	r9, sl, [r6]
 800c72c:	3c01      	subs	r4, #1
 800c72e:	e6fa      	b.n	800c526 <__kernel_rem_pio2+0x2ce>
 800c730:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c732:	2b02      	cmp	r3, #2
 800c734:	dc0b      	bgt.n	800c74e <__kernel_rem_pio2+0x4f6>
 800c736:	2b00      	cmp	r3, #0
 800c738:	dc39      	bgt.n	800c7ae <__kernel_rem_pio2+0x556>
 800c73a:	d05d      	beq.n	800c7f8 <__kernel_rem_pio2+0x5a0>
 800c73c:	9b02      	ldr	r3, [sp, #8]
 800c73e:	f003 0007 	and.w	r0, r3, #7
 800c742:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c746:	ecbd 8b02 	vpop	{d8}
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c750:	2b03      	cmp	r3, #3
 800c752:	d1f3      	bne.n	800c73c <__kernel_rem_pio2+0x4e4>
 800c754:	9b05      	ldr	r3, [sp, #20]
 800c756:	9500      	str	r5, [sp, #0]
 800c758:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c75c:	eb0d 0403 	add.w	r4, sp, r3
 800c760:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800c764:	46a2      	mov	sl, r4
 800c766:	9b00      	ldr	r3, [sp, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f1aa 0a08 	sub.w	sl, sl, #8
 800c76e:	dc69      	bgt.n	800c844 <__kernel_rem_pio2+0x5ec>
 800c770:	46aa      	mov	sl, r5
 800c772:	f1ba 0f01 	cmp.w	sl, #1
 800c776:	f1a4 0408 	sub.w	r4, r4, #8
 800c77a:	f300 8083 	bgt.w	800c884 <__kernel_rem_pio2+0x62c>
 800c77e:	9c05      	ldr	r4, [sp, #20]
 800c780:	ab48      	add	r3, sp, #288	; 0x120
 800c782:	441c      	add	r4, r3
 800c784:	2000      	movs	r0, #0
 800c786:	2100      	movs	r1, #0
 800c788:	2d01      	cmp	r5, #1
 800c78a:	f300 809a 	bgt.w	800c8c2 <__kernel_rem_pio2+0x66a>
 800c78e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800c792:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c796:	f1bb 0f00 	cmp.w	fp, #0
 800c79a:	f040 8098 	bne.w	800c8ce <__kernel_rem_pio2+0x676>
 800c79e:	9b04      	ldr	r3, [sp, #16]
 800c7a0:	e9c3 7800 	strd	r7, r8, [r3]
 800c7a4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c7a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c7ac:	e7c6      	b.n	800c73c <__kernel_rem_pio2+0x4e4>
 800c7ae:	9e05      	ldr	r6, [sp, #20]
 800c7b0:	ab48      	add	r3, sp, #288	; 0x120
 800c7b2:	441e      	add	r6, r3
 800c7b4:	462c      	mov	r4, r5
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	2c00      	cmp	r4, #0
 800c7bc:	da33      	bge.n	800c826 <__kernel_rem_pio2+0x5ce>
 800c7be:	f1bb 0f00 	cmp.w	fp, #0
 800c7c2:	d036      	beq.n	800c832 <__kernel_rem_pio2+0x5da>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7ca:	9c04      	ldr	r4, [sp, #16]
 800c7cc:	e9c4 2300 	strd	r2, r3, [r4]
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c7d8:	f7f3 fd4e 	bl	8000278 <__aeabi_dsub>
 800c7dc:	ae4a      	add	r6, sp, #296	; 0x128
 800c7de:	2401      	movs	r4, #1
 800c7e0:	42a5      	cmp	r5, r4
 800c7e2:	da29      	bge.n	800c838 <__kernel_rem_pio2+0x5e0>
 800c7e4:	f1bb 0f00 	cmp.w	fp, #0
 800c7e8:	d002      	beq.n	800c7f0 <__kernel_rem_pio2+0x598>
 800c7ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	9b04      	ldr	r3, [sp, #16]
 800c7f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c7f6:	e7a1      	b.n	800c73c <__kernel_rem_pio2+0x4e4>
 800c7f8:	9c05      	ldr	r4, [sp, #20]
 800c7fa:	ab48      	add	r3, sp, #288	; 0x120
 800c7fc:	441c      	add	r4, r3
 800c7fe:	2000      	movs	r0, #0
 800c800:	2100      	movs	r1, #0
 800c802:	2d00      	cmp	r5, #0
 800c804:	da09      	bge.n	800c81a <__kernel_rem_pio2+0x5c2>
 800c806:	f1bb 0f00 	cmp.w	fp, #0
 800c80a:	d002      	beq.n	800c812 <__kernel_rem_pio2+0x5ba>
 800c80c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c810:	4619      	mov	r1, r3
 800c812:	9b04      	ldr	r3, [sp, #16]
 800c814:	e9c3 0100 	strd	r0, r1, [r3]
 800c818:	e790      	b.n	800c73c <__kernel_rem_pio2+0x4e4>
 800c81a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c81e:	f7f3 fd2d 	bl	800027c <__adddf3>
 800c822:	3d01      	subs	r5, #1
 800c824:	e7ed      	b.n	800c802 <__kernel_rem_pio2+0x5aa>
 800c826:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c82a:	f7f3 fd27 	bl	800027c <__adddf3>
 800c82e:	3c01      	subs	r4, #1
 800c830:	e7c3      	b.n	800c7ba <__kernel_rem_pio2+0x562>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	e7c8      	b.n	800c7ca <__kernel_rem_pio2+0x572>
 800c838:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c83c:	f7f3 fd1e 	bl	800027c <__adddf3>
 800c840:	3401      	adds	r4, #1
 800c842:	e7cd      	b.n	800c7e0 <__kernel_rem_pio2+0x588>
 800c844:	e9da 8900 	ldrd	r8, r9, [sl]
 800c848:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c84c:	9b00      	ldr	r3, [sp, #0]
 800c84e:	3b01      	subs	r3, #1
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	4632      	mov	r2, r6
 800c854:	463b      	mov	r3, r7
 800c856:	4640      	mov	r0, r8
 800c858:	4649      	mov	r1, r9
 800c85a:	f7f3 fd0f 	bl	800027c <__adddf3>
 800c85e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	4640      	mov	r0, r8
 800c868:	4649      	mov	r1, r9
 800c86a:	f7f3 fd05 	bl	8000278 <__aeabi_dsub>
 800c86e:	4632      	mov	r2, r6
 800c870:	463b      	mov	r3, r7
 800c872:	f7f3 fd03 	bl	800027c <__adddf3>
 800c876:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c87a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c87e:	ed8a 7b00 	vstr	d7, [sl]
 800c882:	e770      	b.n	800c766 <__kernel_rem_pio2+0x50e>
 800c884:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c888:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c88c:	4640      	mov	r0, r8
 800c88e:	4632      	mov	r2, r6
 800c890:	463b      	mov	r3, r7
 800c892:	4649      	mov	r1, r9
 800c894:	f7f3 fcf2 	bl	800027c <__adddf3>
 800c898:	e9cd 0100 	strd	r0, r1, [sp]
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	4649      	mov	r1, r9
 800c8a4:	f7f3 fce8 	bl	8000278 <__aeabi_dsub>
 800c8a8:	4632      	mov	r2, r6
 800c8aa:	463b      	mov	r3, r7
 800c8ac:	f7f3 fce6 	bl	800027c <__adddf3>
 800c8b0:	ed9d 7b00 	vldr	d7, [sp]
 800c8b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c8b8:	ed84 7b00 	vstr	d7, [r4]
 800c8bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8c0:	e757      	b.n	800c772 <__kernel_rem_pio2+0x51a>
 800c8c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c8c6:	f7f3 fcd9 	bl	800027c <__adddf3>
 800c8ca:	3d01      	subs	r5, #1
 800c8cc:	e75c      	b.n	800c788 <__kernel_rem_pio2+0x530>
 800c8ce:	9b04      	ldr	r3, [sp, #16]
 800c8d0:	9a04      	ldr	r2, [sp, #16]
 800c8d2:	601f      	str	r7, [r3, #0]
 800c8d4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c8d8:	605c      	str	r4, [r3, #4]
 800c8da:	609d      	str	r5, [r3, #8]
 800c8dc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c8e0:	60d3      	str	r3, [r2, #12]
 800c8e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8e6:	6110      	str	r0, [r2, #16]
 800c8e8:	6153      	str	r3, [r2, #20]
 800c8ea:	e727      	b.n	800c73c <__kernel_rem_pio2+0x4e4>
 800c8ec:	41700000 	.word	0x41700000
 800c8f0:	3e700000 	.word	0x3e700000
 800c8f4:	00000000 	.word	0x00000000

0800c8f8 <floor>:
 800c8f8:	ec51 0b10 	vmov	r0, r1, d0
 800c8fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c904:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800c908:	2e13      	cmp	r6, #19
 800c90a:	ee10 5a10 	vmov	r5, s0
 800c90e:	ee10 8a10 	vmov	r8, s0
 800c912:	460c      	mov	r4, r1
 800c914:	dc31      	bgt.n	800c97a <floor+0x82>
 800c916:	2e00      	cmp	r6, #0
 800c918:	da14      	bge.n	800c944 <floor+0x4c>
 800c91a:	a333      	add	r3, pc, #204	; (adr r3, 800c9e8 <floor+0xf0>)
 800c91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c920:	f7f3 fcac 	bl	800027c <__adddf3>
 800c924:	2200      	movs	r2, #0
 800c926:	2300      	movs	r3, #0
 800c928:	f7f4 f8ee 	bl	8000b08 <__aeabi_dcmpgt>
 800c92c:	b138      	cbz	r0, 800c93e <floor+0x46>
 800c92e:	2c00      	cmp	r4, #0
 800c930:	da53      	bge.n	800c9da <floor+0xe2>
 800c932:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c936:	4325      	orrs	r5, r4
 800c938:	d052      	beq.n	800c9e0 <floor+0xe8>
 800c93a:	4c2d      	ldr	r4, [pc, #180]	; (800c9f0 <floor+0xf8>)
 800c93c:	2500      	movs	r5, #0
 800c93e:	4621      	mov	r1, r4
 800c940:	4628      	mov	r0, r5
 800c942:	e024      	b.n	800c98e <floor+0x96>
 800c944:	4f2b      	ldr	r7, [pc, #172]	; (800c9f4 <floor+0xfc>)
 800c946:	4137      	asrs	r7, r6
 800c948:	ea01 0307 	and.w	r3, r1, r7
 800c94c:	4303      	orrs	r3, r0
 800c94e:	d01e      	beq.n	800c98e <floor+0x96>
 800c950:	a325      	add	r3, pc, #148	; (adr r3, 800c9e8 <floor+0xf0>)
 800c952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c956:	f7f3 fc91 	bl	800027c <__adddf3>
 800c95a:	2200      	movs	r2, #0
 800c95c:	2300      	movs	r3, #0
 800c95e:	f7f4 f8d3 	bl	8000b08 <__aeabi_dcmpgt>
 800c962:	2800      	cmp	r0, #0
 800c964:	d0eb      	beq.n	800c93e <floor+0x46>
 800c966:	2c00      	cmp	r4, #0
 800c968:	bfbe      	ittt	lt
 800c96a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c96e:	4133      	asrlt	r3, r6
 800c970:	18e4      	addlt	r4, r4, r3
 800c972:	ea24 0407 	bic.w	r4, r4, r7
 800c976:	2500      	movs	r5, #0
 800c978:	e7e1      	b.n	800c93e <floor+0x46>
 800c97a:	2e33      	cmp	r6, #51	; 0x33
 800c97c:	dd0b      	ble.n	800c996 <floor+0x9e>
 800c97e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c982:	d104      	bne.n	800c98e <floor+0x96>
 800c984:	ee10 2a10 	vmov	r2, s0
 800c988:	460b      	mov	r3, r1
 800c98a:	f7f3 fc77 	bl	800027c <__adddf3>
 800c98e:	ec41 0b10 	vmov	d0, r0, r1
 800c992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c996:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800c99a:	f04f 37ff 	mov.w	r7, #4294967295
 800c99e:	40df      	lsrs	r7, r3
 800c9a0:	4238      	tst	r0, r7
 800c9a2:	d0f4      	beq.n	800c98e <floor+0x96>
 800c9a4:	a310      	add	r3, pc, #64	; (adr r3, 800c9e8 <floor+0xf0>)
 800c9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9aa:	f7f3 fc67 	bl	800027c <__adddf3>
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	f7f4 f8a9 	bl	8000b08 <__aeabi_dcmpgt>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d0c1      	beq.n	800c93e <floor+0x46>
 800c9ba:	2c00      	cmp	r4, #0
 800c9bc:	da0a      	bge.n	800c9d4 <floor+0xdc>
 800c9be:	2e14      	cmp	r6, #20
 800c9c0:	d101      	bne.n	800c9c6 <floor+0xce>
 800c9c2:	3401      	adds	r4, #1
 800c9c4:	e006      	b.n	800c9d4 <floor+0xdc>
 800c9c6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	40b3      	lsls	r3, r6
 800c9ce:	441d      	add	r5, r3
 800c9d0:	45a8      	cmp	r8, r5
 800c9d2:	d8f6      	bhi.n	800c9c2 <floor+0xca>
 800c9d4:	ea25 0507 	bic.w	r5, r5, r7
 800c9d8:	e7b1      	b.n	800c93e <floor+0x46>
 800c9da:	2500      	movs	r5, #0
 800c9dc:	462c      	mov	r4, r5
 800c9de:	e7ae      	b.n	800c93e <floor+0x46>
 800c9e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c9e4:	e7ab      	b.n	800c93e <floor+0x46>
 800c9e6:	bf00      	nop
 800c9e8:	8800759c 	.word	0x8800759c
 800c9ec:	7e37e43c 	.word	0x7e37e43c
 800c9f0:	bff00000 	.word	0xbff00000
 800c9f4:	000fffff 	.word	0x000fffff

0800c9f8 <sulp>:
 800c9f8:	b570      	push	{r4, r5, r6, lr}
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	460d      	mov	r5, r1
 800c9fe:	ec45 4b10 	vmov	d0, r4, r5
 800ca02:	4616      	mov	r6, r2
 800ca04:	f001 ff80 	bl	800e908 <__ulp>
 800ca08:	ec51 0b10 	vmov	r0, r1, d0
 800ca0c:	b17e      	cbz	r6, 800ca2e <sulp+0x36>
 800ca0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	dd09      	ble.n	800ca2e <sulp+0x36>
 800ca1a:	051b      	lsls	r3, r3, #20
 800ca1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ca20:	2400      	movs	r4, #0
 800ca22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ca26:	4622      	mov	r2, r4
 800ca28:	462b      	mov	r3, r5
 800ca2a:	f7f3 fddd 	bl	80005e8 <__aeabi_dmul>
 800ca2e:	bd70      	pop	{r4, r5, r6, pc}

0800ca30 <_strtod_l>:
 800ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	ed2d 8b02 	vpush	{d8}
 800ca38:	b09b      	sub	sp, #108	; 0x6c
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	9213      	str	r2, [sp, #76]	; 0x4c
 800ca3e:	2200      	movs	r2, #0
 800ca40:	9216      	str	r2, [sp, #88]	; 0x58
 800ca42:	460d      	mov	r5, r1
 800ca44:	f04f 0800 	mov.w	r8, #0
 800ca48:	f04f 0900 	mov.w	r9, #0
 800ca4c:	460a      	mov	r2, r1
 800ca4e:	9215      	str	r2, [sp, #84]	; 0x54
 800ca50:	7811      	ldrb	r1, [r2, #0]
 800ca52:	292b      	cmp	r1, #43	; 0x2b
 800ca54:	d04c      	beq.n	800caf0 <_strtod_l+0xc0>
 800ca56:	d83a      	bhi.n	800cace <_strtod_l+0x9e>
 800ca58:	290d      	cmp	r1, #13
 800ca5a:	d834      	bhi.n	800cac6 <_strtod_l+0x96>
 800ca5c:	2908      	cmp	r1, #8
 800ca5e:	d834      	bhi.n	800caca <_strtod_l+0x9a>
 800ca60:	2900      	cmp	r1, #0
 800ca62:	d03d      	beq.n	800cae0 <_strtod_l+0xb0>
 800ca64:	2200      	movs	r2, #0
 800ca66:	920a      	str	r2, [sp, #40]	; 0x28
 800ca68:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ca6a:	7832      	ldrb	r2, [r6, #0]
 800ca6c:	2a30      	cmp	r2, #48	; 0x30
 800ca6e:	f040 80b4 	bne.w	800cbda <_strtod_l+0x1aa>
 800ca72:	7872      	ldrb	r2, [r6, #1]
 800ca74:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ca78:	2a58      	cmp	r2, #88	; 0x58
 800ca7a:	d170      	bne.n	800cb5e <_strtod_l+0x12e>
 800ca7c:	9302      	str	r3, [sp, #8]
 800ca7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca80:	9301      	str	r3, [sp, #4]
 800ca82:	ab16      	add	r3, sp, #88	; 0x58
 800ca84:	9300      	str	r3, [sp, #0]
 800ca86:	4a8e      	ldr	r2, [pc, #568]	; (800ccc0 <_strtod_l+0x290>)
 800ca88:	ab17      	add	r3, sp, #92	; 0x5c
 800ca8a:	a915      	add	r1, sp, #84	; 0x54
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f001 f821 	bl	800dad4 <__gethex>
 800ca92:	f010 070f 	ands.w	r7, r0, #15
 800ca96:	4605      	mov	r5, r0
 800ca98:	d005      	beq.n	800caa6 <_strtod_l+0x76>
 800ca9a:	2f06      	cmp	r7, #6
 800ca9c:	d12a      	bne.n	800caf4 <_strtod_l+0xc4>
 800ca9e:	3601      	adds	r6, #1
 800caa0:	2300      	movs	r3, #0
 800caa2:	9615      	str	r6, [sp, #84]	; 0x54
 800caa4:	930a      	str	r3, [sp, #40]	; 0x28
 800caa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f040 857f 	bne.w	800d5ac <_strtod_l+0xb7c>
 800caae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cab0:	b1db      	cbz	r3, 800caea <_strtod_l+0xba>
 800cab2:	4642      	mov	r2, r8
 800cab4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cab8:	ec43 2b10 	vmov	d0, r2, r3
 800cabc:	b01b      	add	sp, #108	; 0x6c
 800cabe:	ecbd 8b02 	vpop	{d8}
 800cac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac6:	2920      	cmp	r1, #32
 800cac8:	d1cc      	bne.n	800ca64 <_strtod_l+0x34>
 800caca:	3201      	adds	r2, #1
 800cacc:	e7bf      	b.n	800ca4e <_strtod_l+0x1e>
 800cace:	292d      	cmp	r1, #45	; 0x2d
 800cad0:	d1c8      	bne.n	800ca64 <_strtod_l+0x34>
 800cad2:	2101      	movs	r1, #1
 800cad4:	910a      	str	r1, [sp, #40]	; 0x28
 800cad6:	1c51      	adds	r1, r2, #1
 800cad8:	9115      	str	r1, [sp, #84]	; 0x54
 800cada:	7852      	ldrb	r2, [r2, #1]
 800cadc:	2a00      	cmp	r2, #0
 800cade:	d1c3      	bne.n	800ca68 <_strtod_l+0x38>
 800cae0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cae2:	9515      	str	r5, [sp, #84]	; 0x54
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f040 855f 	bne.w	800d5a8 <_strtod_l+0xb78>
 800caea:	4642      	mov	r2, r8
 800caec:	464b      	mov	r3, r9
 800caee:	e7e3      	b.n	800cab8 <_strtod_l+0x88>
 800caf0:	2100      	movs	r1, #0
 800caf2:	e7ef      	b.n	800cad4 <_strtod_l+0xa4>
 800caf4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800caf6:	b13a      	cbz	r2, 800cb08 <_strtod_l+0xd8>
 800caf8:	2135      	movs	r1, #53	; 0x35
 800cafa:	a818      	add	r0, sp, #96	; 0x60
 800cafc:	f002 f801 	bl	800eb02 <__copybits>
 800cb00:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cb02:	4620      	mov	r0, r4
 800cb04:	f001 fbd4 	bl	800e2b0 <_Bfree>
 800cb08:	3f01      	subs	r7, #1
 800cb0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb0c:	2f04      	cmp	r7, #4
 800cb0e:	d806      	bhi.n	800cb1e <_strtod_l+0xee>
 800cb10:	e8df f007 	tbb	[pc, r7]
 800cb14:	201d0314 	.word	0x201d0314
 800cb18:	14          	.byte	0x14
 800cb19:	00          	.byte	0x00
 800cb1a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800cb1e:	05e9      	lsls	r1, r5, #23
 800cb20:	bf48      	it	mi
 800cb22:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800cb26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb2a:	0d1b      	lsrs	r3, r3, #20
 800cb2c:	051b      	lsls	r3, r3, #20
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1b9      	bne.n	800caa6 <_strtod_l+0x76>
 800cb32:	f000 fedf 	bl	800d8f4 <__errno>
 800cb36:	2322      	movs	r3, #34	; 0x22
 800cb38:	6003      	str	r3, [r0, #0]
 800cb3a:	e7b4      	b.n	800caa6 <_strtod_l+0x76>
 800cb3c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800cb40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cb44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cb48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800cb4c:	e7e7      	b.n	800cb1e <_strtod_l+0xee>
 800cb4e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ccc8 <_strtod_l+0x298>
 800cb52:	e7e4      	b.n	800cb1e <_strtod_l+0xee>
 800cb54:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800cb58:	f04f 38ff 	mov.w	r8, #4294967295
 800cb5c:	e7df      	b.n	800cb1e <_strtod_l+0xee>
 800cb5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb60:	1c5a      	adds	r2, r3, #1
 800cb62:	9215      	str	r2, [sp, #84]	; 0x54
 800cb64:	785b      	ldrb	r3, [r3, #1]
 800cb66:	2b30      	cmp	r3, #48	; 0x30
 800cb68:	d0f9      	beq.n	800cb5e <_strtod_l+0x12e>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d09b      	beq.n	800caa6 <_strtod_l+0x76>
 800cb6e:	2301      	movs	r3, #1
 800cb70:	f04f 0a00 	mov.w	sl, #0
 800cb74:	9304      	str	r3, [sp, #16]
 800cb76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb78:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb7a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cb7e:	46d3      	mov	fp, sl
 800cb80:	220a      	movs	r2, #10
 800cb82:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cb84:	7806      	ldrb	r6, [r0, #0]
 800cb86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cb8a:	b2d9      	uxtb	r1, r3
 800cb8c:	2909      	cmp	r1, #9
 800cb8e:	d926      	bls.n	800cbde <_strtod_l+0x1ae>
 800cb90:	494c      	ldr	r1, [pc, #304]	; (800ccc4 <_strtod_l+0x294>)
 800cb92:	2201      	movs	r2, #1
 800cb94:	f000 fe55 	bl	800d842 <strncmp>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d030      	beq.n	800cbfe <_strtod_l+0x1ce>
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	4632      	mov	r2, r6
 800cba0:	9005      	str	r0, [sp, #20]
 800cba2:	465e      	mov	r6, fp
 800cba4:	4603      	mov	r3, r0
 800cba6:	2a65      	cmp	r2, #101	; 0x65
 800cba8:	d001      	beq.n	800cbae <_strtod_l+0x17e>
 800cbaa:	2a45      	cmp	r2, #69	; 0x45
 800cbac:	d113      	bne.n	800cbd6 <_strtod_l+0x1a6>
 800cbae:	b91e      	cbnz	r6, 800cbb8 <_strtod_l+0x188>
 800cbb0:	9a04      	ldr	r2, [sp, #16]
 800cbb2:	4302      	orrs	r2, r0
 800cbb4:	d094      	beq.n	800cae0 <_strtod_l+0xb0>
 800cbb6:	2600      	movs	r6, #0
 800cbb8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cbba:	1c6a      	adds	r2, r5, #1
 800cbbc:	9215      	str	r2, [sp, #84]	; 0x54
 800cbbe:	786a      	ldrb	r2, [r5, #1]
 800cbc0:	2a2b      	cmp	r2, #43	; 0x2b
 800cbc2:	d074      	beq.n	800ccae <_strtod_l+0x27e>
 800cbc4:	2a2d      	cmp	r2, #45	; 0x2d
 800cbc6:	d078      	beq.n	800ccba <_strtod_l+0x28a>
 800cbc8:	f04f 0c00 	mov.w	ip, #0
 800cbcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cbd0:	2909      	cmp	r1, #9
 800cbd2:	d97f      	bls.n	800ccd4 <_strtod_l+0x2a4>
 800cbd4:	9515      	str	r5, [sp, #84]	; 0x54
 800cbd6:	2700      	movs	r7, #0
 800cbd8:	e09e      	b.n	800cd18 <_strtod_l+0x2e8>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	e7c8      	b.n	800cb70 <_strtod_l+0x140>
 800cbde:	f1bb 0f08 	cmp.w	fp, #8
 800cbe2:	bfd8      	it	le
 800cbe4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cbe6:	f100 0001 	add.w	r0, r0, #1
 800cbea:	bfda      	itte	le
 800cbec:	fb02 3301 	mlale	r3, r2, r1, r3
 800cbf0:	9309      	strle	r3, [sp, #36]	; 0x24
 800cbf2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800cbf6:	f10b 0b01 	add.w	fp, fp, #1
 800cbfa:	9015      	str	r0, [sp, #84]	; 0x54
 800cbfc:	e7c1      	b.n	800cb82 <_strtod_l+0x152>
 800cbfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc00:	1c5a      	adds	r2, r3, #1
 800cc02:	9215      	str	r2, [sp, #84]	; 0x54
 800cc04:	785a      	ldrb	r2, [r3, #1]
 800cc06:	f1bb 0f00 	cmp.w	fp, #0
 800cc0a:	d037      	beq.n	800cc7c <_strtod_l+0x24c>
 800cc0c:	9005      	str	r0, [sp, #20]
 800cc0e:	465e      	mov	r6, fp
 800cc10:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cc14:	2b09      	cmp	r3, #9
 800cc16:	d912      	bls.n	800cc3e <_strtod_l+0x20e>
 800cc18:	2301      	movs	r3, #1
 800cc1a:	e7c4      	b.n	800cba6 <_strtod_l+0x176>
 800cc1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc1e:	1c5a      	adds	r2, r3, #1
 800cc20:	9215      	str	r2, [sp, #84]	; 0x54
 800cc22:	785a      	ldrb	r2, [r3, #1]
 800cc24:	3001      	adds	r0, #1
 800cc26:	2a30      	cmp	r2, #48	; 0x30
 800cc28:	d0f8      	beq.n	800cc1c <_strtod_l+0x1ec>
 800cc2a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cc2e:	2b08      	cmp	r3, #8
 800cc30:	f200 84c1 	bhi.w	800d5b6 <_strtod_l+0xb86>
 800cc34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc36:	9005      	str	r0, [sp, #20]
 800cc38:	2000      	movs	r0, #0
 800cc3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc3c:	4606      	mov	r6, r0
 800cc3e:	3a30      	subs	r2, #48	; 0x30
 800cc40:	f100 0301 	add.w	r3, r0, #1
 800cc44:	d014      	beq.n	800cc70 <_strtod_l+0x240>
 800cc46:	9905      	ldr	r1, [sp, #20]
 800cc48:	4419      	add	r1, r3
 800cc4a:	9105      	str	r1, [sp, #20]
 800cc4c:	4633      	mov	r3, r6
 800cc4e:	eb00 0c06 	add.w	ip, r0, r6
 800cc52:	210a      	movs	r1, #10
 800cc54:	4563      	cmp	r3, ip
 800cc56:	d113      	bne.n	800cc80 <_strtod_l+0x250>
 800cc58:	1833      	adds	r3, r6, r0
 800cc5a:	2b08      	cmp	r3, #8
 800cc5c:	f106 0601 	add.w	r6, r6, #1
 800cc60:	4406      	add	r6, r0
 800cc62:	dc1a      	bgt.n	800cc9a <_strtod_l+0x26a>
 800cc64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc66:	230a      	movs	r3, #10
 800cc68:	fb03 2301 	mla	r3, r3, r1, r2
 800cc6c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc6e:	2300      	movs	r3, #0
 800cc70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cc72:	1c51      	adds	r1, r2, #1
 800cc74:	9115      	str	r1, [sp, #84]	; 0x54
 800cc76:	7852      	ldrb	r2, [r2, #1]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	e7c9      	b.n	800cc10 <_strtod_l+0x1e0>
 800cc7c:	4658      	mov	r0, fp
 800cc7e:	e7d2      	b.n	800cc26 <_strtod_l+0x1f6>
 800cc80:	2b08      	cmp	r3, #8
 800cc82:	f103 0301 	add.w	r3, r3, #1
 800cc86:	dc03      	bgt.n	800cc90 <_strtod_l+0x260>
 800cc88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cc8a:	434f      	muls	r7, r1
 800cc8c:	9709      	str	r7, [sp, #36]	; 0x24
 800cc8e:	e7e1      	b.n	800cc54 <_strtod_l+0x224>
 800cc90:	2b10      	cmp	r3, #16
 800cc92:	bfd8      	it	le
 800cc94:	fb01 fa0a 	mulle.w	sl, r1, sl
 800cc98:	e7dc      	b.n	800cc54 <_strtod_l+0x224>
 800cc9a:	2e10      	cmp	r6, #16
 800cc9c:	bfdc      	itt	le
 800cc9e:	230a      	movle	r3, #10
 800cca0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800cca4:	e7e3      	b.n	800cc6e <_strtod_l+0x23e>
 800cca6:	2300      	movs	r3, #0
 800cca8:	9305      	str	r3, [sp, #20]
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e780      	b.n	800cbb0 <_strtod_l+0x180>
 800ccae:	f04f 0c00 	mov.w	ip, #0
 800ccb2:	1caa      	adds	r2, r5, #2
 800ccb4:	9215      	str	r2, [sp, #84]	; 0x54
 800ccb6:	78aa      	ldrb	r2, [r5, #2]
 800ccb8:	e788      	b.n	800cbcc <_strtod_l+0x19c>
 800ccba:	f04f 0c01 	mov.w	ip, #1
 800ccbe:	e7f8      	b.n	800ccb2 <_strtod_l+0x282>
 800ccc0:	0800f940 	.word	0x0800f940
 800ccc4:	0800f930 	.word	0x0800f930
 800ccc8:	7ff00000 	.word	0x7ff00000
 800cccc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ccce:	1c51      	adds	r1, r2, #1
 800ccd0:	9115      	str	r1, [sp, #84]	; 0x54
 800ccd2:	7852      	ldrb	r2, [r2, #1]
 800ccd4:	2a30      	cmp	r2, #48	; 0x30
 800ccd6:	d0f9      	beq.n	800cccc <_strtod_l+0x29c>
 800ccd8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ccdc:	2908      	cmp	r1, #8
 800ccde:	f63f af7a 	bhi.w	800cbd6 <_strtod_l+0x1a6>
 800cce2:	3a30      	subs	r2, #48	; 0x30
 800cce4:	9208      	str	r2, [sp, #32]
 800cce6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cce8:	920c      	str	r2, [sp, #48]	; 0x30
 800ccea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ccec:	1c57      	adds	r7, r2, #1
 800ccee:	9715      	str	r7, [sp, #84]	; 0x54
 800ccf0:	7852      	ldrb	r2, [r2, #1]
 800ccf2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ccf6:	f1be 0f09 	cmp.w	lr, #9
 800ccfa:	d938      	bls.n	800cd6e <_strtod_l+0x33e>
 800ccfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ccfe:	1a7f      	subs	r7, r7, r1
 800cd00:	2f08      	cmp	r7, #8
 800cd02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800cd06:	dc03      	bgt.n	800cd10 <_strtod_l+0x2e0>
 800cd08:	9908      	ldr	r1, [sp, #32]
 800cd0a:	428f      	cmp	r7, r1
 800cd0c:	bfa8      	it	ge
 800cd0e:	460f      	movge	r7, r1
 800cd10:	f1bc 0f00 	cmp.w	ip, #0
 800cd14:	d000      	beq.n	800cd18 <_strtod_l+0x2e8>
 800cd16:	427f      	negs	r7, r7
 800cd18:	2e00      	cmp	r6, #0
 800cd1a:	d14f      	bne.n	800cdbc <_strtod_l+0x38c>
 800cd1c:	9904      	ldr	r1, [sp, #16]
 800cd1e:	4301      	orrs	r1, r0
 800cd20:	f47f aec1 	bne.w	800caa6 <_strtod_l+0x76>
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f47f aedb 	bne.w	800cae0 <_strtod_l+0xb0>
 800cd2a:	2a69      	cmp	r2, #105	; 0x69
 800cd2c:	d029      	beq.n	800cd82 <_strtod_l+0x352>
 800cd2e:	dc26      	bgt.n	800cd7e <_strtod_l+0x34e>
 800cd30:	2a49      	cmp	r2, #73	; 0x49
 800cd32:	d026      	beq.n	800cd82 <_strtod_l+0x352>
 800cd34:	2a4e      	cmp	r2, #78	; 0x4e
 800cd36:	f47f aed3 	bne.w	800cae0 <_strtod_l+0xb0>
 800cd3a:	499b      	ldr	r1, [pc, #620]	; (800cfa8 <_strtod_l+0x578>)
 800cd3c:	a815      	add	r0, sp, #84	; 0x54
 800cd3e:	f001 f909 	bl	800df54 <__match>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	f43f aecc 	beq.w	800cae0 <_strtod_l+0xb0>
 800cd48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	2b28      	cmp	r3, #40	; 0x28
 800cd4e:	d12f      	bne.n	800cdb0 <_strtod_l+0x380>
 800cd50:	4996      	ldr	r1, [pc, #600]	; (800cfac <_strtod_l+0x57c>)
 800cd52:	aa18      	add	r2, sp, #96	; 0x60
 800cd54:	a815      	add	r0, sp, #84	; 0x54
 800cd56:	f001 f911 	bl	800df7c <__hexnan>
 800cd5a:	2805      	cmp	r0, #5
 800cd5c:	d128      	bne.n	800cdb0 <_strtod_l+0x380>
 800cd5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cd64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800cd68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800cd6c:	e69b      	b.n	800caa6 <_strtod_l+0x76>
 800cd6e:	9f08      	ldr	r7, [sp, #32]
 800cd70:	210a      	movs	r1, #10
 800cd72:	fb01 2107 	mla	r1, r1, r7, r2
 800cd76:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800cd7a:	9208      	str	r2, [sp, #32]
 800cd7c:	e7b5      	b.n	800ccea <_strtod_l+0x2ba>
 800cd7e:	2a6e      	cmp	r2, #110	; 0x6e
 800cd80:	e7d9      	b.n	800cd36 <_strtod_l+0x306>
 800cd82:	498b      	ldr	r1, [pc, #556]	; (800cfb0 <_strtod_l+0x580>)
 800cd84:	a815      	add	r0, sp, #84	; 0x54
 800cd86:	f001 f8e5 	bl	800df54 <__match>
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	f43f aea8 	beq.w	800cae0 <_strtod_l+0xb0>
 800cd90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd92:	4988      	ldr	r1, [pc, #544]	; (800cfb4 <_strtod_l+0x584>)
 800cd94:	3b01      	subs	r3, #1
 800cd96:	a815      	add	r0, sp, #84	; 0x54
 800cd98:	9315      	str	r3, [sp, #84]	; 0x54
 800cd9a:	f001 f8db 	bl	800df54 <__match>
 800cd9e:	b910      	cbnz	r0, 800cda6 <_strtod_l+0x376>
 800cda0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cda2:	3301      	adds	r3, #1
 800cda4:	9315      	str	r3, [sp, #84]	; 0x54
 800cda6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800cfc4 <_strtod_l+0x594>
 800cdaa:	f04f 0800 	mov.w	r8, #0
 800cdae:	e67a      	b.n	800caa6 <_strtod_l+0x76>
 800cdb0:	4881      	ldr	r0, [pc, #516]	; (800cfb8 <_strtod_l+0x588>)
 800cdb2:	f7fd fa79 	bl	800a2a8 <nan>
 800cdb6:	ec59 8b10 	vmov	r8, r9, d0
 800cdba:	e674      	b.n	800caa6 <_strtod_l+0x76>
 800cdbc:	9b05      	ldr	r3, [sp, #20]
 800cdbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdc0:	1afb      	subs	r3, r7, r3
 800cdc2:	f1bb 0f00 	cmp.w	fp, #0
 800cdc6:	bf08      	it	eq
 800cdc8:	46b3      	moveq	fp, r6
 800cdca:	2e10      	cmp	r6, #16
 800cdcc:	9308      	str	r3, [sp, #32]
 800cdce:	4635      	mov	r5, r6
 800cdd0:	bfa8      	it	ge
 800cdd2:	2510      	movge	r5, #16
 800cdd4:	f7f3 fb8e 	bl	80004f4 <__aeabi_ui2d>
 800cdd8:	2e09      	cmp	r6, #9
 800cdda:	4680      	mov	r8, r0
 800cddc:	4689      	mov	r9, r1
 800cdde:	dd13      	ble.n	800ce08 <_strtod_l+0x3d8>
 800cde0:	4b76      	ldr	r3, [pc, #472]	; (800cfbc <_strtod_l+0x58c>)
 800cde2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cde6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cdea:	f7f3 fbfd 	bl	80005e8 <__aeabi_dmul>
 800cdee:	4680      	mov	r8, r0
 800cdf0:	4650      	mov	r0, sl
 800cdf2:	4689      	mov	r9, r1
 800cdf4:	f7f3 fb7e 	bl	80004f4 <__aeabi_ui2d>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	4640      	mov	r0, r8
 800cdfe:	4649      	mov	r1, r9
 800ce00:	f7f3 fa3c 	bl	800027c <__adddf3>
 800ce04:	4680      	mov	r8, r0
 800ce06:	4689      	mov	r9, r1
 800ce08:	2e0f      	cmp	r6, #15
 800ce0a:	dc38      	bgt.n	800ce7e <_strtod_l+0x44e>
 800ce0c:	9b08      	ldr	r3, [sp, #32]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f43f ae49 	beq.w	800caa6 <_strtod_l+0x76>
 800ce14:	dd24      	ble.n	800ce60 <_strtod_l+0x430>
 800ce16:	2b16      	cmp	r3, #22
 800ce18:	dc0b      	bgt.n	800ce32 <_strtod_l+0x402>
 800ce1a:	4968      	ldr	r1, [pc, #416]	; (800cfbc <_strtod_l+0x58c>)
 800ce1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce24:	4642      	mov	r2, r8
 800ce26:	464b      	mov	r3, r9
 800ce28:	f7f3 fbde 	bl	80005e8 <__aeabi_dmul>
 800ce2c:	4680      	mov	r8, r0
 800ce2e:	4689      	mov	r9, r1
 800ce30:	e639      	b.n	800caa6 <_strtod_l+0x76>
 800ce32:	9a08      	ldr	r2, [sp, #32]
 800ce34:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	db20      	blt.n	800ce7e <_strtod_l+0x44e>
 800ce3c:	4c5f      	ldr	r4, [pc, #380]	; (800cfbc <_strtod_l+0x58c>)
 800ce3e:	f1c6 060f 	rsb	r6, r6, #15
 800ce42:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ce46:	4642      	mov	r2, r8
 800ce48:	464b      	mov	r3, r9
 800ce4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce4e:	f7f3 fbcb 	bl	80005e8 <__aeabi_dmul>
 800ce52:	9b08      	ldr	r3, [sp, #32]
 800ce54:	1b9e      	subs	r6, r3, r6
 800ce56:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ce5a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ce5e:	e7e3      	b.n	800ce28 <_strtod_l+0x3f8>
 800ce60:	9b08      	ldr	r3, [sp, #32]
 800ce62:	3316      	adds	r3, #22
 800ce64:	db0b      	blt.n	800ce7e <_strtod_l+0x44e>
 800ce66:	9b05      	ldr	r3, [sp, #20]
 800ce68:	1bdf      	subs	r7, r3, r7
 800ce6a:	4b54      	ldr	r3, [pc, #336]	; (800cfbc <_strtod_l+0x58c>)
 800ce6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ce70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce74:	4640      	mov	r0, r8
 800ce76:	4649      	mov	r1, r9
 800ce78:	f7f3 fce0 	bl	800083c <__aeabi_ddiv>
 800ce7c:	e7d6      	b.n	800ce2c <_strtod_l+0x3fc>
 800ce7e:	9b08      	ldr	r3, [sp, #32]
 800ce80:	1b75      	subs	r5, r6, r5
 800ce82:	441d      	add	r5, r3
 800ce84:	2d00      	cmp	r5, #0
 800ce86:	dd70      	ble.n	800cf6a <_strtod_l+0x53a>
 800ce88:	f015 030f 	ands.w	r3, r5, #15
 800ce8c:	d00a      	beq.n	800cea4 <_strtod_l+0x474>
 800ce8e:	494b      	ldr	r1, [pc, #300]	; (800cfbc <_strtod_l+0x58c>)
 800ce90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce94:	4642      	mov	r2, r8
 800ce96:	464b      	mov	r3, r9
 800ce98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce9c:	f7f3 fba4 	bl	80005e8 <__aeabi_dmul>
 800cea0:	4680      	mov	r8, r0
 800cea2:	4689      	mov	r9, r1
 800cea4:	f035 050f 	bics.w	r5, r5, #15
 800cea8:	d04d      	beq.n	800cf46 <_strtod_l+0x516>
 800ceaa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ceae:	dd22      	ble.n	800cef6 <_strtod_l+0x4c6>
 800ceb0:	2500      	movs	r5, #0
 800ceb2:	46ab      	mov	fp, r5
 800ceb4:	9509      	str	r5, [sp, #36]	; 0x24
 800ceb6:	9505      	str	r5, [sp, #20]
 800ceb8:	2322      	movs	r3, #34	; 0x22
 800ceba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800cfc4 <_strtod_l+0x594>
 800cebe:	6023      	str	r3, [r4, #0]
 800cec0:	f04f 0800 	mov.w	r8, #0
 800cec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f43f aded 	beq.w	800caa6 <_strtod_l+0x76>
 800cecc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cece:	4620      	mov	r0, r4
 800ced0:	f001 f9ee 	bl	800e2b0 <_Bfree>
 800ced4:	9905      	ldr	r1, [sp, #20]
 800ced6:	4620      	mov	r0, r4
 800ced8:	f001 f9ea 	bl	800e2b0 <_Bfree>
 800cedc:	4659      	mov	r1, fp
 800cede:	4620      	mov	r0, r4
 800cee0:	f001 f9e6 	bl	800e2b0 <_Bfree>
 800cee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cee6:	4620      	mov	r0, r4
 800cee8:	f001 f9e2 	bl	800e2b0 <_Bfree>
 800ceec:	4629      	mov	r1, r5
 800ceee:	4620      	mov	r0, r4
 800cef0:	f001 f9de 	bl	800e2b0 <_Bfree>
 800cef4:	e5d7      	b.n	800caa6 <_strtod_l+0x76>
 800cef6:	4b32      	ldr	r3, [pc, #200]	; (800cfc0 <_strtod_l+0x590>)
 800cef8:	9304      	str	r3, [sp, #16]
 800cefa:	2300      	movs	r3, #0
 800cefc:	112d      	asrs	r5, r5, #4
 800cefe:	4640      	mov	r0, r8
 800cf00:	4649      	mov	r1, r9
 800cf02:	469a      	mov	sl, r3
 800cf04:	2d01      	cmp	r5, #1
 800cf06:	dc21      	bgt.n	800cf4c <_strtod_l+0x51c>
 800cf08:	b10b      	cbz	r3, 800cf0e <_strtod_l+0x4de>
 800cf0a:	4680      	mov	r8, r0
 800cf0c:	4689      	mov	r9, r1
 800cf0e:	492c      	ldr	r1, [pc, #176]	; (800cfc0 <_strtod_l+0x590>)
 800cf10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800cf14:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cf18:	4642      	mov	r2, r8
 800cf1a:	464b      	mov	r3, r9
 800cf1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf20:	f7f3 fb62 	bl	80005e8 <__aeabi_dmul>
 800cf24:	4b27      	ldr	r3, [pc, #156]	; (800cfc4 <_strtod_l+0x594>)
 800cf26:	460a      	mov	r2, r1
 800cf28:	400b      	ands	r3, r1
 800cf2a:	4927      	ldr	r1, [pc, #156]	; (800cfc8 <_strtod_l+0x598>)
 800cf2c:	428b      	cmp	r3, r1
 800cf2e:	4680      	mov	r8, r0
 800cf30:	d8be      	bhi.n	800ceb0 <_strtod_l+0x480>
 800cf32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cf36:	428b      	cmp	r3, r1
 800cf38:	bf86      	itte	hi
 800cf3a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800cfcc <_strtod_l+0x59c>
 800cf3e:	f04f 38ff 	movhi.w	r8, #4294967295
 800cf42:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800cf46:	2300      	movs	r3, #0
 800cf48:	9304      	str	r3, [sp, #16]
 800cf4a:	e07b      	b.n	800d044 <_strtod_l+0x614>
 800cf4c:	07ea      	lsls	r2, r5, #31
 800cf4e:	d505      	bpl.n	800cf5c <_strtod_l+0x52c>
 800cf50:	9b04      	ldr	r3, [sp, #16]
 800cf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf56:	f7f3 fb47 	bl	80005e8 <__aeabi_dmul>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	9a04      	ldr	r2, [sp, #16]
 800cf5e:	3208      	adds	r2, #8
 800cf60:	f10a 0a01 	add.w	sl, sl, #1
 800cf64:	106d      	asrs	r5, r5, #1
 800cf66:	9204      	str	r2, [sp, #16]
 800cf68:	e7cc      	b.n	800cf04 <_strtod_l+0x4d4>
 800cf6a:	d0ec      	beq.n	800cf46 <_strtod_l+0x516>
 800cf6c:	426d      	negs	r5, r5
 800cf6e:	f015 020f 	ands.w	r2, r5, #15
 800cf72:	d00a      	beq.n	800cf8a <_strtod_l+0x55a>
 800cf74:	4b11      	ldr	r3, [pc, #68]	; (800cfbc <_strtod_l+0x58c>)
 800cf76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf7a:	4640      	mov	r0, r8
 800cf7c:	4649      	mov	r1, r9
 800cf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf82:	f7f3 fc5b 	bl	800083c <__aeabi_ddiv>
 800cf86:	4680      	mov	r8, r0
 800cf88:	4689      	mov	r9, r1
 800cf8a:	112d      	asrs	r5, r5, #4
 800cf8c:	d0db      	beq.n	800cf46 <_strtod_l+0x516>
 800cf8e:	2d1f      	cmp	r5, #31
 800cf90:	dd1e      	ble.n	800cfd0 <_strtod_l+0x5a0>
 800cf92:	2500      	movs	r5, #0
 800cf94:	46ab      	mov	fp, r5
 800cf96:	9509      	str	r5, [sp, #36]	; 0x24
 800cf98:	9505      	str	r5, [sp, #20]
 800cf9a:	2322      	movs	r3, #34	; 0x22
 800cf9c:	f04f 0800 	mov.w	r8, #0
 800cfa0:	f04f 0900 	mov.w	r9, #0
 800cfa4:	6023      	str	r3, [r4, #0]
 800cfa6:	e78d      	b.n	800cec4 <_strtod_l+0x494>
 800cfa8:	0800f93b 	.word	0x0800f93b
 800cfac:	0800f954 	.word	0x0800f954
 800cfb0:	0800f932 	.word	0x0800f932
 800cfb4:	0800f935 	.word	0x0800f935
 800cfb8:	0800fcb8 	.word	0x0800fcb8
 800cfbc:	0800faa8 	.word	0x0800faa8
 800cfc0:	0800fa80 	.word	0x0800fa80
 800cfc4:	7ff00000 	.word	0x7ff00000
 800cfc8:	7ca00000 	.word	0x7ca00000
 800cfcc:	7fefffff 	.word	0x7fefffff
 800cfd0:	f015 0310 	ands.w	r3, r5, #16
 800cfd4:	bf18      	it	ne
 800cfd6:	236a      	movne	r3, #106	; 0x6a
 800cfd8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d37c <_strtod_l+0x94c>
 800cfdc:	9304      	str	r3, [sp, #16]
 800cfde:	4640      	mov	r0, r8
 800cfe0:	4649      	mov	r1, r9
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	07ea      	lsls	r2, r5, #31
 800cfe6:	d504      	bpl.n	800cff2 <_strtod_l+0x5c2>
 800cfe8:	e9da 2300 	ldrd	r2, r3, [sl]
 800cfec:	f7f3 fafc 	bl	80005e8 <__aeabi_dmul>
 800cff0:	2301      	movs	r3, #1
 800cff2:	106d      	asrs	r5, r5, #1
 800cff4:	f10a 0a08 	add.w	sl, sl, #8
 800cff8:	d1f4      	bne.n	800cfe4 <_strtod_l+0x5b4>
 800cffa:	b10b      	cbz	r3, 800d000 <_strtod_l+0x5d0>
 800cffc:	4680      	mov	r8, r0
 800cffe:	4689      	mov	r9, r1
 800d000:	9b04      	ldr	r3, [sp, #16]
 800d002:	b1bb      	cbz	r3, 800d034 <_strtod_l+0x604>
 800d004:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d008:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	4649      	mov	r1, r9
 800d010:	dd10      	ble.n	800d034 <_strtod_l+0x604>
 800d012:	2b1f      	cmp	r3, #31
 800d014:	f340 811e 	ble.w	800d254 <_strtod_l+0x824>
 800d018:	2b34      	cmp	r3, #52	; 0x34
 800d01a:	bfde      	ittt	le
 800d01c:	f04f 33ff 	movle.w	r3, #4294967295
 800d020:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d024:	4093      	lslle	r3, r2
 800d026:	f04f 0800 	mov.w	r8, #0
 800d02a:	bfcc      	ite	gt
 800d02c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d030:	ea03 0901 	andle.w	r9, r3, r1
 800d034:	2200      	movs	r2, #0
 800d036:	2300      	movs	r3, #0
 800d038:	4640      	mov	r0, r8
 800d03a:	4649      	mov	r1, r9
 800d03c:	f7f3 fd3c 	bl	8000ab8 <__aeabi_dcmpeq>
 800d040:	2800      	cmp	r0, #0
 800d042:	d1a6      	bne.n	800cf92 <_strtod_l+0x562>
 800d044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d046:	9300      	str	r3, [sp, #0]
 800d048:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d04a:	4633      	mov	r3, r6
 800d04c:	465a      	mov	r2, fp
 800d04e:	4620      	mov	r0, r4
 800d050:	f001 f996 	bl	800e380 <__s2b>
 800d054:	9009      	str	r0, [sp, #36]	; 0x24
 800d056:	2800      	cmp	r0, #0
 800d058:	f43f af2a 	beq.w	800ceb0 <_strtod_l+0x480>
 800d05c:	9a08      	ldr	r2, [sp, #32]
 800d05e:	9b05      	ldr	r3, [sp, #20]
 800d060:	2a00      	cmp	r2, #0
 800d062:	eba3 0307 	sub.w	r3, r3, r7
 800d066:	bfa8      	it	ge
 800d068:	2300      	movge	r3, #0
 800d06a:	930c      	str	r3, [sp, #48]	; 0x30
 800d06c:	2500      	movs	r5, #0
 800d06e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d072:	9312      	str	r3, [sp, #72]	; 0x48
 800d074:	46ab      	mov	fp, r5
 800d076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d078:	4620      	mov	r0, r4
 800d07a:	6859      	ldr	r1, [r3, #4]
 800d07c:	f001 f8d8 	bl	800e230 <_Balloc>
 800d080:	9005      	str	r0, [sp, #20]
 800d082:	2800      	cmp	r0, #0
 800d084:	f43f af18 	beq.w	800ceb8 <_strtod_l+0x488>
 800d088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d08a:	691a      	ldr	r2, [r3, #16]
 800d08c:	3202      	adds	r2, #2
 800d08e:	f103 010c 	add.w	r1, r3, #12
 800d092:	0092      	lsls	r2, r2, #2
 800d094:	300c      	adds	r0, #12
 800d096:	f000 fc5a 	bl	800d94e <memcpy>
 800d09a:	ec49 8b10 	vmov	d0, r8, r9
 800d09e:	aa18      	add	r2, sp, #96	; 0x60
 800d0a0:	a917      	add	r1, sp, #92	; 0x5c
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f001 fca0 	bl	800e9e8 <__d2b>
 800d0a8:	ec49 8b18 	vmov	d8, r8, r9
 800d0ac:	9016      	str	r0, [sp, #88]	; 0x58
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	f43f af02 	beq.w	800ceb8 <_strtod_l+0x488>
 800d0b4:	2101      	movs	r1, #1
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f001 f9fa 	bl	800e4b0 <__i2b>
 800d0bc:	4683      	mov	fp, r0
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	f43f aefa 	beq.w	800ceb8 <_strtod_l+0x488>
 800d0c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d0c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d0c8:	2e00      	cmp	r6, #0
 800d0ca:	bfab      	itete	ge
 800d0cc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d0ce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d0d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d0d2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d0d6:	bfac      	ite	ge
 800d0d8:	eb06 0a03 	addge.w	sl, r6, r3
 800d0dc:	1b9f      	sublt	r7, r3, r6
 800d0de:	9b04      	ldr	r3, [sp, #16]
 800d0e0:	1af6      	subs	r6, r6, r3
 800d0e2:	4416      	add	r6, r2
 800d0e4:	4ba0      	ldr	r3, [pc, #640]	; (800d368 <_strtod_l+0x938>)
 800d0e6:	3e01      	subs	r6, #1
 800d0e8:	429e      	cmp	r6, r3
 800d0ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d0ee:	f280 80c4 	bge.w	800d27a <_strtod_l+0x84a>
 800d0f2:	1b9b      	subs	r3, r3, r6
 800d0f4:	2b1f      	cmp	r3, #31
 800d0f6:	eba2 0203 	sub.w	r2, r2, r3
 800d0fa:	f04f 0101 	mov.w	r1, #1
 800d0fe:	f300 80b0 	bgt.w	800d262 <_strtod_l+0x832>
 800d102:	fa01 f303 	lsl.w	r3, r1, r3
 800d106:	930e      	str	r3, [sp, #56]	; 0x38
 800d108:	2300      	movs	r3, #0
 800d10a:	930d      	str	r3, [sp, #52]	; 0x34
 800d10c:	eb0a 0602 	add.w	r6, sl, r2
 800d110:	9b04      	ldr	r3, [sp, #16]
 800d112:	45b2      	cmp	sl, r6
 800d114:	4417      	add	r7, r2
 800d116:	441f      	add	r7, r3
 800d118:	4653      	mov	r3, sl
 800d11a:	bfa8      	it	ge
 800d11c:	4633      	movge	r3, r6
 800d11e:	42bb      	cmp	r3, r7
 800d120:	bfa8      	it	ge
 800d122:	463b      	movge	r3, r7
 800d124:	2b00      	cmp	r3, #0
 800d126:	bfc2      	ittt	gt
 800d128:	1af6      	subgt	r6, r6, r3
 800d12a:	1aff      	subgt	r7, r7, r3
 800d12c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d132:	2b00      	cmp	r3, #0
 800d134:	dd17      	ble.n	800d166 <_strtod_l+0x736>
 800d136:	4659      	mov	r1, fp
 800d138:	461a      	mov	r2, r3
 800d13a:	4620      	mov	r0, r4
 800d13c:	f001 fa78 	bl	800e630 <__pow5mult>
 800d140:	4683      	mov	fp, r0
 800d142:	2800      	cmp	r0, #0
 800d144:	f43f aeb8 	beq.w	800ceb8 <_strtod_l+0x488>
 800d148:	4601      	mov	r1, r0
 800d14a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d14c:	4620      	mov	r0, r4
 800d14e:	f001 f9c5 	bl	800e4dc <__multiply>
 800d152:	900b      	str	r0, [sp, #44]	; 0x2c
 800d154:	2800      	cmp	r0, #0
 800d156:	f43f aeaf 	beq.w	800ceb8 <_strtod_l+0x488>
 800d15a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d15c:	4620      	mov	r0, r4
 800d15e:	f001 f8a7 	bl	800e2b0 <_Bfree>
 800d162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d164:	9316      	str	r3, [sp, #88]	; 0x58
 800d166:	2e00      	cmp	r6, #0
 800d168:	f300 808c 	bgt.w	800d284 <_strtod_l+0x854>
 800d16c:	9b08      	ldr	r3, [sp, #32]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	dd08      	ble.n	800d184 <_strtod_l+0x754>
 800d172:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d174:	9905      	ldr	r1, [sp, #20]
 800d176:	4620      	mov	r0, r4
 800d178:	f001 fa5a 	bl	800e630 <__pow5mult>
 800d17c:	9005      	str	r0, [sp, #20]
 800d17e:	2800      	cmp	r0, #0
 800d180:	f43f ae9a 	beq.w	800ceb8 <_strtod_l+0x488>
 800d184:	2f00      	cmp	r7, #0
 800d186:	dd08      	ble.n	800d19a <_strtod_l+0x76a>
 800d188:	9905      	ldr	r1, [sp, #20]
 800d18a:	463a      	mov	r2, r7
 800d18c:	4620      	mov	r0, r4
 800d18e:	f001 faa9 	bl	800e6e4 <__lshift>
 800d192:	9005      	str	r0, [sp, #20]
 800d194:	2800      	cmp	r0, #0
 800d196:	f43f ae8f 	beq.w	800ceb8 <_strtod_l+0x488>
 800d19a:	f1ba 0f00 	cmp.w	sl, #0
 800d19e:	dd08      	ble.n	800d1b2 <_strtod_l+0x782>
 800d1a0:	4659      	mov	r1, fp
 800d1a2:	4652      	mov	r2, sl
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	f001 fa9d 	bl	800e6e4 <__lshift>
 800d1aa:	4683      	mov	fp, r0
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	f43f ae83 	beq.w	800ceb8 <_strtod_l+0x488>
 800d1b2:	9a05      	ldr	r2, [sp, #20]
 800d1b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f001 fb1c 	bl	800e7f4 <__mdiff>
 800d1bc:	4605      	mov	r5, r0
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	f43f ae7a 	beq.w	800ceb8 <_strtod_l+0x488>
 800d1c4:	68c3      	ldr	r3, [r0, #12]
 800d1c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	60c3      	str	r3, [r0, #12]
 800d1cc:	4659      	mov	r1, fp
 800d1ce:	f001 faf5 	bl	800e7bc <__mcmp>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	da60      	bge.n	800d298 <_strtod_l+0x868>
 800d1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1d8:	ea53 0308 	orrs.w	r3, r3, r8
 800d1dc:	f040 8084 	bne.w	800d2e8 <_strtod_l+0x8b8>
 800d1e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d17f      	bne.n	800d2e8 <_strtod_l+0x8b8>
 800d1e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d1ec:	0d1b      	lsrs	r3, r3, #20
 800d1ee:	051b      	lsls	r3, r3, #20
 800d1f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d1f4:	d978      	bls.n	800d2e8 <_strtod_l+0x8b8>
 800d1f6:	696b      	ldr	r3, [r5, #20]
 800d1f8:	b913      	cbnz	r3, 800d200 <_strtod_l+0x7d0>
 800d1fa:	692b      	ldr	r3, [r5, #16]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	dd73      	ble.n	800d2e8 <_strtod_l+0x8b8>
 800d200:	4629      	mov	r1, r5
 800d202:	2201      	movs	r2, #1
 800d204:	4620      	mov	r0, r4
 800d206:	f001 fa6d 	bl	800e6e4 <__lshift>
 800d20a:	4659      	mov	r1, fp
 800d20c:	4605      	mov	r5, r0
 800d20e:	f001 fad5 	bl	800e7bc <__mcmp>
 800d212:	2800      	cmp	r0, #0
 800d214:	dd68      	ble.n	800d2e8 <_strtod_l+0x8b8>
 800d216:	9904      	ldr	r1, [sp, #16]
 800d218:	4a54      	ldr	r2, [pc, #336]	; (800d36c <_strtod_l+0x93c>)
 800d21a:	464b      	mov	r3, r9
 800d21c:	2900      	cmp	r1, #0
 800d21e:	f000 8084 	beq.w	800d32a <_strtod_l+0x8fa>
 800d222:	ea02 0109 	and.w	r1, r2, r9
 800d226:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d22a:	dc7e      	bgt.n	800d32a <_strtod_l+0x8fa>
 800d22c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d230:	f77f aeb3 	ble.w	800cf9a <_strtod_l+0x56a>
 800d234:	4b4e      	ldr	r3, [pc, #312]	; (800d370 <_strtod_l+0x940>)
 800d236:	4640      	mov	r0, r8
 800d238:	4649      	mov	r1, r9
 800d23a:	2200      	movs	r2, #0
 800d23c:	f7f3 f9d4 	bl	80005e8 <__aeabi_dmul>
 800d240:	4b4a      	ldr	r3, [pc, #296]	; (800d36c <_strtod_l+0x93c>)
 800d242:	400b      	ands	r3, r1
 800d244:	4680      	mov	r8, r0
 800d246:	4689      	mov	r9, r1
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f47f ae3f 	bne.w	800cecc <_strtod_l+0x49c>
 800d24e:	2322      	movs	r3, #34	; 0x22
 800d250:	6023      	str	r3, [r4, #0]
 800d252:	e63b      	b.n	800cecc <_strtod_l+0x49c>
 800d254:	f04f 32ff 	mov.w	r2, #4294967295
 800d258:	fa02 f303 	lsl.w	r3, r2, r3
 800d25c:	ea03 0808 	and.w	r8, r3, r8
 800d260:	e6e8      	b.n	800d034 <_strtod_l+0x604>
 800d262:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d266:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d26a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d26e:	36e2      	adds	r6, #226	; 0xe2
 800d270:	fa01 f306 	lsl.w	r3, r1, r6
 800d274:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d278:	e748      	b.n	800d10c <_strtod_l+0x6dc>
 800d27a:	2100      	movs	r1, #0
 800d27c:	2301      	movs	r3, #1
 800d27e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d282:	e743      	b.n	800d10c <_strtod_l+0x6dc>
 800d284:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d286:	4632      	mov	r2, r6
 800d288:	4620      	mov	r0, r4
 800d28a:	f001 fa2b 	bl	800e6e4 <__lshift>
 800d28e:	9016      	str	r0, [sp, #88]	; 0x58
 800d290:	2800      	cmp	r0, #0
 800d292:	f47f af6b 	bne.w	800d16c <_strtod_l+0x73c>
 800d296:	e60f      	b.n	800ceb8 <_strtod_l+0x488>
 800d298:	46ca      	mov	sl, r9
 800d29a:	d171      	bne.n	800d380 <_strtod_l+0x950>
 800d29c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d29e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2a2:	b352      	cbz	r2, 800d2fa <_strtod_l+0x8ca>
 800d2a4:	4a33      	ldr	r2, [pc, #204]	; (800d374 <_strtod_l+0x944>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d12a      	bne.n	800d300 <_strtod_l+0x8d0>
 800d2aa:	9b04      	ldr	r3, [sp, #16]
 800d2ac:	4641      	mov	r1, r8
 800d2ae:	b1fb      	cbz	r3, 800d2f0 <_strtod_l+0x8c0>
 800d2b0:	4b2e      	ldr	r3, [pc, #184]	; (800d36c <_strtod_l+0x93c>)
 800d2b2:	ea09 0303 	and.w	r3, r9, r3
 800d2b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d2be:	d81a      	bhi.n	800d2f6 <_strtod_l+0x8c6>
 800d2c0:	0d1b      	lsrs	r3, r3, #20
 800d2c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ca:	4299      	cmp	r1, r3
 800d2cc:	d118      	bne.n	800d300 <_strtod_l+0x8d0>
 800d2ce:	4b2a      	ldr	r3, [pc, #168]	; (800d378 <_strtod_l+0x948>)
 800d2d0:	459a      	cmp	sl, r3
 800d2d2:	d102      	bne.n	800d2da <_strtod_l+0x8aa>
 800d2d4:	3101      	adds	r1, #1
 800d2d6:	f43f adef 	beq.w	800ceb8 <_strtod_l+0x488>
 800d2da:	4b24      	ldr	r3, [pc, #144]	; (800d36c <_strtod_l+0x93c>)
 800d2dc:	ea0a 0303 	and.w	r3, sl, r3
 800d2e0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d2e4:	f04f 0800 	mov.w	r8, #0
 800d2e8:	9b04      	ldr	r3, [sp, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1a2      	bne.n	800d234 <_strtod_l+0x804>
 800d2ee:	e5ed      	b.n	800cecc <_strtod_l+0x49c>
 800d2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2f4:	e7e9      	b.n	800d2ca <_strtod_l+0x89a>
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	e7e7      	b.n	800d2ca <_strtod_l+0x89a>
 800d2fa:	ea53 0308 	orrs.w	r3, r3, r8
 800d2fe:	d08a      	beq.n	800d216 <_strtod_l+0x7e6>
 800d300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d302:	b1e3      	cbz	r3, 800d33e <_strtod_l+0x90e>
 800d304:	ea13 0f0a 	tst.w	r3, sl
 800d308:	d0ee      	beq.n	800d2e8 <_strtod_l+0x8b8>
 800d30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d30c:	9a04      	ldr	r2, [sp, #16]
 800d30e:	4640      	mov	r0, r8
 800d310:	4649      	mov	r1, r9
 800d312:	b1c3      	cbz	r3, 800d346 <_strtod_l+0x916>
 800d314:	f7ff fb70 	bl	800c9f8 <sulp>
 800d318:	4602      	mov	r2, r0
 800d31a:	460b      	mov	r3, r1
 800d31c:	ec51 0b18 	vmov	r0, r1, d8
 800d320:	f7f2 ffac 	bl	800027c <__adddf3>
 800d324:	4680      	mov	r8, r0
 800d326:	4689      	mov	r9, r1
 800d328:	e7de      	b.n	800d2e8 <_strtod_l+0x8b8>
 800d32a:	4013      	ands	r3, r2
 800d32c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d330:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d334:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d338:	f04f 38ff 	mov.w	r8, #4294967295
 800d33c:	e7d4      	b.n	800d2e8 <_strtod_l+0x8b8>
 800d33e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d340:	ea13 0f08 	tst.w	r3, r8
 800d344:	e7e0      	b.n	800d308 <_strtod_l+0x8d8>
 800d346:	f7ff fb57 	bl	800c9f8 <sulp>
 800d34a:	4602      	mov	r2, r0
 800d34c:	460b      	mov	r3, r1
 800d34e:	ec51 0b18 	vmov	r0, r1, d8
 800d352:	f7f2 ff91 	bl	8000278 <__aeabi_dsub>
 800d356:	2200      	movs	r2, #0
 800d358:	2300      	movs	r3, #0
 800d35a:	4680      	mov	r8, r0
 800d35c:	4689      	mov	r9, r1
 800d35e:	f7f3 fbab 	bl	8000ab8 <__aeabi_dcmpeq>
 800d362:	2800      	cmp	r0, #0
 800d364:	d0c0      	beq.n	800d2e8 <_strtod_l+0x8b8>
 800d366:	e618      	b.n	800cf9a <_strtod_l+0x56a>
 800d368:	fffffc02 	.word	0xfffffc02
 800d36c:	7ff00000 	.word	0x7ff00000
 800d370:	39500000 	.word	0x39500000
 800d374:	000fffff 	.word	0x000fffff
 800d378:	7fefffff 	.word	0x7fefffff
 800d37c:	0800f968 	.word	0x0800f968
 800d380:	4659      	mov	r1, fp
 800d382:	4628      	mov	r0, r5
 800d384:	f001 fb8a 	bl	800ea9c <__ratio>
 800d388:	ec57 6b10 	vmov	r6, r7, d0
 800d38c:	ee10 0a10 	vmov	r0, s0
 800d390:	2200      	movs	r2, #0
 800d392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d396:	4639      	mov	r1, r7
 800d398:	f7f3 fba2 	bl	8000ae0 <__aeabi_dcmple>
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d071      	beq.n	800d484 <_strtod_l+0xa54>
 800d3a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d17c      	bne.n	800d4a0 <_strtod_l+0xa70>
 800d3a6:	f1b8 0f00 	cmp.w	r8, #0
 800d3aa:	d15a      	bne.n	800d462 <_strtod_l+0xa32>
 800d3ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d15d      	bne.n	800d470 <_strtod_l+0xa40>
 800d3b4:	4b90      	ldr	r3, [pc, #576]	; (800d5f8 <_strtod_l+0xbc8>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	4639      	mov	r1, r7
 800d3bc:	f7f3 fb86 	bl	8000acc <__aeabi_dcmplt>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d15c      	bne.n	800d47e <_strtod_l+0xa4e>
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	4b8c      	ldr	r3, [pc, #560]	; (800d5fc <_strtod_l+0xbcc>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f7f3 f90c 	bl	80005e8 <__aeabi_dmul>
 800d3d0:	4606      	mov	r6, r0
 800d3d2:	460f      	mov	r7, r1
 800d3d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d3d8:	9606      	str	r6, [sp, #24]
 800d3da:	9307      	str	r3, [sp, #28]
 800d3dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d3e4:	4b86      	ldr	r3, [pc, #536]	; (800d600 <_strtod_l+0xbd0>)
 800d3e6:	ea0a 0303 	and.w	r3, sl, r3
 800d3ea:	930d      	str	r3, [sp, #52]	; 0x34
 800d3ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3ee:	4b85      	ldr	r3, [pc, #532]	; (800d604 <_strtod_l+0xbd4>)
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	f040 8090 	bne.w	800d516 <_strtod_l+0xae6>
 800d3f6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d3fa:	ec49 8b10 	vmov	d0, r8, r9
 800d3fe:	f001 fa83 	bl	800e908 <__ulp>
 800d402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d406:	ec51 0b10 	vmov	r0, r1, d0
 800d40a:	f7f3 f8ed 	bl	80005e8 <__aeabi_dmul>
 800d40e:	4642      	mov	r2, r8
 800d410:	464b      	mov	r3, r9
 800d412:	f7f2 ff33 	bl	800027c <__adddf3>
 800d416:	460b      	mov	r3, r1
 800d418:	4979      	ldr	r1, [pc, #484]	; (800d600 <_strtod_l+0xbd0>)
 800d41a:	4a7b      	ldr	r2, [pc, #492]	; (800d608 <_strtod_l+0xbd8>)
 800d41c:	4019      	ands	r1, r3
 800d41e:	4291      	cmp	r1, r2
 800d420:	4680      	mov	r8, r0
 800d422:	d944      	bls.n	800d4ae <_strtod_l+0xa7e>
 800d424:	ee18 2a90 	vmov	r2, s17
 800d428:	4b78      	ldr	r3, [pc, #480]	; (800d60c <_strtod_l+0xbdc>)
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d104      	bne.n	800d438 <_strtod_l+0xa08>
 800d42e:	ee18 3a10 	vmov	r3, s16
 800d432:	3301      	adds	r3, #1
 800d434:	f43f ad40 	beq.w	800ceb8 <_strtod_l+0x488>
 800d438:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d60c <_strtod_l+0xbdc>
 800d43c:	f04f 38ff 	mov.w	r8, #4294967295
 800d440:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d442:	4620      	mov	r0, r4
 800d444:	f000 ff34 	bl	800e2b0 <_Bfree>
 800d448:	9905      	ldr	r1, [sp, #20]
 800d44a:	4620      	mov	r0, r4
 800d44c:	f000 ff30 	bl	800e2b0 <_Bfree>
 800d450:	4659      	mov	r1, fp
 800d452:	4620      	mov	r0, r4
 800d454:	f000 ff2c 	bl	800e2b0 <_Bfree>
 800d458:	4629      	mov	r1, r5
 800d45a:	4620      	mov	r0, r4
 800d45c:	f000 ff28 	bl	800e2b0 <_Bfree>
 800d460:	e609      	b.n	800d076 <_strtod_l+0x646>
 800d462:	f1b8 0f01 	cmp.w	r8, #1
 800d466:	d103      	bne.n	800d470 <_strtod_l+0xa40>
 800d468:	f1b9 0f00 	cmp.w	r9, #0
 800d46c:	f43f ad95 	beq.w	800cf9a <_strtod_l+0x56a>
 800d470:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d5c8 <_strtod_l+0xb98>
 800d474:	4f60      	ldr	r7, [pc, #384]	; (800d5f8 <_strtod_l+0xbc8>)
 800d476:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d47a:	2600      	movs	r6, #0
 800d47c:	e7ae      	b.n	800d3dc <_strtod_l+0x9ac>
 800d47e:	4f5f      	ldr	r7, [pc, #380]	; (800d5fc <_strtod_l+0xbcc>)
 800d480:	2600      	movs	r6, #0
 800d482:	e7a7      	b.n	800d3d4 <_strtod_l+0x9a4>
 800d484:	4b5d      	ldr	r3, [pc, #372]	; (800d5fc <_strtod_l+0xbcc>)
 800d486:	4630      	mov	r0, r6
 800d488:	4639      	mov	r1, r7
 800d48a:	2200      	movs	r2, #0
 800d48c:	f7f3 f8ac 	bl	80005e8 <__aeabi_dmul>
 800d490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d492:	4606      	mov	r6, r0
 800d494:	460f      	mov	r7, r1
 800d496:	2b00      	cmp	r3, #0
 800d498:	d09c      	beq.n	800d3d4 <_strtod_l+0x9a4>
 800d49a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d49e:	e79d      	b.n	800d3dc <_strtod_l+0x9ac>
 800d4a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d5d0 <_strtod_l+0xba0>
 800d4a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4a8:	ec57 6b17 	vmov	r6, r7, d7
 800d4ac:	e796      	b.n	800d3dc <_strtod_l+0x9ac>
 800d4ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d4b2:	9b04      	ldr	r3, [sp, #16]
 800d4b4:	46ca      	mov	sl, r9
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d1c2      	bne.n	800d440 <_strtod_l+0xa10>
 800d4ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d4be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4c0:	0d1b      	lsrs	r3, r3, #20
 800d4c2:	051b      	lsls	r3, r3, #20
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d1bb      	bne.n	800d440 <_strtod_l+0xa10>
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	4639      	mov	r1, r7
 800d4cc:	f7f3 fcfa 	bl	8000ec4 <__aeabi_d2lz>
 800d4d0:	f7f3 f85c 	bl	800058c <__aeabi_l2d>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	4630      	mov	r0, r6
 800d4da:	4639      	mov	r1, r7
 800d4dc:	f7f2 fecc 	bl	8000278 <__aeabi_dsub>
 800d4e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4e6:	ea43 0308 	orr.w	r3, r3, r8
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	4606      	mov	r6, r0
 800d4ee:	460f      	mov	r7, r1
 800d4f0:	d054      	beq.n	800d59c <_strtod_l+0xb6c>
 800d4f2:	a339      	add	r3, pc, #228	; (adr r3, 800d5d8 <_strtod_l+0xba8>)
 800d4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f8:	f7f3 fae8 	bl	8000acc <__aeabi_dcmplt>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	f47f ace5 	bne.w	800cecc <_strtod_l+0x49c>
 800d502:	a337      	add	r3, pc, #220	; (adr r3, 800d5e0 <_strtod_l+0xbb0>)
 800d504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d508:	4630      	mov	r0, r6
 800d50a:	4639      	mov	r1, r7
 800d50c:	f7f3 fafc 	bl	8000b08 <__aeabi_dcmpgt>
 800d510:	2800      	cmp	r0, #0
 800d512:	d095      	beq.n	800d440 <_strtod_l+0xa10>
 800d514:	e4da      	b.n	800cecc <_strtod_l+0x49c>
 800d516:	9b04      	ldr	r3, [sp, #16]
 800d518:	b333      	cbz	r3, 800d568 <_strtod_l+0xb38>
 800d51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d51c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d520:	d822      	bhi.n	800d568 <_strtod_l+0xb38>
 800d522:	a331      	add	r3, pc, #196	; (adr r3, 800d5e8 <_strtod_l+0xbb8>)
 800d524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d528:	4630      	mov	r0, r6
 800d52a:	4639      	mov	r1, r7
 800d52c:	f7f3 fad8 	bl	8000ae0 <__aeabi_dcmple>
 800d530:	b1a0      	cbz	r0, 800d55c <_strtod_l+0xb2c>
 800d532:	4639      	mov	r1, r7
 800d534:	4630      	mov	r0, r6
 800d536:	f7f3 fb2f 	bl	8000b98 <__aeabi_d2uiz>
 800d53a:	2801      	cmp	r0, #1
 800d53c:	bf38      	it	cc
 800d53e:	2001      	movcc	r0, #1
 800d540:	f7f2 ffd8 	bl	80004f4 <__aeabi_ui2d>
 800d544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d546:	4606      	mov	r6, r0
 800d548:	460f      	mov	r7, r1
 800d54a:	bb23      	cbnz	r3, 800d596 <_strtod_l+0xb66>
 800d54c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d550:	9010      	str	r0, [sp, #64]	; 0x40
 800d552:	9311      	str	r3, [sp, #68]	; 0x44
 800d554:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d558:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d55c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d55e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d560:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d564:	1a9b      	subs	r3, r3, r2
 800d566:	930f      	str	r3, [sp, #60]	; 0x3c
 800d568:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d56c:	eeb0 0a48 	vmov.f32	s0, s16
 800d570:	eef0 0a68 	vmov.f32	s1, s17
 800d574:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d578:	f001 f9c6 	bl	800e908 <__ulp>
 800d57c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d580:	ec53 2b10 	vmov	r2, r3, d0
 800d584:	f7f3 f830 	bl	80005e8 <__aeabi_dmul>
 800d588:	ec53 2b18 	vmov	r2, r3, d8
 800d58c:	f7f2 fe76 	bl	800027c <__adddf3>
 800d590:	4680      	mov	r8, r0
 800d592:	4689      	mov	r9, r1
 800d594:	e78d      	b.n	800d4b2 <_strtod_l+0xa82>
 800d596:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d59a:	e7db      	b.n	800d554 <_strtod_l+0xb24>
 800d59c:	a314      	add	r3, pc, #80	; (adr r3, 800d5f0 <_strtod_l+0xbc0>)
 800d59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a2:	f7f3 fa93 	bl	8000acc <__aeabi_dcmplt>
 800d5a6:	e7b3      	b.n	800d510 <_strtod_l+0xae0>
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	930a      	str	r3, [sp, #40]	; 0x28
 800d5ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d5ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5b0:	6013      	str	r3, [r2, #0]
 800d5b2:	f7ff ba7c 	b.w	800caae <_strtod_l+0x7e>
 800d5b6:	2a65      	cmp	r2, #101	; 0x65
 800d5b8:	f43f ab75 	beq.w	800cca6 <_strtod_l+0x276>
 800d5bc:	2a45      	cmp	r2, #69	; 0x45
 800d5be:	f43f ab72 	beq.w	800cca6 <_strtod_l+0x276>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	f7ff bbaa 	b.w	800cd1c <_strtod_l+0x2ec>
 800d5c8:	00000000 	.word	0x00000000
 800d5cc:	bff00000 	.word	0xbff00000
 800d5d0:	00000000 	.word	0x00000000
 800d5d4:	3ff00000 	.word	0x3ff00000
 800d5d8:	94a03595 	.word	0x94a03595
 800d5dc:	3fdfffff 	.word	0x3fdfffff
 800d5e0:	35afe535 	.word	0x35afe535
 800d5e4:	3fe00000 	.word	0x3fe00000
 800d5e8:	ffc00000 	.word	0xffc00000
 800d5ec:	41dfffff 	.word	0x41dfffff
 800d5f0:	94a03595 	.word	0x94a03595
 800d5f4:	3fcfffff 	.word	0x3fcfffff
 800d5f8:	3ff00000 	.word	0x3ff00000
 800d5fc:	3fe00000 	.word	0x3fe00000
 800d600:	7ff00000 	.word	0x7ff00000
 800d604:	7fe00000 	.word	0x7fe00000
 800d608:	7c9fffff 	.word	0x7c9fffff
 800d60c:	7fefffff 	.word	0x7fefffff

0800d610 <strtod>:
 800d610:	460a      	mov	r2, r1
 800d612:	4601      	mov	r1, r0
 800d614:	4802      	ldr	r0, [pc, #8]	; (800d620 <strtod+0x10>)
 800d616:	4b03      	ldr	r3, [pc, #12]	; (800d624 <strtod+0x14>)
 800d618:	6800      	ldr	r0, [r0, #0]
 800d61a:	f7ff ba09 	b.w	800ca30 <_strtod_l>
 800d61e:	bf00      	nop
 800d620:	200001e4 	.word	0x200001e4
 800d624:	2000002c 	.word	0x2000002c

0800d628 <std>:
 800d628:	2300      	movs	r3, #0
 800d62a:	b510      	push	{r4, lr}
 800d62c:	4604      	mov	r4, r0
 800d62e:	e9c0 3300 	strd	r3, r3, [r0]
 800d632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d636:	6083      	str	r3, [r0, #8]
 800d638:	8181      	strh	r1, [r0, #12]
 800d63a:	6643      	str	r3, [r0, #100]	; 0x64
 800d63c:	81c2      	strh	r2, [r0, #14]
 800d63e:	6183      	str	r3, [r0, #24]
 800d640:	4619      	mov	r1, r3
 800d642:	2208      	movs	r2, #8
 800d644:	305c      	adds	r0, #92	; 0x5c
 800d646:	f000 f8f4 	bl	800d832 <memset>
 800d64a:	4b0d      	ldr	r3, [pc, #52]	; (800d680 <std+0x58>)
 800d64c:	6263      	str	r3, [r4, #36]	; 0x24
 800d64e:	4b0d      	ldr	r3, [pc, #52]	; (800d684 <std+0x5c>)
 800d650:	62a3      	str	r3, [r4, #40]	; 0x28
 800d652:	4b0d      	ldr	r3, [pc, #52]	; (800d688 <std+0x60>)
 800d654:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d656:	4b0d      	ldr	r3, [pc, #52]	; (800d68c <std+0x64>)
 800d658:	6323      	str	r3, [r4, #48]	; 0x30
 800d65a:	4b0d      	ldr	r3, [pc, #52]	; (800d690 <std+0x68>)
 800d65c:	6224      	str	r4, [r4, #32]
 800d65e:	429c      	cmp	r4, r3
 800d660:	d006      	beq.n	800d670 <std+0x48>
 800d662:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d666:	4294      	cmp	r4, r2
 800d668:	d002      	beq.n	800d670 <std+0x48>
 800d66a:	33d0      	adds	r3, #208	; 0xd0
 800d66c:	429c      	cmp	r4, r3
 800d66e:	d105      	bne.n	800d67c <std+0x54>
 800d670:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d678:	f000 b966 	b.w	800d948 <__retarget_lock_init_recursive>
 800d67c:	bd10      	pop	{r4, pc}
 800d67e:	bf00      	nop
 800d680:	0800d7ad 	.word	0x0800d7ad
 800d684:	0800d7cf 	.word	0x0800d7cf
 800d688:	0800d807 	.word	0x0800d807
 800d68c:	0800d82b 	.word	0x0800d82b
 800d690:	200008ac 	.word	0x200008ac

0800d694 <stdio_exit_handler>:
 800d694:	4a02      	ldr	r2, [pc, #8]	; (800d6a0 <stdio_exit_handler+0xc>)
 800d696:	4903      	ldr	r1, [pc, #12]	; (800d6a4 <stdio_exit_handler+0x10>)
 800d698:	4803      	ldr	r0, [pc, #12]	; (800d6a8 <stdio_exit_handler+0x14>)
 800d69a:	f000 b869 	b.w	800d770 <_fwalk_sglue>
 800d69e:	bf00      	nop
 800d6a0:	20000020 	.word	0x20000020
 800d6a4:	0800ecb1 	.word	0x0800ecb1
 800d6a8:	20000198 	.word	0x20000198

0800d6ac <cleanup_stdio>:
 800d6ac:	6841      	ldr	r1, [r0, #4]
 800d6ae:	4b0c      	ldr	r3, [pc, #48]	; (800d6e0 <cleanup_stdio+0x34>)
 800d6b0:	4299      	cmp	r1, r3
 800d6b2:	b510      	push	{r4, lr}
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	d001      	beq.n	800d6bc <cleanup_stdio+0x10>
 800d6b8:	f001 fafa 	bl	800ecb0 <_fflush_r>
 800d6bc:	68a1      	ldr	r1, [r4, #8]
 800d6be:	4b09      	ldr	r3, [pc, #36]	; (800d6e4 <cleanup_stdio+0x38>)
 800d6c0:	4299      	cmp	r1, r3
 800d6c2:	d002      	beq.n	800d6ca <cleanup_stdio+0x1e>
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f001 faf3 	bl	800ecb0 <_fflush_r>
 800d6ca:	68e1      	ldr	r1, [r4, #12]
 800d6cc:	4b06      	ldr	r3, [pc, #24]	; (800d6e8 <cleanup_stdio+0x3c>)
 800d6ce:	4299      	cmp	r1, r3
 800d6d0:	d004      	beq.n	800d6dc <cleanup_stdio+0x30>
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6d8:	f001 baea 	b.w	800ecb0 <_fflush_r>
 800d6dc:	bd10      	pop	{r4, pc}
 800d6de:	bf00      	nop
 800d6e0:	200008ac 	.word	0x200008ac
 800d6e4:	20000914 	.word	0x20000914
 800d6e8:	2000097c 	.word	0x2000097c

0800d6ec <global_stdio_init.part.0>:
 800d6ec:	b510      	push	{r4, lr}
 800d6ee:	4b0b      	ldr	r3, [pc, #44]	; (800d71c <global_stdio_init.part.0+0x30>)
 800d6f0:	4c0b      	ldr	r4, [pc, #44]	; (800d720 <global_stdio_init.part.0+0x34>)
 800d6f2:	4a0c      	ldr	r2, [pc, #48]	; (800d724 <global_stdio_init.part.0+0x38>)
 800d6f4:	601a      	str	r2, [r3, #0]
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	2104      	movs	r1, #4
 800d6fc:	f7ff ff94 	bl	800d628 <std>
 800d700:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d704:	2201      	movs	r2, #1
 800d706:	2109      	movs	r1, #9
 800d708:	f7ff ff8e 	bl	800d628 <std>
 800d70c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d710:	2202      	movs	r2, #2
 800d712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d716:	2112      	movs	r1, #18
 800d718:	f7ff bf86 	b.w	800d628 <std>
 800d71c:	200009e4 	.word	0x200009e4
 800d720:	200008ac 	.word	0x200008ac
 800d724:	0800d695 	.word	0x0800d695

0800d728 <__sfp_lock_acquire>:
 800d728:	4801      	ldr	r0, [pc, #4]	; (800d730 <__sfp_lock_acquire+0x8>)
 800d72a:	f000 b90e 	b.w	800d94a <__retarget_lock_acquire_recursive>
 800d72e:	bf00      	nop
 800d730:	200009ed 	.word	0x200009ed

0800d734 <__sfp_lock_release>:
 800d734:	4801      	ldr	r0, [pc, #4]	; (800d73c <__sfp_lock_release+0x8>)
 800d736:	f000 b909 	b.w	800d94c <__retarget_lock_release_recursive>
 800d73a:	bf00      	nop
 800d73c:	200009ed 	.word	0x200009ed

0800d740 <__sinit>:
 800d740:	b510      	push	{r4, lr}
 800d742:	4604      	mov	r4, r0
 800d744:	f7ff fff0 	bl	800d728 <__sfp_lock_acquire>
 800d748:	6a23      	ldr	r3, [r4, #32]
 800d74a:	b11b      	cbz	r3, 800d754 <__sinit+0x14>
 800d74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d750:	f7ff bff0 	b.w	800d734 <__sfp_lock_release>
 800d754:	4b04      	ldr	r3, [pc, #16]	; (800d768 <__sinit+0x28>)
 800d756:	6223      	str	r3, [r4, #32]
 800d758:	4b04      	ldr	r3, [pc, #16]	; (800d76c <__sinit+0x2c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1f5      	bne.n	800d74c <__sinit+0xc>
 800d760:	f7ff ffc4 	bl	800d6ec <global_stdio_init.part.0>
 800d764:	e7f2      	b.n	800d74c <__sinit+0xc>
 800d766:	bf00      	nop
 800d768:	0800d6ad 	.word	0x0800d6ad
 800d76c:	200009e4 	.word	0x200009e4

0800d770 <_fwalk_sglue>:
 800d770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d774:	4607      	mov	r7, r0
 800d776:	4688      	mov	r8, r1
 800d778:	4614      	mov	r4, r2
 800d77a:	2600      	movs	r6, #0
 800d77c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d780:	f1b9 0901 	subs.w	r9, r9, #1
 800d784:	d505      	bpl.n	800d792 <_fwalk_sglue+0x22>
 800d786:	6824      	ldr	r4, [r4, #0]
 800d788:	2c00      	cmp	r4, #0
 800d78a:	d1f7      	bne.n	800d77c <_fwalk_sglue+0xc>
 800d78c:	4630      	mov	r0, r6
 800d78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d792:	89ab      	ldrh	r3, [r5, #12]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d907      	bls.n	800d7a8 <_fwalk_sglue+0x38>
 800d798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d79c:	3301      	adds	r3, #1
 800d79e:	d003      	beq.n	800d7a8 <_fwalk_sglue+0x38>
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	47c0      	blx	r8
 800d7a6:	4306      	orrs	r6, r0
 800d7a8:	3568      	adds	r5, #104	; 0x68
 800d7aa:	e7e9      	b.n	800d780 <_fwalk_sglue+0x10>

0800d7ac <__sread>:
 800d7ac:	b510      	push	{r4, lr}
 800d7ae:	460c      	mov	r4, r1
 800d7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7b4:	f000 f87a 	bl	800d8ac <_read_r>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	bfab      	itete	ge
 800d7bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7be:	89a3      	ldrhlt	r3, [r4, #12]
 800d7c0:	181b      	addge	r3, r3, r0
 800d7c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d7c6:	bfac      	ite	ge
 800d7c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d7ca:	81a3      	strhlt	r3, [r4, #12]
 800d7cc:	bd10      	pop	{r4, pc}

0800d7ce <__swrite>:
 800d7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d2:	461f      	mov	r7, r3
 800d7d4:	898b      	ldrh	r3, [r1, #12]
 800d7d6:	05db      	lsls	r3, r3, #23
 800d7d8:	4605      	mov	r5, r0
 800d7da:	460c      	mov	r4, r1
 800d7dc:	4616      	mov	r6, r2
 800d7de:	d505      	bpl.n	800d7ec <__swrite+0x1e>
 800d7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7e4:	2302      	movs	r3, #2
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f000 f84e 	bl	800d888 <_lseek_r>
 800d7ec:	89a3      	ldrh	r3, [r4, #12]
 800d7ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7f6:	81a3      	strh	r3, [r4, #12]
 800d7f8:	4632      	mov	r2, r6
 800d7fa:	463b      	mov	r3, r7
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d802:	f000 b865 	b.w	800d8d0 <_write_r>

0800d806 <__sseek>:
 800d806:	b510      	push	{r4, lr}
 800d808:	460c      	mov	r4, r1
 800d80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d80e:	f000 f83b 	bl	800d888 <_lseek_r>
 800d812:	1c43      	adds	r3, r0, #1
 800d814:	89a3      	ldrh	r3, [r4, #12]
 800d816:	bf15      	itete	ne
 800d818:	6560      	strne	r0, [r4, #84]	; 0x54
 800d81a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d81e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d822:	81a3      	strheq	r3, [r4, #12]
 800d824:	bf18      	it	ne
 800d826:	81a3      	strhne	r3, [r4, #12]
 800d828:	bd10      	pop	{r4, pc}

0800d82a <__sclose>:
 800d82a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d82e:	f000 b81b 	b.w	800d868 <_close_r>

0800d832 <memset>:
 800d832:	4402      	add	r2, r0
 800d834:	4603      	mov	r3, r0
 800d836:	4293      	cmp	r3, r2
 800d838:	d100      	bne.n	800d83c <memset+0xa>
 800d83a:	4770      	bx	lr
 800d83c:	f803 1b01 	strb.w	r1, [r3], #1
 800d840:	e7f9      	b.n	800d836 <memset+0x4>

0800d842 <strncmp>:
 800d842:	b510      	push	{r4, lr}
 800d844:	b16a      	cbz	r2, 800d862 <strncmp+0x20>
 800d846:	3901      	subs	r1, #1
 800d848:	1884      	adds	r4, r0, r2
 800d84a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d84e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d852:	429a      	cmp	r2, r3
 800d854:	d103      	bne.n	800d85e <strncmp+0x1c>
 800d856:	42a0      	cmp	r0, r4
 800d858:	d001      	beq.n	800d85e <strncmp+0x1c>
 800d85a:	2a00      	cmp	r2, #0
 800d85c:	d1f5      	bne.n	800d84a <strncmp+0x8>
 800d85e:	1ad0      	subs	r0, r2, r3
 800d860:	bd10      	pop	{r4, pc}
 800d862:	4610      	mov	r0, r2
 800d864:	e7fc      	b.n	800d860 <strncmp+0x1e>
	...

0800d868 <_close_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4d06      	ldr	r5, [pc, #24]	; (800d884 <_close_r+0x1c>)
 800d86c:	2300      	movs	r3, #0
 800d86e:	4604      	mov	r4, r0
 800d870:	4608      	mov	r0, r1
 800d872:	602b      	str	r3, [r5, #0]
 800d874:	f7f5 f847 	bl	8002906 <_close>
 800d878:	1c43      	adds	r3, r0, #1
 800d87a:	d102      	bne.n	800d882 <_close_r+0x1a>
 800d87c:	682b      	ldr	r3, [r5, #0]
 800d87e:	b103      	cbz	r3, 800d882 <_close_r+0x1a>
 800d880:	6023      	str	r3, [r4, #0]
 800d882:	bd38      	pop	{r3, r4, r5, pc}
 800d884:	200009e8 	.word	0x200009e8

0800d888 <_lseek_r>:
 800d888:	b538      	push	{r3, r4, r5, lr}
 800d88a:	4d07      	ldr	r5, [pc, #28]	; (800d8a8 <_lseek_r+0x20>)
 800d88c:	4604      	mov	r4, r0
 800d88e:	4608      	mov	r0, r1
 800d890:	4611      	mov	r1, r2
 800d892:	2200      	movs	r2, #0
 800d894:	602a      	str	r2, [r5, #0]
 800d896:	461a      	mov	r2, r3
 800d898:	f7f5 f85c 	bl	8002954 <_lseek>
 800d89c:	1c43      	adds	r3, r0, #1
 800d89e:	d102      	bne.n	800d8a6 <_lseek_r+0x1e>
 800d8a0:	682b      	ldr	r3, [r5, #0]
 800d8a2:	b103      	cbz	r3, 800d8a6 <_lseek_r+0x1e>
 800d8a4:	6023      	str	r3, [r4, #0]
 800d8a6:	bd38      	pop	{r3, r4, r5, pc}
 800d8a8:	200009e8 	.word	0x200009e8

0800d8ac <_read_r>:
 800d8ac:	b538      	push	{r3, r4, r5, lr}
 800d8ae:	4d07      	ldr	r5, [pc, #28]	; (800d8cc <_read_r+0x20>)
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	4608      	mov	r0, r1
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	602a      	str	r2, [r5, #0]
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	f7f4 ffea 	bl	8002894 <_read>
 800d8c0:	1c43      	adds	r3, r0, #1
 800d8c2:	d102      	bne.n	800d8ca <_read_r+0x1e>
 800d8c4:	682b      	ldr	r3, [r5, #0]
 800d8c6:	b103      	cbz	r3, 800d8ca <_read_r+0x1e>
 800d8c8:	6023      	str	r3, [r4, #0]
 800d8ca:	bd38      	pop	{r3, r4, r5, pc}
 800d8cc:	200009e8 	.word	0x200009e8

0800d8d0 <_write_r>:
 800d8d0:	b538      	push	{r3, r4, r5, lr}
 800d8d2:	4d07      	ldr	r5, [pc, #28]	; (800d8f0 <_write_r+0x20>)
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	4608      	mov	r0, r1
 800d8d8:	4611      	mov	r1, r2
 800d8da:	2200      	movs	r2, #0
 800d8dc:	602a      	str	r2, [r5, #0]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	f7f4 fff5 	bl	80028ce <_write>
 800d8e4:	1c43      	adds	r3, r0, #1
 800d8e6:	d102      	bne.n	800d8ee <_write_r+0x1e>
 800d8e8:	682b      	ldr	r3, [r5, #0]
 800d8ea:	b103      	cbz	r3, 800d8ee <_write_r+0x1e>
 800d8ec:	6023      	str	r3, [r4, #0]
 800d8ee:	bd38      	pop	{r3, r4, r5, pc}
 800d8f0:	200009e8 	.word	0x200009e8

0800d8f4 <__errno>:
 800d8f4:	4b01      	ldr	r3, [pc, #4]	; (800d8fc <__errno+0x8>)
 800d8f6:	6818      	ldr	r0, [r3, #0]
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	200001e4 	.word	0x200001e4

0800d900 <__libc_init_array>:
 800d900:	b570      	push	{r4, r5, r6, lr}
 800d902:	4d0d      	ldr	r5, [pc, #52]	; (800d938 <__libc_init_array+0x38>)
 800d904:	4c0d      	ldr	r4, [pc, #52]	; (800d93c <__libc_init_array+0x3c>)
 800d906:	1b64      	subs	r4, r4, r5
 800d908:	10a4      	asrs	r4, r4, #2
 800d90a:	2600      	movs	r6, #0
 800d90c:	42a6      	cmp	r6, r4
 800d90e:	d109      	bne.n	800d924 <__libc_init_array+0x24>
 800d910:	4d0b      	ldr	r5, [pc, #44]	; (800d940 <__libc_init_array+0x40>)
 800d912:	4c0c      	ldr	r4, [pc, #48]	; (800d944 <__libc_init_array+0x44>)
 800d914:	f001 fe8a 	bl	800f62c <_init>
 800d918:	1b64      	subs	r4, r4, r5
 800d91a:	10a4      	asrs	r4, r4, #2
 800d91c:	2600      	movs	r6, #0
 800d91e:	42a6      	cmp	r6, r4
 800d920:	d105      	bne.n	800d92e <__libc_init_array+0x2e>
 800d922:	bd70      	pop	{r4, r5, r6, pc}
 800d924:	f855 3b04 	ldr.w	r3, [r5], #4
 800d928:	4798      	blx	r3
 800d92a:	3601      	adds	r6, #1
 800d92c:	e7ee      	b.n	800d90c <__libc_init_array+0xc>
 800d92e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d932:	4798      	blx	r3
 800d934:	3601      	adds	r6, #1
 800d936:	e7f2      	b.n	800d91e <__libc_init_array+0x1e>
 800d938:	0800fcf4 	.word	0x0800fcf4
 800d93c:	0800fcf4 	.word	0x0800fcf4
 800d940:	0800fcf4 	.word	0x0800fcf4
 800d944:	0800fcfc 	.word	0x0800fcfc

0800d948 <__retarget_lock_init_recursive>:
 800d948:	4770      	bx	lr

0800d94a <__retarget_lock_acquire_recursive>:
 800d94a:	4770      	bx	lr

0800d94c <__retarget_lock_release_recursive>:
 800d94c:	4770      	bx	lr

0800d94e <memcpy>:
 800d94e:	440a      	add	r2, r1
 800d950:	4291      	cmp	r1, r2
 800d952:	f100 33ff 	add.w	r3, r0, #4294967295
 800d956:	d100      	bne.n	800d95a <memcpy+0xc>
 800d958:	4770      	bx	lr
 800d95a:	b510      	push	{r4, lr}
 800d95c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d960:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d964:	4291      	cmp	r1, r2
 800d966:	d1f9      	bne.n	800d95c <memcpy+0xe>
 800d968:	bd10      	pop	{r4, pc}
	...

0800d96c <_free_r>:
 800d96c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d96e:	2900      	cmp	r1, #0
 800d970:	d044      	beq.n	800d9fc <_free_r+0x90>
 800d972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d976:	9001      	str	r0, [sp, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f1a1 0404 	sub.w	r4, r1, #4
 800d97e:	bfb8      	it	lt
 800d980:	18e4      	addlt	r4, r4, r3
 800d982:	f000 fc49 	bl	800e218 <__malloc_lock>
 800d986:	4a1e      	ldr	r2, [pc, #120]	; (800da00 <_free_r+0x94>)
 800d988:	9801      	ldr	r0, [sp, #4]
 800d98a:	6813      	ldr	r3, [r2, #0]
 800d98c:	b933      	cbnz	r3, 800d99c <_free_r+0x30>
 800d98e:	6063      	str	r3, [r4, #4]
 800d990:	6014      	str	r4, [r2, #0]
 800d992:	b003      	add	sp, #12
 800d994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d998:	f000 bc44 	b.w	800e224 <__malloc_unlock>
 800d99c:	42a3      	cmp	r3, r4
 800d99e:	d908      	bls.n	800d9b2 <_free_r+0x46>
 800d9a0:	6825      	ldr	r5, [r4, #0]
 800d9a2:	1961      	adds	r1, r4, r5
 800d9a4:	428b      	cmp	r3, r1
 800d9a6:	bf01      	itttt	eq
 800d9a8:	6819      	ldreq	r1, [r3, #0]
 800d9aa:	685b      	ldreq	r3, [r3, #4]
 800d9ac:	1949      	addeq	r1, r1, r5
 800d9ae:	6021      	streq	r1, [r4, #0]
 800d9b0:	e7ed      	b.n	800d98e <_free_r+0x22>
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	b10b      	cbz	r3, 800d9bc <_free_r+0x50>
 800d9b8:	42a3      	cmp	r3, r4
 800d9ba:	d9fa      	bls.n	800d9b2 <_free_r+0x46>
 800d9bc:	6811      	ldr	r1, [r2, #0]
 800d9be:	1855      	adds	r5, r2, r1
 800d9c0:	42a5      	cmp	r5, r4
 800d9c2:	d10b      	bne.n	800d9dc <_free_r+0x70>
 800d9c4:	6824      	ldr	r4, [r4, #0]
 800d9c6:	4421      	add	r1, r4
 800d9c8:	1854      	adds	r4, r2, r1
 800d9ca:	42a3      	cmp	r3, r4
 800d9cc:	6011      	str	r1, [r2, #0]
 800d9ce:	d1e0      	bne.n	800d992 <_free_r+0x26>
 800d9d0:	681c      	ldr	r4, [r3, #0]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	6053      	str	r3, [r2, #4]
 800d9d6:	440c      	add	r4, r1
 800d9d8:	6014      	str	r4, [r2, #0]
 800d9da:	e7da      	b.n	800d992 <_free_r+0x26>
 800d9dc:	d902      	bls.n	800d9e4 <_free_r+0x78>
 800d9de:	230c      	movs	r3, #12
 800d9e0:	6003      	str	r3, [r0, #0]
 800d9e2:	e7d6      	b.n	800d992 <_free_r+0x26>
 800d9e4:	6825      	ldr	r5, [r4, #0]
 800d9e6:	1961      	adds	r1, r4, r5
 800d9e8:	428b      	cmp	r3, r1
 800d9ea:	bf04      	itt	eq
 800d9ec:	6819      	ldreq	r1, [r3, #0]
 800d9ee:	685b      	ldreq	r3, [r3, #4]
 800d9f0:	6063      	str	r3, [r4, #4]
 800d9f2:	bf04      	itt	eq
 800d9f4:	1949      	addeq	r1, r1, r5
 800d9f6:	6021      	streq	r1, [r4, #0]
 800d9f8:	6054      	str	r4, [r2, #4]
 800d9fa:	e7ca      	b.n	800d992 <_free_r+0x26>
 800d9fc:	b003      	add	sp, #12
 800d9fe:	bd30      	pop	{r4, r5, pc}
 800da00:	200009f0 	.word	0x200009f0

0800da04 <rshift>:
 800da04:	6903      	ldr	r3, [r0, #16]
 800da06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800da0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800da12:	f100 0414 	add.w	r4, r0, #20
 800da16:	dd45      	ble.n	800daa4 <rshift+0xa0>
 800da18:	f011 011f 	ands.w	r1, r1, #31
 800da1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800da24:	d10c      	bne.n	800da40 <rshift+0x3c>
 800da26:	f100 0710 	add.w	r7, r0, #16
 800da2a:	4629      	mov	r1, r5
 800da2c:	42b1      	cmp	r1, r6
 800da2e:	d334      	bcc.n	800da9a <rshift+0x96>
 800da30:	1a9b      	subs	r3, r3, r2
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	1eea      	subs	r2, r5, #3
 800da36:	4296      	cmp	r6, r2
 800da38:	bf38      	it	cc
 800da3a:	2300      	movcc	r3, #0
 800da3c:	4423      	add	r3, r4
 800da3e:	e015      	b.n	800da6c <rshift+0x68>
 800da40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da44:	f1c1 0820 	rsb	r8, r1, #32
 800da48:	40cf      	lsrs	r7, r1
 800da4a:	f105 0e04 	add.w	lr, r5, #4
 800da4e:	46a1      	mov	r9, r4
 800da50:	4576      	cmp	r6, lr
 800da52:	46f4      	mov	ip, lr
 800da54:	d815      	bhi.n	800da82 <rshift+0x7e>
 800da56:	1a9a      	subs	r2, r3, r2
 800da58:	0092      	lsls	r2, r2, #2
 800da5a:	3a04      	subs	r2, #4
 800da5c:	3501      	adds	r5, #1
 800da5e:	42ae      	cmp	r6, r5
 800da60:	bf38      	it	cc
 800da62:	2200      	movcc	r2, #0
 800da64:	18a3      	adds	r3, r4, r2
 800da66:	50a7      	str	r7, [r4, r2]
 800da68:	b107      	cbz	r7, 800da6c <rshift+0x68>
 800da6a:	3304      	adds	r3, #4
 800da6c:	1b1a      	subs	r2, r3, r4
 800da6e:	42a3      	cmp	r3, r4
 800da70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da74:	bf08      	it	eq
 800da76:	2300      	moveq	r3, #0
 800da78:	6102      	str	r2, [r0, #16]
 800da7a:	bf08      	it	eq
 800da7c:	6143      	streq	r3, [r0, #20]
 800da7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da82:	f8dc c000 	ldr.w	ip, [ip]
 800da86:	fa0c fc08 	lsl.w	ip, ip, r8
 800da8a:	ea4c 0707 	orr.w	r7, ip, r7
 800da8e:	f849 7b04 	str.w	r7, [r9], #4
 800da92:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da96:	40cf      	lsrs	r7, r1
 800da98:	e7da      	b.n	800da50 <rshift+0x4c>
 800da9a:	f851 cb04 	ldr.w	ip, [r1], #4
 800da9e:	f847 cf04 	str.w	ip, [r7, #4]!
 800daa2:	e7c3      	b.n	800da2c <rshift+0x28>
 800daa4:	4623      	mov	r3, r4
 800daa6:	e7e1      	b.n	800da6c <rshift+0x68>

0800daa8 <__hexdig_fun>:
 800daa8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800daac:	2b09      	cmp	r3, #9
 800daae:	d802      	bhi.n	800dab6 <__hexdig_fun+0xe>
 800dab0:	3820      	subs	r0, #32
 800dab2:	b2c0      	uxtb	r0, r0
 800dab4:	4770      	bx	lr
 800dab6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800daba:	2b05      	cmp	r3, #5
 800dabc:	d801      	bhi.n	800dac2 <__hexdig_fun+0x1a>
 800dabe:	3847      	subs	r0, #71	; 0x47
 800dac0:	e7f7      	b.n	800dab2 <__hexdig_fun+0xa>
 800dac2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dac6:	2b05      	cmp	r3, #5
 800dac8:	d801      	bhi.n	800dace <__hexdig_fun+0x26>
 800daca:	3827      	subs	r0, #39	; 0x27
 800dacc:	e7f1      	b.n	800dab2 <__hexdig_fun+0xa>
 800dace:	2000      	movs	r0, #0
 800dad0:	4770      	bx	lr
	...

0800dad4 <__gethex>:
 800dad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad8:	4617      	mov	r7, r2
 800dada:	680a      	ldr	r2, [r1, #0]
 800dadc:	b085      	sub	sp, #20
 800dade:	f102 0b02 	add.w	fp, r2, #2
 800dae2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dae6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800daea:	4681      	mov	r9, r0
 800daec:	468a      	mov	sl, r1
 800daee:	9302      	str	r3, [sp, #8]
 800daf0:	32fe      	adds	r2, #254	; 0xfe
 800daf2:	eb02 030b 	add.w	r3, r2, fp
 800daf6:	46d8      	mov	r8, fp
 800daf8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800dafc:	9301      	str	r3, [sp, #4]
 800dafe:	2830      	cmp	r0, #48	; 0x30
 800db00:	d0f7      	beq.n	800daf2 <__gethex+0x1e>
 800db02:	f7ff ffd1 	bl	800daa8 <__hexdig_fun>
 800db06:	4604      	mov	r4, r0
 800db08:	2800      	cmp	r0, #0
 800db0a:	d138      	bne.n	800db7e <__gethex+0xaa>
 800db0c:	49a7      	ldr	r1, [pc, #668]	; (800ddac <__gethex+0x2d8>)
 800db0e:	2201      	movs	r2, #1
 800db10:	4640      	mov	r0, r8
 800db12:	f7ff fe96 	bl	800d842 <strncmp>
 800db16:	4606      	mov	r6, r0
 800db18:	2800      	cmp	r0, #0
 800db1a:	d169      	bne.n	800dbf0 <__gethex+0x11c>
 800db1c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800db20:	465d      	mov	r5, fp
 800db22:	f7ff ffc1 	bl	800daa8 <__hexdig_fun>
 800db26:	2800      	cmp	r0, #0
 800db28:	d064      	beq.n	800dbf4 <__gethex+0x120>
 800db2a:	465a      	mov	r2, fp
 800db2c:	7810      	ldrb	r0, [r2, #0]
 800db2e:	2830      	cmp	r0, #48	; 0x30
 800db30:	4690      	mov	r8, r2
 800db32:	f102 0201 	add.w	r2, r2, #1
 800db36:	d0f9      	beq.n	800db2c <__gethex+0x58>
 800db38:	f7ff ffb6 	bl	800daa8 <__hexdig_fun>
 800db3c:	2301      	movs	r3, #1
 800db3e:	fab0 f480 	clz	r4, r0
 800db42:	0964      	lsrs	r4, r4, #5
 800db44:	465e      	mov	r6, fp
 800db46:	9301      	str	r3, [sp, #4]
 800db48:	4642      	mov	r2, r8
 800db4a:	4615      	mov	r5, r2
 800db4c:	3201      	adds	r2, #1
 800db4e:	7828      	ldrb	r0, [r5, #0]
 800db50:	f7ff ffaa 	bl	800daa8 <__hexdig_fun>
 800db54:	2800      	cmp	r0, #0
 800db56:	d1f8      	bne.n	800db4a <__gethex+0x76>
 800db58:	4994      	ldr	r1, [pc, #592]	; (800ddac <__gethex+0x2d8>)
 800db5a:	2201      	movs	r2, #1
 800db5c:	4628      	mov	r0, r5
 800db5e:	f7ff fe70 	bl	800d842 <strncmp>
 800db62:	b978      	cbnz	r0, 800db84 <__gethex+0xb0>
 800db64:	b946      	cbnz	r6, 800db78 <__gethex+0xa4>
 800db66:	1c6e      	adds	r6, r5, #1
 800db68:	4632      	mov	r2, r6
 800db6a:	4615      	mov	r5, r2
 800db6c:	3201      	adds	r2, #1
 800db6e:	7828      	ldrb	r0, [r5, #0]
 800db70:	f7ff ff9a 	bl	800daa8 <__hexdig_fun>
 800db74:	2800      	cmp	r0, #0
 800db76:	d1f8      	bne.n	800db6a <__gethex+0x96>
 800db78:	1b73      	subs	r3, r6, r5
 800db7a:	009e      	lsls	r6, r3, #2
 800db7c:	e004      	b.n	800db88 <__gethex+0xb4>
 800db7e:	2400      	movs	r4, #0
 800db80:	4626      	mov	r6, r4
 800db82:	e7e1      	b.n	800db48 <__gethex+0x74>
 800db84:	2e00      	cmp	r6, #0
 800db86:	d1f7      	bne.n	800db78 <__gethex+0xa4>
 800db88:	782b      	ldrb	r3, [r5, #0]
 800db8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800db8e:	2b50      	cmp	r3, #80	; 0x50
 800db90:	d13d      	bne.n	800dc0e <__gethex+0x13a>
 800db92:	786b      	ldrb	r3, [r5, #1]
 800db94:	2b2b      	cmp	r3, #43	; 0x2b
 800db96:	d02f      	beq.n	800dbf8 <__gethex+0x124>
 800db98:	2b2d      	cmp	r3, #45	; 0x2d
 800db9a:	d031      	beq.n	800dc00 <__gethex+0x12c>
 800db9c:	1c69      	adds	r1, r5, #1
 800db9e:	f04f 0b00 	mov.w	fp, #0
 800dba2:	7808      	ldrb	r0, [r1, #0]
 800dba4:	f7ff ff80 	bl	800daa8 <__hexdig_fun>
 800dba8:	1e42      	subs	r2, r0, #1
 800dbaa:	b2d2      	uxtb	r2, r2
 800dbac:	2a18      	cmp	r2, #24
 800dbae:	d82e      	bhi.n	800dc0e <__gethex+0x13a>
 800dbb0:	f1a0 0210 	sub.w	r2, r0, #16
 800dbb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dbb8:	f7ff ff76 	bl	800daa8 <__hexdig_fun>
 800dbbc:	f100 3cff 	add.w	ip, r0, #4294967295
 800dbc0:	fa5f fc8c 	uxtb.w	ip, ip
 800dbc4:	f1bc 0f18 	cmp.w	ip, #24
 800dbc8:	d91d      	bls.n	800dc06 <__gethex+0x132>
 800dbca:	f1bb 0f00 	cmp.w	fp, #0
 800dbce:	d000      	beq.n	800dbd2 <__gethex+0xfe>
 800dbd0:	4252      	negs	r2, r2
 800dbd2:	4416      	add	r6, r2
 800dbd4:	f8ca 1000 	str.w	r1, [sl]
 800dbd8:	b1dc      	cbz	r4, 800dc12 <__gethex+0x13e>
 800dbda:	9b01      	ldr	r3, [sp, #4]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	bf14      	ite	ne
 800dbe0:	f04f 0800 	movne.w	r8, #0
 800dbe4:	f04f 0806 	moveq.w	r8, #6
 800dbe8:	4640      	mov	r0, r8
 800dbea:	b005      	add	sp, #20
 800dbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf0:	4645      	mov	r5, r8
 800dbf2:	4626      	mov	r6, r4
 800dbf4:	2401      	movs	r4, #1
 800dbf6:	e7c7      	b.n	800db88 <__gethex+0xb4>
 800dbf8:	f04f 0b00 	mov.w	fp, #0
 800dbfc:	1ca9      	adds	r1, r5, #2
 800dbfe:	e7d0      	b.n	800dba2 <__gethex+0xce>
 800dc00:	f04f 0b01 	mov.w	fp, #1
 800dc04:	e7fa      	b.n	800dbfc <__gethex+0x128>
 800dc06:	230a      	movs	r3, #10
 800dc08:	fb03 0002 	mla	r0, r3, r2, r0
 800dc0c:	e7d0      	b.n	800dbb0 <__gethex+0xdc>
 800dc0e:	4629      	mov	r1, r5
 800dc10:	e7e0      	b.n	800dbd4 <__gethex+0x100>
 800dc12:	eba5 0308 	sub.w	r3, r5, r8
 800dc16:	3b01      	subs	r3, #1
 800dc18:	4621      	mov	r1, r4
 800dc1a:	2b07      	cmp	r3, #7
 800dc1c:	dc0a      	bgt.n	800dc34 <__gethex+0x160>
 800dc1e:	4648      	mov	r0, r9
 800dc20:	f000 fb06 	bl	800e230 <_Balloc>
 800dc24:	4604      	mov	r4, r0
 800dc26:	b940      	cbnz	r0, 800dc3a <__gethex+0x166>
 800dc28:	4b61      	ldr	r3, [pc, #388]	; (800ddb0 <__gethex+0x2dc>)
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	21e4      	movs	r1, #228	; 0xe4
 800dc2e:	4861      	ldr	r0, [pc, #388]	; (800ddb4 <__gethex+0x2e0>)
 800dc30:	f001 f876 	bl	800ed20 <__assert_func>
 800dc34:	3101      	adds	r1, #1
 800dc36:	105b      	asrs	r3, r3, #1
 800dc38:	e7ef      	b.n	800dc1a <__gethex+0x146>
 800dc3a:	f100 0a14 	add.w	sl, r0, #20
 800dc3e:	2300      	movs	r3, #0
 800dc40:	495a      	ldr	r1, [pc, #360]	; (800ddac <__gethex+0x2d8>)
 800dc42:	f8cd a004 	str.w	sl, [sp, #4]
 800dc46:	469b      	mov	fp, r3
 800dc48:	45a8      	cmp	r8, r5
 800dc4a:	d342      	bcc.n	800dcd2 <__gethex+0x1fe>
 800dc4c:	9801      	ldr	r0, [sp, #4]
 800dc4e:	f840 bb04 	str.w	fp, [r0], #4
 800dc52:	eba0 000a 	sub.w	r0, r0, sl
 800dc56:	1080      	asrs	r0, r0, #2
 800dc58:	6120      	str	r0, [r4, #16]
 800dc5a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800dc5e:	4658      	mov	r0, fp
 800dc60:	f000 fbd8 	bl	800e414 <__hi0bits>
 800dc64:	683d      	ldr	r5, [r7, #0]
 800dc66:	eba8 0000 	sub.w	r0, r8, r0
 800dc6a:	42a8      	cmp	r0, r5
 800dc6c:	dd59      	ble.n	800dd22 <__gethex+0x24e>
 800dc6e:	eba0 0805 	sub.w	r8, r0, r5
 800dc72:	4641      	mov	r1, r8
 800dc74:	4620      	mov	r0, r4
 800dc76:	f000 ff67 	bl	800eb48 <__any_on>
 800dc7a:	4683      	mov	fp, r0
 800dc7c:	b1b8      	cbz	r0, 800dcae <__gethex+0x1da>
 800dc7e:	f108 33ff 	add.w	r3, r8, #4294967295
 800dc82:	1159      	asrs	r1, r3, #5
 800dc84:	f003 021f 	and.w	r2, r3, #31
 800dc88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dc8c:	f04f 0b01 	mov.w	fp, #1
 800dc90:	fa0b f202 	lsl.w	r2, fp, r2
 800dc94:	420a      	tst	r2, r1
 800dc96:	d00a      	beq.n	800dcae <__gethex+0x1da>
 800dc98:	455b      	cmp	r3, fp
 800dc9a:	dd06      	ble.n	800dcaa <__gethex+0x1d6>
 800dc9c:	f1a8 0102 	sub.w	r1, r8, #2
 800dca0:	4620      	mov	r0, r4
 800dca2:	f000 ff51 	bl	800eb48 <__any_on>
 800dca6:	2800      	cmp	r0, #0
 800dca8:	d138      	bne.n	800dd1c <__gethex+0x248>
 800dcaa:	f04f 0b02 	mov.w	fp, #2
 800dcae:	4641      	mov	r1, r8
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f7ff fea7 	bl	800da04 <rshift>
 800dcb6:	4446      	add	r6, r8
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	42b3      	cmp	r3, r6
 800dcbc:	da41      	bge.n	800dd42 <__gethex+0x26e>
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	4648      	mov	r0, r9
 800dcc2:	f000 faf5 	bl	800e2b0 <_Bfree>
 800dcc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcc8:	2300      	movs	r3, #0
 800dcca:	6013      	str	r3, [r2, #0]
 800dccc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800dcd0:	e78a      	b.n	800dbe8 <__gethex+0x114>
 800dcd2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800dcd6:	2a2e      	cmp	r2, #46	; 0x2e
 800dcd8:	d014      	beq.n	800dd04 <__gethex+0x230>
 800dcda:	2b20      	cmp	r3, #32
 800dcdc:	d106      	bne.n	800dcec <__gethex+0x218>
 800dcde:	9b01      	ldr	r3, [sp, #4]
 800dce0:	f843 bb04 	str.w	fp, [r3], #4
 800dce4:	f04f 0b00 	mov.w	fp, #0
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	465b      	mov	r3, fp
 800dcec:	7828      	ldrb	r0, [r5, #0]
 800dcee:	9303      	str	r3, [sp, #12]
 800dcf0:	f7ff feda 	bl	800daa8 <__hexdig_fun>
 800dcf4:	9b03      	ldr	r3, [sp, #12]
 800dcf6:	f000 000f 	and.w	r0, r0, #15
 800dcfa:	4098      	lsls	r0, r3
 800dcfc:	ea4b 0b00 	orr.w	fp, fp, r0
 800dd00:	3304      	adds	r3, #4
 800dd02:	e7a1      	b.n	800dc48 <__gethex+0x174>
 800dd04:	45a8      	cmp	r8, r5
 800dd06:	d8e8      	bhi.n	800dcda <__gethex+0x206>
 800dd08:	2201      	movs	r2, #1
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	9303      	str	r3, [sp, #12]
 800dd0e:	f7ff fd98 	bl	800d842 <strncmp>
 800dd12:	4926      	ldr	r1, [pc, #152]	; (800ddac <__gethex+0x2d8>)
 800dd14:	9b03      	ldr	r3, [sp, #12]
 800dd16:	2800      	cmp	r0, #0
 800dd18:	d1df      	bne.n	800dcda <__gethex+0x206>
 800dd1a:	e795      	b.n	800dc48 <__gethex+0x174>
 800dd1c:	f04f 0b03 	mov.w	fp, #3
 800dd20:	e7c5      	b.n	800dcae <__gethex+0x1da>
 800dd22:	da0b      	bge.n	800dd3c <__gethex+0x268>
 800dd24:	eba5 0800 	sub.w	r8, r5, r0
 800dd28:	4621      	mov	r1, r4
 800dd2a:	4642      	mov	r2, r8
 800dd2c:	4648      	mov	r0, r9
 800dd2e:	f000 fcd9 	bl	800e6e4 <__lshift>
 800dd32:	eba6 0608 	sub.w	r6, r6, r8
 800dd36:	4604      	mov	r4, r0
 800dd38:	f100 0a14 	add.w	sl, r0, #20
 800dd3c:	f04f 0b00 	mov.w	fp, #0
 800dd40:	e7ba      	b.n	800dcb8 <__gethex+0x1e4>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	42b3      	cmp	r3, r6
 800dd46:	dd73      	ble.n	800de30 <__gethex+0x35c>
 800dd48:	1b9e      	subs	r6, r3, r6
 800dd4a:	42b5      	cmp	r5, r6
 800dd4c:	dc34      	bgt.n	800ddb8 <__gethex+0x2e4>
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d023      	beq.n	800dd9c <__gethex+0x2c8>
 800dd54:	2b03      	cmp	r3, #3
 800dd56:	d025      	beq.n	800dda4 <__gethex+0x2d0>
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d115      	bne.n	800dd88 <__gethex+0x2b4>
 800dd5c:	42b5      	cmp	r5, r6
 800dd5e:	d113      	bne.n	800dd88 <__gethex+0x2b4>
 800dd60:	2d01      	cmp	r5, #1
 800dd62:	d10b      	bne.n	800dd7c <__gethex+0x2a8>
 800dd64:	9a02      	ldr	r2, [sp, #8]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6013      	str	r3, [r2, #0]
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	6123      	str	r3, [r4, #16]
 800dd6e:	f8ca 3000 	str.w	r3, [sl]
 800dd72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd74:	f04f 0862 	mov.w	r8, #98	; 0x62
 800dd78:	601c      	str	r4, [r3, #0]
 800dd7a:	e735      	b.n	800dbe8 <__gethex+0x114>
 800dd7c:	1e69      	subs	r1, r5, #1
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f000 fee2 	bl	800eb48 <__any_on>
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d1ed      	bne.n	800dd64 <__gethex+0x290>
 800dd88:	4621      	mov	r1, r4
 800dd8a:	4648      	mov	r0, r9
 800dd8c:	f000 fa90 	bl	800e2b0 <_Bfree>
 800dd90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd92:	2300      	movs	r3, #0
 800dd94:	6013      	str	r3, [r2, #0]
 800dd96:	f04f 0850 	mov.w	r8, #80	; 0x50
 800dd9a:	e725      	b.n	800dbe8 <__gethex+0x114>
 800dd9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1f2      	bne.n	800dd88 <__gethex+0x2b4>
 800dda2:	e7df      	b.n	800dd64 <__gethex+0x290>
 800dda4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d1dc      	bne.n	800dd64 <__gethex+0x290>
 800ddaa:	e7ed      	b.n	800dd88 <__gethex+0x2b4>
 800ddac:	0800f930 	.word	0x0800f930
 800ddb0:	0800f998 	.word	0x0800f998
 800ddb4:	0800f9a9 	.word	0x0800f9a9
 800ddb8:	f106 38ff 	add.w	r8, r6, #4294967295
 800ddbc:	f1bb 0f00 	cmp.w	fp, #0
 800ddc0:	d133      	bne.n	800de2a <__gethex+0x356>
 800ddc2:	f1b8 0f00 	cmp.w	r8, #0
 800ddc6:	d004      	beq.n	800ddd2 <__gethex+0x2fe>
 800ddc8:	4641      	mov	r1, r8
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f000 febc 	bl	800eb48 <__any_on>
 800ddd0:	4683      	mov	fp, r0
 800ddd2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dddc:	f008 081f 	and.w	r8, r8, #31
 800dde0:	fa03 f308 	lsl.w	r3, r3, r8
 800dde4:	4213      	tst	r3, r2
 800dde6:	4631      	mov	r1, r6
 800dde8:	4620      	mov	r0, r4
 800ddea:	bf18      	it	ne
 800ddec:	f04b 0b02 	orrne.w	fp, fp, #2
 800ddf0:	1bad      	subs	r5, r5, r6
 800ddf2:	f7ff fe07 	bl	800da04 <rshift>
 800ddf6:	687e      	ldr	r6, [r7, #4]
 800ddf8:	f04f 0802 	mov.w	r8, #2
 800ddfc:	f1bb 0f00 	cmp.w	fp, #0
 800de00:	d04a      	beq.n	800de98 <__gethex+0x3c4>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2b02      	cmp	r3, #2
 800de06:	d016      	beq.n	800de36 <__gethex+0x362>
 800de08:	2b03      	cmp	r3, #3
 800de0a:	d018      	beq.n	800de3e <__gethex+0x36a>
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d109      	bne.n	800de24 <__gethex+0x350>
 800de10:	f01b 0f02 	tst.w	fp, #2
 800de14:	d006      	beq.n	800de24 <__gethex+0x350>
 800de16:	f8da 3000 	ldr.w	r3, [sl]
 800de1a:	ea4b 0b03 	orr.w	fp, fp, r3
 800de1e:	f01b 0f01 	tst.w	fp, #1
 800de22:	d10f      	bne.n	800de44 <__gethex+0x370>
 800de24:	f048 0810 	orr.w	r8, r8, #16
 800de28:	e036      	b.n	800de98 <__gethex+0x3c4>
 800de2a:	f04f 0b01 	mov.w	fp, #1
 800de2e:	e7d0      	b.n	800ddd2 <__gethex+0x2fe>
 800de30:	f04f 0801 	mov.w	r8, #1
 800de34:	e7e2      	b.n	800ddfc <__gethex+0x328>
 800de36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de38:	f1c3 0301 	rsb	r3, r3, #1
 800de3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800de3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de40:	2b00      	cmp	r3, #0
 800de42:	d0ef      	beq.n	800de24 <__gethex+0x350>
 800de44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800de48:	f104 0214 	add.w	r2, r4, #20
 800de4c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800de50:	9301      	str	r3, [sp, #4]
 800de52:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800de56:	2300      	movs	r3, #0
 800de58:	4694      	mov	ip, r2
 800de5a:	f852 1b04 	ldr.w	r1, [r2], #4
 800de5e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800de62:	d01e      	beq.n	800dea2 <__gethex+0x3ce>
 800de64:	3101      	adds	r1, #1
 800de66:	f8cc 1000 	str.w	r1, [ip]
 800de6a:	f1b8 0f02 	cmp.w	r8, #2
 800de6e:	f104 0214 	add.w	r2, r4, #20
 800de72:	d13d      	bne.n	800def0 <__gethex+0x41c>
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	3b01      	subs	r3, #1
 800de78:	42ab      	cmp	r3, r5
 800de7a:	d10b      	bne.n	800de94 <__gethex+0x3c0>
 800de7c:	1169      	asrs	r1, r5, #5
 800de7e:	2301      	movs	r3, #1
 800de80:	f005 051f 	and.w	r5, r5, #31
 800de84:	fa03 f505 	lsl.w	r5, r3, r5
 800de88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de8c:	421d      	tst	r5, r3
 800de8e:	bf18      	it	ne
 800de90:	f04f 0801 	movne.w	r8, #1
 800de94:	f048 0820 	orr.w	r8, r8, #32
 800de98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de9a:	601c      	str	r4, [r3, #0]
 800de9c:	9b02      	ldr	r3, [sp, #8]
 800de9e:	601e      	str	r6, [r3, #0]
 800dea0:	e6a2      	b.n	800dbe8 <__gethex+0x114>
 800dea2:	4290      	cmp	r0, r2
 800dea4:	f842 3c04 	str.w	r3, [r2, #-4]
 800dea8:	d8d6      	bhi.n	800de58 <__gethex+0x384>
 800deaa:	68a2      	ldr	r2, [r4, #8]
 800deac:	4593      	cmp	fp, r2
 800deae:	db17      	blt.n	800dee0 <__gethex+0x40c>
 800deb0:	6861      	ldr	r1, [r4, #4]
 800deb2:	4648      	mov	r0, r9
 800deb4:	3101      	adds	r1, #1
 800deb6:	f000 f9bb 	bl	800e230 <_Balloc>
 800deba:	4682      	mov	sl, r0
 800debc:	b918      	cbnz	r0, 800dec6 <__gethex+0x3f2>
 800debe:	4b1b      	ldr	r3, [pc, #108]	; (800df2c <__gethex+0x458>)
 800dec0:	4602      	mov	r2, r0
 800dec2:	2184      	movs	r1, #132	; 0x84
 800dec4:	e6b3      	b.n	800dc2e <__gethex+0x15a>
 800dec6:	6922      	ldr	r2, [r4, #16]
 800dec8:	3202      	adds	r2, #2
 800deca:	f104 010c 	add.w	r1, r4, #12
 800dece:	0092      	lsls	r2, r2, #2
 800ded0:	300c      	adds	r0, #12
 800ded2:	f7ff fd3c 	bl	800d94e <memcpy>
 800ded6:	4621      	mov	r1, r4
 800ded8:	4648      	mov	r0, r9
 800deda:	f000 f9e9 	bl	800e2b0 <_Bfree>
 800dede:	4654      	mov	r4, sl
 800dee0:	6922      	ldr	r2, [r4, #16]
 800dee2:	1c51      	adds	r1, r2, #1
 800dee4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dee8:	6121      	str	r1, [r4, #16]
 800deea:	2101      	movs	r1, #1
 800deec:	6151      	str	r1, [r2, #20]
 800deee:	e7bc      	b.n	800de6a <__gethex+0x396>
 800def0:	6921      	ldr	r1, [r4, #16]
 800def2:	4559      	cmp	r1, fp
 800def4:	dd0b      	ble.n	800df0e <__gethex+0x43a>
 800def6:	2101      	movs	r1, #1
 800def8:	4620      	mov	r0, r4
 800defa:	f7ff fd83 	bl	800da04 <rshift>
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	3601      	adds	r6, #1
 800df02:	42b3      	cmp	r3, r6
 800df04:	f6ff aedb 	blt.w	800dcbe <__gethex+0x1ea>
 800df08:	f04f 0801 	mov.w	r8, #1
 800df0c:	e7c2      	b.n	800de94 <__gethex+0x3c0>
 800df0e:	f015 051f 	ands.w	r5, r5, #31
 800df12:	d0f9      	beq.n	800df08 <__gethex+0x434>
 800df14:	9b01      	ldr	r3, [sp, #4]
 800df16:	441a      	add	r2, r3
 800df18:	f1c5 0520 	rsb	r5, r5, #32
 800df1c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800df20:	f000 fa78 	bl	800e414 <__hi0bits>
 800df24:	42a8      	cmp	r0, r5
 800df26:	dbe6      	blt.n	800def6 <__gethex+0x422>
 800df28:	e7ee      	b.n	800df08 <__gethex+0x434>
 800df2a:	bf00      	nop
 800df2c:	0800f998 	.word	0x0800f998

0800df30 <L_shift>:
 800df30:	f1c2 0208 	rsb	r2, r2, #8
 800df34:	0092      	lsls	r2, r2, #2
 800df36:	b570      	push	{r4, r5, r6, lr}
 800df38:	f1c2 0620 	rsb	r6, r2, #32
 800df3c:	6843      	ldr	r3, [r0, #4]
 800df3e:	6804      	ldr	r4, [r0, #0]
 800df40:	fa03 f506 	lsl.w	r5, r3, r6
 800df44:	432c      	orrs	r4, r5
 800df46:	40d3      	lsrs	r3, r2
 800df48:	6004      	str	r4, [r0, #0]
 800df4a:	f840 3f04 	str.w	r3, [r0, #4]!
 800df4e:	4288      	cmp	r0, r1
 800df50:	d3f4      	bcc.n	800df3c <L_shift+0xc>
 800df52:	bd70      	pop	{r4, r5, r6, pc}

0800df54 <__match>:
 800df54:	b530      	push	{r4, r5, lr}
 800df56:	6803      	ldr	r3, [r0, #0]
 800df58:	3301      	adds	r3, #1
 800df5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df5e:	b914      	cbnz	r4, 800df66 <__match+0x12>
 800df60:	6003      	str	r3, [r0, #0]
 800df62:	2001      	movs	r0, #1
 800df64:	bd30      	pop	{r4, r5, pc}
 800df66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df6a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800df6e:	2d19      	cmp	r5, #25
 800df70:	bf98      	it	ls
 800df72:	3220      	addls	r2, #32
 800df74:	42a2      	cmp	r2, r4
 800df76:	d0f0      	beq.n	800df5a <__match+0x6>
 800df78:	2000      	movs	r0, #0
 800df7a:	e7f3      	b.n	800df64 <__match+0x10>

0800df7c <__hexnan>:
 800df7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df80:	680b      	ldr	r3, [r1, #0]
 800df82:	6801      	ldr	r1, [r0, #0]
 800df84:	115e      	asrs	r6, r3, #5
 800df86:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df8a:	f013 031f 	ands.w	r3, r3, #31
 800df8e:	b087      	sub	sp, #28
 800df90:	bf18      	it	ne
 800df92:	3604      	addne	r6, #4
 800df94:	2500      	movs	r5, #0
 800df96:	1f37      	subs	r7, r6, #4
 800df98:	4682      	mov	sl, r0
 800df9a:	4690      	mov	r8, r2
 800df9c:	9301      	str	r3, [sp, #4]
 800df9e:	f846 5c04 	str.w	r5, [r6, #-4]
 800dfa2:	46b9      	mov	r9, r7
 800dfa4:	463c      	mov	r4, r7
 800dfa6:	9502      	str	r5, [sp, #8]
 800dfa8:	46ab      	mov	fp, r5
 800dfaa:	784a      	ldrb	r2, [r1, #1]
 800dfac:	1c4b      	adds	r3, r1, #1
 800dfae:	9303      	str	r3, [sp, #12]
 800dfb0:	b342      	cbz	r2, 800e004 <__hexnan+0x88>
 800dfb2:	4610      	mov	r0, r2
 800dfb4:	9105      	str	r1, [sp, #20]
 800dfb6:	9204      	str	r2, [sp, #16]
 800dfb8:	f7ff fd76 	bl	800daa8 <__hexdig_fun>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d14f      	bne.n	800e060 <__hexnan+0xe4>
 800dfc0:	9a04      	ldr	r2, [sp, #16]
 800dfc2:	9905      	ldr	r1, [sp, #20]
 800dfc4:	2a20      	cmp	r2, #32
 800dfc6:	d818      	bhi.n	800dffa <__hexnan+0x7e>
 800dfc8:	9b02      	ldr	r3, [sp, #8]
 800dfca:	459b      	cmp	fp, r3
 800dfcc:	dd13      	ble.n	800dff6 <__hexnan+0x7a>
 800dfce:	454c      	cmp	r4, r9
 800dfd0:	d206      	bcs.n	800dfe0 <__hexnan+0x64>
 800dfd2:	2d07      	cmp	r5, #7
 800dfd4:	dc04      	bgt.n	800dfe0 <__hexnan+0x64>
 800dfd6:	462a      	mov	r2, r5
 800dfd8:	4649      	mov	r1, r9
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f7ff ffa8 	bl	800df30 <L_shift>
 800dfe0:	4544      	cmp	r4, r8
 800dfe2:	d950      	bls.n	800e086 <__hexnan+0x10a>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	f1a4 0904 	sub.w	r9, r4, #4
 800dfea:	f844 3c04 	str.w	r3, [r4, #-4]
 800dfee:	f8cd b008 	str.w	fp, [sp, #8]
 800dff2:	464c      	mov	r4, r9
 800dff4:	461d      	mov	r5, r3
 800dff6:	9903      	ldr	r1, [sp, #12]
 800dff8:	e7d7      	b.n	800dfaa <__hexnan+0x2e>
 800dffa:	2a29      	cmp	r2, #41	; 0x29
 800dffc:	d155      	bne.n	800e0aa <__hexnan+0x12e>
 800dffe:	3102      	adds	r1, #2
 800e000:	f8ca 1000 	str.w	r1, [sl]
 800e004:	f1bb 0f00 	cmp.w	fp, #0
 800e008:	d04f      	beq.n	800e0aa <__hexnan+0x12e>
 800e00a:	454c      	cmp	r4, r9
 800e00c:	d206      	bcs.n	800e01c <__hexnan+0xa0>
 800e00e:	2d07      	cmp	r5, #7
 800e010:	dc04      	bgt.n	800e01c <__hexnan+0xa0>
 800e012:	462a      	mov	r2, r5
 800e014:	4649      	mov	r1, r9
 800e016:	4620      	mov	r0, r4
 800e018:	f7ff ff8a 	bl	800df30 <L_shift>
 800e01c:	4544      	cmp	r4, r8
 800e01e:	d934      	bls.n	800e08a <__hexnan+0x10e>
 800e020:	f1a8 0204 	sub.w	r2, r8, #4
 800e024:	4623      	mov	r3, r4
 800e026:	f853 1b04 	ldr.w	r1, [r3], #4
 800e02a:	f842 1f04 	str.w	r1, [r2, #4]!
 800e02e:	429f      	cmp	r7, r3
 800e030:	d2f9      	bcs.n	800e026 <__hexnan+0xaa>
 800e032:	1b3b      	subs	r3, r7, r4
 800e034:	f023 0303 	bic.w	r3, r3, #3
 800e038:	3304      	adds	r3, #4
 800e03a:	3e03      	subs	r6, #3
 800e03c:	3401      	adds	r4, #1
 800e03e:	42a6      	cmp	r6, r4
 800e040:	bf38      	it	cc
 800e042:	2304      	movcc	r3, #4
 800e044:	4443      	add	r3, r8
 800e046:	2200      	movs	r2, #0
 800e048:	f843 2b04 	str.w	r2, [r3], #4
 800e04c:	429f      	cmp	r7, r3
 800e04e:	d2fb      	bcs.n	800e048 <__hexnan+0xcc>
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	b91b      	cbnz	r3, 800e05c <__hexnan+0xe0>
 800e054:	4547      	cmp	r7, r8
 800e056:	d126      	bne.n	800e0a6 <__hexnan+0x12a>
 800e058:	2301      	movs	r3, #1
 800e05a:	603b      	str	r3, [r7, #0]
 800e05c:	2005      	movs	r0, #5
 800e05e:	e025      	b.n	800e0ac <__hexnan+0x130>
 800e060:	3501      	adds	r5, #1
 800e062:	2d08      	cmp	r5, #8
 800e064:	f10b 0b01 	add.w	fp, fp, #1
 800e068:	dd06      	ble.n	800e078 <__hexnan+0xfc>
 800e06a:	4544      	cmp	r4, r8
 800e06c:	d9c3      	bls.n	800dff6 <__hexnan+0x7a>
 800e06e:	2300      	movs	r3, #0
 800e070:	f844 3c04 	str.w	r3, [r4, #-4]
 800e074:	2501      	movs	r5, #1
 800e076:	3c04      	subs	r4, #4
 800e078:	6822      	ldr	r2, [r4, #0]
 800e07a:	f000 000f 	and.w	r0, r0, #15
 800e07e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e082:	6020      	str	r0, [r4, #0]
 800e084:	e7b7      	b.n	800dff6 <__hexnan+0x7a>
 800e086:	2508      	movs	r5, #8
 800e088:	e7b5      	b.n	800dff6 <__hexnan+0x7a>
 800e08a:	9b01      	ldr	r3, [sp, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d0df      	beq.n	800e050 <__hexnan+0xd4>
 800e090:	f1c3 0320 	rsb	r3, r3, #32
 800e094:	f04f 32ff 	mov.w	r2, #4294967295
 800e098:	40da      	lsrs	r2, r3
 800e09a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e09e:	4013      	ands	r3, r2
 800e0a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e0a4:	e7d4      	b.n	800e050 <__hexnan+0xd4>
 800e0a6:	3f04      	subs	r7, #4
 800e0a8:	e7d2      	b.n	800e050 <__hexnan+0xd4>
 800e0aa:	2004      	movs	r0, #4
 800e0ac:	b007      	add	sp, #28
 800e0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e0b4 <sbrk_aligned>:
 800e0b4:	b570      	push	{r4, r5, r6, lr}
 800e0b6:	4e0e      	ldr	r6, [pc, #56]	; (800e0f0 <sbrk_aligned+0x3c>)
 800e0b8:	460c      	mov	r4, r1
 800e0ba:	6831      	ldr	r1, [r6, #0]
 800e0bc:	4605      	mov	r5, r0
 800e0be:	b911      	cbnz	r1, 800e0c6 <sbrk_aligned+0x12>
 800e0c0:	f000 fe1e 	bl	800ed00 <_sbrk_r>
 800e0c4:	6030      	str	r0, [r6, #0]
 800e0c6:	4621      	mov	r1, r4
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	f000 fe19 	bl	800ed00 <_sbrk_r>
 800e0ce:	1c43      	adds	r3, r0, #1
 800e0d0:	d00a      	beq.n	800e0e8 <sbrk_aligned+0x34>
 800e0d2:	1cc4      	adds	r4, r0, #3
 800e0d4:	f024 0403 	bic.w	r4, r4, #3
 800e0d8:	42a0      	cmp	r0, r4
 800e0da:	d007      	beq.n	800e0ec <sbrk_aligned+0x38>
 800e0dc:	1a21      	subs	r1, r4, r0
 800e0de:	4628      	mov	r0, r5
 800e0e0:	f000 fe0e 	bl	800ed00 <_sbrk_r>
 800e0e4:	3001      	adds	r0, #1
 800e0e6:	d101      	bne.n	800e0ec <sbrk_aligned+0x38>
 800e0e8:	f04f 34ff 	mov.w	r4, #4294967295
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}
 800e0f0:	200009f4 	.word	0x200009f4

0800e0f4 <_malloc_r>:
 800e0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0f8:	1ccd      	adds	r5, r1, #3
 800e0fa:	f025 0503 	bic.w	r5, r5, #3
 800e0fe:	3508      	adds	r5, #8
 800e100:	2d0c      	cmp	r5, #12
 800e102:	bf38      	it	cc
 800e104:	250c      	movcc	r5, #12
 800e106:	2d00      	cmp	r5, #0
 800e108:	4607      	mov	r7, r0
 800e10a:	db01      	blt.n	800e110 <_malloc_r+0x1c>
 800e10c:	42a9      	cmp	r1, r5
 800e10e:	d905      	bls.n	800e11c <_malloc_r+0x28>
 800e110:	230c      	movs	r3, #12
 800e112:	603b      	str	r3, [r7, #0]
 800e114:	2600      	movs	r6, #0
 800e116:	4630      	mov	r0, r6
 800e118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e11c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e1f0 <_malloc_r+0xfc>
 800e120:	f000 f87a 	bl	800e218 <__malloc_lock>
 800e124:	f8d8 3000 	ldr.w	r3, [r8]
 800e128:	461c      	mov	r4, r3
 800e12a:	bb5c      	cbnz	r4, 800e184 <_malloc_r+0x90>
 800e12c:	4629      	mov	r1, r5
 800e12e:	4638      	mov	r0, r7
 800e130:	f7ff ffc0 	bl	800e0b4 <sbrk_aligned>
 800e134:	1c43      	adds	r3, r0, #1
 800e136:	4604      	mov	r4, r0
 800e138:	d155      	bne.n	800e1e6 <_malloc_r+0xf2>
 800e13a:	f8d8 4000 	ldr.w	r4, [r8]
 800e13e:	4626      	mov	r6, r4
 800e140:	2e00      	cmp	r6, #0
 800e142:	d145      	bne.n	800e1d0 <_malloc_r+0xdc>
 800e144:	2c00      	cmp	r4, #0
 800e146:	d048      	beq.n	800e1da <_malloc_r+0xe6>
 800e148:	6823      	ldr	r3, [r4, #0]
 800e14a:	4631      	mov	r1, r6
 800e14c:	4638      	mov	r0, r7
 800e14e:	eb04 0903 	add.w	r9, r4, r3
 800e152:	f000 fdd5 	bl	800ed00 <_sbrk_r>
 800e156:	4581      	cmp	r9, r0
 800e158:	d13f      	bne.n	800e1da <_malloc_r+0xe6>
 800e15a:	6821      	ldr	r1, [r4, #0]
 800e15c:	1a6d      	subs	r5, r5, r1
 800e15e:	4629      	mov	r1, r5
 800e160:	4638      	mov	r0, r7
 800e162:	f7ff ffa7 	bl	800e0b4 <sbrk_aligned>
 800e166:	3001      	adds	r0, #1
 800e168:	d037      	beq.n	800e1da <_malloc_r+0xe6>
 800e16a:	6823      	ldr	r3, [r4, #0]
 800e16c:	442b      	add	r3, r5
 800e16e:	6023      	str	r3, [r4, #0]
 800e170:	f8d8 3000 	ldr.w	r3, [r8]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d038      	beq.n	800e1ea <_malloc_r+0xf6>
 800e178:	685a      	ldr	r2, [r3, #4]
 800e17a:	42a2      	cmp	r2, r4
 800e17c:	d12b      	bne.n	800e1d6 <_malloc_r+0xe2>
 800e17e:	2200      	movs	r2, #0
 800e180:	605a      	str	r2, [r3, #4]
 800e182:	e00f      	b.n	800e1a4 <_malloc_r+0xb0>
 800e184:	6822      	ldr	r2, [r4, #0]
 800e186:	1b52      	subs	r2, r2, r5
 800e188:	d41f      	bmi.n	800e1ca <_malloc_r+0xd6>
 800e18a:	2a0b      	cmp	r2, #11
 800e18c:	d917      	bls.n	800e1be <_malloc_r+0xca>
 800e18e:	1961      	adds	r1, r4, r5
 800e190:	42a3      	cmp	r3, r4
 800e192:	6025      	str	r5, [r4, #0]
 800e194:	bf18      	it	ne
 800e196:	6059      	strne	r1, [r3, #4]
 800e198:	6863      	ldr	r3, [r4, #4]
 800e19a:	bf08      	it	eq
 800e19c:	f8c8 1000 	streq.w	r1, [r8]
 800e1a0:	5162      	str	r2, [r4, r5]
 800e1a2:	604b      	str	r3, [r1, #4]
 800e1a4:	4638      	mov	r0, r7
 800e1a6:	f104 060b 	add.w	r6, r4, #11
 800e1aa:	f000 f83b 	bl	800e224 <__malloc_unlock>
 800e1ae:	f026 0607 	bic.w	r6, r6, #7
 800e1b2:	1d23      	adds	r3, r4, #4
 800e1b4:	1af2      	subs	r2, r6, r3
 800e1b6:	d0ae      	beq.n	800e116 <_malloc_r+0x22>
 800e1b8:	1b9b      	subs	r3, r3, r6
 800e1ba:	50a3      	str	r3, [r4, r2]
 800e1bc:	e7ab      	b.n	800e116 <_malloc_r+0x22>
 800e1be:	42a3      	cmp	r3, r4
 800e1c0:	6862      	ldr	r2, [r4, #4]
 800e1c2:	d1dd      	bne.n	800e180 <_malloc_r+0x8c>
 800e1c4:	f8c8 2000 	str.w	r2, [r8]
 800e1c8:	e7ec      	b.n	800e1a4 <_malloc_r+0xb0>
 800e1ca:	4623      	mov	r3, r4
 800e1cc:	6864      	ldr	r4, [r4, #4]
 800e1ce:	e7ac      	b.n	800e12a <_malloc_r+0x36>
 800e1d0:	4634      	mov	r4, r6
 800e1d2:	6876      	ldr	r6, [r6, #4]
 800e1d4:	e7b4      	b.n	800e140 <_malloc_r+0x4c>
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	e7cc      	b.n	800e174 <_malloc_r+0x80>
 800e1da:	230c      	movs	r3, #12
 800e1dc:	603b      	str	r3, [r7, #0]
 800e1de:	4638      	mov	r0, r7
 800e1e0:	f000 f820 	bl	800e224 <__malloc_unlock>
 800e1e4:	e797      	b.n	800e116 <_malloc_r+0x22>
 800e1e6:	6025      	str	r5, [r4, #0]
 800e1e8:	e7dc      	b.n	800e1a4 <_malloc_r+0xb0>
 800e1ea:	605b      	str	r3, [r3, #4]
 800e1ec:	deff      	udf	#255	; 0xff
 800e1ee:	bf00      	nop
 800e1f0:	200009f0 	.word	0x200009f0

0800e1f4 <__ascii_mbtowc>:
 800e1f4:	b082      	sub	sp, #8
 800e1f6:	b901      	cbnz	r1, 800e1fa <__ascii_mbtowc+0x6>
 800e1f8:	a901      	add	r1, sp, #4
 800e1fa:	b142      	cbz	r2, 800e20e <__ascii_mbtowc+0x1a>
 800e1fc:	b14b      	cbz	r3, 800e212 <__ascii_mbtowc+0x1e>
 800e1fe:	7813      	ldrb	r3, [r2, #0]
 800e200:	600b      	str	r3, [r1, #0]
 800e202:	7812      	ldrb	r2, [r2, #0]
 800e204:	1e10      	subs	r0, r2, #0
 800e206:	bf18      	it	ne
 800e208:	2001      	movne	r0, #1
 800e20a:	b002      	add	sp, #8
 800e20c:	4770      	bx	lr
 800e20e:	4610      	mov	r0, r2
 800e210:	e7fb      	b.n	800e20a <__ascii_mbtowc+0x16>
 800e212:	f06f 0001 	mvn.w	r0, #1
 800e216:	e7f8      	b.n	800e20a <__ascii_mbtowc+0x16>

0800e218 <__malloc_lock>:
 800e218:	4801      	ldr	r0, [pc, #4]	; (800e220 <__malloc_lock+0x8>)
 800e21a:	f7ff bb96 	b.w	800d94a <__retarget_lock_acquire_recursive>
 800e21e:	bf00      	nop
 800e220:	200009ec 	.word	0x200009ec

0800e224 <__malloc_unlock>:
 800e224:	4801      	ldr	r0, [pc, #4]	; (800e22c <__malloc_unlock+0x8>)
 800e226:	f7ff bb91 	b.w	800d94c <__retarget_lock_release_recursive>
 800e22a:	bf00      	nop
 800e22c:	200009ec 	.word	0x200009ec

0800e230 <_Balloc>:
 800e230:	b570      	push	{r4, r5, r6, lr}
 800e232:	69c6      	ldr	r6, [r0, #28]
 800e234:	4604      	mov	r4, r0
 800e236:	460d      	mov	r5, r1
 800e238:	b976      	cbnz	r6, 800e258 <_Balloc+0x28>
 800e23a:	2010      	movs	r0, #16
 800e23c:	f000 fda4 	bl	800ed88 <malloc>
 800e240:	4602      	mov	r2, r0
 800e242:	61e0      	str	r0, [r4, #28]
 800e244:	b920      	cbnz	r0, 800e250 <_Balloc+0x20>
 800e246:	4b18      	ldr	r3, [pc, #96]	; (800e2a8 <_Balloc+0x78>)
 800e248:	4818      	ldr	r0, [pc, #96]	; (800e2ac <_Balloc+0x7c>)
 800e24a:	216b      	movs	r1, #107	; 0x6b
 800e24c:	f000 fd68 	bl	800ed20 <__assert_func>
 800e250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e254:	6006      	str	r6, [r0, #0]
 800e256:	60c6      	str	r6, [r0, #12]
 800e258:	69e6      	ldr	r6, [r4, #28]
 800e25a:	68f3      	ldr	r3, [r6, #12]
 800e25c:	b183      	cbz	r3, 800e280 <_Balloc+0x50>
 800e25e:	69e3      	ldr	r3, [r4, #28]
 800e260:	68db      	ldr	r3, [r3, #12]
 800e262:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e266:	b9b8      	cbnz	r0, 800e298 <_Balloc+0x68>
 800e268:	2101      	movs	r1, #1
 800e26a:	fa01 f605 	lsl.w	r6, r1, r5
 800e26e:	1d72      	adds	r2, r6, #5
 800e270:	0092      	lsls	r2, r2, #2
 800e272:	4620      	mov	r0, r4
 800e274:	f000 fd72 	bl	800ed5c <_calloc_r>
 800e278:	b160      	cbz	r0, 800e294 <_Balloc+0x64>
 800e27a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e27e:	e00e      	b.n	800e29e <_Balloc+0x6e>
 800e280:	2221      	movs	r2, #33	; 0x21
 800e282:	2104      	movs	r1, #4
 800e284:	4620      	mov	r0, r4
 800e286:	f000 fd69 	bl	800ed5c <_calloc_r>
 800e28a:	69e3      	ldr	r3, [r4, #28]
 800e28c:	60f0      	str	r0, [r6, #12]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d1e4      	bne.n	800e25e <_Balloc+0x2e>
 800e294:	2000      	movs	r0, #0
 800e296:	bd70      	pop	{r4, r5, r6, pc}
 800e298:	6802      	ldr	r2, [r0, #0]
 800e29a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e29e:	2300      	movs	r3, #0
 800e2a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e2a4:	e7f7      	b.n	800e296 <_Balloc+0x66>
 800e2a6:	bf00      	nop
 800e2a8:	0800fa09 	.word	0x0800fa09
 800e2ac:	0800fa20 	.word	0x0800fa20

0800e2b0 <_Bfree>:
 800e2b0:	b570      	push	{r4, r5, r6, lr}
 800e2b2:	69c6      	ldr	r6, [r0, #28]
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	b976      	cbnz	r6, 800e2d8 <_Bfree+0x28>
 800e2ba:	2010      	movs	r0, #16
 800e2bc:	f000 fd64 	bl	800ed88 <malloc>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	61e8      	str	r0, [r5, #28]
 800e2c4:	b920      	cbnz	r0, 800e2d0 <_Bfree+0x20>
 800e2c6:	4b09      	ldr	r3, [pc, #36]	; (800e2ec <_Bfree+0x3c>)
 800e2c8:	4809      	ldr	r0, [pc, #36]	; (800e2f0 <_Bfree+0x40>)
 800e2ca:	218f      	movs	r1, #143	; 0x8f
 800e2cc:	f000 fd28 	bl	800ed20 <__assert_func>
 800e2d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2d4:	6006      	str	r6, [r0, #0]
 800e2d6:	60c6      	str	r6, [r0, #12]
 800e2d8:	b13c      	cbz	r4, 800e2ea <_Bfree+0x3a>
 800e2da:	69eb      	ldr	r3, [r5, #28]
 800e2dc:	6862      	ldr	r2, [r4, #4]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2e4:	6021      	str	r1, [r4, #0]
 800e2e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e2ea:	bd70      	pop	{r4, r5, r6, pc}
 800e2ec:	0800fa09 	.word	0x0800fa09
 800e2f0:	0800fa20 	.word	0x0800fa20

0800e2f4 <__multadd>:
 800e2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f8:	690d      	ldr	r5, [r1, #16]
 800e2fa:	4607      	mov	r7, r0
 800e2fc:	460c      	mov	r4, r1
 800e2fe:	461e      	mov	r6, r3
 800e300:	f101 0c14 	add.w	ip, r1, #20
 800e304:	2000      	movs	r0, #0
 800e306:	f8dc 3000 	ldr.w	r3, [ip]
 800e30a:	b299      	uxth	r1, r3
 800e30c:	fb02 6101 	mla	r1, r2, r1, r6
 800e310:	0c1e      	lsrs	r6, r3, #16
 800e312:	0c0b      	lsrs	r3, r1, #16
 800e314:	fb02 3306 	mla	r3, r2, r6, r3
 800e318:	b289      	uxth	r1, r1
 800e31a:	3001      	adds	r0, #1
 800e31c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e320:	4285      	cmp	r5, r0
 800e322:	f84c 1b04 	str.w	r1, [ip], #4
 800e326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e32a:	dcec      	bgt.n	800e306 <__multadd+0x12>
 800e32c:	b30e      	cbz	r6, 800e372 <__multadd+0x7e>
 800e32e:	68a3      	ldr	r3, [r4, #8]
 800e330:	42ab      	cmp	r3, r5
 800e332:	dc19      	bgt.n	800e368 <__multadd+0x74>
 800e334:	6861      	ldr	r1, [r4, #4]
 800e336:	4638      	mov	r0, r7
 800e338:	3101      	adds	r1, #1
 800e33a:	f7ff ff79 	bl	800e230 <_Balloc>
 800e33e:	4680      	mov	r8, r0
 800e340:	b928      	cbnz	r0, 800e34e <__multadd+0x5a>
 800e342:	4602      	mov	r2, r0
 800e344:	4b0c      	ldr	r3, [pc, #48]	; (800e378 <__multadd+0x84>)
 800e346:	480d      	ldr	r0, [pc, #52]	; (800e37c <__multadd+0x88>)
 800e348:	21ba      	movs	r1, #186	; 0xba
 800e34a:	f000 fce9 	bl	800ed20 <__assert_func>
 800e34e:	6922      	ldr	r2, [r4, #16]
 800e350:	3202      	adds	r2, #2
 800e352:	f104 010c 	add.w	r1, r4, #12
 800e356:	0092      	lsls	r2, r2, #2
 800e358:	300c      	adds	r0, #12
 800e35a:	f7ff faf8 	bl	800d94e <memcpy>
 800e35e:	4621      	mov	r1, r4
 800e360:	4638      	mov	r0, r7
 800e362:	f7ff ffa5 	bl	800e2b0 <_Bfree>
 800e366:	4644      	mov	r4, r8
 800e368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e36c:	3501      	adds	r5, #1
 800e36e:	615e      	str	r6, [r3, #20]
 800e370:	6125      	str	r5, [r4, #16]
 800e372:	4620      	mov	r0, r4
 800e374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e378:	0800f998 	.word	0x0800f998
 800e37c:	0800fa20 	.word	0x0800fa20

0800e380 <__s2b>:
 800e380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e384:	460c      	mov	r4, r1
 800e386:	4615      	mov	r5, r2
 800e388:	461f      	mov	r7, r3
 800e38a:	2209      	movs	r2, #9
 800e38c:	3308      	adds	r3, #8
 800e38e:	4606      	mov	r6, r0
 800e390:	fb93 f3f2 	sdiv	r3, r3, r2
 800e394:	2100      	movs	r1, #0
 800e396:	2201      	movs	r2, #1
 800e398:	429a      	cmp	r2, r3
 800e39a:	db09      	blt.n	800e3b0 <__s2b+0x30>
 800e39c:	4630      	mov	r0, r6
 800e39e:	f7ff ff47 	bl	800e230 <_Balloc>
 800e3a2:	b940      	cbnz	r0, 800e3b6 <__s2b+0x36>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	4b19      	ldr	r3, [pc, #100]	; (800e40c <__s2b+0x8c>)
 800e3a8:	4819      	ldr	r0, [pc, #100]	; (800e410 <__s2b+0x90>)
 800e3aa:	21d3      	movs	r1, #211	; 0xd3
 800e3ac:	f000 fcb8 	bl	800ed20 <__assert_func>
 800e3b0:	0052      	lsls	r2, r2, #1
 800e3b2:	3101      	adds	r1, #1
 800e3b4:	e7f0      	b.n	800e398 <__s2b+0x18>
 800e3b6:	9b08      	ldr	r3, [sp, #32]
 800e3b8:	6143      	str	r3, [r0, #20]
 800e3ba:	2d09      	cmp	r5, #9
 800e3bc:	f04f 0301 	mov.w	r3, #1
 800e3c0:	6103      	str	r3, [r0, #16]
 800e3c2:	dd16      	ble.n	800e3f2 <__s2b+0x72>
 800e3c4:	f104 0909 	add.w	r9, r4, #9
 800e3c8:	46c8      	mov	r8, r9
 800e3ca:	442c      	add	r4, r5
 800e3cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e3d0:	4601      	mov	r1, r0
 800e3d2:	3b30      	subs	r3, #48	; 0x30
 800e3d4:	220a      	movs	r2, #10
 800e3d6:	4630      	mov	r0, r6
 800e3d8:	f7ff ff8c 	bl	800e2f4 <__multadd>
 800e3dc:	45a0      	cmp	r8, r4
 800e3de:	d1f5      	bne.n	800e3cc <__s2b+0x4c>
 800e3e0:	f1a5 0408 	sub.w	r4, r5, #8
 800e3e4:	444c      	add	r4, r9
 800e3e6:	1b2d      	subs	r5, r5, r4
 800e3e8:	1963      	adds	r3, r4, r5
 800e3ea:	42bb      	cmp	r3, r7
 800e3ec:	db04      	blt.n	800e3f8 <__s2b+0x78>
 800e3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3f2:	340a      	adds	r4, #10
 800e3f4:	2509      	movs	r5, #9
 800e3f6:	e7f6      	b.n	800e3e6 <__s2b+0x66>
 800e3f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e3fc:	4601      	mov	r1, r0
 800e3fe:	3b30      	subs	r3, #48	; 0x30
 800e400:	220a      	movs	r2, #10
 800e402:	4630      	mov	r0, r6
 800e404:	f7ff ff76 	bl	800e2f4 <__multadd>
 800e408:	e7ee      	b.n	800e3e8 <__s2b+0x68>
 800e40a:	bf00      	nop
 800e40c:	0800f998 	.word	0x0800f998
 800e410:	0800fa20 	.word	0x0800fa20

0800e414 <__hi0bits>:
 800e414:	0c03      	lsrs	r3, r0, #16
 800e416:	041b      	lsls	r3, r3, #16
 800e418:	b9d3      	cbnz	r3, 800e450 <__hi0bits+0x3c>
 800e41a:	0400      	lsls	r0, r0, #16
 800e41c:	2310      	movs	r3, #16
 800e41e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e422:	bf04      	itt	eq
 800e424:	0200      	lsleq	r0, r0, #8
 800e426:	3308      	addeq	r3, #8
 800e428:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e42c:	bf04      	itt	eq
 800e42e:	0100      	lsleq	r0, r0, #4
 800e430:	3304      	addeq	r3, #4
 800e432:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e436:	bf04      	itt	eq
 800e438:	0080      	lsleq	r0, r0, #2
 800e43a:	3302      	addeq	r3, #2
 800e43c:	2800      	cmp	r0, #0
 800e43e:	db05      	blt.n	800e44c <__hi0bits+0x38>
 800e440:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e444:	f103 0301 	add.w	r3, r3, #1
 800e448:	bf08      	it	eq
 800e44a:	2320      	moveq	r3, #32
 800e44c:	4618      	mov	r0, r3
 800e44e:	4770      	bx	lr
 800e450:	2300      	movs	r3, #0
 800e452:	e7e4      	b.n	800e41e <__hi0bits+0xa>

0800e454 <__lo0bits>:
 800e454:	6803      	ldr	r3, [r0, #0]
 800e456:	f013 0207 	ands.w	r2, r3, #7
 800e45a:	d00c      	beq.n	800e476 <__lo0bits+0x22>
 800e45c:	07d9      	lsls	r1, r3, #31
 800e45e:	d422      	bmi.n	800e4a6 <__lo0bits+0x52>
 800e460:	079a      	lsls	r2, r3, #30
 800e462:	bf49      	itett	mi
 800e464:	085b      	lsrmi	r3, r3, #1
 800e466:	089b      	lsrpl	r3, r3, #2
 800e468:	6003      	strmi	r3, [r0, #0]
 800e46a:	2201      	movmi	r2, #1
 800e46c:	bf5c      	itt	pl
 800e46e:	6003      	strpl	r3, [r0, #0]
 800e470:	2202      	movpl	r2, #2
 800e472:	4610      	mov	r0, r2
 800e474:	4770      	bx	lr
 800e476:	b299      	uxth	r1, r3
 800e478:	b909      	cbnz	r1, 800e47e <__lo0bits+0x2a>
 800e47a:	0c1b      	lsrs	r3, r3, #16
 800e47c:	2210      	movs	r2, #16
 800e47e:	b2d9      	uxtb	r1, r3
 800e480:	b909      	cbnz	r1, 800e486 <__lo0bits+0x32>
 800e482:	3208      	adds	r2, #8
 800e484:	0a1b      	lsrs	r3, r3, #8
 800e486:	0719      	lsls	r1, r3, #28
 800e488:	bf04      	itt	eq
 800e48a:	091b      	lsreq	r3, r3, #4
 800e48c:	3204      	addeq	r2, #4
 800e48e:	0799      	lsls	r1, r3, #30
 800e490:	bf04      	itt	eq
 800e492:	089b      	lsreq	r3, r3, #2
 800e494:	3202      	addeq	r2, #2
 800e496:	07d9      	lsls	r1, r3, #31
 800e498:	d403      	bmi.n	800e4a2 <__lo0bits+0x4e>
 800e49a:	085b      	lsrs	r3, r3, #1
 800e49c:	f102 0201 	add.w	r2, r2, #1
 800e4a0:	d003      	beq.n	800e4aa <__lo0bits+0x56>
 800e4a2:	6003      	str	r3, [r0, #0]
 800e4a4:	e7e5      	b.n	800e472 <__lo0bits+0x1e>
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	e7e3      	b.n	800e472 <__lo0bits+0x1e>
 800e4aa:	2220      	movs	r2, #32
 800e4ac:	e7e1      	b.n	800e472 <__lo0bits+0x1e>
	...

0800e4b0 <__i2b>:
 800e4b0:	b510      	push	{r4, lr}
 800e4b2:	460c      	mov	r4, r1
 800e4b4:	2101      	movs	r1, #1
 800e4b6:	f7ff febb 	bl	800e230 <_Balloc>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	b928      	cbnz	r0, 800e4ca <__i2b+0x1a>
 800e4be:	4b05      	ldr	r3, [pc, #20]	; (800e4d4 <__i2b+0x24>)
 800e4c0:	4805      	ldr	r0, [pc, #20]	; (800e4d8 <__i2b+0x28>)
 800e4c2:	f240 1145 	movw	r1, #325	; 0x145
 800e4c6:	f000 fc2b 	bl	800ed20 <__assert_func>
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	6144      	str	r4, [r0, #20]
 800e4ce:	6103      	str	r3, [r0, #16]
 800e4d0:	bd10      	pop	{r4, pc}
 800e4d2:	bf00      	nop
 800e4d4:	0800f998 	.word	0x0800f998
 800e4d8:	0800fa20 	.word	0x0800fa20

0800e4dc <__multiply>:
 800e4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e0:	4691      	mov	r9, r2
 800e4e2:	690a      	ldr	r2, [r1, #16]
 800e4e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	bfb8      	it	lt
 800e4ec:	460b      	movlt	r3, r1
 800e4ee:	460c      	mov	r4, r1
 800e4f0:	bfbc      	itt	lt
 800e4f2:	464c      	movlt	r4, r9
 800e4f4:	4699      	movlt	r9, r3
 800e4f6:	6927      	ldr	r7, [r4, #16]
 800e4f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e4fc:	68a3      	ldr	r3, [r4, #8]
 800e4fe:	6861      	ldr	r1, [r4, #4]
 800e500:	eb07 060a 	add.w	r6, r7, sl
 800e504:	42b3      	cmp	r3, r6
 800e506:	b085      	sub	sp, #20
 800e508:	bfb8      	it	lt
 800e50a:	3101      	addlt	r1, #1
 800e50c:	f7ff fe90 	bl	800e230 <_Balloc>
 800e510:	b930      	cbnz	r0, 800e520 <__multiply+0x44>
 800e512:	4602      	mov	r2, r0
 800e514:	4b44      	ldr	r3, [pc, #272]	; (800e628 <__multiply+0x14c>)
 800e516:	4845      	ldr	r0, [pc, #276]	; (800e62c <__multiply+0x150>)
 800e518:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e51c:	f000 fc00 	bl	800ed20 <__assert_func>
 800e520:	f100 0514 	add.w	r5, r0, #20
 800e524:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e528:	462b      	mov	r3, r5
 800e52a:	2200      	movs	r2, #0
 800e52c:	4543      	cmp	r3, r8
 800e52e:	d321      	bcc.n	800e574 <__multiply+0x98>
 800e530:	f104 0314 	add.w	r3, r4, #20
 800e534:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e538:	f109 0314 	add.w	r3, r9, #20
 800e53c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e540:	9202      	str	r2, [sp, #8]
 800e542:	1b3a      	subs	r2, r7, r4
 800e544:	3a15      	subs	r2, #21
 800e546:	f022 0203 	bic.w	r2, r2, #3
 800e54a:	3204      	adds	r2, #4
 800e54c:	f104 0115 	add.w	r1, r4, #21
 800e550:	428f      	cmp	r7, r1
 800e552:	bf38      	it	cc
 800e554:	2204      	movcc	r2, #4
 800e556:	9201      	str	r2, [sp, #4]
 800e558:	9a02      	ldr	r2, [sp, #8]
 800e55a:	9303      	str	r3, [sp, #12]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d80c      	bhi.n	800e57a <__multiply+0x9e>
 800e560:	2e00      	cmp	r6, #0
 800e562:	dd03      	ble.n	800e56c <__multiply+0x90>
 800e564:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d05b      	beq.n	800e624 <__multiply+0x148>
 800e56c:	6106      	str	r6, [r0, #16]
 800e56e:	b005      	add	sp, #20
 800e570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e574:	f843 2b04 	str.w	r2, [r3], #4
 800e578:	e7d8      	b.n	800e52c <__multiply+0x50>
 800e57a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e57e:	f1ba 0f00 	cmp.w	sl, #0
 800e582:	d024      	beq.n	800e5ce <__multiply+0xf2>
 800e584:	f104 0e14 	add.w	lr, r4, #20
 800e588:	46a9      	mov	r9, r5
 800e58a:	f04f 0c00 	mov.w	ip, #0
 800e58e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e592:	f8d9 1000 	ldr.w	r1, [r9]
 800e596:	fa1f fb82 	uxth.w	fp, r2
 800e59a:	b289      	uxth	r1, r1
 800e59c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e5a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e5a4:	f8d9 2000 	ldr.w	r2, [r9]
 800e5a8:	4461      	add	r1, ip
 800e5aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e5ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800e5b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e5b6:	b289      	uxth	r1, r1
 800e5b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e5bc:	4577      	cmp	r7, lr
 800e5be:	f849 1b04 	str.w	r1, [r9], #4
 800e5c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e5c6:	d8e2      	bhi.n	800e58e <__multiply+0xb2>
 800e5c8:	9a01      	ldr	r2, [sp, #4]
 800e5ca:	f845 c002 	str.w	ip, [r5, r2]
 800e5ce:	9a03      	ldr	r2, [sp, #12]
 800e5d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	f1b9 0f00 	cmp.w	r9, #0
 800e5da:	d021      	beq.n	800e620 <__multiply+0x144>
 800e5dc:	6829      	ldr	r1, [r5, #0]
 800e5de:	f104 0c14 	add.w	ip, r4, #20
 800e5e2:	46ae      	mov	lr, r5
 800e5e4:	f04f 0a00 	mov.w	sl, #0
 800e5e8:	f8bc b000 	ldrh.w	fp, [ip]
 800e5ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e5f0:	fb09 220b 	mla	r2, r9, fp, r2
 800e5f4:	4452      	add	r2, sl
 800e5f6:	b289      	uxth	r1, r1
 800e5f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e5fc:	f84e 1b04 	str.w	r1, [lr], #4
 800e600:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e604:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e608:	f8be 1000 	ldrh.w	r1, [lr]
 800e60c:	fb09 110a 	mla	r1, r9, sl, r1
 800e610:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e614:	4567      	cmp	r7, ip
 800e616:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e61a:	d8e5      	bhi.n	800e5e8 <__multiply+0x10c>
 800e61c:	9a01      	ldr	r2, [sp, #4]
 800e61e:	50a9      	str	r1, [r5, r2]
 800e620:	3504      	adds	r5, #4
 800e622:	e799      	b.n	800e558 <__multiply+0x7c>
 800e624:	3e01      	subs	r6, #1
 800e626:	e79b      	b.n	800e560 <__multiply+0x84>
 800e628:	0800f998 	.word	0x0800f998
 800e62c:	0800fa20 	.word	0x0800fa20

0800e630 <__pow5mult>:
 800e630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e634:	4615      	mov	r5, r2
 800e636:	f012 0203 	ands.w	r2, r2, #3
 800e63a:	4606      	mov	r6, r0
 800e63c:	460f      	mov	r7, r1
 800e63e:	d007      	beq.n	800e650 <__pow5mult+0x20>
 800e640:	4c25      	ldr	r4, [pc, #148]	; (800e6d8 <__pow5mult+0xa8>)
 800e642:	3a01      	subs	r2, #1
 800e644:	2300      	movs	r3, #0
 800e646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e64a:	f7ff fe53 	bl	800e2f4 <__multadd>
 800e64e:	4607      	mov	r7, r0
 800e650:	10ad      	asrs	r5, r5, #2
 800e652:	d03d      	beq.n	800e6d0 <__pow5mult+0xa0>
 800e654:	69f4      	ldr	r4, [r6, #28]
 800e656:	b97c      	cbnz	r4, 800e678 <__pow5mult+0x48>
 800e658:	2010      	movs	r0, #16
 800e65a:	f000 fb95 	bl	800ed88 <malloc>
 800e65e:	4602      	mov	r2, r0
 800e660:	61f0      	str	r0, [r6, #28]
 800e662:	b928      	cbnz	r0, 800e670 <__pow5mult+0x40>
 800e664:	4b1d      	ldr	r3, [pc, #116]	; (800e6dc <__pow5mult+0xac>)
 800e666:	481e      	ldr	r0, [pc, #120]	; (800e6e0 <__pow5mult+0xb0>)
 800e668:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e66c:	f000 fb58 	bl	800ed20 <__assert_func>
 800e670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e674:	6004      	str	r4, [r0, #0]
 800e676:	60c4      	str	r4, [r0, #12]
 800e678:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e67c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e680:	b94c      	cbnz	r4, 800e696 <__pow5mult+0x66>
 800e682:	f240 2171 	movw	r1, #625	; 0x271
 800e686:	4630      	mov	r0, r6
 800e688:	f7ff ff12 	bl	800e4b0 <__i2b>
 800e68c:	2300      	movs	r3, #0
 800e68e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e692:	4604      	mov	r4, r0
 800e694:	6003      	str	r3, [r0, #0]
 800e696:	f04f 0900 	mov.w	r9, #0
 800e69a:	07eb      	lsls	r3, r5, #31
 800e69c:	d50a      	bpl.n	800e6b4 <__pow5mult+0x84>
 800e69e:	4639      	mov	r1, r7
 800e6a0:	4622      	mov	r2, r4
 800e6a2:	4630      	mov	r0, r6
 800e6a4:	f7ff ff1a 	bl	800e4dc <__multiply>
 800e6a8:	4639      	mov	r1, r7
 800e6aa:	4680      	mov	r8, r0
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	f7ff fdff 	bl	800e2b0 <_Bfree>
 800e6b2:	4647      	mov	r7, r8
 800e6b4:	106d      	asrs	r5, r5, #1
 800e6b6:	d00b      	beq.n	800e6d0 <__pow5mult+0xa0>
 800e6b8:	6820      	ldr	r0, [r4, #0]
 800e6ba:	b938      	cbnz	r0, 800e6cc <__pow5mult+0x9c>
 800e6bc:	4622      	mov	r2, r4
 800e6be:	4621      	mov	r1, r4
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	f7ff ff0b 	bl	800e4dc <__multiply>
 800e6c6:	6020      	str	r0, [r4, #0]
 800e6c8:	f8c0 9000 	str.w	r9, [r0]
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	e7e4      	b.n	800e69a <__pow5mult+0x6a>
 800e6d0:	4638      	mov	r0, r7
 800e6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6d6:	bf00      	nop
 800e6d8:	0800fb70 	.word	0x0800fb70
 800e6dc:	0800fa09 	.word	0x0800fa09
 800e6e0:	0800fa20 	.word	0x0800fa20

0800e6e4 <__lshift>:
 800e6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e8:	460c      	mov	r4, r1
 800e6ea:	6849      	ldr	r1, [r1, #4]
 800e6ec:	6923      	ldr	r3, [r4, #16]
 800e6ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6f2:	68a3      	ldr	r3, [r4, #8]
 800e6f4:	4607      	mov	r7, r0
 800e6f6:	4691      	mov	r9, r2
 800e6f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6fc:	f108 0601 	add.w	r6, r8, #1
 800e700:	42b3      	cmp	r3, r6
 800e702:	db0b      	blt.n	800e71c <__lshift+0x38>
 800e704:	4638      	mov	r0, r7
 800e706:	f7ff fd93 	bl	800e230 <_Balloc>
 800e70a:	4605      	mov	r5, r0
 800e70c:	b948      	cbnz	r0, 800e722 <__lshift+0x3e>
 800e70e:	4602      	mov	r2, r0
 800e710:	4b28      	ldr	r3, [pc, #160]	; (800e7b4 <__lshift+0xd0>)
 800e712:	4829      	ldr	r0, [pc, #164]	; (800e7b8 <__lshift+0xd4>)
 800e714:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e718:	f000 fb02 	bl	800ed20 <__assert_func>
 800e71c:	3101      	adds	r1, #1
 800e71e:	005b      	lsls	r3, r3, #1
 800e720:	e7ee      	b.n	800e700 <__lshift+0x1c>
 800e722:	2300      	movs	r3, #0
 800e724:	f100 0114 	add.w	r1, r0, #20
 800e728:	f100 0210 	add.w	r2, r0, #16
 800e72c:	4618      	mov	r0, r3
 800e72e:	4553      	cmp	r3, sl
 800e730:	db33      	blt.n	800e79a <__lshift+0xb6>
 800e732:	6920      	ldr	r0, [r4, #16]
 800e734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e738:	f104 0314 	add.w	r3, r4, #20
 800e73c:	f019 091f 	ands.w	r9, r9, #31
 800e740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e744:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e748:	d02b      	beq.n	800e7a2 <__lshift+0xbe>
 800e74a:	f1c9 0e20 	rsb	lr, r9, #32
 800e74e:	468a      	mov	sl, r1
 800e750:	2200      	movs	r2, #0
 800e752:	6818      	ldr	r0, [r3, #0]
 800e754:	fa00 f009 	lsl.w	r0, r0, r9
 800e758:	4310      	orrs	r0, r2
 800e75a:	f84a 0b04 	str.w	r0, [sl], #4
 800e75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e762:	459c      	cmp	ip, r3
 800e764:	fa22 f20e 	lsr.w	r2, r2, lr
 800e768:	d8f3      	bhi.n	800e752 <__lshift+0x6e>
 800e76a:	ebac 0304 	sub.w	r3, ip, r4
 800e76e:	3b15      	subs	r3, #21
 800e770:	f023 0303 	bic.w	r3, r3, #3
 800e774:	3304      	adds	r3, #4
 800e776:	f104 0015 	add.w	r0, r4, #21
 800e77a:	4584      	cmp	ip, r0
 800e77c:	bf38      	it	cc
 800e77e:	2304      	movcc	r3, #4
 800e780:	50ca      	str	r2, [r1, r3]
 800e782:	b10a      	cbz	r2, 800e788 <__lshift+0xa4>
 800e784:	f108 0602 	add.w	r6, r8, #2
 800e788:	3e01      	subs	r6, #1
 800e78a:	4638      	mov	r0, r7
 800e78c:	612e      	str	r6, [r5, #16]
 800e78e:	4621      	mov	r1, r4
 800e790:	f7ff fd8e 	bl	800e2b0 <_Bfree>
 800e794:	4628      	mov	r0, r5
 800e796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e79a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e79e:	3301      	adds	r3, #1
 800e7a0:	e7c5      	b.n	800e72e <__lshift+0x4a>
 800e7a2:	3904      	subs	r1, #4
 800e7a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7ac:	459c      	cmp	ip, r3
 800e7ae:	d8f9      	bhi.n	800e7a4 <__lshift+0xc0>
 800e7b0:	e7ea      	b.n	800e788 <__lshift+0xa4>
 800e7b2:	bf00      	nop
 800e7b4:	0800f998 	.word	0x0800f998
 800e7b8:	0800fa20 	.word	0x0800fa20

0800e7bc <__mcmp>:
 800e7bc:	b530      	push	{r4, r5, lr}
 800e7be:	6902      	ldr	r2, [r0, #16]
 800e7c0:	690c      	ldr	r4, [r1, #16]
 800e7c2:	1b12      	subs	r2, r2, r4
 800e7c4:	d10e      	bne.n	800e7e4 <__mcmp+0x28>
 800e7c6:	f100 0314 	add.w	r3, r0, #20
 800e7ca:	3114      	adds	r1, #20
 800e7cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e7d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e7d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e7d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e7dc:	42a5      	cmp	r5, r4
 800e7de:	d003      	beq.n	800e7e8 <__mcmp+0x2c>
 800e7e0:	d305      	bcc.n	800e7ee <__mcmp+0x32>
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	4610      	mov	r0, r2
 800e7e6:	bd30      	pop	{r4, r5, pc}
 800e7e8:	4283      	cmp	r3, r0
 800e7ea:	d3f3      	bcc.n	800e7d4 <__mcmp+0x18>
 800e7ec:	e7fa      	b.n	800e7e4 <__mcmp+0x28>
 800e7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f2:	e7f7      	b.n	800e7e4 <__mcmp+0x28>

0800e7f4 <__mdiff>:
 800e7f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f8:	460c      	mov	r4, r1
 800e7fa:	4606      	mov	r6, r0
 800e7fc:	4611      	mov	r1, r2
 800e7fe:	4620      	mov	r0, r4
 800e800:	4690      	mov	r8, r2
 800e802:	f7ff ffdb 	bl	800e7bc <__mcmp>
 800e806:	1e05      	subs	r5, r0, #0
 800e808:	d110      	bne.n	800e82c <__mdiff+0x38>
 800e80a:	4629      	mov	r1, r5
 800e80c:	4630      	mov	r0, r6
 800e80e:	f7ff fd0f 	bl	800e230 <_Balloc>
 800e812:	b930      	cbnz	r0, 800e822 <__mdiff+0x2e>
 800e814:	4b3a      	ldr	r3, [pc, #232]	; (800e900 <__mdiff+0x10c>)
 800e816:	4602      	mov	r2, r0
 800e818:	f240 2137 	movw	r1, #567	; 0x237
 800e81c:	4839      	ldr	r0, [pc, #228]	; (800e904 <__mdiff+0x110>)
 800e81e:	f000 fa7f 	bl	800ed20 <__assert_func>
 800e822:	2301      	movs	r3, #1
 800e824:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e82c:	bfa4      	itt	ge
 800e82e:	4643      	movge	r3, r8
 800e830:	46a0      	movge	r8, r4
 800e832:	4630      	mov	r0, r6
 800e834:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e838:	bfa6      	itte	ge
 800e83a:	461c      	movge	r4, r3
 800e83c:	2500      	movge	r5, #0
 800e83e:	2501      	movlt	r5, #1
 800e840:	f7ff fcf6 	bl	800e230 <_Balloc>
 800e844:	b920      	cbnz	r0, 800e850 <__mdiff+0x5c>
 800e846:	4b2e      	ldr	r3, [pc, #184]	; (800e900 <__mdiff+0x10c>)
 800e848:	4602      	mov	r2, r0
 800e84a:	f240 2145 	movw	r1, #581	; 0x245
 800e84e:	e7e5      	b.n	800e81c <__mdiff+0x28>
 800e850:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e854:	6926      	ldr	r6, [r4, #16]
 800e856:	60c5      	str	r5, [r0, #12]
 800e858:	f104 0914 	add.w	r9, r4, #20
 800e85c:	f108 0514 	add.w	r5, r8, #20
 800e860:	f100 0e14 	add.w	lr, r0, #20
 800e864:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e868:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e86c:	f108 0210 	add.w	r2, r8, #16
 800e870:	46f2      	mov	sl, lr
 800e872:	2100      	movs	r1, #0
 800e874:	f859 3b04 	ldr.w	r3, [r9], #4
 800e878:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e87c:	fa11 f88b 	uxtah	r8, r1, fp
 800e880:	b299      	uxth	r1, r3
 800e882:	0c1b      	lsrs	r3, r3, #16
 800e884:	eba8 0801 	sub.w	r8, r8, r1
 800e888:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e88c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e890:	fa1f f888 	uxth.w	r8, r8
 800e894:	1419      	asrs	r1, r3, #16
 800e896:	454e      	cmp	r6, r9
 800e898:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e89c:	f84a 3b04 	str.w	r3, [sl], #4
 800e8a0:	d8e8      	bhi.n	800e874 <__mdiff+0x80>
 800e8a2:	1b33      	subs	r3, r6, r4
 800e8a4:	3b15      	subs	r3, #21
 800e8a6:	f023 0303 	bic.w	r3, r3, #3
 800e8aa:	3304      	adds	r3, #4
 800e8ac:	3415      	adds	r4, #21
 800e8ae:	42a6      	cmp	r6, r4
 800e8b0:	bf38      	it	cc
 800e8b2:	2304      	movcc	r3, #4
 800e8b4:	441d      	add	r5, r3
 800e8b6:	4473      	add	r3, lr
 800e8b8:	469e      	mov	lr, r3
 800e8ba:	462e      	mov	r6, r5
 800e8bc:	4566      	cmp	r6, ip
 800e8be:	d30e      	bcc.n	800e8de <__mdiff+0xea>
 800e8c0:	f10c 0203 	add.w	r2, ip, #3
 800e8c4:	1b52      	subs	r2, r2, r5
 800e8c6:	f022 0203 	bic.w	r2, r2, #3
 800e8ca:	3d03      	subs	r5, #3
 800e8cc:	45ac      	cmp	ip, r5
 800e8ce:	bf38      	it	cc
 800e8d0:	2200      	movcc	r2, #0
 800e8d2:	4413      	add	r3, r2
 800e8d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e8d8:	b17a      	cbz	r2, 800e8fa <__mdiff+0x106>
 800e8da:	6107      	str	r7, [r0, #16]
 800e8dc:	e7a4      	b.n	800e828 <__mdiff+0x34>
 800e8de:	f856 8b04 	ldr.w	r8, [r6], #4
 800e8e2:	fa11 f288 	uxtah	r2, r1, r8
 800e8e6:	1414      	asrs	r4, r2, #16
 800e8e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e8ec:	b292      	uxth	r2, r2
 800e8ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e8f2:	f84e 2b04 	str.w	r2, [lr], #4
 800e8f6:	1421      	asrs	r1, r4, #16
 800e8f8:	e7e0      	b.n	800e8bc <__mdiff+0xc8>
 800e8fa:	3f01      	subs	r7, #1
 800e8fc:	e7ea      	b.n	800e8d4 <__mdiff+0xe0>
 800e8fe:	bf00      	nop
 800e900:	0800f998 	.word	0x0800f998
 800e904:	0800fa20 	.word	0x0800fa20

0800e908 <__ulp>:
 800e908:	b082      	sub	sp, #8
 800e90a:	ed8d 0b00 	vstr	d0, [sp]
 800e90e:	9a01      	ldr	r2, [sp, #4]
 800e910:	4b0f      	ldr	r3, [pc, #60]	; (800e950 <__ulp+0x48>)
 800e912:	4013      	ands	r3, r2
 800e914:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e918:	2b00      	cmp	r3, #0
 800e91a:	dc08      	bgt.n	800e92e <__ulp+0x26>
 800e91c:	425b      	negs	r3, r3
 800e91e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e922:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e926:	da04      	bge.n	800e932 <__ulp+0x2a>
 800e928:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e92c:	4113      	asrs	r3, r2
 800e92e:	2200      	movs	r2, #0
 800e930:	e008      	b.n	800e944 <__ulp+0x3c>
 800e932:	f1a2 0314 	sub.w	r3, r2, #20
 800e936:	2b1e      	cmp	r3, #30
 800e938:	bfda      	itte	le
 800e93a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e93e:	40da      	lsrle	r2, r3
 800e940:	2201      	movgt	r2, #1
 800e942:	2300      	movs	r3, #0
 800e944:	4619      	mov	r1, r3
 800e946:	4610      	mov	r0, r2
 800e948:	ec41 0b10 	vmov	d0, r0, r1
 800e94c:	b002      	add	sp, #8
 800e94e:	4770      	bx	lr
 800e950:	7ff00000 	.word	0x7ff00000

0800e954 <__b2d>:
 800e954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e958:	6906      	ldr	r6, [r0, #16]
 800e95a:	f100 0814 	add.w	r8, r0, #20
 800e95e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e962:	1f37      	subs	r7, r6, #4
 800e964:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e968:	4610      	mov	r0, r2
 800e96a:	f7ff fd53 	bl	800e414 <__hi0bits>
 800e96e:	f1c0 0320 	rsb	r3, r0, #32
 800e972:	280a      	cmp	r0, #10
 800e974:	600b      	str	r3, [r1, #0]
 800e976:	491b      	ldr	r1, [pc, #108]	; (800e9e4 <__b2d+0x90>)
 800e978:	dc15      	bgt.n	800e9a6 <__b2d+0x52>
 800e97a:	f1c0 0c0b 	rsb	ip, r0, #11
 800e97e:	fa22 f30c 	lsr.w	r3, r2, ip
 800e982:	45b8      	cmp	r8, r7
 800e984:	ea43 0501 	orr.w	r5, r3, r1
 800e988:	bf34      	ite	cc
 800e98a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e98e:	2300      	movcs	r3, #0
 800e990:	3015      	adds	r0, #21
 800e992:	fa02 f000 	lsl.w	r0, r2, r0
 800e996:	fa23 f30c 	lsr.w	r3, r3, ip
 800e99a:	4303      	orrs	r3, r0
 800e99c:	461c      	mov	r4, r3
 800e99e:	ec45 4b10 	vmov	d0, r4, r5
 800e9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a6:	45b8      	cmp	r8, r7
 800e9a8:	bf3a      	itte	cc
 800e9aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e9ae:	f1a6 0708 	subcc.w	r7, r6, #8
 800e9b2:	2300      	movcs	r3, #0
 800e9b4:	380b      	subs	r0, #11
 800e9b6:	d012      	beq.n	800e9de <__b2d+0x8a>
 800e9b8:	f1c0 0120 	rsb	r1, r0, #32
 800e9bc:	fa23 f401 	lsr.w	r4, r3, r1
 800e9c0:	4082      	lsls	r2, r0
 800e9c2:	4322      	orrs	r2, r4
 800e9c4:	4547      	cmp	r7, r8
 800e9c6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e9ca:	bf8c      	ite	hi
 800e9cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e9d0:	2200      	movls	r2, #0
 800e9d2:	4083      	lsls	r3, r0
 800e9d4:	40ca      	lsrs	r2, r1
 800e9d6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	e7de      	b.n	800e99c <__b2d+0x48>
 800e9de:	ea42 0501 	orr.w	r5, r2, r1
 800e9e2:	e7db      	b.n	800e99c <__b2d+0x48>
 800e9e4:	3ff00000 	.word	0x3ff00000

0800e9e8 <__d2b>:
 800e9e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9ec:	460f      	mov	r7, r1
 800e9ee:	2101      	movs	r1, #1
 800e9f0:	ec59 8b10 	vmov	r8, r9, d0
 800e9f4:	4616      	mov	r6, r2
 800e9f6:	f7ff fc1b 	bl	800e230 <_Balloc>
 800e9fa:	4604      	mov	r4, r0
 800e9fc:	b930      	cbnz	r0, 800ea0c <__d2b+0x24>
 800e9fe:	4602      	mov	r2, r0
 800ea00:	4b24      	ldr	r3, [pc, #144]	; (800ea94 <__d2b+0xac>)
 800ea02:	4825      	ldr	r0, [pc, #148]	; (800ea98 <__d2b+0xb0>)
 800ea04:	f240 310f 	movw	r1, #783	; 0x30f
 800ea08:	f000 f98a 	bl	800ed20 <__assert_func>
 800ea0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea14:	bb2d      	cbnz	r5, 800ea62 <__d2b+0x7a>
 800ea16:	9301      	str	r3, [sp, #4]
 800ea18:	f1b8 0300 	subs.w	r3, r8, #0
 800ea1c:	d026      	beq.n	800ea6c <__d2b+0x84>
 800ea1e:	4668      	mov	r0, sp
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	f7ff fd17 	bl	800e454 <__lo0bits>
 800ea26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea2a:	b1e8      	cbz	r0, 800ea68 <__d2b+0x80>
 800ea2c:	f1c0 0320 	rsb	r3, r0, #32
 800ea30:	fa02 f303 	lsl.w	r3, r2, r3
 800ea34:	430b      	orrs	r3, r1
 800ea36:	40c2      	lsrs	r2, r0
 800ea38:	6163      	str	r3, [r4, #20]
 800ea3a:	9201      	str	r2, [sp, #4]
 800ea3c:	9b01      	ldr	r3, [sp, #4]
 800ea3e:	61a3      	str	r3, [r4, #24]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	bf14      	ite	ne
 800ea44:	2202      	movne	r2, #2
 800ea46:	2201      	moveq	r2, #1
 800ea48:	6122      	str	r2, [r4, #16]
 800ea4a:	b1bd      	cbz	r5, 800ea7c <__d2b+0x94>
 800ea4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea50:	4405      	add	r5, r0
 800ea52:	603d      	str	r5, [r7, #0]
 800ea54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea58:	6030      	str	r0, [r6, #0]
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	b003      	add	sp, #12
 800ea5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea66:	e7d6      	b.n	800ea16 <__d2b+0x2e>
 800ea68:	6161      	str	r1, [r4, #20]
 800ea6a:	e7e7      	b.n	800ea3c <__d2b+0x54>
 800ea6c:	a801      	add	r0, sp, #4
 800ea6e:	f7ff fcf1 	bl	800e454 <__lo0bits>
 800ea72:	9b01      	ldr	r3, [sp, #4]
 800ea74:	6163      	str	r3, [r4, #20]
 800ea76:	3020      	adds	r0, #32
 800ea78:	2201      	movs	r2, #1
 800ea7a:	e7e5      	b.n	800ea48 <__d2b+0x60>
 800ea7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ea84:	6038      	str	r0, [r7, #0]
 800ea86:	6918      	ldr	r0, [r3, #16]
 800ea88:	f7ff fcc4 	bl	800e414 <__hi0bits>
 800ea8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea90:	e7e2      	b.n	800ea58 <__d2b+0x70>
 800ea92:	bf00      	nop
 800ea94:	0800f998 	.word	0x0800f998
 800ea98:	0800fa20 	.word	0x0800fa20

0800ea9c <__ratio>:
 800ea9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa0:	4688      	mov	r8, r1
 800eaa2:	4669      	mov	r1, sp
 800eaa4:	4681      	mov	r9, r0
 800eaa6:	f7ff ff55 	bl	800e954 <__b2d>
 800eaaa:	a901      	add	r1, sp, #4
 800eaac:	4640      	mov	r0, r8
 800eaae:	ec55 4b10 	vmov	r4, r5, d0
 800eab2:	f7ff ff4f 	bl	800e954 <__b2d>
 800eab6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eaba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eabe:	eba3 0c02 	sub.w	ip, r3, r2
 800eac2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eac6:	1a9b      	subs	r3, r3, r2
 800eac8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eacc:	ec51 0b10 	vmov	r0, r1, d0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	bfd6      	itet	le
 800ead4:	460a      	movle	r2, r1
 800ead6:	462a      	movgt	r2, r5
 800ead8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eadc:	468b      	mov	fp, r1
 800eade:	462f      	mov	r7, r5
 800eae0:	bfd4      	ite	le
 800eae2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800eae6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eaea:	4620      	mov	r0, r4
 800eaec:	ee10 2a10 	vmov	r2, s0
 800eaf0:	465b      	mov	r3, fp
 800eaf2:	4639      	mov	r1, r7
 800eaf4:	f7f1 fea2 	bl	800083c <__aeabi_ddiv>
 800eaf8:	ec41 0b10 	vmov	d0, r0, r1
 800eafc:	b003      	add	sp, #12
 800eafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb02 <__copybits>:
 800eb02:	3901      	subs	r1, #1
 800eb04:	b570      	push	{r4, r5, r6, lr}
 800eb06:	1149      	asrs	r1, r1, #5
 800eb08:	6914      	ldr	r4, [r2, #16]
 800eb0a:	3101      	adds	r1, #1
 800eb0c:	f102 0314 	add.w	r3, r2, #20
 800eb10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eb14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb18:	1f05      	subs	r5, r0, #4
 800eb1a:	42a3      	cmp	r3, r4
 800eb1c:	d30c      	bcc.n	800eb38 <__copybits+0x36>
 800eb1e:	1aa3      	subs	r3, r4, r2
 800eb20:	3b11      	subs	r3, #17
 800eb22:	f023 0303 	bic.w	r3, r3, #3
 800eb26:	3211      	adds	r2, #17
 800eb28:	42a2      	cmp	r2, r4
 800eb2a:	bf88      	it	hi
 800eb2c:	2300      	movhi	r3, #0
 800eb2e:	4418      	add	r0, r3
 800eb30:	2300      	movs	r3, #0
 800eb32:	4288      	cmp	r0, r1
 800eb34:	d305      	bcc.n	800eb42 <__copybits+0x40>
 800eb36:	bd70      	pop	{r4, r5, r6, pc}
 800eb38:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb3c:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb40:	e7eb      	b.n	800eb1a <__copybits+0x18>
 800eb42:	f840 3b04 	str.w	r3, [r0], #4
 800eb46:	e7f4      	b.n	800eb32 <__copybits+0x30>

0800eb48 <__any_on>:
 800eb48:	f100 0214 	add.w	r2, r0, #20
 800eb4c:	6900      	ldr	r0, [r0, #16]
 800eb4e:	114b      	asrs	r3, r1, #5
 800eb50:	4298      	cmp	r0, r3
 800eb52:	b510      	push	{r4, lr}
 800eb54:	db11      	blt.n	800eb7a <__any_on+0x32>
 800eb56:	dd0a      	ble.n	800eb6e <__any_on+0x26>
 800eb58:	f011 011f 	ands.w	r1, r1, #31
 800eb5c:	d007      	beq.n	800eb6e <__any_on+0x26>
 800eb5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb62:	fa24 f001 	lsr.w	r0, r4, r1
 800eb66:	fa00 f101 	lsl.w	r1, r0, r1
 800eb6a:	428c      	cmp	r4, r1
 800eb6c:	d10b      	bne.n	800eb86 <__any_on+0x3e>
 800eb6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d803      	bhi.n	800eb7e <__any_on+0x36>
 800eb76:	2000      	movs	r0, #0
 800eb78:	bd10      	pop	{r4, pc}
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	e7f7      	b.n	800eb6e <__any_on+0x26>
 800eb7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb82:	2900      	cmp	r1, #0
 800eb84:	d0f5      	beq.n	800eb72 <__any_on+0x2a>
 800eb86:	2001      	movs	r0, #1
 800eb88:	e7f6      	b.n	800eb78 <__any_on+0x30>

0800eb8a <__ascii_wctomb>:
 800eb8a:	b149      	cbz	r1, 800eba0 <__ascii_wctomb+0x16>
 800eb8c:	2aff      	cmp	r2, #255	; 0xff
 800eb8e:	bf85      	ittet	hi
 800eb90:	238a      	movhi	r3, #138	; 0x8a
 800eb92:	6003      	strhi	r3, [r0, #0]
 800eb94:	700a      	strbls	r2, [r1, #0]
 800eb96:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb9a:	bf98      	it	ls
 800eb9c:	2001      	movls	r0, #1
 800eb9e:	4770      	bx	lr
 800eba0:	4608      	mov	r0, r1
 800eba2:	4770      	bx	lr

0800eba4 <__sflush_r>:
 800eba4:	898a      	ldrh	r2, [r1, #12]
 800eba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebaa:	4605      	mov	r5, r0
 800ebac:	0710      	lsls	r0, r2, #28
 800ebae:	460c      	mov	r4, r1
 800ebb0:	d458      	bmi.n	800ec64 <__sflush_r+0xc0>
 800ebb2:	684b      	ldr	r3, [r1, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	dc05      	bgt.n	800ebc4 <__sflush_r+0x20>
 800ebb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	dc02      	bgt.n	800ebc4 <__sflush_r+0x20>
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebc6:	2e00      	cmp	r6, #0
 800ebc8:	d0f9      	beq.n	800ebbe <__sflush_r+0x1a>
 800ebca:	2300      	movs	r3, #0
 800ebcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebd0:	682f      	ldr	r7, [r5, #0]
 800ebd2:	6a21      	ldr	r1, [r4, #32]
 800ebd4:	602b      	str	r3, [r5, #0]
 800ebd6:	d032      	beq.n	800ec3e <__sflush_r+0x9a>
 800ebd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebda:	89a3      	ldrh	r3, [r4, #12]
 800ebdc:	075a      	lsls	r2, r3, #29
 800ebde:	d505      	bpl.n	800ebec <__sflush_r+0x48>
 800ebe0:	6863      	ldr	r3, [r4, #4]
 800ebe2:	1ac0      	subs	r0, r0, r3
 800ebe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebe6:	b10b      	cbz	r3, 800ebec <__sflush_r+0x48>
 800ebe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebea:	1ac0      	subs	r0, r0, r3
 800ebec:	2300      	movs	r3, #0
 800ebee:	4602      	mov	r2, r0
 800ebf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebf2:	6a21      	ldr	r1, [r4, #32]
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	47b0      	blx	r6
 800ebf8:	1c43      	adds	r3, r0, #1
 800ebfa:	89a3      	ldrh	r3, [r4, #12]
 800ebfc:	d106      	bne.n	800ec0c <__sflush_r+0x68>
 800ebfe:	6829      	ldr	r1, [r5, #0]
 800ec00:	291d      	cmp	r1, #29
 800ec02:	d82b      	bhi.n	800ec5c <__sflush_r+0xb8>
 800ec04:	4a29      	ldr	r2, [pc, #164]	; (800ecac <__sflush_r+0x108>)
 800ec06:	410a      	asrs	r2, r1
 800ec08:	07d6      	lsls	r6, r2, #31
 800ec0a:	d427      	bmi.n	800ec5c <__sflush_r+0xb8>
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	6062      	str	r2, [r4, #4]
 800ec10:	04d9      	lsls	r1, r3, #19
 800ec12:	6922      	ldr	r2, [r4, #16]
 800ec14:	6022      	str	r2, [r4, #0]
 800ec16:	d504      	bpl.n	800ec22 <__sflush_r+0x7e>
 800ec18:	1c42      	adds	r2, r0, #1
 800ec1a:	d101      	bne.n	800ec20 <__sflush_r+0x7c>
 800ec1c:	682b      	ldr	r3, [r5, #0]
 800ec1e:	b903      	cbnz	r3, 800ec22 <__sflush_r+0x7e>
 800ec20:	6560      	str	r0, [r4, #84]	; 0x54
 800ec22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec24:	602f      	str	r7, [r5, #0]
 800ec26:	2900      	cmp	r1, #0
 800ec28:	d0c9      	beq.n	800ebbe <__sflush_r+0x1a>
 800ec2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec2e:	4299      	cmp	r1, r3
 800ec30:	d002      	beq.n	800ec38 <__sflush_r+0x94>
 800ec32:	4628      	mov	r0, r5
 800ec34:	f7fe fe9a 	bl	800d96c <_free_r>
 800ec38:	2000      	movs	r0, #0
 800ec3a:	6360      	str	r0, [r4, #52]	; 0x34
 800ec3c:	e7c0      	b.n	800ebc0 <__sflush_r+0x1c>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	4628      	mov	r0, r5
 800ec42:	47b0      	blx	r6
 800ec44:	1c41      	adds	r1, r0, #1
 800ec46:	d1c8      	bne.n	800ebda <__sflush_r+0x36>
 800ec48:	682b      	ldr	r3, [r5, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d0c5      	beq.n	800ebda <__sflush_r+0x36>
 800ec4e:	2b1d      	cmp	r3, #29
 800ec50:	d001      	beq.n	800ec56 <__sflush_r+0xb2>
 800ec52:	2b16      	cmp	r3, #22
 800ec54:	d101      	bne.n	800ec5a <__sflush_r+0xb6>
 800ec56:	602f      	str	r7, [r5, #0]
 800ec58:	e7b1      	b.n	800ebbe <__sflush_r+0x1a>
 800ec5a:	89a3      	ldrh	r3, [r4, #12]
 800ec5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec60:	81a3      	strh	r3, [r4, #12]
 800ec62:	e7ad      	b.n	800ebc0 <__sflush_r+0x1c>
 800ec64:	690f      	ldr	r7, [r1, #16]
 800ec66:	2f00      	cmp	r7, #0
 800ec68:	d0a9      	beq.n	800ebbe <__sflush_r+0x1a>
 800ec6a:	0793      	lsls	r3, r2, #30
 800ec6c:	680e      	ldr	r6, [r1, #0]
 800ec6e:	bf08      	it	eq
 800ec70:	694b      	ldreq	r3, [r1, #20]
 800ec72:	600f      	str	r7, [r1, #0]
 800ec74:	bf18      	it	ne
 800ec76:	2300      	movne	r3, #0
 800ec78:	eba6 0807 	sub.w	r8, r6, r7
 800ec7c:	608b      	str	r3, [r1, #8]
 800ec7e:	f1b8 0f00 	cmp.w	r8, #0
 800ec82:	dd9c      	ble.n	800ebbe <__sflush_r+0x1a>
 800ec84:	6a21      	ldr	r1, [r4, #32]
 800ec86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec88:	4643      	mov	r3, r8
 800ec8a:	463a      	mov	r2, r7
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	47b0      	blx	r6
 800ec90:	2800      	cmp	r0, #0
 800ec92:	dc06      	bgt.n	800eca2 <__sflush_r+0xfe>
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec9a:	81a3      	strh	r3, [r4, #12]
 800ec9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eca0:	e78e      	b.n	800ebc0 <__sflush_r+0x1c>
 800eca2:	4407      	add	r7, r0
 800eca4:	eba8 0800 	sub.w	r8, r8, r0
 800eca8:	e7e9      	b.n	800ec7e <__sflush_r+0xda>
 800ecaa:	bf00      	nop
 800ecac:	dfbffffe 	.word	0xdfbffffe

0800ecb0 <_fflush_r>:
 800ecb0:	b538      	push	{r3, r4, r5, lr}
 800ecb2:	690b      	ldr	r3, [r1, #16]
 800ecb4:	4605      	mov	r5, r0
 800ecb6:	460c      	mov	r4, r1
 800ecb8:	b913      	cbnz	r3, 800ecc0 <_fflush_r+0x10>
 800ecba:	2500      	movs	r5, #0
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	bd38      	pop	{r3, r4, r5, pc}
 800ecc0:	b118      	cbz	r0, 800ecca <_fflush_r+0x1a>
 800ecc2:	6a03      	ldr	r3, [r0, #32]
 800ecc4:	b90b      	cbnz	r3, 800ecca <_fflush_r+0x1a>
 800ecc6:	f7fe fd3b 	bl	800d740 <__sinit>
 800ecca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d0f3      	beq.n	800ecba <_fflush_r+0xa>
 800ecd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecd4:	07d0      	lsls	r0, r2, #31
 800ecd6:	d404      	bmi.n	800ece2 <_fflush_r+0x32>
 800ecd8:	0599      	lsls	r1, r3, #22
 800ecda:	d402      	bmi.n	800ece2 <_fflush_r+0x32>
 800ecdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecde:	f7fe fe34 	bl	800d94a <__retarget_lock_acquire_recursive>
 800ece2:	4628      	mov	r0, r5
 800ece4:	4621      	mov	r1, r4
 800ece6:	f7ff ff5d 	bl	800eba4 <__sflush_r>
 800ecea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecec:	07da      	lsls	r2, r3, #31
 800ecee:	4605      	mov	r5, r0
 800ecf0:	d4e4      	bmi.n	800ecbc <_fflush_r+0xc>
 800ecf2:	89a3      	ldrh	r3, [r4, #12]
 800ecf4:	059b      	lsls	r3, r3, #22
 800ecf6:	d4e1      	bmi.n	800ecbc <_fflush_r+0xc>
 800ecf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecfa:	f7fe fe27 	bl	800d94c <__retarget_lock_release_recursive>
 800ecfe:	e7dd      	b.n	800ecbc <_fflush_r+0xc>

0800ed00 <_sbrk_r>:
 800ed00:	b538      	push	{r3, r4, r5, lr}
 800ed02:	4d06      	ldr	r5, [pc, #24]	; (800ed1c <_sbrk_r+0x1c>)
 800ed04:	2300      	movs	r3, #0
 800ed06:	4604      	mov	r4, r0
 800ed08:	4608      	mov	r0, r1
 800ed0a:	602b      	str	r3, [r5, #0]
 800ed0c:	f7f3 fe30 	bl	8002970 <_sbrk>
 800ed10:	1c43      	adds	r3, r0, #1
 800ed12:	d102      	bne.n	800ed1a <_sbrk_r+0x1a>
 800ed14:	682b      	ldr	r3, [r5, #0]
 800ed16:	b103      	cbz	r3, 800ed1a <_sbrk_r+0x1a>
 800ed18:	6023      	str	r3, [r4, #0]
 800ed1a:	bd38      	pop	{r3, r4, r5, pc}
 800ed1c:	200009e8 	.word	0x200009e8

0800ed20 <__assert_func>:
 800ed20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed22:	4614      	mov	r4, r2
 800ed24:	461a      	mov	r2, r3
 800ed26:	4b09      	ldr	r3, [pc, #36]	; (800ed4c <__assert_func+0x2c>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4605      	mov	r5, r0
 800ed2c:	68d8      	ldr	r0, [r3, #12]
 800ed2e:	b14c      	cbz	r4, 800ed44 <__assert_func+0x24>
 800ed30:	4b07      	ldr	r3, [pc, #28]	; (800ed50 <__assert_func+0x30>)
 800ed32:	9100      	str	r1, [sp, #0]
 800ed34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed38:	4906      	ldr	r1, [pc, #24]	; (800ed54 <__assert_func+0x34>)
 800ed3a:	462b      	mov	r3, r5
 800ed3c:	f000 f82c 	bl	800ed98 <fiprintf>
 800ed40:	f000 f83c 	bl	800edbc <abort>
 800ed44:	4b04      	ldr	r3, [pc, #16]	; (800ed58 <__assert_func+0x38>)
 800ed46:	461c      	mov	r4, r3
 800ed48:	e7f3      	b.n	800ed32 <__assert_func+0x12>
 800ed4a:	bf00      	nop
 800ed4c:	200001e4 	.word	0x200001e4
 800ed50:	0800fc7d 	.word	0x0800fc7d
 800ed54:	0800fc8a 	.word	0x0800fc8a
 800ed58:	0800fcb8 	.word	0x0800fcb8

0800ed5c <_calloc_r>:
 800ed5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed5e:	fba1 2402 	umull	r2, r4, r1, r2
 800ed62:	b94c      	cbnz	r4, 800ed78 <_calloc_r+0x1c>
 800ed64:	4611      	mov	r1, r2
 800ed66:	9201      	str	r2, [sp, #4]
 800ed68:	f7ff f9c4 	bl	800e0f4 <_malloc_r>
 800ed6c:	9a01      	ldr	r2, [sp, #4]
 800ed6e:	4605      	mov	r5, r0
 800ed70:	b930      	cbnz	r0, 800ed80 <_calloc_r+0x24>
 800ed72:	4628      	mov	r0, r5
 800ed74:	b003      	add	sp, #12
 800ed76:	bd30      	pop	{r4, r5, pc}
 800ed78:	220c      	movs	r2, #12
 800ed7a:	6002      	str	r2, [r0, #0]
 800ed7c:	2500      	movs	r5, #0
 800ed7e:	e7f8      	b.n	800ed72 <_calloc_r+0x16>
 800ed80:	4621      	mov	r1, r4
 800ed82:	f7fe fd56 	bl	800d832 <memset>
 800ed86:	e7f4      	b.n	800ed72 <_calloc_r+0x16>

0800ed88 <malloc>:
 800ed88:	4b02      	ldr	r3, [pc, #8]	; (800ed94 <malloc+0xc>)
 800ed8a:	4601      	mov	r1, r0
 800ed8c:	6818      	ldr	r0, [r3, #0]
 800ed8e:	f7ff b9b1 	b.w	800e0f4 <_malloc_r>
 800ed92:	bf00      	nop
 800ed94:	200001e4 	.word	0x200001e4

0800ed98 <fiprintf>:
 800ed98:	b40e      	push	{r1, r2, r3}
 800ed9a:	b503      	push	{r0, r1, lr}
 800ed9c:	4601      	mov	r1, r0
 800ed9e:	ab03      	add	r3, sp, #12
 800eda0:	4805      	ldr	r0, [pc, #20]	; (800edb8 <fiprintf+0x20>)
 800eda2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eda6:	6800      	ldr	r0, [r0, #0]
 800eda8:	9301      	str	r3, [sp, #4]
 800edaa:	f000 f837 	bl	800ee1c <_vfiprintf_r>
 800edae:	b002      	add	sp, #8
 800edb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800edb4:	b003      	add	sp, #12
 800edb6:	4770      	bx	lr
 800edb8:	200001e4 	.word	0x200001e4

0800edbc <abort>:
 800edbc:	b508      	push	{r3, lr}
 800edbe:	2006      	movs	r0, #6
 800edc0:	f000 fb94 	bl	800f4ec <raise>
 800edc4:	2001      	movs	r0, #1
 800edc6:	f7f3 fd5b 	bl	8002880 <_exit>

0800edca <__sfputc_r>:
 800edca:	6893      	ldr	r3, [r2, #8]
 800edcc:	3b01      	subs	r3, #1
 800edce:	2b00      	cmp	r3, #0
 800edd0:	b410      	push	{r4}
 800edd2:	6093      	str	r3, [r2, #8]
 800edd4:	da08      	bge.n	800ede8 <__sfputc_r+0x1e>
 800edd6:	6994      	ldr	r4, [r2, #24]
 800edd8:	42a3      	cmp	r3, r4
 800edda:	db01      	blt.n	800ede0 <__sfputc_r+0x16>
 800eddc:	290a      	cmp	r1, #10
 800edde:	d103      	bne.n	800ede8 <__sfputc_r+0x1e>
 800ede0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ede4:	f000 bac4 	b.w	800f370 <__swbuf_r>
 800ede8:	6813      	ldr	r3, [r2, #0]
 800edea:	1c58      	adds	r0, r3, #1
 800edec:	6010      	str	r0, [r2, #0]
 800edee:	7019      	strb	r1, [r3, #0]
 800edf0:	4608      	mov	r0, r1
 800edf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <__sfputs_r>:
 800edf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edfa:	4606      	mov	r6, r0
 800edfc:	460f      	mov	r7, r1
 800edfe:	4614      	mov	r4, r2
 800ee00:	18d5      	adds	r5, r2, r3
 800ee02:	42ac      	cmp	r4, r5
 800ee04:	d101      	bne.n	800ee0a <__sfputs_r+0x12>
 800ee06:	2000      	movs	r0, #0
 800ee08:	e007      	b.n	800ee1a <__sfputs_r+0x22>
 800ee0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee0e:	463a      	mov	r2, r7
 800ee10:	4630      	mov	r0, r6
 800ee12:	f7ff ffda 	bl	800edca <__sfputc_r>
 800ee16:	1c43      	adds	r3, r0, #1
 800ee18:	d1f3      	bne.n	800ee02 <__sfputs_r+0xa>
 800ee1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ee1c <_vfiprintf_r>:
 800ee1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee20:	460d      	mov	r5, r1
 800ee22:	b09d      	sub	sp, #116	; 0x74
 800ee24:	4614      	mov	r4, r2
 800ee26:	4698      	mov	r8, r3
 800ee28:	4606      	mov	r6, r0
 800ee2a:	b118      	cbz	r0, 800ee34 <_vfiprintf_r+0x18>
 800ee2c:	6a03      	ldr	r3, [r0, #32]
 800ee2e:	b90b      	cbnz	r3, 800ee34 <_vfiprintf_r+0x18>
 800ee30:	f7fe fc86 	bl	800d740 <__sinit>
 800ee34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee36:	07d9      	lsls	r1, r3, #31
 800ee38:	d405      	bmi.n	800ee46 <_vfiprintf_r+0x2a>
 800ee3a:	89ab      	ldrh	r3, [r5, #12]
 800ee3c:	059a      	lsls	r2, r3, #22
 800ee3e:	d402      	bmi.n	800ee46 <_vfiprintf_r+0x2a>
 800ee40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee42:	f7fe fd82 	bl	800d94a <__retarget_lock_acquire_recursive>
 800ee46:	89ab      	ldrh	r3, [r5, #12]
 800ee48:	071b      	lsls	r3, r3, #28
 800ee4a:	d501      	bpl.n	800ee50 <_vfiprintf_r+0x34>
 800ee4c:	692b      	ldr	r3, [r5, #16]
 800ee4e:	b99b      	cbnz	r3, 800ee78 <_vfiprintf_r+0x5c>
 800ee50:	4629      	mov	r1, r5
 800ee52:	4630      	mov	r0, r6
 800ee54:	f000 faca 	bl	800f3ec <__swsetup_r>
 800ee58:	b170      	cbz	r0, 800ee78 <_vfiprintf_r+0x5c>
 800ee5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee5c:	07dc      	lsls	r4, r3, #31
 800ee5e:	d504      	bpl.n	800ee6a <_vfiprintf_r+0x4e>
 800ee60:	f04f 30ff 	mov.w	r0, #4294967295
 800ee64:	b01d      	add	sp, #116	; 0x74
 800ee66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee6a:	89ab      	ldrh	r3, [r5, #12]
 800ee6c:	0598      	lsls	r0, r3, #22
 800ee6e:	d4f7      	bmi.n	800ee60 <_vfiprintf_r+0x44>
 800ee70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee72:	f7fe fd6b 	bl	800d94c <__retarget_lock_release_recursive>
 800ee76:	e7f3      	b.n	800ee60 <_vfiprintf_r+0x44>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee7c:	2320      	movs	r3, #32
 800ee7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee86:	2330      	movs	r3, #48	; 0x30
 800ee88:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f03c <_vfiprintf_r+0x220>
 800ee8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee90:	f04f 0901 	mov.w	r9, #1
 800ee94:	4623      	mov	r3, r4
 800ee96:	469a      	mov	sl, r3
 800ee98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee9c:	b10a      	cbz	r2, 800eea2 <_vfiprintf_r+0x86>
 800ee9e:	2a25      	cmp	r2, #37	; 0x25
 800eea0:	d1f9      	bne.n	800ee96 <_vfiprintf_r+0x7a>
 800eea2:	ebba 0b04 	subs.w	fp, sl, r4
 800eea6:	d00b      	beq.n	800eec0 <_vfiprintf_r+0xa4>
 800eea8:	465b      	mov	r3, fp
 800eeaa:	4622      	mov	r2, r4
 800eeac:	4629      	mov	r1, r5
 800eeae:	4630      	mov	r0, r6
 800eeb0:	f7ff ffa2 	bl	800edf8 <__sfputs_r>
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	f000 80a9 	beq.w	800f00c <_vfiprintf_r+0x1f0>
 800eeba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eebc:	445a      	add	r2, fp
 800eebe:	9209      	str	r2, [sp, #36]	; 0x24
 800eec0:	f89a 3000 	ldrb.w	r3, [sl]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f000 80a1 	beq.w	800f00c <_vfiprintf_r+0x1f0>
 800eeca:	2300      	movs	r3, #0
 800eecc:	f04f 32ff 	mov.w	r2, #4294967295
 800eed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eed4:	f10a 0a01 	add.w	sl, sl, #1
 800eed8:	9304      	str	r3, [sp, #16]
 800eeda:	9307      	str	r3, [sp, #28]
 800eedc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eee0:	931a      	str	r3, [sp, #104]	; 0x68
 800eee2:	4654      	mov	r4, sl
 800eee4:	2205      	movs	r2, #5
 800eee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeea:	4854      	ldr	r0, [pc, #336]	; (800f03c <_vfiprintf_r+0x220>)
 800eeec:	f7f1 f970 	bl	80001d0 <memchr>
 800eef0:	9a04      	ldr	r2, [sp, #16]
 800eef2:	b9d8      	cbnz	r0, 800ef2c <_vfiprintf_r+0x110>
 800eef4:	06d1      	lsls	r1, r2, #27
 800eef6:	bf44      	itt	mi
 800eef8:	2320      	movmi	r3, #32
 800eefa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eefe:	0713      	lsls	r3, r2, #28
 800ef00:	bf44      	itt	mi
 800ef02:	232b      	movmi	r3, #43	; 0x2b
 800ef04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef08:	f89a 3000 	ldrb.w	r3, [sl]
 800ef0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ef0e:	d015      	beq.n	800ef3c <_vfiprintf_r+0x120>
 800ef10:	9a07      	ldr	r2, [sp, #28]
 800ef12:	4654      	mov	r4, sl
 800ef14:	2000      	movs	r0, #0
 800ef16:	f04f 0c0a 	mov.w	ip, #10
 800ef1a:	4621      	mov	r1, r4
 800ef1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef20:	3b30      	subs	r3, #48	; 0x30
 800ef22:	2b09      	cmp	r3, #9
 800ef24:	d94d      	bls.n	800efc2 <_vfiprintf_r+0x1a6>
 800ef26:	b1b0      	cbz	r0, 800ef56 <_vfiprintf_r+0x13a>
 800ef28:	9207      	str	r2, [sp, #28]
 800ef2a:	e014      	b.n	800ef56 <_vfiprintf_r+0x13a>
 800ef2c:	eba0 0308 	sub.w	r3, r0, r8
 800ef30:	fa09 f303 	lsl.w	r3, r9, r3
 800ef34:	4313      	orrs	r3, r2
 800ef36:	9304      	str	r3, [sp, #16]
 800ef38:	46a2      	mov	sl, r4
 800ef3a:	e7d2      	b.n	800eee2 <_vfiprintf_r+0xc6>
 800ef3c:	9b03      	ldr	r3, [sp, #12]
 800ef3e:	1d19      	adds	r1, r3, #4
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	9103      	str	r1, [sp, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	bfbb      	ittet	lt
 800ef48:	425b      	neglt	r3, r3
 800ef4a:	f042 0202 	orrlt.w	r2, r2, #2
 800ef4e:	9307      	strge	r3, [sp, #28]
 800ef50:	9307      	strlt	r3, [sp, #28]
 800ef52:	bfb8      	it	lt
 800ef54:	9204      	strlt	r2, [sp, #16]
 800ef56:	7823      	ldrb	r3, [r4, #0]
 800ef58:	2b2e      	cmp	r3, #46	; 0x2e
 800ef5a:	d10c      	bne.n	800ef76 <_vfiprintf_r+0x15a>
 800ef5c:	7863      	ldrb	r3, [r4, #1]
 800ef5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ef60:	d134      	bne.n	800efcc <_vfiprintf_r+0x1b0>
 800ef62:	9b03      	ldr	r3, [sp, #12]
 800ef64:	1d1a      	adds	r2, r3, #4
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	9203      	str	r2, [sp, #12]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	bfb8      	it	lt
 800ef6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef72:	3402      	adds	r4, #2
 800ef74:	9305      	str	r3, [sp, #20]
 800ef76:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f04c <_vfiprintf_r+0x230>
 800ef7a:	7821      	ldrb	r1, [r4, #0]
 800ef7c:	2203      	movs	r2, #3
 800ef7e:	4650      	mov	r0, sl
 800ef80:	f7f1 f926 	bl	80001d0 <memchr>
 800ef84:	b138      	cbz	r0, 800ef96 <_vfiprintf_r+0x17a>
 800ef86:	9b04      	ldr	r3, [sp, #16]
 800ef88:	eba0 000a 	sub.w	r0, r0, sl
 800ef8c:	2240      	movs	r2, #64	; 0x40
 800ef8e:	4082      	lsls	r2, r0
 800ef90:	4313      	orrs	r3, r2
 800ef92:	3401      	adds	r4, #1
 800ef94:	9304      	str	r3, [sp, #16]
 800ef96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef9a:	4829      	ldr	r0, [pc, #164]	; (800f040 <_vfiprintf_r+0x224>)
 800ef9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efa0:	2206      	movs	r2, #6
 800efa2:	f7f1 f915 	bl	80001d0 <memchr>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	d03f      	beq.n	800f02a <_vfiprintf_r+0x20e>
 800efaa:	4b26      	ldr	r3, [pc, #152]	; (800f044 <_vfiprintf_r+0x228>)
 800efac:	bb1b      	cbnz	r3, 800eff6 <_vfiprintf_r+0x1da>
 800efae:	9b03      	ldr	r3, [sp, #12]
 800efb0:	3307      	adds	r3, #7
 800efb2:	f023 0307 	bic.w	r3, r3, #7
 800efb6:	3308      	adds	r3, #8
 800efb8:	9303      	str	r3, [sp, #12]
 800efba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efbc:	443b      	add	r3, r7
 800efbe:	9309      	str	r3, [sp, #36]	; 0x24
 800efc0:	e768      	b.n	800ee94 <_vfiprintf_r+0x78>
 800efc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800efc6:	460c      	mov	r4, r1
 800efc8:	2001      	movs	r0, #1
 800efca:	e7a6      	b.n	800ef1a <_vfiprintf_r+0xfe>
 800efcc:	2300      	movs	r3, #0
 800efce:	3401      	adds	r4, #1
 800efd0:	9305      	str	r3, [sp, #20]
 800efd2:	4619      	mov	r1, r3
 800efd4:	f04f 0c0a 	mov.w	ip, #10
 800efd8:	4620      	mov	r0, r4
 800efda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efde:	3a30      	subs	r2, #48	; 0x30
 800efe0:	2a09      	cmp	r2, #9
 800efe2:	d903      	bls.n	800efec <_vfiprintf_r+0x1d0>
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d0c6      	beq.n	800ef76 <_vfiprintf_r+0x15a>
 800efe8:	9105      	str	r1, [sp, #20]
 800efea:	e7c4      	b.n	800ef76 <_vfiprintf_r+0x15a>
 800efec:	fb0c 2101 	mla	r1, ip, r1, r2
 800eff0:	4604      	mov	r4, r0
 800eff2:	2301      	movs	r3, #1
 800eff4:	e7f0      	b.n	800efd8 <_vfiprintf_r+0x1bc>
 800eff6:	ab03      	add	r3, sp, #12
 800eff8:	9300      	str	r3, [sp, #0]
 800effa:	462a      	mov	r2, r5
 800effc:	4b12      	ldr	r3, [pc, #72]	; (800f048 <_vfiprintf_r+0x22c>)
 800effe:	a904      	add	r1, sp, #16
 800f000:	4630      	mov	r0, r6
 800f002:	f3af 8000 	nop.w
 800f006:	4607      	mov	r7, r0
 800f008:	1c78      	adds	r0, r7, #1
 800f00a:	d1d6      	bne.n	800efba <_vfiprintf_r+0x19e>
 800f00c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f00e:	07d9      	lsls	r1, r3, #31
 800f010:	d405      	bmi.n	800f01e <_vfiprintf_r+0x202>
 800f012:	89ab      	ldrh	r3, [r5, #12]
 800f014:	059a      	lsls	r2, r3, #22
 800f016:	d402      	bmi.n	800f01e <_vfiprintf_r+0x202>
 800f018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f01a:	f7fe fc97 	bl	800d94c <__retarget_lock_release_recursive>
 800f01e:	89ab      	ldrh	r3, [r5, #12]
 800f020:	065b      	lsls	r3, r3, #25
 800f022:	f53f af1d 	bmi.w	800ee60 <_vfiprintf_r+0x44>
 800f026:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f028:	e71c      	b.n	800ee64 <_vfiprintf_r+0x48>
 800f02a:	ab03      	add	r3, sp, #12
 800f02c:	9300      	str	r3, [sp, #0]
 800f02e:	462a      	mov	r2, r5
 800f030:	4b05      	ldr	r3, [pc, #20]	; (800f048 <_vfiprintf_r+0x22c>)
 800f032:	a904      	add	r1, sp, #16
 800f034:	4630      	mov	r0, r6
 800f036:	f000 f879 	bl	800f12c <_printf_i>
 800f03a:	e7e4      	b.n	800f006 <_vfiprintf_r+0x1ea>
 800f03c:	0800fcb9 	.word	0x0800fcb9
 800f040:	0800fcc3 	.word	0x0800fcc3
 800f044:	00000000 	.word	0x00000000
 800f048:	0800edf9 	.word	0x0800edf9
 800f04c:	0800fcbf 	.word	0x0800fcbf

0800f050 <_printf_common>:
 800f050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f054:	4616      	mov	r6, r2
 800f056:	4699      	mov	r9, r3
 800f058:	688a      	ldr	r2, [r1, #8]
 800f05a:	690b      	ldr	r3, [r1, #16]
 800f05c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f060:	4293      	cmp	r3, r2
 800f062:	bfb8      	it	lt
 800f064:	4613      	movlt	r3, r2
 800f066:	6033      	str	r3, [r6, #0]
 800f068:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f06c:	4607      	mov	r7, r0
 800f06e:	460c      	mov	r4, r1
 800f070:	b10a      	cbz	r2, 800f076 <_printf_common+0x26>
 800f072:	3301      	adds	r3, #1
 800f074:	6033      	str	r3, [r6, #0]
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	0699      	lsls	r1, r3, #26
 800f07a:	bf42      	ittt	mi
 800f07c:	6833      	ldrmi	r3, [r6, #0]
 800f07e:	3302      	addmi	r3, #2
 800f080:	6033      	strmi	r3, [r6, #0]
 800f082:	6825      	ldr	r5, [r4, #0]
 800f084:	f015 0506 	ands.w	r5, r5, #6
 800f088:	d106      	bne.n	800f098 <_printf_common+0x48>
 800f08a:	f104 0a19 	add.w	sl, r4, #25
 800f08e:	68e3      	ldr	r3, [r4, #12]
 800f090:	6832      	ldr	r2, [r6, #0]
 800f092:	1a9b      	subs	r3, r3, r2
 800f094:	42ab      	cmp	r3, r5
 800f096:	dc26      	bgt.n	800f0e6 <_printf_common+0x96>
 800f098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f09c:	1e13      	subs	r3, r2, #0
 800f09e:	6822      	ldr	r2, [r4, #0]
 800f0a0:	bf18      	it	ne
 800f0a2:	2301      	movne	r3, #1
 800f0a4:	0692      	lsls	r2, r2, #26
 800f0a6:	d42b      	bmi.n	800f100 <_printf_common+0xb0>
 800f0a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f0ac:	4649      	mov	r1, r9
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	47c0      	blx	r8
 800f0b2:	3001      	adds	r0, #1
 800f0b4:	d01e      	beq.n	800f0f4 <_printf_common+0xa4>
 800f0b6:	6823      	ldr	r3, [r4, #0]
 800f0b8:	6922      	ldr	r2, [r4, #16]
 800f0ba:	f003 0306 	and.w	r3, r3, #6
 800f0be:	2b04      	cmp	r3, #4
 800f0c0:	bf02      	ittt	eq
 800f0c2:	68e5      	ldreq	r5, [r4, #12]
 800f0c4:	6833      	ldreq	r3, [r6, #0]
 800f0c6:	1aed      	subeq	r5, r5, r3
 800f0c8:	68a3      	ldr	r3, [r4, #8]
 800f0ca:	bf0c      	ite	eq
 800f0cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0d0:	2500      	movne	r5, #0
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	bfc4      	itt	gt
 800f0d6:	1a9b      	subgt	r3, r3, r2
 800f0d8:	18ed      	addgt	r5, r5, r3
 800f0da:	2600      	movs	r6, #0
 800f0dc:	341a      	adds	r4, #26
 800f0de:	42b5      	cmp	r5, r6
 800f0e0:	d11a      	bne.n	800f118 <_printf_common+0xc8>
 800f0e2:	2000      	movs	r0, #0
 800f0e4:	e008      	b.n	800f0f8 <_printf_common+0xa8>
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	4652      	mov	r2, sl
 800f0ea:	4649      	mov	r1, r9
 800f0ec:	4638      	mov	r0, r7
 800f0ee:	47c0      	blx	r8
 800f0f0:	3001      	adds	r0, #1
 800f0f2:	d103      	bne.n	800f0fc <_printf_common+0xac>
 800f0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0fc:	3501      	adds	r5, #1
 800f0fe:	e7c6      	b.n	800f08e <_printf_common+0x3e>
 800f100:	18e1      	adds	r1, r4, r3
 800f102:	1c5a      	adds	r2, r3, #1
 800f104:	2030      	movs	r0, #48	; 0x30
 800f106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f10a:	4422      	add	r2, r4
 800f10c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f114:	3302      	adds	r3, #2
 800f116:	e7c7      	b.n	800f0a8 <_printf_common+0x58>
 800f118:	2301      	movs	r3, #1
 800f11a:	4622      	mov	r2, r4
 800f11c:	4649      	mov	r1, r9
 800f11e:	4638      	mov	r0, r7
 800f120:	47c0      	blx	r8
 800f122:	3001      	adds	r0, #1
 800f124:	d0e6      	beq.n	800f0f4 <_printf_common+0xa4>
 800f126:	3601      	adds	r6, #1
 800f128:	e7d9      	b.n	800f0de <_printf_common+0x8e>
	...

0800f12c <_printf_i>:
 800f12c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f130:	7e0f      	ldrb	r7, [r1, #24]
 800f132:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f134:	2f78      	cmp	r7, #120	; 0x78
 800f136:	4691      	mov	r9, r2
 800f138:	4680      	mov	r8, r0
 800f13a:	460c      	mov	r4, r1
 800f13c:	469a      	mov	sl, r3
 800f13e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f142:	d807      	bhi.n	800f154 <_printf_i+0x28>
 800f144:	2f62      	cmp	r7, #98	; 0x62
 800f146:	d80a      	bhi.n	800f15e <_printf_i+0x32>
 800f148:	2f00      	cmp	r7, #0
 800f14a:	f000 80d4 	beq.w	800f2f6 <_printf_i+0x1ca>
 800f14e:	2f58      	cmp	r7, #88	; 0x58
 800f150:	f000 80c0 	beq.w	800f2d4 <_printf_i+0x1a8>
 800f154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f15c:	e03a      	b.n	800f1d4 <_printf_i+0xa8>
 800f15e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f162:	2b15      	cmp	r3, #21
 800f164:	d8f6      	bhi.n	800f154 <_printf_i+0x28>
 800f166:	a101      	add	r1, pc, #4	; (adr r1, 800f16c <_printf_i+0x40>)
 800f168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f16c:	0800f1c5 	.word	0x0800f1c5
 800f170:	0800f1d9 	.word	0x0800f1d9
 800f174:	0800f155 	.word	0x0800f155
 800f178:	0800f155 	.word	0x0800f155
 800f17c:	0800f155 	.word	0x0800f155
 800f180:	0800f155 	.word	0x0800f155
 800f184:	0800f1d9 	.word	0x0800f1d9
 800f188:	0800f155 	.word	0x0800f155
 800f18c:	0800f155 	.word	0x0800f155
 800f190:	0800f155 	.word	0x0800f155
 800f194:	0800f155 	.word	0x0800f155
 800f198:	0800f2dd 	.word	0x0800f2dd
 800f19c:	0800f205 	.word	0x0800f205
 800f1a0:	0800f297 	.word	0x0800f297
 800f1a4:	0800f155 	.word	0x0800f155
 800f1a8:	0800f155 	.word	0x0800f155
 800f1ac:	0800f2ff 	.word	0x0800f2ff
 800f1b0:	0800f155 	.word	0x0800f155
 800f1b4:	0800f205 	.word	0x0800f205
 800f1b8:	0800f155 	.word	0x0800f155
 800f1bc:	0800f155 	.word	0x0800f155
 800f1c0:	0800f29f 	.word	0x0800f29f
 800f1c4:	682b      	ldr	r3, [r5, #0]
 800f1c6:	1d1a      	adds	r2, r3, #4
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	602a      	str	r2, [r5, #0]
 800f1cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	e09f      	b.n	800f318 <_printf_i+0x1ec>
 800f1d8:	6820      	ldr	r0, [r4, #0]
 800f1da:	682b      	ldr	r3, [r5, #0]
 800f1dc:	0607      	lsls	r7, r0, #24
 800f1de:	f103 0104 	add.w	r1, r3, #4
 800f1e2:	6029      	str	r1, [r5, #0]
 800f1e4:	d501      	bpl.n	800f1ea <_printf_i+0xbe>
 800f1e6:	681e      	ldr	r6, [r3, #0]
 800f1e8:	e003      	b.n	800f1f2 <_printf_i+0xc6>
 800f1ea:	0646      	lsls	r6, r0, #25
 800f1ec:	d5fb      	bpl.n	800f1e6 <_printf_i+0xba>
 800f1ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f1f2:	2e00      	cmp	r6, #0
 800f1f4:	da03      	bge.n	800f1fe <_printf_i+0xd2>
 800f1f6:	232d      	movs	r3, #45	; 0x2d
 800f1f8:	4276      	negs	r6, r6
 800f1fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1fe:	485a      	ldr	r0, [pc, #360]	; (800f368 <_printf_i+0x23c>)
 800f200:	230a      	movs	r3, #10
 800f202:	e012      	b.n	800f22a <_printf_i+0xfe>
 800f204:	682b      	ldr	r3, [r5, #0]
 800f206:	6820      	ldr	r0, [r4, #0]
 800f208:	1d19      	adds	r1, r3, #4
 800f20a:	6029      	str	r1, [r5, #0]
 800f20c:	0605      	lsls	r5, r0, #24
 800f20e:	d501      	bpl.n	800f214 <_printf_i+0xe8>
 800f210:	681e      	ldr	r6, [r3, #0]
 800f212:	e002      	b.n	800f21a <_printf_i+0xee>
 800f214:	0641      	lsls	r1, r0, #25
 800f216:	d5fb      	bpl.n	800f210 <_printf_i+0xe4>
 800f218:	881e      	ldrh	r6, [r3, #0]
 800f21a:	4853      	ldr	r0, [pc, #332]	; (800f368 <_printf_i+0x23c>)
 800f21c:	2f6f      	cmp	r7, #111	; 0x6f
 800f21e:	bf0c      	ite	eq
 800f220:	2308      	moveq	r3, #8
 800f222:	230a      	movne	r3, #10
 800f224:	2100      	movs	r1, #0
 800f226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f22a:	6865      	ldr	r5, [r4, #4]
 800f22c:	60a5      	str	r5, [r4, #8]
 800f22e:	2d00      	cmp	r5, #0
 800f230:	bfa2      	ittt	ge
 800f232:	6821      	ldrge	r1, [r4, #0]
 800f234:	f021 0104 	bicge.w	r1, r1, #4
 800f238:	6021      	strge	r1, [r4, #0]
 800f23a:	b90e      	cbnz	r6, 800f240 <_printf_i+0x114>
 800f23c:	2d00      	cmp	r5, #0
 800f23e:	d04b      	beq.n	800f2d8 <_printf_i+0x1ac>
 800f240:	4615      	mov	r5, r2
 800f242:	fbb6 f1f3 	udiv	r1, r6, r3
 800f246:	fb03 6711 	mls	r7, r3, r1, r6
 800f24a:	5dc7      	ldrb	r7, [r0, r7]
 800f24c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f250:	4637      	mov	r7, r6
 800f252:	42bb      	cmp	r3, r7
 800f254:	460e      	mov	r6, r1
 800f256:	d9f4      	bls.n	800f242 <_printf_i+0x116>
 800f258:	2b08      	cmp	r3, #8
 800f25a:	d10b      	bne.n	800f274 <_printf_i+0x148>
 800f25c:	6823      	ldr	r3, [r4, #0]
 800f25e:	07de      	lsls	r6, r3, #31
 800f260:	d508      	bpl.n	800f274 <_printf_i+0x148>
 800f262:	6923      	ldr	r3, [r4, #16]
 800f264:	6861      	ldr	r1, [r4, #4]
 800f266:	4299      	cmp	r1, r3
 800f268:	bfde      	ittt	le
 800f26a:	2330      	movle	r3, #48	; 0x30
 800f26c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f270:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f274:	1b52      	subs	r2, r2, r5
 800f276:	6122      	str	r2, [r4, #16]
 800f278:	f8cd a000 	str.w	sl, [sp]
 800f27c:	464b      	mov	r3, r9
 800f27e:	aa03      	add	r2, sp, #12
 800f280:	4621      	mov	r1, r4
 800f282:	4640      	mov	r0, r8
 800f284:	f7ff fee4 	bl	800f050 <_printf_common>
 800f288:	3001      	adds	r0, #1
 800f28a:	d14a      	bne.n	800f322 <_printf_i+0x1f6>
 800f28c:	f04f 30ff 	mov.w	r0, #4294967295
 800f290:	b004      	add	sp, #16
 800f292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f296:	6823      	ldr	r3, [r4, #0]
 800f298:	f043 0320 	orr.w	r3, r3, #32
 800f29c:	6023      	str	r3, [r4, #0]
 800f29e:	4833      	ldr	r0, [pc, #204]	; (800f36c <_printf_i+0x240>)
 800f2a0:	2778      	movs	r7, #120	; 0x78
 800f2a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f2a6:	6823      	ldr	r3, [r4, #0]
 800f2a8:	6829      	ldr	r1, [r5, #0]
 800f2aa:	061f      	lsls	r7, r3, #24
 800f2ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800f2b0:	d402      	bmi.n	800f2b8 <_printf_i+0x18c>
 800f2b2:	065f      	lsls	r7, r3, #25
 800f2b4:	bf48      	it	mi
 800f2b6:	b2b6      	uxthmi	r6, r6
 800f2b8:	07df      	lsls	r7, r3, #31
 800f2ba:	bf48      	it	mi
 800f2bc:	f043 0320 	orrmi.w	r3, r3, #32
 800f2c0:	6029      	str	r1, [r5, #0]
 800f2c2:	bf48      	it	mi
 800f2c4:	6023      	strmi	r3, [r4, #0]
 800f2c6:	b91e      	cbnz	r6, 800f2d0 <_printf_i+0x1a4>
 800f2c8:	6823      	ldr	r3, [r4, #0]
 800f2ca:	f023 0320 	bic.w	r3, r3, #32
 800f2ce:	6023      	str	r3, [r4, #0]
 800f2d0:	2310      	movs	r3, #16
 800f2d2:	e7a7      	b.n	800f224 <_printf_i+0xf8>
 800f2d4:	4824      	ldr	r0, [pc, #144]	; (800f368 <_printf_i+0x23c>)
 800f2d6:	e7e4      	b.n	800f2a2 <_printf_i+0x176>
 800f2d8:	4615      	mov	r5, r2
 800f2da:	e7bd      	b.n	800f258 <_printf_i+0x12c>
 800f2dc:	682b      	ldr	r3, [r5, #0]
 800f2de:	6826      	ldr	r6, [r4, #0]
 800f2e0:	6961      	ldr	r1, [r4, #20]
 800f2e2:	1d18      	adds	r0, r3, #4
 800f2e4:	6028      	str	r0, [r5, #0]
 800f2e6:	0635      	lsls	r5, r6, #24
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	d501      	bpl.n	800f2f0 <_printf_i+0x1c4>
 800f2ec:	6019      	str	r1, [r3, #0]
 800f2ee:	e002      	b.n	800f2f6 <_printf_i+0x1ca>
 800f2f0:	0670      	lsls	r0, r6, #25
 800f2f2:	d5fb      	bpl.n	800f2ec <_printf_i+0x1c0>
 800f2f4:	8019      	strh	r1, [r3, #0]
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	6123      	str	r3, [r4, #16]
 800f2fa:	4615      	mov	r5, r2
 800f2fc:	e7bc      	b.n	800f278 <_printf_i+0x14c>
 800f2fe:	682b      	ldr	r3, [r5, #0]
 800f300:	1d1a      	adds	r2, r3, #4
 800f302:	602a      	str	r2, [r5, #0]
 800f304:	681d      	ldr	r5, [r3, #0]
 800f306:	6862      	ldr	r2, [r4, #4]
 800f308:	2100      	movs	r1, #0
 800f30a:	4628      	mov	r0, r5
 800f30c:	f7f0 ff60 	bl	80001d0 <memchr>
 800f310:	b108      	cbz	r0, 800f316 <_printf_i+0x1ea>
 800f312:	1b40      	subs	r0, r0, r5
 800f314:	6060      	str	r0, [r4, #4]
 800f316:	6863      	ldr	r3, [r4, #4]
 800f318:	6123      	str	r3, [r4, #16]
 800f31a:	2300      	movs	r3, #0
 800f31c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f320:	e7aa      	b.n	800f278 <_printf_i+0x14c>
 800f322:	6923      	ldr	r3, [r4, #16]
 800f324:	462a      	mov	r2, r5
 800f326:	4649      	mov	r1, r9
 800f328:	4640      	mov	r0, r8
 800f32a:	47d0      	blx	sl
 800f32c:	3001      	adds	r0, #1
 800f32e:	d0ad      	beq.n	800f28c <_printf_i+0x160>
 800f330:	6823      	ldr	r3, [r4, #0]
 800f332:	079b      	lsls	r3, r3, #30
 800f334:	d413      	bmi.n	800f35e <_printf_i+0x232>
 800f336:	68e0      	ldr	r0, [r4, #12]
 800f338:	9b03      	ldr	r3, [sp, #12]
 800f33a:	4298      	cmp	r0, r3
 800f33c:	bfb8      	it	lt
 800f33e:	4618      	movlt	r0, r3
 800f340:	e7a6      	b.n	800f290 <_printf_i+0x164>
 800f342:	2301      	movs	r3, #1
 800f344:	4632      	mov	r2, r6
 800f346:	4649      	mov	r1, r9
 800f348:	4640      	mov	r0, r8
 800f34a:	47d0      	blx	sl
 800f34c:	3001      	adds	r0, #1
 800f34e:	d09d      	beq.n	800f28c <_printf_i+0x160>
 800f350:	3501      	adds	r5, #1
 800f352:	68e3      	ldr	r3, [r4, #12]
 800f354:	9903      	ldr	r1, [sp, #12]
 800f356:	1a5b      	subs	r3, r3, r1
 800f358:	42ab      	cmp	r3, r5
 800f35a:	dcf2      	bgt.n	800f342 <_printf_i+0x216>
 800f35c:	e7eb      	b.n	800f336 <_printf_i+0x20a>
 800f35e:	2500      	movs	r5, #0
 800f360:	f104 0619 	add.w	r6, r4, #25
 800f364:	e7f5      	b.n	800f352 <_printf_i+0x226>
 800f366:	bf00      	nop
 800f368:	0800fcca 	.word	0x0800fcca
 800f36c:	0800fcdb 	.word	0x0800fcdb

0800f370 <__swbuf_r>:
 800f370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f372:	460e      	mov	r6, r1
 800f374:	4614      	mov	r4, r2
 800f376:	4605      	mov	r5, r0
 800f378:	b118      	cbz	r0, 800f382 <__swbuf_r+0x12>
 800f37a:	6a03      	ldr	r3, [r0, #32]
 800f37c:	b90b      	cbnz	r3, 800f382 <__swbuf_r+0x12>
 800f37e:	f7fe f9df 	bl	800d740 <__sinit>
 800f382:	69a3      	ldr	r3, [r4, #24]
 800f384:	60a3      	str	r3, [r4, #8]
 800f386:	89a3      	ldrh	r3, [r4, #12]
 800f388:	071a      	lsls	r2, r3, #28
 800f38a:	d525      	bpl.n	800f3d8 <__swbuf_r+0x68>
 800f38c:	6923      	ldr	r3, [r4, #16]
 800f38e:	b31b      	cbz	r3, 800f3d8 <__swbuf_r+0x68>
 800f390:	6823      	ldr	r3, [r4, #0]
 800f392:	6922      	ldr	r2, [r4, #16]
 800f394:	1a98      	subs	r0, r3, r2
 800f396:	6963      	ldr	r3, [r4, #20]
 800f398:	b2f6      	uxtb	r6, r6
 800f39a:	4283      	cmp	r3, r0
 800f39c:	4637      	mov	r7, r6
 800f39e:	dc04      	bgt.n	800f3aa <__swbuf_r+0x3a>
 800f3a0:	4621      	mov	r1, r4
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	f7ff fc84 	bl	800ecb0 <_fflush_r>
 800f3a8:	b9e0      	cbnz	r0, 800f3e4 <__swbuf_r+0x74>
 800f3aa:	68a3      	ldr	r3, [r4, #8]
 800f3ac:	3b01      	subs	r3, #1
 800f3ae:	60a3      	str	r3, [r4, #8]
 800f3b0:	6823      	ldr	r3, [r4, #0]
 800f3b2:	1c5a      	adds	r2, r3, #1
 800f3b4:	6022      	str	r2, [r4, #0]
 800f3b6:	701e      	strb	r6, [r3, #0]
 800f3b8:	6962      	ldr	r2, [r4, #20]
 800f3ba:	1c43      	adds	r3, r0, #1
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d004      	beq.n	800f3ca <__swbuf_r+0x5a>
 800f3c0:	89a3      	ldrh	r3, [r4, #12]
 800f3c2:	07db      	lsls	r3, r3, #31
 800f3c4:	d506      	bpl.n	800f3d4 <__swbuf_r+0x64>
 800f3c6:	2e0a      	cmp	r6, #10
 800f3c8:	d104      	bne.n	800f3d4 <__swbuf_r+0x64>
 800f3ca:	4621      	mov	r1, r4
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	f7ff fc6f 	bl	800ecb0 <_fflush_r>
 800f3d2:	b938      	cbnz	r0, 800f3e4 <__swbuf_r+0x74>
 800f3d4:	4638      	mov	r0, r7
 800f3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3d8:	4621      	mov	r1, r4
 800f3da:	4628      	mov	r0, r5
 800f3dc:	f000 f806 	bl	800f3ec <__swsetup_r>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d0d5      	beq.n	800f390 <__swbuf_r+0x20>
 800f3e4:	f04f 37ff 	mov.w	r7, #4294967295
 800f3e8:	e7f4      	b.n	800f3d4 <__swbuf_r+0x64>
	...

0800f3ec <__swsetup_r>:
 800f3ec:	b538      	push	{r3, r4, r5, lr}
 800f3ee:	4b2a      	ldr	r3, [pc, #168]	; (800f498 <__swsetup_r+0xac>)
 800f3f0:	4605      	mov	r5, r0
 800f3f2:	6818      	ldr	r0, [r3, #0]
 800f3f4:	460c      	mov	r4, r1
 800f3f6:	b118      	cbz	r0, 800f400 <__swsetup_r+0x14>
 800f3f8:	6a03      	ldr	r3, [r0, #32]
 800f3fa:	b90b      	cbnz	r3, 800f400 <__swsetup_r+0x14>
 800f3fc:	f7fe f9a0 	bl	800d740 <__sinit>
 800f400:	89a3      	ldrh	r3, [r4, #12]
 800f402:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f406:	0718      	lsls	r0, r3, #28
 800f408:	d422      	bmi.n	800f450 <__swsetup_r+0x64>
 800f40a:	06d9      	lsls	r1, r3, #27
 800f40c:	d407      	bmi.n	800f41e <__swsetup_r+0x32>
 800f40e:	2309      	movs	r3, #9
 800f410:	602b      	str	r3, [r5, #0]
 800f412:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f416:	81a3      	strh	r3, [r4, #12]
 800f418:	f04f 30ff 	mov.w	r0, #4294967295
 800f41c:	e034      	b.n	800f488 <__swsetup_r+0x9c>
 800f41e:	0758      	lsls	r0, r3, #29
 800f420:	d512      	bpl.n	800f448 <__swsetup_r+0x5c>
 800f422:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f424:	b141      	cbz	r1, 800f438 <__swsetup_r+0x4c>
 800f426:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f42a:	4299      	cmp	r1, r3
 800f42c:	d002      	beq.n	800f434 <__swsetup_r+0x48>
 800f42e:	4628      	mov	r0, r5
 800f430:	f7fe fa9c 	bl	800d96c <_free_r>
 800f434:	2300      	movs	r3, #0
 800f436:	6363      	str	r3, [r4, #52]	; 0x34
 800f438:	89a3      	ldrh	r3, [r4, #12]
 800f43a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f43e:	81a3      	strh	r3, [r4, #12]
 800f440:	2300      	movs	r3, #0
 800f442:	6063      	str	r3, [r4, #4]
 800f444:	6923      	ldr	r3, [r4, #16]
 800f446:	6023      	str	r3, [r4, #0]
 800f448:	89a3      	ldrh	r3, [r4, #12]
 800f44a:	f043 0308 	orr.w	r3, r3, #8
 800f44e:	81a3      	strh	r3, [r4, #12]
 800f450:	6923      	ldr	r3, [r4, #16]
 800f452:	b94b      	cbnz	r3, 800f468 <__swsetup_r+0x7c>
 800f454:	89a3      	ldrh	r3, [r4, #12]
 800f456:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f45a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f45e:	d003      	beq.n	800f468 <__swsetup_r+0x7c>
 800f460:	4621      	mov	r1, r4
 800f462:	4628      	mov	r0, r5
 800f464:	f000 f884 	bl	800f570 <__smakebuf_r>
 800f468:	89a0      	ldrh	r0, [r4, #12]
 800f46a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f46e:	f010 0301 	ands.w	r3, r0, #1
 800f472:	d00a      	beq.n	800f48a <__swsetup_r+0x9e>
 800f474:	2300      	movs	r3, #0
 800f476:	60a3      	str	r3, [r4, #8]
 800f478:	6963      	ldr	r3, [r4, #20]
 800f47a:	425b      	negs	r3, r3
 800f47c:	61a3      	str	r3, [r4, #24]
 800f47e:	6923      	ldr	r3, [r4, #16]
 800f480:	b943      	cbnz	r3, 800f494 <__swsetup_r+0xa8>
 800f482:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f486:	d1c4      	bne.n	800f412 <__swsetup_r+0x26>
 800f488:	bd38      	pop	{r3, r4, r5, pc}
 800f48a:	0781      	lsls	r1, r0, #30
 800f48c:	bf58      	it	pl
 800f48e:	6963      	ldrpl	r3, [r4, #20]
 800f490:	60a3      	str	r3, [r4, #8]
 800f492:	e7f4      	b.n	800f47e <__swsetup_r+0x92>
 800f494:	2000      	movs	r0, #0
 800f496:	e7f7      	b.n	800f488 <__swsetup_r+0x9c>
 800f498:	200001e4 	.word	0x200001e4

0800f49c <_raise_r>:
 800f49c:	291f      	cmp	r1, #31
 800f49e:	b538      	push	{r3, r4, r5, lr}
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	460d      	mov	r5, r1
 800f4a4:	d904      	bls.n	800f4b0 <_raise_r+0x14>
 800f4a6:	2316      	movs	r3, #22
 800f4a8:	6003      	str	r3, [r0, #0]
 800f4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ae:	bd38      	pop	{r3, r4, r5, pc}
 800f4b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f4b2:	b112      	cbz	r2, 800f4ba <_raise_r+0x1e>
 800f4b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4b8:	b94b      	cbnz	r3, 800f4ce <_raise_r+0x32>
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f000 f830 	bl	800f520 <_getpid_r>
 800f4c0:	462a      	mov	r2, r5
 800f4c2:	4601      	mov	r1, r0
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4ca:	f000 b817 	b.w	800f4fc <_kill_r>
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	d00a      	beq.n	800f4e8 <_raise_r+0x4c>
 800f4d2:	1c59      	adds	r1, r3, #1
 800f4d4:	d103      	bne.n	800f4de <_raise_r+0x42>
 800f4d6:	2316      	movs	r3, #22
 800f4d8:	6003      	str	r3, [r0, #0]
 800f4da:	2001      	movs	r0, #1
 800f4dc:	e7e7      	b.n	800f4ae <_raise_r+0x12>
 800f4de:	2400      	movs	r4, #0
 800f4e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	4798      	blx	r3
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	e7e0      	b.n	800f4ae <_raise_r+0x12>

0800f4ec <raise>:
 800f4ec:	4b02      	ldr	r3, [pc, #8]	; (800f4f8 <raise+0xc>)
 800f4ee:	4601      	mov	r1, r0
 800f4f0:	6818      	ldr	r0, [r3, #0]
 800f4f2:	f7ff bfd3 	b.w	800f49c <_raise_r>
 800f4f6:	bf00      	nop
 800f4f8:	200001e4 	.word	0x200001e4

0800f4fc <_kill_r>:
 800f4fc:	b538      	push	{r3, r4, r5, lr}
 800f4fe:	4d07      	ldr	r5, [pc, #28]	; (800f51c <_kill_r+0x20>)
 800f500:	2300      	movs	r3, #0
 800f502:	4604      	mov	r4, r0
 800f504:	4608      	mov	r0, r1
 800f506:	4611      	mov	r1, r2
 800f508:	602b      	str	r3, [r5, #0]
 800f50a:	f7f3 f9a9 	bl	8002860 <_kill>
 800f50e:	1c43      	adds	r3, r0, #1
 800f510:	d102      	bne.n	800f518 <_kill_r+0x1c>
 800f512:	682b      	ldr	r3, [r5, #0]
 800f514:	b103      	cbz	r3, 800f518 <_kill_r+0x1c>
 800f516:	6023      	str	r3, [r4, #0]
 800f518:	bd38      	pop	{r3, r4, r5, pc}
 800f51a:	bf00      	nop
 800f51c:	200009e8 	.word	0x200009e8

0800f520 <_getpid_r>:
 800f520:	f7f3 b996 	b.w	8002850 <_getpid>

0800f524 <__swhatbuf_r>:
 800f524:	b570      	push	{r4, r5, r6, lr}
 800f526:	460c      	mov	r4, r1
 800f528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f52c:	2900      	cmp	r1, #0
 800f52e:	b096      	sub	sp, #88	; 0x58
 800f530:	4615      	mov	r5, r2
 800f532:	461e      	mov	r6, r3
 800f534:	da0d      	bge.n	800f552 <__swhatbuf_r+0x2e>
 800f536:	89a3      	ldrh	r3, [r4, #12]
 800f538:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f53c:	f04f 0100 	mov.w	r1, #0
 800f540:	bf0c      	ite	eq
 800f542:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f546:	2340      	movne	r3, #64	; 0x40
 800f548:	2000      	movs	r0, #0
 800f54a:	6031      	str	r1, [r6, #0]
 800f54c:	602b      	str	r3, [r5, #0]
 800f54e:	b016      	add	sp, #88	; 0x58
 800f550:	bd70      	pop	{r4, r5, r6, pc}
 800f552:	466a      	mov	r2, sp
 800f554:	f000 f848 	bl	800f5e8 <_fstat_r>
 800f558:	2800      	cmp	r0, #0
 800f55a:	dbec      	blt.n	800f536 <__swhatbuf_r+0x12>
 800f55c:	9901      	ldr	r1, [sp, #4]
 800f55e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f562:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f566:	4259      	negs	r1, r3
 800f568:	4159      	adcs	r1, r3
 800f56a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f56e:	e7eb      	b.n	800f548 <__swhatbuf_r+0x24>

0800f570 <__smakebuf_r>:
 800f570:	898b      	ldrh	r3, [r1, #12]
 800f572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f574:	079d      	lsls	r5, r3, #30
 800f576:	4606      	mov	r6, r0
 800f578:	460c      	mov	r4, r1
 800f57a:	d507      	bpl.n	800f58c <__smakebuf_r+0x1c>
 800f57c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f580:	6023      	str	r3, [r4, #0]
 800f582:	6123      	str	r3, [r4, #16]
 800f584:	2301      	movs	r3, #1
 800f586:	6163      	str	r3, [r4, #20]
 800f588:	b002      	add	sp, #8
 800f58a:	bd70      	pop	{r4, r5, r6, pc}
 800f58c:	ab01      	add	r3, sp, #4
 800f58e:	466a      	mov	r2, sp
 800f590:	f7ff ffc8 	bl	800f524 <__swhatbuf_r>
 800f594:	9900      	ldr	r1, [sp, #0]
 800f596:	4605      	mov	r5, r0
 800f598:	4630      	mov	r0, r6
 800f59a:	f7fe fdab 	bl	800e0f4 <_malloc_r>
 800f59e:	b948      	cbnz	r0, 800f5b4 <__smakebuf_r+0x44>
 800f5a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5a4:	059a      	lsls	r2, r3, #22
 800f5a6:	d4ef      	bmi.n	800f588 <__smakebuf_r+0x18>
 800f5a8:	f023 0303 	bic.w	r3, r3, #3
 800f5ac:	f043 0302 	orr.w	r3, r3, #2
 800f5b0:	81a3      	strh	r3, [r4, #12]
 800f5b2:	e7e3      	b.n	800f57c <__smakebuf_r+0xc>
 800f5b4:	89a3      	ldrh	r3, [r4, #12]
 800f5b6:	6020      	str	r0, [r4, #0]
 800f5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5bc:	81a3      	strh	r3, [r4, #12]
 800f5be:	9b00      	ldr	r3, [sp, #0]
 800f5c0:	6163      	str	r3, [r4, #20]
 800f5c2:	9b01      	ldr	r3, [sp, #4]
 800f5c4:	6120      	str	r0, [r4, #16]
 800f5c6:	b15b      	cbz	r3, 800f5e0 <__smakebuf_r+0x70>
 800f5c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5cc:	4630      	mov	r0, r6
 800f5ce:	f000 f81d 	bl	800f60c <_isatty_r>
 800f5d2:	b128      	cbz	r0, 800f5e0 <__smakebuf_r+0x70>
 800f5d4:	89a3      	ldrh	r3, [r4, #12]
 800f5d6:	f023 0303 	bic.w	r3, r3, #3
 800f5da:	f043 0301 	orr.w	r3, r3, #1
 800f5de:	81a3      	strh	r3, [r4, #12]
 800f5e0:	89a3      	ldrh	r3, [r4, #12]
 800f5e2:	431d      	orrs	r5, r3
 800f5e4:	81a5      	strh	r5, [r4, #12]
 800f5e6:	e7cf      	b.n	800f588 <__smakebuf_r+0x18>

0800f5e8 <_fstat_r>:
 800f5e8:	b538      	push	{r3, r4, r5, lr}
 800f5ea:	4d07      	ldr	r5, [pc, #28]	; (800f608 <_fstat_r+0x20>)
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	4604      	mov	r4, r0
 800f5f0:	4608      	mov	r0, r1
 800f5f2:	4611      	mov	r1, r2
 800f5f4:	602b      	str	r3, [r5, #0]
 800f5f6:	f7f3 f992 	bl	800291e <_fstat>
 800f5fa:	1c43      	adds	r3, r0, #1
 800f5fc:	d102      	bne.n	800f604 <_fstat_r+0x1c>
 800f5fe:	682b      	ldr	r3, [r5, #0]
 800f600:	b103      	cbz	r3, 800f604 <_fstat_r+0x1c>
 800f602:	6023      	str	r3, [r4, #0]
 800f604:	bd38      	pop	{r3, r4, r5, pc}
 800f606:	bf00      	nop
 800f608:	200009e8 	.word	0x200009e8

0800f60c <_isatty_r>:
 800f60c:	b538      	push	{r3, r4, r5, lr}
 800f60e:	4d06      	ldr	r5, [pc, #24]	; (800f628 <_isatty_r+0x1c>)
 800f610:	2300      	movs	r3, #0
 800f612:	4604      	mov	r4, r0
 800f614:	4608      	mov	r0, r1
 800f616:	602b      	str	r3, [r5, #0]
 800f618:	f7f3 f991 	bl	800293e <_isatty>
 800f61c:	1c43      	adds	r3, r0, #1
 800f61e:	d102      	bne.n	800f626 <_isatty_r+0x1a>
 800f620:	682b      	ldr	r3, [r5, #0]
 800f622:	b103      	cbz	r3, 800f626 <_isatty_r+0x1a>
 800f624:	6023      	str	r3, [r4, #0]
 800f626:	bd38      	pop	{r3, r4, r5, pc}
 800f628:	200009e8 	.word	0x200009e8

0800f62c <_init>:
 800f62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f62e:	bf00      	nop
 800f630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f632:	bc08      	pop	{r3}
 800f634:	469e      	mov	lr, r3
 800f636:	4770      	bx	lr

0800f638 <_fini>:
 800f638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f63a:	bf00      	nop
 800f63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f63e:	bc08      	pop	{r3}
 800f640:	469e      	mov	lr, r3
 800f642:	4770      	bx	lr
