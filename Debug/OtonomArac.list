
OtonomArac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b59c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800b730  0800b730  0001b730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd1c  0800bd1c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd1c  0800bd1c  0001bd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd24  0800bd24  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bd24  0800bd24  0001bd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd2c  0800bd2c  0001bd2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800bd30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          0000053c  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000724  20000724  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001303b  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000037cd  00000000  00000000  00033296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f30  00000000  00000000  00036a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ba1  00000000  00000000  00037998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000265ee  00000000  00000000  00038539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016a2f  00000000  00000000  0005eb27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd6ea  00000000  00000000  00075556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005148  00000000  00000000  00142c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00147d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b714 	.word	0x0800b714

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800b714 	.word	0x0800b714

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9a6 	b.w	8000fdc <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff0b 	bl	8000acc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc81 	bl	80005e8 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc02 	bl	80004f4 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc78 	bl	80005e8 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff faba 	bl	8000278 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9e08      	ldr	r6, [sp, #32]
 8000d1a:	460d      	mov	r5, r1
 8000d1c:	4604      	mov	r4, r0
 8000d1e:	460f      	mov	r7, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14a      	bne.n	8000dba <__udivmoddi4+0xa6>
 8000d24:	428a      	cmp	r2, r1
 8000d26:	4694      	mov	ip, r2
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0xe2>
 8000d2a:	fab2 f382 	clz	r3, r2
 8000d2e:	b143      	cbz	r3, 8000d42 <__udivmoddi4+0x2e>
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	f1c3 0220 	rsb	r2, r3, #32
 8000d38:	409f      	lsls	r7, r3
 8000d3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d3e:	4317      	orrs	r7, r2
 8000d40:	409c      	lsls	r4, r3
 8000d42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d46:	fa1f f58c 	uxth.w	r5, ip
 8000d4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d4e:	0c22      	lsrs	r2, r4, #16
 8000d50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d58:	fb01 f005 	mul.w	r0, r1, r5
 8000d5c:	4290      	cmp	r0, r2
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x62>
 8000d60:	eb1c 0202 	adds.w	r2, ip, r2
 8000d64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d68:	f080 811c 	bcs.w	8000fa4 <__udivmoddi4+0x290>
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	f240 8119 	bls.w	8000fa4 <__udivmoddi4+0x290>
 8000d72:	3902      	subs	r1, #2
 8000d74:	4462      	add	r2, ip
 8000d76:	1a12      	subs	r2, r2, r0
 8000d78:	b2a4      	uxth	r4, r4
 8000d7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d86:	fb00 f505 	mul.w	r5, r0, r5
 8000d8a:	42a5      	cmp	r5, r4
 8000d8c:	d90a      	bls.n	8000da4 <__udivmoddi4+0x90>
 8000d8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d96:	f080 8107 	bcs.w	8000fa8 <__udivmoddi4+0x294>
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	f240 8104 	bls.w	8000fa8 <__udivmoddi4+0x294>
 8000da0:	4464      	add	r4, ip
 8000da2:	3802      	subs	r0, #2
 8000da4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	2100      	movs	r1, #0
 8000dac:	b11e      	cbz	r6, 8000db6 <__udivmoddi4+0xa2>
 8000dae:	40dc      	lsrs	r4, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	e9c6 4300 	strd	r4, r3, [r6]
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0xbc>
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	f000 80ed 	beq.w	8000f9e <__udivmoddi4+0x28a>
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd0:	fab3 f183 	clz	r1, r3
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	d149      	bne.n	8000e6c <__udivmoddi4+0x158>
 8000dd8:	42ab      	cmp	r3, r5
 8000dda:	d302      	bcc.n	8000de2 <__udivmoddi4+0xce>
 8000ddc:	4282      	cmp	r2, r0
 8000dde:	f200 80f8 	bhi.w	8000fd2 <__udivmoddi4+0x2be>
 8000de2:	1a84      	subs	r4, r0, r2
 8000de4:	eb65 0203 	sbc.w	r2, r5, r3
 8000de8:	2001      	movs	r0, #1
 8000dea:	4617      	mov	r7, r2
 8000dec:	2e00      	cmp	r6, #0
 8000dee:	d0e2      	beq.n	8000db6 <__udivmoddi4+0xa2>
 8000df0:	e9c6 4700 	strd	r4, r7, [r6]
 8000df4:	e7df      	b.n	8000db6 <__udivmoddi4+0xa2>
 8000df6:	b902      	cbnz	r2, 8000dfa <__udivmoddi4+0xe6>
 8000df8:	deff      	udf	#255	; 0xff
 8000dfa:	fab2 f382 	clz	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 8090 	bne.w	8000f24 <__udivmoddi4+0x210>
 8000e04:	1a8a      	subs	r2, r1, r2
 8000e06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0a:	fa1f fe8c 	uxth.w	lr, ip
 8000e0e:	2101      	movs	r1, #1
 8000e10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e14:	fb07 2015 	mls	r0, r7, r5, r2
 8000e18:	0c22      	lsrs	r2, r4, #16
 8000e1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e1e:	fb0e f005 	mul.w	r0, lr, r5
 8000e22:	4290      	cmp	r0, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x124>
 8000e26:	eb1c 0202 	adds.w	r2, ip, r2
 8000e2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0x122>
 8000e30:	4290      	cmp	r0, r2
 8000e32:	f200 80cb 	bhi.w	8000fcc <__udivmoddi4+0x2b8>
 8000e36:	4645      	mov	r5, r8
 8000e38:	1a12      	subs	r2, r2, r0
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e40:	fb07 2210 	mls	r2, r7, r0, r2
 8000e44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e48:	fb0e fe00 	mul.w	lr, lr, r0
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x14e>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x14c>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	f200 80bb 	bhi.w	8000fd6 <__udivmoddi4+0x2c2>
 8000e60:	4610      	mov	r0, r2
 8000e62:	eba4 040e 	sub.w	r4, r4, lr
 8000e66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e6a:	e79f      	b.n	8000dac <__udivmoddi4+0x98>
 8000e6c:	f1c1 0720 	rsb	r7, r1, #32
 8000e70:	408b      	lsls	r3, r1
 8000e72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e82:	40fd      	lsrs	r5, r7
 8000e84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e88:	4323      	orrs	r3, r4
 8000e8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	fb09 5518 	mls	r5, r9, r8, r5
 8000e96:	0c1c      	lsrs	r4, r3, #16
 8000e98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000ea0:	42a5      	cmp	r5, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eaa:	d90b      	bls.n	8000ec4 <__udivmoddi4+0x1b0>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb4:	f080 8088 	bcs.w	8000fc8 <__udivmoddi4+0x2b4>
 8000eb8:	42a5      	cmp	r5, r4
 8000eba:	f240 8085 	bls.w	8000fc8 <__udivmoddi4+0x2b4>
 8000ebe:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec2:	4464      	add	r4, ip
 8000ec4:	1b64      	subs	r4, r4, r5
 8000ec6:	b29d      	uxth	r5, r3
 8000ec8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ecc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x1da>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ee4:	d26c      	bcs.n	8000fc0 <__udivmoddi4+0x2ac>
 8000ee6:	45a6      	cmp	lr, r4
 8000ee8:	d96a      	bls.n	8000fc0 <__udivmoddi4+0x2ac>
 8000eea:	3b02      	subs	r3, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ef2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ef6:	eba4 040e 	sub.w	r4, r4, lr
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	46c8      	mov	r8, r9
 8000efe:	46ae      	mov	lr, r5
 8000f00:	d356      	bcc.n	8000fb0 <__udivmoddi4+0x29c>
 8000f02:	d053      	beq.n	8000fac <__udivmoddi4+0x298>
 8000f04:	b156      	cbz	r6, 8000f1c <__udivmoddi4+0x208>
 8000f06:	ebb0 0208 	subs.w	r2, r0, r8
 8000f0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f12:	40ca      	lsrs	r2, r1
 8000f14:	40cc      	lsrs	r4, r1
 8000f16:	4317      	orrs	r7, r2
 8000f18:	e9c6 7400 	strd	r7, r4, [r6]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	2100      	movs	r1, #0
 8000f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f24:	f1c3 0120 	rsb	r1, r3, #32
 8000f28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f30:	fa25 f101 	lsr.w	r1, r5, r1
 8000f34:	409d      	lsls	r5, r3
 8000f36:	432a      	orrs	r2, r5
 8000f38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f3c:	fa1f fe8c 	uxth.w	lr, ip
 8000f40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f44:	fb07 1510 	mls	r5, r7, r0, r1
 8000f48:	0c11      	lsrs	r1, r2, #16
 8000f4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f52:	428d      	cmp	r5, r1
 8000f54:	fa04 f403 	lsl.w	r4, r4, r3
 8000f58:	d908      	bls.n	8000f6c <__udivmoddi4+0x258>
 8000f5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f62:	d22f      	bcs.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f64:	428d      	cmp	r5, r1
 8000f66:	d92d      	bls.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f68:	3802      	subs	r0, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	1b49      	subs	r1, r1, r5
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f74:	fb07 1115 	mls	r1, r7, r5, r1
 8000f78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f80:	4291      	cmp	r1, r2
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x282>
 8000f84:	eb1c 0202 	adds.w	r2, ip, r2
 8000f88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f8c:	d216      	bcs.n	8000fbc <__udivmoddi4+0x2a8>
 8000f8e:	4291      	cmp	r1, r2
 8000f90:	d914      	bls.n	8000fbc <__udivmoddi4+0x2a8>
 8000f92:	3d02      	subs	r5, #2
 8000f94:	4462      	add	r2, ip
 8000f96:	1a52      	subs	r2, r2, r1
 8000f98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f9c:	e738      	b.n	8000e10 <__udivmoddi4+0xfc>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	e708      	b.n	8000db6 <__udivmoddi4+0xa2>
 8000fa4:	4639      	mov	r1, r7
 8000fa6:	e6e6      	b.n	8000d76 <__udivmoddi4+0x62>
 8000fa8:	4610      	mov	r0, r2
 8000faa:	e6fb      	b.n	8000da4 <__udivmoddi4+0x90>
 8000fac:	4548      	cmp	r0, r9
 8000fae:	d2a9      	bcs.n	8000f04 <__udivmoddi4+0x1f0>
 8000fb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	e7a3      	b.n	8000f04 <__udivmoddi4+0x1f0>
 8000fbc:	4645      	mov	r5, r8
 8000fbe:	e7ea      	b.n	8000f96 <__udivmoddi4+0x282>
 8000fc0:	462b      	mov	r3, r5
 8000fc2:	e794      	b.n	8000eee <__udivmoddi4+0x1da>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	e7d1      	b.n	8000f6c <__udivmoddi4+0x258>
 8000fc8:	46d0      	mov	r8, sl
 8000fca:	e77b      	b.n	8000ec4 <__udivmoddi4+0x1b0>
 8000fcc:	3d02      	subs	r5, #2
 8000fce:	4462      	add	r2, ip
 8000fd0:	e732      	b.n	8000e38 <__udivmoddi4+0x124>
 8000fd2:	4608      	mov	r0, r1
 8000fd4:	e70a      	b.n	8000dec <__udivmoddi4+0xd8>
 8000fd6:	4464      	add	r4, ip
 8000fd8:	3802      	subs	r0, #2
 8000fda:	e742      	b.n	8000e62 <__udivmoddi4+0x14e>

08000fdc <__aeabi_idiv0>:
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	4b91      	ldr	r3, [pc, #580]	; (8001240 <MX_GPIO_Init+0x260>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a90      	ldr	r2, [pc, #576]	; (8001240 <MX_GPIO_Init+0x260>)
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b8e      	ldr	r3, [pc, #568]	; (8001240 <MX_GPIO_Init+0x260>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	61bb      	str	r3, [r7, #24]
 8001010:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	4b8a      	ldr	r3, [pc, #552]	; (8001240 <MX_GPIO_Init+0x260>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a89      	ldr	r2, [pc, #548]	; (8001240 <MX_GPIO_Init+0x260>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b87      	ldr	r3, [pc, #540]	; (8001240 <MX_GPIO_Init+0x260>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b83      	ldr	r3, [pc, #524]	; (8001240 <MX_GPIO_Init+0x260>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a82      	ldr	r2, [pc, #520]	; (8001240 <MX_GPIO_Init+0x260>)
 8001038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b80      	ldr	r3, [pc, #512]	; (8001240 <MX_GPIO_Init+0x260>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b7c      	ldr	r3, [pc, #496]	; (8001240 <MX_GPIO_Init+0x260>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a7b      	ldr	r2, [pc, #492]	; (8001240 <MX_GPIO_Init+0x260>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b79      	ldr	r3, [pc, #484]	; (8001240 <MX_GPIO_Init+0x260>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b75      	ldr	r3, [pc, #468]	; (8001240 <MX_GPIO_Init+0x260>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a74      	ldr	r2, [pc, #464]	; (8001240 <MX_GPIO_Init+0x260>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b72      	ldr	r3, [pc, #456]	; (8001240 <MX_GPIO_Init+0x260>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b6e      	ldr	r3, [pc, #440]	; (8001240 <MX_GPIO_Init+0x260>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a6d      	ldr	r2, [pc, #436]	; (8001240 <MX_GPIO_Init+0x260>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b6b      	ldr	r3, [pc, #428]	; (8001240 <MX_GPIO_Init+0x260>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2108      	movs	r1, #8
 80010a2:	4868      	ldr	r0, [pc, #416]	; (8001244 <MX_GPIO_Init+0x264>)
 80010a4:	f002 ff4a 	bl	8003f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2101      	movs	r1, #1
 80010ac:	4866      	ldr	r0, [pc, #408]	; (8001248 <MX_GPIO_Init+0x268>)
 80010ae:	f002 ff45 	bl	8003f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010b2:	2200      	movs	r2, #0
 80010b4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80010b8:	4864      	ldr	r0, [pc, #400]	; (800124c <MX_GPIO_Init+0x26c>)
 80010ba:	f002 ff3f 	bl	8003f3c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010be:	2308      	movs	r3, #8
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	485b      	ldr	r0, [pc, #364]	; (8001244 <MX_GPIO_Init+0x264>)
 80010d6:	f002 fd95 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010da:	2301      	movs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4855      	ldr	r0, [pc, #340]	; (8001248 <MX_GPIO_Init+0x268>)
 80010f2:	f002 fd87 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010f6:	2308      	movs	r3, #8
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001106:	2305      	movs	r3, #5
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	484d      	ldr	r0, [pc, #308]	; (8001248 <MX_GPIO_Init+0x268>)
 8001112:	f002 fd77 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001116:	2301      	movs	r3, #1
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800111a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800111e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4849      	ldr	r0, [pc, #292]	; (8001250 <MX_GPIO_Init+0x270>)
 800112c:	f002 fd6a 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001130:	2310      	movs	r3, #16
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001140:	2306      	movs	r3, #6
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4841      	ldr	r0, [pc, #260]	; (8001250 <MX_GPIO_Init+0x270>)
 800114c:	f002 fd5a 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001150:	2304      	movs	r3, #4
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	483c      	ldr	r0, [pc, #240]	; (8001254 <MX_GPIO_Init+0x274>)
 8001164:	f002 fd4e 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800117a:	2305      	movs	r3, #5
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4833      	ldr	r0, [pc, #204]	; (8001254 <MX_GPIO_Init+0x274>)
 8001186:	f002 fd3d 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800118a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800118e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	482a      	ldr	r0, [pc, #168]	; (800124c <MX_GPIO_Init+0x26c>)
 80011a4:	f002 fd2e 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011a8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ba:	2306      	movs	r3, #6
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4820      	ldr	r0, [pc, #128]	; (8001248 <MX_GPIO_Init+0x268>)
 80011c6:	f002 fd1d 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80011ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	481c      	ldr	r0, [pc, #112]	; (8001250 <MX_GPIO_Init+0x270>)
 80011e0:	f002 fd10 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80011e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011f6:	230a      	movs	r3, #10
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_GPIO_Init+0x270>)
 8001202:	f002 fcff 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001206:	2320      	movs	r3, #32
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <MX_GPIO_Init+0x26c>)
 800121a:	f002 fcf3 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800121e:	2302      	movs	r3, #2
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001222:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_GPIO_Init+0x264>)
 8001234:	f002 fce6 	bl	8003c04 <HAL_GPIO_Init>

}
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40021000 	.word	0x40021000
 8001248:	40020800 	.word	0x40020800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400

08001258 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2C1_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C1_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x58>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001296:	f002 fe6b 	bl	8003f70 <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 fe3c 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000204 	.word	0x20000204
 80012ac:	40005400 	.word	0x40005400
 80012b0:	000186a0 	.word	0x000186a0

080012b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a19      	ldr	r2, [pc, #100]	; (8001338 <HAL_I2C_MspInit+0x84>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12c      	bne.n	8001330 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_I2C_MspInit+0x88>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_I2C_MspInit+0x88>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_I2C_MspInit+0x88>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80012f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f8:	2312      	movs	r3, #18
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001304:	2304      	movs	r3, #4
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	480c      	ldr	r0, [pc, #48]	; (8001340 <HAL_I2C_MspInit+0x8c>)
 8001310:	f002 fc78 	bl	8003c04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_I2C_MspInit+0x88>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_I2C_MspInit+0x88>)
 800131e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_I2C_MspInit+0x88>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40005400 	.word	0x40005400
 800133c:	40023800 	.word	0x40023800
 8001340:	40020400 	.word	0x40020400

08001344 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d106      	bne.n	8001366 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3371      	adds	r3, #113	; 0x71
 800135c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800135e:	e002      	b.n	8001366 <prv_parse_number+0x22>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <prv_parse_number+0x30>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b20      	cmp	r3, #32
 8001372:	d0f5      	beq.n	8001360 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b2d      	cmp	r3, #45	; 0x2d
 800137a:	d104      	bne.n	8001386 <prv_parse_number+0x42>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <prv_parse_number+0x44>
 8001386:	2300      	movs	r3, #0
 8001388:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 800138a:	e00d      	b.n	80013a8 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	461a      	mov	r2, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	3b30      	subs	r3, #48	; 0x30
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <prv_parse_number+0x7a>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b2f      	cmp	r3, #47	; 0x2f
 80013b4:	d903      	bls.n	80013be <prv_parse_number+0x7a>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b39      	cmp	r3, #57	; 0x39
 80013bc:	d9e6      	bls.n	800138c <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <prv_parse_number+0x86>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	425b      	negs	r3, r3
 80013c8:	e000      	b.n	80013cc <prv_parse_number+0x88>
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d106      	bne.n	80013f6 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3371      	adds	r3, #113	; 0x71
 80013ec:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80013ee:	e002      	b.n	80013f6 <prv_parse_float_number+0x1e>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <prv_parse_float_number+0x2c>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b20      	cmp	r3, #32
 8001402:	d0f5      	beq.n	80013f0 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8001404:	2100      	movs	r1, #0
 8001406:	6838      	ldr	r0, [r7, #0]
 8001408:	f008 f976 	bl	80096f8 <strtod>
 800140c:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8001410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001414:	ec43 2b17 	vmov	d7, r2, r3
}
 8001418:	eeb0 0a47 	vmov.f32	s0, s14
 800141c:	eef0 0a67 	vmov.f32	s1, s15
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8001430:	2100      	movs	r1, #0
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffd0 	bl	80013d8 <prv_parse_float_number>
 8001438:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800143c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001440:	f7ff fb82 	bl	8000b48 <__aeabi_d2iz>
 8001444:	4603      	mov	r3, r0
 8001446:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <prv_parse_lat_long+0x94>)
 8001448:	fb82 1203 	smull	r1, r2, r2, r3
 800144c:	1152      	asrs	r2, r2, #5
 800144e:	17db      	asrs	r3, r3, #31
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f85e 	bl	8000514 <__aeabi_i2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <prv_parse_lat_long+0x98>)
 8001466:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800146a:	f7ff f8bd 	bl	80005e8 <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001476:	f7fe feff 	bl	8000278 <__aeabi_dsub>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <prv_parse_lat_long+0x9c>)
 8001488:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800148c:	f7ff f9d6 	bl	800083c <__aeabi_ddiv>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001498:	f7fe fef0 	bl	800027c <__adddf3>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80014a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014a8:	ec43 2b17 	vmov	d7, r2, r3
}
 80014ac:	eeb0 0a47 	vmov.f32	s0, s14
 80014b0:	eef0 0a67 	vmov.f32	s1, s15
 80014b4:	3720      	adds	r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	51eb851f 	.word	0x51eb851f
 80014c0:	40590000 	.word	0x40590000
 80014c4:	404e0000 	.word	0x404e0000

080014c8 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80014c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80014d8:	2900      	cmp	r1, #0
 80014da:	d169      	bne.n	80015b0 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3371      	adds	r3, #113	; 0x71
 80014e0:	2206      	movs	r2, #6
 80014e2:	49ba      	ldr	r1, [pc, #744]	; (80017cc <prv_parse_term+0x304>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f008 fa20 	bl	800992a <strncmp>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d009      	beq.n	8001504 <prv_parse_term+0x3c>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3371      	adds	r3, #113	; 0x71
 80014f4:	2206      	movs	r2, #6
 80014f6:	49b6      	ldr	r1, [pc, #728]	; (80017d0 <prv_parse_term+0x308>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f008 fa16 	bl	800992a <strncmp>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d104      	bne.n	800150e <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800150c:	e04e      	b.n	80015ac <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3371      	adds	r3, #113	; 0x71
 8001512:	2206      	movs	r2, #6
 8001514:	49af      	ldr	r1, [pc, #700]	; (80017d4 <prv_parse_term+0x30c>)
 8001516:	4618      	mov	r0, r3
 8001518:	f008 fa07 	bl	800992a <strncmp>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <prv_parse_term+0x6e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3371      	adds	r3, #113	; 0x71
 8001526:	2206      	movs	r2, #6
 8001528:	49ab      	ldr	r1, [pc, #684]	; (80017d8 <prv_parse_term+0x310>)
 800152a:	4618      	mov	r0, r3
 800152c:	f008 f9fd 	bl	800992a <strncmp>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d104      	bne.n	8001540 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2202      	movs	r2, #2
 800153a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800153e:	e035      	b.n	80015ac <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3371      	adds	r3, #113	; 0x71
 8001544:	2206      	movs	r2, #6
 8001546:	49a5      	ldr	r1, [pc, #660]	; (80017dc <prv_parse_term+0x314>)
 8001548:	4618      	mov	r0, r3
 800154a:	f008 f9ee 	bl	800992a <strncmp>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d009      	beq.n	8001568 <prv_parse_term+0xa0>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3371      	adds	r3, #113	; 0x71
 8001558:	2206      	movs	r2, #6
 800155a:	49a1      	ldr	r1, [pc, #644]	; (80017e0 <prv_parse_term+0x318>)
 800155c:	4618      	mov	r0, r3
 800155e:	f008 f9e4 	bl	800992a <strncmp>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d104      	bne.n	8001572 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2203      	movs	r2, #3
 800156c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001570:	e01c      	b.n	80015ac <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3371      	adds	r3, #113	; 0x71
 8001576:	2206      	movs	r2, #6
 8001578:	499a      	ldr	r1, [pc, #616]	; (80017e4 <prv_parse_term+0x31c>)
 800157a:	4618      	mov	r0, r3
 800157c:	f008 f9d5 	bl	800992a <strncmp>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <prv_parse_term+0xd2>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3371      	adds	r3, #113	; 0x71
 800158a:	2206      	movs	r2, #6
 800158c:	4996      	ldr	r1, [pc, #600]	; (80017e8 <prv_parse_term+0x320>)
 800158e:	4618      	mov	r0, r3
 8001590:	f008 f9cb 	bl	800992a <strncmp>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d104      	bne.n	80015a4 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2204      	movs	r2, #4
 800159e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80015a2:	e003      	b.n	80015ac <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e231      	b.n	8001a14 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80015b6:	2900      	cmp	r1, #0
 80015b8:	f000 822b 	beq.w	8001a12 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80015c2:	2901      	cmp	r1, #1
 80015c4:	f040 80c9 	bne.w	800175a <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80015ce:	3b01      	subs	r3, #1
 80015d0:	2b0a      	cmp	r3, #10
 80015d2:	f200 8213 	bhi.w	80019fc <prv_parse_term+0x534>
 80015d6:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <prv_parse_term+0x114>)
 80015d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015dc:	08001609 	.word	0x08001609
 80015e0:	08001683 	.word	0x08001683
 80015e4:	08001699 	.word	0x08001699
 80015e8:	080016c3 	.word	0x080016c3
 80015ec:	080016d9 	.word	0x080016d9
 80015f0:	08001703 	.word	0x08001703
 80015f4:	08001717 	.word	0x08001717
 80015f8:	080019fd 	.word	0x080019fd
 80015fc:	0800172b 	.word	0x0800172b
 8001600:	080019fd 	.word	0x080019fd
 8001604:	08001743 	.word	0x08001743
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800160e:	3b30      	subs	r3, #48	; 0x30
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	0092      	lsls	r2, r2, #2
 8001616:	4413      	add	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	b2da      	uxtb	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001622:	4413      	add	r3, r2
 8001624:	b2db      	uxtb	r3, r3
 8001626:	3b30      	subs	r3, #48	; 0x30
 8001628:	b2da      	uxtb	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001636:	3b30      	subs	r3, #48	; 0x30
 8001638:	b2db      	uxtb	r3, r3
 800163a:	461a      	mov	r2, r3
 800163c:	0092      	lsls	r2, r2, #2
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	b2da      	uxtb	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800164a:	4413      	add	r3, r2
 800164c:	b2db      	uxtb	r3, r3
 800164e:	3b30      	subs	r3, #48	; 0x30
 8001650:	b2da      	uxtb	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800165e:	3b30      	subs	r3, #48	; 0x30
 8001660:	b2db      	uxtb	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	4413      	add	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001672:	4413      	add	r3, r2
 8001674:	b2db      	uxtb	r3, r3
 8001676:	3b30      	subs	r3, #48	; 0x30
 8001678:	b2da      	uxtb	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8001680:	e1c7      	b.n	8001a12 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fed0 	bl	8001428 <prv_parse_lat_long>
 8001688:	eeb0 7a40 	vmov.f32	s14, s0
 800168c:	eef0 7a60 	vmov.f32	s15, s1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001696:	e1bc      	b.n	8001a12 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800169e:	2b53      	cmp	r3, #83	; 0x53
 80016a0:	d005      	beq.n	80016ae <prv_parse_term+0x1e6>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80016a8:	2b73      	cmp	r3, #115	; 0x73
 80016aa:	f040 81a9 	bne.w	8001a00 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80016b4:	4690      	mov	r8, r2
 80016b6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80016c0:	e19e      	b.n	8001a00 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff feb0 	bl	8001428 <prv_parse_lat_long>
 80016c8:	eeb0 7a40 	vmov.f32	s14, s0
 80016cc:	eef0 7a60 	vmov.f32	s15, s1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80016d6:	e19c      	b.n	8001a12 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80016de:	2b57      	cmp	r3, #87	; 0x57
 80016e0:	d005      	beq.n	80016ee <prv_parse_term+0x226>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80016e8:	2b77      	cmp	r3, #119	; 0x77
 80016ea:	f040 818b 	bne.w	8001a04 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80016f4:	4614      	mov	r4, r2
 80016f6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8001700:	e180      	b.n	8001a04 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8001702:	2100      	movs	r1, #0
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fe1d 	bl	8001344 <prv_parse_number>
 800170a:	4603      	mov	r3, r0
 800170c:	b2da      	uxtb	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8001714:	e17d      	b.n	8001a12 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fe13 	bl	8001344 <prv_parse_number>
 800171e:	4603      	mov	r3, r0
 8001720:	b2da      	uxtb	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8001728:	e173      	b.n	8001a12 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800172a:	2100      	movs	r1, #0
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fe53 	bl	80013d8 <prv_parse_float_number>
 8001732:	eeb0 7a40 	vmov.f32	s14, s0
 8001736:	eef0 7a60 	vmov.f32	s15, s1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001740:	e167      	b.n	8001a12 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001742:	2100      	movs	r1, #0
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff fe47 	bl	80013d8 <prv_parse_float_number>
 800174a:	eeb0 7a40 	vmov.f32	s14, s0
 800174e:	eef0 7a60 	vmov.f32	s15, s1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001758:	e15b      	b.n	8001a12 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001760:	2902      	cmp	r1, #2
 8001762:	f040 8083 	bne.w	800186c <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800176c:	3b02      	subs	r3, #2
 800176e:	2b0f      	cmp	r3, #15
 8001770:	d860      	bhi.n	8001834 <prv_parse_term+0x36c>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <prv_parse_term+0x2b0>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	080017b9 	.word	0x080017b9
 800177c:	08001835 	.word	0x08001835
 8001780:	08001835 	.word	0x08001835
 8001784:	08001835 	.word	0x08001835
 8001788:	08001835 	.word	0x08001835
 800178c:	08001835 	.word	0x08001835
 8001790:	08001835 	.word	0x08001835
 8001794:	08001835 	.word	0x08001835
 8001798:	08001835 	.word	0x08001835
 800179c:	08001835 	.word	0x08001835
 80017a0:	08001835 	.word	0x08001835
 80017a4:	08001835 	.word	0x08001835
 80017a8:	08001835 	.word	0x08001835
 80017ac:	080017ed 	.word	0x080017ed
 80017b0:	08001805 	.word	0x08001805
 80017b4:	0800181d 	.word	0x0800181d
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80017b8:	2100      	movs	r1, #0
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fdc2 	bl	8001344 <prv_parse_number>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 80017ca:	e122      	b.n	8001a12 <prv_parse_term+0x54a>
 80017cc:	0800b730 	.word	0x0800b730
 80017d0:	0800b738 	.word	0x0800b738
 80017d4:	0800b740 	.word	0x0800b740
 80017d8:	0800b748 	.word	0x0800b748
 80017dc:	0800b750 	.word	0x0800b750
 80017e0:	0800b758 	.word	0x0800b758
 80017e4:	0800b760 	.word	0x0800b760
 80017e8:	0800b768 	.word	0x0800b768
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80017ec:	2100      	movs	r1, #0
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fdf2 	bl	80013d8 <prv_parse_float_number>
 80017f4:	eeb0 7a40 	vmov.f32	s14, s0
 80017f8:	eef0 7a60 	vmov.f32	s15, s1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001802:	e106      	b.n	8001a12 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8001804:	2100      	movs	r1, #0
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fde6 	bl	80013d8 <prv_parse_float_number>
 800180c:	eeb0 7a40 	vmov.f32	s14, s0
 8001810:	eef0 7a60 	vmov.f32	s15, s1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800181a:	e0fa      	b.n	8001a12 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 800181c:	2100      	movs	r1, #0
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fdda 	bl	80013d8 <prv_parse_float_number>
 8001824:	eeb0 7a40 	vmov.f32	s14, s0
 8001828:	eef0 7a60 	vmov.f32	s15, s1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001832:	e0ee      	b.n	8001a12 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800183a:	2b02      	cmp	r3, #2
 800183c:	f240 80e4 	bls.w	8001a08 <prv_parse_term+0x540>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001846:	2b0e      	cmp	r3, #14
 8001848:	f200 80de 	bhi.w	8001a08 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800184c:	2100      	movs	r1, #0
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fd78 	bl	8001344 <prv_parse_number>
 8001854:	4602      	mov	r2, r0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800185c:	3b03      	subs	r3, #3
 800185e:	b2d1      	uxtb	r1, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	460a      	mov	r2, r1
 8001866:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 800186a:	e0cd      	b.n	8001a08 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001872:	2903      	cmp	r1, #3
 8001874:	d11b      	bne.n	80018ae <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800187c:	2b02      	cmp	r3, #2
 800187e:	d002      	beq.n	8001886 <prv_parse_term+0x3be>
 8001880:	2b03      	cmp	r3, #3
 8001882:	d00a      	beq.n	800189a <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001884:	e0c5      	b.n	8001a12 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001886:	2100      	movs	r1, #0
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fd5b 	bl	8001344 <prv_parse_number>
 800188e:	4603      	mov	r3, r0
 8001890:	b2da      	uxtb	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8001898:	e0bb      	b.n	8001a12 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800189a:	2100      	movs	r1, #0
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff fd51 	bl	8001344 <prv_parse_number>
 80018a2:	4603      	mov	r3, r0
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80018ac:	e0b1      	b.n	8001a12 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80018b4:	2904      	cmp	r1, #4
 80018b6:	f040 80ac 	bne.w	8001a12 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80018c0:	3902      	subs	r1, #2
 80018c2:	2909      	cmp	r1, #9
 80018c4:	f200 80a2 	bhi.w	8001a0c <prv_parse_term+0x544>
 80018c8:	a001      	add	r0, pc, #4	; (adr r0, 80018d0 <prv_parse_term+0x408>)
 80018ca:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80018ce:	bf00      	nop
 80018d0:	080018f9 	.word	0x080018f9
 80018d4:	08001a0d 	.word	0x08001a0d
 80018d8:	08001a0d 	.word	0x08001a0d
 80018dc:	08001a0d 	.word	0x08001a0d
 80018e0:	08001a0d 	.word	0x08001a0d
 80018e4:	08001913 	.word	0x08001913
 80018e8:	0800192b 	.word	0x0800192b
 80018ec:	08001943 	.word	0x08001943
 80018f0:	080019bd 	.word	0x080019bd
 80018f4:	080019d5 	.word	0x080019d5
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80018fe:	2b41      	cmp	r3, #65	; 0x41
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001910:	e07f      	b.n	8001a12 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8001912:	2100      	movs	r1, #0
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fd5f 	bl	80013d8 <prv_parse_float_number>
 800191a:	eeb0 7a40 	vmov.f32	s14, s0
 800191e:	eef0 7a60 	vmov.f32	s15, s1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001928:	e073      	b.n	8001a12 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800192a:	2100      	movs	r1, #0
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fd53 	bl	80013d8 <prv_parse_float_number>
 8001932:	eeb0 7a40 	vmov.f32	s14, s0
 8001936:	eef0 7a60 	vmov.f32	s15, s1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001940:	e067      	b.n	8001a12 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001948:	3b30      	subs	r3, #48	; 0x30
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	b2da      	uxtb	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800195c:	4413      	add	r3, r2
 800195e:	b2db      	uxtb	r3, r3
 8001960:	3b30      	subs	r3, #48	; 0x30
 8001962:	b2da      	uxtb	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001970:	3b30      	subs	r3, #48	; 0x30
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4413      	add	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	b2da      	uxtb	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001984:	4413      	add	r3, r2
 8001986:	b2db      	uxtb	r3, r3
 8001988:	3b30      	subs	r3, #48	; 0x30
 800198a:	b2da      	uxtb	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001998:	3b30      	subs	r3, #48	; 0x30
 800199a:	b2db      	uxtb	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80019ac:	4413      	add	r3, r2
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3b30      	subs	r3, #48	; 0x30
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80019ba:	e02a      	b.n	8001a12 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80019bc:	2100      	movs	r1, #0
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff fd0a 	bl	80013d8 <prv_parse_float_number>
 80019c4:	eeb0 7a40 	vmov.f32	s14, s0
 80019c8:	eef0 7a60 	vmov.f32	s15, s1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80019d2:	e01e      	b.n	8001a12 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80019da:	2957      	cmp	r1, #87	; 0x57
 80019dc:	d004      	beq.n	80019e8 <prv_parse_term+0x520>
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80019e4:	2977      	cmp	r1, #119	; 0x77
 80019e6:	d113      	bne.n	8001a10 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 80019ee:	4602      	mov	r2, r0
 80019f0:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 80019fa:	e009      	b.n	8001a10 <prv_parse_term+0x548>
                break;
 80019fc:	bf00      	nop
 80019fe:	e008      	b.n	8001a12 <prv_parse_term+0x54a>
                break;
 8001a00:	bf00      	nop
 8001a02:	e006      	b.n	8001a12 <prv_parse_term+0x54a>
                break;
 8001a04:	bf00      	nop
 8001a06:	e004      	b.n	8001a12 <prv_parse_term+0x54a>
                break;
 8001a08:	bf00      	nop
 8001a0a:	e002      	b.n	8001a12 <prv_parse_term+0x54a>
            default:
                break;
 8001a0c:	bf00      	nop
 8001a0e:	e000      	b.n	8001a12 <prv_parse_term+0x54a>
                break;
 8001a10:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a1e:	bf00      	nop

08001a20 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a2e:	2b2f      	cmp	r3, #47	; 0x2f
 8001a30:	d90d      	bls.n	8001a4e <prv_check_crc+0x2e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a38:	2b39      	cmp	r3, #57	; 0x39
 8001a3a:	d808      	bhi.n	8001a4e <prv_check_crc+0x2e>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a42:	3b30      	subs	r3, #48	; 0x30
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	b25a      	sxtb	r2, r3
 8001a4c:	e026      	b.n	8001a9c <prv_check_crc+0x7c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a54:	2b60      	cmp	r3, #96	; 0x60
 8001a56:	d90d      	bls.n	8001a74 <prv_check_crc+0x54>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a5e:	2b7a      	cmp	r3, #122	; 0x7a
 8001a60:	d808      	bhi.n	8001a74 <prv_check_crc+0x54>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a68:	3b57      	subs	r3, #87	; 0x57
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	b25a      	sxtb	r2, r3
 8001a72:	e013      	b.n	8001a9c <prv_check_crc+0x7c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a7a:	2b40      	cmp	r3, #64	; 0x40
 8001a7c:	d90d      	bls.n	8001a9a <prv_check_crc+0x7a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a84:	2b5a      	cmp	r3, #90	; 0x5a
 8001a86:	d808      	bhi.n	8001a9a <prv_check_crc+0x7a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a8e:	3b37      	subs	r3, #55	; 0x37
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	b25a      	sxtb	r2, r3
 8001a98:	e000      	b.n	8001a9c <prv_check_crc+0x7c>
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001aa2:	2b2f      	cmp	r3, #47	; 0x2f
 8001aa4:	d90c      	bls.n	8001ac0 <prv_check_crc+0xa0>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001aac:	2b39      	cmp	r3, #57	; 0x39
 8001aae:	d807      	bhi.n	8001ac0 <prv_check_crc+0xa0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	e028      	b.n	8001b12 <prv_check_crc+0xf2>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001ac6:	2b60      	cmp	r3, #96	; 0x60
 8001ac8:	d90e      	bls.n	8001ae8 <prv_check_crc+0xc8>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001ad0:	2b7a      	cmp	r3, #122	; 0x7a
 8001ad2:	d809      	bhi.n	8001ae8 <prv_check_crc+0xc8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001ada:	3b57      	subs	r3, #87	; 0x57
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	e014      	b.n	8001b12 <prv_check_crc+0xf2>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001aee:	2b40      	cmp	r3, #64	; 0x40
 8001af0:	d90e      	bls.n	8001b10 <prv_check_crc+0xf0>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001af8:	2b5a      	cmp	r3, #90	; 0x5a
 8001afa:	d809      	bhi.n	8001b10 <prv_check_crc+0xf0>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001b02:	3b37      	subs	r3, #55	; 0x37
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	b25b      	sxtb	r3, r3
 8001b0e:	e000      	b.n	8001b12 <prv_check_crc+0xf2>
 8001b10:	2300      	movs	r3, #0
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d136      	bne.n	8001bb6 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bb4:	e061      	b.n	8001c7a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d121      	bne.n	8001c04 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	33a1      	adds	r3, #161	; 0xa1
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f007 ff1a 	bl	8009a36 <memcpy>
 8001c02:	e03a      	b.n	8001c7a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d106      	bne.n	8001c1c <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001c1a:	e02e      	b.n	8001c7a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d129      	bne.n	8001c7a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001c8c:	22b0      	movs	r2, #176	; 0xb0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f007 fe42 	bl	800991a <memset>
    return 1;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001cb0:	e0ad      	b.n	8001e0e <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b24      	cmp	r3, #36	; 0x24
 8001cb8:	d128      	bne.n	8001d0c <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3370      	adds	r3, #112	; 0x70
 8001cbe:	2240      	movs	r2, #64	; 0x40
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f007 fe29 	bl	800991a <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001cce:	2b0b      	cmp	r3, #11
 8001cd0:	f200 8097 	bhi.w	8001e02 <lwgps_process+0x162>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001cda:	4619      	mov	r1, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001cee:	3301      	adds	r3, #1
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001d0a:	e07a      	b.n	8001e02 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b2c      	cmp	r3, #44	; 0x2c
 8001d12:	d11d      	bne.n	8001d50 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff fbd7 	bl	80014c8 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4053      	eors	r3, r2
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001d44:	3301      	adds	r3, #1
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001d4e:	e058      	b.n	8001e02 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b2a      	cmp	r3, #42	; 0x2a
 8001d56:	d117      	bne.n	8001d88 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f7ff fbb5 	bl	80014c8 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001d86:	e03c      	b.n	8001e02 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b0d      	cmp	r3, #13
 8001d8e:	d109      	bne.n	8001da4 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7ff fe45 	bl	8001a20 <prv_check_crc>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d032      	beq.n	8001e02 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff feca 	bl	8001b36 <prv_copy_from_tmp_memory>
 8001da2:	e02e      	b.n	8001e02 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4053      	eors	r3, r2
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001dc8:	2b0b      	cmp	r3, #11
 8001dca:	d81a      	bhi.n	8001e02 <lwgps_process+0x162>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	440b      	add	r3, r1
 8001ddc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001de6:	3301      	adds	r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f47f af4e 	bne.w	8001cb2 <lwgps_process+0x12>
        }
    }
    return 1;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e24:	f001 fcb4 	bl	8003790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e28:	f000 f80e 	bl	8001e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e2c:	f7ff f8d8 	bl	8000fe0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e30:	f7ff fa12 	bl	8001258 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001e34:	f000 f98e 	bl	8002154 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001e38:	f000 fb48 	bl	80024cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8001e3c:	f000 f874 	bl	8001f28 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001e40:	f000 f8b6 	bl	8001fb0 <loop>
 8001e44:	e7fc      	b.n	8001e40 <main+0x20>
	...

08001e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b094      	sub	sp, #80	; 0x50
 8001e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	2230      	movs	r2, #48	; 0x30
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f007 fd5f 	bl	800991a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <SystemClock_Config+0xcc>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <SystemClock_Config+0xcc>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <SystemClock_Config+0xcc>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <SystemClock_Config+0xd0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a21      	ldr	r2, [pc, #132]	; (8001f18 <SystemClock_Config+0xd0>)
 8001e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <SystemClock_Config+0xd0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ebc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 fcf2 	bl	80058b8 <HAL_RCC_OscConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001eda:	f000 f81f 	bl	8001f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ede:	230f      	movs	r3, #15
 8001ee0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001eee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	2105      	movs	r1, #5
 8001efc:	4618      	mov	r0, r3
 8001efe:	f003 ff53 	bl	8005da8 <HAL_RCC_ClockConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f08:	f000 f808 	bl	8001f1c <Error_Handler>
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3750      	adds	r7, #80	; 0x50
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40007000 	.word	0x40007000

08001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <Error_Handler+0x8>
	...

08001f28 <setup>:
void Gorevler();
void Gorevler1();


void setup()
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af02      	add	r7, sp, #8
	uart3.Yapilandir(115200, GPIOD, GPIO_PIN_8,GPIOB ,GPIO_PIN_11);
 8001f2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <setup+0x60>)
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3c:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <setup+0x64>)
 8001f3e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001f42:	4813      	ldr	r0, [pc, #76]	; (8001f90 <setup+0x68>)
 8001f44:	f001 fa3d 	bl	80033c2 <_ZN4Uart10YapilandirEmP12GPIO_TypeDeftS1_t>
	gps.Yapilandir();
 8001f48:	4812      	ldr	r0, [pc, #72]	; (8001f94 <setup+0x6c>)
 8001f4a:	f000 fbe3 	bl	8002714 <_ZN3GPS10YapilandirEv>
	imu.DBC_MPU6500_YAPILANDIR();
 8001f4e:	4812      	ldr	r0, [pc, #72]	; (8001f98 <setup+0x70>)
 8001f50:	f000 fc9f 	bl	8002892 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv>
	imu.DBC_GYRO_OFSET();
 8001f54:	4810      	ldr	r0, [pc, #64]	; (8001f98 <setup+0x70>)
 8001f56:	f000 fd01 	bl	800295c <_ZN5MyImu14DBC_GYRO_OFSETEv>
	timer7.Yapilandir(84000,5);
 8001f5a:	2205      	movs	r2, #5
 8001f5c:	490f      	ldr	r1, [pc, #60]	; (8001f9c <setup+0x74>)
 8001f5e:	4810      	ldr	r0, [pc, #64]	; (8001fa0 <setup+0x78>)
 8001f60:	f001 faf6 	bl	8003550 <_ZN5Timer10YapilandirEmm>
	timer7.AktifEt();
 8001f64:	480e      	ldr	r0, [pc, #56]	; (8001fa0 <setup+0x78>)
 8001f66:	f001 fb12 	bl	800358e <_ZN5Timer7AktifEtEv>
	gorev.GorevAl(Gorevler,1000);
 8001f6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f6e:	490d      	ldr	r1, [pc, #52]	; (8001fa4 <setup+0x7c>)
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <setup+0x80>)
 8001f72:	f001 f962 	bl	800323a <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(Gorevler1,150);
 8001f76:	2296      	movs	r2, #150	; 0x96
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <setup+0x84>)
 8001f7a:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <setup+0x80>)
 8001f7c:	f001 f95d 	bl	800323a <_ZN13Gorevyonetici7GorevAlEPFvvEs>
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	20000270 	.word	0x20000270
 8001f94:	20000388 	.word	0x20000388
 8001f98:	2000033c 	.word	0x2000033c
 8001f9c:	00014820 	.word	0x00014820
 8001fa0:	200002d0 	.word	0x200002d0
 8001fa4:	08001fc5 	.word	0x08001fc5
 8001fa8:	200002d4 	.word	0x200002d4
 8001fac:	08002031 	.word	0x08002031

08001fb0 <loop>:

void loop()
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	gorev.GorevCalistir();
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <loop+0x10>)
 8001fb6:	f001 f9c3 	bl	8003340 <_ZN13Gorevyonetici13GorevCalistirEv>
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200002d4 	.word	0x200002d4

08001fc4 <_Z8Gorevlerv>:

void Gorevler()
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	ed2d 8b02 	vpush	{d8}
 8001fca:	af00      	add	r7, sp, #0
	//gps.LatitudeAl();
	//gps.LongitudeAl();
	GPIOD->ODR ^= GPIO_PIN_12;
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <_Z8Gorevlerv+0x58>)
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	4a12      	ldr	r2, [pc, #72]	; (800201c <_Z8Gorevlerv+0x58>)
 8001fd2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fd6:	6153      	str	r3, [r2, #20]
	gpsPaket.PaketOlustur(*gps.LatitudeAl(),*gps.LongitudeAl());
 8001fd8:	4811      	ldr	r0, [pc, #68]	; (8002020 <_Z8Gorevlerv+0x5c>)
 8001fda:	f000 fc14 	bl	8002806 <_ZN3GPS10LatitudeAlEv>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	ed93 8a00 	vldr	s16, [r3]
 8001fe4:	480e      	ldr	r0, [pc, #56]	; (8002020 <_Z8Gorevlerv+0x5c>)
 8001fe6:	f000 fc1b 	bl	8002820 <_ZN3GPS11LongitudeAlEv>
 8001fea:	4603      	mov	r3, r0
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	eef0 0a67 	vmov.f32	s1, s15
 8001ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8001ff8:	480a      	ldr	r0, [pc, #40]	; (8002024 <_Z8Gorevlerv+0x60>)
 8001ffa:	f001 f84e 	bl	800309a <_ZN5Paket12PaketOlusturEff>
	gpsPaket.PaketCagir(GpsDataPacket);
 8001ffe:	490a      	ldr	r1, [pc, #40]	; (8002028 <_Z8Gorevlerv+0x64>)
 8002000:	4808      	ldr	r0, [pc, #32]	; (8002024 <_Z8Gorevlerv+0x60>)
 8002002:	f001 f899 	bl	8003138 <_ZN5Paket10PaketCagirEPh>
	uart3.transmit(GpsDataPacket, sizeof(GpsDataPacket));
 8002006:	220c      	movs	r2, #12
 8002008:	4907      	ldr	r1, [pc, #28]	; (8002028 <_Z8Gorevlerv+0x64>)
 800200a:	4808      	ldr	r0, [pc, #32]	; (800202c <_Z8Gorevlerv+0x68>)
 800200c:	f001 fa35 	bl	800347a <_ZN4Uart8transmitEPht>
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	ecbd 8b02 	vpop	{d8}
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40020c00 	.word	0x40020c00
 8002020:	20000388 	.word	0x20000388
 8002024:	200004d0 	.word	0x200004d0
 8002028:	20000258 	.word	0x20000258
 800202c:	20000270 	.word	0x20000270

08002030 <_Z9Gorevler1v>:
void Gorevler1()
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= GPIO_PIN_13;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <_Z9Gorevler1v+0x4c>)
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	4a10      	ldr	r2, [pc, #64]	; (800207c <_Z9Gorevler1v+0x4c>)
 800203a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800203e:	6153      	str	r3, [r2, #20]
	imu.DBC_ACI_BULMA();
 8002040:	480f      	ldr	r0, [pc, #60]	; (8002080 <_Z9Gorevler1v+0x50>)
 8002042:	f000 fe05 	bl	8002c50 <_ZN5MyImu13DBC_ACI_BULMAEv>
	pitch=imu.PitchAl();
 8002046:	480e      	ldr	r0, [pc, #56]	; (8002080 <_Z9Gorevler1v+0x50>)
 8002048:	f000 ffce 	bl	8002fe8 <_ZN5MyImu7PitchAlEv>
 800204c:	eef0 7a40 	vmov.f32	s15, s0
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <_Z9Gorevler1v+0x54>)
 8002052:	edc3 7a00 	vstr	s15, [r3]
	roll=imu.RollAl();
 8002056:	480a      	ldr	r0, [pc, #40]	; (8002080 <_Z9Gorevler1v+0x50>)
 8002058:	f000 ffd5 	bl	8003006 <_ZN5MyImu6RollAlEv>
 800205c:	eef0 7a40 	vmov.f32	s15, s0
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <_Z9Gorevler1v+0x58>)
 8002062:	edc3 7a00 	vstr	s15, [r3]
	yaw=imu.YawAl();
 8002066:	4806      	ldr	r0, [pc, #24]	; (8002080 <_Z9Gorevler1v+0x50>)
 8002068:	f000 ffdc 	bl	8003024 <_ZN5MyImu5YawAlEv>
 800206c:	eef0 7a40 	vmov.f32	s15, s0
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <_Z9Gorevler1v+0x5c>)
 8002072:	edc3 7a00 	vstr	s15, [r3]
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40020c00 	.word	0x40020c00
 8002080:	2000033c 	.word	0x2000033c
 8002084:	20000264 	.word	0x20000264
 8002088:	20000268 	.word	0x20000268
 800208c:	2000026c 	.word	0x2000026c

08002090 <TIM3_IRQHandler>:

extern "C" void TIM3_IRQHandler()
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	{
		gorev.BayrakKaldir();
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <TIM3_IRQHandler+0x10>)
 8002096:	f001 f8fd 	bl	8003294 <_ZN13Gorevyonetici12BayrakKaldirEv>
	}
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200002d4 	.word	0x200002d4

080020a4 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	gps.UartRxCpltCallback();
 80020ac:	4803      	ldr	r0, [pc, #12]	; (80020bc <HAL_UART_RxCpltCallback+0x18>)
 80020ae:	f000 fb47 	bl	8002740 <_ZN3GPS18UartRxCpltCallbackEv>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000388 	.word	0x20000388

080020c0 <_Z41__static_initialization_and_destruction_0ii>:
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d120      	bne.n	8002112 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d11b      	bne.n	8002112 <_Z41__static_initialization_and_destruction_0ii+0x52>
Uart uart3(USART3);
 80020da:	4910      	ldr	r1, [pc, #64]	; (800211c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80020dc:	4810      	ldr	r0, [pc, #64]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80020de:	f001 f961 	bl	80033a4 <_ZN4UartC1EP13USART_TypeDef>
Timer timer7(TIM3);
 80020e2:	4910      	ldr	r1, [pc, #64]	; (8002124 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80020e4:	4810      	ldr	r0, [pc, #64]	; (8002128 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80020e6:	f001 fa23 	bl	8003530 <_ZN5TimerC1EP11TIM_TypeDef>
Gorevyonetici gorev(TIM3);
 80020ea:	490e      	ldr	r1, [pc, #56]	; (8002124 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80020ec:	480f      	ldr	r0, [pc, #60]	; (800212c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80020ee:	f001 f870 	bl	80031d2 <_ZN13GorevyoneticiC1EP11TIM_TypeDef>
MyImu imu(&hi2c1);
 80020f2:	490f      	ldr	r1, [pc, #60]	; (8002130 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80020f4:	480f      	ldr	r0, [pc, #60]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80020f6:	f000 fba0 	bl	800283a <_ZN5MyImuC1EP17I2C_HandleTypeDef>
GPS gps(&huart2);
 80020fa:	490f      	ldr	r1, [pc, #60]	; (8002138 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80020fc:	480f      	ldr	r0, [pc, #60]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80020fe:	f000 fae8 	bl	80026d2 <_ZN3GPSC1EP20__UART_HandleTypeDef>
Paket gpsPaket(0x12, 0x34, 0x01, 0x08);
 8002102:	2308      	movs	r3, #8
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2301      	movs	r3, #1
 8002108:	2234      	movs	r2, #52	; 0x34
 800210a:	2112      	movs	r1, #18
 800210c:	480c      	ldr	r0, [pc, #48]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800210e:	f000 ff98 	bl	8003042 <_ZN5PaketC1Ehhhh>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40004800 	.word	0x40004800
 8002120:	20000270 	.word	0x20000270
 8002124:	40000400 	.word	0x40000400
 8002128:	200002d0 	.word	0x200002d0
 800212c:	200002d4 	.word	0x200002d4
 8002130:	20000204 	.word	0x20000204
 8002134:	2000033c 	.word	0x2000033c
 8002138:	20000544 	.word	0x20000544
 800213c:	20000388 	.word	0x20000388
 8002140:	200004d0 	.word	0x200004d0

08002144 <_GLOBAL__sub_I_GpsDataPacket>:
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
 8002148:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800214c:	2001      	movs	r0, #1
 800214e:	f7ff ffb7 	bl	80020c0 <_Z41__static_initialization_and_destruction_0ii>
 8002152:	bd80      	pop	{r7, pc}

08002154 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <MX_SPI1_Init+0x64>)
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <MX_SPI1_Init+0x68>)
 800215c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <MX_SPI1_Init+0x64>)
 8002160:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002164:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002166:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <MX_SPI1_Init+0x64>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <MX_SPI1_Init+0x64>)
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <MX_SPI1_Init+0x64>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <MX_SPI1_Init+0x64>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <MX_SPI1_Init+0x64>)
 8002180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002184:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <MX_SPI1_Init+0x64>)
 8002188:	2200      	movs	r2, #0
 800218a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <MX_SPI1_Init+0x64>)
 800218e:	2200      	movs	r2, #0
 8002190:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <MX_SPI1_Init+0x64>)
 8002194:	2200      	movs	r2, #0
 8002196:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <MX_SPI1_Init+0x64>)
 800219a:	2200      	movs	r2, #0
 800219c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <MX_SPI1_Init+0x64>)
 80021a0:	220a      	movs	r2, #10
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021a4:	4804      	ldr	r0, [pc, #16]	; (80021b8 <MX_SPI1_Init+0x64>)
 80021a6:	f004 f81f 	bl	80061e8 <HAL_SPI_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021b0:	f7ff feb4 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200004e8 	.word	0x200004e8
 80021bc:	40013000 	.word	0x40013000

080021c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a19      	ldr	r2, [pc, #100]	; (8002244 <HAL_SPI_MspInit+0x84>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d12b      	bne.n	800223a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_SPI_MspInit+0x88>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_SPI_MspInit+0x88>)
 80021ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021f0:	6453      	str	r3, [r2, #68]	; 0x44
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_SPI_MspInit+0x88>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_SPI_MspInit+0x88>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a10      	ldr	r2, [pc, #64]	; (8002248 <HAL_SPI_MspInit+0x88>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_SPI_MspInit+0x88>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800221a:	23e0      	movs	r3, #224	; 0xe0
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800222a:	2305      	movs	r3, #5
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4805      	ldr	r0, [pc, #20]	; (800224c <HAL_SPI_MspInit+0x8c>)
 8002236:	f001 fce5 	bl	8003c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40013000 	.word	0x40013000
 8002248:	40023800 	.word	0x40023800
 800224c:	40020000 	.word	0x40020000

08002250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_MspInit+0x4c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a0f      	ldr	r2, [pc, #60]	; (800229c <HAL_MspInit+0x4c>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_MspInit+0x4c>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_MspInit+0x4c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a08      	ldr	r2, [pc, #32]	; (800229c <HAL_MspInit+0x4c>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_MspInit+0x4c>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800228e:	2007      	movs	r0, #7
 8002290:	f001 fbe4 	bl	8003a5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40023800 	.word	0x40023800

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ec:	f001 faa2 	bl	8003834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <USART2_IRQHandler+0x10>)
 80022fa:	f004 f8ff 	bl	80064fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000544 	.word	0x20000544

08002308 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <USART3_IRQHandler+0x10>)
 800230e:	f004 f8f5 	bl	80064fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000058c 	.word	0x2000058c

0800231c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return 1;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_kill>:

int _kill(int pid, int sig)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002336:	f007 fb51 	bl	80099dc <__errno>
 800233a:	4603      	mov	r3, r0
 800233c:	2216      	movs	r2, #22
 800233e:	601a      	str	r2, [r3, #0]
  return -1;
 8002340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_exit>:

void _exit (int status)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ffe7 	bl	800232c <_kill>
  while (1) {}    /* Make sure we hang here */
 800235e:	e7fe      	b.n	800235e <_exit+0x12>

08002360 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e00a      	b.n	8002388 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002372:	f3af 8000 	nop.w
 8002376:	4601      	mov	r1, r0
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	60ba      	str	r2, [r7, #8]
 800237e:	b2ca      	uxtb	r2, r1
 8002380:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3301      	adds	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	dbf0      	blt.n	8002372 <_read+0x12>
  }

  return len;
 8002390:	687b      	ldr	r3, [r7, #4]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e009      	b.n	80023c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	60ba      	str	r2, [r7, #8]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	3301      	adds	r3, #1
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	dbf1      	blt.n	80023ac <_write+0x12>
  }
  return len;
 80023c8:	687b      	ldr	r3, [r7, #4]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <_close>:

int _close(int file)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023fa:	605a      	str	r2, [r3, #4]
  return 0;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <_isatty>:

int _isatty(int file)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002412:	2301      	movs	r3, #1
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <_sbrk+0x5c>)
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <_sbrk+0x60>)
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <_sbrk+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <_sbrk+0x64>)
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <_sbrk+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	429a      	cmp	r2, r3
 800246a:	d207      	bcs.n	800247c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800246c:	f007 fab6 	bl	80099dc <__errno>
 8002470:	4603      	mov	r3, r0
 8002472:	220c      	movs	r2, #12
 8002474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	e009      	b.n	8002490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <_sbrk+0x64>)
 800248c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20020000 	.word	0x20020000
 800249c:	00000400 	.word	0x00000400
 80024a0:	20000540 	.word	0x20000540
 80024a4:	20000728 	.word	0x20000728

080024a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <SystemInit+0x20>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <SystemInit+0x20>)
 80024b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <MX_USART2_UART_Init+0x50>)
 80024d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024f2:	220c      	movs	r2, #12
 80024f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_USART2_UART_Init+0x4c>)
 8002504:	f003 fef9 	bl	80062fa <HAL_UART_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800250e:	f7ff fd05 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000544 	.word	0x20000544
 800251c:	40004400 	.word	0x40004400

08002520 <HAL_UART_MspInit>:
  /* USER CODE END USART3_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <HAL_UART_MspInit+0x148>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d134      	bne.n	80025ac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	4b49      	ldr	r3, [pc, #292]	; (800266c <HAL_UART_MspInit+0x14c>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a48      	ldr	r2, [pc, #288]	; (800266c <HAL_UART_MspInit+0x14c>)
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_UART_MspInit+0x14c>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	4b42      	ldr	r3, [pc, #264]	; (800266c <HAL_UART_MspInit+0x14c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a41      	ldr	r2, [pc, #260]	; (800266c <HAL_UART_MspInit+0x14c>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b3f      	ldr	r3, [pc, #252]	; (800266c <HAL_UART_MspInit+0x14c>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800257a:	230c      	movs	r3, #12
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800258a:	2307      	movs	r3, #7
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	4836      	ldr	r0, [pc, #216]	; (8002670 <HAL_UART_MspInit+0x150>)
 8002596:	f001 fb35 	bl	8003c04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2026      	movs	r0, #38	; 0x26
 80025a0:	f001 fa67 	bl	8003a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025a4:	2026      	movs	r0, #38	; 0x26
 80025a6:	f001 fa80 	bl	8003aaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025aa:	e058      	b.n	800265e <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a30      	ldr	r2, [pc, #192]	; (8002674 <HAL_UART_MspInit+0x154>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d153      	bne.n	800265e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b2c      	ldr	r3, [pc, #176]	; (800266c <HAL_UART_MspInit+0x14c>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a2b      	ldr	r2, [pc, #172]	; (800266c <HAL_UART_MspInit+0x14c>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b29      	ldr	r3, [pc, #164]	; (800266c <HAL_UART_MspInit+0x14c>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_UART_MspInit+0x14c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a24      	ldr	r2, [pc, #144]	; (800266c <HAL_UART_MspInit+0x14c>)
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b22      	ldr	r3, [pc, #136]	; (800266c <HAL_UART_MspInit+0x14c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	4b1e      	ldr	r3, [pc, #120]	; (800266c <HAL_UART_MspInit+0x14c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_UART_MspInit+0x14c>)
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_UART_MspInit+0x14c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800260a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800260e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800261c:	2307      	movs	r3, #7
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	4619      	mov	r1, r3
 8002626:	4814      	ldr	r0, [pc, #80]	; (8002678 <HAL_UART_MspInit+0x158>)
 8002628:	f001 faec 	bl	8003c04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800262c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800263e:	2307      	movs	r3, #7
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4619      	mov	r1, r3
 8002648:	480c      	ldr	r0, [pc, #48]	; (800267c <HAL_UART_MspInit+0x15c>)
 800264a:	f001 fadb 	bl	8003c04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	2027      	movs	r0, #39	; 0x27
 8002654:	f001 fa0d 	bl	8003a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002658:	2027      	movs	r0, #39	; 0x27
 800265a:	f001 fa26 	bl	8003aaa <HAL_NVIC_EnableIRQ>
}
 800265e:	bf00      	nop
 8002660:	3730      	adds	r7, #48	; 0x30
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40004400 	.word	0x40004400
 800266c:	40023800 	.word	0x40023800
 8002670:	40020000 	.word	0x40020000
 8002674:	40004800 	.word	0x40004800
 8002678:	40020400 	.word	0x40020400
 800267c:	40020c00 	.word	0x40020c00

08002680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002684:	f7ff ff10 	bl	80024a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002688:	480c      	ldr	r0, [pc, #48]	; (80026bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800268a:	490d      	ldr	r1, [pc, #52]	; (80026c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800268c:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002690:	e002      	b.n	8002698 <LoopCopyDataInit>

08002692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002696:	3304      	adds	r3, #4

08002698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800269c:	d3f9      	bcc.n	8002692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026a0:	4c0a      	ldr	r4, [pc, #40]	; (80026cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80026a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a4:	e001      	b.n	80026aa <LoopFillZerobss>

080026a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a8:	3204      	adds	r2, #4

080026aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ac:	d3fb      	bcc.n	80026a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ae:	f007 f99b 	bl	80099e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026b2:	f7ff fbb5 	bl	8001e20 <main>
  bx  lr    
 80026b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80026c4:	0800bd30 	.word	0x0800bd30
  ldr r2, =_sbss
 80026c8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80026cc:	20000724 	.word	0x20000724

080026d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d0:	e7fe      	b.n	80026d0 <ADC_IRQHandler>

080026d2 <_ZN3GPSC1EP20__UART_HandleTypeDef>:
 *  Created on: Jun 29, 2024
 *      Author: onurd
 */
#include "Gps.h"

GPS::GPS(UART_HandleTypeDef* huart)
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
{
	this->huart_=huart;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	601a      	str	r2, [r3, #0]
	this->rxIndex_u8=0;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	this->rxData_u8=0;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	this->latitude_f32=0;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	this->longitude_f32=0;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_ZN3GPS10YapilandirEv>:

void GPS::Yapilandir()
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    lwgps_init(&gps_);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3308      	adds	r3, #8
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff faaf 	bl	8001c84 <lwgps_init>
    HAL_UART_Receive_IT(huart_, &rxData_u8, 1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f203 1339 	addw	r3, r3, #313	; 0x139
 8002730:	2201      	movs	r2, #1
 8002732:	4619      	mov	r1, r3
 8002734:	f003 febc 	bl	80064b0 <HAL_UART_Receive_IT>
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <_ZN3GPS18UartRxCpltCallbackEv>:

void GPS::UartRxCpltCallback()
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
    if (rxData_u8 != '\n' && rxIndex_u8 < sizeof(rxBuffer_))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800274e:	2b0a      	cmp	r3, #10
 8002750:	d016      	beq.n	8002780 <_ZN3GPS18UartRxCpltCallbackEv+0x40>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002758:	b25b      	sxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	db10      	blt.n	8002780 <_ZN3GPS18UartRxCpltCallbackEv+0x40>
    {
        rxBuffer_[rxIndex_u8++] = rxData_u8;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	b2d1      	uxtb	r1, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	f882 1138 	strb.w	r1, [r2, #312]	; 0x138
 800276e:	4619      	mov	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	440b      	add	r3, r1
 800277a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800277e:	e017      	b.n	80027b0 <_ZN3GPS18UartRxCpltCallbackEv+0x70>
    }
    else
    {
        lwgps_process(&gps_, rxBuffer_, rxIndex_u8 + 1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f103 0008 	add.w	r0, r3, #8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002792:	3301      	adds	r3, #1
 8002794:	461a      	mov	r2, r3
 8002796:	f7ff fa83 	bl	8001ca0 <lwgps_process>
        GpsDataCek();
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f815 	bl	80027ca <_ZN3GPS10GpsDataCekEv>
        rxIndex_u8 = 0;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
        rxData_u8 = 0;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    }
    HAL_UART_Receive_IT(huart_, &rxData_u8, 1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f203 1339 	addw	r3, r3, #313	; 0x139
 80027ba:	2201      	movs	r2, #1
 80027bc:	4619      	mov	r1, r3
 80027be:	f003 fe77 	bl	80064b0 <HAL_UART_Receive_IT>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_ZN3GPS10GpsDataCekEv>:

void GPS::GpsDataCek()
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
	 latitude_f32 = gps_.latitude;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe f9fc 	bl	8000bd8 <__aeabi_d2f>
 80027e0:	4602      	mov	r2, r0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	 longitude_f32 = gps_.longitude;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f7fe f9f1 	bl	8000bd8 <__aeabi_d2f>
 80027f6:	4602      	mov	r2, r0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_ZN3GPS10LatitudeAlEv>:

float* GPS::LatitudeAl()
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
    return &latitude_f32;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f503 739e 	add.w	r3, r3, #316	; 0x13c
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <_ZN3GPS11LongitudeAlEv>:

float* GPS::LongitudeAl()
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
    return &longitude_f32;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <_ZN5MyImuC1EP17I2C_HandleTypeDef>:
#define ACC_CNFG_REG 0X1C
#define MPU6500_ADDRESS 0x68<< 1
#define WHO_AM_I 0x75
#define RESET_BIT 0x80

MyImu::MyImu(I2C_HandleTypeDef *hi2c1)
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
{
	this->hi2c1=hi2c1;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	601a      	str	r2, [r3, #0]
}
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_ZN5MyImu17DBC_MPU6500_ResetEv>:

void MyImu::DBC_MPU6500_Reset()
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af04      	add	r7, sp, #16
 800285e:	6078      	str	r0, [r7, #4]
	data = RESET_BIT;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2280      	movs	r2, #128	; 0x80
 8002864:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Mem_Write(hi2c1, MPU6500_ADDRESS , PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3304      	adds	r3, #4
 800286e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002872:	9202      	str	r2, [sp, #8]
 8002874:	2201      	movs	r2, #1
 8002876:	9201      	str	r2, [sp, #4]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	226b      	movs	r2, #107	; 0x6b
 800287e:	21d0      	movs	r1, #208	; 0xd0
 8002880:	f001 ffea 	bl	8004858 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002884:	2064      	movs	r0, #100	; 0x64
 8002886:	f000 fff5 	bl	8003874 <HAL_Delay>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv>:
void MyImu::DBC_MPU6500_YAPILANDIR()
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b088      	sub	sp, #32
 8002896:	af04      	add	r7, sp, #16
 8002898:	6078      	str	r0, [r7, #4]
	uint8_t check;
	DBC_MPU6500_Reset();
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ffdc 	bl	8002858 <_ZN5MyImu17DBC_MPU6500_ResetEv>
	// Check device ID WHO_AM_I
	HAL_I2C_Mem_Read(hi2c1, MPU6500_ADDRESS , WHO_AM_I, 1, &check, 1, 1000);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a8:	9302      	str	r3, [sp, #8]
 80028aa:	2301      	movs	r3, #1
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	f107 030f 	add.w	r3, r7, #15
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2301      	movs	r3, #1
 80028b6:	2275      	movs	r2, #117	; 0x75
 80028b8:	21d0      	movs	r1, #208	; 0xd0
 80028ba:	f002 f8c7 	bl	8004a4c <HAL_I2C_Mem_Read>
	if (check == 0x70)
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	2b70      	cmp	r3, #112	; 0x70
 80028c2:	d147      	bne.n	8002954 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv+0xc2>
	{
		// Power management register 0X6B we should write all 0's to wake the sensor up
		data = 0;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c1, MPU6500_ADDRESS , PWR_MGMT_1_REG, 1, &data, 1, 1000);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3304      	adds	r3, #4
 80028d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028d6:	9202      	str	r2, [sp, #8]
 80028d8:	2201      	movs	r2, #1
 80028da:	9201      	str	r2, [sp, #4]
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2301      	movs	r3, #1
 80028e0:	226b      	movs	r2, #107	; 0x6b
 80028e2:	21d0      	movs	r1, #208	; 0xd0
 80028e4:	f001 ffb8 	bl	8004858 <HAL_I2C_Mem_Write>

		// Set Data Rate of 1KHz by writing SMPLRT_DIV register
		data = 0x07;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2207      	movs	r2, #7
 80028ec:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c1, MPU6500_ADDRESS ,SMPLRT_DIV_REG, 1, &data, 1, 1000);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3304      	adds	r3, #4
 80028f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028fa:	9202      	str	r2, [sp, #8]
 80028fc:	2201      	movs	r2, #1
 80028fe:	9201      	str	r2, [sp, #4]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2301      	movs	r3, #1
 8002904:	2219      	movs	r2, #25
 8002906:	21d0      	movs	r1, #208	; 0xd0
 8002908:	f001 ffa6 	bl	8004858 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		data = 0x00;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c1, MPU6500_ADDRESS, ACC_CNFG_REG, 1, &data, 1, 1000);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3304      	adds	r3, #4
 800291a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800291e:	9202      	str	r2, [sp, #8]
 8002920:	2201      	movs	r2, #1
 8002922:	9201      	str	r2, [sp, #4]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2301      	movs	r3, #1
 8002928:	221c      	movs	r2, #28
 800292a:	21d0      	movs	r1, #208	; 0xd0
 800292c:	f001 ff94 	bl	8004858 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		data = 0x00;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c1, MPU6500_ADDRESS , GYRO_CNFG_REG, 1, &data, 1, 1000);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002942:	9202      	str	r2, [sp, #8]
 8002944:	2201      	movs	r2, #1
 8002946:	9201      	str	r2, [sp, #4]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2301      	movs	r3, #1
 800294c:	221b      	movs	r2, #27
 800294e:	21d0      	movs	r1, #208	; 0xd0
 8002950:	f001 ff82 	bl	8004858 <HAL_I2C_Mem_Write>
	}
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_ZN5MyImu14DBC_GYRO_OFSETEv>:

void MyImu::DBC_GYRO_OFSET()
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	for(int i=0; i<2000; i++)
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e032      	b.n	80029d0 <_ZN5MyImu14DBC_GYRO_OFSETEv+0x74>
	{
		DBC_GYRO_OKU();
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f932 	bl	8002bd4 <_ZN5MyImu12DBC_GYRO_OKUEv>

		gyroHesap[0] += gyroEksen[0];
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	ed93 7a05 	vldr	s14, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800297c:	ee07 3a90 	vmov	s15, r3
 8002980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	edc3 7a05 	vstr	s15, [r3, #20]
	    gyroHesap[1] += gyroEksen[1];
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	ed93 7a06 	vldr	s14, [r3, #24]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	edc3 7a06 	vstr	s15, [r3, #24]
	    gyroHesap[2] += gyroEksen[2];
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	ed93 7a07 	vldr	s14, [r3, #28]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	edc3 7a07 	vstr	s15, [r3, #28]
	for(int i=0; i<2000; i++)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3301      	adds	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80029d6:	dbc8      	blt.n	800296a <_ZN5MyImu14DBC_GYRO_OFSETEv+0xe>
	 }
		gyroHesap[0] /= 2000;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	ed93 7a05 	vldr	s14, [r3, #20]
 80029de:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002a24 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 80029e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	edc3 7a05 	vstr	s15, [r3, #20]
		gyroHesap[1] /= 2000;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	ed93 7a06 	vldr	s14, [r3, #24]
 80029f2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002a24 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 80029f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	edc3 7a06 	vstr	s15, [r3, #24]
	    gyroHesap[2] /= 2000;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a06:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002a24 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 8002a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	edc3 7a07 	vstr	s15, [r3, #28]
	    //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	    HAL_Delay(100);
 8002a14:	2064      	movs	r0, #100	; 0x64
 8002a16:	f000 ff2d 	bl	8003874 <HAL_Delay>
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	44fa0000 	.word	0x44fa0000

08002a28 <_ZN5MyImu13DBC_READ_DATAEv>:
void MyImu::DBC_READ_DATA()
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
    DBC_ACC_OKU();
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f843 	bl	8002abc <_ZN5MyImu11DBC_ACC_OKUEv>

    DBC_SICAKLIK_OKU();
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f87e 	bl	8002b38 <_ZN5MyImu16DBC_SICAKLIK_OKUEv>

    DBC_GYRO_OKU();
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f8c9 	bl	8002bd4 <_ZN5MyImu12DBC_GYRO_OKUEv>

    gyroEksen[0] -= gyroHesap[0];
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a5e:	ee17 3a90 	vmov	r3, s15
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	80da      	strh	r2, [r3, #6]
    gyroEksen[1] -= gyroHesap[1];
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a84:	ee17 3a90 	vmov	r3, s15
 8002a88:	b21a      	sxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	811a      	strh	r2, [r3, #8]
    gyroEksen[2] -= gyroHesap[2];
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aaa:	ee17 3a90 	vmov	r3, s15
 8002aae:	b21a      	sxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	815a      	strh	r2, [r3, #10]
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_ZN5MyImu11DBC_ACC_OKUEv>:
void MyImu::DBC_ACC_OKU()
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	6078      	str	r0, [r7, #4]
	uint8_t tuffer[6];
	// Acc. Raw Values
	tuffer[0] = 0x3B;
 8002ac4:	233b      	movs	r3, #59	; 0x3b
 8002ac6:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c1, MPU6500_ADDRESS, tuffer, 1, HAL_MAX_DELAY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	f107 0208 	add.w	r2, r7, #8
 8002ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	21d0      	movs	r1, #208	; 0xd0
 8002ada:	f001 fb8d 	bl	80041f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c1, MPU6500_ADDRESS, tuffer, 6, HAL_MAX_DELAY);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	f107 0208 	add.w	r2, r7, #8
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2306      	movs	r3, #6
 8002aee:	21d0      	movs	r1, #208	; 0xd0
 8002af0:	f001 fc80 	bl	80043f4 <HAL_I2C_Master_Receive>
	accEksen[0] = (tuffer[0] << 8 | tuffer[1]);
 8002af4:	7a3b      	ldrb	r3, [r7, #8]
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	b21a      	sxth	r2, r3
 8002afa:	7a7b      	ldrb	r3, [r7, #9]
 8002afc:	b21b      	sxth	r3, r3
 8002afe:	4313      	orrs	r3, r2
 8002b00:	b21a      	sxth	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	819a      	strh	r2, [r3, #12]
	accEksen[1] = (tuffer[2] << 8 | tuffer[3]);
 8002b06:	7abb      	ldrb	r3, [r7, #10]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	b21a      	sxth	r2, r3
 8002b0c:	7afb      	ldrb	r3, [r7, #11]
 8002b0e:	b21b      	sxth	r3, r3
 8002b10:	4313      	orrs	r3, r2
 8002b12:	b21a      	sxth	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	81da      	strh	r2, [r3, #14]
	accEksen[2] = (tuffer[4] << 8 | tuffer[5]);
 8002b18:	7b3b      	ldrb	r3, [r7, #12]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	b21a      	sxth	r2, r3
 8002b1e:	7b7b      	ldrb	r3, [r7, #13]
 8002b20:	b21b      	sxth	r3, r3
 8002b22:	4313      	orrs	r3, r2
 8002b24:	b21a      	sxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	821a      	strh	r2, [r3, #16]
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	0000      	movs	r0, r0
 8002b34:	0000      	movs	r0, r0
	...

08002b38 <_ZN5MyImu16DBC_SICAKLIK_OKUEv>:
void MyImu::DBC_SICAKLIK_OKU()
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	// Temperature Values
	buffer[0] = 0x41;
 8002b40:	2341      	movs	r3, #65	; 0x41
 8002b42:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hi2c1, MPU6500_ADDRESS, buffer, 1, HAL_MAX_DELAY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	f107 020c 	add.w	r2, r7, #12
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	2301      	movs	r3, #1
 8002b54:	21d0      	movs	r1, #208	; 0xd0
 8002b56:	f001 fb4f 	bl	80041f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c1, MPU6500_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	f107 020c 	add.w	r2, r7, #12
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2302      	movs	r3, #2
 8002b6a:	21d0      	movs	r1, #208	; 0xd0
 8002b6c:	f001 fc42 	bl	80043f4 <HAL_I2C_Master_Receive>
	hamSicaklik = (buffer[0] << 8 | buffer[1]);
 8002b70:	7b3b      	ldrb	r3, [r7, #12]
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	b21a      	sxth	r2, r3
 8002b76:	7b7b      	ldrb	r3, [r7, #13]
 8002b78:	b21b      	sxth	r3, r3
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	b21a      	sxth	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	Sicaklik[0]=((float)((float)hamSicaklik / 340.0)) + 36.53;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b92:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002bd0 <_ZN5MyImu16DBC_SICAKLIK_OKUEv+0x98>
 8002b96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b9a:	ee16 0a90 	vmov	r0, s13
 8002b9e:	f7fd fccb 	bl	8000538 <__aeabi_f2d>
 8002ba2:	a309      	add	r3, pc, #36	; (adr r3, 8002bc8 <_ZN5MyImu16DBC_SICAKLIK_OKUEv+0x90>)
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f7fd fb68 	bl	800027c <__adddf3>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7fe f810 	bl	8000bd8 <__aeabi_d2f>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	0a3d70a4 	.word	0x0a3d70a4
 8002bcc:	404243d7 	.word	0x404243d7
 8002bd0:	43aa0000 	.word	0x43aa0000

08002bd4 <_ZN5MyImu12DBC_GYRO_OKUEv>:
void MyImu::DBC_GYRO_OKU()
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	6078      	str	r0, [r7, #4]
	uint8_t cuffer[6];
	 // Gyro Raw Values
	cuffer[0] = 0x43;
 8002bdc:	2343      	movs	r3, #67	; 0x43
 8002bde:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c1, MPU6500_ADDRESS, cuffer, 1, HAL_MAX_DELAY);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	f107 0208 	add.w	r2, r7, #8
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2301      	movs	r3, #1
 8002bf0:	21d0      	movs	r1, #208	; 0xd0
 8002bf2:	f001 fb01 	bl	80041f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c1, MPU6500_ADDRESS, cuffer, 6, HAL_MAX_DELAY);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	f107 0208 	add.w	r2, r7, #8
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2306      	movs	r3, #6
 8002c06:	21d0      	movs	r1, #208	; 0xd0
 8002c08:	f001 fbf4 	bl	80043f4 <HAL_I2C_Master_Receive>
	gyroEksen[0] = (cuffer[0] << 8 | cuffer[1]);
 8002c0c:	7a3b      	ldrb	r3, [r7, #8]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	b21a      	sxth	r2, r3
 8002c12:	7a7b      	ldrb	r3, [r7, #9]
 8002c14:	b21b      	sxth	r3, r3
 8002c16:	4313      	orrs	r3, r2
 8002c18:	b21a      	sxth	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	80da      	strh	r2, [r3, #6]
	gyroEksen[1] = (cuffer[2] << 8 | cuffer[3]);
 8002c1e:	7abb      	ldrb	r3, [r7, #10]
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	b21a      	sxth	r2, r3
 8002c24:	7afb      	ldrb	r3, [r7, #11]
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b21a      	sxth	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	811a      	strh	r2, [r3, #8]
	gyroEksen[2] = (cuffer[4] << 8 | cuffer[5]);
 8002c30:	7b3b      	ldrb	r3, [r7, #12]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	b21a      	sxth	r2, r3
 8002c36:	7b7b      	ldrb	r3, [r7, #13]
 8002c38:	b21b      	sxth	r3, r3
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	b21a      	sxth	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	815a      	strh	r2, [r3, #10]

}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	0000      	movs	r0, r0
 8002c4c:	0000      	movs	r0, r0
	...

08002c50 <_ZN5MyImu13DBC_ACI_BULMAEv>:
void MyImu::DBC_ACI_BULMA()
{
 8002c50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
	DBC_READ_DATA();//0.00140.000001066
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fee4 	bl	8002a28 <_ZN5MyImu13DBC_READ_DATAEv>
	//HAM VERI iyilestirmeleri
	gyroPitchAci += gyroEksen[0] * 0.00140; //65.5 * 4000 mikrosaniye
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fc67 	bl	8000538 <__aeabi_f2d>
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	460d      	mov	r5, r1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd fc4d 	bl	8000514 <__aeabi_i2d>
 8002c7a:	a3cf      	add	r3, pc, #828	; (adr r3, 8002fb8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x368>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd fcb2 	bl	80005e8 <__aeabi_dmul>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4620      	mov	r0, r4
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	f7fd faf6 	bl	800027c <__adddf3>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f7fd ff9e 	bl	8000bd8 <__aeabi_d2f>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
	gyroRollAci += gyroEksen[1] * 0.00140;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc46 	bl	8000538 <__aeabi_f2d>
 8002cac:	4604      	mov	r4, r0
 8002cae:	460d      	mov	r5, r1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fc2c 	bl	8000514 <__aeabi_i2d>
 8002cbc:	a3be      	add	r3, pc, #760	; (adr r3, 8002fb8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x368>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	f7fd fc91 	bl	80005e8 <__aeabi_dmul>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4620      	mov	r0, r4
 8002ccc:	4629      	mov	r1, r5
 8002cce:	f7fd fad5 	bl	800027c <__adddf3>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f7fd ff7d 	bl	8000bd8 <__aeabi_d2f>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	62da      	str	r2, [r3, #44]	; 0x2c
	gyroYawAci += gyroEksen[2] * 0.00140;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fc25 	bl	8000538 <__aeabi_f2d>
 8002cee:	4604      	mov	r4, r0
 8002cf0:	460d      	mov	r5, r1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fc0b 	bl	8000514 <__aeabi_i2d>
 8002cfe:	a3ae      	add	r3, pc, #696	; (adr r3, 8002fb8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x368>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd fc70 	bl	80005e8 <__aeabi_dmul>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	4629      	mov	r1, r5
 8002d10:	f7fd fab4 	bl	800027c <__adddf3>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f7fd ff5c 	bl	8000bd8 <__aeabi_d2f>
 8002d20:	4602      	mov	r2, r0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	635a      	str	r2, [r3, #52]	; 0x34

	gyroPitchAci += gyroRollAci * sin(gyroEksen[2]* 0.000001066);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fc04 	bl	8000538 <__aeabi_f2d>
 8002d30:	4604      	mov	r4, r0
 8002d32:	460d      	mov	r5, r1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd fbfd 	bl	8000538 <__aeabi_f2d>
 8002d3e:	4680      	mov	r8, r0
 8002d40:	4689      	mov	r9, r1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fbe3 	bl	8000514 <__aeabi_i2d>
 8002d4e:	a39c      	add	r3, pc, #624	; (adr r3, 8002fc0 <_ZN5MyImu13DBC_ACI_BULMAEv+0x370>)
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f7fd fc48 	bl	80005e8 <__aeabi_dmul>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	ec43 2b17 	vmov	d7, r2, r3
 8002d60:	eeb0 0a47 	vmov.f32	s0, s14
 8002d64:	eef0 0a67 	vmov.f32	s1, s15
 8002d68:	f004 fb8a 	bl	8007480 <sin>
 8002d6c:	ec53 2b10 	vmov	r2, r3, d0
 8002d70:	4640      	mov	r0, r8
 8002d72:	4649      	mov	r1, r9
 8002d74:	f7fd fc38 	bl	80005e8 <__aeabi_dmul>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	4629      	mov	r1, r5
 8002d80:	f7fd fa7c 	bl	800027c <__adddf3>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7fd ff24 	bl	8000bd8 <__aeabi_d2f>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
	gyroRollAci -= gyroPitchAci * sin(gyroEksen[2]* 0.000001066);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd fbcc 	bl	8000538 <__aeabi_f2d>
 8002da0:	4604      	mov	r4, r0
 8002da2:	460d      	mov	r5, r1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fbc5 	bl	8000538 <__aeabi_f2d>
 8002dae:	4680      	mov	r8, r0
 8002db0:	4689      	mov	r9, r1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd fbab 	bl	8000514 <__aeabi_i2d>
 8002dbe:	a380      	add	r3, pc, #512	; (adr r3, 8002fc0 <_ZN5MyImu13DBC_ACI_BULMAEv+0x370>)
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	f7fd fc10 	bl	80005e8 <__aeabi_dmul>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	ec43 2b17 	vmov	d7, r2, r3
 8002dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8002dd4:	eef0 0a67 	vmov.f32	s1, s15
 8002dd8:	f004 fb52 	bl	8007480 <sin>
 8002ddc:	ec53 2b10 	vmov	r2, r3, d0
 8002de0:	4640      	mov	r0, r8
 8002de2:	4649      	mov	r1, r9
 8002de4:	f7fd fc00 	bl	80005e8 <__aeabi_dmul>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4620      	mov	r0, r4
 8002dee:	4629      	mov	r1, r5
 8002df0:	f7fd fa42 	bl	8000278 <__aeabi_dsub>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f7fd feec 	bl	8000bd8 <__aeabi_d2f>
 8002e00:	4602      	mov	r2, r0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c

	accToplamVektor = sqrt((accEksen[0]*accEksen[0])+(accEksen[1]*accEksen[1])+(accEksen[2]*accEksen[2]));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002e14:	fb03 f202 	mul.w	r2, r3, r2
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	441a      	add	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002e32:	4619      	mov	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd fb67 	bl	8000514 <__aeabi_i2d>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	ec43 2b10 	vmov	d0, r2, r3
 8002e4e:	f004 fadf 	bl	8007410 <sqrt>
 8002e52:	ec53 2b10 	vmov	r2, r3, d0
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f7fd fe75 	bl	8000b48 <__aeabi_d2iz>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	b21a      	sxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	841a      	strh	r2, [r3, #32]

	//57.296 =1 /(3.142 /180)
	accPitchAci = asin((float)accEksen[1]/accToplamVektor)*57.296;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002e7a:	ee07 3a90 	vmov	s15, r3
 8002e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e86:	ee16 0a90 	vmov	r0, s13
 8002e8a:	f7fd fb55 	bl	8000538 <__aeabi_f2d>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	ec43 2b10 	vmov	d0, r2, r3
 8002e96:	f004 fa87 	bl	80073a8 <asin>
 8002e9a:	ec51 0b10 	vmov	r0, r1, d0
 8002e9e:	a34a      	add	r3, pc, #296	; (adr r3, 8002fc8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x378>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd fba0 	bl	80005e8 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fd fe92 	bl	8000bd8 <__aeabi_d2f>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24
	accRollAci = asin((float)accEksen[0]/accToplamVektor)*-57.296;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ed6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002eda:	ee16 0a90 	vmov	r0, s13
 8002ede:	f7fd fb2b 	bl	8000538 <__aeabi_f2d>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	ec43 2b10 	vmov	d0, r2, r3
 8002eea:	f004 fa5d 	bl	80073a8 <asin>
 8002eee:	ec51 0b10 	vmov	r0, r1, d0
 8002ef2:	a337      	add	r3, pc, #220	; (adr r3, 8002fd0 <_ZN5MyImu13DBC_ACI_BULMAEv+0x380>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f7fd fb76 	bl	80005e8 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	f7fd fe68 	bl	8000bd8 <__aeabi_d2f>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	629a      	str	r2, [r3, #40]	; 0x28

	pitchAcisi = gyroPitchAci * 0.9 + accPitchAci * 0.1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fb10 	bl	8000538 <__aeabi_f2d>
 8002f18:	a32f      	add	r3, pc, #188	; (adr r3, 8002fd8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x388>)
 8002f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1e:	f7fd fb63 	bl	80005e8 <__aeabi_dmul>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4614      	mov	r4, r2
 8002f28:	461d      	mov	r5, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd fb02 	bl	8000538 <__aeabi_f2d>
 8002f34:	a32a      	add	r3, pc, #168	; (adr r3, 8002fe0 <_ZN5MyImu13DBC_ACI_BULMAEv+0x390>)
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	f7fd fb55 	bl	80005e8 <__aeabi_dmul>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4620      	mov	r0, r4
 8002f44:	4629      	mov	r1, r5
 8002f46:	f7fd f999 	bl	800027c <__adddf3>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f7fd fe41 	bl	8000bd8 <__aeabi_d2f>
 8002f56:	4602      	mov	r2, r0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	63da      	str	r2, [r3, #60]	; 0x3c
	rollAci = gyroRollAci * 0.9 + accRollAci * 0.1;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd fae9 	bl	8000538 <__aeabi_f2d>
 8002f66:	a31c      	add	r3, pc, #112	; (adr r3, 8002fd8 <_ZN5MyImu13DBC_ACI_BULMAEv+0x388>)
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f7fd fb3c 	bl	80005e8 <__aeabi_dmul>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4614      	mov	r4, r2
 8002f76:	461d      	mov	r5, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fadb 	bl	8000538 <__aeabi_f2d>
 8002f82:	a317      	add	r3, pc, #92	; (adr r3, 8002fe0 <_ZN5MyImu13DBC_ACI_BULMAEv+0x390>)
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f7fd fb2e 	bl	80005e8 <__aeabi_dmul>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4620      	mov	r0, r4
 8002f92:	4629      	mov	r1, r5
 8002f94:	f7fd f972 	bl	800027c <__adddf3>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f7fd fe1a 	bl	8000bd8 <__aeabi_d2f>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38

}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	8db8bac7 	.word	0x8db8bac7
 8002fbc:	3f56f006 	.word	0x3f56f006
 8002fc0:	652c6e62 	.word	0x652c6e62
 8002fc4:	3eb1e26f 	.word	0x3eb1e26f
 8002fc8:	53f7ced9 	.word	0x53f7ced9
 8002fcc:	404ca5e3 	.word	0x404ca5e3
 8002fd0:	53f7ced9 	.word	0x53f7ced9
 8002fd4:	c04ca5e3 	.word	0xc04ca5e3
 8002fd8:	cccccccd 	.word	0xcccccccd
 8002fdc:	3feccccc 	.word	0x3feccccc
 8002fe0:	9999999a 	.word	0x9999999a
 8002fe4:	3fb99999 	.word	0x3fb99999

08002fe8 <_ZN5MyImu7PitchAlEv>:

float MyImu::PitchAl()
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
    return pitchAcisi;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	ee07 3a90 	vmov	s15, r3
}
 8002ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <_ZN5MyImu6RollAlEv>:

float MyImu::RollAl()
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
    return rollAci;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	ee07 3a90 	vmov	s15, r3
}
 8003016:	eeb0 0a67 	vmov.f32	s0, s15
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <_ZN5MyImu5YawAlEv>:
float MyImu::YawAl()
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
    return gyroYawAci;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	ee07 3a90 	vmov	s15, r3
}
 8003034:	eeb0 0a67 	vmov.f32	s0, s15
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <_ZN5PaketC1Ehhhh>:
 *      Author: onurd
 */
#include "Paket.h"
#include <string.h>

Paket::Paket(uint8_t baslik1_u8, uint8_t baslik2_u8, uint8_t paketTipi_u8, uint8_t dataBoyutu_u8)
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	4608      	mov	r0, r1
 800304c:	4611      	mov	r1, r2
 800304e:	461a      	mov	r2, r3
 8003050:	4603      	mov	r3, r0
 8003052:	70fb      	strb	r3, [r7, #3]
 8003054:	460b      	mov	r3, r1
 8003056:	70bb      	strb	r3, [r7, #2]
 8003058:	4613      	mov	r3, r2
 800305a:	707b      	strb	r3, [r7, #1]
{
	this->baslik1_u8=baslik1_u8;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	731a      	strb	r2, [r3, #12]
	this->baslik2_u8=baslik2_u8;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	78ba      	ldrb	r2, [r7, #2]
 8003066:	735a      	strb	r2, [r3, #13]
	this->paketTipi_u8=paketTipi_u8;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	787a      	ldrb	r2, [r7, #1]
 800306c:	739a      	strb	r2, [r3, #14]
	this->dataBoyutu_u8=dataBoyutu_u8;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7c3a      	ldrb	r2, [r7, #16]
 8003072:	73da      	strb	r2, [r3, #15]
	this->latitude=0;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	611a      	str	r2, [r3, #16]
	this->longitude=0;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	615a      	str	r2, [r3, #20]
    memset(paket, 0, sizeof(paket));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	220c      	movs	r2, #12
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f006 fc45 	bl	800991a <memset>
}
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_ZN5Paket12PaketOlusturEff>:

void Paket::PaketOlustur(float latitude,float longitude)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b088      	sub	sp, #32
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80030a6:	edc7 0a01 	vstr	s1, [r7, #4]
    paket[0] = baslik1_u8;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	7b1a      	ldrb	r2, [r3, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	701a      	strb	r2, [r3, #0]
    paket[1] = baslik2_u8;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	7b5a      	ldrb	r2, [r3, #13]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	705a      	strb	r2, [r3, #1]
    paket[2] = paketTipi_u8;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	7b9a      	ldrb	r2, [r3, #14]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	709a      	strb	r2, [r3, #2]
    paket[3] = dataBoyutu_u8;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	7bda      	ldrb	r2, [r3, #15]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	70da      	strb	r2, [r3, #3]
    this->latitude = latitude;
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	611a      	str	r2, [r3, #16]
    this->longitude = longitude;
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	615a      	str	r2, [r3, #20]
    uint8_t latBytes_u8[4];
    uint8_t lonBytes_u8[4];

    bytesToFloat(&latitude, latBytes_u8);
 80030d6:	f107 0218 	add.w	r2, r7, #24
 80030da:	f107 0308 	add.w	r3, r7, #8
 80030de:	4619      	mov	r1, r3
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f838 	bl	8003156 <_ZN5Paket12bytesToFloatEPfPh>
    bytesToFloat(&longitude, lonBytes_u8);
 80030e6:	f107 0214 	add.w	r2, r7, #20
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f831 	bl	8003156 <_ZN5Paket12bytesToFloatEPfPh>

    for(int i = 0; i < 4; i++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
 80030f8:	e016      	b.n	8003128 <_ZN5Paket12PaketOlusturEff+0x8e>
    {
        paket[7 - i] = latBytes_u8[i];
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f1c3 0307 	rsb	r3, r3, #7
 8003100:	f107 0118 	add.w	r1, r7, #24
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	440a      	add	r2, r1
 8003108:	7811      	ldrb	r1, [r2, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	54d1      	strb	r1, [r2, r3]
        paket[11 - i] = lonBytes_u8[i];
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f1c3 030b 	rsb	r3, r3, #11
 8003114:	f107 0114 	add.w	r1, r7, #20
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	440a      	add	r2, r1
 800311c:	7811      	ldrb	r1, [r2, #0]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	54d1      	strb	r1, [r2, r3]
    for(int i = 0; i < 4; i++)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3301      	adds	r3, #1
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b03      	cmp	r3, #3
 800312c:	dde5      	ble.n	80030fa <_ZN5Paket12PaketOlusturEff+0x60>
    }
}
 800312e:	bf00      	nop
 8003130:	bf00      	nop
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <_ZN5Paket10PaketCagirEPh>:
void Paket::PaketCagir(uint8_t *kopyaDizi)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
	memcpy(kopyaDizi, paket, sizeof(paket));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	220c      	movs	r2, #12
 8003146:	4619      	mov	r1, r3
 8003148:	6838      	ldr	r0, [r7, #0]
 800314a:	f006 fc74 	bl	8009a36 <memcpy>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_ZN5Paket12bytesToFloatEPfPh>:
uint32_t Paket::bytesToFloat(float *koordinatDeger_f, uint8_t* bytes)
{
 8003156:	b480      	push	{r7}
 8003158:	b087      	sub	sp, #28
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
    uint8_t* p = (uint8_t*)koordinatDeger_f;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 4; i++)
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	e00a      	b.n	8003182 <_ZN5Paket12bytesToFloatEPfPh+0x2c>
    {
        bytes[i] = p[i];
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	441a      	add	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	440b      	add	r3, r1
 8003178:	7812      	ldrb	r2, [r2, #0]
 800317a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3301      	adds	r3, #1
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b03      	cmp	r3, #3
 8003186:	ddf1      	ble.n	800316c <_ZN5Paket12bytesToFloatEPfPh+0x16>
    }
    return (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | (bytes[0] & 0xFF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3303      	adds	r3, #3
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	061a      	lsls	r2, r3, #24
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3302      	adds	r3, #2
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3301      	adds	r3, #1
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	4313      	orrs	r3, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	7812      	ldrb	r2, [r2, #0]
 80031a8:	4313      	orrs	r3, r2
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <_ZN5GorevC1Ev>:
#include "stm32f4xx_hal.h"
#include "stdint.h"

#define maxGorev 10

struct Gorev {
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	719a      	strb	r2, [r3, #6]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <_ZN13GorevyoneticiC1EP11TIM_TypeDef>:
#include "gorevyonetici.h"


Gorevyonetici::Gorevyonetici(TIM_TypeDef* pTimerAlan)
 80031d2:	b5b0      	push	{r4, r5, r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	705a      	strb	r2, [r3, #1]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	709a      	strb	r2, [r3, #2]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	70da      	strb	r2, [r3, #3]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	711a      	strb	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3310      	adds	r3, #16
 80031fe:	2409      	movs	r4, #9
 8003200:	461d      	mov	r5, r3
 8003202:	e004      	b.n	800320e <_ZN13GorevyoneticiC1EP11TIM_TypeDef+0x3c>
 8003204:	4628      	mov	r0, r5
 8003206:	f7ff ffd6 	bl	80031b6 <_ZN5GorevC1Ev>
 800320a:	3508      	adds	r5, #8
 800320c:	3c01      	subs	r4, #1
 800320e:	2c00      	cmp	r4, #0
 8003210:	daf8      	bge.n	8003204 <_ZN13GorevyoneticiC1EP11TIM_TypeDef+0x32>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
{
    this->pTimerAlan = pTimerAlan;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bdb0      	pop	{r4, r5, r7, pc}

0800323a <_ZN13Gorevyonetici7GorevAlEPFvvEs>:

void Gorevyonetici::GorevAl(void (*gorev)(), int16_t ms_s16)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	4613      	mov	r3, r2
 8003246:	80fb      	strh	r3, [r7, #6]
	if (gorevSayac < maxGorev)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800324e:	2b09      	cmp	r3, #9
 8003250:	d819      	bhi.n	8003286 <_ZN13Gorevyonetici7GorevAlEPFvvEs+0x4c>
	{
	    gorevler[gorevSayac].gorev = gorev;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003258:	461a      	mov	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3202      	adds	r2, #2
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	    gorevler[gorevSayac].ms_s16 = ms_s16;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	3302      	adds	r3, #2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	809a      	strh	r2, [r3, #4]
	    gorevSayac++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800327c:	3301      	adds	r3, #1
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}
}
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <_ZN13Gorevyonetici12BayrakKaldirEv>:
void Gorevyonetici::BayrakKaldir()
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    pTimerAlan->SR &= ~(TIM_SR_UIF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	611a      	str	r2, [r3, #16]
    Counter_u16++;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80032b2:	3301      	adds	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    for (int i = 0; i < gorevSayac; i++)
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e01b      	b.n	80032fa <_ZN13Gorevyonetici12BayrakKaldirEv+0x66>
    {
		if (0 == Counter_u16 % gorevler[i].ms_s16)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80032c8:	461a      	mov	r2, r3
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3302      	adds	r3, #2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	440b      	add	r3, r1
 80032d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032d8:	fb92 f1f3 	sdiv	r1, r2, r3
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <_ZN13Gorevyonetici12BayrakKaldirEv+0x60>
		{
		   gorevler[i].Bayrak = true;
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3302      	adds	r3, #2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	2201      	movs	r2, #1
 80032f2:	719a      	strb	r2, [r3, #6]
    for (int i = 0; i < gorevSayac; i++)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3301      	adds	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003300:	461a      	mov	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4293      	cmp	r3, r2
 8003306:	dbdc      	blt.n	80032c2 <_ZN13Gorevyonetici12BayrakKaldirEv+0x2e>
		}
     }
    if (Counter_u16 % 1000 == 0)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <_ZN13Gorevyonetici12BayrakKaldirEv+0xa8>)
 8003310:	fba2 1203 	umull	r1, r2, r2, r3
 8003314:	0992      	lsrs	r2, r2, #6
 8003316:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800331a:	fb01 f202 	mul.w	r2, r1, r2
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <_ZN13Gorevyonetici12BayrakKaldirEv+0x9a>
  	{
  	    Counter_u16=0;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  	}
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	10624dd3 	.word	0x10624dd3

08003340 <_ZN13Gorevyonetici13GorevCalistirEv>:

void Gorevyonetici::GorevCalistir()
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < gorevSayac; i++)
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e01e      	b.n	800338c <_ZN13Gorevyonetici13GorevCalistirEv+0x4c>
	{
		if (gorevler[i].Bayrak && gorevler[i].gorev)
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3302      	adds	r3, #2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4413      	add	r3, r2
 8003358:	799b      	ldrb	r3, [r3, #6]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d013      	beq.n	8003386 <_ZN13Gorevyonetici13GorevCalistirEv+0x46>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	3202      	adds	r2, #2
 8003364:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00c      	beq.n	8003386 <_ZN13Gorevyonetici13GorevCalistirEv+0x46>
	    {
	        gorevler[i].Bayrak = false;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3302      	adds	r3, #2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	2200      	movs	r2, #0
 8003378:	719a      	strb	r2, [r3, #6]
	        gorevler[i].gorev();
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	3202      	adds	r2, #2
 8003380:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003384:	4798      	blx	r3
	for (int i = 0; i < gorevSayac; i++)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3301      	adds	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4293      	cmp	r3, r2
 8003398:	dbd9      	blt.n	800334e <_ZN13Gorevyonetici13GorevCalistirEv+0xe>
	    }
	}

}
 800339a:	bf00      	nop
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <_ZN4UartC1EP13USART_TypeDef>:
 *  Created on: Jul 11, 2024
 *      Author: onurd
 */
#include "myUart.h"

Uart::Uart(USART_TypeDef *pGirilenUart)
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
{
	this->pGirilenUart=pGirilenUart;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	601a      	str	r2, [r3, #0]
}
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <_ZN4Uart10YapilandirEmP12GPIO_TypeDeftS1_t>:

void Uart::Yapilandir(uint32_t baudRate, GPIO_TypeDef *txPort, uint16_t txPin, GPIO_TypeDef *rxPort, uint16_t rxPin) {
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	807b      	strh	r3, [r7, #2]

    GPIO_InitStruct.Pin = txPin;
 80033d0:	887a      	ldrh	r2, [r7, #2]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	64da      	str	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2202      	movs	r2, #2
 80033da:	651a      	str	r2, [r3, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2203      	movs	r2, #3
 80033e6:	659a      	str	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2207      	movs	r2, #7
 80033ec:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_GPIO_Init(txPort, &GPIO_InitStruct);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	334c      	adds	r3, #76	; 0x4c
 80033f2:	4619      	mov	r1, r3
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fc05 	bl	8003c04 <HAL_GPIO_Init>


    GPIO_InitStruct.Pin = rxPin;
 80033fa:	8bba      	ldrh	r2, [r7, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	64da      	str	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2202      	movs	r2, #2
 8003404:	651a      	str	r2, [r3, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2203      	movs	r2, #3
 8003410:	659a      	str	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2207      	movs	r2, #7
 8003416:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_GPIO_Init(rxPort, &GPIO_InitStruct);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	334c      	adds	r3, #76	; 0x4c
 800341c:	4619      	mov	r1, r3
 800341e:	69b8      	ldr	r0, [r7, #24]
 8003420:	f000 fbf0 	bl	8003c04 <HAL_GPIO_Init>


    huart.Instance = pGirilenUart;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	605a      	str	r2, [r3, #4]
    huart.Init.BaudRate = baudRate;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	609a      	str	r2, [r3, #8]
    huart.Init.WordLength = UART_WORDLENGTH_8B;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	60da      	str	r2, [r3, #12]
    huart.Init.StopBits = UART_STOPBITS_1;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]
    huart.Init.Parity = UART_PARITY_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	615a      	str	r2, [r3, #20]
    huart.Init.Mode = UART_MODE_TX_RX;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	220c      	movs	r2, #12
 8003448:	619a      	str	r2, [r3, #24]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	61da      	str	r2, [r3, #28]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	621a      	str	r2, [r3, #32]

    if (HAL_UART_Init(&huart) != HAL_OK)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3304      	adds	r3, #4
 800345a:	4618      	mov	r0, r3
 800345c:	f002 ff4d 	bl	80062fa <HAL_UART_Init>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d000      	beq.n	8003472 <_ZN4Uart10YapilandirEmP12GPIO_TypeDeftS1_t+0xb0>
    {
    	while(1)
 8003470:	e7fe      	b.n	8003470 <_ZN4Uart10YapilandirEmP12GPIO_TypeDeftS1_t+0xae>
    		{

    	    }
    }
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <_ZN4Uart8transmitEPht>:

void Uart::transmit(uint8_t *data, uint16_t size)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	4613      	mov	r3, r2
 8003486:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(&huart, data, size, HAL_MAX_DELAY);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1d18      	adds	r0, r3, #4
 800348c:	88fa      	ldrh	r2, [r7, #6]
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	f002 ff81 	bl	800639a <HAL_UART_Transmit>
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	db0b      	blt.n	80034ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	f003 021f 	and.w	r2, r3, #31
 80034b8:	4907      	ldr	r1, [pc, #28]	; (80034d8 <__NVIC_EnableIRQ+0x38>)
 80034ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	2001      	movs	r0, #1
 80034c2:	fa00 f202 	lsl.w	r2, r0, r2
 80034c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	e000e100 	.word	0xe000e100

080034dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	6039      	str	r1, [r7, #0]
 80034e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	db0a      	blt.n	8003506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	490c      	ldr	r1, [pc, #48]	; (8003528 <__NVIC_SetPriority+0x4c>)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	0112      	lsls	r2, r2, #4
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	440b      	add	r3, r1
 8003500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003504:	e00a      	b.n	800351c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	4908      	ldr	r1, [pc, #32]	; (800352c <__NVIC_SetPriority+0x50>)
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	3b04      	subs	r3, #4
 8003514:	0112      	lsls	r2, r2, #4
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	440b      	add	r3, r1
 800351a:	761a      	strb	r2, [r3, #24]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	e000e100 	.word	0xe000e100
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <_ZN5TimerC1EP11TIM_TypeDef>:
#include "mytimer.h"

Timer::Timer(TIM_TypeDef* pTimerAlan)
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
{
    this->pTimerAlan = pTimerAlan;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	601a      	str	r2, [r3, #0]
    TimerClockAktifEt();
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f837 	bl	80035b4 <_ZN5Timer17TimerClockAktifEtEv>
}
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <_ZN5Timer10YapilandirEmm>:

void Timer::Yapilandir(uint32_t prescaler_u32, uint32_t period_u32)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
	pTimerAlan->PSC = prescaler_u32 - 1;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	3a01      	subs	r2, #1
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
	pTimerAlan->ARR = period_u32 - 1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	3a01      	subs	r2, #1
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
	pTimerAlan->DIER |= TIM_DIER_UIE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	60da      	str	r2, [r3, #12]
    TimerInterruptAktifEt();
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f8a5 	bl	80036d0 <_ZN5Timer21TimerInterruptAktifEtEv>
}
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <_ZN5Timer7AktifEtEv>:

void Timer::AktifEt()
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
	pTimerAlan->CR1 |= TIM_CR1_CEN;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0201 	orr.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <_ZN5Timer17TimerClockAktifEtEv>:
{
    return pTimerAlan->CNT;
}

void Timer::TimerClockAktifEt()
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	; 0x24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
    if (this->pTimerAlan == TIM2)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d10e      	bne.n	80035e4 <_ZN5Timer17TimerClockAktifEtEv+0x30>
    {
        __HAL_RCC_TIM2_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	4a3a      	ldr	r2, [pc, #232]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6413      	str	r3, [r2, #64]	; 0x40
 80035d6:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	69fb      	ldr	r3, [r7, #28]
    }
    else if (this->pTimerAlan == TIM7)
    {
        __HAL_RCC_TIM7_CLK_ENABLE();
    }
}
 80035e2:	e062      	b.n	80036aa <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM3)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a34      	ldr	r2, [pc, #208]	; (80036bc <_ZN5Timer17TimerClockAktifEtEv+0x108>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10e      	bne.n	800360c <_ZN5Timer17TimerClockAktifEtEv+0x58>
        __HAL_RCC_TIM3_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a30      	ldr	r2, [pc, #192]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80035f8:	f043 0302 	orr.w	r3, r3, #2
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b2e      	ldr	r3, [pc, #184]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	69bb      	ldr	r3, [r7, #24]
}
 800360a:	e04e      	b.n	80036aa <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM4)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2b      	ldr	r2, [pc, #172]	; (80036c0 <_ZN5Timer17TimerClockAktifEtEv+0x10c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10e      	bne.n	8003634 <_ZN5Timer17TimerClockAktifEtEv+0x80>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	4a26      	ldr	r2, [pc, #152]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	6413      	str	r3, [r2, #64]	; 0x40
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	697b      	ldr	r3, [r7, #20]
}
 8003632:	e03a      	b.n	80036aa <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM5)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <_ZN5Timer17TimerClockAktifEtEv+0x110>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10e      	bne.n	800365c <_ZN5Timer17TimerClockAktifEtEv+0xa8>
        __HAL_RCC_TIM5_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8003648:	f043 0308 	orr.w	r3, r3, #8
 800364c:	6413      	str	r3, [r2, #64]	; 0x40
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]
}
 800365a:	e026      	b.n	80036aa <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM6)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a19      	ldr	r2, [pc, #100]	; (80036c8 <_ZN5Timer17TimerClockAktifEtEv+0x114>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10e      	bne.n	8003684 <_ZN5Timer17TimerClockAktifEtEv+0xd0>
        __HAL_RCC_TIM6_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8003670:	f043 0310 	orr.w	r3, r3, #16
 8003674:	6413      	str	r3, [r2, #64]	; 0x40
 8003676:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
}
 8003682:	e012      	b.n	80036aa <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM7)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a10      	ldr	r2, [pc, #64]	; (80036cc <_ZN5Timer17TimerClockAktifEtEv+0x118>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10d      	bne.n	80036aa <_ZN5Timer17TimerClockAktifEtEv+0xf6>
        __HAL_RCC_TIM7_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8003698:	f043 0320 	orr.w	r3, r3, #32
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
}
 80036aa:	bf00      	nop
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800
 80036c4:	40000c00 	.word	0x40000c00
 80036c8:	40001000 	.word	0x40001000
 80036cc:	40001400 	.word	0x40001400

080036d0 <_ZN5Timer21TimerInterruptAktifEtEv>:

void Timer::TimerInterruptAktifEt()
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
    if (this->pTimerAlan == TIM2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d107      	bne.n	80036f2 <_ZN5Timer21TimerInterruptAktifEtEv+0x22>
    {
        NVIC_EnableIRQ(TIM2_IRQn);
 80036e2:	201c      	movs	r0, #28
 80036e4:	f7ff fedc 	bl	80034a0 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM2_IRQn, 2);
 80036e8:	2102      	movs	r1, #2
 80036ea:	201c      	movs	r0, #28
 80036ec:	f7ff fef6 	bl	80034dc <__NVIC_SetPriority>
    else if (this->pTimerAlan == TIM7)
    {
        NVIC_EnableIRQ(TIM7_IRQn);
        NVIC_SetPriority(TIM7_IRQn, 2);
    }
}
 80036f0:	e03f      	b.n	8003772 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM3)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a21      	ldr	r2, [pc, #132]	; (800377c <_ZN5Timer21TimerInterruptAktifEtEv+0xac>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d107      	bne.n	800370c <_ZN5Timer21TimerInterruptAktifEtEv+0x3c>
        NVIC_EnableIRQ(TIM3_IRQn);
 80036fc:	201d      	movs	r0, #29
 80036fe:	f7ff fecf 	bl	80034a0 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM3_IRQn, 2);
 8003702:	2102      	movs	r1, #2
 8003704:	201d      	movs	r0, #29
 8003706:	f7ff fee9 	bl	80034dc <__NVIC_SetPriority>
}
 800370a:	e032      	b.n	8003772 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM4)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <_ZN5Timer21TimerInterruptAktifEtEv+0xb0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d107      	bne.n	8003726 <_ZN5Timer21TimerInterruptAktifEtEv+0x56>
        NVIC_EnableIRQ(TIM4_IRQn);
 8003716:	201e      	movs	r0, #30
 8003718:	f7ff fec2 	bl	80034a0 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM4_IRQn, 2);
 800371c:	2102      	movs	r1, #2
 800371e:	201e      	movs	r0, #30
 8003720:	f7ff fedc 	bl	80034dc <__NVIC_SetPriority>
}
 8003724:	e025      	b.n	8003772 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM5)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a16      	ldr	r2, [pc, #88]	; (8003784 <_ZN5Timer21TimerInterruptAktifEtEv+0xb4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d107      	bne.n	8003740 <_ZN5Timer21TimerInterruptAktifEtEv+0x70>
        NVIC_EnableIRQ(TIM5_IRQn);
 8003730:	2032      	movs	r0, #50	; 0x32
 8003732:	f7ff feb5 	bl	80034a0 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM5_IRQn, 2);
 8003736:	2102      	movs	r1, #2
 8003738:	2032      	movs	r0, #50	; 0x32
 800373a:	f7ff fecf 	bl	80034dc <__NVIC_SetPriority>
}
 800373e:	e018      	b.n	8003772 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM6)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a10      	ldr	r2, [pc, #64]	; (8003788 <_ZN5Timer21TimerInterruptAktifEtEv+0xb8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d107      	bne.n	800375a <_ZN5Timer21TimerInterruptAktifEtEv+0x8a>
        NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800374a:	2036      	movs	r0, #54	; 0x36
 800374c:	f7ff fea8 	bl	80034a0 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM6_DAC_IRQn, 2);
 8003750:	2102      	movs	r1, #2
 8003752:	2036      	movs	r0, #54	; 0x36
 8003754:	f7ff fec2 	bl	80034dc <__NVIC_SetPriority>
}
 8003758:	e00b      	b.n	8003772 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM7)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a0b      	ldr	r2, [pc, #44]	; (800378c <_ZN5Timer21TimerInterruptAktifEtEv+0xbc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d106      	bne.n	8003772 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
        NVIC_EnableIRQ(TIM7_IRQn);
 8003764:	2037      	movs	r0, #55	; 0x37
 8003766:	f7ff fe9b 	bl	80034a0 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM7_IRQn, 2);
 800376a:	2102      	movs	r1, #2
 800376c:	2037      	movs	r0, #55	; 0x37
 800376e:	f7ff feb5 	bl	80034dc <__NVIC_SetPriority>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800
 8003784:	40000c00 	.word	0x40000c00
 8003788:	40001000 	.word	0x40001000
 800378c:	40001400 	.word	0x40001400

08003790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_Init+0x40>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <HAL_Init+0x40>)
 800379a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800379e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_Init+0x40>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <HAL_Init+0x40>)
 80037a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <HAL_Init+0x40>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <HAL_Init+0x40>)
 80037b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b8:	2003      	movs	r0, #3
 80037ba:	f000 f94f 	bl	8003a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037be:	2000      	movs	r0, #0
 80037c0:	f000 f808 	bl	80037d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037c4:	f7fe fd44 	bl	8002250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023c00 	.word	0x40023c00

080037d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037dc:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_InitTick+0x54>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_InitTick+0x58>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	4619      	mov	r1, r3
 80037e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f967 	bl	8003ac6 <HAL_SYSTICK_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e00e      	b.n	8003820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b0f      	cmp	r3, #15
 8003806:	d80a      	bhi.n	800381e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003808:	2200      	movs	r2, #0
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	f04f 30ff 	mov.w	r0, #4294967295
 8003810:	f000 f92f 	bl	8003a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003814:	4a06      	ldr	r2, [pc, #24]	; (8003830 <HAL_InitTick+0x5c>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20000000 	.word	0x20000000
 800382c:	20000008 	.word	0x20000008
 8003830:	20000004 	.word	0x20000004

08003834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_IncTick+0x20>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_IncTick+0x24>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4413      	add	r3, r2
 8003844:	4a04      	ldr	r2, [pc, #16]	; (8003858 <HAL_IncTick+0x24>)
 8003846:	6013      	str	r3, [r2, #0]
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000008 	.word	0x20000008
 8003858:	200005d4 	.word	0x200005d4

0800385c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return uwTick;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_GetTick+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	200005d4 	.word	0x200005d4

08003874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800387c:	f7ff ffee 	bl	800385c <HAL_GetTick>
 8003880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d005      	beq.n	800389a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_Delay+0x44>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800389a:	bf00      	nop
 800389c:	f7ff ffde 	bl	800385c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d8f7      	bhi.n	800389c <HAL_Delay+0x28>
  {
  }
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000008 	.word	0x20000008

080038bc <__NVIC_SetPriorityGrouping>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038d8:	4013      	ands	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ee:	4a04      	ldr	r2, [pc, #16]	; (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	60d3      	str	r3, [r2, #12]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_GetPriorityGrouping>:
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <__NVIC_GetPriorityGrouping+0x18>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	f003 0307 	and.w	r3, r3, #7
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <__NVIC_EnableIRQ>:
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db0b      	blt.n	800394a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	4907      	ldr	r1, [pc, #28]	; (8003958 <__NVIC_EnableIRQ+0x38>)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2001      	movs	r0, #1
 8003942:	fa00 f202 	lsl.w	r2, r0, r2
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000e100 	.word	0xe000e100

0800395c <__NVIC_SetPriority>:
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	490c      	ldr	r1, [pc, #48]	; (80039a8 <__NVIC_SetPriority+0x4c>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4908      	ldr	r1, [pc, #32]	; (80039ac <__NVIC_SetPriority+0x50>)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3b04      	subs	r3, #4
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	bf28      	it	cs
 80039ce:	2304      	movcs	r3, #4
 80039d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <NVIC_EncodePriority+0x30>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b03      	subs	r3, #3
 80039de:	e000      	b.n	80039e2 <NVIC_EncodePriority+0x32>
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	401a      	ands	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43d9      	mvns	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	4313      	orrs	r3, r2
         );
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	; 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a28:	d301      	bcc.n	8003a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e00f      	b.n	8003a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <SysTick_Config+0x40>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a36:	210f      	movs	r1, #15
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3c:	f7ff ff8e 	bl	800395c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <SysTick_Config+0x40>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a46:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <SysTick_Config+0x40>)
 8003a48:	2207      	movs	r2, #7
 8003a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	e000e010 	.word	0xe000e010

08003a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff ff29 	bl	80038bc <__NVIC_SetPriorityGrouping>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b086      	sub	sp, #24
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4603      	mov	r3, r0
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a84:	f7ff ff3e 	bl	8003904 <__NVIC_GetPriorityGrouping>
 8003a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	f7ff ff8e 	bl	80039b0 <NVIC_EncodePriority>
 8003a94:	4602      	mov	r2, r0
 8003a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff5d 	bl	800395c <__NVIC_SetPriority>
}
 8003aa2:	bf00      	nop
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff31 	bl	8003920 <__NVIC_EnableIRQ>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff ffa2 	bl	8003a18 <SysTick_Config>
 8003ad4:	4603      	mov	r3, r0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003aec:	f7ff feb6 	bl	800385c <HAL_GetTick>
 8003af0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d008      	beq.n	8003b10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e052      	b.n	8003bb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0216 	bic.w	r2, r2, #22
 8003b1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d103      	bne.n	8003b40 <HAL_DMA_Abort+0x62>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0208 	bic.w	r2, r2, #8
 8003b4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b60:	e013      	b.n	8003b8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b62:	f7ff fe7b 	bl	800385c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d90c      	bls.n	8003b8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2203      	movs	r2, #3
 8003b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e015      	b.n	8003bb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e4      	bne.n	8003b62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	223f      	movs	r2, #63	; 0x3f
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d004      	beq.n	8003bdc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2280      	movs	r2, #128	; 0x80
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e00c      	b.n	8003bf6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2205      	movs	r2, #5
 8003be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b089      	sub	sp, #36	; 0x24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	e16b      	b.n	8003ef8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c20:	2201      	movs	r2, #1
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	f040 815a 	bne.w	8003ef2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d005      	beq.n	8003c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d130      	bne.n	8003cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2203      	movs	r2, #3
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 0201 	and.w	r2, r3, #1
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d017      	beq.n	8003cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	2203      	movs	r2, #3
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d123      	bne.n	8003d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	08da      	lsrs	r2, r3, #3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3208      	adds	r2, #8
 8003d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	220f      	movs	r2, #15
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	08da      	lsrs	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3208      	adds	r2, #8
 8003d42:	69b9      	ldr	r1, [r7, #24]
 8003d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	2203      	movs	r2, #3
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0203 	and.w	r2, r3, #3
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80b4 	beq.w	8003ef2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	4b60      	ldr	r3, [pc, #384]	; (8003f10 <HAL_GPIO_Init+0x30c>)
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	4a5f      	ldr	r2, [pc, #380]	; (8003f10 <HAL_GPIO_Init+0x30c>)
 8003d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d98:	6453      	str	r3, [r2, #68]	; 0x44
 8003d9a:	4b5d      	ldr	r3, [pc, #372]	; (8003f10 <HAL_GPIO_Init+0x30c>)
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003da6:	4a5b      	ldr	r2, [pc, #364]	; (8003f14 <HAL_GPIO_Init+0x310>)
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	3302      	adds	r3, #2
 8003dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a52      	ldr	r2, [pc, #328]	; (8003f18 <HAL_GPIO_Init+0x314>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d02b      	beq.n	8003e2a <HAL_GPIO_Init+0x226>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a51      	ldr	r2, [pc, #324]	; (8003f1c <HAL_GPIO_Init+0x318>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d025      	beq.n	8003e26 <HAL_GPIO_Init+0x222>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a50      	ldr	r2, [pc, #320]	; (8003f20 <HAL_GPIO_Init+0x31c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01f      	beq.n	8003e22 <HAL_GPIO_Init+0x21e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4f      	ldr	r2, [pc, #316]	; (8003f24 <HAL_GPIO_Init+0x320>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d019      	beq.n	8003e1e <HAL_GPIO_Init+0x21a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a4e      	ldr	r2, [pc, #312]	; (8003f28 <HAL_GPIO_Init+0x324>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_GPIO_Init+0x216>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a4d      	ldr	r2, [pc, #308]	; (8003f2c <HAL_GPIO_Init+0x328>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00d      	beq.n	8003e16 <HAL_GPIO_Init+0x212>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a4c      	ldr	r2, [pc, #304]	; (8003f30 <HAL_GPIO_Init+0x32c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <HAL_GPIO_Init+0x20e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a4b      	ldr	r2, [pc, #300]	; (8003f34 <HAL_GPIO_Init+0x330>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_GPIO_Init+0x20a>
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	e00e      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e0e:	2308      	movs	r3, #8
 8003e10:	e00c      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e12:	2306      	movs	r3, #6
 8003e14:	e00a      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e16:	2305      	movs	r3, #5
 8003e18:	e008      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	e006      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e004      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e002      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_GPIO_Init+0x228>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	f002 0203 	and.w	r2, r2, #3
 8003e32:	0092      	lsls	r2, r2, #2
 8003e34:	4093      	lsls	r3, r2
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e3c:	4935      	ldr	r1, [pc, #212]	; (8003f14 <HAL_GPIO_Init+0x310>)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	3302      	adds	r3, #2
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e4a:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e6e:	4a32      	ldr	r2, [pc, #200]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e74:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e98:	4a27      	ldr	r2, [pc, #156]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e9e:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ec2:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eec:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <HAL_GPIO_Init+0x334>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2b0f      	cmp	r3, #15
 8003efc:	f67f ae90 	bls.w	8003c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	3724      	adds	r7, #36	; 0x24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40013800 	.word	0x40013800
 8003f18:	40020000 	.word	0x40020000
 8003f1c:	40020400 	.word	0x40020400
 8003f20:	40020800 	.word	0x40020800
 8003f24:	40020c00 	.word	0x40020c00
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40021400 	.word	0x40021400
 8003f30:	40021800 	.word	0x40021800
 8003f34:	40021c00 	.word	0x40021c00
 8003f38:	40013c00 	.word	0x40013c00

08003f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f4c:	787b      	ldrb	r3, [r7, #1]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f58:	e003      	b.n	8003f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f5a:	887b      	ldrh	r3, [r7, #2]
 8003f5c:	041a      	lsls	r2, r3, #16
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	619a      	str	r2, [r3, #24]
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e12b      	b.n	80041da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd f98c 	bl	80012b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0201 	bic.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fd4:	f002 f8e0 	bl	8006198 <HAL_RCC_GetPCLK1Freq>
 8003fd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4a81      	ldr	r2, [pc, #516]	; (80041e4 <HAL_I2C_Init+0x274>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d807      	bhi.n	8003ff4 <HAL_I2C_Init+0x84>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a80      	ldr	r2, [pc, #512]	; (80041e8 <HAL_I2C_Init+0x278>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	bf94      	ite	ls
 8003fec:	2301      	movls	r3, #1
 8003fee:	2300      	movhi	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e006      	b.n	8004002 <HAL_I2C_Init+0x92>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4a7d      	ldr	r2, [pc, #500]	; (80041ec <HAL_I2C_Init+0x27c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	bf94      	ite	ls
 8003ffc:	2301      	movls	r3, #1
 8003ffe:	2300      	movhi	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e0e7      	b.n	80041da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a78      	ldr	r2, [pc, #480]	; (80041f0 <HAL_I2C_Init+0x280>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	0c9b      	lsrs	r3, r3, #18
 8004014:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a6a      	ldr	r2, [pc, #424]	; (80041e4 <HAL_I2C_Init+0x274>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d802      	bhi.n	8004044 <HAL_I2C_Init+0xd4>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	3301      	adds	r3, #1
 8004042:	e009      	b.n	8004058 <HAL_I2C_Init+0xe8>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	4a69      	ldr	r2, [pc, #420]	; (80041f4 <HAL_I2C_Init+0x284>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	3301      	adds	r3, #1
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	430b      	orrs	r3, r1
 800405e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800406a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	495c      	ldr	r1, [pc, #368]	; (80041e4 <HAL_I2C_Init+0x274>)
 8004074:	428b      	cmp	r3, r1
 8004076:	d819      	bhi.n	80040ac <HAL_I2C_Init+0x13c>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1e59      	subs	r1, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fbb1 f3f3 	udiv	r3, r1, r3
 8004086:	1c59      	adds	r1, r3, #1
 8004088:	f640 73fc 	movw	r3, #4092	; 0xffc
 800408c:	400b      	ands	r3, r1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_I2C_Init+0x138>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1e59      	subs	r1, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a0:	3301      	adds	r3, #1
 80040a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a6:	e051      	b.n	800414c <HAL_I2C_Init+0x1dc>
 80040a8:	2304      	movs	r3, #4
 80040aa:	e04f      	b.n	800414c <HAL_I2C_Init+0x1dc>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d111      	bne.n	80040d8 <HAL_I2C_Init+0x168>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1e58      	subs	r0, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6859      	ldr	r1, [r3, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	440b      	add	r3, r1
 80040c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c6:	3301      	adds	r3, #1
 80040c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	e012      	b.n	80040fe <HAL_I2C_Init+0x18e>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1e58      	subs	r0, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	0099      	lsls	r1, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Init+0x196>
 8004102:	2301      	movs	r3, #1
 8004104:	e022      	b.n	800414c <HAL_I2C_Init+0x1dc>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10e      	bne.n	800412c <HAL_I2C_Init+0x1bc>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1e58      	subs	r0, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6859      	ldr	r1, [r3, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	440b      	add	r3, r1
 800411c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004120:	3301      	adds	r3, #1
 8004122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412a:	e00f      	b.n	800414c <HAL_I2C_Init+0x1dc>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1e58      	subs	r0, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	0099      	lsls	r1, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004142:	3301      	adds	r3, #1
 8004144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	6809      	ldr	r1, [r1, #0]
 8004150:	4313      	orrs	r3, r2
 8004152:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800417a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6911      	ldr	r1, [r2, #16]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68d2      	ldr	r2, [r2, #12]
 8004186:	4311      	orrs	r1, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	430b      	orrs	r3, r1
 800418e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	000186a0 	.word	0x000186a0
 80041e8:	001e847f 	.word	0x001e847f
 80041ec:	003d08ff 	.word	0x003d08ff
 80041f0:	431bde83 	.word	0x431bde83
 80041f4:	10624dd3 	.word	0x10624dd3

080041f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	461a      	mov	r2, r3
 8004204:	460b      	mov	r3, r1
 8004206:	817b      	strh	r3, [r7, #10]
 8004208:	4613      	mov	r3, r2
 800420a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800420c:	f7ff fb26 	bl	800385c <HAL_GetTick>
 8004210:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b20      	cmp	r3, #32
 800421c:	f040 80e0 	bne.w	80043e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2319      	movs	r3, #25
 8004226:	2201      	movs	r2, #1
 8004228:	4970      	ldr	r1, [pc, #448]	; (80043ec <HAL_I2C_Master_Transmit+0x1f4>)
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f001 f90e 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
 8004238:	e0d3      	b.n	80043e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_I2C_Master_Transmit+0x50>
 8004244:	2302      	movs	r3, #2
 8004246:	e0cc      	b.n	80043e2 <HAL_I2C_Master_Transmit+0x1ea>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d007      	beq.n	800426e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800427c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2221      	movs	r2, #33	; 0x21
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2210      	movs	r2, #16
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	893a      	ldrh	r2, [r7, #8]
 800429e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a50      	ldr	r2, [pc, #320]	; (80043f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80042ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042b0:	8979      	ldrh	r1, [r7, #10]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	6a3a      	ldr	r2, [r7, #32]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fdfa 	bl	8004eb0 <I2C_MasterRequestWrite>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e08d      	b.n	80043e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042dc:	e066      	b.n	80043ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	6a39      	ldr	r1, [r7, #32]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f001 f9cc 	bl	8005680 <I2C_WaitOnTXEFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00d      	beq.n	800430a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d107      	bne.n	8004306 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004304:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e06b      	b.n	80043e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	781a      	ldrb	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	d11b      	bne.n	8004380 <HAL_I2C_Master_Transmit+0x188>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434c:	2b00      	cmp	r3, #0
 800434e:	d017      	beq.n	8004380 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	781a      	ldrb	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	6a39      	ldr	r1, [r7, #32]
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f001 f9c3 	bl	8005710 <I2C_WaitOnBTFFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00d      	beq.n	80043ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	2b04      	cmp	r3, #4
 8004396:	d107      	bne.n	80043a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e01a      	b.n	80043e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d194      	bne.n	80042de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	00100002 	.word	0x00100002
 80043f0:	ffff0000 	.word	0xffff0000

080043f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	; 0x30
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	461a      	mov	r2, r3
 8004400:	460b      	mov	r3, r1
 8004402:	817b      	strh	r3, [r7, #10]
 8004404:	4613      	mov	r3, r2
 8004406:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004408:	f7ff fa28 	bl	800385c <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b20      	cmp	r3, #32
 8004418:	f040 8217 	bne.w	800484a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2319      	movs	r3, #25
 8004422:	2201      	movs	r2, #1
 8004424:	497c      	ldr	r1, [pc, #496]	; (8004618 <HAL_I2C_Master_Receive+0x224>)
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f001 f810 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004432:	2302      	movs	r3, #2
 8004434:	e20a      	b.n	800484c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_I2C_Master_Receive+0x50>
 8004440:	2302      	movs	r3, #2
 8004442:	e203      	b.n	800484c <HAL_I2C_Master_Receive+0x458>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d007      	beq.n	800446a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0201 	orr.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004478:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2222      	movs	r2, #34	; 0x22
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2210      	movs	r2, #16
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	893a      	ldrh	r2, [r7, #8]
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4a5c      	ldr	r2, [pc, #368]	; (800461c <HAL_I2C_Master_Receive+0x228>)
 80044aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044ac:	8979      	ldrh	r1, [r7, #10]
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 fd7e 	bl	8004fb4 <I2C_MasterRequestRead>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1c4      	b.n	800484c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d113      	bne.n	80044f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	623b      	str	r3, [r7, #32]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	623b      	str	r3, [r7, #32]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	623b      	str	r3, [r7, #32]
 80044de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e198      	b.n	8004824 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d11b      	bne.n	8004532 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004508:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	e178      	b.n	8004824 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004536:	2b02      	cmp	r3, #2
 8004538:	d11b      	bne.n	8004572 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004548:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	e158      	b.n	8004824 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004580:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004598:	e144      	b.n	8004824 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459e:	2b03      	cmp	r3, #3
 80045a0:	f200 80f1 	bhi.w	8004786 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d123      	bne.n	80045f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f001 f8f5 	bl	80057a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e145      	b.n	800484c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045f2:	e117      	b.n	8004824 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d14e      	bne.n	800469a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	2200      	movs	r2, #0
 8004604:	4906      	ldr	r1, [pc, #24]	; (8004620 <HAL_I2C_Master_Receive+0x22c>)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 ff20 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e11a      	b.n	800484c <HAL_I2C_Master_Receive+0x458>
 8004616:	bf00      	nop
 8004618:	00100002 	.word	0x00100002
 800461c:	ffff0000 	.word	0xffff0000
 8004620:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004698:	e0c4      	b.n	8004824 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	2200      	movs	r2, #0
 80046a2:	496c      	ldr	r1, [pc, #432]	; (8004854 <HAL_I2C_Master_Receive+0x460>)
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fed1 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0cb      	b.n	800484c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	2200      	movs	r2, #0
 80046fe:	4955      	ldr	r1, [pc, #340]	; (8004854 <HAL_I2C_Master_Receive+0x460>)
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fea3 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e09d      	b.n	800484c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004784:	e04e      	b.n	8004824 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f001 f808 	bl	80057a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e058      	b.n	800484c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d124      	bne.n	8004824 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d107      	bne.n	80047f2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	f47f aeb6 	bne.w	800459a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	e000      	b.n	800484c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800484a:	2302      	movs	r3, #2
  }
}
 800484c:	4618      	mov	r0, r3
 800484e:	3728      	adds	r7, #40	; 0x28
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	00010004 	.word	0x00010004

08004858 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4603      	mov	r3, r0
 8004868:	817b      	strh	r3, [r7, #10]
 800486a:	460b      	mov	r3, r1
 800486c:	813b      	strh	r3, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004872:	f7fe fff3 	bl	800385c <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b20      	cmp	r3, #32
 8004882:	f040 80d9 	bne.w	8004a38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	2319      	movs	r3, #25
 800488c:	2201      	movs	r2, #1
 800488e:	496d      	ldr	r1, [pc, #436]	; (8004a44 <HAL_I2C_Mem_Write+0x1ec>)
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fddb 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
 800489e:	e0cc      	b.n	8004a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_I2C_Mem_Write+0x56>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e0c5      	b.n	8004a3a <HAL_I2C_Mem_Write+0x1e2>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d007      	beq.n	80048d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2221      	movs	r2, #33	; 0x21
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2240      	movs	r2, #64	; 0x40
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a3a      	ldr	r2, [r7, #32]
 80048fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004904:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a4d      	ldr	r2, [pc, #308]	; (8004a48 <HAL_I2C_Mem_Write+0x1f0>)
 8004914:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004916:	88f8      	ldrh	r0, [r7, #6]
 8004918:	893a      	ldrh	r2, [r7, #8]
 800491a:	8979      	ldrh	r1, [r7, #10]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	4603      	mov	r3, r0
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fc12 	bl	8005150 <I2C_RequestMemoryWrite>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d052      	beq.n	80049d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e081      	b.n	8004a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 fea0 	bl	8005680 <I2C_WaitOnTXEFlagUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00d      	beq.n	8004962 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2b04      	cmp	r3, #4
 800494c:	d107      	bne.n	800495e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e06b      	b.n	8004a3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b04      	cmp	r3, #4
 800499e:	d11b      	bne.n	80049d8 <HAL_I2C_Mem_Write+0x180>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d017      	beq.n	80049d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1aa      	bne.n	8004936 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fe93 	bl	8005710 <I2C_WaitOnBTFFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00d      	beq.n	8004a0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d107      	bne.n	8004a08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e016      	b.n	8004a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	e000      	b.n	8004a3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a38:	2302      	movs	r3, #2
  }
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	00100002 	.word	0x00100002
 8004a48:	ffff0000 	.word	0xffff0000

08004a4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08c      	sub	sp, #48	; 0x30
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	4608      	mov	r0, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	817b      	strh	r3, [r7, #10]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	813b      	strh	r3, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a66:	f7fe fef9 	bl	800385c <HAL_GetTick>
 8004a6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	f040 8214 	bne.w	8004ea2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	2319      	movs	r3, #25
 8004a80:	2201      	movs	r2, #1
 8004a82:	497b      	ldr	r1, [pc, #492]	; (8004c70 <HAL_I2C_Mem_Read+0x224>)
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fce1 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a90:	2302      	movs	r3, #2
 8004a92:	e207      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2C_Mem_Read+0x56>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e200      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d007      	beq.n	8004ac8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ad6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2222      	movs	r2, #34	; 0x22
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2240      	movs	r2, #64	; 0x40
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004af8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4a5b      	ldr	r2, [pc, #364]	; (8004c74 <HAL_I2C_Mem_Read+0x228>)
 8004b08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b0a:	88f8      	ldrh	r0, [r7, #6]
 8004b0c:	893a      	ldrh	r2, [r7, #8]
 8004b0e:	8979      	ldrh	r1, [r7, #10]
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	4603      	mov	r3, r0
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fbae 	bl	800527c <I2C_RequestMemoryRead>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e1bc      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d113      	bne.n	8004b5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b32:	2300      	movs	r3, #0
 8004b34:	623b      	str	r3, [r7, #32]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	623b      	str	r3, [r7, #32]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e190      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d11b      	bne.n	8004b9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e170      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d11b      	bne.n	8004bda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	e150      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bf0:	e144      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	f200 80f1 	bhi.w	8004dde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d123      	bne.n	8004c4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fdc9 	bl	80057a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e145      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c4a:	e117      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d14e      	bne.n	8004cf2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	4906      	ldr	r1, [pc, #24]	; (8004c78 <HAL_I2C_Mem_Read+0x22c>)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fbf4 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e11a      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
 8004c6e:	bf00      	nop
 8004c70:	00100002 	.word	0x00100002
 8004c74:	ffff0000 	.word	0xffff0000
 8004c78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cf0:	e0c4      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	496c      	ldr	r1, [pc, #432]	; (8004eac <HAL_I2C_Mem_Read+0x460>)
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fba5 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0cb      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2200      	movs	r2, #0
 8004d56:	4955      	ldr	r1, [pc, #340]	; (8004eac <HAL_I2C_Mem_Read+0x460>)
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fb77 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e09d      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ddc:	e04e      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fcdc 	bl	80057a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e058      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d124      	bne.n	8004e7c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d107      	bne.n	8004e4a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f47f aeb6 	bne.w	8004bf2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3728      	adds	r7, #40	; 0x28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	00010004 	.word	0x00010004

08004eb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d006      	beq.n	8004eda <I2C_MasterRequestWrite+0x2a>
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d003      	beq.n	8004eda <I2C_MasterRequestWrite+0x2a>
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ed8:	d108      	bne.n	8004eec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e00b      	b.n	8004f04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	2b12      	cmp	r3, #18
 8004ef2:	d107      	bne.n	8004f04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fa9b 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00d      	beq.n	8004f38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2a:	d103      	bne.n	8004f34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e035      	b.n	8004fa4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f40:	d108      	bne.n	8004f54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f42:	897b      	ldrh	r3, [r7, #10]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f50:	611a      	str	r2, [r3, #16]
 8004f52:	e01b      	b.n	8004f8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f54:	897b      	ldrh	r3, [r7, #10]
 8004f56:	11db      	asrs	r3, r3, #7
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	f003 0306 	and.w	r3, r3, #6
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	f063 030f 	orn	r3, r3, #15
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	490e      	ldr	r1, [pc, #56]	; (8004fac <I2C_MasterRequestWrite+0xfc>)
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 fae4 	bl	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e010      	b.n	8004fa4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f82:	897b      	ldrh	r3, [r7, #10]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	4907      	ldr	r1, [pc, #28]	; (8004fb0 <I2C_MasterRequestWrite+0x100>)
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fad4 	bl	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	00010008 	.word	0x00010008
 8004fb0:	00010002 	.word	0x00010002

08004fb4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fd8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d006      	beq.n	8004fee <I2C_MasterRequestRead+0x3a>
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d003      	beq.n	8004fee <I2C_MasterRequestRead+0x3a>
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fec:	d108      	bne.n	8005000 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	e00b      	b.n	8005018 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	2b11      	cmp	r3, #17
 8005006:	d107      	bne.n	8005018 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005016:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 fa11 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00d      	beq.n	800504c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503e:	d103      	bne.n	8005048 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e079      	b.n	8005140 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005054:	d108      	bne.n	8005068 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005056:	897b      	ldrh	r3, [r7, #10]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	b2da      	uxtb	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	611a      	str	r2, [r3, #16]
 8005066:	e05f      	b.n	8005128 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005068:	897b      	ldrh	r3, [r7, #10]
 800506a:	11db      	asrs	r3, r3, #7
 800506c:	b2db      	uxtb	r3, r3
 800506e:	f003 0306 	and.w	r3, r3, #6
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f063 030f 	orn	r3, r3, #15
 8005078:	b2da      	uxtb	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4930      	ldr	r1, [pc, #192]	; (8005148 <I2C_MasterRequestRead+0x194>)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fa5a 	bl	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e054      	b.n	8005140 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005096:	897b      	ldrh	r3, [r7, #10]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4929      	ldr	r1, [pc, #164]	; (800514c <I2C_MasterRequestRead+0x198>)
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fa4a 	bl	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e044      	b.n	8005140 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b6:	2300      	movs	r3, #0
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f9af 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00d      	beq.n	8005110 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005102:	d103      	bne.n	800510c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800510a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e017      	b.n	8005140 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005110:	897b      	ldrh	r3, [r7, #10]
 8005112:	11db      	asrs	r3, r3, #7
 8005114:	b2db      	uxtb	r3, r3
 8005116:	f003 0306 	and.w	r3, r3, #6
 800511a:	b2db      	uxtb	r3, r3
 800511c:	f063 030e 	orn	r3, r3, #14
 8005120:	b2da      	uxtb	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	4907      	ldr	r1, [pc, #28]	; (800514c <I2C_MasterRequestRead+0x198>)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 fa06 	bl	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	00010008 	.word	0x00010008
 800514c:	00010002 	.word	0x00010002

08005150 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	4608      	mov	r0, r1
 800515a:	4611      	mov	r1, r2
 800515c:	461a      	mov	r2, r3
 800515e:	4603      	mov	r3, r0
 8005160:	817b      	strh	r3, [r7, #10]
 8005162:	460b      	mov	r3, r1
 8005164:	813b      	strh	r3, [r7, #8]
 8005166:	4613      	mov	r3, r2
 8005168:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005178:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	2200      	movs	r2, #0
 8005182:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f960 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00d      	beq.n	80051ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a0:	d103      	bne.n	80051aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e05f      	b.n	800526e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ae:	897b      	ldrh	r3, [r7, #10]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	492d      	ldr	r1, [pc, #180]	; (8005278 <I2C_RequestMemoryWrite+0x128>)
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f9bb 	bl	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e04c      	b.n	800526e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ec:	6a39      	ldr	r1, [r7, #32]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fa46 	bl	8005680 <I2C_WaitOnTXEFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00d      	beq.n	8005216 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d107      	bne.n	8005212 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005210:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e02b      	b.n	800526e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d105      	bne.n	8005228 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800521c:	893b      	ldrh	r3, [r7, #8]
 800521e:	b2da      	uxtb	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	611a      	str	r2, [r3, #16]
 8005226:	e021      	b.n	800526c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005228:	893b      	ldrh	r3, [r7, #8]
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	b29b      	uxth	r3, r3
 800522e:	b2da      	uxtb	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005238:	6a39      	ldr	r1, [r7, #32]
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fa20 	bl	8005680 <I2C_WaitOnTXEFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00d      	beq.n	8005262 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	2b04      	cmp	r3, #4
 800524c:	d107      	bne.n	800525e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e005      	b.n	800526e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005262:	893b      	ldrh	r3, [r7, #8]
 8005264:	b2da      	uxtb	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	00010002 	.word	0x00010002

0800527c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af02      	add	r7, sp, #8
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	4608      	mov	r0, r1
 8005286:	4611      	mov	r1, r2
 8005288:	461a      	mov	r2, r3
 800528a:	4603      	mov	r3, r0
 800528c:	817b      	strh	r3, [r7, #10]
 800528e:	460b      	mov	r3, r1
 8005290:	813b      	strh	r3, [r7, #8]
 8005292:	4613      	mov	r3, r2
 8005294:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	2200      	movs	r2, #0
 80052be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 f8c2 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00d      	beq.n	80052ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052dc:	d103      	bne.n	80052e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e0aa      	b.n	8005440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ea:	897b      	ldrh	r3, [r7, #10]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	6a3a      	ldr	r2, [r7, #32]
 80052fe:	4952      	ldr	r1, [pc, #328]	; (8005448 <I2C_RequestMemoryRead+0x1cc>)
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f91d 	bl	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e097      	b.n	8005440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005328:	6a39      	ldr	r1, [r7, #32]
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f9a8 	bl	8005680 <I2C_WaitOnTXEFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	2b04      	cmp	r3, #4
 800533c:	d107      	bne.n	800534e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e076      	b.n	8005440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d105      	bne.n	8005364 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005358:	893b      	ldrh	r3, [r7, #8]
 800535a:	b2da      	uxtb	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	611a      	str	r2, [r3, #16]
 8005362:	e021      	b.n	80053a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005364:	893b      	ldrh	r3, [r7, #8]
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	b29b      	uxth	r3, r3
 800536a:	b2da      	uxtb	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	6a39      	ldr	r1, [r7, #32]
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f982 	bl	8005680 <I2C_WaitOnTXEFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00d      	beq.n	800539e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	2b04      	cmp	r3, #4
 8005388:	d107      	bne.n	800539a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005398:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e050      	b.n	8005440 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800539e:	893b      	ldrh	r3, [r7, #8]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053aa:	6a39      	ldr	r1, [r7, #32]
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f967 	bl	8005680 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d107      	bne.n	80053d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e035      	b.n	8005440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f82b 	bl	800544c <I2C_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00d      	beq.n	8005418 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540a:	d103      	bne.n	8005414 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e013      	b.n	8005440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005418:	897b      	ldrh	r3, [r7, #10]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	b2da      	uxtb	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	6a3a      	ldr	r2, [r7, #32]
 800542c:	4906      	ldr	r1, [pc, #24]	; (8005448 <I2C_RequestMemoryRead+0x1cc>)
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f886 	bl	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	00010002 	.word	0x00010002

0800544c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800545c:	e048      	b.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005464:	d044      	beq.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005466:	f7fe f9f9 	bl	800385c <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d139      	bne.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	0c1b      	lsrs	r3, r3, #16
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d10d      	bne.n	80054a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	43da      	mvns	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4013      	ands	r3, r2
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	bf0c      	ite	eq
 8005498:	2301      	moveq	r3, #1
 800549a:	2300      	movne	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	e00c      	b.n	80054bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	43da      	mvns	r2, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4013      	ands	r3, r2
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d116      	bne.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f043 0220 	orr.w	r2, r3, #32
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e023      	b.n	8005538 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	0c1b      	lsrs	r3, r3, #16
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d10d      	bne.n	8005516 <I2C_WaitOnFlagUntilTimeout+0xca>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	43da      	mvns	r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4013      	ands	r3, r2
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	e00c      	b.n	8005530 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	43da      	mvns	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	429a      	cmp	r2, r3
 8005534:	d093      	beq.n	800545e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800554e:	e071      	b.n	8005634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800555e:	d123      	bne.n	80055a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005578:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	f043 0204 	orr.w	r2, r3, #4
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e067      	b.n	8005678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d041      	beq.n	8005634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b0:	f7fe f954 	bl	800385c <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d302      	bcc.n	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d136      	bne.n	8005634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	0c1b      	lsrs	r3, r3, #16
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d10c      	bne.n	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	43da      	mvns	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4013      	ands	r3, r2
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bf14      	ite	ne
 80055e2:	2301      	movne	r3, #1
 80055e4:	2300      	moveq	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	e00b      	b.n	8005602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	43da      	mvns	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4013      	ands	r3, r2
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d016      	beq.n	8005634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	f043 0220 	orr.w	r2, r3, #32
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e021      	b.n	8005678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	0c1b      	lsrs	r3, r3, #16
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d10c      	bne.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	43da      	mvns	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	4013      	ands	r3, r2
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	bf14      	ite	ne
 8005650:	2301      	movne	r3, #1
 8005652:	2300      	moveq	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	e00b      	b.n	8005670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	43da      	mvns	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4013      	ands	r3, r2
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	bf14      	ite	ne
 800566a:	2301      	movne	r3, #1
 800566c:	2300      	moveq	r3, #0
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	f47f af6d 	bne.w	8005550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800568c:	e034      	b.n	80056f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f8e3 	bl	800585a <I2C_IsAcknowledgeFailed>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e034      	b.n	8005708 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d028      	beq.n	80056f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a6:	f7fe f8d9 	bl	800385c <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d302      	bcc.n	80056bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d11d      	bne.n	80056f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	2b80      	cmp	r3, #128	; 0x80
 80056c8:	d016      	beq.n	80056f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	f043 0220 	orr.w	r2, r3, #32
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e007      	b.n	8005708 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b80      	cmp	r3, #128	; 0x80
 8005704:	d1c3      	bne.n	800568e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800571c:	e034      	b.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 f89b 	bl	800585a <I2C_IsAcknowledgeFailed>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e034      	b.n	8005798 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d028      	beq.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005736:	f7fe f891 	bl	800385c <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	429a      	cmp	r2, r3
 8005744:	d302      	bcc.n	800574c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d11d      	bne.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b04      	cmp	r3, #4
 8005758:	d016      	beq.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	f043 0220 	orr.w	r2, r3, #32
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e007      	b.n	8005798 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b04      	cmp	r3, #4
 8005794:	d1c3      	bne.n	800571e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057ac:	e049      	b.n	8005842 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d119      	bne.n	80057f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0210 	mvn.w	r2, #16
 80057c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e030      	b.n	8005852 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f0:	f7fe f834 	bl	800385c <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d302      	bcc.n	8005806 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d11d      	bne.n	8005842 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d016      	beq.n	8005842 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f043 0220 	orr.w	r2, r3, #32
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e007      	b.n	8005852 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584c:	2b40      	cmp	r3, #64	; 0x40
 800584e:	d1ae      	bne.n	80057ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800586c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005870:	d11b      	bne.n	80058aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800587a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f043 0204 	orr.w	r2, r3, #4
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e267      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d075      	beq.n	80059c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058d6:	4b88      	ldr	r3, [pc, #544]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d00c      	beq.n	80058fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058e2:	4b85      	ldr	r3, [pc, #532]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d112      	bne.n	8005914 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ee:	4b82      	ldr	r3, [pc, #520]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058fa:	d10b      	bne.n	8005914 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058fc:	4b7e      	ldr	r3, [pc, #504]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d05b      	beq.n	80059c0 <HAL_RCC_OscConfig+0x108>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d157      	bne.n	80059c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e242      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800591c:	d106      	bne.n	800592c <HAL_RCC_OscConfig+0x74>
 800591e:	4b76      	ldr	r3, [pc, #472]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a75      	ldr	r2, [pc, #468]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e01d      	b.n	8005968 <HAL_RCC_OscConfig+0xb0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005934:	d10c      	bne.n	8005950 <HAL_RCC_OscConfig+0x98>
 8005936:	4b70      	ldr	r3, [pc, #448]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6f      	ldr	r2, [pc, #444]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 800593c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	4b6d      	ldr	r3, [pc, #436]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a6c      	ldr	r2, [pc, #432]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e00b      	b.n	8005968 <HAL_RCC_OscConfig+0xb0>
 8005950:	4b69      	ldr	r3, [pc, #420]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a68      	ldr	r2, [pc, #416]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	4b66      	ldr	r3, [pc, #408]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a65      	ldr	r2, [pc, #404]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d013      	beq.n	8005998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005970:	f7fd ff74 	bl	800385c <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005978:	f7fd ff70 	bl	800385c <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b64      	cmp	r3, #100	; 0x64
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e207      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598a:	4b5b      	ldr	r3, [pc, #364]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0xc0>
 8005996:	e014      	b.n	80059c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005998:	f7fd ff60 	bl	800385c <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059a0:	f7fd ff5c 	bl	800385c <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b64      	cmp	r3, #100	; 0x64
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e1f3      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059b2:	4b51      	ldr	r3, [pc, #324]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f0      	bne.n	80059a0 <HAL_RCC_OscConfig+0xe8>
 80059be:	e000      	b.n	80059c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d063      	beq.n	8005a96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059ce:	4b4a      	ldr	r3, [pc, #296]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00b      	beq.n	80059f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059da:	4b47      	ldr	r3, [pc, #284]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d11c      	bne.n	8005a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059e6:	4b44      	ldr	r3, [pc, #272]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d116      	bne.n	8005a20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059f2:	4b41      	ldr	r3, [pc, #260]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_RCC_OscConfig+0x152>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d001      	beq.n	8005a0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e1c7      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a0a:	4b3b      	ldr	r3, [pc, #236]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4937      	ldr	r1, [pc, #220]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a1e:	e03a      	b.n	8005a96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d020      	beq.n	8005a6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a28:	4b34      	ldr	r3, [pc, #208]	; (8005afc <HAL_RCC_OscConfig+0x244>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2e:	f7fd ff15 	bl	800385c <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a36:	f7fd ff11 	bl	800385c <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e1a8      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a48:	4b2b      	ldr	r3, [pc, #172]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a54:	4b28      	ldr	r3, [pc, #160]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4925      	ldr	r1, [pc, #148]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	600b      	str	r3, [r1, #0]
 8005a68:	e015      	b.n	8005a96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <HAL_RCC_OscConfig+0x244>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fd fef4 	bl	800385c <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a78:	f7fd fef0 	bl	800385c <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e187      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a8a:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d036      	beq.n	8005b10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d016      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aaa:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <HAL_RCC_OscConfig+0x248>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab0:	f7fd fed4 	bl	800385c <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ab8:	f7fd fed0 	bl	800385c <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e167      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f0      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x200>
 8005ad6:	e01b      	b.n	8005b10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ad8:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <HAL_RCC_OscConfig+0x248>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ade:	f7fd febd 	bl	800385c <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ae4:	e00e      	b.n	8005b04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ae6:	f7fd feb9 	bl	800385c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d907      	bls.n	8005b04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e150      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
 8005af8:	40023800 	.word	0x40023800
 8005afc:	42470000 	.word	0x42470000
 8005b00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b04:	4b88      	ldr	r3, [pc, #544]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ea      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8097 	beq.w	8005c4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b22:	4b81      	ldr	r3, [pc, #516]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10f      	bne.n	8005b4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	4b7d      	ldr	r3, [pc, #500]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	4a7c      	ldr	r2, [pc, #496]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b3e:	4b7a      	ldr	r3, [pc, #488]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b46:	60bb      	str	r3, [r7, #8]
 8005b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b4e:	4b77      	ldr	r3, [pc, #476]	; (8005d2c <HAL_RCC_OscConfig+0x474>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d118      	bne.n	8005b8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b5a:	4b74      	ldr	r3, [pc, #464]	; (8005d2c <HAL_RCC_OscConfig+0x474>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a73      	ldr	r2, [pc, #460]	; (8005d2c <HAL_RCC_OscConfig+0x474>)
 8005b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b66:	f7fd fe79 	bl	800385c <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b6e:	f7fd fe75 	bl	800385c <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e10c      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b80:	4b6a      	ldr	r3, [pc, #424]	; (8005d2c <HAL_RCC_OscConfig+0x474>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f0      	beq.n	8005b6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d106      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x2ea>
 8005b94:	4b64      	ldr	r3, [pc, #400]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b98:	4a63      	ldr	r2, [pc, #396]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba0:	e01c      	b.n	8005bdc <HAL_RCC_OscConfig+0x324>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b05      	cmp	r3, #5
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x30c>
 8005baa:	4b5f      	ldr	r3, [pc, #380]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bae:	4a5e      	ldr	r2, [pc, #376]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	f043 0304 	orr.w	r3, r3, #4
 8005bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb6:	4b5c      	ldr	r3, [pc, #368]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bba:	4a5b      	ldr	r2, [pc, #364]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc2:	e00b      	b.n	8005bdc <HAL_RCC_OscConfig+0x324>
 8005bc4:	4b58      	ldr	r3, [pc, #352]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc8:	4a57      	ldr	r2, [pc, #348]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bca:	f023 0301 	bic.w	r3, r3, #1
 8005bce:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd0:	4b55      	ldr	r3, [pc, #340]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd4:	4a54      	ldr	r2, [pc, #336]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bd6:	f023 0304 	bic.w	r3, r3, #4
 8005bda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d015      	beq.n	8005c10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be4:	f7fd fe3a 	bl	800385c <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bea:	e00a      	b.n	8005c02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bec:	f7fd fe36 	bl	800385c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e0cb      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c02:	4b49      	ldr	r3, [pc, #292]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0ee      	beq.n	8005bec <HAL_RCC_OscConfig+0x334>
 8005c0e:	e014      	b.n	8005c3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c10:	f7fd fe24 	bl	800385c <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c16:	e00a      	b.n	8005c2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c18:	f7fd fe20 	bl	800385c <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e0b5      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c2e:	4b3e      	ldr	r3, [pc, #248]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1ee      	bne.n	8005c18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d105      	bne.n	8005c4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c40:	4b39      	ldr	r3, [pc, #228]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	4a38      	ldr	r2, [pc, #224]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 80a1 	beq.w	8005d98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c56:	4b34      	ldr	r3, [pc, #208]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 030c 	and.w	r3, r3, #12
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d05c      	beq.n	8005d1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d141      	bne.n	8005cee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6a:	4b31      	ldr	r3, [pc, #196]	; (8005d30 <HAL_RCC_OscConfig+0x478>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c70:	f7fd fdf4 	bl	800385c <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c78:	f7fd fdf0 	bl	800385c <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e087      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8a:	4b27      	ldr	r3, [pc, #156]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1f0      	bne.n	8005c78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69da      	ldr	r2, [r3, #28]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	019b      	lsls	r3, r3, #6
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	041b      	lsls	r3, r3, #16
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	061b      	lsls	r3, r3, #24
 8005cba:	491b      	ldr	r1, [pc, #108]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cc0:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <HAL_RCC_OscConfig+0x478>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc6:	f7fd fdc9 	bl	800385c <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cce:	f7fd fdc5 	bl	800385c <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e05c      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce0:	4b11      	ldr	r3, [pc, #68]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCC_OscConfig+0x416>
 8005cec:	e054      	b.n	8005d98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cee:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <HAL_RCC_OscConfig+0x478>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf4:	f7fd fdb2 	bl	800385c <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cfc:	f7fd fdae 	bl	800385c <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e045      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0e:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f0      	bne.n	8005cfc <HAL_RCC_OscConfig+0x444>
 8005d1a:	e03d      	b.n	8005d98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d107      	bne.n	8005d34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e038      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	40007000 	.word	0x40007000
 8005d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d34:	4b1b      	ldr	r3, [pc, #108]	; (8005da4 <HAL_RCC_OscConfig+0x4ec>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d028      	beq.n	8005d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d121      	bne.n	8005d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d11a      	bne.n	8005d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d64:	4013      	ands	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d111      	bne.n	8005d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d107      	bne.n	8005d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	40023800 	.word	0x40023800

08005da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0cc      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dbc:	4b68      	ldr	r3, [pc, #416]	; (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d90c      	bls.n	8005de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dca:	4b65      	ldr	r3, [pc, #404]	; (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd2:	4b63      	ldr	r3, [pc, #396]	; (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d001      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0b8      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d020      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dfc:	4b59      	ldr	r3, [pc, #356]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4a58      	ldr	r2, [pc, #352]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e14:	4b53      	ldr	r3, [pc, #332]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	4a52      	ldr	r2, [pc, #328]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e20:	4b50      	ldr	r3, [pc, #320]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	494d      	ldr	r1, [pc, #308]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d044      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d107      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e46:	4b47      	ldr	r3, [pc, #284]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d119      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e07f      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d003      	beq.n	8005e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d107      	bne.n	8005e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e66:	4b3f      	ldr	r3, [pc, #252]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d109      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e06f      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e76:	4b3b      	ldr	r3, [pc, #236]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e067      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e86:	4b37      	ldr	r3, [pc, #220]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f023 0203 	bic.w	r2, r3, #3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	4934      	ldr	r1, [pc, #208]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e98:	f7fd fce0 	bl	800385c <HAL_GetTick>
 8005e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9e:	e00a      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea0:	f7fd fcdc 	bl	800385c <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e04f      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eb6:	4b2b      	ldr	r3, [pc, #172]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 020c 	and.w	r2, r3, #12
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d1eb      	bne.n	8005ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec8:	4b25      	ldr	r3, [pc, #148]	; (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d20c      	bcs.n	8005ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed6:	4b22      	ldr	r3, [pc, #136]	; (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ede:	4b20      	ldr	r3, [pc, #128]	; (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e032      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d008      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005efc:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4916      	ldr	r1, [pc, #88]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d009      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f1a:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	490e      	ldr	r1, [pc, #56]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f2e:	f000 f821 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 8005f32:	4602      	mov	r2, r0
 8005f34:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	091b      	lsrs	r3, r3, #4
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	490a      	ldr	r1, [pc, #40]	; (8005f68 <HAL_RCC_ClockConfig+0x1c0>)
 8005f40:	5ccb      	ldrb	r3, [r1, r3]
 8005f42:	fa22 f303 	lsr.w	r3, r2, r3
 8005f46:	4a09      	ldr	r2, [pc, #36]	; (8005f6c <HAL_RCC_ClockConfig+0x1c4>)
 8005f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f4a:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <HAL_RCC_ClockConfig+0x1c8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fd fc40 	bl	80037d4 <HAL_InitTick>

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40023c00 	.word	0x40023c00
 8005f64:	40023800 	.word	0x40023800
 8005f68:	0800b770 	.word	0x0800b770
 8005f6c:	20000000 	.word	0x20000000
 8005f70:	20000004 	.word	0x20000004

08005f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f78:	b094      	sub	sp, #80	; 0x50
 8005f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f80:	2300      	movs	r3, #0
 8005f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f84:	2300      	movs	r3, #0
 8005f86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f8c:	4b79      	ldr	r3, [pc, #484]	; (8006174 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 030c 	and.w	r3, r3, #12
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d00d      	beq.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	f200 80e1 	bhi.w	8006160 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d003      	beq.n	8005fae <HAL_RCC_GetSysClockFreq+0x3a>
 8005fa6:	e0db      	b.n	8006160 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fa8:	4b73      	ldr	r3, [pc, #460]	; (8006178 <HAL_RCC_GetSysClockFreq+0x204>)
 8005faa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005fac:	e0db      	b.n	8006166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fae:	4b73      	ldr	r3, [pc, #460]	; (800617c <HAL_RCC_GetSysClockFreq+0x208>)
 8005fb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fb2:	e0d8      	b.n	8006166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fb4:	4b6f      	ldr	r3, [pc, #444]	; (8006174 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fbe:	4b6d      	ldr	r3, [pc, #436]	; (8006174 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d063      	beq.n	8006092 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fca:	4b6a      	ldr	r3, [pc, #424]	; (8006174 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	099b      	lsrs	r3, r3, #6
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8005fde:	2300      	movs	r3, #0
 8005fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	462b      	mov	r3, r5
 8005fea:	f04f 0000 	mov.w	r0, #0
 8005fee:	f04f 0100 	mov.w	r1, #0
 8005ff2:	0159      	lsls	r1, r3, #5
 8005ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ff8:	0150      	lsls	r0, r2, #5
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4621      	mov	r1, r4
 8006000:	1a51      	subs	r1, r2, r1
 8006002:	6139      	str	r1, [r7, #16]
 8006004:	4629      	mov	r1, r5
 8006006:	eb63 0301 	sbc.w	r3, r3, r1
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006018:	4659      	mov	r1, fp
 800601a:	018b      	lsls	r3, r1, #6
 800601c:	4651      	mov	r1, sl
 800601e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006022:	4651      	mov	r1, sl
 8006024:	018a      	lsls	r2, r1, #6
 8006026:	4651      	mov	r1, sl
 8006028:	ebb2 0801 	subs.w	r8, r2, r1
 800602c:	4659      	mov	r1, fp
 800602e:	eb63 0901 	sbc.w	r9, r3, r1
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800603e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006046:	4690      	mov	r8, r2
 8006048:	4699      	mov	r9, r3
 800604a:	4623      	mov	r3, r4
 800604c:	eb18 0303 	adds.w	r3, r8, r3
 8006050:	60bb      	str	r3, [r7, #8]
 8006052:	462b      	mov	r3, r5
 8006054:	eb49 0303 	adc.w	r3, r9, r3
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006066:	4629      	mov	r1, r5
 8006068:	024b      	lsls	r3, r1, #9
 800606a:	4621      	mov	r1, r4
 800606c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006070:	4621      	mov	r1, r4
 8006072:	024a      	lsls	r2, r1, #9
 8006074:	4610      	mov	r0, r2
 8006076:	4619      	mov	r1, r3
 8006078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800607a:	2200      	movs	r2, #0
 800607c:	62bb      	str	r3, [r7, #40]	; 0x28
 800607e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006080:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006084:	f7fa fdf8 	bl	8000c78 <__aeabi_uldivmod>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4613      	mov	r3, r2
 800608e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006090:	e058      	b.n	8006144 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006092:	4b38      	ldr	r3, [pc, #224]	; (8006174 <HAL_RCC_GetSysClockFreq+0x200>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	099b      	lsrs	r3, r3, #6
 8006098:	2200      	movs	r2, #0
 800609a:	4618      	mov	r0, r3
 800609c:	4611      	mov	r1, r2
 800609e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	2300      	movs	r3, #0
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
 80060a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060ac:	4642      	mov	r2, r8
 80060ae:	464b      	mov	r3, r9
 80060b0:	f04f 0000 	mov.w	r0, #0
 80060b4:	f04f 0100 	mov.w	r1, #0
 80060b8:	0159      	lsls	r1, r3, #5
 80060ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060be:	0150      	lsls	r0, r2, #5
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4641      	mov	r1, r8
 80060c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80060ca:	4649      	mov	r1, r9
 80060cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060e4:	ebb2 040a 	subs.w	r4, r2, sl
 80060e8:	eb63 050b 	sbc.w	r5, r3, fp
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	00eb      	lsls	r3, r5, #3
 80060f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060fa:	00e2      	lsls	r2, r4, #3
 80060fc:	4614      	mov	r4, r2
 80060fe:	461d      	mov	r5, r3
 8006100:	4643      	mov	r3, r8
 8006102:	18e3      	adds	r3, r4, r3
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	464b      	mov	r3, r9
 8006108:	eb45 0303 	adc.w	r3, r5, r3
 800610c:	607b      	str	r3, [r7, #4]
 800610e:	f04f 0200 	mov.w	r2, #0
 8006112:	f04f 0300 	mov.w	r3, #0
 8006116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800611a:	4629      	mov	r1, r5
 800611c:	028b      	lsls	r3, r1, #10
 800611e:	4621      	mov	r1, r4
 8006120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006124:	4621      	mov	r1, r4
 8006126:	028a      	lsls	r2, r1, #10
 8006128:	4610      	mov	r0, r2
 800612a:	4619      	mov	r1, r3
 800612c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612e:	2200      	movs	r2, #0
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	61fa      	str	r2, [r7, #28]
 8006134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006138:	f7fa fd9e 	bl	8000c78 <__aeabi_uldivmod>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4613      	mov	r3, r2
 8006142:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006144:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <HAL_RCC_GetSysClockFreq+0x200>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	3301      	adds	r3, #1
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006158:	fbb2 f3f3 	udiv	r3, r2, r3
 800615c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800615e:	e002      	b.n	8006166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006160:	4b05      	ldr	r3, [pc, #20]	; (8006178 <HAL_RCC_GetSysClockFreq+0x204>)
 8006162:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006168:	4618      	mov	r0, r3
 800616a:	3750      	adds	r7, #80	; 0x50
 800616c:	46bd      	mov	sp, r7
 800616e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006172:	bf00      	nop
 8006174:	40023800 	.word	0x40023800
 8006178:	00f42400 	.word	0x00f42400
 800617c:	007a1200 	.word	0x007a1200

08006180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006184:	4b03      	ldr	r3, [pc, #12]	; (8006194 <HAL_RCC_GetHCLKFreq+0x14>)
 8006186:	681b      	ldr	r3, [r3, #0]
}
 8006188:	4618      	mov	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20000000 	.word	0x20000000

08006198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800619c:	f7ff fff0 	bl	8006180 <HAL_RCC_GetHCLKFreq>
 80061a0:	4602      	mov	r2, r0
 80061a2:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	0a9b      	lsrs	r3, r3, #10
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	4903      	ldr	r1, [pc, #12]	; (80061bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061ae:	5ccb      	ldrb	r3, [r1, r3]
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40023800 	.word	0x40023800
 80061bc:	0800b780 	.word	0x0800b780

080061c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061c4:	f7ff ffdc 	bl	8006180 <HAL_RCC_GetHCLKFreq>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	0b5b      	lsrs	r3, r3, #13
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	4903      	ldr	r1, [pc, #12]	; (80061e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061d6:	5ccb      	ldrb	r3, [r1, r3]
 80061d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061dc:	4618      	mov	r0, r3
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40023800 	.word	0x40023800
 80061e4:	0800b780 	.word	0x0800b780

080061e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e07b      	b.n	80062f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d108      	bne.n	8006214 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800620a:	d009      	beq.n	8006220 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	61da      	str	r2, [r3, #28]
 8006212:	e005      	b.n	8006220 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fb ffc0 	bl	80021c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006256:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a4:	ea42 0103 	orr.w	r1, r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	0c1b      	lsrs	r3, r3, #16
 80062be:	f003 0104 	and.w	r1, r3, #4
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	f003 0210 	and.w	r2, r3, #16
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e042      	b.n	8006392 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d106      	bne.n	8006326 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7fc f8fd 	bl	8002520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2224      	movs	r2, #36	; 0x24
 800632a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800633c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fdbe 	bl	8006ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006352:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695a      	ldr	r2, [r3, #20]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006362:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006372:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b08a      	sub	sp, #40	; 0x28
 800639e:	af02      	add	r7, sp, #8
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d175      	bne.n	80064a6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <HAL_UART_Transmit+0x2c>
 80063c0:	88fb      	ldrh	r3, [r7, #6]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e06e      	b.n	80064a8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2221      	movs	r2, #33	; 0x21
 80063d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063d8:	f7fd fa40 	bl	800385c <HAL_GetTick>
 80063dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	88fa      	ldrh	r2, [r7, #6]
 80063e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	88fa      	ldrh	r2, [r7, #6]
 80063e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f2:	d108      	bne.n	8006406 <HAL_UART_Transmit+0x6c>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	e003      	b.n	800640e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800640a:	2300      	movs	r3, #0
 800640c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800640e:	e02e      	b.n	800646e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2200      	movs	r2, #0
 8006418:	2180      	movs	r1, #128	; 0x80
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fb20 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2220      	movs	r2, #32
 800642a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e03a      	b.n	80064a8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10b      	bne.n	8006450 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006446:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	3302      	adds	r3, #2
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	e007      	b.n	8006460 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	781a      	ldrb	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	3301      	adds	r3, #1
 800645e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006464:	b29b      	uxth	r3, r3
 8006466:	3b01      	subs	r3, #1
 8006468:	b29a      	uxth	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1cb      	bne.n	8006410 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2200      	movs	r2, #0
 8006480:	2140      	movs	r1, #64	; 0x40
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 faec 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e006      	b.n	80064a8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e000      	b.n	80064a8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80064a6:	2302      	movs	r3, #2
  }
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3720      	adds	r7, #32
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d112      	bne.n	80064f0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_UART_Receive_IT+0x26>
 80064d0:	88fb      	ldrh	r3, [r7, #6]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e00b      	b.n	80064f2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	461a      	mov	r2, r3
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fb13 	bl	8006b12 <UART_Start_Receive_IT>
 80064ec:	4603      	mov	r3, r0
 80064ee:	e000      	b.n	80064f2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80064f0:	2302      	movs	r3, #2
  }
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b0ba      	sub	sp, #232	; 0xe8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006522:	2300      	movs	r3, #0
 8006524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006528:	2300      	movs	r3, #0
 800652a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800653a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10f      	bne.n	8006562 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <HAL_UART_IRQHandler+0x66>
 800654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fbf2 	bl	8006d44 <UART_Receive_IT>
      return;
 8006560:	e25b      	b.n	8006a1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80de 	beq.w	8006728 <HAL_UART_IRQHandler+0x22c>
 800656c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d106      	bne.n	8006586 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80d1 	beq.w	8006728 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00b      	beq.n	80065aa <HAL_UART_IRQHandler+0xae>
 8006592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a2:	f043 0201 	orr.w	r2, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <HAL_UART_IRQHandler+0xd2>
 80065b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	f043 0202 	orr.w	r2, r3, #2
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <HAL_UART_IRQHandler+0xf6>
 80065da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ea:	f043 0204 	orr.w	r2, r3, #4
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d011      	beq.n	8006622 <HAL_UART_IRQHandler+0x126>
 80065fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d105      	bne.n	8006616 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800660a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661a:	f043 0208 	orr.w	r2, r3, #8
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 81f2 	beq.w	8006a10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800662c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <HAL_UART_IRQHandler+0x14e>
 8006638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fb7d 	bl	8006d44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	bf0c      	ite	eq
 8006658:	2301      	moveq	r3, #1
 800665a:	2300      	movne	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d103      	bne.n	8006676 <HAL_UART_IRQHandler+0x17a>
 800666e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006672:	2b00      	cmp	r3, #0
 8006674:	d04f      	beq.n	8006716 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fa85 	bl	8006b86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d141      	bne.n	800670e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3314      	adds	r3, #20
 8006690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3314      	adds	r3, #20
 80066b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1d9      	bne.n	800668a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d013      	beq.n	8006706 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	4a7e      	ldr	r2, [pc, #504]	; (80068dc <HAL_UART_IRQHandler+0x3e0>)
 80066e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fd fa67 	bl	8003bbe <HAL_DMA_Abort_IT>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d016      	beq.n	8006724 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006704:	e00e      	b.n	8006724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f994 	bl	8006a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670c:	e00a      	b.n	8006724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f990 	bl	8006a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006714:	e006      	b.n	8006724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f98c 	bl	8006a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006722:	e175      	b.n	8006a10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006724:	bf00      	nop
    return;
 8006726:	e173      	b.n	8006a10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672c:	2b01      	cmp	r3, #1
 800672e:	f040 814f 	bne.w	80069d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8148 	beq.w	80069d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 8141 	beq.w	80069d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800674e:	2300      	movs	r3, #0
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60bb      	str	r3, [r7, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	60bb      	str	r3, [r7, #8]
 8006762:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	f040 80b6 	bne.w	80068e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006780:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8145 	beq.w	8006a14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800678e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006792:	429a      	cmp	r2, r3
 8006794:	f080 813e 	bcs.w	8006a14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800679e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067aa:	f000 8088 	beq.w	80068be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	330c      	adds	r3, #12
 80067b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	330c      	adds	r3, #12
 80067d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1d9      	bne.n	80067ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3314      	adds	r3, #20
 8006800:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800680a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3314      	adds	r3, #20
 800681a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800681e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006822:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006824:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006826:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e1      	bne.n	80067fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3314      	adds	r3, #20
 800683c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006840:	e853 3f00 	ldrex	r3, [r3]
 8006844:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800684c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3314      	adds	r3, #20
 8006856:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800685a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800685c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006860:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e3      	bne.n	8006836 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	330c      	adds	r3, #12
 8006882:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800688c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800688e:	f023 0310 	bic.w	r3, r3, #16
 8006892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	330c      	adds	r3, #12
 800689c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80068a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e3      	bne.n	800687c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fd f910 	bl	8003ade <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2202      	movs	r2, #2
 80068c2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f8b7 	bl	8006a48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068da:	e09b      	b.n	8006a14 <HAL_UART_IRQHandler+0x518>
 80068dc:	08006c4d 	.word	0x08006c4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 808e 	beq.w	8006a18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80068fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8089 	beq.w	8006a18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	330c      	adds	r3, #12
 800690c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800691c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800692a:	647a      	str	r2, [r7, #68]	; 0x44
 800692c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e3      	bne.n	8006906 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	623b      	str	r3, [r7, #32]
   return(result);
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	f023 0301 	bic.w	r3, r3, #1
 8006954:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3314      	adds	r3, #20
 800695e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006962:	633a      	str	r2, [r7, #48]	; 0x30
 8006964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e3      	bne.n	800693e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2220      	movs	r2, #32
 800697a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	60fb      	str	r3, [r7, #12]
   return(result);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	330c      	adds	r3, #12
 80069a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069a8:	61fa      	str	r2, [r7, #28]
 80069aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	69b9      	ldr	r1, [r7, #24]
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	617b      	str	r3, [r7, #20]
   return(result);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e3      	bne.n	8006984 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f83d 	bl	8006a48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069ce:	e023      	b.n	8006a18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d009      	beq.n	80069f0 <HAL_UART_IRQHandler+0x4f4>
 80069dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f943 	bl	8006c74 <UART_Transmit_IT>
    return;
 80069ee:	e014      	b.n	8006a1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00e      	beq.n	8006a1a <HAL_UART_IRQHandler+0x51e>
 80069fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d008      	beq.n	8006a1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f983 	bl	8006d14 <UART_EndTransmit_IT>
    return;
 8006a0e:	e004      	b.n	8006a1a <HAL_UART_IRQHandler+0x51e>
    return;
 8006a10:	bf00      	nop
 8006a12:	e002      	b.n	8006a1a <HAL_UART_IRQHandler+0x51e>
      return;
 8006a14:	bf00      	nop
 8006a16:	e000      	b.n	8006a1a <HAL_UART_IRQHandler+0x51e>
      return;
 8006a18:	bf00      	nop
  }
}
 8006a1a:	37e8      	adds	r7, #232	; 0xe8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a70:	e03b      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d037      	beq.n	8006aea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7a:	f7fc feef 	bl	800385c <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	6a3a      	ldr	r2, [r7, #32]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e03a      	b.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d023      	beq.n	8006aea <UART_WaitOnFlagUntilTimeout+0x8a>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b80      	cmp	r3, #128	; 0x80
 8006aa6:	d020      	beq.n	8006aea <UART_WaitOnFlagUntilTimeout+0x8a>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	d01d      	beq.n	8006aea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d116      	bne.n	8006aea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 f857 	bl	8006b86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2208      	movs	r2, #8
 8006adc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e00f      	b.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4013      	ands	r3, r2
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	bf0c      	ite	eq
 8006afa:	2301      	moveq	r3, #1
 8006afc:	2300      	movne	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d0b4      	beq.n	8006a72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b085      	sub	sp, #20
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	88fa      	ldrh	r2, [r7, #6]
 8006b2a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	88fa      	ldrh	r2, [r7, #6]
 8006b30:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2222      	movs	r2, #34	; 0x22
 8006b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d007      	beq.n	8006b58 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b56:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	695a      	ldr	r2, [r3, #20]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0220 	orr.w	r2, r2, #32
 8006b76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b095      	sub	sp, #84	; 0x54
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	330c      	adds	r3, #12
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	330c      	adds	r3, #12
 8006bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bae:	643a      	str	r2, [r7, #64]	; 0x40
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e5      	bne.n	8006b8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3314      	adds	r3, #20
 8006bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f023 0301 	bic.w	r3, r3, #1
 8006bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3314      	adds	r3, #20
 8006be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006be4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e5      	bne.n	8006bc2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d119      	bne.n	8006c32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	330c      	adds	r3, #12
 8006c04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f023 0310 	bic.w	r3, r3, #16
 8006c14:	647b      	str	r3, [r7, #68]	; 0x44
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c1e:	61ba      	str	r2, [r7, #24]
 8006c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	6979      	ldr	r1, [r7, #20]
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e5      	bne.n	8006bfe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c40:	bf00      	nop
 8006c42:	3754      	adds	r7, #84	; 0x54
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7ff fee4 	bl	8006a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b21      	cmp	r3, #33	; 0x21
 8006c86:	d13e      	bne.n	8006d06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c90:	d114      	bne.n	8006cbc <UART_Transmit_IT+0x48>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d110      	bne.n	8006cbc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	1c9a      	adds	r2, r3, #2
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	621a      	str	r2, [r3, #32]
 8006cba:	e008      	b.n	8006cce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	1c59      	adds	r1, r3, #1
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6211      	str	r1, [r2, #32]
 8006cc6:	781a      	ldrb	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10f      	bne.n	8006d02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cf0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	e000      	b.n	8006d08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d06:	2302      	movs	r3, #2
  }
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff fe73 	bl	8006a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08c      	sub	sp, #48	; 0x30
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b22      	cmp	r3, #34	; 0x22
 8006d56:	f040 80ae 	bne.w	8006eb6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d62:	d117      	bne.n	8006d94 <UART_Receive_IT+0x50>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d113      	bne.n	8006d94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8c:	1c9a      	adds	r2, r3, #2
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	629a      	str	r2, [r3, #40]	; 0x28
 8006d92:	e026      	b.n	8006de2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da6:	d007      	beq.n	8006db8 <UART_Receive_IT+0x74>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10a      	bne.n	8006dc6 <UART_Receive_IT+0x82>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d106      	bne.n	8006dc6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	e008      	b.n	8006dd8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	4619      	mov	r1, r3
 8006df0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d15d      	bne.n	8006eb2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0220 	bic.w	r2, r2, #32
 8006e04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695a      	ldr	r2, [r3, #20]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0201 	bic.w	r2, r2, #1
 8006e24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d135      	bne.n	8006ea8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	613b      	str	r3, [r7, #16]
   return(result);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f023 0310 	bic.w	r3, r3, #16
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	330c      	adds	r3, #12
 8006e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e62:	623a      	str	r2, [r7, #32]
 8006e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	69f9      	ldr	r1, [r7, #28]
 8006e68:	6a3a      	ldr	r2, [r7, #32]
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e5      	bne.n	8006e42 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d10a      	bne.n	8006e9a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff fdd1 	bl	8006a48 <HAL_UARTEx_RxEventCallback>
 8006ea6:	e002      	b.n	8006eae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7fb f8fb 	bl	80020a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e002      	b.n	8006eb8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e000      	b.n	8006eb8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006eb6:	2302      	movs	r3, #2
  }
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3730      	adds	r7, #48	; 0x30
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec4:	b0c0      	sub	sp, #256	; 0x100
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006edc:	68d9      	ldr	r1, [r3, #12]
 8006ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	ea40 0301 	orr.w	r3, r0, r1
 8006ee8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f18:	f021 010c 	bic.w	r1, r1, #12
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f26:	430b      	orrs	r3, r1
 8006f28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3a:	6999      	ldr	r1, [r3, #24]
 8006f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	ea40 0301 	orr.w	r3, r0, r1
 8006f46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	4b8f      	ldr	r3, [pc, #572]	; (800718c <UART_SetConfig+0x2cc>)
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d005      	beq.n	8006f60 <UART_SetConfig+0xa0>
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	4b8d      	ldr	r3, [pc, #564]	; (8007190 <UART_SetConfig+0x2d0>)
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d104      	bne.n	8006f6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f60:	f7ff f92e 	bl	80061c0 <HAL_RCC_GetPCLK2Freq>
 8006f64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f68:	e003      	b.n	8006f72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f6a:	f7ff f915 	bl	8006198 <HAL_RCC_GetPCLK1Freq>
 8006f6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7c:	f040 810c 	bne.w	8007198 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f92:	4622      	mov	r2, r4
 8006f94:	462b      	mov	r3, r5
 8006f96:	1891      	adds	r1, r2, r2
 8006f98:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f9a:	415b      	adcs	r3, r3
 8006f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	eb12 0801 	adds.w	r8, r2, r1
 8006fa8:	4629      	mov	r1, r5
 8006faa:	eb43 0901 	adc.w	r9, r3, r1
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	f04f 0300 	mov.w	r3, #0
 8006fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fc2:	4690      	mov	r8, r2
 8006fc4:	4699      	mov	r9, r3
 8006fc6:	4623      	mov	r3, r4
 8006fc8:	eb18 0303 	adds.w	r3, r8, r3
 8006fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fd0:	462b      	mov	r3, r5
 8006fd2:	eb49 0303 	adc.w	r3, r9, r3
 8006fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fe6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006fea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fee:	460b      	mov	r3, r1
 8006ff0:	18db      	adds	r3, r3, r3
 8006ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	eb42 0303 	adc.w	r3, r2, r3
 8006ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8006ffc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007000:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007004:	f7f9 fe38 	bl	8000c78 <__aeabi_uldivmod>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4b61      	ldr	r3, [pc, #388]	; (8007194 <UART_SetConfig+0x2d4>)
 800700e:	fba3 2302 	umull	r2, r3, r3, r2
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	011c      	lsls	r4, r3, #4
 8007016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800701a:	2200      	movs	r2, #0
 800701c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007020:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007024:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007028:	4642      	mov	r2, r8
 800702a:	464b      	mov	r3, r9
 800702c:	1891      	adds	r1, r2, r2
 800702e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007030:	415b      	adcs	r3, r3
 8007032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007034:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007038:	4641      	mov	r1, r8
 800703a:	eb12 0a01 	adds.w	sl, r2, r1
 800703e:	4649      	mov	r1, r9
 8007040:	eb43 0b01 	adc.w	fp, r3, r1
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007050:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007058:	4692      	mov	sl, r2
 800705a:	469b      	mov	fp, r3
 800705c:	4643      	mov	r3, r8
 800705e:	eb1a 0303 	adds.w	r3, sl, r3
 8007062:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007066:	464b      	mov	r3, r9
 8007068:	eb4b 0303 	adc.w	r3, fp, r3
 800706c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800707c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007080:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007084:	460b      	mov	r3, r1
 8007086:	18db      	adds	r3, r3, r3
 8007088:	643b      	str	r3, [r7, #64]	; 0x40
 800708a:	4613      	mov	r3, r2
 800708c:	eb42 0303 	adc.w	r3, r2, r3
 8007090:	647b      	str	r3, [r7, #68]	; 0x44
 8007092:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007096:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800709a:	f7f9 fded 	bl	8000c78 <__aeabi_uldivmod>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4611      	mov	r1, r2
 80070a4:	4b3b      	ldr	r3, [pc, #236]	; (8007194 <UART_SetConfig+0x2d4>)
 80070a6:	fba3 2301 	umull	r2, r3, r3, r1
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	2264      	movs	r2, #100	; 0x64
 80070ae:	fb02 f303 	mul.w	r3, r2, r3
 80070b2:	1acb      	subs	r3, r1, r3
 80070b4:	00db      	lsls	r3, r3, #3
 80070b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070ba:	4b36      	ldr	r3, [pc, #216]	; (8007194 <UART_SetConfig+0x2d4>)
 80070bc:	fba3 2302 	umull	r2, r3, r3, r2
 80070c0:	095b      	lsrs	r3, r3, #5
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070c8:	441c      	add	r4, r3
 80070ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070dc:	4642      	mov	r2, r8
 80070de:	464b      	mov	r3, r9
 80070e0:	1891      	adds	r1, r2, r2
 80070e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80070e4:	415b      	adcs	r3, r3
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070ec:	4641      	mov	r1, r8
 80070ee:	1851      	adds	r1, r2, r1
 80070f0:	6339      	str	r1, [r7, #48]	; 0x30
 80070f2:	4649      	mov	r1, r9
 80070f4:	414b      	adcs	r3, r1
 80070f6:	637b      	str	r3, [r7, #52]	; 0x34
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007104:	4659      	mov	r1, fp
 8007106:	00cb      	lsls	r3, r1, #3
 8007108:	4651      	mov	r1, sl
 800710a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800710e:	4651      	mov	r1, sl
 8007110:	00ca      	lsls	r2, r1, #3
 8007112:	4610      	mov	r0, r2
 8007114:	4619      	mov	r1, r3
 8007116:	4603      	mov	r3, r0
 8007118:	4642      	mov	r2, r8
 800711a:	189b      	adds	r3, r3, r2
 800711c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007120:	464b      	mov	r3, r9
 8007122:	460a      	mov	r2, r1
 8007124:	eb42 0303 	adc.w	r3, r2, r3
 8007128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800712c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007138:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800713c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007140:	460b      	mov	r3, r1
 8007142:	18db      	adds	r3, r3, r3
 8007144:	62bb      	str	r3, [r7, #40]	; 0x28
 8007146:	4613      	mov	r3, r2
 8007148:	eb42 0303 	adc.w	r3, r2, r3
 800714c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800714e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007152:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007156:	f7f9 fd8f 	bl	8000c78 <__aeabi_uldivmod>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <UART_SetConfig+0x2d4>)
 8007160:	fba3 1302 	umull	r1, r3, r3, r2
 8007164:	095b      	lsrs	r3, r3, #5
 8007166:	2164      	movs	r1, #100	; 0x64
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	3332      	adds	r3, #50	; 0x32
 8007172:	4a08      	ldr	r2, [pc, #32]	; (8007194 <UART_SetConfig+0x2d4>)
 8007174:	fba2 2303 	umull	r2, r3, r2, r3
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	f003 0207 	and.w	r2, r3, #7
 800717e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4422      	add	r2, r4
 8007186:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007188:	e106      	b.n	8007398 <UART_SetConfig+0x4d8>
 800718a:	bf00      	nop
 800718c:	40011000 	.word	0x40011000
 8007190:	40011400 	.word	0x40011400
 8007194:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800719c:	2200      	movs	r2, #0
 800719e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80071aa:	4642      	mov	r2, r8
 80071ac:	464b      	mov	r3, r9
 80071ae:	1891      	adds	r1, r2, r2
 80071b0:	6239      	str	r1, [r7, #32]
 80071b2:	415b      	adcs	r3, r3
 80071b4:	627b      	str	r3, [r7, #36]	; 0x24
 80071b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071ba:	4641      	mov	r1, r8
 80071bc:	1854      	adds	r4, r2, r1
 80071be:	4649      	mov	r1, r9
 80071c0:	eb43 0501 	adc.w	r5, r3, r1
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	f04f 0300 	mov.w	r3, #0
 80071cc:	00eb      	lsls	r3, r5, #3
 80071ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071d2:	00e2      	lsls	r2, r4, #3
 80071d4:	4614      	mov	r4, r2
 80071d6:	461d      	mov	r5, r3
 80071d8:	4643      	mov	r3, r8
 80071da:	18e3      	adds	r3, r4, r3
 80071dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071e0:	464b      	mov	r3, r9
 80071e2:	eb45 0303 	adc.w	r3, r5, r3
 80071e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071fa:	f04f 0200 	mov.w	r2, #0
 80071fe:	f04f 0300 	mov.w	r3, #0
 8007202:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007206:	4629      	mov	r1, r5
 8007208:	008b      	lsls	r3, r1, #2
 800720a:	4621      	mov	r1, r4
 800720c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007210:	4621      	mov	r1, r4
 8007212:	008a      	lsls	r2, r1, #2
 8007214:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007218:	f7f9 fd2e 	bl	8000c78 <__aeabi_uldivmod>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4b60      	ldr	r3, [pc, #384]	; (80073a4 <UART_SetConfig+0x4e4>)
 8007222:	fba3 2302 	umull	r2, r3, r3, r2
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	011c      	lsls	r4, r3, #4
 800722a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722e:	2200      	movs	r2, #0
 8007230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007234:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007238:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800723c:	4642      	mov	r2, r8
 800723e:	464b      	mov	r3, r9
 8007240:	1891      	adds	r1, r2, r2
 8007242:	61b9      	str	r1, [r7, #24]
 8007244:	415b      	adcs	r3, r3
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800724c:	4641      	mov	r1, r8
 800724e:	1851      	adds	r1, r2, r1
 8007250:	6139      	str	r1, [r7, #16]
 8007252:	4649      	mov	r1, r9
 8007254:	414b      	adcs	r3, r1
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	f04f 0300 	mov.w	r3, #0
 8007260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007264:	4659      	mov	r1, fp
 8007266:	00cb      	lsls	r3, r1, #3
 8007268:	4651      	mov	r1, sl
 800726a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800726e:	4651      	mov	r1, sl
 8007270:	00ca      	lsls	r2, r1, #3
 8007272:	4610      	mov	r0, r2
 8007274:	4619      	mov	r1, r3
 8007276:	4603      	mov	r3, r0
 8007278:	4642      	mov	r2, r8
 800727a:	189b      	adds	r3, r3, r2
 800727c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007280:	464b      	mov	r3, r9
 8007282:	460a      	mov	r2, r1
 8007284:	eb42 0303 	adc.w	r3, r2, r3
 8007288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	67bb      	str	r3, [r7, #120]	; 0x78
 8007296:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007298:	f04f 0200 	mov.w	r2, #0
 800729c:	f04f 0300 	mov.w	r3, #0
 80072a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80072a4:	4649      	mov	r1, r9
 80072a6:	008b      	lsls	r3, r1, #2
 80072a8:	4641      	mov	r1, r8
 80072aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072ae:	4641      	mov	r1, r8
 80072b0:	008a      	lsls	r2, r1, #2
 80072b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80072b6:	f7f9 fcdf 	bl	8000c78 <__aeabi_uldivmod>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4611      	mov	r1, r2
 80072c0:	4b38      	ldr	r3, [pc, #224]	; (80073a4 <UART_SetConfig+0x4e4>)
 80072c2:	fba3 2301 	umull	r2, r3, r3, r1
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	2264      	movs	r2, #100	; 0x64
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	1acb      	subs	r3, r1, r3
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	3332      	adds	r3, #50	; 0x32
 80072d4:	4a33      	ldr	r2, [pc, #204]	; (80073a4 <UART_SetConfig+0x4e4>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072e0:	441c      	add	r4, r3
 80072e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072e6:	2200      	movs	r2, #0
 80072e8:	673b      	str	r3, [r7, #112]	; 0x70
 80072ea:	677a      	str	r2, [r7, #116]	; 0x74
 80072ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072f0:	4642      	mov	r2, r8
 80072f2:	464b      	mov	r3, r9
 80072f4:	1891      	adds	r1, r2, r2
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	415b      	adcs	r3, r3
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007300:	4641      	mov	r1, r8
 8007302:	1851      	adds	r1, r2, r1
 8007304:	6039      	str	r1, [r7, #0]
 8007306:	4649      	mov	r1, r9
 8007308:	414b      	adcs	r3, r1
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007318:	4659      	mov	r1, fp
 800731a:	00cb      	lsls	r3, r1, #3
 800731c:	4651      	mov	r1, sl
 800731e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007322:	4651      	mov	r1, sl
 8007324:	00ca      	lsls	r2, r1, #3
 8007326:	4610      	mov	r0, r2
 8007328:	4619      	mov	r1, r3
 800732a:	4603      	mov	r3, r0
 800732c:	4642      	mov	r2, r8
 800732e:	189b      	adds	r3, r3, r2
 8007330:	66bb      	str	r3, [r7, #104]	; 0x68
 8007332:	464b      	mov	r3, r9
 8007334:	460a      	mov	r2, r1
 8007336:	eb42 0303 	adc.w	r3, r2, r3
 800733a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	663b      	str	r3, [r7, #96]	; 0x60
 8007346:	667a      	str	r2, [r7, #100]	; 0x64
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007354:	4649      	mov	r1, r9
 8007356:	008b      	lsls	r3, r1, #2
 8007358:	4641      	mov	r1, r8
 800735a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800735e:	4641      	mov	r1, r8
 8007360:	008a      	lsls	r2, r1, #2
 8007362:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007366:	f7f9 fc87 	bl	8000c78 <__aeabi_uldivmod>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <UART_SetConfig+0x4e4>)
 8007370:	fba3 1302 	umull	r1, r3, r3, r2
 8007374:	095b      	lsrs	r3, r3, #5
 8007376:	2164      	movs	r1, #100	; 0x64
 8007378:	fb01 f303 	mul.w	r3, r1, r3
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	3332      	adds	r3, #50	; 0x32
 8007382:	4a08      	ldr	r2, [pc, #32]	; (80073a4 <UART_SetConfig+0x4e4>)
 8007384:	fba2 2303 	umull	r2, r3, r2, r3
 8007388:	095b      	lsrs	r3, r3, #5
 800738a:	f003 020f 	and.w	r2, r3, #15
 800738e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4422      	add	r2, r4
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	bf00      	nop
 800739a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800739e:	46bd      	mov	sp, r7
 80073a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073a4:	51eb851f 	.word	0x51eb851f

080073a8 <asin>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	ed2d 8b02 	vpush	{d8}
 80073ae:	ec55 4b10 	vmov	r4, r5, d0
 80073b2:	f000 fb29 	bl	8007a08 <__ieee754_asin>
 80073b6:	4622      	mov	r2, r4
 80073b8:	462b      	mov	r3, r5
 80073ba:	4620      	mov	r0, r4
 80073bc:	4629      	mov	r1, r5
 80073be:	eeb0 8a40 	vmov.f32	s16, s0
 80073c2:	eef0 8a60 	vmov.f32	s17, s1
 80073c6:	f7f9 fba9 	bl	8000b1c <__aeabi_dcmpun>
 80073ca:	b9a8      	cbnz	r0, 80073f8 <asin+0x50>
 80073cc:	ec45 4b10 	vmov	d0, r4, r5
 80073d0:	f000 f84a 	bl	8007468 <fabs>
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <asin+0x60>)
 80073d6:	ec51 0b10 	vmov	r0, r1, d0
 80073da:	2200      	movs	r2, #0
 80073dc:	f7f9 fb94 	bl	8000b08 <__aeabi_dcmpgt>
 80073e0:	b150      	cbz	r0, 80073f8 <asin+0x50>
 80073e2:	f002 fafb 	bl	80099dc <__errno>
 80073e6:	ecbd 8b02 	vpop	{d8}
 80073ea:	2321      	movs	r3, #33	; 0x21
 80073ec:	6003      	str	r3, [r0, #0]
 80073ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073f2:	4806      	ldr	r0, [pc, #24]	; (800740c <asin+0x64>)
 80073f4:	f000 b89c 	b.w	8007530 <nan>
 80073f8:	eeb0 0a48 	vmov.f32	s0, s16
 80073fc:	eef0 0a68 	vmov.f32	s1, s17
 8007400:	ecbd 8b02 	vpop	{d8}
 8007404:	bd38      	pop	{r3, r4, r5, pc}
 8007406:	bf00      	nop
 8007408:	3ff00000 	.word	0x3ff00000
 800740c:	0800bce8 	.word	0x0800bce8

08007410 <sqrt>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	ed2d 8b02 	vpush	{d8}
 8007416:	ec55 4b10 	vmov	r4, r5, d0
 800741a:	f000 f891 	bl	8007540 <__ieee754_sqrt>
 800741e:	4622      	mov	r2, r4
 8007420:	462b      	mov	r3, r5
 8007422:	4620      	mov	r0, r4
 8007424:	4629      	mov	r1, r5
 8007426:	eeb0 8a40 	vmov.f32	s16, s0
 800742a:	eef0 8a60 	vmov.f32	s17, s1
 800742e:	f7f9 fb75 	bl	8000b1c <__aeabi_dcmpun>
 8007432:	b990      	cbnz	r0, 800745a <sqrt+0x4a>
 8007434:	2200      	movs	r2, #0
 8007436:	2300      	movs	r3, #0
 8007438:	4620      	mov	r0, r4
 800743a:	4629      	mov	r1, r5
 800743c:	f7f9 fb46 	bl	8000acc <__aeabi_dcmplt>
 8007440:	b158      	cbz	r0, 800745a <sqrt+0x4a>
 8007442:	f002 facb 	bl	80099dc <__errno>
 8007446:	2321      	movs	r3, #33	; 0x21
 8007448:	6003      	str	r3, [r0, #0]
 800744a:	2200      	movs	r2, #0
 800744c:	2300      	movs	r3, #0
 800744e:	4610      	mov	r0, r2
 8007450:	4619      	mov	r1, r3
 8007452:	f7f9 f9f3 	bl	800083c <__aeabi_ddiv>
 8007456:	ec41 0b18 	vmov	d8, r0, r1
 800745a:	eeb0 0a48 	vmov.f32	s0, s16
 800745e:	eef0 0a68 	vmov.f32	s1, s17
 8007462:	ecbd 8b02 	vpop	{d8}
 8007466:	bd38      	pop	{r3, r4, r5, pc}

08007468 <fabs>:
 8007468:	ec51 0b10 	vmov	r0, r1, d0
 800746c:	ee10 2a10 	vmov	r2, s0
 8007470:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007474:	ec43 2b10 	vmov	d0, r2, r3
 8007478:	4770      	bx	lr
 800747a:	0000      	movs	r0, r0
 800747c:	0000      	movs	r0, r0
	...

08007480 <sin>:
 8007480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007482:	ec53 2b10 	vmov	r2, r3, d0
 8007486:	4828      	ldr	r0, [pc, #160]	; (8007528 <sin+0xa8>)
 8007488:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800748c:	4281      	cmp	r1, r0
 800748e:	dc07      	bgt.n	80074a0 <sin+0x20>
 8007490:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007520 <sin+0xa0>
 8007494:	2000      	movs	r0, #0
 8007496:	b005      	add	sp, #20
 8007498:	f85d eb04 	ldr.w	lr, [sp], #4
 800749c:	f000 b9f4 	b.w	8007888 <__kernel_sin>
 80074a0:	4822      	ldr	r0, [pc, #136]	; (800752c <sin+0xac>)
 80074a2:	4281      	cmp	r1, r0
 80074a4:	dd09      	ble.n	80074ba <sin+0x3a>
 80074a6:	ee10 0a10 	vmov	r0, s0
 80074aa:	4619      	mov	r1, r3
 80074ac:	f7f8 fee4 	bl	8000278 <__aeabi_dsub>
 80074b0:	ec41 0b10 	vmov	d0, r0, r1
 80074b4:	b005      	add	sp, #20
 80074b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80074ba:	4668      	mov	r0, sp
 80074bc:	f000 fcb8 	bl	8007e30 <__ieee754_rem_pio2>
 80074c0:	f000 0003 	and.w	r0, r0, #3
 80074c4:	2801      	cmp	r0, #1
 80074c6:	d00c      	beq.n	80074e2 <sin+0x62>
 80074c8:	2802      	cmp	r0, #2
 80074ca:	d011      	beq.n	80074f0 <sin+0x70>
 80074cc:	b9f0      	cbnz	r0, 800750c <sin+0x8c>
 80074ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074d2:	ed9d 0b00 	vldr	d0, [sp]
 80074d6:	2001      	movs	r0, #1
 80074d8:	f000 f9d6 	bl	8007888 <__kernel_sin>
 80074dc:	ec51 0b10 	vmov	r0, r1, d0
 80074e0:	e7e6      	b.n	80074b0 <sin+0x30>
 80074e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074e6:	ed9d 0b00 	vldr	d0, [sp]
 80074ea:	f000 f905 	bl	80076f8 <__kernel_cos>
 80074ee:	e7f5      	b.n	80074dc <sin+0x5c>
 80074f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074f4:	ed9d 0b00 	vldr	d0, [sp]
 80074f8:	2001      	movs	r0, #1
 80074fa:	f000 f9c5 	bl	8007888 <__kernel_sin>
 80074fe:	ec53 2b10 	vmov	r2, r3, d0
 8007502:	ee10 0a10 	vmov	r0, s0
 8007506:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800750a:	e7d1      	b.n	80074b0 <sin+0x30>
 800750c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007510:	ed9d 0b00 	vldr	d0, [sp]
 8007514:	f000 f8f0 	bl	80076f8 <__kernel_cos>
 8007518:	e7f1      	b.n	80074fe <sin+0x7e>
 800751a:	bf00      	nop
 800751c:	f3af 8000 	nop.w
	...
 8007528:	3fe921fb 	.word	0x3fe921fb
 800752c:	7fefffff 	.word	0x7fefffff

08007530 <nan>:
 8007530:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007538 <nan+0x8>
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	00000000 	.word	0x00000000
 800753c:	7ff80000 	.word	0x7ff80000

08007540 <__ieee754_sqrt>:
 8007540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	ec55 4b10 	vmov	r4, r5, d0
 8007548:	4e67      	ldr	r6, [pc, #412]	; (80076e8 <__ieee754_sqrt+0x1a8>)
 800754a:	43ae      	bics	r6, r5
 800754c:	ee10 0a10 	vmov	r0, s0
 8007550:	ee10 2a10 	vmov	r2, s0
 8007554:	4629      	mov	r1, r5
 8007556:	462b      	mov	r3, r5
 8007558:	d10d      	bne.n	8007576 <__ieee754_sqrt+0x36>
 800755a:	f7f9 f845 	bl	80005e8 <__aeabi_dmul>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4620      	mov	r0, r4
 8007564:	4629      	mov	r1, r5
 8007566:	f7f8 fe89 	bl	800027c <__adddf3>
 800756a:	4604      	mov	r4, r0
 800756c:	460d      	mov	r5, r1
 800756e:	ec45 4b10 	vmov	d0, r4, r5
 8007572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007576:	2d00      	cmp	r5, #0
 8007578:	dc0b      	bgt.n	8007592 <__ieee754_sqrt+0x52>
 800757a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800757e:	4326      	orrs	r6, r4
 8007580:	d0f5      	beq.n	800756e <__ieee754_sqrt+0x2e>
 8007582:	b135      	cbz	r5, 8007592 <__ieee754_sqrt+0x52>
 8007584:	f7f8 fe78 	bl	8000278 <__aeabi_dsub>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	f7f9 f956 	bl	800083c <__aeabi_ddiv>
 8007590:	e7eb      	b.n	800756a <__ieee754_sqrt+0x2a>
 8007592:	1509      	asrs	r1, r1, #20
 8007594:	f000 808d 	beq.w	80076b2 <__ieee754_sqrt+0x172>
 8007598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800759c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80075a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075a4:	07c9      	lsls	r1, r1, #31
 80075a6:	bf5c      	itt	pl
 80075a8:	005b      	lslpl	r3, r3, #1
 80075aa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80075ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80075b2:	bf58      	it	pl
 80075b4:	0052      	lslpl	r2, r2, #1
 80075b6:	2500      	movs	r5, #0
 80075b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80075bc:	1076      	asrs	r6, r6, #1
 80075be:	0052      	lsls	r2, r2, #1
 80075c0:	f04f 0e16 	mov.w	lr, #22
 80075c4:	46ac      	mov	ip, r5
 80075c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075ca:	eb0c 0001 	add.w	r0, ip, r1
 80075ce:	4298      	cmp	r0, r3
 80075d0:	bfde      	ittt	le
 80075d2:	1a1b      	suble	r3, r3, r0
 80075d4:	eb00 0c01 	addle.w	ip, r0, r1
 80075d8:	186d      	addle	r5, r5, r1
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	f1be 0e01 	subs.w	lr, lr, #1
 80075e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80075e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80075e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80075ec:	d1ed      	bne.n	80075ca <__ieee754_sqrt+0x8a>
 80075ee:	4674      	mov	r4, lr
 80075f0:	2720      	movs	r7, #32
 80075f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80075f6:	4563      	cmp	r3, ip
 80075f8:	eb01 000e 	add.w	r0, r1, lr
 80075fc:	dc02      	bgt.n	8007604 <__ieee754_sqrt+0xc4>
 80075fe:	d113      	bne.n	8007628 <__ieee754_sqrt+0xe8>
 8007600:	4290      	cmp	r0, r2
 8007602:	d811      	bhi.n	8007628 <__ieee754_sqrt+0xe8>
 8007604:	2800      	cmp	r0, #0
 8007606:	eb00 0e01 	add.w	lr, r0, r1
 800760a:	da57      	bge.n	80076bc <__ieee754_sqrt+0x17c>
 800760c:	f1be 0f00 	cmp.w	lr, #0
 8007610:	db54      	blt.n	80076bc <__ieee754_sqrt+0x17c>
 8007612:	f10c 0801 	add.w	r8, ip, #1
 8007616:	eba3 030c 	sub.w	r3, r3, ip
 800761a:	4290      	cmp	r0, r2
 800761c:	bf88      	it	hi
 800761e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007622:	1a12      	subs	r2, r2, r0
 8007624:	440c      	add	r4, r1
 8007626:	46c4      	mov	ip, r8
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	3f01      	subs	r7, #1
 800762c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007630:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007634:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007638:	d1dd      	bne.n	80075f6 <__ieee754_sqrt+0xb6>
 800763a:	4313      	orrs	r3, r2
 800763c:	d01b      	beq.n	8007676 <__ieee754_sqrt+0x136>
 800763e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80076ec <__ieee754_sqrt+0x1ac>
 8007642:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80076f0 <__ieee754_sqrt+0x1b0>
 8007646:	e9da 0100 	ldrd	r0, r1, [sl]
 800764a:	e9db 2300 	ldrd	r2, r3, [fp]
 800764e:	f7f8 fe13 	bl	8000278 <__aeabi_dsub>
 8007652:	e9da 8900 	ldrd	r8, r9, [sl]
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	4640      	mov	r0, r8
 800765c:	4649      	mov	r1, r9
 800765e:	f7f9 fa3f 	bl	8000ae0 <__aeabi_dcmple>
 8007662:	b140      	cbz	r0, 8007676 <__ieee754_sqrt+0x136>
 8007664:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007668:	e9da 0100 	ldrd	r0, r1, [sl]
 800766c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007670:	d126      	bne.n	80076c0 <__ieee754_sqrt+0x180>
 8007672:	3501      	adds	r5, #1
 8007674:	463c      	mov	r4, r7
 8007676:	106a      	asrs	r2, r5, #1
 8007678:	0863      	lsrs	r3, r4, #1
 800767a:	07e9      	lsls	r1, r5, #31
 800767c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007680:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007684:	bf48      	it	mi
 8007686:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800768a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800768e:	461c      	mov	r4, r3
 8007690:	e76d      	b.n	800756e <__ieee754_sqrt+0x2e>
 8007692:	0ad3      	lsrs	r3, r2, #11
 8007694:	3815      	subs	r0, #21
 8007696:	0552      	lsls	r2, r2, #21
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0fa      	beq.n	8007692 <__ieee754_sqrt+0x152>
 800769c:	02dc      	lsls	r4, r3, #11
 800769e:	d50a      	bpl.n	80076b6 <__ieee754_sqrt+0x176>
 80076a0:	f1c1 0420 	rsb	r4, r1, #32
 80076a4:	fa22 f404 	lsr.w	r4, r2, r4
 80076a8:	1e4d      	subs	r5, r1, #1
 80076aa:	408a      	lsls	r2, r1
 80076ac:	4323      	orrs	r3, r4
 80076ae:	1b41      	subs	r1, r0, r5
 80076b0:	e772      	b.n	8007598 <__ieee754_sqrt+0x58>
 80076b2:	4608      	mov	r0, r1
 80076b4:	e7f0      	b.n	8007698 <__ieee754_sqrt+0x158>
 80076b6:	005b      	lsls	r3, r3, #1
 80076b8:	3101      	adds	r1, #1
 80076ba:	e7ef      	b.n	800769c <__ieee754_sqrt+0x15c>
 80076bc:	46e0      	mov	r8, ip
 80076be:	e7aa      	b.n	8007616 <__ieee754_sqrt+0xd6>
 80076c0:	f7f8 fddc 	bl	800027c <__adddf3>
 80076c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4640      	mov	r0, r8
 80076ce:	4649      	mov	r1, r9
 80076d0:	f7f9 f9fc 	bl	8000acc <__aeabi_dcmplt>
 80076d4:	b120      	cbz	r0, 80076e0 <__ieee754_sqrt+0x1a0>
 80076d6:	1ca0      	adds	r0, r4, #2
 80076d8:	bf08      	it	eq
 80076da:	3501      	addeq	r5, #1
 80076dc:	3402      	adds	r4, #2
 80076de:	e7ca      	b.n	8007676 <__ieee754_sqrt+0x136>
 80076e0:	3401      	adds	r4, #1
 80076e2:	f024 0401 	bic.w	r4, r4, #1
 80076e6:	e7c6      	b.n	8007676 <__ieee754_sqrt+0x136>
 80076e8:	7ff00000 	.word	0x7ff00000
 80076ec:	20000010 	.word	0x20000010
 80076f0:	20000018 	.word	0x20000018
 80076f4:	00000000 	.word	0x00000000

080076f8 <__kernel_cos>:
 80076f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	ec57 6b10 	vmov	r6, r7, d0
 8007700:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007704:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007708:	ed8d 1b00 	vstr	d1, [sp]
 800770c:	da07      	bge.n	800771e <__kernel_cos+0x26>
 800770e:	ee10 0a10 	vmov	r0, s0
 8007712:	4639      	mov	r1, r7
 8007714:	f7f9 fa18 	bl	8000b48 <__aeabi_d2iz>
 8007718:	2800      	cmp	r0, #0
 800771a:	f000 8088 	beq.w	800782e <__kernel_cos+0x136>
 800771e:	4632      	mov	r2, r6
 8007720:	463b      	mov	r3, r7
 8007722:	4630      	mov	r0, r6
 8007724:	4639      	mov	r1, r7
 8007726:	f7f8 ff5f 	bl	80005e8 <__aeabi_dmul>
 800772a:	4b51      	ldr	r3, [pc, #324]	; (8007870 <__kernel_cos+0x178>)
 800772c:	2200      	movs	r2, #0
 800772e:	4604      	mov	r4, r0
 8007730:	460d      	mov	r5, r1
 8007732:	f7f8 ff59 	bl	80005e8 <__aeabi_dmul>
 8007736:	a340      	add	r3, pc, #256	; (adr r3, 8007838 <__kernel_cos+0x140>)
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	4682      	mov	sl, r0
 800773e:	468b      	mov	fp, r1
 8007740:	4620      	mov	r0, r4
 8007742:	4629      	mov	r1, r5
 8007744:	f7f8 ff50 	bl	80005e8 <__aeabi_dmul>
 8007748:	a33d      	add	r3, pc, #244	; (adr r3, 8007840 <__kernel_cos+0x148>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f7f8 fd95 	bl	800027c <__adddf3>
 8007752:	4622      	mov	r2, r4
 8007754:	462b      	mov	r3, r5
 8007756:	f7f8 ff47 	bl	80005e8 <__aeabi_dmul>
 800775a:	a33b      	add	r3, pc, #236	; (adr r3, 8007848 <__kernel_cos+0x150>)
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	f7f8 fd8a 	bl	8000278 <__aeabi_dsub>
 8007764:	4622      	mov	r2, r4
 8007766:	462b      	mov	r3, r5
 8007768:	f7f8 ff3e 	bl	80005e8 <__aeabi_dmul>
 800776c:	a338      	add	r3, pc, #224	; (adr r3, 8007850 <__kernel_cos+0x158>)
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	f7f8 fd83 	bl	800027c <__adddf3>
 8007776:	4622      	mov	r2, r4
 8007778:	462b      	mov	r3, r5
 800777a:	f7f8 ff35 	bl	80005e8 <__aeabi_dmul>
 800777e:	a336      	add	r3, pc, #216	; (adr r3, 8007858 <__kernel_cos+0x160>)
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f7f8 fd78 	bl	8000278 <__aeabi_dsub>
 8007788:	4622      	mov	r2, r4
 800778a:	462b      	mov	r3, r5
 800778c:	f7f8 ff2c 	bl	80005e8 <__aeabi_dmul>
 8007790:	a333      	add	r3, pc, #204	; (adr r3, 8007860 <__kernel_cos+0x168>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	f7f8 fd71 	bl	800027c <__adddf3>
 800779a:	4622      	mov	r2, r4
 800779c:	462b      	mov	r3, r5
 800779e:	f7f8 ff23 	bl	80005e8 <__aeabi_dmul>
 80077a2:	4622      	mov	r2, r4
 80077a4:	462b      	mov	r3, r5
 80077a6:	f7f8 ff1f 	bl	80005e8 <__aeabi_dmul>
 80077aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ae:	4604      	mov	r4, r0
 80077b0:	460d      	mov	r5, r1
 80077b2:	4630      	mov	r0, r6
 80077b4:	4639      	mov	r1, r7
 80077b6:	f7f8 ff17 	bl	80005e8 <__aeabi_dmul>
 80077ba:	460b      	mov	r3, r1
 80077bc:	4602      	mov	r2, r0
 80077be:	4629      	mov	r1, r5
 80077c0:	4620      	mov	r0, r4
 80077c2:	f7f8 fd59 	bl	8000278 <__aeabi_dsub>
 80077c6:	4b2b      	ldr	r3, [pc, #172]	; (8007874 <__kernel_cos+0x17c>)
 80077c8:	4598      	cmp	r8, r3
 80077ca:	4606      	mov	r6, r0
 80077cc:	460f      	mov	r7, r1
 80077ce:	dc10      	bgt.n	80077f2 <__kernel_cos+0xfa>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4650      	mov	r0, sl
 80077d6:	4659      	mov	r1, fp
 80077d8:	f7f8 fd4e 	bl	8000278 <__aeabi_dsub>
 80077dc:	460b      	mov	r3, r1
 80077de:	4926      	ldr	r1, [pc, #152]	; (8007878 <__kernel_cos+0x180>)
 80077e0:	4602      	mov	r2, r0
 80077e2:	2000      	movs	r0, #0
 80077e4:	f7f8 fd48 	bl	8000278 <__aeabi_dsub>
 80077e8:	ec41 0b10 	vmov	d0, r0, r1
 80077ec:	b003      	add	sp, #12
 80077ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f2:	4b22      	ldr	r3, [pc, #136]	; (800787c <__kernel_cos+0x184>)
 80077f4:	4920      	ldr	r1, [pc, #128]	; (8007878 <__kernel_cos+0x180>)
 80077f6:	4598      	cmp	r8, r3
 80077f8:	bfcc      	ite	gt
 80077fa:	4d21      	ldrgt	r5, [pc, #132]	; (8007880 <__kernel_cos+0x188>)
 80077fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007800:	2400      	movs	r4, #0
 8007802:	4622      	mov	r2, r4
 8007804:	462b      	mov	r3, r5
 8007806:	2000      	movs	r0, #0
 8007808:	f7f8 fd36 	bl	8000278 <__aeabi_dsub>
 800780c:	4622      	mov	r2, r4
 800780e:	4680      	mov	r8, r0
 8007810:	4689      	mov	r9, r1
 8007812:	462b      	mov	r3, r5
 8007814:	4650      	mov	r0, sl
 8007816:	4659      	mov	r1, fp
 8007818:	f7f8 fd2e 	bl	8000278 <__aeabi_dsub>
 800781c:	4632      	mov	r2, r6
 800781e:	463b      	mov	r3, r7
 8007820:	f7f8 fd2a 	bl	8000278 <__aeabi_dsub>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4640      	mov	r0, r8
 800782a:	4649      	mov	r1, r9
 800782c:	e7da      	b.n	80077e4 <__kernel_cos+0xec>
 800782e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007868 <__kernel_cos+0x170>
 8007832:	e7db      	b.n	80077ec <__kernel_cos+0xf4>
 8007834:	f3af 8000 	nop.w
 8007838:	be8838d4 	.word	0xbe8838d4
 800783c:	bda8fae9 	.word	0xbda8fae9
 8007840:	bdb4b1c4 	.word	0xbdb4b1c4
 8007844:	3e21ee9e 	.word	0x3e21ee9e
 8007848:	809c52ad 	.word	0x809c52ad
 800784c:	3e927e4f 	.word	0x3e927e4f
 8007850:	19cb1590 	.word	0x19cb1590
 8007854:	3efa01a0 	.word	0x3efa01a0
 8007858:	16c15177 	.word	0x16c15177
 800785c:	3f56c16c 	.word	0x3f56c16c
 8007860:	5555554c 	.word	0x5555554c
 8007864:	3fa55555 	.word	0x3fa55555
 8007868:	00000000 	.word	0x00000000
 800786c:	3ff00000 	.word	0x3ff00000
 8007870:	3fe00000 	.word	0x3fe00000
 8007874:	3fd33332 	.word	0x3fd33332
 8007878:	3ff00000 	.word	0x3ff00000
 800787c:	3fe90000 	.word	0x3fe90000
 8007880:	3fd20000 	.word	0x3fd20000
 8007884:	00000000 	.word	0x00000000

08007888 <__kernel_sin>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	ed2d 8b04 	vpush	{d8-d9}
 8007890:	eeb0 8a41 	vmov.f32	s16, s2
 8007894:	eef0 8a61 	vmov.f32	s17, s3
 8007898:	ec55 4b10 	vmov	r4, r5, d0
 800789c:	b083      	sub	sp, #12
 800789e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80078a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80078a6:	9001      	str	r0, [sp, #4]
 80078a8:	da06      	bge.n	80078b8 <__kernel_sin+0x30>
 80078aa:	ee10 0a10 	vmov	r0, s0
 80078ae:	4629      	mov	r1, r5
 80078b0:	f7f9 f94a 	bl	8000b48 <__aeabi_d2iz>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d051      	beq.n	800795c <__kernel_sin+0xd4>
 80078b8:	4622      	mov	r2, r4
 80078ba:	462b      	mov	r3, r5
 80078bc:	4620      	mov	r0, r4
 80078be:	4629      	mov	r1, r5
 80078c0:	f7f8 fe92 	bl	80005e8 <__aeabi_dmul>
 80078c4:	4682      	mov	sl, r0
 80078c6:	468b      	mov	fp, r1
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4620      	mov	r0, r4
 80078ce:	4629      	mov	r1, r5
 80078d0:	f7f8 fe8a 	bl	80005e8 <__aeabi_dmul>
 80078d4:	a341      	add	r3, pc, #260	; (adr r3, 80079dc <__kernel_sin+0x154>)
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	4680      	mov	r8, r0
 80078dc:	4689      	mov	r9, r1
 80078de:	4650      	mov	r0, sl
 80078e0:	4659      	mov	r1, fp
 80078e2:	f7f8 fe81 	bl	80005e8 <__aeabi_dmul>
 80078e6:	a33f      	add	r3, pc, #252	; (adr r3, 80079e4 <__kernel_sin+0x15c>)
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f7f8 fcc4 	bl	8000278 <__aeabi_dsub>
 80078f0:	4652      	mov	r2, sl
 80078f2:	465b      	mov	r3, fp
 80078f4:	f7f8 fe78 	bl	80005e8 <__aeabi_dmul>
 80078f8:	a33c      	add	r3, pc, #240	; (adr r3, 80079ec <__kernel_sin+0x164>)
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	f7f8 fcbd 	bl	800027c <__adddf3>
 8007902:	4652      	mov	r2, sl
 8007904:	465b      	mov	r3, fp
 8007906:	f7f8 fe6f 	bl	80005e8 <__aeabi_dmul>
 800790a:	a33a      	add	r3, pc, #232	; (adr r3, 80079f4 <__kernel_sin+0x16c>)
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	f7f8 fcb2 	bl	8000278 <__aeabi_dsub>
 8007914:	4652      	mov	r2, sl
 8007916:	465b      	mov	r3, fp
 8007918:	f7f8 fe66 	bl	80005e8 <__aeabi_dmul>
 800791c:	a337      	add	r3, pc, #220	; (adr r3, 80079fc <__kernel_sin+0x174>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	f7f8 fcab 	bl	800027c <__adddf3>
 8007926:	9b01      	ldr	r3, [sp, #4]
 8007928:	4606      	mov	r6, r0
 800792a:	460f      	mov	r7, r1
 800792c:	b9eb      	cbnz	r3, 800796a <__kernel_sin+0xe2>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4650      	mov	r0, sl
 8007934:	4659      	mov	r1, fp
 8007936:	f7f8 fe57 	bl	80005e8 <__aeabi_dmul>
 800793a:	a325      	add	r3, pc, #148	; (adr r3, 80079d0 <__kernel_sin+0x148>)
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	f7f8 fc9a 	bl	8000278 <__aeabi_dsub>
 8007944:	4642      	mov	r2, r8
 8007946:	464b      	mov	r3, r9
 8007948:	f7f8 fe4e 	bl	80005e8 <__aeabi_dmul>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4620      	mov	r0, r4
 8007952:	4629      	mov	r1, r5
 8007954:	f7f8 fc92 	bl	800027c <__adddf3>
 8007958:	4604      	mov	r4, r0
 800795a:	460d      	mov	r5, r1
 800795c:	ec45 4b10 	vmov	d0, r4, r5
 8007960:	b003      	add	sp, #12
 8007962:	ecbd 8b04 	vpop	{d8-d9}
 8007966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796a:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <__kernel_sin+0x150>)
 800796c:	ec51 0b18 	vmov	r0, r1, d8
 8007970:	2200      	movs	r2, #0
 8007972:	f7f8 fe39 	bl	80005e8 <__aeabi_dmul>
 8007976:	4632      	mov	r2, r6
 8007978:	ec41 0b19 	vmov	d9, r0, r1
 800797c:	463b      	mov	r3, r7
 800797e:	4640      	mov	r0, r8
 8007980:	4649      	mov	r1, r9
 8007982:	f7f8 fe31 	bl	80005e8 <__aeabi_dmul>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	ec51 0b19 	vmov	r0, r1, d9
 800798e:	f7f8 fc73 	bl	8000278 <__aeabi_dsub>
 8007992:	4652      	mov	r2, sl
 8007994:	465b      	mov	r3, fp
 8007996:	f7f8 fe27 	bl	80005e8 <__aeabi_dmul>
 800799a:	ec53 2b18 	vmov	r2, r3, d8
 800799e:	f7f8 fc6b 	bl	8000278 <__aeabi_dsub>
 80079a2:	a30b      	add	r3, pc, #44	; (adr r3, 80079d0 <__kernel_sin+0x148>)
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	4606      	mov	r6, r0
 80079aa:	460f      	mov	r7, r1
 80079ac:	4640      	mov	r0, r8
 80079ae:	4649      	mov	r1, r9
 80079b0:	f7f8 fe1a 	bl	80005e8 <__aeabi_dmul>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4630      	mov	r0, r6
 80079ba:	4639      	mov	r1, r7
 80079bc:	f7f8 fc5e 	bl	800027c <__adddf3>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4620      	mov	r0, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7f8 fc56 	bl	8000278 <__aeabi_dsub>
 80079cc:	e7c4      	b.n	8007958 <__kernel_sin+0xd0>
 80079ce:	bf00      	nop
 80079d0:	55555549 	.word	0x55555549
 80079d4:	3fc55555 	.word	0x3fc55555
 80079d8:	3fe00000 	.word	0x3fe00000
 80079dc:	5acfd57c 	.word	0x5acfd57c
 80079e0:	3de5d93a 	.word	0x3de5d93a
 80079e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80079e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80079ec:	57b1fe7d 	.word	0x57b1fe7d
 80079f0:	3ec71de3 	.word	0x3ec71de3
 80079f4:	19c161d5 	.word	0x19c161d5
 80079f8:	3f2a01a0 	.word	0x3f2a01a0
 80079fc:	1110f8a6 	.word	0x1110f8a6
 8007a00:	3f811111 	.word	0x3f811111
 8007a04:	00000000 	.word	0x00000000

08007a08 <__ieee754_asin>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	ed2d 8b04 	vpush	{d8-d9}
 8007a10:	ec55 4b10 	vmov	r4, r5, d0
 8007a14:	4bcc      	ldr	r3, [pc, #816]	; (8007d48 <__ieee754_asin+0x340>)
 8007a16:	b083      	sub	sp, #12
 8007a18:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007a1c:	4598      	cmp	r8, r3
 8007a1e:	9501      	str	r5, [sp, #4]
 8007a20:	dd33      	ble.n	8007a8a <__ieee754_asin+0x82>
 8007a22:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8007a26:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8007a2a:	ea58 0804 	orrs.w	r8, r8, r4
 8007a2e:	d117      	bne.n	8007a60 <__ieee754_asin+0x58>
 8007a30:	a3ab      	add	r3, pc, #684	; (adr r3, 8007ce0 <__ieee754_asin+0x2d8>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	ee10 0a10 	vmov	r0, s0
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	f7f8 fdd4 	bl	80005e8 <__aeabi_dmul>
 8007a40:	a3a9      	add	r3, pc, #676	; (adr r3, 8007ce8 <__ieee754_asin+0x2e0>)
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	4606      	mov	r6, r0
 8007a48:	460f      	mov	r7, r1
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	f7f8 fdcb 	bl	80005e8 <__aeabi_dmul>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	4630      	mov	r0, r6
 8007a58:	4639      	mov	r1, r7
 8007a5a:	f7f8 fc0f 	bl	800027c <__adddf3>
 8007a5e:	e00b      	b.n	8007a78 <__ieee754_asin+0x70>
 8007a60:	ee10 2a10 	vmov	r2, s0
 8007a64:	462b      	mov	r3, r5
 8007a66:	ee10 0a10 	vmov	r0, s0
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	f7f8 fc04 	bl	8000278 <__aeabi_dsub>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	f7f8 fee2 	bl	800083c <__aeabi_ddiv>
 8007a78:	4604      	mov	r4, r0
 8007a7a:	460d      	mov	r5, r1
 8007a7c:	ec45 4b10 	vmov	d0, r4, r5
 8007a80:	b003      	add	sp, #12
 8007a82:	ecbd 8b04 	vpop	{d8-d9}
 8007a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8a:	4bb0      	ldr	r3, [pc, #704]	; (8007d4c <__ieee754_asin+0x344>)
 8007a8c:	4598      	cmp	r8, r3
 8007a8e:	dc11      	bgt.n	8007ab4 <__ieee754_asin+0xac>
 8007a90:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007a94:	f280 80ae 	bge.w	8007bf4 <__ieee754_asin+0x1ec>
 8007a98:	a395      	add	r3, pc, #596	; (adr r3, 8007cf0 <__ieee754_asin+0x2e8>)
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	ee10 0a10 	vmov	r0, s0
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	f7f8 fbea 	bl	800027c <__adddf3>
 8007aa8:	4ba9      	ldr	r3, [pc, #676]	; (8007d50 <__ieee754_asin+0x348>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f7f9 f82c 	bl	8000b08 <__aeabi_dcmpgt>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d1e3      	bne.n	8007a7c <__ieee754_asin+0x74>
 8007ab4:	ec45 4b10 	vmov	d0, r4, r5
 8007ab8:	f7ff fcd6 	bl	8007468 <fabs>
 8007abc:	49a4      	ldr	r1, [pc, #656]	; (8007d50 <__ieee754_asin+0x348>)
 8007abe:	ec53 2b10 	vmov	r2, r3, d0
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f7f8 fbd8 	bl	8000278 <__aeabi_dsub>
 8007ac8:	4ba2      	ldr	r3, [pc, #648]	; (8007d54 <__ieee754_asin+0x34c>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	f7f8 fd8c 	bl	80005e8 <__aeabi_dmul>
 8007ad0:	a389      	add	r3, pc, #548	; (adr r3, 8007cf8 <__ieee754_asin+0x2f0>)
 8007ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	460d      	mov	r5, r1
 8007ada:	f7f8 fd85 	bl	80005e8 <__aeabi_dmul>
 8007ade:	a388      	add	r3, pc, #544	; (adr r3, 8007d00 <__ieee754_asin+0x2f8>)
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	f7f8 fbca 	bl	800027c <__adddf3>
 8007ae8:	4622      	mov	r2, r4
 8007aea:	462b      	mov	r3, r5
 8007aec:	f7f8 fd7c 	bl	80005e8 <__aeabi_dmul>
 8007af0:	a385      	add	r3, pc, #532	; (adr r3, 8007d08 <__ieee754_asin+0x300>)
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	f7f8 fbbf 	bl	8000278 <__aeabi_dsub>
 8007afa:	4622      	mov	r2, r4
 8007afc:	462b      	mov	r3, r5
 8007afe:	f7f8 fd73 	bl	80005e8 <__aeabi_dmul>
 8007b02:	a383      	add	r3, pc, #524	; (adr r3, 8007d10 <__ieee754_asin+0x308>)
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f7f8 fbb8 	bl	800027c <__adddf3>
 8007b0c:	4622      	mov	r2, r4
 8007b0e:	462b      	mov	r3, r5
 8007b10:	f7f8 fd6a 	bl	80005e8 <__aeabi_dmul>
 8007b14:	a380      	add	r3, pc, #512	; (adr r3, 8007d18 <__ieee754_asin+0x310>)
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	f7f8 fbad 	bl	8000278 <__aeabi_dsub>
 8007b1e:	4622      	mov	r2, r4
 8007b20:	462b      	mov	r3, r5
 8007b22:	f7f8 fd61 	bl	80005e8 <__aeabi_dmul>
 8007b26:	a37e      	add	r3, pc, #504	; (adr r3, 8007d20 <__ieee754_asin+0x318>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	f7f8 fba6 	bl	800027c <__adddf3>
 8007b30:	4622      	mov	r2, r4
 8007b32:	462b      	mov	r3, r5
 8007b34:	f7f8 fd58 	bl	80005e8 <__aeabi_dmul>
 8007b38:	a37b      	add	r3, pc, #492	; (adr r3, 8007d28 <__ieee754_asin+0x320>)
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	ec41 0b18 	vmov	d8, r0, r1
 8007b42:	4620      	mov	r0, r4
 8007b44:	4629      	mov	r1, r5
 8007b46:	f7f8 fd4f 	bl	80005e8 <__aeabi_dmul>
 8007b4a:	a379      	add	r3, pc, #484	; (adr r3, 8007d30 <__ieee754_asin+0x328>)
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	f7f8 fb92 	bl	8000278 <__aeabi_dsub>
 8007b54:	4622      	mov	r2, r4
 8007b56:	462b      	mov	r3, r5
 8007b58:	f7f8 fd46 	bl	80005e8 <__aeabi_dmul>
 8007b5c:	a376      	add	r3, pc, #472	; (adr r3, 8007d38 <__ieee754_asin+0x330>)
 8007b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b62:	f7f8 fb8b 	bl	800027c <__adddf3>
 8007b66:	4622      	mov	r2, r4
 8007b68:	462b      	mov	r3, r5
 8007b6a:	f7f8 fd3d 	bl	80005e8 <__aeabi_dmul>
 8007b6e:	a374      	add	r3, pc, #464	; (adr r3, 8007d40 <__ieee754_asin+0x338>)
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	f7f8 fb80 	bl	8000278 <__aeabi_dsub>
 8007b78:	4622      	mov	r2, r4
 8007b7a:	462b      	mov	r3, r5
 8007b7c:	f7f8 fd34 	bl	80005e8 <__aeabi_dmul>
 8007b80:	4b73      	ldr	r3, [pc, #460]	; (8007d50 <__ieee754_asin+0x348>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	f7f8 fb7a 	bl	800027c <__adddf3>
 8007b88:	ec45 4b10 	vmov	d0, r4, r5
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	460f      	mov	r7, r1
 8007b90:	f7ff fcd6 	bl	8007540 <__ieee754_sqrt>
 8007b94:	4b70      	ldr	r3, [pc, #448]	; (8007d58 <__ieee754_asin+0x350>)
 8007b96:	4598      	cmp	r8, r3
 8007b98:	ec5b ab10 	vmov	sl, fp, d0
 8007b9c:	f340 80de 	ble.w	8007d5c <__ieee754_asin+0x354>
 8007ba0:	4632      	mov	r2, r6
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	ec51 0b18 	vmov	r0, r1, d8
 8007ba8:	f7f8 fe48 	bl	800083c <__aeabi_ddiv>
 8007bac:	4652      	mov	r2, sl
 8007bae:	465b      	mov	r3, fp
 8007bb0:	f7f8 fd1a 	bl	80005e8 <__aeabi_dmul>
 8007bb4:	4652      	mov	r2, sl
 8007bb6:	465b      	mov	r3, fp
 8007bb8:	f7f8 fb60 	bl	800027c <__adddf3>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	f7f8 fb5c 	bl	800027c <__adddf3>
 8007bc4:	a348      	add	r3, pc, #288	; (adr r3, 8007ce8 <__ieee754_asin+0x2e0>)
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	f7f8 fb55 	bl	8000278 <__aeabi_dsub>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	a143      	add	r1, pc, #268	; (adr r1, 8007ce0 <__ieee754_asin+0x2d8>)
 8007bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd8:	f7f8 fb4e 	bl	8000278 <__aeabi_dsub>
 8007bdc:	9b01      	ldr	r3, [sp, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfdc      	itt	le
 8007be2:	4602      	movle	r2, r0
 8007be4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007be8:	4604      	mov	r4, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	bfdc      	itt	le
 8007bee:	4614      	movle	r4, r2
 8007bf0:	461d      	movle	r5, r3
 8007bf2:	e743      	b.n	8007a7c <__ieee754_asin+0x74>
 8007bf4:	ee10 2a10 	vmov	r2, s0
 8007bf8:	ee10 0a10 	vmov	r0, s0
 8007bfc:	462b      	mov	r3, r5
 8007bfe:	4629      	mov	r1, r5
 8007c00:	f7f8 fcf2 	bl	80005e8 <__aeabi_dmul>
 8007c04:	a33c      	add	r3, pc, #240	; (adr r3, 8007cf8 <__ieee754_asin+0x2f0>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	460f      	mov	r7, r1
 8007c0e:	f7f8 fceb 	bl	80005e8 <__aeabi_dmul>
 8007c12:	a33b      	add	r3, pc, #236	; (adr r3, 8007d00 <__ieee754_asin+0x2f8>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fb30 	bl	800027c <__adddf3>
 8007c1c:	4632      	mov	r2, r6
 8007c1e:	463b      	mov	r3, r7
 8007c20:	f7f8 fce2 	bl	80005e8 <__aeabi_dmul>
 8007c24:	a338      	add	r3, pc, #224	; (adr r3, 8007d08 <__ieee754_asin+0x300>)
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	f7f8 fb25 	bl	8000278 <__aeabi_dsub>
 8007c2e:	4632      	mov	r2, r6
 8007c30:	463b      	mov	r3, r7
 8007c32:	f7f8 fcd9 	bl	80005e8 <__aeabi_dmul>
 8007c36:	a336      	add	r3, pc, #216	; (adr r3, 8007d10 <__ieee754_asin+0x308>)
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f7f8 fb1e 	bl	800027c <__adddf3>
 8007c40:	4632      	mov	r2, r6
 8007c42:	463b      	mov	r3, r7
 8007c44:	f7f8 fcd0 	bl	80005e8 <__aeabi_dmul>
 8007c48:	a333      	add	r3, pc, #204	; (adr r3, 8007d18 <__ieee754_asin+0x310>)
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	f7f8 fb13 	bl	8000278 <__aeabi_dsub>
 8007c52:	4632      	mov	r2, r6
 8007c54:	463b      	mov	r3, r7
 8007c56:	f7f8 fcc7 	bl	80005e8 <__aeabi_dmul>
 8007c5a:	a331      	add	r3, pc, #196	; (adr r3, 8007d20 <__ieee754_asin+0x318>)
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	f7f8 fb0c 	bl	800027c <__adddf3>
 8007c64:	4632      	mov	r2, r6
 8007c66:	463b      	mov	r3, r7
 8007c68:	f7f8 fcbe 	bl	80005e8 <__aeabi_dmul>
 8007c6c:	a32e      	add	r3, pc, #184	; (adr r3, 8007d28 <__ieee754_asin+0x320>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	4680      	mov	r8, r0
 8007c74:	4689      	mov	r9, r1
 8007c76:	4630      	mov	r0, r6
 8007c78:	4639      	mov	r1, r7
 8007c7a:	f7f8 fcb5 	bl	80005e8 <__aeabi_dmul>
 8007c7e:	a32c      	add	r3, pc, #176	; (adr r3, 8007d30 <__ieee754_asin+0x328>)
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f7f8 faf8 	bl	8000278 <__aeabi_dsub>
 8007c88:	4632      	mov	r2, r6
 8007c8a:	463b      	mov	r3, r7
 8007c8c:	f7f8 fcac 	bl	80005e8 <__aeabi_dmul>
 8007c90:	a329      	add	r3, pc, #164	; (adr r3, 8007d38 <__ieee754_asin+0x330>)
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	f7f8 faf1 	bl	800027c <__adddf3>
 8007c9a:	4632      	mov	r2, r6
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	f7f8 fca3 	bl	80005e8 <__aeabi_dmul>
 8007ca2:	a327      	add	r3, pc, #156	; (adr r3, 8007d40 <__ieee754_asin+0x338>)
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	f7f8 fae6 	bl	8000278 <__aeabi_dsub>
 8007cac:	4632      	mov	r2, r6
 8007cae:	463b      	mov	r3, r7
 8007cb0:	f7f8 fc9a 	bl	80005e8 <__aeabi_dmul>
 8007cb4:	4b26      	ldr	r3, [pc, #152]	; (8007d50 <__ieee754_asin+0x348>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f7f8 fae0 	bl	800027c <__adddf3>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4640      	mov	r0, r8
 8007cc2:	4649      	mov	r1, r9
 8007cc4:	f7f8 fdba 	bl	800083c <__aeabi_ddiv>
 8007cc8:	4622      	mov	r2, r4
 8007cca:	462b      	mov	r3, r5
 8007ccc:	f7f8 fc8c 	bl	80005e8 <__aeabi_dmul>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	e6bf      	b.n	8007a5a <__ieee754_asin+0x52>
 8007cda:	bf00      	nop
 8007cdc:	f3af 8000 	nop.w
 8007ce0:	54442d18 	.word	0x54442d18
 8007ce4:	3ff921fb 	.word	0x3ff921fb
 8007ce8:	33145c07 	.word	0x33145c07
 8007cec:	3c91a626 	.word	0x3c91a626
 8007cf0:	8800759c 	.word	0x8800759c
 8007cf4:	7e37e43c 	.word	0x7e37e43c
 8007cf8:	0dfdf709 	.word	0x0dfdf709
 8007cfc:	3f023de1 	.word	0x3f023de1
 8007d00:	7501b288 	.word	0x7501b288
 8007d04:	3f49efe0 	.word	0x3f49efe0
 8007d08:	b5688f3b 	.word	0xb5688f3b
 8007d0c:	3fa48228 	.word	0x3fa48228
 8007d10:	0e884455 	.word	0x0e884455
 8007d14:	3fc9c155 	.word	0x3fc9c155
 8007d18:	03eb6f7d 	.word	0x03eb6f7d
 8007d1c:	3fd4d612 	.word	0x3fd4d612
 8007d20:	55555555 	.word	0x55555555
 8007d24:	3fc55555 	.word	0x3fc55555
 8007d28:	b12e9282 	.word	0xb12e9282
 8007d2c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007d30:	1b8d0159 	.word	0x1b8d0159
 8007d34:	3fe6066c 	.word	0x3fe6066c
 8007d38:	9c598ac8 	.word	0x9c598ac8
 8007d3c:	40002ae5 	.word	0x40002ae5
 8007d40:	1c8a2d4b 	.word	0x1c8a2d4b
 8007d44:	40033a27 	.word	0x40033a27
 8007d48:	3fefffff 	.word	0x3fefffff
 8007d4c:	3fdfffff 	.word	0x3fdfffff
 8007d50:	3ff00000 	.word	0x3ff00000
 8007d54:	3fe00000 	.word	0x3fe00000
 8007d58:	3fef3332 	.word	0x3fef3332
 8007d5c:	ee10 2a10 	vmov	r2, s0
 8007d60:	ee10 0a10 	vmov	r0, s0
 8007d64:	465b      	mov	r3, fp
 8007d66:	4659      	mov	r1, fp
 8007d68:	f7f8 fa88 	bl	800027c <__adddf3>
 8007d6c:	4632      	mov	r2, r6
 8007d6e:	463b      	mov	r3, r7
 8007d70:	ec41 0b19 	vmov	d9, r0, r1
 8007d74:	ec51 0b18 	vmov	r0, r1, d8
 8007d78:	f7f8 fd60 	bl	800083c <__aeabi_ddiv>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	ec51 0b19 	vmov	r0, r1, d9
 8007d84:	f7f8 fc30 	bl	80005e8 <__aeabi_dmul>
 8007d88:	f04f 0800 	mov.w	r8, #0
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	460f      	mov	r7, r1
 8007d90:	4642      	mov	r2, r8
 8007d92:	465b      	mov	r3, fp
 8007d94:	4640      	mov	r0, r8
 8007d96:	4659      	mov	r1, fp
 8007d98:	f7f8 fc26 	bl	80005e8 <__aeabi_dmul>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4620      	mov	r0, r4
 8007da2:	4629      	mov	r1, r5
 8007da4:	f7f8 fa68 	bl	8000278 <__aeabi_dsub>
 8007da8:	4642      	mov	r2, r8
 8007daa:	4604      	mov	r4, r0
 8007dac:	460d      	mov	r5, r1
 8007dae:	465b      	mov	r3, fp
 8007db0:	4650      	mov	r0, sl
 8007db2:	4659      	mov	r1, fp
 8007db4:	f7f8 fa62 	bl	800027c <__adddf3>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	f7f8 fd3c 	bl	800083c <__aeabi_ddiv>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	f7f8 fa58 	bl	800027c <__adddf3>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	a113      	add	r1, pc, #76	; (adr r1, 8007e20 <__ieee754_asin+0x418>)
 8007dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dd6:	f7f8 fa4f 	bl	8000278 <__aeabi_dsub>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4630      	mov	r0, r6
 8007de0:	4639      	mov	r1, r7
 8007de2:	f7f8 fa49 	bl	8000278 <__aeabi_dsub>
 8007de6:	4642      	mov	r2, r8
 8007de8:	4604      	mov	r4, r0
 8007dea:	460d      	mov	r5, r1
 8007dec:	465b      	mov	r3, fp
 8007dee:	4640      	mov	r0, r8
 8007df0:	4659      	mov	r1, fp
 8007df2:	f7f8 fa43 	bl	800027c <__adddf3>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	a10b      	add	r1, pc, #44	; (adr r1, 8007e28 <__ieee754_asin+0x420>)
 8007dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e00:	f7f8 fa3a 	bl	8000278 <__aeabi_dsub>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4620      	mov	r0, r4
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	f7f8 fa34 	bl	8000278 <__aeabi_dsub>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	a104      	add	r1, pc, #16	; (adr r1, 8007e28 <__ieee754_asin+0x420>)
 8007e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e1a:	e6dd      	b.n	8007bd8 <__ieee754_asin+0x1d0>
 8007e1c:	f3af 8000 	nop.w
 8007e20:	33145c07 	.word	0x33145c07
 8007e24:	3c91a626 	.word	0x3c91a626
 8007e28:	54442d18 	.word	0x54442d18
 8007e2c:	3fe921fb 	.word	0x3fe921fb

08007e30 <__ieee754_rem_pio2>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	ed2d 8b02 	vpush	{d8}
 8007e38:	ec55 4b10 	vmov	r4, r5, d0
 8007e3c:	4bca      	ldr	r3, [pc, #808]	; (8008168 <__ieee754_rem_pio2+0x338>)
 8007e3e:	b08b      	sub	sp, #44	; 0x2c
 8007e40:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007e44:	4598      	cmp	r8, r3
 8007e46:	4682      	mov	sl, r0
 8007e48:	9502      	str	r5, [sp, #8]
 8007e4a:	dc08      	bgt.n	8007e5e <__ieee754_rem_pio2+0x2e>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	ed80 0b00 	vstr	d0, [r0]
 8007e54:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007e58:	f04f 0b00 	mov.w	fp, #0
 8007e5c:	e028      	b.n	8007eb0 <__ieee754_rem_pio2+0x80>
 8007e5e:	4bc3      	ldr	r3, [pc, #780]	; (800816c <__ieee754_rem_pio2+0x33c>)
 8007e60:	4598      	cmp	r8, r3
 8007e62:	dc78      	bgt.n	8007f56 <__ieee754_rem_pio2+0x126>
 8007e64:	9b02      	ldr	r3, [sp, #8]
 8007e66:	4ec2      	ldr	r6, [pc, #776]	; (8008170 <__ieee754_rem_pio2+0x340>)
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	ee10 0a10 	vmov	r0, s0
 8007e6e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008130 <__ieee754_rem_pio2+0x300>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	4629      	mov	r1, r5
 8007e76:	dd39      	ble.n	8007eec <__ieee754_rem_pio2+0xbc>
 8007e78:	f7f8 f9fe 	bl	8000278 <__aeabi_dsub>
 8007e7c:	45b0      	cmp	r8, r6
 8007e7e:	4604      	mov	r4, r0
 8007e80:	460d      	mov	r5, r1
 8007e82:	d01b      	beq.n	8007ebc <__ieee754_rem_pio2+0x8c>
 8007e84:	a3ac      	add	r3, pc, #688	; (adr r3, 8008138 <__ieee754_rem_pio2+0x308>)
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f7f8 f9f5 	bl	8000278 <__aeabi_dsub>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	e9ca 2300 	strd	r2, r3, [sl]
 8007e96:	4620      	mov	r0, r4
 8007e98:	4629      	mov	r1, r5
 8007e9a:	f7f8 f9ed 	bl	8000278 <__aeabi_dsub>
 8007e9e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008138 <__ieee754_rem_pio2+0x308>)
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f7f8 f9e8 	bl	8000278 <__aeabi_dsub>
 8007ea8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007eac:	f04f 0b01 	mov.w	fp, #1
 8007eb0:	4658      	mov	r0, fp
 8007eb2:	b00b      	add	sp, #44	; 0x2c
 8007eb4:	ecbd 8b02 	vpop	{d8}
 8007eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ebc:	a3a0      	add	r3, pc, #640	; (adr r3, 8008140 <__ieee754_rem_pio2+0x310>)
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f7f8 f9d9 	bl	8000278 <__aeabi_dsub>
 8007ec6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008148 <__ieee754_rem_pio2+0x318>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	4604      	mov	r4, r0
 8007ece:	460d      	mov	r5, r1
 8007ed0:	f7f8 f9d2 	bl	8000278 <__aeabi_dsub>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	e9ca 2300 	strd	r2, r3, [sl]
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 f9ca 	bl	8000278 <__aeabi_dsub>
 8007ee4:	a398      	add	r3, pc, #608	; (adr r3, 8008148 <__ieee754_rem_pio2+0x318>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	e7db      	b.n	8007ea4 <__ieee754_rem_pio2+0x74>
 8007eec:	f7f8 f9c6 	bl	800027c <__adddf3>
 8007ef0:	45b0      	cmp	r8, r6
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	460d      	mov	r5, r1
 8007ef6:	d016      	beq.n	8007f26 <__ieee754_rem_pio2+0xf6>
 8007ef8:	a38f      	add	r3, pc, #572	; (adr r3, 8008138 <__ieee754_rem_pio2+0x308>)
 8007efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efe:	f7f8 f9bd 	bl	800027c <__adddf3>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	e9ca 2300 	strd	r2, r3, [sl]
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	f7f8 f9b3 	bl	8000278 <__aeabi_dsub>
 8007f12:	a389      	add	r3, pc, #548	; (adr r3, 8008138 <__ieee754_rem_pio2+0x308>)
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	f7f8 f9b0 	bl	800027c <__adddf3>
 8007f1c:	f04f 3bff 	mov.w	fp, #4294967295
 8007f20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007f24:	e7c4      	b.n	8007eb0 <__ieee754_rem_pio2+0x80>
 8007f26:	a386      	add	r3, pc, #536	; (adr r3, 8008140 <__ieee754_rem_pio2+0x310>)
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f7f8 f9a6 	bl	800027c <__adddf3>
 8007f30:	a385      	add	r3, pc, #532	; (adr r3, 8008148 <__ieee754_rem_pio2+0x318>)
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	4604      	mov	r4, r0
 8007f38:	460d      	mov	r5, r1
 8007f3a:	f7f8 f99f 	bl	800027c <__adddf3>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	e9ca 2300 	strd	r2, r3, [sl]
 8007f46:	4620      	mov	r0, r4
 8007f48:	4629      	mov	r1, r5
 8007f4a:	f7f8 f995 	bl	8000278 <__aeabi_dsub>
 8007f4e:	a37e      	add	r3, pc, #504	; (adr r3, 8008148 <__ieee754_rem_pio2+0x318>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	e7e0      	b.n	8007f18 <__ieee754_rem_pio2+0xe8>
 8007f56:	4b87      	ldr	r3, [pc, #540]	; (8008174 <__ieee754_rem_pio2+0x344>)
 8007f58:	4598      	cmp	r8, r3
 8007f5a:	f300 80d8 	bgt.w	800810e <__ieee754_rem_pio2+0x2de>
 8007f5e:	f7ff fa83 	bl	8007468 <fabs>
 8007f62:	ec55 4b10 	vmov	r4, r5, d0
 8007f66:	ee10 0a10 	vmov	r0, s0
 8007f6a:	a379      	add	r3, pc, #484	; (adr r3, 8008150 <__ieee754_rem_pio2+0x320>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f8 fb39 	bl	80005e8 <__aeabi_dmul>
 8007f76:	4b80      	ldr	r3, [pc, #512]	; (8008178 <__ieee754_rem_pio2+0x348>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f7f8 f97f 	bl	800027c <__adddf3>
 8007f7e:	f7f8 fde3 	bl	8000b48 <__aeabi_d2iz>
 8007f82:	4683      	mov	fp, r0
 8007f84:	f7f8 fac6 	bl	8000514 <__aeabi_i2d>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	ec43 2b18 	vmov	d8, r2, r3
 8007f90:	a367      	add	r3, pc, #412	; (adr r3, 8008130 <__ieee754_rem_pio2+0x300>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f7f8 fb27 	bl	80005e8 <__aeabi_dmul>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	f7f8 f969 	bl	8000278 <__aeabi_dsub>
 8007fa6:	a364      	add	r3, pc, #400	; (adr r3, 8008138 <__ieee754_rem_pio2+0x308>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	4606      	mov	r6, r0
 8007fae:	460f      	mov	r7, r1
 8007fb0:	ec51 0b18 	vmov	r0, r1, d8
 8007fb4:	f7f8 fb18 	bl	80005e8 <__aeabi_dmul>
 8007fb8:	f1bb 0f1f 	cmp.w	fp, #31
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	460d      	mov	r5, r1
 8007fc0:	dc0d      	bgt.n	8007fde <__ieee754_rem_pio2+0x1ae>
 8007fc2:	4b6e      	ldr	r3, [pc, #440]	; (800817c <__ieee754_rem_pio2+0x34c>)
 8007fc4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fcc:	4543      	cmp	r3, r8
 8007fce:	d006      	beq.n	8007fde <__ieee754_rem_pio2+0x1ae>
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	462b      	mov	r3, r5
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	4639      	mov	r1, r7
 8007fd8:	f7f8 f94e 	bl	8000278 <__aeabi_dsub>
 8007fdc:	e00e      	b.n	8007ffc <__ieee754_rem_pio2+0x1cc>
 8007fde:	462b      	mov	r3, r5
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	f7f8 f947 	bl	8000278 <__aeabi_dsub>
 8007fea:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007fee:	9303      	str	r3, [sp, #12]
 8007ff0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ff4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007ff8:	2b10      	cmp	r3, #16
 8007ffa:	dc02      	bgt.n	8008002 <__ieee754_rem_pio2+0x1d2>
 8007ffc:	e9ca 0100 	strd	r0, r1, [sl]
 8008000:	e039      	b.n	8008076 <__ieee754_rem_pio2+0x246>
 8008002:	a34f      	add	r3, pc, #316	; (adr r3, 8008140 <__ieee754_rem_pio2+0x310>)
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	ec51 0b18 	vmov	r0, r1, d8
 800800c:	f7f8 faec 	bl	80005e8 <__aeabi_dmul>
 8008010:	4604      	mov	r4, r0
 8008012:	460d      	mov	r5, r1
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	4630      	mov	r0, r6
 800801a:	4639      	mov	r1, r7
 800801c:	f7f8 f92c 	bl	8000278 <__aeabi_dsub>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4680      	mov	r8, r0
 8008026:	4689      	mov	r9, r1
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	f7f8 f924 	bl	8000278 <__aeabi_dsub>
 8008030:	4622      	mov	r2, r4
 8008032:	462b      	mov	r3, r5
 8008034:	f7f8 f920 	bl	8000278 <__aeabi_dsub>
 8008038:	a343      	add	r3, pc, #268	; (adr r3, 8008148 <__ieee754_rem_pio2+0x318>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	4604      	mov	r4, r0
 8008040:	460d      	mov	r5, r1
 8008042:	ec51 0b18 	vmov	r0, r1, d8
 8008046:	f7f8 facf 	bl	80005e8 <__aeabi_dmul>
 800804a:	4622      	mov	r2, r4
 800804c:	462b      	mov	r3, r5
 800804e:	f7f8 f913 	bl	8000278 <__aeabi_dsub>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	4604      	mov	r4, r0
 8008058:	460d      	mov	r5, r1
 800805a:	4640      	mov	r0, r8
 800805c:	4649      	mov	r1, r9
 800805e:	f7f8 f90b 	bl	8000278 <__aeabi_dsub>
 8008062:	9a03      	ldr	r2, [sp, #12]
 8008064:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b31      	cmp	r3, #49	; 0x31
 800806c:	dc24      	bgt.n	80080b8 <__ieee754_rem_pio2+0x288>
 800806e:	e9ca 0100 	strd	r0, r1, [sl]
 8008072:	4646      	mov	r6, r8
 8008074:	464f      	mov	r7, r9
 8008076:	e9da 8900 	ldrd	r8, r9, [sl]
 800807a:	4630      	mov	r0, r6
 800807c:	4642      	mov	r2, r8
 800807e:	464b      	mov	r3, r9
 8008080:	4639      	mov	r1, r7
 8008082:	f7f8 f8f9 	bl	8000278 <__aeabi_dsub>
 8008086:	462b      	mov	r3, r5
 8008088:	4622      	mov	r2, r4
 800808a:	f7f8 f8f5 	bl	8000278 <__aeabi_dsub>
 800808e:	9b02      	ldr	r3, [sp, #8]
 8008090:	2b00      	cmp	r3, #0
 8008092:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008096:	f6bf af0b 	bge.w	8007eb0 <__ieee754_rem_pio2+0x80>
 800809a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800809e:	f8ca 3004 	str.w	r3, [sl, #4]
 80080a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080a6:	f8ca 8000 	str.w	r8, [sl]
 80080aa:	f8ca 0008 	str.w	r0, [sl, #8]
 80080ae:	f8ca 300c 	str.w	r3, [sl, #12]
 80080b2:	f1cb 0b00 	rsb	fp, fp, #0
 80080b6:	e6fb      	b.n	8007eb0 <__ieee754_rem_pio2+0x80>
 80080b8:	a327      	add	r3, pc, #156	; (adr r3, 8008158 <__ieee754_rem_pio2+0x328>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	ec51 0b18 	vmov	r0, r1, d8
 80080c2:	f7f8 fa91 	bl	80005e8 <__aeabi_dmul>
 80080c6:	4604      	mov	r4, r0
 80080c8:	460d      	mov	r5, r1
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	4640      	mov	r0, r8
 80080d0:	4649      	mov	r1, r9
 80080d2:	f7f8 f8d1 	bl	8000278 <__aeabi_dsub>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4606      	mov	r6, r0
 80080dc:	460f      	mov	r7, r1
 80080de:	4640      	mov	r0, r8
 80080e0:	4649      	mov	r1, r9
 80080e2:	f7f8 f8c9 	bl	8000278 <__aeabi_dsub>
 80080e6:	4622      	mov	r2, r4
 80080e8:	462b      	mov	r3, r5
 80080ea:	f7f8 f8c5 	bl	8000278 <__aeabi_dsub>
 80080ee:	a31c      	add	r3, pc, #112	; (adr r3, 8008160 <__ieee754_rem_pio2+0x330>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	4604      	mov	r4, r0
 80080f6:	460d      	mov	r5, r1
 80080f8:	ec51 0b18 	vmov	r0, r1, d8
 80080fc:	f7f8 fa74 	bl	80005e8 <__aeabi_dmul>
 8008100:	4622      	mov	r2, r4
 8008102:	462b      	mov	r3, r5
 8008104:	f7f8 f8b8 	bl	8000278 <__aeabi_dsub>
 8008108:	4604      	mov	r4, r0
 800810a:	460d      	mov	r5, r1
 800810c:	e760      	b.n	8007fd0 <__ieee754_rem_pio2+0x1a0>
 800810e:	4b1c      	ldr	r3, [pc, #112]	; (8008180 <__ieee754_rem_pio2+0x350>)
 8008110:	4598      	cmp	r8, r3
 8008112:	dd37      	ble.n	8008184 <__ieee754_rem_pio2+0x354>
 8008114:	ee10 2a10 	vmov	r2, s0
 8008118:	462b      	mov	r3, r5
 800811a:	4620      	mov	r0, r4
 800811c:	4629      	mov	r1, r5
 800811e:	f7f8 f8ab 	bl	8000278 <__aeabi_dsub>
 8008122:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008126:	e9ca 0100 	strd	r0, r1, [sl]
 800812a:	e695      	b.n	8007e58 <__ieee754_rem_pio2+0x28>
 800812c:	f3af 8000 	nop.w
 8008130:	54400000 	.word	0x54400000
 8008134:	3ff921fb 	.word	0x3ff921fb
 8008138:	1a626331 	.word	0x1a626331
 800813c:	3dd0b461 	.word	0x3dd0b461
 8008140:	1a600000 	.word	0x1a600000
 8008144:	3dd0b461 	.word	0x3dd0b461
 8008148:	2e037073 	.word	0x2e037073
 800814c:	3ba3198a 	.word	0x3ba3198a
 8008150:	6dc9c883 	.word	0x6dc9c883
 8008154:	3fe45f30 	.word	0x3fe45f30
 8008158:	2e000000 	.word	0x2e000000
 800815c:	3ba3198a 	.word	0x3ba3198a
 8008160:	252049c1 	.word	0x252049c1
 8008164:	397b839a 	.word	0x397b839a
 8008168:	3fe921fb 	.word	0x3fe921fb
 800816c:	4002d97b 	.word	0x4002d97b
 8008170:	3ff921fb 	.word	0x3ff921fb
 8008174:	413921fb 	.word	0x413921fb
 8008178:	3fe00000 	.word	0x3fe00000
 800817c:	0800b788 	.word	0x0800b788
 8008180:	7fefffff 	.word	0x7fefffff
 8008184:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008188:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800818c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008190:	4620      	mov	r0, r4
 8008192:	460d      	mov	r5, r1
 8008194:	f7f8 fcd8 	bl	8000b48 <__aeabi_d2iz>
 8008198:	f7f8 f9bc 	bl	8000514 <__aeabi_i2d>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4620      	mov	r0, r4
 80081a2:	4629      	mov	r1, r5
 80081a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081a8:	f7f8 f866 	bl	8000278 <__aeabi_dsub>
 80081ac:	4b21      	ldr	r3, [pc, #132]	; (8008234 <__ieee754_rem_pio2+0x404>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	f7f8 fa1a 	bl	80005e8 <__aeabi_dmul>
 80081b4:	460d      	mov	r5, r1
 80081b6:	4604      	mov	r4, r0
 80081b8:	f7f8 fcc6 	bl	8000b48 <__aeabi_d2iz>
 80081bc:	f7f8 f9aa 	bl	8000514 <__aeabi_i2d>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4620      	mov	r0, r4
 80081c6:	4629      	mov	r1, r5
 80081c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081cc:	f7f8 f854 	bl	8000278 <__aeabi_dsub>
 80081d0:	4b18      	ldr	r3, [pc, #96]	; (8008234 <__ieee754_rem_pio2+0x404>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	f7f8 fa08 	bl	80005e8 <__aeabi_dmul>
 80081d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081dc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80081e0:	2703      	movs	r7, #3
 80081e2:	2400      	movs	r4, #0
 80081e4:	2500      	movs	r5, #0
 80081e6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80081ea:	4622      	mov	r2, r4
 80081ec:	462b      	mov	r3, r5
 80081ee:	46b9      	mov	r9, r7
 80081f0:	3f01      	subs	r7, #1
 80081f2:	f7f8 fc61 	bl	8000ab8 <__aeabi_dcmpeq>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d1f5      	bne.n	80081e6 <__ieee754_rem_pio2+0x3b6>
 80081fa:	4b0f      	ldr	r3, [pc, #60]	; (8008238 <__ieee754_rem_pio2+0x408>)
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	2302      	movs	r3, #2
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	4632      	mov	r2, r6
 8008204:	464b      	mov	r3, r9
 8008206:	4651      	mov	r1, sl
 8008208:	a804      	add	r0, sp, #16
 800820a:	f000 f819 	bl	8008240 <__kernel_rem_pio2>
 800820e:	9b02      	ldr	r3, [sp, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	4683      	mov	fp, r0
 8008214:	f6bf ae4c 	bge.w	8007eb0 <__ieee754_rem_pio2+0x80>
 8008218:	e9da 2100 	ldrd	r2, r1, [sl]
 800821c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008220:	e9ca 2300 	strd	r2, r3, [sl]
 8008224:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008228:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800822c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008230:	e73f      	b.n	80080b2 <__ieee754_rem_pio2+0x282>
 8008232:	bf00      	nop
 8008234:	41700000 	.word	0x41700000
 8008238:	0800b808 	.word	0x0800b808
 800823c:	00000000 	.word	0x00000000

08008240 <__kernel_rem_pio2>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	ed2d 8b02 	vpush	{d8}
 8008248:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800824c:	f112 0f14 	cmn.w	r2, #20
 8008250:	9306      	str	r3, [sp, #24]
 8008252:	9104      	str	r1, [sp, #16]
 8008254:	4bc2      	ldr	r3, [pc, #776]	; (8008560 <__kernel_rem_pio2+0x320>)
 8008256:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008258:	9009      	str	r0, [sp, #36]	; 0x24
 800825a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	9b06      	ldr	r3, [sp, #24]
 8008262:	f103 33ff 	add.w	r3, r3, #4294967295
 8008266:	bfa8      	it	ge
 8008268:	1ed4      	subge	r4, r2, #3
 800826a:	9305      	str	r3, [sp, #20]
 800826c:	bfb2      	itee	lt
 800826e:	2400      	movlt	r4, #0
 8008270:	2318      	movge	r3, #24
 8008272:	fb94 f4f3 	sdivge	r4, r4, r3
 8008276:	f06f 0317 	mvn.w	r3, #23
 800827a:	fb04 3303 	mla	r3, r4, r3, r3
 800827e:	eb03 0a02 	add.w	sl, r3, r2
 8008282:	9b00      	ldr	r3, [sp, #0]
 8008284:	9a05      	ldr	r2, [sp, #20]
 8008286:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008550 <__kernel_rem_pio2+0x310>
 800828a:	eb03 0802 	add.w	r8, r3, r2
 800828e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008290:	1aa7      	subs	r7, r4, r2
 8008292:	ae20      	add	r6, sp, #128	; 0x80
 8008294:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008298:	2500      	movs	r5, #0
 800829a:	4545      	cmp	r5, r8
 800829c:	dd13      	ble.n	80082c6 <__kernel_rem_pio2+0x86>
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	aa20      	add	r2, sp, #128	; 0x80
 80082a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80082a6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	9b00      	ldr	r3, [sp, #0]
 80082b0:	4598      	cmp	r8, r3
 80082b2:	dc31      	bgt.n	8008318 <__kernel_rem_pio2+0xd8>
 80082b4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008550 <__kernel_rem_pio2+0x310>
 80082b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80082bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082c0:	462f      	mov	r7, r5
 80082c2:	2600      	movs	r6, #0
 80082c4:	e01b      	b.n	80082fe <__kernel_rem_pio2+0xbe>
 80082c6:	42ef      	cmn	r7, r5
 80082c8:	d407      	bmi.n	80082da <__kernel_rem_pio2+0x9a>
 80082ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80082ce:	f7f8 f921 	bl	8000514 <__aeabi_i2d>
 80082d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80082d6:	3501      	adds	r5, #1
 80082d8:	e7df      	b.n	800829a <__kernel_rem_pio2+0x5a>
 80082da:	ec51 0b18 	vmov	r0, r1, d8
 80082de:	e7f8      	b.n	80082d2 <__kernel_rem_pio2+0x92>
 80082e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80082e8:	f7f8 f97e 	bl	80005e8 <__aeabi_dmul>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082f4:	f7f7 ffc2 	bl	800027c <__adddf3>
 80082f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082fc:	3601      	adds	r6, #1
 80082fe:	9b05      	ldr	r3, [sp, #20]
 8008300:	429e      	cmp	r6, r3
 8008302:	f1a7 0708 	sub.w	r7, r7, #8
 8008306:	ddeb      	ble.n	80082e0 <__kernel_rem_pio2+0xa0>
 8008308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800830c:	f108 0801 	add.w	r8, r8, #1
 8008310:	ecab 7b02 	vstmia	fp!, {d7}
 8008314:	3508      	adds	r5, #8
 8008316:	e7ca      	b.n	80082ae <__kernel_rem_pio2+0x6e>
 8008318:	9b00      	ldr	r3, [sp, #0]
 800831a:	aa0c      	add	r2, sp, #48	; 0x30
 800831c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008320:	930b      	str	r3, [sp, #44]	; 0x2c
 8008322:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008324:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008328:	9c00      	ldr	r4, [sp, #0]
 800832a:	930a      	str	r3, [sp, #40]	; 0x28
 800832c:	00e3      	lsls	r3, r4, #3
 800832e:	9308      	str	r3, [sp, #32]
 8008330:	ab98      	add	r3, sp, #608	; 0x260
 8008332:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008336:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800833a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800833e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008340:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008344:	46c3      	mov	fp, r8
 8008346:	46a1      	mov	r9, r4
 8008348:	f1b9 0f00 	cmp.w	r9, #0
 800834c:	f1a5 0508 	sub.w	r5, r5, #8
 8008350:	dc77      	bgt.n	8008442 <__kernel_rem_pio2+0x202>
 8008352:	ec47 6b10 	vmov	d0, r6, r7
 8008356:	4650      	mov	r0, sl
 8008358:	f000 fac2 	bl	80088e0 <scalbn>
 800835c:	ec57 6b10 	vmov	r6, r7, d0
 8008360:	2200      	movs	r2, #0
 8008362:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008366:	ee10 0a10 	vmov	r0, s0
 800836a:	4639      	mov	r1, r7
 800836c:	f7f8 f93c 	bl	80005e8 <__aeabi_dmul>
 8008370:	ec41 0b10 	vmov	d0, r0, r1
 8008374:	f000 fb34 	bl	80089e0 <floor>
 8008378:	4b7a      	ldr	r3, [pc, #488]	; (8008564 <__kernel_rem_pio2+0x324>)
 800837a:	ec51 0b10 	vmov	r0, r1, d0
 800837e:	2200      	movs	r2, #0
 8008380:	f7f8 f932 	bl	80005e8 <__aeabi_dmul>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4630      	mov	r0, r6
 800838a:	4639      	mov	r1, r7
 800838c:	f7f7 ff74 	bl	8000278 <__aeabi_dsub>
 8008390:	460f      	mov	r7, r1
 8008392:	4606      	mov	r6, r0
 8008394:	f7f8 fbd8 	bl	8000b48 <__aeabi_d2iz>
 8008398:	9002      	str	r0, [sp, #8]
 800839a:	f7f8 f8bb 	bl	8000514 <__aeabi_i2d>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4630      	mov	r0, r6
 80083a4:	4639      	mov	r1, r7
 80083a6:	f7f7 ff67 	bl	8000278 <__aeabi_dsub>
 80083aa:	f1ba 0f00 	cmp.w	sl, #0
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	dd6d      	ble.n	8008490 <__kernel_rem_pio2+0x250>
 80083b4:	1e61      	subs	r1, r4, #1
 80083b6:	ab0c      	add	r3, sp, #48	; 0x30
 80083b8:	9d02      	ldr	r5, [sp, #8]
 80083ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083be:	f1ca 0018 	rsb	r0, sl, #24
 80083c2:	fa43 f200 	asr.w	r2, r3, r0
 80083c6:	4415      	add	r5, r2
 80083c8:	4082      	lsls	r2, r0
 80083ca:	1a9b      	subs	r3, r3, r2
 80083cc:	aa0c      	add	r2, sp, #48	; 0x30
 80083ce:	9502      	str	r5, [sp, #8]
 80083d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80083d4:	f1ca 0217 	rsb	r2, sl, #23
 80083d8:	fa43 fb02 	asr.w	fp, r3, r2
 80083dc:	f1bb 0f00 	cmp.w	fp, #0
 80083e0:	dd65      	ble.n	80084ae <__kernel_rem_pio2+0x26e>
 80083e2:	9b02      	ldr	r3, [sp, #8]
 80083e4:	2200      	movs	r2, #0
 80083e6:	3301      	adds	r3, #1
 80083e8:	9302      	str	r3, [sp, #8]
 80083ea:	4615      	mov	r5, r2
 80083ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80083f0:	4294      	cmp	r4, r2
 80083f2:	f300 809f 	bgt.w	8008534 <__kernel_rem_pio2+0x2f4>
 80083f6:	f1ba 0f00 	cmp.w	sl, #0
 80083fa:	dd07      	ble.n	800840c <__kernel_rem_pio2+0x1cc>
 80083fc:	f1ba 0f01 	cmp.w	sl, #1
 8008400:	f000 80c1 	beq.w	8008586 <__kernel_rem_pio2+0x346>
 8008404:	f1ba 0f02 	cmp.w	sl, #2
 8008408:	f000 80c7 	beq.w	800859a <__kernel_rem_pio2+0x35a>
 800840c:	f1bb 0f02 	cmp.w	fp, #2
 8008410:	d14d      	bne.n	80084ae <__kernel_rem_pio2+0x26e>
 8008412:	4632      	mov	r2, r6
 8008414:	463b      	mov	r3, r7
 8008416:	4954      	ldr	r1, [pc, #336]	; (8008568 <__kernel_rem_pio2+0x328>)
 8008418:	2000      	movs	r0, #0
 800841a:	f7f7 ff2d 	bl	8000278 <__aeabi_dsub>
 800841e:	4606      	mov	r6, r0
 8008420:	460f      	mov	r7, r1
 8008422:	2d00      	cmp	r5, #0
 8008424:	d043      	beq.n	80084ae <__kernel_rem_pio2+0x26e>
 8008426:	4650      	mov	r0, sl
 8008428:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008558 <__kernel_rem_pio2+0x318>
 800842c:	f000 fa58 	bl	80088e0 <scalbn>
 8008430:	4630      	mov	r0, r6
 8008432:	4639      	mov	r1, r7
 8008434:	ec53 2b10 	vmov	r2, r3, d0
 8008438:	f7f7 ff1e 	bl	8000278 <__aeabi_dsub>
 800843c:	4606      	mov	r6, r0
 800843e:	460f      	mov	r7, r1
 8008440:	e035      	b.n	80084ae <__kernel_rem_pio2+0x26e>
 8008442:	4b4a      	ldr	r3, [pc, #296]	; (800856c <__kernel_rem_pio2+0x32c>)
 8008444:	2200      	movs	r2, #0
 8008446:	4630      	mov	r0, r6
 8008448:	4639      	mov	r1, r7
 800844a:	f7f8 f8cd 	bl	80005e8 <__aeabi_dmul>
 800844e:	f7f8 fb7b 	bl	8000b48 <__aeabi_d2iz>
 8008452:	f7f8 f85f 	bl	8000514 <__aeabi_i2d>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	ec43 2b18 	vmov	d8, r2, r3
 800845e:	4b44      	ldr	r3, [pc, #272]	; (8008570 <__kernel_rem_pio2+0x330>)
 8008460:	2200      	movs	r2, #0
 8008462:	f7f8 f8c1 	bl	80005e8 <__aeabi_dmul>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	4630      	mov	r0, r6
 800846c:	4639      	mov	r1, r7
 800846e:	f7f7 ff03 	bl	8000278 <__aeabi_dsub>
 8008472:	f7f8 fb69 	bl	8000b48 <__aeabi_d2iz>
 8008476:	e9d5 2300 	ldrd	r2, r3, [r5]
 800847a:	f84b 0b04 	str.w	r0, [fp], #4
 800847e:	ec51 0b18 	vmov	r0, r1, d8
 8008482:	f7f7 fefb 	bl	800027c <__adddf3>
 8008486:	f109 39ff 	add.w	r9, r9, #4294967295
 800848a:	4606      	mov	r6, r0
 800848c:	460f      	mov	r7, r1
 800848e:	e75b      	b.n	8008348 <__kernel_rem_pio2+0x108>
 8008490:	d106      	bne.n	80084a0 <__kernel_rem_pio2+0x260>
 8008492:	1e63      	subs	r3, r4, #1
 8008494:	aa0c      	add	r2, sp, #48	; 0x30
 8008496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800849a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800849e:	e79d      	b.n	80083dc <__kernel_rem_pio2+0x19c>
 80084a0:	4b34      	ldr	r3, [pc, #208]	; (8008574 <__kernel_rem_pio2+0x334>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	f7f8 fb26 	bl	8000af4 <__aeabi_dcmpge>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d140      	bne.n	800852e <__kernel_rem_pio2+0x2ee>
 80084ac:	4683      	mov	fp, r0
 80084ae:	2200      	movs	r2, #0
 80084b0:	2300      	movs	r3, #0
 80084b2:	4630      	mov	r0, r6
 80084b4:	4639      	mov	r1, r7
 80084b6:	f7f8 faff 	bl	8000ab8 <__aeabi_dcmpeq>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	f000 80c1 	beq.w	8008642 <__kernel_rem_pio2+0x402>
 80084c0:	1e65      	subs	r5, r4, #1
 80084c2:	462b      	mov	r3, r5
 80084c4:	2200      	movs	r2, #0
 80084c6:	9900      	ldr	r1, [sp, #0]
 80084c8:	428b      	cmp	r3, r1
 80084ca:	da6d      	bge.n	80085a8 <__kernel_rem_pio2+0x368>
 80084cc:	2a00      	cmp	r2, #0
 80084ce:	f000 808a 	beq.w	80085e6 <__kernel_rem_pio2+0x3a6>
 80084d2:	ab0c      	add	r3, sp, #48	; 0x30
 80084d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80084d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 80ae 	beq.w	800863e <__kernel_rem_pio2+0x3fe>
 80084e2:	4650      	mov	r0, sl
 80084e4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008558 <__kernel_rem_pio2+0x318>
 80084e8:	f000 f9fa 	bl	80088e0 <scalbn>
 80084ec:	1c6b      	adds	r3, r5, #1
 80084ee:	00da      	lsls	r2, r3, #3
 80084f0:	9205      	str	r2, [sp, #20]
 80084f2:	ec57 6b10 	vmov	r6, r7, d0
 80084f6:	aa70      	add	r2, sp, #448	; 0x1c0
 80084f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800856c <__kernel_rem_pio2+0x32c>
 80084fc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008500:	462c      	mov	r4, r5
 8008502:	f04f 0800 	mov.w	r8, #0
 8008506:	2c00      	cmp	r4, #0
 8008508:	f280 80d4 	bge.w	80086b4 <__kernel_rem_pio2+0x474>
 800850c:	462c      	mov	r4, r5
 800850e:	2c00      	cmp	r4, #0
 8008510:	f2c0 8102 	blt.w	8008718 <__kernel_rem_pio2+0x4d8>
 8008514:	4b18      	ldr	r3, [pc, #96]	; (8008578 <__kernel_rem_pio2+0x338>)
 8008516:	461e      	mov	r6, r3
 8008518:	ab70      	add	r3, sp, #448	; 0x1c0
 800851a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800851e:	1b2b      	subs	r3, r5, r4
 8008520:	f04f 0900 	mov.w	r9, #0
 8008524:	f04f 0a00 	mov.w	sl, #0
 8008528:	2700      	movs	r7, #0
 800852a:	9306      	str	r3, [sp, #24]
 800852c:	e0e6      	b.n	80086fc <__kernel_rem_pio2+0x4bc>
 800852e:	f04f 0b02 	mov.w	fp, #2
 8008532:	e756      	b.n	80083e2 <__kernel_rem_pio2+0x1a2>
 8008534:	f8d8 3000 	ldr.w	r3, [r8]
 8008538:	bb05      	cbnz	r5, 800857c <__kernel_rem_pio2+0x33c>
 800853a:	b123      	cbz	r3, 8008546 <__kernel_rem_pio2+0x306>
 800853c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008540:	f8c8 3000 	str.w	r3, [r8]
 8008544:	2301      	movs	r3, #1
 8008546:	3201      	adds	r2, #1
 8008548:	f108 0804 	add.w	r8, r8, #4
 800854c:	461d      	mov	r5, r3
 800854e:	e74f      	b.n	80083f0 <__kernel_rem_pio2+0x1b0>
	...
 800855c:	3ff00000 	.word	0x3ff00000
 8008560:	0800b950 	.word	0x0800b950
 8008564:	40200000 	.word	0x40200000
 8008568:	3ff00000 	.word	0x3ff00000
 800856c:	3e700000 	.word	0x3e700000
 8008570:	41700000 	.word	0x41700000
 8008574:	3fe00000 	.word	0x3fe00000
 8008578:	0800b910 	.word	0x0800b910
 800857c:	1acb      	subs	r3, r1, r3
 800857e:	f8c8 3000 	str.w	r3, [r8]
 8008582:	462b      	mov	r3, r5
 8008584:	e7df      	b.n	8008546 <__kernel_rem_pio2+0x306>
 8008586:	1e62      	subs	r2, r4, #1
 8008588:	ab0c      	add	r3, sp, #48	; 0x30
 800858a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008592:	a90c      	add	r1, sp, #48	; 0x30
 8008594:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008598:	e738      	b.n	800840c <__kernel_rem_pio2+0x1cc>
 800859a:	1e62      	subs	r2, r4, #1
 800859c:	ab0c      	add	r3, sp, #48	; 0x30
 800859e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80085a6:	e7f4      	b.n	8008592 <__kernel_rem_pio2+0x352>
 80085a8:	a90c      	add	r1, sp, #48	; 0x30
 80085aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	430a      	orrs	r2, r1
 80085b2:	e788      	b.n	80084c6 <__kernel_rem_pio2+0x286>
 80085b4:	3301      	adds	r3, #1
 80085b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80085ba:	2900      	cmp	r1, #0
 80085bc:	d0fa      	beq.n	80085b4 <__kernel_rem_pio2+0x374>
 80085be:	9a08      	ldr	r2, [sp, #32]
 80085c0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80085c4:	446a      	add	r2, sp
 80085c6:	3a98      	subs	r2, #152	; 0x98
 80085c8:	9208      	str	r2, [sp, #32]
 80085ca:	9a06      	ldr	r2, [sp, #24]
 80085cc:	a920      	add	r1, sp, #128	; 0x80
 80085ce:	18a2      	adds	r2, r4, r2
 80085d0:	18e3      	adds	r3, r4, r3
 80085d2:	f104 0801 	add.w	r8, r4, #1
 80085d6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80085da:	9302      	str	r3, [sp, #8]
 80085dc:	9b02      	ldr	r3, [sp, #8]
 80085de:	4543      	cmp	r3, r8
 80085e0:	da04      	bge.n	80085ec <__kernel_rem_pio2+0x3ac>
 80085e2:	461c      	mov	r4, r3
 80085e4:	e6a2      	b.n	800832c <__kernel_rem_pio2+0xec>
 80085e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085e8:	2301      	movs	r3, #1
 80085ea:	e7e4      	b.n	80085b6 <__kernel_rem_pio2+0x376>
 80085ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80085f2:	f7f7 ff8f 	bl	8000514 <__aeabi_i2d>
 80085f6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80085fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fc:	46ab      	mov	fp, r5
 80085fe:	461c      	mov	r4, r3
 8008600:	f04f 0900 	mov.w	r9, #0
 8008604:	2600      	movs	r6, #0
 8008606:	2700      	movs	r7, #0
 8008608:	9b05      	ldr	r3, [sp, #20]
 800860a:	4599      	cmp	r9, r3
 800860c:	dd06      	ble.n	800861c <__kernel_rem_pio2+0x3dc>
 800860e:	9b08      	ldr	r3, [sp, #32]
 8008610:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008614:	f108 0801 	add.w	r8, r8, #1
 8008618:	9308      	str	r3, [sp, #32]
 800861a:	e7df      	b.n	80085dc <__kernel_rem_pio2+0x39c>
 800861c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008620:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008624:	f7f7 ffe0 	bl	80005e8 <__aeabi_dmul>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4630      	mov	r0, r6
 800862e:	4639      	mov	r1, r7
 8008630:	f7f7 fe24 	bl	800027c <__adddf3>
 8008634:	f109 0901 	add.w	r9, r9, #1
 8008638:	4606      	mov	r6, r0
 800863a:	460f      	mov	r7, r1
 800863c:	e7e4      	b.n	8008608 <__kernel_rem_pio2+0x3c8>
 800863e:	3d01      	subs	r5, #1
 8008640:	e747      	b.n	80084d2 <__kernel_rem_pio2+0x292>
 8008642:	ec47 6b10 	vmov	d0, r6, r7
 8008646:	f1ca 0000 	rsb	r0, sl, #0
 800864a:	f000 f949 	bl	80088e0 <scalbn>
 800864e:	ec57 6b10 	vmov	r6, r7, d0
 8008652:	4ba0      	ldr	r3, [pc, #640]	; (80088d4 <__kernel_rem_pio2+0x694>)
 8008654:	ee10 0a10 	vmov	r0, s0
 8008658:	2200      	movs	r2, #0
 800865a:	4639      	mov	r1, r7
 800865c:	f7f8 fa4a 	bl	8000af4 <__aeabi_dcmpge>
 8008660:	b1f8      	cbz	r0, 80086a2 <__kernel_rem_pio2+0x462>
 8008662:	4b9d      	ldr	r3, [pc, #628]	; (80088d8 <__kernel_rem_pio2+0x698>)
 8008664:	2200      	movs	r2, #0
 8008666:	4630      	mov	r0, r6
 8008668:	4639      	mov	r1, r7
 800866a:	f7f7 ffbd 	bl	80005e8 <__aeabi_dmul>
 800866e:	f7f8 fa6b 	bl	8000b48 <__aeabi_d2iz>
 8008672:	4680      	mov	r8, r0
 8008674:	f7f7 ff4e 	bl	8000514 <__aeabi_i2d>
 8008678:	4b96      	ldr	r3, [pc, #600]	; (80088d4 <__kernel_rem_pio2+0x694>)
 800867a:	2200      	movs	r2, #0
 800867c:	f7f7 ffb4 	bl	80005e8 <__aeabi_dmul>
 8008680:	460b      	mov	r3, r1
 8008682:	4602      	mov	r2, r0
 8008684:	4639      	mov	r1, r7
 8008686:	4630      	mov	r0, r6
 8008688:	f7f7 fdf6 	bl	8000278 <__aeabi_dsub>
 800868c:	f7f8 fa5c 	bl	8000b48 <__aeabi_d2iz>
 8008690:	1c65      	adds	r5, r4, #1
 8008692:	ab0c      	add	r3, sp, #48	; 0x30
 8008694:	f10a 0a18 	add.w	sl, sl, #24
 8008698:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800869c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80086a0:	e71f      	b.n	80084e2 <__kernel_rem_pio2+0x2a2>
 80086a2:	4630      	mov	r0, r6
 80086a4:	4639      	mov	r1, r7
 80086a6:	f7f8 fa4f 	bl	8000b48 <__aeabi_d2iz>
 80086aa:	ab0c      	add	r3, sp, #48	; 0x30
 80086ac:	4625      	mov	r5, r4
 80086ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80086b2:	e716      	b.n	80084e2 <__kernel_rem_pio2+0x2a2>
 80086b4:	ab0c      	add	r3, sp, #48	; 0x30
 80086b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80086ba:	f7f7 ff2b 	bl	8000514 <__aeabi_i2d>
 80086be:	4632      	mov	r2, r6
 80086c0:	463b      	mov	r3, r7
 80086c2:	f7f7 ff91 	bl	80005e8 <__aeabi_dmul>
 80086c6:	4642      	mov	r2, r8
 80086c8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80086cc:	464b      	mov	r3, r9
 80086ce:	4630      	mov	r0, r6
 80086d0:	4639      	mov	r1, r7
 80086d2:	f7f7 ff89 	bl	80005e8 <__aeabi_dmul>
 80086d6:	3c01      	subs	r4, #1
 80086d8:	4606      	mov	r6, r0
 80086da:	460f      	mov	r7, r1
 80086dc:	e713      	b.n	8008506 <__kernel_rem_pio2+0x2c6>
 80086de:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80086e2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80086e6:	f7f7 ff7f 	bl	80005e8 <__aeabi_dmul>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	4648      	mov	r0, r9
 80086f0:	4651      	mov	r1, sl
 80086f2:	f7f7 fdc3 	bl	800027c <__adddf3>
 80086f6:	3701      	adds	r7, #1
 80086f8:	4681      	mov	r9, r0
 80086fa:	468a      	mov	sl, r1
 80086fc:	9b00      	ldr	r3, [sp, #0]
 80086fe:	429f      	cmp	r7, r3
 8008700:	dc02      	bgt.n	8008708 <__kernel_rem_pio2+0x4c8>
 8008702:	9b06      	ldr	r3, [sp, #24]
 8008704:	429f      	cmp	r7, r3
 8008706:	ddea      	ble.n	80086de <__kernel_rem_pio2+0x49e>
 8008708:	9a06      	ldr	r2, [sp, #24]
 800870a:	ab48      	add	r3, sp, #288	; 0x120
 800870c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008710:	e9c6 9a00 	strd	r9, sl, [r6]
 8008714:	3c01      	subs	r4, #1
 8008716:	e6fa      	b.n	800850e <__kernel_rem_pio2+0x2ce>
 8008718:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800871a:	2b02      	cmp	r3, #2
 800871c:	dc0b      	bgt.n	8008736 <__kernel_rem_pio2+0x4f6>
 800871e:	2b00      	cmp	r3, #0
 8008720:	dc39      	bgt.n	8008796 <__kernel_rem_pio2+0x556>
 8008722:	d05d      	beq.n	80087e0 <__kernel_rem_pio2+0x5a0>
 8008724:	9b02      	ldr	r3, [sp, #8]
 8008726:	f003 0007 	and.w	r0, r3, #7
 800872a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800872e:	ecbd 8b02 	vpop	{d8}
 8008732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008736:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008738:	2b03      	cmp	r3, #3
 800873a:	d1f3      	bne.n	8008724 <__kernel_rem_pio2+0x4e4>
 800873c:	9b05      	ldr	r3, [sp, #20]
 800873e:	9500      	str	r5, [sp, #0]
 8008740:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008744:	eb0d 0403 	add.w	r4, sp, r3
 8008748:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800874c:	46a2      	mov	sl, r4
 800874e:	9b00      	ldr	r3, [sp, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	f1aa 0a08 	sub.w	sl, sl, #8
 8008756:	dc69      	bgt.n	800882c <__kernel_rem_pio2+0x5ec>
 8008758:	46aa      	mov	sl, r5
 800875a:	f1ba 0f01 	cmp.w	sl, #1
 800875e:	f1a4 0408 	sub.w	r4, r4, #8
 8008762:	f300 8083 	bgt.w	800886c <__kernel_rem_pio2+0x62c>
 8008766:	9c05      	ldr	r4, [sp, #20]
 8008768:	ab48      	add	r3, sp, #288	; 0x120
 800876a:	441c      	add	r4, r3
 800876c:	2000      	movs	r0, #0
 800876e:	2100      	movs	r1, #0
 8008770:	2d01      	cmp	r5, #1
 8008772:	f300 809a 	bgt.w	80088aa <__kernel_rem_pio2+0x66a>
 8008776:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800877a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800877e:	f1bb 0f00 	cmp.w	fp, #0
 8008782:	f040 8098 	bne.w	80088b6 <__kernel_rem_pio2+0x676>
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	e9c3 7800 	strd	r7, r8, [r3]
 800878c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008790:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008794:	e7c6      	b.n	8008724 <__kernel_rem_pio2+0x4e4>
 8008796:	9e05      	ldr	r6, [sp, #20]
 8008798:	ab48      	add	r3, sp, #288	; 0x120
 800879a:	441e      	add	r6, r3
 800879c:	462c      	mov	r4, r5
 800879e:	2000      	movs	r0, #0
 80087a0:	2100      	movs	r1, #0
 80087a2:	2c00      	cmp	r4, #0
 80087a4:	da33      	bge.n	800880e <__kernel_rem_pio2+0x5ce>
 80087a6:	f1bb 0f00 	cmp.w	fp, #0
 80087aa:	d036      	beq.n	800881a <__kernel_rem_pio2+0x5da>
 80087ac:	4602      	mov	r2, r0
 80087ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087b2:	9c04      	ldr	r4, [sp, #16]
 80087b4:	e9c4 2300 	strd	r2, r3, [r4]
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80087c0:	f7f7 fd5a 	bl	8000278 <__aeabi_dsub>
 80087c4:	ae4a      	add	r6, sp, #296	; 0x128
 80087c6:	2401      	movs	r4, #1
 80087c8:	42a5      	cmp	r5, r4
 80087ca:	da29      	bge.n	8008820 <__kernel_rem_pio2+0x5e0>
 80087cc:	f1bb 0f00 	cmp.w	fp, #0
 80087d0:	d002      	beq.n	80087d8 <__kernel_rem_pio2+0x598>
 80087d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087d6:	4619      	mov	r1, r3
 80087d8:	9b04      	ldr	r3, [sp, #16]
 80087da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80087de:	e7a1      	b.n	8008724 <__kernel_rem_pio2+0x4e4>
 80087e0:	9c05      	ldr	r4, [sp, #20]
 80087e2:	ab48      	add	r3, sp, #288	; 0x120
 80087e4:	441c      	add	r4, r3
 80087e6:	2000      	movs	r0, #0
 80087e8:	2100      	movs	r1, #0
 80087ea:	2d00      	cmp	r5, #0
 80087ec:	da09      	bge.n	8008802 <__kernel_rem_pio2+0x5c2>
 80087ee:	f1bb 0f00 	cmp.w	fp, #0
 80087f2:	d002      	beq.n	80087fa <__kernel_rem_pio2+0x5ba>
 80087f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087f8:	4619      	mov	r1, r3
 80087fa:	9b04      	ldr	r3, [sp, #16]
 80087fc:	e9c3 0100 	strd	r0, r1, [r3]
 8008800:	e790      	b.n	8008724 <__kernel_rem_pio2+0x4e4>
 8008802:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008806:	f7f7 fd39 	bl	800027c <__adddf3>
 800880a:	3d01      	subs	r5, #1
 800880c:	e7ed      	b.n	80087ea <__kernel_rem_pio2+0x5aa>
 800880e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008812:	f7f7 fd33 	bl	800027c <__adddf3>
 8008816:	3c01      	subs	r4, #1
 8008818:	e7c3      	b.n	80087a2 <__kernel_rem_pio2+0x562>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	e7c8      	b.n	80087b2 <__kernel_rem_pio2+0x572>
 8008820:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008824:	f7f7 fd2a 	bl	800027c <__adddf3>
 8008828:	3401      	adds	r4, #1
 800882a:	e7cd      	b.n	80087c8 <__kernel_rem_pio2+0x588>
 800882c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008830:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008834:	9b00      	ldr	r3, [sp, #0]
 8008836:	3b01      	subs	r3, #1
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	4632      	mov	r2, r6
 800883c:	463b      	mov	r3, r7
 800883e:	4640      	mov	r0, r8
 8008840:	4649      	mov	r1, r9
 8008842:	f7f7 fd1b 	bl	800027c <__adddf3>
 8008846:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	4640      	mov	r0, r8
 8008850:	4649      	mov	r1, r9
 8008852:	f7f7 fd11 	bl	8000278 <__aeabi_dsub>
 8008856:	4632      	mov	r2, r6
 8008858:	463b      	mov	r3, r7
 800885a:	f7f7 fd0f 	bl	800027c <__adddf3>
 800885e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008862:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008866:	ed8a 7b00 	vstr	d7, [sl]
 800886a:	e770      	b.n	800874e <__kernel_rem_pio2+0x50e>
 800886c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008870:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008874:	4640      	mov	r0, r8
 8008876:	4632      	mov	r2, r6
 8008878:	463b      	mov	r3, r7
 800887a:	4649      	mov	r1, r9
 800887c:	f7f7 fcfe 	bl	800027c <__adddf3>
 8008880:	e9cd 0100 	strd	r0, r1, [sp]
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4640      	mov	r0, r8
 800888a:	4649      	mov	r1, r9
 800888c:	f7f7 fcf4 	bl	8000278 <__aeabi_dsub>
 8008890:	4632      	mov	r2, r6
 8008892:	463b      	mov	r3, r7
 8008894:	f7f7 fcf2 	bl	800027c <__adddf3>
 8008898:	ed9d 7b00 	vldr	d7, [sp]
 800889c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80088a0:	ed84 7b00 	vstr	d7, [r4]
 80088a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088a8:	e757      	b.n	800875a <__kernel_rem_pio2+0x51a>
 80088aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80088ae:	f7f7 fce5 	bl	800027c <__adddf3>
 80088b2:	3d01      	subs	r5, #1
 80088b4:	e75c      	b.n	8008770 <__kernel_rem_pio2+0x530>
 80088b6:	9b04      	ldr	r3, [sp, #16]
 80088b8:	9a04      	ldr	r2, [sp, #16]
 80088ba:	601f      	str	r7, [r3, #0]
 80088bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80088c0:	605c      	str	r4, [r3, #4]
 80088c2:	609d      	str	r5, [r3, #8]
 80088c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80088c8:	60d3      	str	r3, [r2, #12]
 80088ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088ce:	6110      	str	r0, [r2, #16]
 80088d0:	6153      	str	r3, [r2, #20]
 80088d2:	e727      	b.n	8008724 <__kernel_rem_pio2+0x4e4>
 80088d4:	41700000 	.word	0x41700000
 80088d8:	3e700000 	.word	0x3e700000
 80088dc:	00000000 	.word	0x00000000

080088e0 <scalbn>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	ec55 4b10 	vmov	r4, r5, d0
 80088e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80088ea:	4606      	mov	r6, r0
 80088ec:	462b      	mov	r3, r5
 80088ee:	b999      	cbnz	r1, 8008918 <scalbn+0x38>
 80088f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80088f4:	4323      	orrs	r3, r4
 80088f6:	d03f      	beq.n	8008978 <scalbn+0x98>
 80088f8:	4b35      	ldr	r3, [pc, #212]	; (80089d0 <scalbn+0xf0>)
 80088fa:	4629      	mov	r1, r5
 80088fc:	ee10 0a10 	vmov	r0, s0
 8008900:	2200      	movs	r2, #0
 8008902:	f7f7 fe71 	bl	80005e8 <__aeabi_dmul>
 8008906:	4b33      	ldr	r3, [pc, #204]	; (80089d4 <scalbn+0xf4>)
 8008908:	429e      	cmp	r6, r3
 800890a:	4604      	mov	r4, r0
 800890c:	460d      	mov	r5, r1
 800890e:	da10      	bge.n	8008932 <scalbn+0x52>
 8008910:	a327      	add	r3, pc, #156	; (adr r3, 80089b0 <scalbn+0xd0>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	e01f      	b.n	8008958 <scalbn+0x78>
 8008918:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800891c:	4291      	cmp	r1, r2
 800891e:	d10c      	bne.n	800893a <scalbn+0x5a>
 8008920:	ee10 2a10 	vmov	r2, s0
 8008924:	4620      	mov	r0, r4
 8008926:	4629      	mov	r1, r5
 8008928:	f7f7 fca8 	bl	800027c <__adddf3>
 800892c:	4604      	mov	r4, r0
 800892e:	460d      	mov	r5, r1
 8008930:	e022      	b.n	8008978 <scalbn+0x98>
 8008932:	460b      	mov	r3, r1
 8008934:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008938:	3936      	subs	r1, #54	; 0x36
 800893a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800893e:	4296      	cmp	r6, r2
 8008940:	dd0d      	ble.n	800895e <scalbn+0x7e>
 8008942:	2d00      	cmp	r5, #0
 8008944:	a11c      	add	r1, pc, #112	; (adr r1, 80089b8 <scalbn+0xd8>)
 8008946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800894a:	da02      	bge.n	8008952 <scalbn+0x72>
 800894c:	a11c      	add	r1, pc, #112	; (adr r1, 80089c0 <scalbn+0xe0>)
 800894e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008952:	a319      	add	r3, pc, #100	; (adr r3, 80089b8 <scalbn+0xd8>)
 8008954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008958:	f7f7 fe46 	bl	80005e8 <__aeabi_dmul>
 800895c:	e7e6      	b.n	800892c <scalbn+0x4c>
 800895e:	1872      	adds	r2, r6, r1
 8008960:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008964:	428a      	cmp	r2, r1
 8008966:	dcec      	bgt.n	8008942 <scalbn+0x62>
 8008968:	2a00      	cmp	r2, #0
 800896a:	dd08      	ble.n	800897e <scalbn+0x9e>
 800896c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008970:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008974:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008978:	ec45 4b10 	vmov	d0, r4, r5
 800897c:	bd70      	pop	{r4, r5, r6, pc}
 800897e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008982:	da08      	bge.n	8008996 <scalbn+0xb6>
 8008984:	2d00      	cmp	r5, #0
 8008986:	a10a      	add	r1, pc, #40	; (adr r1, 80089b0 <scalbn+0xd0>)
 8008988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800898c:	dac0      	bge.n	8008910 <scalbn+0x30>
 800898e:	a10e      	add	r1, pc, #56	; (adr r1, 80089c8 <scalbn+0xe8>)
 8008990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008994:	e7bc      	b.n	8008910 <scalbn+0x30>
 8008996:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800899a:	3236      	adds	r2, #54	; 0x36
 800899c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80089a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80089a4:	4620      	mov	r0, r4
 80089a6:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <scalbn+0xf8>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	e7d5      	b.n	8008958 <scalbn+0x78>
 80089ac:	f3af 8000 	nop.w
 80089b0:	c2f8f359 	.word	0xc2f8f359
 80089b4:	01a56e1f 	.word	0x01a56e1f
 80089b8:	8800759c 	.word	0x8800759c
 80089bc:	7e37e43c 	.word	0x7e37e43c
 80089c0:	8800759c 	.word	0x8800759c
 80089c4:	fe37e43c 	.word	0xfe37e43c
 80089c8:	c2f8f359 	.word	0xc2f8f359
 80089cc:	81a56e1f 	.word	0x81a56e1f
 80089d0:	43500000 	.word	0x43500000
 80089d4:	ffff3cb0 	.word	0xffff3cb0
 80089d8:	3c900000 	.word	0x3c900000
 80089dc:	00000000 	.word	0x00000000

080089e0 <floor>:
 80089e0:	ec51 0b10 	vmov	r0, r1, d0
 80089e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80089e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80089f0:	2e13      	cmp	r6, #19
 80089f2:	ee10 5a10 	vmov	r5, s0
 80089f6:	ee10 8a10 	vmov	r8, s0
 80089fa:	460c      	mov	r4, r1
 80089fc:	dc31      	bgt.n	8008a62 <floor+0x82>
 80089fe:	2e00      	cmp	r6, #0
 8008a00:	da14      	bge.n	8008a2c <floor+0x4c>
 8008a02:	a333      	add	r3, pc, #204	; (adr r3, 8008ad0 <floor+0xf0>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	f7f7 fc38 	bl	800027c <__adddf3>
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f7f8 f87a 	bl	8000b08 <__aeabi_dcmpgt>
 8008a14:	b138      	cbz	r0, 8008a26 <floor+0x46>
 8008a16:	2c00      	cmp	r4, #0
 8008a18:	da53      	bge.n	8008ac2 <floor+0xe2>
 8008a1a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008a1e:	4325      	orrs	r5, r4
 8008a20:	d052      	beq.n	8008ac8 <floor+0xe8>
 8008a22:	4c2d      	ldr	r4, [pc, #180]	; (8008ad8 <floor+0xf8>)
 8008a24:	2500      	movs	r5, #0
 8008a26:	4621      	mov	r1, r4
 8008a28:	4628      	mov	r0, r5
 8008a2a:	e024      	b.n	8008a76 <floor+0x96>
 8008a2c:	4f2b      	ldr	r7, [pc, #172]	; (8008adc <floor+0xfc>)
 8008a2e:	4137      	asrs	r7, r6
 8008a30:	ea01 0307 	and.w	r3, r1, r7
 8008a34:	4303      	orrs	r3, r0
 8008a36:	d01e      	beq.n	8008a76 <floor+0x96>
 8008a38:	a325      	add	r3, pc, #148	; (adr r3, 8008ad0 <floor+0xf0>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fc1d 	bl	800027c <__adddf3>
 8008a42:	2200      	movs	r2, #0
 8008a44:	2300      	movs	r3, #0
 8008a46:	f7f8 f85f 	bl	8000b08 <__aeabi_dcmpgt>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d0eb      	beq.n	8008a26 <floor+0x46>
 8008a4e:	2c00      	cmp	r4, #0
 8008a50:	bfbe      	ittt	lt
 8008a52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008a56:	4133      	asrlt	r3, r6
 8008a58:	18e4      	addlt	r4, r4, r3
 8008a5a:	ea24 0407 	bic.w	r4, r4, r7
 8008a5e:	2500      	movs	r5, #0
 8008a60:	e7e1      	b.n	8008a26 <floor+0x46>
 8008a62:	2e33      	cmp	r6, #51	; 0x33
 8008a64:	dd0b      	ble.n	8008a7e <floor+0x9e>
 8008a66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008a6a:	d104      	bne.n	8008a76 <floor+0x96>
 8008a6c:	ee10 2a10 	vmov	r2, s0
 8008a70:	460b      	mov	r3, r1
 8008a72:	f7f7 fc03 	bl	800027c <__adddf3>
 8008a76:	ec41 0b10 	vmov	d0, r0, r1
 8008a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a7e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008a82:	f04f 37ff 	mov.w	r7, #4294967295
 8008a86:	40df      	lsrs	r7, r3
 8008a88:	4238      	tst	r0, r7
 8008a8a:	d0f4      	beq.n	8008a76 <floor+0x96>
 8008a8c:	a310      	add	r3, pc, #64	; (adr r3, 8008ad0 <floor+0xf0>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	f7f7 fbf3 	bl	800027c <__adddf3>
 8008a96:	2200      	movs	r2, #0
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f7f8 f835 	bl	8000b08 <__aeabi_dcmpgt>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d0c1      	beq.n	8008a26 <floor+0x46>
 8008aa2:	2c00      	cmp	r4, #0
 8008aa4:	da0a      	bge.n	8008abc <floor+0xdc>
 8008aa6:	2e14      	cmp	r6, #20
 8008aa8:	d101      	bne.n	8008aae <floor+0xce>
 8008aaa:	3401      	adds	r4, #1
 8008aac:	e006      	b.n	8008abc <floor+0xdc>
 8008aae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	40b3      	lsls	r3, r6
 8008ab6:	441d      	add	r5, r3
 8008ab8:	45a8      	cmp	r8, r5
 8008aba:	d8f6      	bhi.n	8008aaa <floor+0xca>
 8008abc:	ea25 0507 	bic.w	r5, r5, r7
 8008ac0:	e7b1      	b.n	8008a26 <floor+0x46>
 8008ac2:	2500      	movs	r5, #0
 8008ac4:	462c      	mov	r4, r5
 8008ac6:	e7ae      	b.n	8008a26 <floor+0x46>
 8008ac8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008acc:	e7ab      	b.n	8008a26 <floor+0x46>
 8008ace:	bf00      	nop
 8008ad0:	8800759c 	.word	0x8800759c
 8008ad4:	7e37e43c 	.word	0x7e37e43c
 8008ad8:	bff00000 	.word	0xbff00000
 8008adc:	000fffff 	.word	0x000fffff

08008ae0 <sulp>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	460d      	mov	r5, r1
 8008ae6:	ec45 4b10 	vmov	d0, r4, r5
 8008aea:	4616      	mov	r6, r2
 8008aec:	f001 ff80 	bl	800a9f0 <__ulp>
 8008af0:	ec51 0b10 	vmov	r0, r1, d0
 8008af4:	b17e      	cbz	r6, 8008b16 <sulp+0x36>
 8008af6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008afa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dd09      	ble.n	8008b16 <sulp+0x36>
 8008b02:	051b      	lsls	r3, r3, #20
 8008b04:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008b08:	2400      	movs	r4, #0
 8008b0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008b0e:	4622      	mov	r2, r4
 8008b10:	462b      	mov	r3, r5
 8008b12:	f7f7 fd69 	bl	80005e8 <__aeabi_dmul>
 8008b16:	bd70      	pop	{r4, r5, r6, pc}

08008b18 <_strtod_l>:
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	ed2d 8b02 	vpush	{d8}
 8008b20:	b09b      	sub	sp, #108	; 0x6c
 8008b22:	4604      	mov	r4, r0
 8008b24:	9213      	str	r2, [sp, #76]	; 0x4c
 8008b26:	2200      	movs	r2, #0
 8008b28:	9216      	str	r2, [sp, #88]	; 0x58
 8008b2a:	460d      	mov	r5, r1
 8008b2c:	f04f 0800 	mov.w	r8, #0
 8008b30:	f04f 0900 	mov.w	r9, #0
 8008b34:	460a      	mov	r2, r1
 8008b36:	9215      	str	r2, [sp, #84]	; 0x54
 8008b38:	7811      	ldrb	r1, [r2, #0]
 8008b3a:	292b      	cmp	r1, #43	; 0x2b
 8008b3c:	d04c      	beq.n	8008bd8 <_strtod_l+0xc0>
 8008b3e:	d83a      	bhi.n	8008bb6 <_strtod_l+0x9e>
 8008b40:	290d      	cmp	r1, #13
 8008b42:	d834      	bhi.n	8008bae <_strtod_l+0x96>
 8008b44:	2908      	cmp	r1, #8
 8008b46:	d834      	bhi.n	8008bb2 <_strtod_l+0x9a>
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	d03d      	beq.n	8008bc8 <_strtod_l+0xb0>
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	920a      	str	r2, [sp, #40]	; 0x28
 8008b50:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008b52:	7832      	ldrb	r2, [r6, #0]
 8008b54:	2a30      	cmp	r2, #48	; 0x30
 8008b56:	f040 80b4 	bne.w	8008cc2 <_strtod_l+0x1aa>
 8008b5a:	7872      	ldrb	r2, [r6, #1]
 8008b5c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008b60:	2a58      	cmp	r2, #88	; 0x58
 8008b62:	d170      	bne.n	8008c46 <_strtod_l+0x12e>
 8008b64:	9302      	str	r3, [sp, #8]
 8008b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	ab16      	add	r3, sp, #88	; 0x58
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	4a8e      	ldr	r2, [pc, #568]	; (8008da8 <_strtod_l+0x290>)
 8008b70:	ab17      	add	r3, sp, #92	; 0x5c
 8008b72:	a915      	add	r1, sp, #84	; 0x54
 8008b74:	4620      	mov	r0, r4
 8008b76:	f001 f821 	bl	8009bbc <__gethex>
 8008b7a:	f010 070f 	ands.w	r7, r0, #15
 8008b7e:	4605      	mov	r5, r0
 8008b80:	d005      	beq.n	8008b8e <_strtod_l+0x76>
 8008b82:	2f06      	cmp	r7, #6
 8008b84:	d12a      	bne.n	8008bdc <_strtod_l+0xc4>
 8008b86:	3601      	adds	r6, #1
 8008b88:	2300      	movs	r3, #0
 8008b8a:	9615      	str	r6, [sp, #84]	; 0x54
 8008b8c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f040 857f 	bne.w	8009694 <_strtod_l+0xb7c>
 8008b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b98:	b1db      	cbz	r3, 8008bd2 <_strtod_l+0xba>
 8008b9a:	4642      	mov	r2, r8
 8008b9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ba0:	ec43 2b10 	vmov	d0, r2, r3
 8008ba4:	b01b      	add	sp, #108	; 0x6c
 8008ba6:	ecbd 8b02 	vpop	{d8}
 8008baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bae:	2920      	cmp	r1, #32
 8008bb0:	d1cc      	bne.n	8008b4c <_strtod_l+0x34>
 8008bb2:	3201      	adds	r2, #1
 8008bb4:	e7bf      	b.n	8008b36 <_strtod_l+0x1e>
 8008bb6:	292d      	cmp	r1, #45	; 0x2d
 8008bb8:	d1c8      	bne.n	8008b4c <_strtod_l+0x34>
 8008bba:	2101      	movs	r1, #1
 8008bbc:	910a      	str	r1, [sp, #40]	; 0x28
 8008bbe:	1c51      	adds	r1, r2, #1
 8008bc0:	9115      	str	r1, [sp, #84]	; 0x54
 8008bc2:	7852      	ldrb	r2, [r2, #1]
 8008bc4:	2a00      	cmp	r2, #0
 8008bc6:	d1c3      	bne.n	8008b50 <_strtod_l+0x38>
 8008bc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bca:	9515      	str	r5, [sp, #84]	; 0x54
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f040 855f 	bne.w	8009690 <_strtod_l+0xb78>
 8008bd2:	4642      	mov	r2, r8
 8008bd4:	464b      	mov	r3, r9
 8008bd6:	e7e3      	b.n	8008ba0 <_strtod_l+0x88>
 8008bd8:	2100      	movs	r1, #0
 8008bda:	e7ef      	b.n	8008bbc <_strtod_l+0xa4>
 8008bdc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008bde:	b13a      	cbz	r2, 8008bf0 <_strtod_l+0xd8>
 8008be0:	2135      	movs	r1, #53	; 0x35
 8008be2:	a818      	add	r0, sp, #96	; 0x60
 8008be4:	f002 f801 	bl	800abea <__copybits>
 8008be8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008bea:	4620      	mov	r0, r4
 8008bec:	f001 fbd4 	bl	800a398 <_Bfree>
 8008bf0:	3f01      	subs	r7, #1
 8008bf2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008bf4:	2f04      	cmp	r7, #4
 8008bf6:	d806      	bhi.n	8008c06 <_strtod_l+0xee>
 8008bf8:	e8df f007 	tbb	[pc, r7]
 8008bfc:	201d0314 	.word	0x201d0314
 8008c00:	14          	.byte	0x14
 8008c01:	00          	.byte	0x00
 8008c02:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008c06:	05e9      	lsls	r1, r5, #23
 8008c08:	bf48      	it	mi
 8008c0a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008c0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c12:	0d1b      	lsrs	r3, r3, #20
 8008c14:	051b      	lsls	r3, r3, #20
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1b9      	bne.n	8008b8e <_strtod_l+0x76>
 8008c1a:	f000 fedf 	bl	80099dc <__errno>
 8008c1e:	2322      	movs	r3, #34	; 0x22
 8008c20:	6003      	str	r3, [r0, #0]
 8008c22:	e7b4      	b.n	8008b8e <_strtod_l+0x76>
 8008c24:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008c28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008c2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008c30:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008c34:	e7e7      	b.n	8008c06 <_strtod_l+0xee>
 8008c36:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008db0 <_strtod_l+0x298>
 8008c3a:	e7e4      	b.n	8008c06 <_strtod_l+0xee>
 8008c3c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008c40:	f04f 38ff 	mov.w	r8, #4294967295
 8008c44:	e7df      	b.n	8008c06 <_strtod_l+0xee>
 8008c46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	9215      	str	r2, [sp, #84]	; 0x54
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	2b30      	cmp	r3, #48	; 0x30
 8008c50:	d0f9      	beq.n	8008c46 <_strtod_l+0x12e>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d09b      	beq.n	8008b8e <_strtod_l+0x76>
 8008c56:	2301      	movs	r3, #1
 8008c58:	f04f 0a00 	mov.w	sl, #0
 8008c5c:	9304      	str	r3, [sp, #16]
 8008c5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c60:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c62:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008c66:	46d3      	mov	fp, sl
 8008c68:	220a      	movs	r2, #10
 8008c6a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008c6c:	7806      	ldrb	r6, [r0, #0]
 8008c6e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008c72:	b2d9      	uxtb	r1, r3
 8008c74:	2909      	cmp	r1, #9
 8008c76:	d926      	bls.n	8008cc6 <_strtod_l+0x1ae>
 8008c78:	494c      	ldr	r1, [pc, #304]	; (8008dac <_strtod_l+0x294>)
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f000 fe55 	bl	800992a <strncmp>
 8008c80:	2800      	cmp	r0, #0
 8008c82:	d030      	beq.n	8008ce6 <_strtod_l+0x1ce>
 8008c84:	2000      	movs	r0, #0
 8008c86:	4632      	mov	r2, r6
 8008c88:	9005      	str	r0, [sp, #20]
 8008c8a:	465e      	mov	r6, fp
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2a65      	cmp	r2, #101	; 0x65
 8008c90:	d001      	beq.n	8008c96 <_strtod_l+0x17e>
 8008c92:	2a45      	cmp	r2, #69	; 0x45
 8008c94:	d113      	bne.n	8008cbe <_strtod_l+0x1a6>
 8008c96:	b91e      	cbnz	r6, 8008ca0 <_strtod_l+0x188>
 8008c98:	9a04      	ldr	r2, [sp, #16]
 8008c9a:	4302      	orrs	r2, r0
 8008c9c:	d094      	beq.n	8008bc8 <_strtod_l+0xb0>
 8008c9e:	2600      	movs	r6, #0
 8008ca0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008ca2:	1c6a      	adds	r2, r5, #1
 8008ca4:	9215      	str	r2, [sp, #84]	; 0x54
 8008ca6:	786a      	ldrb	r2, [r5, #1]
 8008ca8:	2a2b      	cmp	r2, #43	; 0x2b
 8008caa:	d074      	beq.n	8008d96 <_strtod_l+0x27e>
 8008cac:	2a2d      	cmp	r2, #45	; 0x2d
 8008cae:	d078      	beq.n	8008da2 <_strtod_l+0x28a>
 8008cb0:	f04f 0c00 	mov.w	ip, #0
 8008cb4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008cb8:	2909      	cmp	r1, #9
 8008cba:	d97f      	bls.n	8008dbc <_strtod_l+0x2a4>
 8008cbc:	9515      	str	r5, [sp, #84]	; 0x54
 8008cbe:	2700      	movs	r7, #0
 8008cc0:	e09e      	b.n	8008e00 <_strtod_l+0x2e8>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e7c8      	b.n	8008c58 <_strtod_l+0x140>
 8008cc6:	f1bb 0f08 	cmp.w	fp, #8
 8008cca:	bfd8      	it	le
 8008ccc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008cce:	f100 0001 	add.w	r0, r0, #1
 8008cd2:	bfda      	itte	le
 8008cd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008cd8:	9309      	strle	r3, [sp, #36]	; 0x24
 8008cda:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008cde:	f10b 0b01 	add.w	fp, fp, #1
 8008ce2:	9015      	str	r0, [sp, #84]	; 0x54
 8008ce4:	e7c1      	b.n	8008c6a <_strtod_l+0x152>
 8008ce6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	9215      	str	r2, [sp, #84]	; 0x54
 8008cec:	785a      	ldrb	r2, [r3, #1]
 8008cee:	f1bb 0f00 	cmp.w	fp, #0
 8008cf2:	d037      	beq.n	8008d64 <_strtod_l+0x24c>
 8008cf4:	9005      	str	r0, [sp, #20]
 8008cf6:	465e      	mov	r6, fp
 8008cf8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008cfc:	2b09      	cmp	r3, #9
 8008cfe:	d912      	bls.n	8008d26 <_strtod_l+0x20e>
 8008d00:	2301      	movs	r3, #1
 8008d02:	e7c4      	b.n	8008c8e <_strtod_l+0x176>
 8008d04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	9215      	str	r2, [sp, #84]	; 0x54
 8008d0a:	785a      	ldrb	r2, [r3, #1]
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	2a30      	cmp	r2, #48	; 0x30
 8008d10:	d0f8      	beq.n	8008d04 <_strtod_l+0x1ec>
 8008d12:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008d16:	2b08      	cmp	r3, #8
 8008d18:	f200 84c1 	bhi.w	800969e <_strtod_l+0xb86>
 8008d1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d1e:	9005      	str	r0, [sp, #20]
 8008d20:	2000      	movs	r0, #0
 8008d22:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d24:	4606      	mov	r6, r0
 8008d26:	3a30      	subs	r2, #48	; 0x30
 8008d28:	f100 0301 	add.w	r3, r0, #1
 8008d2c:	d014      	beq.n	8008d58 <_strtod_l+0x240>
 8008d2e:	9905      	ldr	r1, [sp, #20]
 8008d30:	4419      	add	r1, r3
 8008d32:	9105      	str	r1, [sp, #20]
 8008d34:	4633      	mov	r3, r6
 8008d36:	eb00 0c06 	add.w	ip, r0, r6
 8008d3a:	210a      	movs	r1, #10
 8008d3c:	4563      	cmp	r3, ip
 8008d3e:	d113      	bne.n	8008d68 <_strtod_l+0x250>
 8008d40:	1833      	adds	r3, r6, r0
 8008d42:	2b08      	cmp	r3, #8
 8008d44:	f106 0601 	add.w	r6, r6, #1
 8008d48:	4406      	add	r6, r0
 8008d4a:	dc1a      	bgt.n	8008d82 <_strtod_l+0x26a>
 8008d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d4e:	230a      	movs	r3, #10
 8008d50:	fb03 2301 	mla	r3, r3, r1, r2
 8008d54:	9309      	str	r3, [sp, #36]	; 0x24
 8008d56:	2300      	movs	r3, #0
 8008d58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d5a:	1c51      	adds	r1, r2, #1
 8008d5c:	9115      	str	r1, [sp, #84]	; 0x54
 8008d5e:	7852      	ldrb	r2, [r2, #1]
 8008d60:	4618      	mov	r0, r3
 8008d62:	e7c9      	b.n	8008cf8 <_strtod_l+0x1e0>
 8008d64:	4658      	mov	r0, fp
 8008d66:	e7d2      	b.n	8008d0e <_strtod_l+0x1f6>
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	f103 0301 	add.w	r3, r3, #1
 8008d6e:	dc03      	bgt.n	8008d78 <_strtod_l+0x260>
 8008d70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008d72:	434f      	muls	r7, r1
 8008d74:	9709      	str	r7, [sp, #36]	; 0x24
 8008d76:	e7e1      	b.n	8008d3c <_strtod_l+0x224>
 8008d78:	2b10      	cmp	r3, #16
 8008d7a:	bfd8      	it	le
 8008d7c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008d80:	e7dc      	b.n	8008d3c <_strtod_l+0x224>
 8008d82:	2e10      	cmp	r6, #16
 8008d84:	bfdc      	itt	le
 8008d86:	230a      	movle	r3, #10
 8008d88:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008d8c:	e7e3      	b.n	8008d56 <_strtod_l+0x23e>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9305      	str	r3, [sp, #20]
 8008d92:	2301      	movs	r3, #1
 8008d94:	e780      	b.n	8008c98 <_strtod_l+0x180>
 8008d96:	f04f 0c00 	mov.w	ip, #0
 8008d9a:	1caa      	adds	r2, r5, #2
 8008d9c:	9215      	str	r2, [sp, #84]	; 0x54
 8008d9e:	78aa      	ldrb	r2, [r5, #2]
 8008da0:	e788      	b.n	8008cb4 <_strtod_l+0x19c>
 8008da2:	f04f 0c01 	mov.w	ip, #1
 8008da6:	e7f8      	b.n	8008d9a <_strtod_l+0x282>
 8008da8:	0800b970 	.word	0x0800b970
 8008dac:	0800b960 	.word	0x0800b960
 8008db0:	7ff00000 	.word	0x7ff00000
 8008db4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008db6:	1c51      	adds	r1, r2, #1
 8008db8:	9115      	str	r1, [sp, #84]	; 0x54
 8008dba:	7852      	ldrb	r2, [r2, #1]
 8008dbc:	2a30      	cmp	r2, #48	; 0x30
 8008dbe:	d0f9      	beq.n	8008db4 <_strtod_l+0x29c>
 8008dc0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008dc4:	2908      	cmp	r1, #8
 8008dc6:	f63f af7a 	bhi.w	8008cbe <_strtod_l+0x1a6>
 8008dca:	3a30      	subs	r2, #48	; 0x30
 8008dcc:	9208      	str	r2, [sp, #32]
 8008dce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008dd0:	920c      	str	r2, [sp, #48]	; 0x30
 8008dd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008dd4:	1c57      	adds	r7, r2, #1
 8008dd6:	9715      	str	r7, [sp, #84]	; 0x54
 8008dd8:	7852      	ldrb	r2, [r2, #1]
 8008dda:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008dde:	f1be 0f09 	cmp.w	lr, #9
 8008de2:	d938      	bls.n	8008e56 <_strtod_l+0x33e>
 8008de4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008de6:	1a7f      	subs	r7, r7, r1
 8008de8:	2f08      	cmp	r7, #8
 8008dea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008dee:	dc03      	bgt.n	8008df8 <_strtod_l+0x2e0>
 8008df0:	9908      	ldr	r1, [sp, #32]
 8008df2:	428f      	cmp	r7, r1
 8008df4:	bfa8      	it	ge
 8008df6:	460f      	movge	r7, r1
 8008df8:	f1bc 0f00 	cmp.w	ip, #0
 8008dfc:	d000      	beq.n	8008e00 <_strtod_l+0x2e8>
 8008dfe:	427f      	negs	r7, r7
 8008e00:	2e00      	cmp	r6, #0
 8008e02:	d14f      	bne.n	8008ea4 <_strtod_l+0x38c>
 8008e04:	9904      	ldr	r1, [sp, #16]
 8008e06:	4301      	orrs	r1, r0
 8008e08:	f47f aec1 	bne.w	8008b8e <_strtod_l+0x76>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f47f aedb 	bne.w	8008bc8 <_strtod_l+0xb0>
 8008e12:	2a69      	cmp	r2, #105	; 0x69
 8008e14:	d029      	beq.n	8008e6a <_strtod_l+0x352>
 8008e16:	dc26      	bgt.n	8008e66 <_strtod_l+0x34e>
 8008e18:	2a49      	cmp	r2, #73	; 0x49
 8008e1a:	d026      	beq.n	8008e6a <_strtod_l+0x352>
 8008e1c:	2a4e      	cmp	r2, #78	; 0x4e
 8008e1e:	f47f aed3 	bne.w	8008bc8 <_strtod_l+0xb0>
 8008e22:	499b      	ldr	r1, [pc, #620]	; (8009090 <_strtod_l+0x578>)
 8008e24:	a815      	add	r0, sp, #84	; 0x54
 8008e26:	f001 f909 	bl	800a03c <__match>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	f43f aecc 	beq.w	8008bc8 <_strtod_l+0xb0>
 8008e30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b28      	cmp	r3, #40	; 0x28
 8008e36:	d12f      	bne.n	8008e98 <_strtod_l+0x380>
 8008e38:	4996      	ldr	r1, [pc, #600]	; (8009094 <_strtod_l+0x57c>)
 8008e3a:	aa18      	add	r2, sp, #96	; 0x60
 8008e3c:	a815      	add	r0, sp, #84	; 0x54
 8008e3e:	f001 f911 	bl	800a064 <__hexnan>
 8008e42:	2805      	cmp	r0, #5
 8008e44:	d128      	bne.n	8008e98 <_strtod_l+0x380>
 8008e46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e4c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008e50:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008e54:	e69b      	b.n	8008b8e <_strtod_l+0x76>
 8008e56:	9f08      	ldr	r7, [sp, #32]
 8008e58:	210a      	movs	r1, #10
 8008e5a:	fb01 2107 	mla	r1, r1, r7, r2
 8008e5e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008e62:	9208      	str	r2, [sp, #32]
 8008e64:	e7b5      	b.n	8008dd2 <_strtod_l+0x2ba>
 8008e66:	2a6e      	cmp	r2, #110	; 0x6e
 8008e68:	e7d9      	b.n	8008e1e <_strtod_l+0x306>
 8008e6a:	498b      	ldr	r1, [pc, #556]	; (8009098 <_strtod_l+0x580>)
 8008e6c:	a815      	add	r0, sp, #84	; 0x54
 8008e6e:	f001 f8e5 	bl	800a03c <__match>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	f43f aea8 	beq.w	8008bc8 <_strtod_l+0xb0>
 8008e78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e7a:	4988      	ldr	r1, [pc, #544]	; (800909c <_strtod_l+0x584>)
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	a815      	add	r0, sp, #84	; 0x54
 8008e80:	9315      	str	r3, [sp, #84]	; 0x54
 8008e82:	f001 f8db 	bl	800a03c <__match>
 8008e86:	b910      	cbnz	r0, 8008e8e <_strtod_l+0x376>
 8008e88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	9315      	str	r3, [sp, #84]	; 0x54
 8008e8e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80090ac <_strtod_l+0x594>
 8008e92:	f04f 0800 	mov.w	r8, #0
 8008e96:	e67a      	b.n	8008b8e <_strtod_l+0x76>
 8008e98:	4881      	ldr	r0, [pc, #516]	; (80090a0 <_strtod_l+0x588>)
 8008e9a:	f7fe fb49 	bl	8007530 <nan>
 8008e9e:	ec59 8b10 	vmov	r8, r9, d0
 8008ea2:	e674      	b.n	8008b8e <_strtod_l+0x76>
 8008ea4:	9b05      	ldr	r3, [sp, #20]
 8008ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ea8:	1afb      	subs	r3, r7, r3
 8008eaa:	f1bb 0f00 	cmp.w	fp, #0
 8008eae:	bf08      	it	eq
 8008eb0:	46b3      	moveq	fp, r6
 8008eb2:	2e10      	cmp	r6, #16
 8008eb4:	9308      	str	r3, [sp, #32]
 8008eb6:	4635      	mov	r5, r6
 8008eb8:	bfa8      	it	ge
 8008eba:	2510      	movge	r5, #16
 8008ebc:	f7f7 fb1a 	bl	80004f4 <__aeabi_ui2d>
 8008ec0:	2e09      	cmp	r6, #9
 8008ec2:	4680      	mov	r8, r0
 8008ec4:	4689      	mov	r9, r1
 8008ec6:	dd13      	ble.n	8008ef0 <_strtod_l+0x3d8>
 8008ec8:	4b76      	ldr	r3, [pc, #472]	; (80090a4 <_strtod_l+0x58c>)
 8008eca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008ece:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008ed2:	f7f7 fb89 	bl	80005e8 <__aeabi_dmul>
 8008ed6:	4680      	mov	r8, r0
 8008ed8:	4650      	mov	r0, sl
 8008eda:	4689      	mov	r9, r1
 8008edc:	f7f7 fb0a 	bl	80004f4 <__aeabi_ui2d>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	f7f7 f9c8 	bl	800027c <__adddf3>
 8008eec:	4680      	mov	r8, r0
 8008eee:	4689      	mov	r9, r1
 8008ef0:	2e0f      	cmp	r6, #15
 8008ef2:	dc38      	bgt.n	8008f66 <_strtod_l+0x44e>
 8008ef4:	9b08      	ldr	r3, [sp, #32]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f43f ae49 	beq.w	8008b8e <_strtod_l+0x76>
 8008efc:	dd24      	ble.n	8008f48 <_strtod_l+0x430>
 8008efe:	2b16      	cmp	r3, #22
 8008f00:	dc0b      	bgt.n	8008f1a <_strtod_l+0x402>
 8008f02:	4968      	ldr	r1, [pc, #416]	; (80090a4 <_strtod_l+0x58c>)
 8008f04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f0c:	4642      	mov	r2, r8
 8008f0e:	464b      	mov	r3, r9
 8008f10:	f7f7 fb6a 	bl	80005e8 <__aeabi_dmul>
 8008f14:	4680      	mov	r8, r0
 8008f16:	4689      	mov	r9, r1
 8008f18:	e639      	b.n	8008b8e <_strtod_l+0x76>
 8008f1a:	9a08      	ldr	r2, [sp, #32]
 8008f1c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008f20:	4293      	cmp	r3, r2
 8008f22:	db20      	blt.n	8008f66 <_strtod_l+0x44e>
 8008f24:	4c5f      	ldr	r4, [pc, #380]	; (80090a4 <_strtod_l+0x58c>)
 8008f26:	f1c6 060f 	rsb	r6, r6, #15
 8008f2a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008f2e:	4642      	mov	r2, r8
 8008f30:	464b      	mov	r3, r9
 8008f32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f36:	f7f7 fb57 	bl	80005e8 <__aeabi_dmul>
 8008f3a:	9b08      	ldr	r3, [sp, #32]
 8008f3c:	1b9e      	subs	r6, r3, r6
 8008f3e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008f42:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f46:	e7e3      	b.n	8008f10 <_strtod_l+0x3f8>
 8008f48:	9b08      	ldr	r3, [sp, #32]
 8008f4a:	3316      	adds	r3, #22
 8008f4c:	db0b      	blt.n	8008f66 <_strtod_l+0x44e>
 8008f4e:	9b05      	ldr	r3, [sp, #20]
 8008f50:	1bdf      	subs	r7, r3, r7
 8008f52:	4b54      	ldr	r3, [pc, #336]	; (80090a4 <_strtod_l+0x58c>)
 8008f54:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	4649      	mov	r1, r9
 8008f60:	f7f7 fc6c 	bl	800083c <__aeabi_ddiv>
 8008f64:	e7d6      	b.n	8008f14 <_strtod_l+0x3fc>
 8008f66:	9b08      	ldr	r3, [sp, #32]
 8008f68:	1b75      	subs	r5, r6, r5
 8008f6a:	441d      	add	r5, r3
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	dd70      	ble.n	8009052 <_strtod_l+0x53a>
 8008f70:	f015 030f 	ands.w	r3, r5, #15
 8008f74:	d00a      	beq.n	8008f8c <_strtod_l+0x474>
 8008f76:	494b      	ldr	r1, [pc, #300]	; (80090a4 <_strtod_l+0x58c>)
 8008f78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f7c:	4642      	mov	r2, r8
 8008f7e:	464b      	mov	r3, r9
 8008f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f84:	f7f7 fb30 	bl	80005e8 <__aeabi_dmul>
 8008f88:	4680      	mov	r8, r0
 8008f8a:	4689      	mov	r9, r1
 8008f8c:	f035 050f 	bics.w	r5, r5, #15
 8008f90:	d04d      	beq.n	800902e <_strtod_l+0x516>
 8008f92:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008f96:	dd22      	ble.n	8008fde <_strtod_l+0x4c6>
 8008f98:	2500      	movs	r5, #0
 8008f9a:	46ab      	mov	fp, r5
 8008f9c:	9509      	str	r5, [sp, #36]	; 0x24
 8008f9e:	9505      	str	r5, [sp, #20]
 8008fa0:	2322      	movs	r3, #34	; 0x22
 8008fa2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80090ac <_strtod_l+0x594>
 8008fa6:	6023      	str	r3, [r4, #0]
 8008fa8:	f04f 0800 	mov.w	r8, #0
 8008fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f43f aded 	beq.w	8008b8e <_strtod_l+0x76>
 8008fb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f001 f9ee 	bl	800a398 <_Bfree>
 8008fbc:	9905      	ldr	r1, [sp, #20]
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f001 f9ea 	bl	800a398 <_Bfree>
 8008fc4:	4659      	mov	r1, fp
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f001 f9e6 	bl	800a398 <_Bfree>
 8008fcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f001 f9e2 	bl	800a398 <_Bfree>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f001 f9de 	bl	800a398 <_Bfree>
 8008fdc:	e5d7      	b.n	8008b8e <_strtod_l+0x76>
 8008fde:	4b32      	ldr	r3, [pc, #200]	; (80090a8 <_strtod_l+0x590>)
 8008fe0:	9304      	str	r3, [sp, #16]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	112d      	asrs	r5, r5, #4
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	4649      	mov	r1, r9
 8008fea:	469a      	mov	sl, r3
 8008fec:	2d01      	cmp	r5, #1
 8008fee:	dc21      	bgt.n	8009034 <_strtod_l+0x51c>
 8008ff0:	b10b      	cbz	r3, 8008ff6 <_strtod_l+0x4de>
 8008ff2:	4680      	mov	r8, r0
 8008ff4:	4689      	mov	r9, r1
 8008ff6:	492c      	ldr	r1, [pc, #176]	; (80090a8 <_strtod_l+0x590>)
 8008ff8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008ffc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009000:	4642      	mov	r2, r8
 8009002:	464b      	mov	r3, r9
 8009004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009008:	f7f7 faee 	bl	80005e8 <__aeabi_dmul>
 800900c:	4b27      	ldr	r3, [pc, #156]	; (80090ac <_strtod_l+0x594>)
 800900e:	460a      	mov	r2, r1
 8009010:	400b      	ands	r3, r1
 8009012:	4927      	ldr	r1, [pc, #156]	; (80090b0 <_strtod_l+0x598>)
 8009014:	428b      	cmp	r3, r1
 8009016:	4680      	mov	r8, r0
 8009018:	d8be      	bhi.n	8008f98 <_strtod_l+0x480>
 800901a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800901e:	428b      	cmp	r3, r1
 8009020:	bf86      	itte	hi
 8009022:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80090b4 <_strtod_l+0x59c>
 8009026:	f04f 38ff 	movhi.w	r8, #4294967295
 800902a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800902e:	2300      	movs	r3, #0
 8009030:	9304      	str	r3, [sp, #16]
 8009032:	e07b      	b.n	800912c <_strtod_l+0x614>
 8009034:	07ea      	lsls	r2, r5, #31
 8009036:	d505      	bpl.n	8009044 <_strtod_l+0x52c>
 8009038:	9b04      	ldr	r3, [sp, #16]
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	f7f7 fad3 	bl	80005e8 <__aeabi_dmul>
 8009042:	2301      	movs	r3, #1
 8009044:	9a04      	ldr	r2, [sp, #16]
 8009046:	3208      	adds	r2, #8
 8009048:	f10a 0a01 	add.w	sl, sl, #1
 800904c:	106d      	asrs	r5, r5, #1
 800904e:	9204      	str	r2, [sp, #16]
 8009050:	e7cc      	b.n	8008fec <_strtod_l+0x4d4>
 8009052:	d0ec      	beq.n	800902e <_strtod_l+0x516>
 8009054:	426d      	negs	r5, r5
 8009056:	f015 020f 	ands.w	r2, r5, #15
 800905a:	d00a      	beq.n	8009072 <_strtod_l+0x55a>
 800905c:	4b11      	ldr	r3, [pc, #68]	; (80090a4 <_strtod_l+0x58c>)
 800905e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009062:	4640      	mov	r0, r8
 8009064:	4649      	mov	r1, r9
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	f7f7 fbe7 	bl	800083c <__aeabi_ddiv>
 800906e:	4680      	mov	r8, r0
 8009070:	4689      	mov	r9, r1
 8009072:	112d      	asrs	r5, r5, #4
 8009074:	d0db      	beq.n	800902e <_strtod_l+0x516>
 8009076:	2d1f      	cmp	r5, #31
 8009078:	dd1e      	ble.n	80090b8 <_strtod_l+0x5a0>
 800907a:	2500      	movs	r5, #0
 800907c:	46ab      	mov	fp, r5
 800907e:	9509      	str	r5, [sp, #36]	; 0x24
 8009080:	9505      	str	r5, [sp, #20]
 8009082:	2322      	movs	r3, #34	; 0x22
 8009084:	f04f 0800 	mov.w	r8, #0
 8009088:	f04f 0900 	mov.w	r9, #0
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	e78d      	b.n	8008fac <_strtod_l+0x494>
 8009090:	0800b96b 	.word	0x0800b96b
 8009094:	0800b984 	.word	0x0800b984
 8009098:	0800b962 	.word	0x0800b962
 800909c:	0800b965 	.word	0x0800b965
 80090a0:	0800bce8 	.word	0x0800bce8
 80090a4:	0800bad8 	.word	0x0800bad8
 80090a8:	0800bab0 	.word	0x0800bab0
 80090ac:	7ff00000 	.word	0x7ff00000
 80090b0:	7ca00000 	.word	0x7ca00000
 80090b4:	7fefffff 	.word	0x7fefffff
 80090b8:	f015 0310 	ands.w	r3, r5, #16
 80090bc:	bf18      	it	ne
 80090be:	236a      	movne	r3, #106	; 0x6a
 80090c0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009464 <_strtod_l+0x94c>
 80090c4:	9304      	str	r3, [sp, #16]
 80090c6:	4640      	mov	r0, r8
 80090c8:	4649      	mov	r1, r9
 80090ca:	2300      	movs	r3, #0
 80090cc:	07ea      	lsls	r2, r5, #31
 80090ce:	d504      	bpl.n	80090da <_strtod_l+0x5c2>
 80090d0:	e9da 2300 	ldrd	r2, r3, [sl]
 80090d4:	f7f7 fa88 	bl	80005e8 <__aeabi_dmul>
 80090d8:	2301      	movs	r3, #1
 80090da:	106d      	asrs	r5, r5, #1
 80090dc:	f10a 0a08 	add.w	sl, sl, #8
 80090e0:	d1f4      	bne.n	80090cc <_strtod_l+0x5b4>
 80090e2:	b10b      	cbz	r3, 80090e8 <_strtod_l+0x5d0>
 80090e4:	4680      	mov	r8, r0
 80090e6:	4689      	mov	r9, r1
 80090e8:	9b04      	ldr	r3, [sp, #16]
 80090ea:	b1bb      	cbz	r3, 800911c <_strtod_l+0x604>
 80090ec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80090f0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	4649      	mov	r1, r9
 80090f8:	dd10      	ble.n	800911c <_strtod_l+0x604>
 80090fa:	2b1f      	cmp	r3, #31
 80090fc:	f340 811e 	ble.w	800933c <_strtod_l+0x824>
 8009100:	2b34      	cmp	r3, #52	; 0x34
 8009102:	bfde      	ittt	le
 8009104:	f04f 33ff 	movle.w	r3, #4294967295
 8009108:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800910c:	4093      	lslle	r3, r2
 800910e:	f04f 0800 	mov.w	r8, #0
 8009112:	bfcc      	ite	gt
 8009114:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009118:	ea03 0901 	andle.w	r9, r3, r1
 800911c:	2200      	movs	r2, #0
 800911e:	2300      	movs	r3, #0
 8009120:	4640      	mov	r0, r8
 8009122:	4649      	mov	r1, r9
 8009124:	f7f7 fcc8 	bl	8000ab8 <__aeabi_dcmpeq>
 8009128:	2800      	cmp	r0, #0
 800912a:	d1a6      	bne.n	800907a <_strtod_l+0x562>
 800912c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009132:	4633      	mov	r3, r6
 8009134:	465a      	mov	r2, fp
 8009136:	4620      	mov	r0, r4
 8009138:	f001 f996 	bl	800a468 <__s2b>
 800913c:	9009      	str	r0, [sp, #36]	; 0x24
 800913e:	2800      	cmp	r0, #0
 8009140:	f43f af2a 	beq.w	8008f98 <_strtod_l+0x480>
 8009144:	9a08      	ldr	r2, [sp, #32]
 8009146:	9b05      	ldr	r3, [sp, #20]
 8009148:	2a00      	cmp	r2, #0
 800914a:	eba3 0307 	sub.w	r3, r3, r7
 800914e:	bfa8      	it	ge
 8009150:	2300      	movge	r3, #0
 8009152:	930c      	str	r3, [sp, #48]	; 0x30
 8009154:	2500      	movs	r5, #0
 8009156:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800915a:	9312      	str	r3, [sp, #72]	; 0x48
 800915c:	46ab      	mov	fp, r5
 800915e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009160:	4620      	mov	r0, r4
 8009162:	6859      	ldr	r1, [r3, #4]
 8009164:	f001 f8d8 	bl	800a318 <_Balloc>
 8009168:	9005      	str	r0, [sp, #20]
 800916a:	2800      	cmp	r0, #0
 800916c:	f43f af18 	beq.w	8008fa0 <_strtod_l+0x488>
 8009170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009172:	691a      	ldr	r2, [r3, #16]
 8009174:	3202      	adds	r2, #2
 8009176:	f103 010c 	add.w	r1, r3, #12
 800917a:	0092      	lsls	r2, r2, #2
 800917c:	300c      	adds	r0, #12
 800917e:	f000 fc5a 	bl	8009a36 <memcpy>
 8009182:	ec49 8b10 	vmov	d0, r8, r9
 8009186:	aa18      	add	r2, sp, #96	; 0x60
 8009188:	a917      	add	r1, sp, #92	; 0x5c
 800918a:	4620      	mov	r0, r4
 800918c:	f001 fca0 	bl	800aad0 <__d2b>
 8009190:	ec49 8b18 	vmov	d8, r8, r9
 8009194:	9016      	str	r0, [sp, #88]	; 0x58
 8009196:	2800      	cmp	r0, #0
 8009198:	f43f af02 	beq.w	8008fa0 <_strtod_l+0x488>
 800919c:	2101      	movs	r1, #1
 800919e:	4620      	mov	r0, r4
 80091a0:	f001 f9fa 	bl	800a598 <__i2b>
 80091a4:	4683      	mov	fp, r0
 80091a6:	2800      	cmp	r0, #0
 80091a8:	f43f aefa 	beq.w	8008fa0 <_strtod_l+0x488>
 80091ac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80091ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80091b0:	2e00      	cmp	r6, #0
 80091b2:	bfab      	itete	ge
 80091b4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80091b6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80091b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80091ba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80091be:	bfac      	ite	ge
 80091c0:	eb06 0a03 	addge.w	sl, r6, r3
 80091c4:	1b9f      	sublt	r7, r3, r6
 80091c6:	9b04      	ldr	r3, [sp, #16]
 80091c8:	1af6      	subs	r6, r6, r3
 80091ca:	4416      	add	r6, r2
 80091cc:	4ba0      	ldr	r3, [pc, #640]	; (8009450 <_strtod_l+0x938>)
 80091ce:	3e01      	subs	r6, #1
 80091d0:	429e      	cmp	r6, r3
 80091d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80091d6:	f280 80c4 	bge.w	8009362 <_strtod_l+0x84a>
 80091da:	1b9b      	subs	r3, r3, r6
 80091dc:	2b1f      	cmp	r3, #31
 80091de:	eba2 0203 	sub.w	r2, r2, r3
 80091e2:	f04f 0101 	mov.w	r1, #1
 80091e6:	f300 80b0 	bgt.w	800934a <_strtod_l+0x832>
 80091ea:	fa01 f303 	lsl.w	r3, r1, r3
 80091ee:	930e      	str	r3, [sp, #56]	; 0x38
 80091f0:	2300      	movs	r3, #0
 80091f2:	930d      	str	r3, [sp, #52]	; 0x34
 80091f4:	eb0a 0602 	add.w	r6, sl, r2
 80091f8:	9b04      	ldr	r3, [sp, #16]
 80091fa:	45b2      	cmp	sl, r6
 80091fc:	4417      	add	r7, r2
 80091fe:	441f      	add	r7, r3
 8009200:	4653      	mov	r3, sl
 8009202:	bfa8      	it	ge
 8009204:	4633      	movge	r3, r6
 8009206:	42bb      	cmp	r3, r7
 8009208:	bfa8      	it	ge
 800920a:	463b      	movge	r3, r7
 800920c:	2b00      	cmp	r3, #0
 800920e:	bfc2      	ittt	gt
 8009210:	1af6      	subgt	r6, r6, r3
 8009212:	1aff      	subgt	r7, r7, r3
 8009214:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800921a:	2b00      	cmp	r3, #0
 800921c:	dd17      	ble.n	800924e <_strtod_l+0x736>
 800921e:	4659      	mov	r1, fp
 8009220:	461a      	mov	r2, r3
 8009222:	4620      	mov	r0, r4
 8009224:	f001 fa78 	bl	800a718 <__pow5mult>
 8009228:	4683      	mov	fp, r0
 800922a:	2800      	cmp	r0, #0
 800922c:	f43f aeb8 	beq.w	8008fa0 <_strtod_l+0x488>
 8009230:	4601      	mov	r1, r0
 8009232:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009234:	4620      	mov	r0, r4
 8009236:	f001 f9c5 	bl	800a5c4 <__multiply>
 800923a:	900b      	str	r0, [sp, #44]	; 0x2c
 800923c:	2800      	cmp	r0, #0
 800923e:	f43f aeaf 	beq.w	8008fa0 <_strtod_l+0x488>
 8009242:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009244:	4620      	mov	r0, r4
 8009246:	f001 f8a7 	bl	800a398 <_Bfree>
 800924a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800924c:	9316      	str	r3, [sp, #88]	; 0x58
 800924e:	2e00      	cmp	r6, #0
 8009250:	f300 808c 	bgt.w	800936c <_strtod_l+0x854>
 8009254:	9b08      	ldr	r3, [sp, #32]
 8009256:	2b00      	cmp	r3, #0
 8009258:	dd08      	ble.n	800926c <_strtod_l+0x754>
 800925a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800925c:	9905      	ldr	r1, [sp, #20]
 800925e:	4620      	mov	r0, r4
 8009260:	f001 fa5a 	bl	800a718 <__pow5mult>
 8009264:	9005      	str	r0, [sp, #20]
 8009266:	2800      	cmp	r0, #0
 8009268:	f43f ae9a 	beq.w	8008fa0 <_strtod_l+0x488>
 800926c:	2f00      	cmp	r7, #0
 800926e:	dd08      	ble.n	8009282 <_strtod_l+0x76a>
 8009270:	9905      	ldr	r1, [sp, #20]
 8009272:	463a      	mov	r2, r7
 8009274:	4620      	mov	r0, r4
 8009276:	f001 faa9 	bl	800a7cc <__lshift>
 800927a:	9005      	str	r0, [sp, #20]
 800927c:	2800      	cmp	r0, #0
 800927e:	f43f ae8f 	beq.w	8008fa0 <_strtod_l+0x488>
 8009282:	f1ba 0f00 	cmp.w	sl, #0
 8009286:	dd08      	ble.n	800929a <_strtod_l+0x782>
 8009288:	4659      	mov	r1, fp
 800928a:	4652      	mov	r2, sl
 800928c:	4620      	mov	r0, r4
 800928e:	f001 fa9d 	bl	800a7cc <__lshift>
 8009292:	4683      	mov	fp, r0
 8009294:	2800      	cmp	r0, #0
 8009296:	f43f ae83 	beq.w	8008fa0 <_strtod_l+0x488>
 800929a:	9a05      	ldr	r2, [sp, #20]
 800929c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800929e:	4620      	mov	r0, r4
 80092a0:	f001 fb1c 	bl	800a8dc <__mdiff>
 80092a4:	4605      	mov	r5, r0
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f43f ae7a 	beq.w	8008fa0 <_strtod_l+0x488>
 80092ac:	68c3      	ldr	r3, [r0, #12]
 80092ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80092b0:	2300      	movs	r3, #0
 80092b2:	60c3      	str	r3, [r0, #12]
 80092b4:	4659      	mov	r1, fp
 80092b6:	f001 faf5 	bl	800a8a4 <__mcmp>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	da60      	bge.n	8009380 <_strtod_l+0x868>
 80092be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092c0:	ea53 0308 	orrs.w	r3, r3, r8
 80092c4:	f040 8084 	bne.w	80093d0 <_strtod_l+0x8b8>
 80092c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d17f      	bne.n	80093d0 <_strtod_l+0x8b8>
 80092d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80092d4:	0d1b      	lsrs	r3, r3, #20
 80092d6:	051b      	lsls	r3, r3, #20
 80092d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80092dc:	d978      	bls.n	80093d0 <_strtod_l+0x8b8>
 80092de:	696b      	ldr	r3, [r5, #20]
 80092e0:	b913      	cbnz	r3, 80092e8 <_strtod_l+0x7d0>
 80092e2:	692b      	ldr	r3, [r5, #16]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	dd73      	ble.n	80093d0 <_strtod_l+0x8b8>
 80092e8:	4629      	mov	r1, r5
 80092ea:	2201      	movs	r2, #1
 80092ec:	4620      	mov	r0, r4
 80092ee:	f001 fa6d 	bl	800a7cc <__lshift>
 80092f2:	4659      	mov	r1, fp
 80092f4:	4605      	mov	r5, r0
 80092f6:	f001 fad5 	bl	800a8a4 <__mcmp>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	dd68      	ble.n	80093d0 <_strtod_l+0x8b8>
 80092fe:	9904      	ldr	r1, [sp, #16]
 8009300:	4a54      	ldr	r2, [pc, #336]	; (8009454 <_strtod_l+0x93c>)
 8009302:	464b      	mov	r3, r9
 8009304:	2900      	cmp	r1, #0
 8009306:	f000 8084 	beq.w	8009412 <_strtod_l+0x8fa>
 800930a:	ea02 0109 	and.w	r1, r2, r9
 800930e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009312:	dc7e      	bgt.n	8009412 <_strtod_l+0x8fa>
 8009314:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009318:	f77f aeb3 	ble.w	8009082 <_strtod_l+0x56a>
 800931c:	4b4e      	ldr	r3, [pc, #312]	; (8009458 <_strtod_l+0x940>)
 800931e:	4640      	mov	r0, r8
 8009320:	4649      	mov	r1, r9
 8009322:	2200      	movs	r2, #0
 8009324:	f7f7 f960 	bl	80005e8 <__aeabi_dmul>
 8009328:	4b4a      	ldr	r3, [pc, #296]	; (8009454 <_strtod_l+0x93c>)
 800932a:	400b      	ands	r3, r1
 800932c:	4680      	mov	r8, r0
 800932e:	4689      	mov	r9, r1
 8009330:	2b00      	cmp	r3, #0
 8009332:	f47f ae3f 	bne.w	8008fb4 <_strtod_l+0x49c>
 8009336:	2322      	movs	r3, #34	; 0x22
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	e63b      	b.n	8008fb4 <_strtod_l+0x49c>
 800933c:	f04f 32ff 	mov.w	r2, #4294967295
 8009340:	fa02 f303 	lsl.w	r3, r2, r3
 8009344:	ea03 0808 	and.w	r8, r3, r8
 8009348:	e6e8      	b.n	800911c <_strtod_l+0x604>
 800934a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800934e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009352:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009356:	36e2      	adds	r6, #226	; 0xe2
 8009358:	fa01 f306 	lsl.w	r3, r1, r6
 800935c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009360:	e748      	b.n	80091f4 <_strtod_l+0x6dc>
 8009362:	2100      	movs	r1, #0
 8009364:	2301      	movs	r3, #1
 8009366:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800936a:	e743      	b.n	80091f4 <_strtod_l+0x6dc>
 800936c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800936e:	4632      	mov	r2, r6
 8009370:	4620      	mov	r0, r4
 8009372:	f001 fa2b 	bl	800a7cc <__lshift>
 8009376:	9016      	str	r0, [sp, #88]	; 0x58
 8009378:	2800      	cmp	r0, #0
 800937a:	f47f af6b 	bne.w	8009254 <_strtod_l+0x73c>
 800937e:	e60f      	b.n	8008fa0 <_strtod_l+0x488>
 8009380:	46ca      	mov	sl, r9
 8009382:	d171      	bne.n	8009468 <_strtod_l+0x950>
 8009384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009386:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800938a:	b352      	cbz	r2, 80093e2 <_strtod_l+0x8ca>
 800938c:	4a33      	ldr	r2, [pc, #204]	; (800945c <_strtod_l+0x944>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d12a      	bne.n	80093e8 <_strtod_l+0x8d0>
 8009392:	9b04      	ldr	r3, [sp, #16]
 8009394:	4641      	mov	r1, r8
 8009396:	b1fb      	cbz	r3, 80093d8 <_strtod_l+0x8c0>
 8009398:	4b2e      	ldr	r3, [pc, #184]	; (8009454 <_strtod_l+0x93c>)
 800939a:	ea09 0303 	and.w	r3, r9, r3
 800939e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80093a2:	f04f 32ff 	mov.w	r2, #4294967295
 80093a6:	d81a      	bhi.n	80093de <_strtod_l+0x8c6>
 80093a8:	0d1b      	lsrs	r3, r3, #20
 80093aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093ae:	fa02 f303 	lsl.w	r3, r2, r3
 80093b2:	4299      	cmp	r1, r3
 80093b4:	d118      	bne.n	80093e8 <_strtod_l+0x8d0>
 80093b6:	4b2a      	ldr	r3, [pc, #168]	; (8009460 <_strtod_l+0x948>)
 80093b8:	459a      	cmp	sl, r3
 80093ba:	d102      	bne.n	80093c2 <_strtod_l+0x8aa>
 80093bc:	3101      	adds	r1, #1
 80093be:	f43f adef 	beq.w	8008fa0 <_strtod_l+0x488>
 80093c2:	4b24      	ldr	r3, [pc, #144]	; (8009454 <_strtod_l+0x93c>)
 80093c4:	ea0a 0303 	and.w	r3, sl, r3
 80093c8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80093cc:	f04f 0800 	mov.w	r8, #0
 80093d0:	9b04      	ldr	r3, [sp, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1a2      	bne.n	800931c <_strtod_l+0x804>
 80093d6:	e5ed      	b.n	8008fb4 <_strtod_l+0x49c>
 80093d8:	f04f 33ff 	mov.w	r3, #4294967295
 80093dc:	e7e9      	b.n	80093b2 <_strtod_l+0x89a>
 80093de:	4613      	mov	r3, r2
 80093e0:	e7e7      	b.n	80093b2 <_strtod_l+0x89a>
 80093e2:	ea53 0308 	orrs.w	r3, r3, r8
 80093e6:	d08a      	beq.n	80092fe <_strtod_l+0x7e6>
 80093e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ea:	b1e3      	cbz	r3, 8009426 <_strtod_l+0x90e>
 80093ec:	ea13 0f0a 	tst.w	r3, sl
 80093f0:	d0ee      	beq.n	80093d0 <_strtod_l+0x8b8>
 80093f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093f4:	9a04      	ldr	r2, [sp, #16]
 80093f6:	4640      	mov	r0, r8
 80093f8:	4649      	mov	r1, r9
 80093fa:	b1c3      	cbz	r3, 800942e <_strtod_l+0x916>
 80093fc:	f7ff fb70 	bl	8008ae0 <sulp>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	ec51 0b18 	vmov	r0, r1, d8
 8009408:	f7f6 ff38 	bl	800027c <__adddf3>
 800940c:	4680      	mov	r8, r0
 800940e:	4689      	mov	r9, r1
 8009410:	e7de      	b.n	80093d0 <_strtod_l+0x8b8>
 8009412:	4013      	ands	r3, r2
 8009414:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009418:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800941c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009420:	f04f 38ff 	mov.w	r8, #4294967295
 8009424:	e7d4      	b.n	80093d0 <_strtod_l+0x8b8>
 8009426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009428:	ea13 0f08 	tst.w	r3, r8
 800942c:	e7e0      	b.n	80093f0 <_strtod_l+0x8d8>
 800942e:	f7ff fb57 	bl	8008ae0 <sulp>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	ec51 0b18 	vmov	r0, r1, d8
 800943a:	f7f6 ff1d 	bl	8000278 <__aeabi_dsub>
 800943e:	2200      	movs	r2, #0
 8009440:	2300      	movs	r3, #0
 8009442:	4680      	mov	r8, r0
 8009444:	4689      	mov	r9, r1
 8009446:	f7f7 fb37 	bl	8000ab8 <__aeabi_dcmpeq>
 800944a:	2800      	cmp	r0, #0
 800944c:	d0c0      	beq.n	80093d0 <_strtod_l+0x8b8>
 800944e:	e618      	b.n	8009082 <_strtod_l+0x56a>
 8009450:	fffffc02 	.word	0xfffffc02
 8009454:	7ff00000 	.word	0x7ff00000
 8009458:	39500000 	.word	0x39500000
 800945c:	000fffff 	.word	0x000fffff
 8009460:	7fefffff 	.word	0x7fefffff
 8009464:	0800b998 	.word	0x0800b998
 8009468:	4659      	mov	r1, fp
 800946a:	4628      	mov	r0, r5
 800946c:	f001 fb8a 	bl	800ab84 <__ratio>
 8009470:	ec57 6b10 	vmov	r6, r7, d0
 8009474:	ee10 0a10 	vmov	r0, s0
 8009478:	2200      	movs	r2, #0
 800947a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800947e:	4639      	mov	r1, r7
 8009480:	f7f7 fb2e 	bl	8000ae0 <__aeabi_dcmple>
 8009484:	2800      	cmp	r0, #0
 8009486:	d071      	beq.n	800956c <_strtod_l+0xa54>
 8009488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800948a:	2b00      	cmp	r3, #0
 800948c:	d17c      	bne.n	8009588 <_strtod_l+0xa70>
 800948e:	f1b8 0f00 	cmp.w	r8, #0
 8009492:	d15a      	bne.n	800954a <_strtod_l+0xa32>
 8009494:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009498:	2b00      	cmp	r3, #0
 800949a:	d15d      	bne.n	8009558 <_strtod_l+0xa40>
 800949c:	4b90      	ldr	r3, [pc, #576]	; (80096e0 <_strtod_l+0xbc8>)
 800949e:	2200      	movs	r2, #0
 80094a0:	4630      	mov	r0, r6
 80094a2:	4639      	mov	r1, r7
 80094a4:	f7f7 fb12 	bl	8000acc <__aeabi_dcmplt>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d15c      	bne.n	8009566 <_strtod_l+0xa4e>
 80094ac:	4630      	mov	r0, r6
 80094ae:	4639      	mov	r1, r7
 80094b0:	4b8c      	ldr	r3, [pc, #560]	; (80096e4 <_strtod_l+0xbcc>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	f7f7 f898 	bl	80005e8 <__aeabi_dmul>
 80094b8:	4606      	mov	r6, r0
 80094ba:	460f      	mov	r7, r1
 80094bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80094c0:	9606      	str	r6, [sp, #24]
 80094c2:	9307      	str	r3, [sp, #28]
 80094c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80094cc:	4b86      	ldr	r3, [pc, #536]	; (80096e8 <_strtod_l+0xbd0>)
 80094ce:	ea0a 0303 	and.w	r3, sl, r3
 80094d2:	930d      	str	r3, [sp, #52]	; 0x34
 80094d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094d6:	4b85      	ldr	r3, [pc, #532]	; (80096ec <_strtod_l+0xbd4>)
 80094d8:	429a      	cmp	r2, r3
 80094da:	f040 8090 	bne.w	80095fe <_strtod_l+0xae6>
 80094de:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80094e2:	ec49 8b10 	vmov	d0, r8, r9
 80094e6:	f001 fa83 	bl	800a9f0 <__ulp>
 80094ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094ee:	ec51 0b10 	vmov	r0, r1, d0
 80094f2:	f7f7 f879 	bl	80005e8 <__aeabi_dmul>
 80094f6:	4642      	mov	r2, r8
 80094f8:	464b      	mov	r3, r9
 80094fa:	f7f6 febf 	bl	800027c <__adddf3>
 80094fe:	460b      	mov	r3, r1
 8009500:	4979      	ldr	r1, [pc, #484]	; (80096e8 <_strtod_l+0xbd0>)
 8009502:	4a7b      	ldr	r2, [pc, #492]	; (80096f0 <_strtod_l+0xbd8>)
 8009504:	4019      	ands	r1, r3
 8009506:	4291      	cmp	r1, r2
 8009508:	4680      	mov	r8, r0
 800950a:	d944      	bls.n	8009596 <_strtod_l+0xa7e>
 800950c:	ee18 2a90 	vmov	r2, s17
 8009510:	4b78      	ldr	r3, [pc, #480]	; (80096f4 <_strtod_l+0xbdc>)
 8009512:	429a      	cmp	r2, r3
 8009514:	d104      	bne.n	8009520 <_strtod_l+0xa08>
 8009516:	ee18 3a10 	vmov	r3, s16
 800951a:	3301      	adds	r3, #1
 800951c:	f43f ad40 	beq.w	8008fa0 <_strtod_l+0x488>
 8009520:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80096f4 <_strtod_l+0xbdc>
 8009524:	f04f 38ff 	mov.w	r8, #4294967295
 8009528:	9916      	ldr	r1, [sp, #88]	; 0x58
 800952a:	4620      	mov	r0, r4
 800952c:	f000 ff34 	bl	800a398 <_Bfree>
 8009530:	9905      	ldr	r1, [sp, #20]
 8009532:	4620      	mov	r0, r4
 8009534:	f000 ff30 	bl	800a398 <_Bfree>
 8009538:	4659      	mov	r1, fp
 800953a:	4620      	mov	r0, r4
 800953c:	f000 ff2c 	bl	800a398 <_Bfree>
 8009540:	4629      	mov	r1, r5
 8009542:	4620      	mov	r0, r4
 8009544:	f000 ff28 	bl	800a398 <_Bfree>
 8009548:	e609      	b.n	800915e <_strtod_l+0x646>
 800954a:	f1b8 0f01 	cmp.w	r8, #1
 800954e:	d103      	bne.n	8009558 <_strtod_l+0xa40>
 8009550:	f1b9 0f00 	cmp.w	r9, #0
 8009554:	f43f ad95 	beq.w	8009082 <_strtod_l+0x56a>
 8009558:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80096b0 <_strtod_l+0xb98>
 800955c:	4f60      	ldr	r7, [pc, #384]	; (80096e0 <_strtod_l+0xbc8>)
 800955e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009562:	2600      	movs	r6, #0
 8009564:	e7ae      	b.n	80094c4 <_strtod_l+0x9ac>
 8009566:	4f5f      	ldr	r7, [pc, #380]	; (80096e4 <_strtod_l+0xbcc>)
 8009568:	2600      	movs	r6, #0
 800956a:	e7a7      	b.n	80094bc <_strtod_l+0x9a4>
 800956c:	4b5d      	ldr	r3, [pc, #372]	; (80096e4 <_strtod_l+0xbcc>)
 800956e:	4630      	mov	r0, r6
 8009570:	4639      	mov	r1, r7
 8009572:	2200      	movs	r2, #0
 8009574:	f7f7 f838 	bl	80005e8 <__aeabi_dmul>
 8009578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800957a:	4606      	mov	r6, r0
 800957c:	460f      	mov	r7, r1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d09c      	beq.n	80094bc <_strtod_l+0x9a4>
 8009582:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009586:	e79d      	b.n	80094c4 <_strtod_l+0x9ac>
 8009588:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80096b8 <_strtod_l+0xba0>
 800958c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009590:	ec57 6b17 	vmov	r6, r7, d7
 8009594:	e796      	b.n	80094c4 <_strtod_l+0x9ac>
 8009596:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800959a:	9b04      	ldr	r3, [sp, #16]
 800959c:	46ca      	mov	sl, r9
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1c2      	bne.n	8009528 <_strtod_l+0xa10>
 80095a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095a8:	0d1b      	lsrs	r3, r3, #20
 80095aa:	051b      	lsls	r3, r3, #20
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d1bb      	bne.n	8009528 <_strtod_l+0xa10>
 80095b0:	4630      	mov	r0, r6
 80095b2:	4639      	mov	r1, r7
 80095b4:	f7f7 fb78 	bl	8000ca8 <__aeabi_d2lz>
 80095b8:	f7f6 ffe8 	bl	800058c <__aeabi_l2d>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4630      	mov	r0, r6
 80095c2:	4639      	mov	r1, r7
 80095c4:	f7f6 fe58 	bl	8000278 <__aeabi_dsub>
 80095c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095ce:	ea43 0308 	orr.w	r3, r3, r8
 80095d2:	4313      	orrs	r3, r2
 80095d4:	4606      	mov	r6, r0
 80095d6:	460f      	mov	r7, r1
 80095d8:	d054      	beq.n	8009684 <_strtod_l+0xb6c>
 80095da:	a339      	add	r3, pc, #228	; (adr r3, 80096c0 <_strtod_l+0xba8>)
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	f7f7 fa74 	bl	8000acc <__aeabi_dcmplt>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	f47f ace5 	bne.w	8008fb4 <_strtod_l+0x49c>
 80095ea:	a337      	add	r3, pc, #220	; (adr r3, 80096c8 <_strtod_l+0xbb0>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	4630      	mov	r0, r6
 80095f2:	4639      	mov	r1, r7
 80095f4:	f7f7 fa88 	bl	8000b08 <__aeabi_dcmpgt>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d095      	beq.n	8009528 <_strtod_l+0xa10>
 80095fc:	e4da      	b.n	8008fb4 <_strtod_l+0x49c>
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	b333      	cbz	r3, 8009650 <_strtod_l+0xb38>
 8009602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009604:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009608:	d822      	bhi.n	8009650 <_strtod_l+0xb38>
 800960a:	a331      	add	r3, pc, #196	; (adr r3, 80096d0 <_strtod_l+0xbb8>)
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	4630      	mov	r0, r6
 8009612:	4639      	mov	r1, r7
 8009614:	f7f7 fa64 	bl	8000ae0 <__aeabi_dcmple>
 8009618:	b1a0      	cbz	r0, 8009644 <_strtod_l+0xb2c>
 800961a:	4639      	mov	r1, r7
 800961c:	4630      	mov	r0, r6
 800961e:	f7f7 fabb 	bl	8000b98 <__aeabi_d2uiz>
 8009622:	2801      	cmp	r0, #1
 8009624:	bf38      	it	cc
 8009626:	2001      	movcc	r0, #1
 8009628:	f7f6 ff64 	bl	80004f4 <__aeabi_ui2d>
 800962c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800962e:	4606      	mov	r6, r0
 8009630:	460f      	mov	r7, r1
 8009632:	bb23      	cbnz	r3, 800967e <_strtod_l+0xb66>
 8009634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009638:	9010      	str	r0, [sp, #64]	; 0x40
 800963a:	9311      	str	r3, [sp, #68]	; 0x44
 800963c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009640:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009646:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009648:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800964c:	1a9b      	subs	r3, r3, r2
 800964e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009650:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009654:	eeb0 0a48 	vmov.f32	s0, s16
 8009658:	eef0 0a68 	vmov.f32	s1, s17
 800965c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009660:	f001 f9c6 	bl	800a9f0 <__ulp>
 8009664:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009668:	ec53 2b10 	vmov	r2, r3, d0
 800966c:	f7f6 ffbc 	bl	80005e8 <__aeabi_dmul>
 8009670:	ec53 2b18 	vmov	r2, r3, d8
 8009674:	f7f6 fe02 	bl	800027c <__adddf3>
 8009678:	4680      	mov	r8, r0
 800967a:	4689      	mov	r9, r1
 800967c:	e78d      	b.n	800959a <_strtod_l+0xa82>
 800967e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009682:	e7db      	b.n	800963c <_strtod_l+0xb24>
 8009684:	a314      	add	r3, pc, #80	; (adr r3, 80096d8 <_strtod_l+0xbc0>)
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f7f7 fa1f 	bl	8000acc <__aeabi_dcmplt>
 800968e:	e7b3      	b.n	80095f8 <_strtod_l+0xae0>
 8009690:	2300      	movs	r3, #0
 8009692:	930a      	str	r3, [sp, #40]	; 0x28
 8009694:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009696:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	f7ff ba7c 	b.w	8008b96 <_strtod_l+0x7e>
 800969e:	2a65      	cmp	r2, #101	; 0x65
 80096a0:	f43f ab75 	beq.w	8008d8e <_strtod_l+0x276>
 80096a4:	2a45      	cmp	r2, #69	; 0x45
 80096a6:	f43f ab72 	beq.w	8008d8e <_strtod_l+0x276>
 80096aa:	2301      	movs	r3, #1
 80096ac:	f7ff bbaa 	b.w	8008e04 <_strtod_l+0x2ec>
 80096b0:	00000000 	.word	0x00000000
 80096b4:	bff00000 	.word	0xbff00000
 80096b8:	00000000 	.word	0x00000000
 80096bc:	3ff00000 	.word	0x3ff00000
 80096c0:	94a03595 	.word	0x94a03595
 80096c4:	3fdfffff 	.word	0x3fdfffff
 80096c8:	35afe535 	.word	0x35afe535
 80096cc:	3fe00000 	.word	0x3fe00000
 80096d0:	ffc00000 	.word	0xffc00000
 80096d4:	41dfffff 	.word	0x41dfffff
 80096d8:	94a03595 	.word	0x94a03595
 80096dc:	3fcfffff 	.word	0x3fcfffff
 80096e0:	3ff00000 	.word	0x3ff00000
 80096e4:	3fe00000 	.word	0x3fe00000
 80096e8:	7ff00000 	.word	0x7ff00000
 80096ec:	7fe00000 	.word	0x7fe00000
 80096f0:	7c9fffff 	.word	0x7c9fffff
 80096f4:	7fefffff 	.word	0x7fefffff

080096f8 <strtod>:
 80096f8:	460a      	mov	r2, r1
 80096fa:	4601      	mov	r1, r0
 80096fc:	4802      	ldr	r0, [pc, #8]	; (8009708 <strtod+0x10>)
 80096fe:	4b03      	ldr	r3, [pc, #12]	; (800970c <strtod+0x14>)
 8009700:	6800      	ldr	r0, [r0, #0]
 8009702:	f7ff ba09 	b.w	8008b18 <_strtod_l>
 8009706:	bf00      	nop
 8009708:	200001e4 	.word	0x200001e4
 800970c:	2000002c 	.word	0x2000002c

08009710 <std>:
 8009710:	2300      	movs	r3, #0
 8009712:	b510      	push	{r4, lr}
 8009714:	4604      	mov	r4, r0
 8009716:	e9c0 3300 	strd	r3, r3, [r0]
 800971a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800971e:	6083      	str	r3, [r0, #8]
 8009720:	8181      	strh	r1, [r0, #12]
 8009722:	6643      	str	r3, [r0, #100]	; 0x64
 8009724:	81c2      	strh	r2, [r0, #14]
 8009726:	6183      	str	r3, [r0, #24]
 8009728:	4619      	mov	r1, r3
 800972a:	2208      	movs	r2, #8
 800972c:	305c      	adds	r0, #92	; 0x5c
 800972e:	f000 f8f4 	bl	800991a <memset>
 8009732:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <std+0x58>)
 8009734:	6263      	str	r3, [r4, #36]	; 0x24
 8009736:	4b0d      	ldr	r3, [pc, #52]	; (800976c <std+0x5c>)
 8009738:	62a3      	str	r3, [r4, #40]	; 0x28
 800973a:	4b0d      	ldr	r3, [pc, #52]	; (8009770 <std+0x60>)
 800973c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800973e:	4b0d      	ldr	r3, [pc, #52]	; (8009774 <std+0x64>)
 8009740:	6323      	str	r3, [r4, #48]	; 0x30
 8009742:	4b0d      	ldr	r3, [pc, #52]	; (8009778 <std+0x68>)
 8009744:	6224      	str	r4, [r4, #32]
 8009746:	429c      	cmp	r4, r3
 8009748:	d006      	beq.n	8009758 <std+0x48>
 800974a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800974e:	4294      	cmp	r4, r2
 8009750:	d002      	beq.n	8009758 <std+0x48>
 8009752:	33d0      	adds	r3, #208	; 0xd0
 8009754:	429c      	cmp	r4, r3
 8009756:	d105      	bne.n	8009764 <std+0x54>
 8009758:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800975c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009760:	f000 b966 	b.w	8009a30 <__retarget_lock_init_recursive>
 8009764:	bd10      	pop	{r4, pc}
 8009766:	bf00      	nop
 8009768:	08009895 	.word	0x08009895
 800976c:	080098b7 	.word	0x080098b7
 8009770:	080098ef 	.word	0x080098ef
 8009774:	08009913 	.word	0x08009913
 8009778:	200005d8 	.word	0x200005d8

0800977c <stdio_exit_handler>:
 800977c:	4a02      	ldr	r2, [pc, #8]	; (8009788 <stdio_exit_handler+0xc>)
 800977e:	4903      	ldr	r1, [pc, #12]	; (800978c <stdio_exit_handler+0x10>)
 8009780:	4803      	ldr	r0, [pc, #12]	; (8009790 <stdio_exit_handler+0x14>)
 8009782:	f000 b869 	b.w	8009858 <_fwalk_sglue>
 8009786:	bf00      	nop
 8009788:	20000020 	.word	0x20000020
 800978c:	0800ad99 	.word	0x0800ad99
 8009790:	20000198 	.word	0x20000198

08009794 <cleanup_stdio>:
 8009794:	6841      	ldr	r1, [r0, #4]
 8009796:	4b0c      	ldr	r3, [pc, #48]	; (80097c8 <cleanup_stdio+0x34>)
 8009798:	4299      	cmp	r1, r3
 800979a:	b510      	push	{r4, lr}
 800979c:	4604      	mov	r4, r0
 800979e:	d001      	beq.n	80097a4 <cleanup_stdio+0x10>
 80097a0:	f001 fafa 	bl	800ad98 <_fflush_r>
 80097a4:	68a1      	ldr	r1, [r4, #8]
 80097a6:	4b09      	ldr	r3, [pc, #36]	; (80097cc <cleanup_stdio+0x38>)
 80097a8:	4299      	cmp	r1, r3
 80097aa:	d002      	beq.n	80097b2 <cleanup_stdio+0x1e>
 80097ac:	4620      	mov	r0, r4
 80097ae:	f001 faf3 	bl	800ad98 <_fflush_r>
 80097b2:	68e1      	ldr	r1, [r4, #12]
 80097b4:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <cleanup_stdio+0x3c>)
 80097b6:	4299      	cmp	r1, r3
 80097b8:	d004      	beq.n	80097c4 <cleanup_stdio+0x30>
 80097ba:	4620      	mov	r0, r4
 80097bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097c0:	f001 baea 	b.w	800ad98 <_fflush_r>
 80097c4:	bd10      	pop	{r4, pc}
 80097c6:	bf00      	nop
 80097c8:	200005d8 	.word	0x200005d8
 80097cc:	20000640 	.word	0x20000640
 80097d0:	200006a8 	.word	0x200006a8

080097d4 <global_stdio_init.part.0>:
 80097d4:	b510      	push	{r4, lr}
 80097d6:	4b0b      	ldr	r3, [pc, #44]	; (8009804 <global_stdio_init.part.0+0x30>)
 80097d8:	4c0b      	ldr	r4, [pc, #44]	; (8009808 <global_stdio_init.part.0+0x34>)
 80097da:	4a0c      	ldr	r2, [pc, #48]	; (800980c <global_stdio_init.part.0+0x38>)
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	4620      	mov	r0, r4
 80097e0:	2200      	movs	r2, #0
 80097e2:	2104      	movs	r1, #4
 80097e4:	f7ff ff94 	bl	8009710 <std>
 80097e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80097ec:	2201      	movs	r2, #1
 80097ee:	2109      	movs	r1, #9
 80097f0:	f7ff ff8e 	bl	8009710 <std>
 80097f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80097f8:	2202      	movs	r2, #2
 80097fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097fe:	2112      	movs	r1, #18
 8009800:	f7ff bf86 	b.w	8009710 <std>
 8009804:	20000710 	.word	0x20000710
 8009808:	200005d8 	.word	0x200005d8
 800980c:	0800977d 	.word	0x0800977d

08009810 <__sfp_lock_acquire>:
 8009810:	4801      	ldr	r0, [pc, #4]	; (8009818 <__sfp_lock_acquire+0x8>)
 8009812:	f000 b90e 	b.w	8009a32 <__retarget_lock_acquire_recursive>
 8009816:	bf00      	nop
 8009818:	20000719 	.word	0x20000719

0800981c <__sfp_lock_release>:
 800981c:	4801      	ldr	r0, [pc, #4]	; (8009824 <__sfp_lock_release+0x8>)
 800981e:	f000 b909 	b.w	8009a34 <__retarget_lock_release_recursive>
 8009822:	bf00      	nop
 8009824:	20000719 	.word	0x20000719

08009828 <__sinit>:
 8009828:	b510      	push	{r4, lr}
 800982a:	4604      	mov	r4, r0
 800982c:	f7ff fff0 	bl	8009810 <__sfp_lock_acquire>
 8009830:	6a23      	ldr	r3, [r4, #32]
 8009832:	b11b      	cbz	r3, 800983c <__sinit+0x14>
 8009834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009838:	f7ff bff0 	b.w	800981c <__sfp_lock_release>
 800983c:	4b04      	ldr	r3, [pc, #16]	; (8009850 <__sinit+0x28>)
 800983e:	6223      	str	r3, [r4, #32]
 8009840:	4b04      	ldr	r3, [pc, #16]	; (8009854 <__sinit+0x2c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1f5      	bne.n	8009834 <__sinit+0xc>
 8009848:	f7ff ffc4 	bl	80097d4 <global_stdio_init.part.0>
 800984c:	e7f2      	b.n	8009834 <__sinit+0xc>
 800984e:	bf00      	nop
 8009850:	08009795 	.word	0x08009795
 8009854:	20000710 	.word	0x20000710

08009858 <_fwalk_sglue>:
 8009858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800985c:	4607      	mov	r7, r0
 800985e:	4688      	mov	r8, r1
 8009860:	4614      	mov	r4, r2
 8009862:	2600      	movs	r6, #0
 8009864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009868:	f1b9 0901 	subs.w	r9, r9, #1
 800986c:	d505      	bpl.n	800987a <_fwalk_sglue+0x22>
 800986e:	6824      	ldr	r4, [r4, #0]
 8009870:	2c00      	cmp	r4, #0
 8009872:	d1f7      	bne.n	8009864 <_fwalk_sglue+0xc>
 8009874:	4630      	mov	r0, r6
 8009876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800987a:	89ab      	ldrh	r3, [r5, #12]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d907      	bls.n	8009890 <_fwalk_sglue+0x38>
 8009880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009884:	3301      	adds	r3, #1
 8009886:	d003      	beq.n	8009890 <_fwalk_sglue+0x38>
 8009888:	4629      	mov	r1, r5
 800988a:	4638      	mov	r0, r7
 800988c:	47c0      	blx	r8
 800988e:	4306      	orrs	r6, r0
 8009890:	3568      	adds	r5, #104	; 0x68
 8009892:	e7e9      	b.n	8009868 <_fwalk_sglue+0x10>

08009894 <__sread>:
 8009894:	b510      	push	{r4, lr}
 8009896:	460c      	mov	r4, r1
 8009898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800989c:	f000 f87a 	bl	8009994 <_read_r>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	bfab      	itete	ge
 80098a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098a6:	89a3      	ldrhlt	r3, [r4, #12]
 80098a8:	181b      	addge	r3, r3, r0
 80098aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098ae:	bfac      	ite	ge
 80098b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80098b2:	81a3      	strhlt	r3, [r4, #12]
 80098b4:	bd10      	pop	{r4, pc}

080098b6 <__swrite>:
 80098b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ba:	461f      	mov	r7, r3
 80098bc:	898b      	ldrh	r3, [r1, #12]
 80098be:	05db      	lsls	r3, r3, #23
 80098c0:	4605      	mov	r5, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	4616      	mov	r6, r2
 80098c6:	d505      	bpl.n	80098d4 <__swrite+0x1e>
 80098c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098cc:	2302      	movs	r3, #2
 80098ce:	2200      	movs	r2, #0
 80098d0:	f000 f84e 	bl	8009970 <_lseek_r>
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	4632      	mov	r2, r6
 80098e2:	463b      	mov	r3, r7
 80098e4:	4628      	mov	r0, r5
 80098e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098ea:	f000 b865 	b.w	80099b8 <_write_r>

080098ee <__sseek>:
 80098ee:	b510      	push	{r4, lr}
 80098f0:	460c      	mov	r4, r1
 80098f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f6:	f000 f83b 	bl	8009970 <_lseek_r>
 80098fa:	1c43      	adds	r3, r0, #1
 80098fc:	89a3      	ldrh	r3, [r4, #12]
 80098fe:	bf15      	itete	ne
 8009900:	6560      	strne	r0, [r4, #84]	; 0x54
 8009902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800990a:	81a3      	strheq	r3, [r4, #12]
 800990c:	bf18      	it	ne
 800990e:	81a3      	strhne	r3, [r4, #12]
 8009910:	bd10      	pop	{r4, pc}

08009912 <__sclose>:
 8009912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009916:	f000 b81b 	b.w	8009950 <_close_r>

0800991a <memset>:
 800991a:	4402      	add	r2, r0
 800991c:	4603      	mov	r3, r0
 800991e:	4293      	cmp	r3, r2
 8009920:	d100      	bne.n	8009924 <memset+0xa>
 8009922:	4770      	bx	lr
 8009924:	f803 1b01 	strb.w	r1, [r3], #1
 8009928:	e7f9      	b.n	800991e <memset+0x4>

0800992a <strncmp>:
 800992a:	b510      	push	{r4, lr}
 800992c:	b16a      	cbz	r2, 800994a <strncmp+0x20>
 800992e:	3901      	subs	r1, #1
 8009930:	1884      	adds	r4, r0, r2
 8009932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009936:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800993a:	429a      	cmp	r2, r3
 800993c:	d103      	bne.n	8009946 <strncmp+0x1c>
 800993e:	42a0      	cmp	r0, r4
 8009940:	d001      	beq.n	8009946 <strncmp+0x1c>
 8009942:	2a00      	cmp	r2, #0
 8009944:	d1f5      	bne.n	8009932 <strncmp+0x8>
 8009946:	1ad0      	subs	r0, r2, r3
 8009948:	bd10      	pop	{r4, pc}
 800994a:	4610      	mov	r0, r2
 800994c:	e7fc      	b.n	8009948 <strncmp+0x1e>
	...

08009950 <_close_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4d06      	ldr	r5, [pc, #24]	; (800996c <_close_r+0x1c>)
 8009954:	2300      	movs	r3, #0
 8009956:	4604      	mov	r4, r0
 8009958:	4608      	mov	r0, r1
 800995a:	602b      	str	r3, [r5, #0]
 800995c:	f7f8 fd39 	bl	80023d2 <_close>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_close_r+0x1a>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b103      	cbz	r3, 800996a <_close_r+0x1a>
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	20000714 	.word	0x20000714

08009970 <_lseek_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d07      	ldr	r5, [pc, #28]	; (8009990 <_lseek_r+0x20>)
 8009974:	4604      	mov	r4, r0
 8009976:	4608      	mov	r0, r1
 8009978:	4611      	mov	r1, r2
 800997a:	2200      	movs	r2, #0
 800997c:	602a      	str	r2, [r5, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	f7f8 fd4e 	bl	8002420 <_lseek>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d102      	bne.n	800998e <_lseek_r+0x1e>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	b103      	cbz	r3, 800998e <_lseek_r+0x1e>
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	20000714 	.word	0x20000714

08009994 <_read_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	4d07      	ldr	r5, [pc, #28]	; (80099b4 <_read_r+0x20>)
 8009998:	4604      	mov	r4, r0
 800999a:	4608      	mov	r0, r1
 800999c:	4611      	mov	r1, r2
 800999e:	2200      	movs	r2, #0
 80099a0:	602a      	str	r2, [r5, #0]
 80099a2:	461a      	mov	r2, r3
 80099a4:	f7f8 fcdc 	bl	8002360 <_read>
 80099a8:	1c43      	adds	r3, r0, #1
 80099aa:	d102      	bne.n	80099b2 <_read_r+0x1e>
 80099ac:	682b      	ldr	r3, [r5, #0]
 80099ae:	b103      	cbz	r3, 80099b2 <_read_r+0x1e>
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	bd38      	pop	{r3, r4, r5, pc}
 80099b4:	20000714 	.word	0x20000714

080099b8 <_write_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d07      	ldr	r5, [pc, #28]	; (80099d8 <_write_r+0x20>)
 80099bc:	4604      	mov	r4, r0
 80099be:	4608      	mov	r0, r1
 80099c0:	4611      	mov	r1, r2
 80099c2:	2200      	movs	r2, #0
 80099c4:	602a      	str	r2, [r5, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f7f8 fce7 	bl	800239a <_write>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_write_r+0x1e>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_write_r+0x1e>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	20000714 	.word	0x20000714

080099dc <__errno>:
 80099dc:	4b01      	ldr	r3, [pc, #4]	; (80099e4 <__errno+0x8>)
 80099de:	6818      	ldr	r0, [r3, #0]
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	200001e4 	.word	0x200001e4

080099e8 <__libc_init_array>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	4d0d      	ldr	r5, [pc, #52]	; (8009a20 <__libc_init_array+0x38>)
 80099ec:	4c0d      	ldr	r4, [pc, #52]	; (8009a24 <__libc_init_array+0x3c>)
 80099ee:	1b64      	subs	r4, r4, r5
 80099f0:	10a4      	asrs	r4, r4, #2
 80099f2:	2600      	movs	r6, #0
 80099f4:	42a6      	cmp	r6, r4
 80099f6:	d109      	bne.n	8009a0c <__libc_init_array+0x24>
 80099f8:	4d0b      	ldr	r5, [pc, #44]	; (8009a28 <__libc_init_array+0x40>)
 80099fa:	4c0c      	ldr	r4, [pc, #48]	; (8009a2c <__libc_init_array+0x44>)
 80099fc:	f001 fe8a 	bl	800b714 <_init>
 8009a00:	1b64      	subs	r4, r4, r5
 8009a02:	10a4      	asrs	r4, r4, #2
 8009a04:	2600      	movs	r6, #0
 8009a06:	42a6      	cmp	r6, r4
 8009a08:	d105      	bne.n	8009a16 <__libc_init_array+0x2e>
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}
 8009a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a10:	4798      	blx	r3
 8009a12:	3601      	adds	r6, #1
 8009a14:	e7ee      	b.n	80099f4 <__libc_init_array+0xc>
 8009a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a1a:	4798      	blx	r3
 8009a1c:	3601      	adds	r6, #1
 8009a1e:	e7f2      	b.n	8009a06 <__libc_init_array+0x1e>
 8009a20:	0800bd24 	.word	0x0800bd24
 8009a24:	0800bd24 	.word	0x0800bd24
 8009a28:	0800bd24 	.word	0x0800bd24
 8009a2c:	0800bd2c 	.word	0x0800bd2c

08009a30 <__retarget_lock_init_recursive>:
 8009a30:	4770      	bx	lr

08009a32 <__retarget_lock_acquire_recursive>:
 8009a32:	4770      	bx	lr

08009a34 <__retarget_lock_release_recursive>:
 8009a34:	4770      	bx	lr

08009a36 <memcpy>:
 8009a36:	440a      	add	r2, r1
 8009a38:	4291      	cmp	r1, r2
 8009a3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a3e:	d100      	bne.n	8009a42 <memcpy+0xc>
 8009a40:	4770      	bx	lr
 8009a42:	b510      	push	{r4, lr}
 8009a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a4c:	4291      	cmp	r1, r2
 8009a4e:	d1f9      	bne.n	8009a44 <memcpy+0xe>
 8009a50:	bd10      	pop	{r4, pc}
	...

08009a54 <_free_r>:
 8009a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a56:	2900      	cmp	r1, #0
 8009a58:	d044      	beq.n	8009ae4 <_free_r+0x90>
 8009a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a5e:	9001      	str	r0, [sp, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f1a1 0404 	sub.w	r4, r1, #4
 8009a66:	bfb8      	it	lt
 8009a68:	18e4      	addlt	r4, r4, r3
 8009a6a:	f000 fc49 	bl	800a300 <__malloc_lock>
 8009a6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ae8 <_free_r+0x94>)
 8009a70:	9801      	ldr	r0, [sp, #4]
 8009a72:	6813      	ldr	r3, [r2, #0]
 8009a74:	b933      	cbnz	r3, 8009a84 <_free_r+0x30>
 8009a76:	6063      	str	r3, [r4, #4]
 8009a78:	6014      	str	r4, [r2, #0]
 8009a7a:	b003      	add	sp, #12
 8009a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a80:	f000 bc44 	b.w	800a30c <__malloc_unlock>
 8009a84:	42a3      	cmp	r3, r4
 8009a86:	d908      	bls.n	8009a9a <_free_r+0x46>
 8009a88:	6825      	ldr	r5, [r4, #0]
 8009a8a:	1961      	adds	r1, r4, r5
 8009a8c:	428b      	cmp	r3, r1
 8009a8e:	bf01      	itttt	eq
 8009a90:	6819      	ldreq	r1, [r3, #0]
 8009a92:	685b      	ldreq	r3, [r3, #4]
 8009a94:	1949      	addeq	r1, r1, r5
 8009a96:	6021      	streq	r1, [r4, #0]
 8009a98:	e7ed      	b.n	8009a76 <_free_r+0x22>
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	b10b      	cbz	r3, 8009aa4 <_free_r+0x50>
 8009aa0:	42a3      	cmp	r3, r4
 8009aa2:	d9fa      	bls.n	8009a9a <_free_r+0x46>
 8009aa4:	6811      	ldr	r1, [r2, #0]
 8009aa6:	1855      	adds	r5, r2, r1
 8009aa8:	42a5      	cmp	r5, r4
 8009aaa:	d10b      	bne.n	8009ac4 <_free_r+0x70>
 8009aac:	6824      	ldr	r4, [r4, #0]
 8009aae:	4421      	add	r1, r4
 8009ab0:	1854      	adds	r4, r2, r1
 8009ab2:	42a3      	cmp	r3, r4
 8009ab4:	6011      	str	r1, [r2, #0]
 8009ab6:	d1e0      	bne.n	8009a7a <_free_r+0x26>
 8009ab8:	681c      	ldr	r4, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	6053      	str	r3, [r2, #4]
 8009abe:	440c      	add	r4, r1
 8009ac0:	6014      	str	r4, [r2, #0]
 8009ac2:	e7da      	b.n	8009a7a <_free_r+0x26>
 8009ac4:	d902      	bls.n	8009acc <_free_r+0x78>
 8009ac6:	230c      	movs	r3, #12
 8009ac8:	6003      	str	r3, [r0, #0]
 8009aca:	e7d6      	b.n	8009a7a <_free_r+0x26>
 8009acc:	6825      	ldr	r5, [r4, #0]
 8009ace:	1961      	adds	r1, r4, r5
 8009ad0:	428b      	cmp	r3, r1
 8009ad2:	bf04      	itt	eq
 8009ad4:	6819      	ldreq	r1, [r3, #0]
 8009ad6:	685b      	ldreq	r3, [r3, #4]
 8009ad8:	6063      	str	r3, [r4, #4]
 8009ada:	bf04      	itt	eq
 8009adc:	1949      	addeq	r1, r1, r5
 8009ade:	6021      	streq	r1, [r4, #0]
 8009ae0:	6054      	str	r4, [r2, #4]
 8009ae2:	e7ca      	b.n	8009a7a <_free_r+0x26>
 8009ae4:	b003      	add	sp, #12
 8009ae6:	bd30      	pop	{r4, r5, pc}
 8009ae8:	2000071c 	.word	0x2000071c

08009aec <rshift>:
 8009aec:	6903      	ldr	r3, [r0, #16]
 8009aee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009af2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009af6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009afa:	f100 0414 	add.w	r4, r0, #20
 8009afe:	dd45      	ble.n	8009b8c <rshift+0xa0>
 8009b00:	f011 011f 	ands.w	r1, r1, #31
 8009b04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b0c:	d10c      	bne.n	8009b28 <rshift+0x3c>
 8009b0e:	f100 0710 	add.w	r7, r0, #16
 8009b12:	4629      	mov	r1, r5
 8009b14:	42b1      	cmp	r1, r6
 8009b16:	d334      	bcc.n	8009b82 <rshift+0x96>
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	1eea      	subs	r2, r5, #3
 8009b1e:	4296      	cmp	r6, r2
 8009b20:	bf38      	it	cc
 8009b22:	2300      	movcc	r3, #0
 8009b24:	4423      	add	r3, r4
 8009b26:	e015      	b.n	8009b54 <rshift+0x68>
 8009b28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b2c:	f1c1 0820 	rsb	r8, r1, #32
 8009b30:	40cf      	lsrs	r7, r1
 8009b32:	f105 0e04 	add.w	lr, r5, #4
 8009b36:	46a1      	mov	r9, r4
 8009b38:	4576      	cmp	r6, lr
 8009b3a:	46f4      	mov	ip, lr
 8009b3c:	d815      	bhi.n	8009b6a <rshift+0x7e>
 8009b3e:	1a9a      	subs	r2, r3, r2
 8009b40:	0092      	lsls	r2, r2, #2
 8009b42:	3a04      	subs	r2, #4
 8009b44:	3501      	adds	r5, #1
 8009b46:	42ae      	cmp	r6, r5
 8009b48:	bf38      	it	cc
 8009b4a:	2200      	movcc	r2, #0
 8009b4c:	18a3      	adds	r3, r4, r2
 8009b4e:	50a7      	str	r7, [r4, r2]
 8009b50:	b107      	cbz	r7, 8009b54 <rshift+0x68>
 8009b52:	3304      	adds	r3, #4
 8009b54:	1b1a      	subs	r2, r3, r4
 8009b56:	42a3      	cmp	r3, r4
 8009b58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b5c:	bf08      	it	eq
 8009b5e:	2300      	moveq	r3, #0
 8009b60:	6102      	str	r2, [r0, #16]
 8009b62:	bf08      	it	eq
 8009b64:	6143      	streq	r3, [r0, #20]
 8009b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b6a:	f8dc c000 	ldr.w	ip, [ip]
 8009b6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b72:	ea4c 0707 	orr.w	r7, ip, r7
 8009b76:	f849 7b04 	str.w	r7, [r9], #4
 8009b7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b7e:	40cf      	lsrs	r7, r1
 8009b80:	e7da      	b.n	8009b38 <rshift+0x4c>
 8009b82:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b86:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b8a:	e7c3      	b.n	8009b14 <rshift+0x28>
 8009b8c:	4623      	mov	r3, r4
 8009b8e:	e7e1      	b.n	8009b54 <rshift+0x68>

08009b90 <__hexdig_fun>:
 8009b90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b94:	2b09      	cmp	r3, #9
 8009b96:	d802      	bhi.n	8009b9e <__hexdig_fun+0xe>
 8009b98:	3820      	subs	r0, #32
 8009b9a:	b2c0      	uxtb	r0, r0
 8009b9c:	4770      	bx	lr
 8009b9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ba2:	2b05      	cmp	r3, #5
 8009ba4:	d801      	bhi.n	8009baa <__hexdig_fun+0x1a>
 8009ba6:	3847      	subs	r0, #71	; 0x47
 8009ba8:	e7f7      	b.n	8009b9a <__hexdig_fun+0xa>
 8009baa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009bae:	2b05      	cmp	r3, #5
 8009bb0:	d801      	bhi.n	8009bb6 <__hexdig_fun+0x26>
 8009bb2:	3827      	subs	r0, #39	; 0x27
 8009bb4:	e7f1      	b.n	8009b9a <__hexdig_fun+0xa>
 8009bb6:	2000      	movs	r0, #0
 8009bb8:	4770      	bx	lr
	...

08009bbc <__gethex>:
 8009bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	4617      	mov	r7, r2
 8009bc2:	680a      	ldr	r2, [r1, #0]
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	f102 0b02 	add.w	fp, r2, #2
 8009bca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009bce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009bd2:	4681      	mov	r9, r0
 8009bd4:	468a      	mov	sl, r1
 8009bd6:	9302      	str	r3, [sp, #8]
 8009bd8:	32fe      	adds	r2, #254	; 0xfe
 8009bda:	eb02 030b 	add.w	r3, r2, fp
 8009bde:	46d8      	mov	r8, fp
 8009be0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	2830      	cmp	r0, #48	; 0x30
 8009be8:	d0f7      	beq.n	8009bda <__gethex+0x1e>
 8009bea:	f7ff ffd1 	bl	8009b90 <__hexdig_fun>
 8009bee:	4604      	mov	r4, r0
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d138      	bne.n	8009c66 <__gethex+0xaa>
 8009bf4:	49a7      	ldr	r1, [pc, #668]	; (8009e94 <__gethex+0x2d8>)
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	4640      	mov	r0, r8
 8009bfa:	f7ff fe96 	bl	800992a <strncmp>
 8009bfe:	4606      	mov	r6, r0
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d169      	bne.n	8009cd8 <__gethex+0x11c>
 8009c04:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009c08:	465d      	mov	r5, fp
 8009c0a:	f7ff ffc1 	bl	8009b90 <__hexdig_fun>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d064      	beq.n	8009cdc <__gethex+0x120>
 8009c12:	465a      	mov	r2, fp
 8009c14:	7810      	ldrb	r0, [r2, #0]
 8009c16:	2830      	cmp	r0, #48	; 0x30
 8009c18:	4690      	mov	r8, r2
 8009c1a:	f102 0201 	add.w	r2, r2, #1
 8009c1e:	d0f9      	beq.n	8009c14 <__gethex+0x58>
 8009c20:	f7ff ffb6 	bl	8009b90 <__hexdig_fun>
 8009c24:	2301      	movs	r3, #1
 8009c26:	fab0 f480 	clz	r4, r0
 8009c2a:	0964      	lsrs	r4, r4, #5
 8009c2c:	465e      	mov	r6, fp
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	4642      	mov	r2, r8
 8009c32:	4615      	mov	r5, r2
 8009c34:	3201      	adds	r2, #1
 8009c36:	7828      	ldrb	r0, [r5, #0]
 8009c38:	f7ff ffaa 	bl	8009b90 <__hexdig_fun>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d1f8      	bne.n	8009c32 <__gethex+0x76>
 8009c40:	4994      	ldr	r1, [pc, #592]	; (8009e94 <__gethex+0x2d8>)
 8009c42:	2201      	movs	r2, #1
 8009c44:	4628      	mov	r0, r5
 8009c46:	f7ff fe70 	bl	800992a <strncmp>
 8009c4a:	b978      	cbnz	r0, 8009c6c <__gethex+0xb0>
 8009c4c:	b946      	cbnz	r6, 8009c60 <__gethex+0xa4>
 8009c4e:	1c6e      	adds	r6, r5, #1
 8009c50:	4632      	mov	r2, r6
 8009c52:	4615      	mov	r5, r2
 8009c54:	3201      	adds	r2, #1
 8009c56:	7828      	ldrb	r0, [r5, #0]
 8009c58:	f7ff ff9a 	bl	8009b90 <__hexdig_fun>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d1f8      	bne.n	8009c52 <__gethex+0x96>
 8009c60:	1b73      	subs	r3, r6, r5
 8009c62:	009e      	lsls	r6, r3, #2
 8009c64:	e004      	b.n	8009c70 <__gethex+0xb4>
 8009c66:	2400      	movs	r4, #0
 8009c68:	4626      	mov	r6, r4
 8009c6a:	e7e1      	b.n	8009c30 <__gethex+0x74>
 8009c6c:	2e00      	cmp	r6, #0
 8009c6e:	d1f7      	bne.n	8009c60 <__gethex+0xa4>
 8009c70:	782b      	ldrb	r3, [r5, #0]
 8009c72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c76:	2b50      	cmp	r3, #80	; 0x50
 8009c78:	d13d      	bne.n	8009cf6 <__gethex+0x13a>
 8009c7a:	786b      	ldrb	r3, [r5, #1]
 8009c7c:	2b2b      	cmp	r3, #43	; 0x2b
 8009c7e:	d02f      	beq.n	8009ce0 <__gethex+0x124>
 8009c80:	2b2d      	cmp	r3, #45	; 0x2d
 8009c82:	d031      	beq.n	8009ce8 <__gethex+0x12c>
 8009c84:	1c69      	adds	r1, r5, #1
 8009c86:	f04f 0b00 	mov.w	fp, #0
 8009c8a:	7808      	ldrb	r0, [r1, #0]
 8009c8c:	f7ff ff80 	bl	8009b90 <__hexdig_fun>
 8009c90:	1e42      	subs	r2, r0, #1
 8009c92:	b2d2      	uxtb	r2, r2
 8009c94:	2a18      	cmp	r2, #24
 8009c96:	d82e      	bhi.n	8009cf6 <__gethex+0x13a>
 8009c98:	f1a0 0210 	sub.w	r2, r0, #16
 8009c9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ca0:	f7ff ff76 	bl	8009b90 <__hexdig_fun>
 8009ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8009ca8:	fa5f fc8c 	uxtb.w	ip, ip
 8009cac:	f1bc 0f18 	cmp.w	ip, #24
 8009cb0:	d91d      	bls.n	8009cee <__gethex+0x132>
 8009cb2:	f1bb 0f00 	cmp.w	fp, #0
 8009cb6:	d000      	beq.n	8009cba <__gethex+0xfe>
 8009cb8:	4252      	negs	r2, r2
 8009cba:	4416      	add	r6, r2
 8009cbc:	f8ca 1000 	str.w	r1, [sl]
 8009cc0:	b1dc      	cbz	r4, 8009cfa <__gethex+0x13e>
 8009cc2:	9b01      	ldr	r3, [sp, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bf14      	ite	ne
 8009cc8:	f04f 0800 	movne.w	r8, #0
 8009ccc:	f04f 0806 	moveq.w	r8, #6
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	b005      	add	sp, #20
 8009cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd8:	4645      	mov	r5, r8
 8009cda:	4626      	mov	r6, r4
 8009cdc:	2401      	movs	r4, #1
 8009cde:	e7c7      	b.n	8009c70 <__gethex+0xb4>
 8009ce0:	f04f 0b00 	mov.w	fp, #0
 8009ce4:	1ca9      	adds	r1, r5, #2
 8009ce6:	e7d0      	b.n	8009c8a <__gethex+0xce>
 8009ce8:	f04f 0b01 	mov.w	fp, #1
 8009cec:	e7fa      	b.n	8009ce4 <__gethex+0x128>
 8009cee:	230a      	movs	r3, #10
 8009cf0:	fb03 0002 	mla	r0, r3, r2, r0
 8009cf4:	e7d0      	b.n	8009c98 <__gethex+0xdc>
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	e7e0      	b.n	8009cbc <__gethex+0x100>
 8009cfa:	eba5 0308 	sub.w	r3, r5, r8
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	4621      	mov	r1, r4
 8009d02:	2b07      	cmp	r3, #7
 8009d04:	dc0a      	bgt.n	8009d1c <__gethex+0x160>
 8009d06:	4648      	mov	r0, r9
 8009d08:	f000 fb06 	bl	800a318 <_Balloc>
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	b940      	cbnz	r0, 8009d22 <__gethex+0x166>
 8009d10:	4b61      	ldr	r3, [pc, #388]	; (8009e98 <__gethex+0x2dc>)
 8009d12:	4602      	mov	r2, r0
 8009d14:	21e4      	movs	r1, #228	; 0xe4
 8009d16:	4861      	ldr	r0, [pc, #388]	; (8009e9c <__gethex+0x2e0>)
 8009d18:	f001 f876 	bl	800ae08 <__assert_func>
 8009d1c:	3101      	adds	r1, #1
 8009d1e:	105b      	asrs	r3, r3, #1
 8009d20:	e7ef      	b.n	8009d02 <__gethex+0x146>
 8009d22:	f100 0a14 	add.w	sl, r0, #20
 8009d26:	2300      	movs	r3, #0
 8009d28:	495a      	ldr	r1, [pc, #360]	; (8009e94 <__gethex+0x2d8>)
 8009d2a:	f8cd a004 	str.w	sl, [sp, #4]
 8009d2e:	469b      	mov	fp, r3
 8009d30:	45a8      	cmp	r8, r5
 8009d32:	d342      	bcc.n	8009dba <__gethex+0x1fe>
 8009d34:	9801      	ldr	r0, [sp, #4]
 8009d36:	f840 bb04 	str.w	fp, [r0], #4
 8009d3a:	eba0 000a 	sub.w	r0, r0, sl
 8009d3e:	1080      	asrs	r0, r0, #2
 8009d40:	6120      	str	r0, [r4, #16]
 8009d42:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009d46:	4658      	mov	r0, fp
 8009d48:	f000 fbd8 	bl	800a4fc <__hi0bits>
 8009d4c:	683d      	ldr	r5, [r7, #0]
 8009d4e:	eba8 0000 	sub.w	r0, r8, r0
 8009d52:	42a8      	cmp	r0, r5
 8009d54:	dd59      	ble.n	8009e0a <__gethex+0x24e>
 8009d56:	eba0 0805 	sub.w	r8, r0, r5
 8009d5a:	4641      	mov	r1, r8
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f000 ff67 	bl	800ac30 <__any_on>
 8009d62:	4683      	mov	fp, r0
 8009d64:	b1b8      	cbz	r0, 8009d96 <__gethex+0x1da>
 8009d66:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d6a:	1159      	asrs	r1, r3, #5
 8009d6c:	f003 021f 	and.w	r2, r3, #31
 8009d70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d74:	f04f 0b01 	mov.w	fp, #1
 8009d78:	fa0b f202 	lsl.w	r2, fp, r2
 8009d7c:	420a      	tst	r2, r1
 8009d7e:	d00a      	beq.n	8009d96 <__gethex+0x1da>
 8009d80:	455b      	cmp	r3, fp
 8009d82:	dd06      	ble.n	8009d92 <__gethex+0x1d6>
 8009d84:	f1a8 0102 	sub.w	r1, r8, #2
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 ff51 	bl	800ac30 <__any_on>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d138      	bne.n	8009e04 <__gethex+0x248>
 8009d92:	f04f 0b02 	mov.w	fp, #2
 8009d96:	4641      	mov	r1, r8
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f7ff fea7 	bl	8009aec <rshift>
 8009d9e:	4446      	add	r6, r8
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	42b3      	cmp	r3, r6
 8009da4:	da41      	bge.n	8009e2a <__gethex+0x26e>
 8009da6:	4621      	mov	r1, r4
 8009da8:	4648      	mov	r0, r9
 8009daa:	f000 faf5 	bl	800a398 <_Bfree>
 8009dae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009db0:	2300      	movs	r3, #0
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009db8:	e78a      	b.n	8009cd0 <__gethex+0x114>
 8009dba:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009dbe:	2a2e      	cmp	r2, #46	; 0x2e
 8009dc0:	d014      	beq.n	8009dec <__gethex+0x230>
 8009dc2:	2b20      	cmp	r3, #32
 8009dc4:	d106      	bne.n	8009dd4 <__gethex+0x218>
 8009dc6:	9b01      	ldr	r3, [sp, #4]
 8009dc8:	f843 bb04 	str.w	fp, [r3], #4
 8009dcc:	f04f 0b00 	mov.w	fp, #0
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	465b      	mov	r3, fp
 8009dd4:	7828      	ldrb	r0, [r5, #0]
 8009dd6:	9303      	str	r3, [sp, #12]
 8009dd8:	f7ff feda 	bl	8009b90 <__hexdig_fun>
 8009ddc:	9b03      	ldr	r3, [sp, #12]
 8009dde:	f000 000f 	and.w	r0, r0, #15
 8009de2:	4098      	lsls	r0, r3
 8009de4:	ea4b 0b00 	orr.w	fp, fp, r0
 8009de8:	3304      	adds	r3, #4
 8009dea:	e7a1      	b.n	8009d30 <__gethex+0x174>
 8009dec:	45a8      	cmp	r8, r5
 8009dee:	d8e8      	bhi.n	8009dc2 <__gethex+0x206>
 8009df0:	2201      	movs	r2, #1
 8009df2:	4628      	mov	r0, r5
 8009df4:	9303      	str	r3, [sp, #12]
 8009df6:	f7ff fd98 	bl	800992a <strncmp>
 8009dfa:	4926      	ldr	r1, [pc, #152]	; (8009e94 <__gethex+0x2d8>)
 8009dfc:	9b03      	ldr	r3, [sp, #12]
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d1df      	bne.n	8009dc2 <__gethex+0x206>
 8009e02:	e795      	b.n	8009d30 <__gethex+0x174>
 8009e04:	f04f 0b03 	mov.w	fp, #3
 8009e08:	e7c5      	b.n	8009d96 <__gethex+0x1da>
 8009e0a:	da0b      	bge.n	8009e24 <__gethex+0x268>
 8009e0c:	eba5 0800 	sub.w	r8, r5, r0
 8009e10:	4621      	mov	r1, r4
 8009e12:	4642      	mov	r2, r8
 8009e14:	4648      	mov	r0, r9
 8009e16:	f000 fcd9 	bl	800a7cc <__lshift>
 8009e1a:	eba6 0608 	sub.w	r6, r6, r8
 8009e1e:	4604      	mov	r4, r0
 8009e20:	f100 0a14 	add.w	sl, r0, #20
 8009e24:	f04f 0b00 	mov.w	fp, #0
 8009e28:	e7ba      	b.n	8009da0 <__gethex+0x1e4>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	42b3      	cmp	r3, r6
 8009e2e:	dd73      	ble.n	8009f18 <__gethex+0x35c>
 8009e30:	1b9e      	subs	r6, r3, r6
 8009e32:	42b5      	cmp	r5, r6
 8009e34:	dc34      	bgt.n	8009ea0 <__gethex+0x2e4>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d023      	beq.n	8009e84 <__gethex+0x2c8>
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	d025      	beq.n	8009e8c <__gethex+0x2d0>
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d115      	bne.n	8009e70 <__gethex+0x2b4>
 8009e44:	42b5      	cmp	r5, r6
 8009e46:	d113      	bne.n	8009e70 <__gethex+0x2b4>
 8009e48:	2d01      	cmp	r5, #1
 8009e4a:	d10b      	bne.n	8009e64 <__gethex+0x2a8>
 8009e4c:	9a02      	ldr	r2, [sp, #8]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	2301      	movs	r3, #1
 8009e54:	6123      	str	r3, [r4, #16]
 8009e56:	f8ca 3000 	str.w	r3, [sl]
 8009e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e5c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009e60:	601c      	str	r4, [r3, #0]
 8009e62:	e735      	b.n	8009cd0 <__gethex+0x114>
 8009e64:	1e69      	subs	r1, r5, #1
 8009e66:	4620      	mov	r0, r4
 8009e68:	f000 fee2 	bl	800ac30 <__any_on>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d1ed      	bne.n	8009e4c <__gethex+0x290>
 8009e70:	4621      	mov	r1, r4
 8009e72:	4648      	mov	r0, r9
 8009e74:	f000 fa90 	bl	800a398 <_Bfree>
 8009e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	6013      	str	r3, [r2, #0]
 8009e7e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009e82:	e725      	b.n	8009cd0 <__gethex+0x114>
 8009e84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1f2      	bne.n	8009e70 <__gethex+0x2b4>
 8009e8a:	e7df      	b.n	8009e4c <__gethex+0x290>
 8009e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1dc      	bne.n	8009e4c <__gethex+0x290>
 8009e92:	e7ed      	b.n	8009e70 <__gethex+0x2b4>
 8009e94:	0800b960 	.word	0x0800b960
 8009e98:	0800b9c8 	.word	0x0800b9c8
 8009e9c:	0800b9d9 	.word	0x0800b9d9
 8009ea0:	f106 38ff 	add.w	r8, r6, #4294967295
 8009ea4:	f1bb 0f00 	cmp.w	fp, #0
 8009ea8:	d133      	bne.n	8009f12 <__gethex+0x356>
 8009eaa:	f1b8 0f00 	cmp.w	r8, #0
 8009eae:	d004      	beq.n	8009eba <__gethex+0x2fe>
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 febc 	bl	800ac30 <__any_on>
 8009eb8:	4683      	mov	fp, r0
 8009eba:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009ec4:	f008 081f 	and.w	r8, r8, #31
 8009ec8:	fa03 f308 	lsl.w	r3, r3, r8
 8009ecc:	4213      	tst	r3, r2
 8009ece:	4631      	mov	r1, r6
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	bf18      	it	ne
 8009ed4:	f04b 0b02 	orrne.w	fp, fp, #2
 8009ed8:	1bad      	subs	r5, r5, r6
 8009eda:	f7ff fe07 	bl	8009aec <rshift>
 8009ede:	687e      	ldr	r6, [r7, #4]
 8009ee0:	f04f 0802 	mov.w	r8, #2
 8009ee4:	f1bb 0f00 	cmp.w	fp, #0
 8009ee8:	d04a      	beq.n	8009f80 <__gethex+0x3c4>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d016      	beq.n	8009f1e <__gethex+0x362>
 8009ef0:	2b03      	cmp	r3, #3
 8009ef2:	d018      	beq.n	8009f26 <__gethex+0x36a>
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d109      	bne.n	8009f0c <__gethex+0x350>
 8009ef8:	f01b 0f02 	tst.w	fp, #2
 8009efc:	d006      	beq.n	8009f0c <__gethex+0x350>
 8009efe:	f8da 3000 	ldr.w	r3, [sl]
 8009f02:	ea4b 0b03 	orr.w	fp, fp, r3
 8009f06:	f01b 0f01 	tst.w	fp, #1
 8009f0a:	d10f      	bne.n	8009f2c <__gethex+0x370>
 8009f0c:	f048 0810 	orr.w	r8, r8, #16
 8009f10:	e036      	b.n	8009f80 <__gethex+0x3c4>
 8009f12:	f04f 0b01 	mov.w	fp, #1
 8009f16:	e7d0      	b.n	8009eba <__gethex+0x2fe>
 8009f18:	f04f 0801 	mov.w	r8, #1
 8009f1c:	e7e2      	b.n	8009ee4 <__gethex+0x328>
 8009f1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f20:	f1c3 0301 	rsb	r3, r3, #1
 8009f24:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d0ef      	beq.n	8009f0c <__gethex+0x350>
 8009f2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f30:	f104 0214 	add.w	r2, r4, #20
 8009f34:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4694      	mov	ip, r2
 8009f42:	f852 1b04 	ldr.w	r1, [r2], #4
 8009f46:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009f4a:	d01e      	beq.n	8009f8a <__gethex+0x3ce>
 8009f4c:	3101      	adds	r1, #1
 8009f4e:	f8cc 1000 	str.w	r1, [ip]
 8009f52:	f1b8 0f02 	cmp.w	r8, #2
 8009f56:	f104 0214 	add.w	r2, r4, #20
 8009f5a:	d13d      	bne.n	8009fd8 <__gethex+0x41c>
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	42ab      	cmp	r3, r5
 8009f62:	d10b      	bne.n	8009f7c <__gethex+0x3c0>
 8009f64:	1169      	asrs	r1, r5, #5
 8009f66:	2301      	movs	r3, #1
 8009f68:	f005 051f 	and.w	r5, r5, #31
 8009f6c:	fa03 f505 	lsl.w	r5, r3, r5
 8009f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f74:	421d      	tst	r5, r3
 8009f76:	bf18      	it	ne
 8009f78:	f04f 0801 	movne.w	r8, #1
 8009f7c:	f048 0820 	orr.w	r8, r8, #32
 8009f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f82:	601c      	str	r4, [r3, #0]
 8009f84:	9b02      	ldr	r3, [sp, #8]
 8009f86:	601e      	str	r6, [r3, #0]
 8009f88:	e6a2      	b.n	8009cd0 <__gethex+0x114>
 8009f8a:	4290      	cmp	r0, r2
 8009f8c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009f90:	d8d6      	bhi.n	8009f40 <__gethex+0x384>
 8009f92:	68a2      	ldr	r2, [r4, #8]
 8009f94:	4593      	cmp	fp, r2
 8009f96:	db17      	blt.n	8009fc8 <__gethex+0x40c>
 8009f98:	6861      	ldr	r1, [r4, #4]
 8009f9a:	4648      	mov	r0, r9
 8009f9c:	3101      	adds	r1, #1
 8009f9e:	f000 f9bb 	bl	800a318 <_Balloc>
 8009fa2:	4682      	mov	sl, r0
 8009fa4:	b918      	cbnz	r0, 8009fae <__gethex+0x3f2>
 8009fa6:	4b1b      	ldr	r3, [pc, #108]	; (800a014 <__gethex+0x458>)
 8009fa8:	4602      	mov	r2, r0
 8009faa:	2184      	movs	r1, #132	; 0x84
 8009fac:	e6b3      	b.n	8009d16 <__gethex+0x15a>
 8009fae:	6922      	ldr	r2, [r4, #16]
 8009fb0:	3202      	adds	r2, #2
 8009fb2:	f104 010c 	add.w	r1, r4, #12
 8009fb6:	0092      	lsls	r2, r2, #2
 8009fb8:	300c      	adds	r0, #12
 8009fba:	f7ff fd3c 	bl	8009a36 <memcpy>
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	4648      	mov	r0, r9
 8009fc2:	f000 f9e9 	bl	800a398 <_Bfree>
 8009fc6:	4654      	mov	r4, sl
 8009fc8:	6922      	ldr	r2, [r4, #16]
 8009fca:	1c51      	adds	r1, r2, #1
 8009fcc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009fd0:	6121      	str	r1, [r4, #16]
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	6151      	str	r1, [r2, #20]
 8009fd6:	e7bc      	b.n	8009f52 <__gethex+0x396>
 8009fd8:	6921      	ldr	r1, [r4, #16]
 8009fda:	4559      	cmp	r1, fp
 8009fdc:	dd0b      	ble.n	8009ff6 <__gethex+0x43a>
 8009fde:	2101      	movs	r1, #1
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f7ff fd83 	bl	8009aec <rshift>
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	3601      	adds	r6, #1
 8009fea:	42b3      	cmp	r3, r6
 8009fec:	f6ff aedb 	blt.w	8009da6 <__gethex+0x1ea>
 8009ff0:	f04f 0801 	mov.w	r8, #1
 8009ff4:	e7c2      	b.n	8009f7c <__gethex+0x3c0>
 8009ff6:	f015 051f 	ands.w	r5, r5, #31
 8009ffa:	d0f9      	beq.n	8009ff0 <__gethex+0x434>
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	441a      	add	r2, r3
 800a000:	f1c5 0520 	rsb	r5, r5, #32
 800a004:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a008:	f000 fa78 	bl	800a4fc <__hi0bits>
 800a00c:	42a8      	cmp	r0, r5
 800a00e:	dbe6      	blt.n	8009fde <__gethex+0x422>
 800a010:	e7ee      	b.n	8009ff0 <__gethex+0x434>
 800a012:	bf00      	nop
 800a014:	0800b9c8 	.word	0x0800b9c8

0800a018 <L_shift>:
 800a018:	f1c2 0208 	rsb	r2, r2, #8
 800a01c:	0092      	lsls	r2, r2, #2
 800a01e:	b570      	push	{r4, r5, r6, lr}
 800a020:	f1c2 0620 	rsb	r6, r2, #32
 800a024:	6843      	ldr	r3, [r0, #4]
 800a026:	6804      	ldr	r4, [r0, #0]
 800a028:	fa03 f506 	lsl.w	r5, r3, r6
 800a02c:	432c      	orrs	r4, r5
 800a02e:	40d3      	lsrs	r3, r2
 800a030:	6004      	str	r4, [r0, #0]
 800a032:	f840 3f04 	str.w	r3, [r0, #4]!
 800a036:	4288      	cmp	r0, r1
 800a038:	d3f4      	bcc.n	800a024 <L_shift+0xc>
 800a03a:	bd70      	pop	{r4, r5, r6, pc}

0800a03c <__match>:
 800a03c:	b530      	push	{r4, r5, lr}
 800a03e:	6803      	ldr	r3, [r0, #0]
 800a040:	3301      	adds	r3, #1
 800a042:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a046:	b914      	cbnz	r4, 800a04e <__match+0x12>
 800a048:	6003      	str	r3, [r0, #0]
 800a04a:	2001      	movs	r0, #1
 800a04c:	bd30      	pop	{r4, r5, pc}
 800a04e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a052:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a056:	2d19      	cmp	r5, #25
 800a058:	bf98      	it	ls
 800a05a:	3220      	addls	r2, #32
 800a05c:	42a2      	cmp	r2, r4
 800a05e:	d0f0      	beq.n	800a042 <__match+0x6>
 800a060:	2000      	movs	r0, #0
 800a062:	e7f3      	b.n	800a04c <__match+0x10>

0800a064 <__hexnan>:
 800a064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a068:	680b      	ldr	r3, [r1, #0]
 800a06a:	6801      	ldr	r1, [r0, #0]
 800a06c:	115e      	asrs	r6, r3, #5
 800a06e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a072:	f013 031f 	ands.w	r3, r3, #31
 800a076:	b087      	sub	sp, #28
 800a078:	bf18      	it	ne
 800a07a:	3604      	addne	r6, #4
 800a07c:	2500      	movs	r5, #0
 800a07e:	1f37      	subs	r7, r6, #4
 800a080:	4682      	mov	sl, r0
 800a082:	4690      	mov	r8, r2
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	f846 5c04 	str.w	r5, [r6, #-4]
 800a08a:	46b9      	mov	r9, r7
 800a08c:	463c      	mov	r4, r7
 800a08e:	9502      	str	r5, [sp, #8]
 800a090:	46ab      	mov	fp, r5
 800a092:	784a      	ldrb	r2, [r1, #1]
 800a094:	1c4b      	adds	r3, r1, #1
 800a096:	9303      	str	r3, [sp, #12]
 800a098:	b342      	cbz	r2, 800a0ec <__hexnan+0x88>
 800a09a:	4610      	mov	r0, r2
 800a09c:	9105      	str	r1, [sp, #20]
 800a09e:	9204      	str	r2, [sp, #16]
 800a0a0:	f7ff fd76 	bl	8009b90 <__hexdig_fun>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d14f      	bne.n	800a148 <__hexnan+0xe4>
 800a0a8:	9a04      	ldr	r2, [sp, #16]
 800a0aa:	9905      	ldr	r1, [sp, #20]
 800a0ac:	2a20      	cmp	r2, #32
 800a0ae:	d818      	bhi.n	800a0e2 <__hexnan+0x7e>
 800a0b0:	9b02      	ldr	r3, [sp, #8]
 800a0b2:	459b      	cmp	fp, r3
 800a0b4:	dd13      	ble.n	800a0de <__hexnan+0x7a>
 800a0b6:	454c      	cmp	r4, r9
 800a0b8:	d206      	bcs.n	800a0c8 <__hexnan+0x64>
 800a0ba:	2d07      	cmp	r5, #7
 800a0bc:	dc04      	bgt.n	800a0c8 <__hexnan+0x64>
 800a0be:	462a      	mov	r2, r5
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f7ff ffa8 	bl	800a018 <L_shift>
 800a0c8:	4544      	cmp	r4, r8
 800a0ca:	d950      	bls.n	800a16e <__hexnan+0x10a>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f1a4 0904 	sub.w	r9, r4, #4
 800a0d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0d6:	f8cd b008 	str.w	fp, [sp, #8]
 800a0da:	464c      	mov	r4, r9
 800a0dc:	461d      	mov	r5, r3
 800a0de:	9903      	ldr	r1, [sp, #12]
 800a0e0:	e7d7      	b.n	800a092 <__hexnan+0x2e>
 800a0e2:	2a29      	cmp	r2, #41	; 0x29
 800a0e4:	d155      	bne.n	800a192 <__hexnan+0x12e>
 800a0e6:	3102      	adds	r1, #2
 800a0e8:	f8ca 1000 	str.w	r1, [sl]
 800a0ec:	f1bb 0f00 	cmp.w	fp, #0
 800a0f0:	d04f      	beq.n	800a192 <__hexnan+0x12e>
 800a0f2:	454c      	cmp	r4, r9
 800a0f4:	d206      	bcs.n	800a104 <__hexnan+0xa0>
 800a0f6:	2d07      	cmp	r5, #7
 800a0f8:	dc04      	bgt.n	800a104 <__hexnan+0xa0>
 800a0fa:	462a      	mov	r2, r5
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	4620      	mov	r0, r4
 800a100:	f7ff ff8a 	bl	800a018 <L_shift>
 800a104:	4544      	cmp	r4, r8
 800a106:	d934      	bls.n	800a172 <__hexnan+0x10e>
 800a108:	f1a8 0204 	sub.w	r2, r8, #4
 800a10c:	4623      	mov	r3, r4
 800a10e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a112:	f842 1f04 	str.w	r1, [r2, #4]!
 800a116:	429f      	cmp	r7, r3
 800a118:	d2f9      	bcs.n	800a10e <__hexnan+0xaa>
 800a11a:	1b3b      	subs	r3, r7, r4
 800a11c:	f023 0303 	bic.w	r3, r3, #3
 800a120:	3304      	adds	r3, #4
 800a122:	3e03      	subs	r6, #3
 800a124:	3401      	adds	r4, #1
 800a126:	42a6      	cmp	r6, r4
 800a128:	bf38      	it	cc
 800a12a:	2304      	movcc	r3, #4
 800a12c:	4443      	add	r3, r8
 800a12e:	2200      	movs	r2, #0
 800a130:	f843 2b04 	str.w	r2, [r3], #4
 800a134:	429f      	cmp	r7, r3
 800a136:	d2fb      	bcs.n	800a130 <__hexnan+0xcc>
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	b91b      	cbnz	r3, 800a144 <__hexnan+0xe0>
 800a13c:	4547      	cmp	r7, r8
 800a13e:	d126      	bne.n	800a18e <__hexnan+0x12a>
 800a140:	2301      	movs	r3, #1
 800a142:	603b      	str	r3, [r7, #0]
 800a144:	2005      	movs	r0, #5
 800a146:	e025      	b.n	800a194 <__hexnan+0x130>
 800a148:	3501      	adds	r5, #1
 800a14a:	2d08      	cmp	r5, #8
 800a14c:	f10b 0b01 	add.w	fp, fp, #1
 800a150:	dd06      	ble.n	800a160 <__hexnan+0xfc>
 800a152:	4544      	cmp	r4, r8
 800a154:	d9c3      	bls.n	800a0de <__hexnan+0x7a>
 800a156:	2300      	movs	r3, #0
 800a158:	f844 3c04 	str.w	r3, [r4, #-4]
 800a15c:	2501      	movs	r5, #1
 800a15e:	3c04      	subs	r4, #4
 800a160:	6822      	ldr	r2, [r4, #0]
 800a162:	f000 000f 	and.w	r0, r0, #15
 800a166:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a16a:	6020      	str	r0, [r4, #0]
 800a16c:	e7b7      	b.n	800a0de <__hexnan+0x7a>
 800a16e:	2508      	movs	r5, #8
 800a170:	e7b5      	b.n	800a0de <__hexnan+0x7a>
 800a172:	9b01      	ldr	r3, [sp, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d0df      	beq.n	800a138 <__hexnan+0xd4>
 800a178:	f1c3 0320 	rsb	r3, r3, #32
 800a17c:	f04f 32ff 	mov.w	r2, #4294967295
 800a180:	40da      	lsrs	r2, r3
 800a182:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a186:	4013      	ands	r3, r2
 800a188:	f846 3c04 	str.w	r3, [r6, #-4]
 800a18c:	e7d4      	b.n	800a138 <__hexnan+0xd4>
 800a18e:	3f04      	subs	r7, #4
 800a190:	e7d2      	b.n	800a138 <__hexnan+0xd4>
 800a192:	2004      	movs	r0, #4
 800a194:	b007      	add	sp, #28
 800a196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a19c <sbrk_aligned>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	4e0e      	ldr	r6, [pc, #56]	; (800a1d8 <sbrk_aligned+0x3c>)
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	6831      	ldr	r1, [r6, #0]
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	b911      	cbnz	r1, 800a1ae <sbrk_aligned+0x12>
 800a1a8:	f000 fe1e 	bl	800ade8 <_sbrk_r>
 800a1ac:	6030      	str	r0, [r6, #0]
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f000 fe19 	bl	800ade8 <_sbrk_r>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	d00a      	beq.n	800a1d0 <sbrk_aligned+0x34>
 800a1ba:	1cc4      	adds	r4, r0, #3
 800a1bc:	f024 0403 	bic.w	r4, r4, #3
 800a1c0:	42a0      	cmp	r0, r4
 800a1c2:	d007      	beq.n	800a1d4 <sbrk_aligned+0x38>
 800a1c4:	1a21      	subs	r1, r4, r0
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	f000 fe0e 	bl	800ade8 <_sbrk_r>
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d101      	bne.n	800a1d4 <sbrk_aligned+0x38>
 800a1d0:	f04f 34ff 	mov.w	r4, #4294967295
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	bd70      	pop	{r4, r5, r6, pc}
 800a1d8:	20000720 	.word	0x20000720

0800a1dc <_malloc_r>:
 800a1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e0:	1ccd      	adds	r5, r1, #3
 800a1e2:	f025 0503 	bic.w	r5, r5, #3
 800a1e6:	3508      	adds	r5, #8
 800a1e8:	2d0c      	cmp	r5, #12
 800a1ea:	bf38      	it	cc
 800a1ec:	250c      	movcc	r5, #12
 800a1ee:	2d00      	cmp	r5, #0
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	db01      	blt.n	800a1f8 <_malloc_r+0x1c>
 800a1f4:	42a9      	cmp	r1, r5
 800a1f6:	d905      	bls.n	800a204 <_malloc_r+0x28>
 800a1f8:	230c      	movs	r3, #12
 800a1fa:	603b      	str	r3, [r7, #0]
 800a1fc:	2600      	movs	r6, #0
 800a1fe:	4630      	mov	r0, r6
 800a200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a204:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2d8 <_malloc_r+0xfc>
 800a208:	f000 f87a 	bl	800a300 <__malloc_lock>
 800a20c:	f8d8 3000 	ldr.w	r3, [r8]
 800a210:	461c      	mov	r4, r3
 800a212:	bb5c      	cbnz	r4, 800a26c <_malloc_r+0x90>
 800a214:	4629      	mov	r1, r5
 800a216:	4638      	mov	r0, r7
 800a218:	f7ff ffc0 	bl	800a19c <sbrk_aligned>
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	4604      	mov	r4, r0
 800a220:	d155      	bne.n	800a2ce <_malloc_r+0xf2>
 800a222:	f8d8 4000 	ldr.w	r4, [r8]
 800a226:	4626      	mov	r6, r4
 800a228:	2e00      	cmp	r6, #0
 800a22a:	d145      	bne.n	800a2b8 <_malloc_r+0xdc>
 800a22c:	2c00      	cmp	r4, #0
 800a22e:	d048      	beq.n	800a2c2 <_malloc_r+0xe6>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	4631      	mov	r1, r6
 800a234:	4638      	mov	r0, r7
 800a236:	eb04 0903 	add.w	r9, r4, r3
 800a23a:	f000 fdd5 	bl	800ade8 <_sbrk_r>
 800a23e:	4581      	cmp	r9, r0
 800a240:	d13f      	bne.n	800a2c2 <_malloc_r+0xe6>
 800a242:	6821      	ldr	r1, [r4, #0]
 800a244:	1a6d      	subs	r5, r5, r1
 800a246:	4629      	mov	r1, r5
 800a248:	4638      	mov	r0, r7
 800a24a:	f7ff ffa7 	bl	800a19c <sbrk_aligned>
 800a24e:	3001      	adds	r0, #1
 800a250:	d037      	beq.n	800a2c2 <_malloc_r+0xe6>
 800a252:	6823      	ldr	r3, [r4, #0]
 800a254:	442b      	add	r3, r5
 800a256:	6023      	str	r3, [r4, #0]
 800a258:	f8d8 3000 	ldr.w	r3, [r8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d038      	beq.n	800a2d2 <_malloc_r+0xf6>
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	42a2      	cmp	r2, r4
 800a264:	d12b      	bne.n	800a2be <_malloc_r+0xe2>
 800a266:	2200      	movs	r2, #0
 800a268:	605a      	str	r2, [r3, #4]
 800a26a:	e00f      	b.n	800a28c <_malloc_r+0xb0>
 800a26c:	6822      	ldr	r2, [r4, #0]
 800a26e:	1b52      	subs	r2, r2, r5
 800a270:	d41f      	bmi.n	800a2b2 <_malloc_r+0xd6>
 800a272:	2a0b      	cmp	r2, #11
 800a274:	d917      	bls.n	800a2a6 <_malloc_r+0xca>
 800a276:	1961      	adds	r1, r4, r5
 800a278:	42a3      	cmp	r3, r4
 800a27a:	6025      	str	r5, [r4, #0]
 800a27c:	bf18      	it	ne
 800a27e:	6059      	strne	r1, [r3, #4]
 800a280:	6863      	ldr	r3, [r4, #4]
 800a282:	bf08      	it	eq
 800a284:	f8c8 1000 	streq.w	r1, [r8]
 800a288:	5162      	str	r2, [r4, r5]
 800a28a:	604b      	str	r3, [r1, #4]
 800a28c:	4638      	mov	r0, r7
 800a28e:	f104 060b 	add.w	r6, r4, #11
 800a292:	f000 f83b 	bl	800a30c <__malloc_unlock>
 800a296:	f026 0607 	bic.w	r6, r6, #7
 800a29a:	1d23      	adds	r3, r4, #4
 800a29c:	1af2      	subs	r2, r6, r3
 800a29e:	d0ae      	beq.n	800a1fe <_malloc_r+0x22>
 800a2a0:	1b9b      	subs	r3, r3, r6
 800a2a2:	50a3      	str	r3, [r4, r2]
 800a2a4:	e7ab      	b.n	800a1fe <_malloc_r+0x22>
 800a2a6:	42a3      	cmp	r3, r4
 800a2a8:	6862      	ldr	r2, [r4, #4]
 800a2aa:	d1dd      	bne.n	800a268 <_malloc_r+0x8c>
 800a2ac:	f8c8 2000 	str.w	r2, [r8]
 800a2b0:	e7ec      	b.n	800a28c <_malloc_r+0xb0>
 800a2b2:	4623      	mov	r3, r4
 800a2b4:	6864      	ldr	r4, [r4, #4]
 800a2b6:	e7ac      	b.n	800a212 <_malloc_r+0x36>
 800a2b8:	4634      	mov	r4, r6
 800a2ba:	6876      	ldr	r6, [r6, #4]
 800a2bc:	e7b4      	b.n	800a228 <_malloc_r+0x4c>
 800a2be:	4613      	mov	r3, r2
 800a2c0:	e7cc      	b.n	800a25c <_malloc_r+0x80>
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	603b      	str	r3, [r7, #0]
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	f000 f820 	bl	800a30c <__malloc_unlock>
 800a2cc:	e797      	b.n	800a1fe <_malloc_r+0x22>
 800a2ce:	6025      	str	r5, [r4, #0]
 800a2d0:	e7dc      	b.n	800a28c <_malloc_r+0xb0>
 800a2d2:	605b      	str	r3, [r3, #4]
 800a2d4:	deff      	udf	#255	; 0xff
 800a2d6:	bf00      	nop
 800a2d8:	2000071c 	.word	0x2000071c

0800a2dc <__ascii_mbtowc>:
 800a2dc:	b082      	sub	sp, #8
 800a2de:	b901      	cbnz	r1, 800a2e2 <__ascii_mbtowc+0x6>
 800a2e0:	a901      	add	r1, sp, #4
 800a2e2:	b142      	cbz	r2, 800a2f6 <__ascii_mbtowc+0x1a>
 800a2e4:	b14b      	cbz	r3, 800a2fa <__ascii_mbtowc+0x1e>
 800a2e6:	7813      	ldrb	r3, [r2, #0]
 800a2e8:	600b      	str	r3, [r1, #0]
 800a2ea:	7812      	ldrb	r2, [r2, #0]
 800a2ec:	1e10      	subs	r0, r2, #0
 800a2ee:	bf18      	it	ne
 800a2f0:	2001      	movne	r0, #1
 800a2f2:	b002      	add	sp, #8
 800a2f4:	4770      	bx	lr
 800a2f6:	4610      	mov	r0, r2
 800a2f8:	e7fb      	b.n	800a2f2 <__ascii_mbtowc+0x16>
 800a2fa:	f06f 0001 	mvn.w	r0, #1
 800a2fe:	e7f8      	b.n	800a2f2 <__ascii_mbtowc+0x16>

0800a300 <__malloc_lock>:
 800a300:	4801      	ldr	r0, [pc, #4]	; (800a308 <__malloc_lock+0x8>)
 800a302:	f7ff bb96 	b.w	8009a32 <__retarget_lock_acquire_recursive>
 800a306:	bf00      	nop
 800a308:	20000718 	.word	0x20000718

0800a30c <__malloc_unlock>:
 800a30c:	4801      	ldr	r0, [pc, #4]	; (800a314 <__malloc_unlock+0x8>)
 800a30e:	f7ff bb91 	b.w	8009a34 <__retarget_lock_release_recursive>
 800a312:	bf00      	nop
 800a314:	20000718 	.word	0x20000718

0800a318 <_Balloc>:
 800a318:	b570      	push	{r4, r5, r6, lr}
 800a31a:	69c6      	ldr	r6, [r0, #28]
 800a31c:	4604      	mov	r4, r0
 800a31e:	460d      	mov	r5, r1
 800a320:	b976      	cbnz	r6, 800a340 <_Balloc+0x28>
 800a322:	2010      	movs	r0, #16
 800a324:	f000 fda4 	bl	800ae70 <malloc>
 800a328:	4602      	mov	r2, r0
 800a32a:	61e0      	str	r0, [r4, #28]
 800a32c:	b920      	cbnz	r0, 800a338 <_Balloc+0x20>
 800a32e:	4b18      	ldr	r3, [pc, #96]	; (800a390 <_Balloc+0x78>)
 800a330:	4818      	ldr	r0, [pc, #96]	; (800a394 <_Balloc+0x7c>)
 800a332:	216b      	movs	r1, #107	; 0x6b
 800a334:	f000 fd68 	bl	800ae08 <__assert_func>
 800a338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a33c:	6006      	str	r6, [r0, #0]
 800a33e:	60c6      	str	r6, [r0, #12]
 800a340:	69e6      	ldr	r6, [r4, #28]
 800a342:	68f3      	ldr	r3, [r6, #12]
 800a344:	b183      	cbz	r3, 800a368 <_Balloc+0x50>
 800a346:	69e3      	ldr	r3, [r4, #28]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a34e:	b9b8      	cbnz	r0, 800a380 <_Balloc+0x68>
 800a350:	2101      	movs	r1, #1
 800a352:	fa01 f605 	lsl.w	r6, r1, r5
 800a356:	1d72      	adds	r2, r6, #5
 800a358:	0092      	lsls	r2, r2, #2
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 fd72 	bl	800ae44 <_calloc_r>
 800a360:	b160      	cbz	r0, 800a37c <_Balloc+0x64>
 800a362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a366:	e00e      	b.n	800a386 <_Balloc+0x6e>
 800a368:	2221      	movs	r2, #33	; 0x21
 800a36a:	2104      	movs	r1, #4
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 fd69 	bl	800ae44 <_calloc_r>
 800a372:	69e3      	ldr	r3, [r4, #28]
 800a374:	60f0      	str	r0, [r6, #12]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1e4      	bne.n	800a346 <_Balloc+0x2e>
 800a37c:	2000      	movs	r0, #0
 800a37e:	bd70      	pop	{r4, r5, r6, pc}
 800a380:	6802      	ldr	r2, [r0, #0]
 800a382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a386:	2300      	movs	r3, #0
 800a388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a38c:	e7f7      	b.n	800a37e <_Balloc+0x66>
 800a38e:	bf00      	nop
 800a390:	0800ba39 	.word	0x0800ba39
 800a394:	0800ba50 	.word	0x0800ba50

0800a398 <_Bfree>:
 800a398:	b570      	push	{r4, r5, r6, lr}
 800a39a:	69c6      	ldr	r6, [r0, #28]
 800a39c:	4605      	mov	r5, r0
 800a39e:	460c      	mov	r4, r1
 800a3a0:	b976      	cbnz	r6, 800a3c0 <_Bfree+0x28>
 800a3a2:	2010      	movs	r0, #16
 800a3a4:	f000 fd64 	bl	800ae70 <malloc>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	61e8      	str	r0, [r5, #28]
 800a3ac:	b920      	cbnz	r0, 800a3b8 <_Bfree+0x20>
 800a3ae:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <_Bfree+0x3c>)
 800a3b0:	4809      	ldr	r0, [pc, #36]	; (800a3d8 <_Bfree+0x40>)
 800a3b2:	218f      	movs	r1, #143	; 0x8f
 800a3b4:	f000 fd28 	bl	800ae08 <__assert_func>
 800a3b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3bc:	6006      	str	r6, [r0, #0]
 800a3be:	60c6      	str	r6, [r0, #12]
 800a3c0:	b13c      	cbz	r4, 800a3d2 <_Bfree+0x3a>
 800a3c2:	69eb      	ldr	r3, [r5, #28]
 800a3c4:	6862      	ldr	r2, [r4, #4]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3cc:	6021      	str	r1, [r4, #0]
 800a3ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}
 800a3d4:	0800ba39 	.word	0x0800ba39
 800a3d8:	0800ba50 	.word	0x0800ba50

0800a3dc <__multadd>:
 800a3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e0:	690d      	ldr	r5, [r1, #16]
 800a3e2:	4607      	mov	r7, r0
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	461e      	mov	r6, r3
 800a3e8:	f101 0c14 	add.w	ip, r1, #20
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	f8dc 3000 	ldr.w	r3, [ip]
 800a3f2:	b299      	uxth	r1, r3
 800a3f4:	fb02 6101 	mla	r1, r2, r1, r6
 800a3f8:	0c1e      	lsrs	r6, r3, #16
 800a3fa:	0c0b      	lsrs	r3, r1, #16
 800a3fc:	fb02 3306 	mla	r3, r2, r6, r3
 800a400:	b289      	uxth	r1, r1
 800a402:	3001      	adds	r0, #1
 800a404:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a408:	4285      	cmp	r5, r0
 800a40a:	f84c 1b04 	str.w	r1, [ip], #4
 800a40e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a412:	dcec      	bgt.n	800a3ee <__multadd+0x12>
 800a414:	b30e      	cbz	r6, 800a45a <__multadd+0x7e>
 800a416:	68a3      	ldr	r3, [r4, #8]
 800a418:	42ab      	cmp	r3, r5
 800a41a:	dc19      	bgt.n	800a450 <__multadd+0x74>
 800a41c:	6861      	ldr	r1, [r4, #4]
 800a41e:	4638      	mov	r0, r7
 800a420:	3101      	adds	r1, #1
 800a422:	f7ff ff79 	bl	800a318 <_Balloc>
 800a426:	4680      	mov	r8, r0
 800a428:	b928      	cbnz	r0, 800a436 <__multadd+0x5a>
 800a42a:	4602      	mov	r2, r0
 800a42c:	4b0c      	ldr	r3, [pc, #48]	; (800a460 <__multadd+0x84>)
 800a42e:	480d      	ldr	r0, [pc, #52]	; (800a464 <__multadd+0x88>)
 800a430:	21ba      	movs	r1, #186	; 0xba
 800a432:	f000 fce9 	bl	800ae08 <__assert_func>
 800a436:	6922      	ldr	r2, [r4, #16]
 800a438:	3202      	adds	r2, #2
 800a43a:	f104 010c 	add.w	r1, r4, #12
 800a43e:	0092      	lsls	r2, r2, #2
 800a440:	300c      	adds	r0, #12
 800a442:	f7ff faf8 	bl	8009a36 <memcpy>
 800a446:	4621      	mov	r1, r4
 800a448:	4638      	mov	r0, r7
 800a44a:	f7ff ffa5 	bl	800a398 <_Bfree>
 800a44e:	4644      	mov	r4, r8
 800a450:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a454:	3501      	adds	r5, #1
 800a456:	615e      	str	r6, [r3, #20]
 800a458:	6125      	str	r5, [r4, #16]
 800a45a:	4620      	mov	r0, r4
 800a45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a460:	0800b9c8 	.word	0x0800b9c8
 800a464:	0800ba50 	.word	0x0800ba50

0800a468 <__s2b>:
 800a468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a46c:	460c      	mov	r4, r1
 800a46e:	4615      	mov	r5, r2
 800a470:	461f      	mov	r7, r3
 800a472:	2209      	movs	r2, #9
 800a474:	3308      	adds	r3, #8
 800a476:	4606      	mov	r6, r0
 800a478:	fb93 f3f2 	sdiv	r3, r3, r2
 800a47c:	2100      	movs	r1, #0
 800a47e:	2201      	movs	r2, #1
 800a480:	429a      	cmp	r2, r3
 800a482:	db09      	blt.n	800a498 <__s2b+0x30>
 800a484:	4630      	mov	r0, r6
 800a486:	f7ff ff47 	bl	800a318 <_Balloc>
 800a48a:	b940      	cbnz	r0, 800a49e <__s2b+0x36>
 800a48c:	4602      	mov	r2, r0
 800a48e:	4b19      	ldr	r3, [pc, #100]	; (800a4f4 <__s2b+0x8c>)
 800a490:	4819      	ldr	r0, [pc, #100]	; (800a4f8 <__s2b+0x90>)
 800a492:	21d3      	movs	r1, #211	; 0xd3
 800a494:	f000 fcb8 	bl	800ae08 <__assert_func>
 800a498:	0052      	lsls	r2, r2, #1
 800a49a:	3101      	adds	r1, #1
 800a49c:	e7f0      	b.n	800a480 <__s2b+0x18>
 800a49e:	9b08      	ldr	r3, [sp, #32]
 800a4a0:	6143      	str	r3, [r0, #20]
 800a4a2:	2d09      	cmp	r5, #9
 800a4a4:	f04f 0301 	mov.w	r3, #1
 800a4a8:	6103      	str	r3, [r0, #16]
 800a4aa:	dd16      	ble.n	800a4da <__s2b+0x72>
 800a4ac:	f104 0909 	add.w	r9, r4, #9
 800a4b0:	46c8      	mov	r8, r9
 800a4b2:	442c      	add	r4, r5
 800a4b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a4b8:	4601      	mov	r1, r0
 800a4ba:	3b30      	subs	r3, #48	; 0x30
 800a4bc:	220a      	movs	r2, #10
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f7ff ff8c 	bl	800a3dc <__multadd>
 800a4c4:	45a0      	cmp	r8, r4
 800a4c6:	d1f5      	bne.n	800a4b4 <__s2b+0x4c>
 800a4c8:	f1a5 0408 	sub.w	r4, r5, #8
 800a4cc:	444c      	add	r4, r9
 800a4ce:	1b2d      	subs	r5, r5, r4
 800a4d0:	1963      	adds	r3, r4, r5
 800a4d2:	42bb      	cmp	r3, r7
 800a4d4:	db04      	blt.n	800a4e0 <__s2b+0x78>
 800a4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4da:	340a      	adds	r4, #10
 800a4dc:	2509      	movs	r5, #9
 800a4de:	e7f6      	b.n	800a4ce <__s2b+0x66>
 800a4e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4e4:	4601      	mov	r1, r0
 800a4e6:	3b30      	subs	r3, #48	; 0x30
 800a4e8:	220a      	movs	r2, #10
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	f7ff ff76 	bl	800a3dc <__multadd>
 800a4f0:	e7ee      	b.n	800a4d0 <__s2b+0x68>
 800a4f2:	bf00      	nop
 800a4f4:	0800b9c8 	.word	0x0800b9c8
 800a4f8:	0800ba50 	.word	0x0800ba50

0800a4fc <__hi0bits>:
 800a4fc:	0c03      	lsrs	r3, r0, #16
 800a4fe:	041b      	lsls	r3, r3, #16
 800a500:	b9d3      	cbnz	r3, 800a538 <__hi0bits+0x3c>
 800a502:	0400      	lsls	r0, r0, #16
 800a504:	2310      	movs	r3, #16
 800a506:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a50a:	bf04      	itt	eq
 800a50c:	0200      	lsleq	r0, r0, #8
 800a50e:	3308      	addeq	r3, #8
 800a510:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a514:	bf04      	itt	eq
 800a516:	0100      	lsleq	r0, r0, #4
 800a518:	3304      	addeq	r3, #4
 800a51a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a51e:	bf04      	itt	eq
 800a520:	0080      	lsleq	r0, r0, #2
 800a522:	3302      	addeq	r3, #2
 800a524:	2800      	cmp	r0, #0
 800a526:	db05      	blt.n	800a534 <__hi0bits+0x38>
 800a528:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a52c:	f103 0301 	add.w	r3, r3, #1
 800a530:	bf08      	it	eq
 800a532:	2320      	moveq	r3, #32
 800a534:	4618      	mov	r0, r3
 800a536:	4770      	bx	lr
 800a538:	2300      	movs	r3, #0
 800a53a:	e7e4      	b.n	800a506 <__hi0bits+0xa>

0800a53c <__lo0bits>:
 800a53c:	6803      	ldr	r3, [r0, #0]
 800a53e:	f013 0207 	ands.w	r2, r3, #7
 800a542:	d00c      	beq.n	800a55e <__lo0bits+0x22>
 800a544:	07d9      	lsls	r1, r3, #31
 800a546:	d422      	bmi.n	800a58e <__lo0bits+0x52>
 800a548:	079a      	lsls	r2, r3, #30
 800a54a:	bf49      	itett	mi
 800a54c:	085b      	lsrmi	r3, r3, #1
 800a54e:	089b      	lsrpl	r3, r3, #2
 800a550:	6003      	strmi	r3, [r0, #0]
 800a552:	2201      	movmi	r2, #1
 800a554:	bf5c      	itt	pl
 800a556:	6003      	strpl	r3, [r0, #0]
 800a558:	2202      	movpl	r2, #2
 800a55a:	4610      	mov	r0, r2
 800a55c:	4770      	bx	lr
 800a55e:	b299      	uxth	r1, r3
 800a560:	b909      	cbnz	r1, 800a566 <__lo0bits+0x2a>
 800a562:	0c1b      	lsrs	r3, r3, #16
 800a564:	2210      	movs	r2, #16
 800a566:	b2d9      	uxtb	r1, r3
 800a568:	b909      	cbnz	r1, 800a56e <__lo0bits+0x32>
 800a56a:	3208      	adds	r2, #8
 800a56c:	0a1b      	lsrs	r3, r3, #8
 800a56e:	0719      	lsls	r1, r3, #28
 800a570:	bf04      	itt	eq
 800a572:	091b      	lsreq	r3, r3, #4
 800a574:	3204      	addeq	r2, #4
 800a576:	0799      	lsls	r1, r3, #30
 800a578:	bf04      	itt	eq
 800a57a:	089b      	lsreq	r3, r3, #2
 800a57c:	3202      	addeq	r2, #2
 800a57e:	07d9      	lsls	r1, r3, #31
 800a580:	d403      	bmi.n	800a58a <__lo0bits+0x4e>
 800a582:	085b      	lsrs	r3, r3, #1
 800a584:	f102 0201 	add.w	r2, r2, #1
 800a588:	d003      	beq.n	800a592 <__lo0bits+0x56>
 800a58a:	6003      	str	r3, [r0, #0]
 800a58c:	e7e5      	b.n	800a55a <__lo0bits+0x1e>
 800a58e:	2200      	movs	r2, #0
 800a590:	e7e3      	b.n	800a55a <__lo0bits+0x1e>
 800a592:	2220      	movs	r2, #32
 800a594:	e7e1      	b.n	800a55a <__lo0bits+0x1e>
	...

0800a598 <__i2b>:
 800a598:	b510      	push	{r4, lr}
 800a59a:	460c      	mov	r4, r1
 800a59c:	2101      	movs	r1, #1
 800a59e:	f7ff febb 	bl	800a318 <_Balloc>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	b928      	cbnz	r0, 800a5b2 <__i2b+0x1a>
 800a5a6:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <__i2b+0x24>)
 800a5a8:	4805      	ldr	r0, [pc, #20]	; (800a5c0 <__i2b+0x28>)
 800a5aa:	f240 1145 	movw	r1, #325	; 0x145
 800a5ae:	f000 fc2b 	bl	800ae08 <__assert_func>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	6144      	str	r4, [r0, #20]
 800a5b6:	6103      	str	r3, [r0, #16]
 800a5b8:	bd10      	pop	{r4, pc}
 800a5ba:	bf00      	nop
 800a5bc:	0800b9c8 	.word	0x0800b9c8
 800a5c0:	0800ba50 	.word	0x0800ba50

0800a5c4 <__multiply>:
 800a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c8:	4691      	mov	r9, r2
 800a5ca:	690a      	ldr	r2, [r1, #16]
 800a5cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	bfb8      	it	lt
 800a5d4:	460b      	movlt	r3, r1
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	bfbc      	itt	lt
 800a5da:	464c      	movlt	r4, r9
 800a5dc:	4699      	movlt	r9, r3
 800a5de:	6927      	ldr	r7, [r4, #16]
 800a5e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5e4:	68a3      	ldr	r3, [r4, #8]
 800a5e6:	6861      	ldr	r1, [r4, #4]
 800a5e8:	eb07 060a 	add.w	r6, r7, sl
 800a5ec:	42b3      	cmp	r3, r6
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	bfb8      	it	lt
 800a5f2:	3101      	addlt	r1, #1
 800a5f4:	f7ff fe90 	bl	800a318 <_Balloc>
 800a5f8:	b930      	cbnz	r0, 800a608 <__multiply+0x44>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	4b44      	ldr	r3, [pc, #272]	; (800a710 <__multiply+0x14c>)
 800a5fe:	4845      	ldr	r0, [pc, #276]	; (800a714 <__multiply+0x150>)
 800a600:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a604:	f000 fc00 	bl	800ae08 <__assert_func>
 800a608:	f100 0514 	add.w	r5, r0, #20
 800a60c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a610:	462b      	mov	r3, r5
 800a612:	2200      	movs	r2, #0
 800a614:	4543      	cmp	r3, r8
 800a616:	d321      	bcc.n	800a65c <__multiply+0x98>
 800a618:	f104 0314 	add.w	r3, r4, #20
 800a61c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a620:	f109 0314 	add.w	r3, r9, #20
 800a624:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a628:	9202      	str	r2, [sp, #8]
 800a62a:	1b3a      	subs	r2, r7, r4
 800a62c:	3a15      	subs	r2, #21
 800a62e:	f022 0203 	bic.w	r2, r2, #3
 800a632:	3204      	adds	r2, #4
 800a634:	f104 0115 	add.w	r1, r4, #21
 800a638:	428f      	cmp	r7, r1
 800a63a:	bf38      	it	cc
 800a63c:	2204      	movcc	r2, #4
 800a63e:	9201      	str	r2, [sp, #4]
 800a640:	9a02      	ldr	r2, [sp, #8]
 800a642:	9303      	str	r3, [sp, #12]
 800a644:	429a      	cmp	r2, r3
 800a646:	d80c      	bhi.n	800a662 <__multiply+0x9e>
 800a648:	2e00      	cmp	r6, #0
 800a64a:	dd03      	ble.n	800a654 <__multiply+0x90>
 800a64c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a650:	2b00      	cmp	r3, #0
 800a652:	d05b      	beq.n	800a70c <__multiply+0x148>
 800a654:	6106      	str	r6, [r0, #16]
 800a656:	b005      	add	sp, #20
 800a658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65c:	f843 2b04 	str.w	r2, [r3], #4
 800a660:	e7d8      	b.n	800a614 <__multiply+0x50>
 800a662:	f8b3 a000 	ldrh.w	sl, [r3]
 800a666:	f1ba 0f00 	cmp.w	sl, #0
 800a66a:	d024      	beq.n	800a6b6 <__multiply+0xf2>
 800a66c:	f104 0e14 	add.w	lr, r4, #20
 800a670:	46a9      	mov	r9, r5
 800a672:	f04f 0c00 	mov.w	ip, #0
 800a676:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a67a:	f8d9 1000 	ldr.w	r1, [r9]
 800a67e:	fa1f fb82 	uxth.w	fp, r2
 800a682:	b289      	uxth	r1, r1
 800a684:	fb0a 110b 	mla	r1, sl, fp, r1
 800a688:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a68c:	f8d9 2000 	ldr.w	r2, [r9]
 800a690:	4461      	add	r1, ip
 800a692:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a696:	fb0a c20b 	mla	r2, sl, fp, ip
 800a69a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a69e:	b289      	uxth	r1, r1
 800a6a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6a4:	4577      	cmp	r7, lr
 800a6a6:	f849 1b04 	str.w	r1, [r9], #4
 800a6aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6ae:	d8e2      	bhi.n	800a676 <__multiply+0xb2>
 800a6b0:	9a01      	ldr	r2, [sp, #4]
 800a6b2:	f845 c002 	str.w	ip, [r5, r2]
 800a6b6:	9a03      	ldr	r2, [sp, #12]
 800a6b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6bc:	3304      	adds	r3, #4
 800a6be:	f1b9 0f00 	cmp.w	r9, #0
 800a6c2:	d021      	beq.n	800a708 <__multiply+0x144>
 800a6c4:	6829      	ldr	r1, [r5, #0]
 800a6c6:	f104 0c14 	add.w	ip, r4, #20
 800a6ca:	46ae      	mov	lr, r5
 800a6cc:	f04f 0a00 	mov.w	sl, #0
 800a6d0:	f8bc b000 	ldrh.w	fp, [ip]
 800a6d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6d8:	fb09 220b 	mla	r2, r9, fp, r2
 800a6dc:	4452      	add	r2, sl
 800a6de:	b289      	uxth	r1, r1
 800a6e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6e4:	f84e 1b04 	str.w	r1, [lr], #4
 800a6e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a6ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6f0:	f8be 1000 	ldrh.w	r1, [lr]
 800a6f4:	fb09 110a 	mla	r1, r9, sl, r1
 800a6f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a6fc:	4567      	cmp	r7, ip
 800a6fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a702:	d8e5      	bhi.n	800a6d0 <__multiply+0x10c>
 800a704:	9a01      	ldr	r2, [sp, #4]
 800a706:	50a9      	str	r1, [r5, r2]
 800a708:	3504      	adds	r5, #4
 800a70a:	e799      	b.n	800a640 <__multiply+0x7c>
 800a70c:	3e01      	subs	r6, #1
 800a70e:	e79b      	b.n	800a648 <__multiply+0x84>
 800a710:	0800b9c8 	.word	0x0800b9c8
 800a714:	0800ba50 	.word	0x0800ba50

0800a718 <__pow5mult>:
 800a718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a71c:	4615      	mov	r5, r2
 800a71e:	f012 0203 	ands.w	r2, r2, #3
 800a722:	4606      	mov	r6, r0
 800a724:	460f      	mov	r7, r1
 800a726:	d007      	beq.n	800a738 <__pow5mult+0x20>
 800a728:	4c25      	ldr	r4, [pc, #148]	; (800a7c0 <__pow5mult+0xa8>)
 800a72a:	3a01      	subs	r2, #1
 800a72c:	2300      	movs	r3, #0
 800a72e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a732:	f7ff fe53 	bl	800a3dc <__multadd>
 800a736:	4607      	mov	r7, r0
 800a738:	10ad      	asrs	r5, r5, #2
 800a73a:	d03d      	beq.n	800a7b8 <__pow5mult+0xa0>
 800a73c:	69f4      	ldr	r4, [r6, #28]
 800a73e:	b97c      	cbnz	r4, 800a760 <__pow5mult+0x48>
 800a740:	2010      	movs	r0, #16
 800a742:	f000 fb95 	bl	800ae70 <malloc>
 800a746:	4602      	mov	r2, r0
 800a748:	61f0      	str	r0, [r6, #28]
 800a74a:	b928      	cbnz	r0, 800a758 <__pow5mult+0x40>
 800a74c:	4b1d      	ldr	r3, [pc, #116]	; (800a7c4 <__pow5mult+0xac>)
 800a74e:	481e      	ldr	r0, [pc, #120]	; (800a7c8 <__pow5mult+0xb0>)
 800a750:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a754:	f000 fb58 	bl	800ae08 <__assert_func>
 800a758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a75c:	6004      	str	r4, [r0, #0]
 800a75e:	60c4      	str	r4, [r0, #12]
 800a760:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a768:	b94c      	cbnz	r4, 800a77e <__pow5mult+0x66>
 800a76a:	f240 2171 	movw	r1, #625	; 0x271
 800a76e:	4630      	mov	r0, r6
 800a770:	f7ff ff12 	bl	800a598 <__i2b>
 800a774:	2300      	movs	r3, #0
 800a776:	f8c8 0008 	str.w	r0, [r8, #8]
 800a77a:	4604      	mov	r4, r0
 800a77c:	6003      	str	r3, [r0, #0]
 800a77e:	f04f 0900 	mov.w	r9, #0
 800a782:	07eb      	lsls	r3, r5, #31
 800a784:	d50a      	bpl.n	800a79c <__pow5mult+0x84>
 800a786:	4639      	mov	r1, r7
 800a788:	4622      	mov	r2, r4
 800a78a:	4630      	mov	r0, r6
 800a78c:	f7ff ff1a 	bl	800a5c4 <__multiply>
 800a790:	4639      	mov	r1, r7
 800a792:	4680      	mov	r8, r0
 800a794:	4630      	mov	r0, r6
 800a796:	f7ff fdff 	bl	800a398 <_Bfree>
 800a79a:	4647      	mov	r7, r8
 800a79c:	106d      	asrs	r5, r5, #1
 800a79e:	d00b      	beq.n	800a7b8 <__pow5mult+0xa0>
 800a7a0:	6820      	ldr	r0, [r4, #0]
 800a7a2:	b938      	cbnz	r0, 800a7b4 <__pow5mult+0x9c>
 800a7a4:	4622      	mov	r2, r4
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7ff ff0b 	bl	800a5c4 <__multiply>
 800a7ae:	6020      	str	r0, [r4, #0]
 800a7b0:	f8c0 9000 	str.w	r9, [r0]
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	e7e4      	b.n	800a782 <__pow5mult+0x6a>
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7be:	bf00      	nop
 800a7c0:	0800bba0 	.word	0x0800bba0
 800a7c4:	0800ba39 	.word	0x0800ba39
 800a7c8:	0800ba50 	.word	0x0800ba50

0800a7cc <__lshift>:
 800a7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d0:	460c      	mov	r4, r1
 800a7d2:	6849      	ldr	r1, [r1, #4]
 800a7d4:	6923      	ldr	r3, [r4, #16]
 800a7d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7da:	68a3      	ldr	r3, [r4, #8]
 800a7dc:	4607      	mov	r7, r0
 800a7de:	4691      	mov	r9, r2
 800a7e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7e4:	f108 0601 	add.w	r6, r8, #1
 800a7e8:	42b3      	cmp	r3, r6
 800a7ea:	db0b      	blt.n	800a804 <__lshift+0x38>
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	f7ff fd93 	bl	800a318 <_Balloc>
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	b948      	cbnz	r0, 800a80a <__lshift+0x3e>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	4b28      	ldr	r3, [pc, #160]	; (800a89c <__lshift+0xd0>)
 800a7fa:	4829      	ldr	r0, [pc, #164]	; (800a8a0 <__lshift+0xd4>)
 800a7fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a800:	f000 fb02 	bl	800ae08 <__assert_func>
 800a804:	3101      	adds	r1, #1
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	e7ee      	b.n	800a7e8 <__lshift+0x1c>
 800a80a:	2300      	movs	r3, #0
 800a80c:	f100 0114 	add.w	r1, r0, #20
 800a810:	f100 0210 	add.w	r2, r0, #16
 800a814:	4618      	mov	r0, r3
 800a816:	4553      	cmp	r3, sl
 800a818:	db33      	blt.n	800a882 <__lshift+0xb6>
 800a81a:	6920      	ldr	r0, [r4, #16]
 800a81c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a820:	f104 0314 	add.w	r3, r4, #20
 800a824:	f019 091f 	ands.w	r9, r9, #31
 800a828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a82c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a830:	d02b      	beq.n	800a88a <__lshift+0xbe>
 800a832:	f1c9 0e20 	rsb	lr, r9, #32
 800a836:	468a      	mov	sl, r1
 800a838:	2200      	movs	r2, #0
 800a83a:	6818      	ldr	r0, [r3, #0]
 800a83c:	fa00 f009 	lsl.w	r0, r0, r9
 800a840:	4310      	orrs	r0, r2
 800a842:	f84a 0b04 	str.w	r0, [sl], #4
 800a846:	f853 2b04 	ldr.w	r2, [r3], #4
 800a84a:	459c      	cmp	ip, r3
 800a84c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a850:	d8f3      	bhi.n	800a83a <__lshift+0x6e>
 800a852:	ebac 0304 	sub.w	r3, ip, r4
 800a856:	3b15      	subs	r3, #21
 800a858:	f023 0303 	bic.w	r3, r3, #3
 800a85c:	3304      	adds	r3, #4
 800a85e:	f104 0015 	add.w	r0, r4, #21
 800a862:	4584      	cmp	ip, r0
 800a864:	bf38      	it	cc
 800a866:	2304      	movcc	r3, #4
 800a868:	50ca      	str	r2, [r1, r3]
 800a86a:	b10a      	cbz	r2, 800a870 <__lshift+0xa4>
 800a86c:	f108 0602 	add.w	r6, r8, #2
 800a870:	3e01      	subs	r6, #1
 800a872:	4638      	mov	r0, r7
 800a874:	612e      	str	r6, [r5, #16]
 800a876:	4621      	mov	r1, r4
 800a878:	f7ff fd8e 	bl	800a398 <_Bfree>
 800a87c:	4628      	mov	r0, r5
 800a87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a882:	f842 0f04 	str.w	r0, [r2, #4]!
 800a886:	3301      	adds	r3, #1
 800a888:	e7c5      	b.n	800a816 <__lshift+0x4a>
 800a88a:	3904      	subs	r1, #4
 800a88c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a890:	f841 2f04 	str.w	r2, [r1, #4]!
 800a894:	459c      	cmp	ip, r3
 800a896:	d8f9      	bhi.n	800a88c <__lshift+0xc0>
 800a898:	e7ea      	b.n	800a870 <__lshift+0xa4>
 800a89a:	bf00      	nop
 800a89c:	0800b9c8 	.word	0x0800b9c8
 800a8a0:	0800ba50 	.word	0x0800ba50

0800a8a4 <__mcmp>:
 800a8a4:	b530      	push	{r4, r5, lr}
 800a8a6:	6902      	ldr	r2, [r0, #16]
 800a8a8:	690c      	ldr	r4, [r1, #16]
 800a8aa:	1b12      	subs	r2, r2, r4
 800a8ac:	d10e      	bne.n	800a8cc <__mcmp+0x28>
 800a8ae:	f100 0314 	add.w	r3, r0, #20
 800a8b2:	3114      	adds	r1, #20
 800a8b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8c4:	42a5      	cmp	r5, r4
 800a8c6:	d003      	beq.n	800a8d0 <__mcmp+0x2c>
 800a8c8:	d305      	bcc.n	800a8d6 <__mcmp+0x32>
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	bd30      	pop	{r4, r5, pc}
 800a8d0:	4283      	cmp	r3, r0
 800a8d2:	d3f3      	bcc.n	800a8bc <__mcmp+0x18>
 800a8d4:	e7fa      	b.n	800a8cc <__mcmp+0x28>
 800a8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8da:	e7f7      	b.n	800a8cc <__mcmp+0x28>

0800a8dc <__mdiff>:
 800a8dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e0:	460c      	mov	r4, r1
 800a8e2:	4606      	mov	r6, r0
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	4690      	mov	r8, r2
 800a8ea:	f7ff ffdb 	bl	800a8a4 <__mcmp>
 800a8ee:	1e05      	subs	r5, r0, #0
 800a8f0:	d110      	bne.n	800a914 <__mdiff+0x38>
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f7ff fd0f 	bl	800a318 <_Balloc>
 800a8fa:	b930      	cbnz	r0, 800a90a <__mdiff+0x2e>
 800a8fc:	4b3a      	ldr	r3, [pc, #232]	; (800a9e8 <__mdiff+0x10c>)
 800a8fe:	4602      	mov	r2, r0
 800a900:	f240 2137 	movw	r1, #567	; 0x237
 800a904:	4839      	ldr	r0, [pc, #228]	; (800a9ec <__mdiff+0x110>)
 800a906:	f000 fa7f 	bl	800ae08 <__assert_func>
 800a90a:	2301      	movs	r3, #1
 800a90c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a914:	bfa4      	itt	ge
 800a916:	4643      	movge	r3, r8
 800a918:	46a0      	movge	r8, r4
 800a91a:	4630      	mov	r0, r6
 800a91c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a920:	bfa6      	itte	ge
 800a922:	461c      	movge	r4, r3
 800a924:	2500      	movge	r5, #0
 800a926:	2501      	movlt	r5, #1
 800a928:	f7ff fcf6 	bl	800a318 <_Balloc>
 800a92c:	b920      	cbnz	r0, 800a938 <__mdiff+0x5c>
 800a92e:	4b2e      	ldr	r3, [pc, #184]	; (800a9e8 <__mdiff+0x10c>)
 800a930:	4602      	mov	r2, r0
 800a932:	f240 2145 	movw	r1, #581	; 0x245
 800a936:	e7e5      	b.n	800a904 <__mdiff+0x28>
 800a938:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a93c:	6926      	ldr	r6, [r4, #16]
 800a93e:	60c5      	str	r5, [r0, #12]
 800a940:	f104 0914 	add.w	r9, r4, #20
 800a944:	f108 0514 	add.w	r5, r8, #20
 800a948:	f100 0e14 	add.w	lr, r0, #20
 800a94c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a950:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a954:	f108 0210 	add.w	r2, r8, #16
 800a958:	46f2      	mov	sl, lr
 800a95a:	2100      	movs	r1, #0
 800a95c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a960:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a964:	fa11 f88b 	uxtah	r8, r1, fp
 800a968:	b299      	uxth	r1, r3
 800a96a:	0c1b      	lsrs	r3, r3, #16
 800a96c:	eba8 0801 	sub.w	r8, r8, r1
 800a970:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a974:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a978:	fa1f f888 	uxth.w	r8, r8
 800a97c:	1419      	asrs	r1, r3, #16
 800a97e:	454e      	cmp	r6, r9
 800a980:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a984:	f84a 3b04 	str.w	r3, [sl], #4
 800a988:	d8e8      	bhi.n	800a95c <__mdiff+0x80>
 800a98a:	1b33      	subs	r3, r6, r4
 800a98c:	3b15      	subs	r3, #21
 800a98e:	f023 0303 	bic.w	r3, r3, #3
 800a992:	3304      	adds	r3, #4
 800a994:	3415      	adds	r4, #21
 800a996:	42a6      	cmp	r6, r4
 800a998:	bf38      	it	cc
 800a99a:	2304      	movcc	r3, #4
 800a99c:	441d      	add	r5, r3
 800a99e:	4473      	add	r3, lr
 800a9a0:	469e      	mov	lr, r3
 800a9a2:	462e      	mov	r6, r5
 800a9a4:	4566      	cmp	r6, ip
 800a9a6:	d30e      	bcc.n	800a9c6 <__mdiff+0xea>
 800a9a8:	f10c 0203 	add.w	r2, ip, #3
 800a9ac:	1b52      	subs	r2, r2, r5
 800a9ae:	f022 0203 	bic.w	r2, r2, #3
 800a9b2:	3d03      	subs	r5, #3
 800a9b4:	45ac      	cmp	ip, r5
 800a9b6:	bf38      	it	cc
 800a9b8:	2200      	movcc	r2, #0
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a9c0:	b17a      	cbz	r2, 800a9e2 <__mdiff+0x106>
 800a9c2:	6107      	str	r7, [r0, #16]
 800a9c4:	e7a4      	b.n	800a910 <__mdiff+0x34>
 800a9c6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9ca:	fa11 f288 	uxtah	r2, r1, r8
 800a9ce:	1414      	asrs	r4, r2, #16
 800a9d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9d4:	b292      	uxth	r2, r2
 800a9d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9da:	f84e 2b04 	str.w	r2, [lr], #4
 800a9de:	1421      	asrs	r1, r4, #16
 800a9e0:	e7e0      	b.n	800a9a4 <__mdiff+0xc8>
 800a9e2:	3f01      	subs	r7, #1
 800a9e4:	e7ea      	b.n	800a9bc <__mdiff+0xe0>
 800a9e6:	bf00      	nop
 800a9e8:	0800b9c8 	.word	0x0800b9c8
 800a9ec:	0800ba50 	.word	0x0800ba50

0800a9f0 <__ulp>:
 800a9f0:	b082      	sub	sp, #8
 800a9f2:	ed8d 0b00 	vstr	d0, [sp]
 800a9f6:	9a01      	ldr	r2, [sp, #4]
 800a9f8:	4b0f      	ldr	r3, [pc, #60]	; (800aa38 <__ulp+0x48>)
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	dc08      	bgt.n	800aa16 <__ulp+0x26>
 800aa04:	425b      	negs	r3, r3
 800aa06:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800aa0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aa0e:	da04      	bge.n	800aa1a <__ulp+0x2a>
 800aa10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa14:	4113      	asrs	r3, r2
 800aa16:	2200      	movs	r2, #0
 800aa18:	e008      	b.n	800aa2c <__ulp+0x3c>
 800aa1a:	f1a2 0314 	sub.w	r3, r2, #20
 800aa1e:	2b1e      	cmp	r3, #30
 800aa20:	bfda      	itte	le
 800aa22:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800aa26:	40da      	lsrle	r2, r3
 800aa28:	2201      	movgt	r2, #1
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	4610      	mov	r0, r2
 800aa30:	ec41 0b10 	vmov	d0, r0, r1
 800aa34:	b002      	add	sp, #8
 800aa36:	4770      	bx	lr
 800aa38:	7ff00000 	.word	0x7ff00000

0800aa3c <__b2d>:
 800aa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa40:	6906      	ldr	r6, [r0, #16]
 800aa42:	f100 0814 	add.w	r8, r0, #20
 800aa46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aa4a:	1f37      	subs	r7, r6, #4
 800aa4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa50:	4610      	mov	r0, r2
 800aa52:	f7ff fd53 	bl	800a4fc <__hi0bits>
 800aa56:	f1c0 0320 	rsb	r3, r0, #32
 800aa5a:	280a      	cmp	r0, #10
 800aa5c:	600b      	str	r3, [r1, #0]
 800aa5e:	491b      	ldr	r1, [pc, #108]	; (800aacc <__b2d+0x90>)
 800aa60:	dc15      	bgt.n	800aa8e <__b2d+0x52>
 800aa62:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa66:	fa22 f30c 	lsr.w	r3, r2, ip
 800aa6a:	45b8      	cmp	r8, r7
 800aa6c:	ea43 0501 	orr.w	r5, r3, r1
 800aa70:	bf34      	ite	cc
 800aa72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa76:	2300      	movcs	r3, #0
 800aa78:	3015      	adds	r0, #21
 800aa7a:	fa02 f000 	lsl.w	r0, r2, r0
 800aa7e:	fa23 f30c 	lsr.w	r3, r3, ip
 800aa82:	4303      	orrs	r3, r0
 800aa84:	461c      	mov	r4, r3
 800aa86:	ec45 4b10 	vmov	d0, r4, r5
 800aa8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa8e:	45b8      	cmp	r8, r7
 800aa90:	bf3a      	itte	cc
 800aa92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa96:	f1a6 0708 	subcc.w	r7, r6, #8
 800aa9a:	2300      	movcs	r3, #0
 800aa9c:	380b      	subs	r0, #11
 800aa9e:	d012      	beq.n	800aac6 <__b2d+0x8a>
 800aaa0:	f1c0 0120 	rsb	r1, r0, #32
 800aaa4:	fa23 f401 	lsr.w	r4, r3, r1
 800aaa8:	4082      	lsls	r2, r0
 800aaaa:	4322      	orrs	r2, r4
 800aaac:	4547      	cmp	r7, r8
 800aaae:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800aab2:	bf8c      	ite	hi
 800aab4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aab8:	2200      	movls	r2, #0
 800aaba:	4083      	lsls	r3, r0
 800aabc:	40ca      	lsrs	r2, r1
 800aabe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aac2:	4313      	orrs	r3, r2
 800aac4:	e7de      	b.n	800aa84 <__b2d+0x48>
 800aac6:	ea42 0501 	orr.w	r5, r2, r1
 800aaca:	e7db      	b.n	800aa84 <__b2d+0x48>
 800aacc:	3ff00000 	.word	0x3ff00000

0800aad0 <__d2b>:
 800aad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aad4:	460f      	mov	r7, r1
 800aad6:	2101      	movs	r1, #1
 800aad8:	ec59 8b10 	vmov	r8, r9, d0
 800aadc:	4616      	mov	r6, r2
 800aade:	f7ff fc1b 	bl	800a318 <_Balloc>
 800aae2:	4604      	mov	r4, r0
 800aae4:	b930      	cbnz	r0, 800aaf4 <__d2b+0x24>
 800aae6:	4602      	mov	r2, r0
 800aae8:	4b24      	ldr	r3, [pc, #144]	; (800ab7c <__d2b+0xac>)
 800aaea:	4825      	ldr	r0, [pc, #148]	; (800ab80 <__d2b+0xb0>)
 800aaec:	f240 310f 	movw	r1, #783	; 0x30f
 800aaf0:	f000 f98a 	bl	800ae08 <__assert_func>
 800aaf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aaf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aafc:	bb2d      	cbnz	r5, 800ab4a <__d2b+0x7a>
 800aafe:	9301      	str	r3, [sp, #4]
 800ab00:	f1b8 0300 	subs.w	r3, r8, #0
 800ab04:	d026      	beq.n	800ab54 <__d2b+0x84>
 800ab06:	4668      	mov	r0, sp
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	f7ff fd17 	bl	800a53c <__lo0bits>
 800ab0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab12:	b1e8      	cbz	r0, 800ab50 <__d2b+0x80>
 800ab14:	f1c0 0320 	rsb	r3, r0, #32
 800ab18:	fa02 f303 	lsl.w	r3, r2, r3
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	40c2      	lsrs	r2, r0
 800ab20:	6163      	str	r3, [r4, #20]
 800ab22:	9201      	str	r2, [sp, #4]
 800ab24:	9b01      	ldr	r3, [sp, #4]
 800ab26:	61a3      	str	r3, [r4, #24]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	bf14      	ite	ne
 800ab2c:	2202      	movne	r2, #2
 800ab2e:	2201      	moveq	r2, #1
 800ab30:	6122      	str	r2, [r4, #16]
 800ab32:	b1bd      	cbz	r5, 800ab64 <__d2b+0x94>
 800ab34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab38:	4405      	add	r5, r0
 800ab3a:	603d      	str	r5, [r7, #0]
 800ab3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab40:	6030      	str	r0, [r6, #0]
 800ab42:	4620      	mov	r0, r4
 800ab44:	b003      	add	sp, #12
 800ab46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab4e:	e7d6      	b.n	800aafe <__d2b+0x2e>
 800ab50:	6161      	str	r1, [r4, #20]
 800ab52:	e7e7      	b.n	800ab24 <__d2b+0x54>
 800ab54:	a801      	add	r0, sp, #4
 800ab56:	f7ff fcf1 	bl	800a53c <__lo0bits>
 800ab5a:	9b01      	ldr	r3, [sp, #4]
 800ab5c:	6163      	str	r3, [r4, #20]
 800ab5e:	3020      	adds	r0, #32
 800ab60:	2201      	movs	r2, #1
 800ab62:	e7e5      	b.n	800ab30 <__d2b+0x60>
 800ab64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab6c:	6038      	str	r0, [r7, #0]
 800ab6e:	6918      	ldr	r0, [r3, #16]
 800ab70:	f7ff fcc4 	bl	800a4fc <__hi0bits>
 800ab74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab78:	e7e2      	b.n	800ab40 <__d2b+0x70>
 800ab7a:	bf00      	nop
 800ab7c:	0800b9c8 	.word	0x0800b9c8
 800ab80:	0800ba50 	.word	0x0800ba50

0800ab84 <__ratio>:
 800ab84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab88:	4688      	mov	r8, r1
 800ab8a:	4669      	mov	r1, sp
 800ab8c:	4681      	mov	r9, r0
 800ab8e:	f7ff ff55 	bl	800aa3c <__b2d>
 800ab92:	a901      	add	r1, sp, #4
 800ab94:	4640      	mov	r0, r8
 800ab96:	ec55 4b10 	vmov	r4, r5, d0
 800ab9a:	f7ff ff4f 	bl	800aa3c <__b2d>
 800ab9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aba2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aba6:	eba3 0c02 	sub.w	ip, r3, r2
 800abaa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abae:	1a9b      	subs	r3, r3, r2
 800abb0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800abb4:	ec51 0b10 	vmov	r0, r1, d0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	bfd6      	itet	le
 800abbc:	460a      	movle	r2, r1
 800abbe:	462a      	movgt	r2, r5
 800abc0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800abc4:	468b      	mov	fp, r1
 800abc6:	462f      	mov	r7, r5
 800abc8:	bfd4      	ite	le
 800abca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800abce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800abd2:	4620      	mov	r0, r4
 800abd4:	ee10 2a10 	vmov	r2, s0
 800abd8:	465b      	mov	r3, fp
 800abda:	4639      	mov	r1, r7
 800abdc:	f7f5 fe2e 	bl	800083c <__aeabi_ddiv>
 800abe0:	ec41 0b10 	vmov	d0, r0, r1
 800abe4:	b003      	add	sp, #12
 800abe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abea <__copybits>:
 800abea:	3901      	subs	r1, #1
 800abec:	b570      	push	{r4, r5, r6, lr}
 800abee:	1149      	asrs	r1, r1, #5
 800abf0:	6914      	ldr	r4, [r2, #16]
 800abf2:	3101      	adds	r1, #1
 800abf4:	f102 0314 	add.w	r3, r2, #20
 800abf8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abfc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac00:	1f05      	subs	r5, r0, #4
 800ac02:	42a3      	cmp	r3, r4
 800ac04:	d30c      	bcc.n	800ac20 <__copybits+0x36>
 800ac06:	1aa3      	subs	r3, r4, r2
 800ac08:	3b11      	subs	r3, #17
 800ac0a:	f023 0303 	bic.w	r3, r3, #3
 800ac0e:	3211      	adds	r2, #17
 800ac10:	42a2      	cmp	r2, r4
 800ac12:	bf88      	it	hi
 800ac14:	2300      	movhi	r3, #0
 800ac16:	4418      	add	r0, r3
 800ac18:	2300      	movs	r3, #0
 800ac1a:	4288      	cmp	r0, r1
 800ac1c:	d305      	bcc.n	800ac2a <__copybits+0x40>
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}
 800ac20:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac24:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac28:	e7eb      	b.n	800ac02 <__copybits+0x18>
 800ac2a:	f840 3b04 	str.w	r3, [r0], #4
 800ac2e:	e7f4      	b.n	800ac1a <__copybits+0x30>

0800ac30 <__any_on>:
 800ac30:	f100 0214 	add.w	r2, r0, #20
 800ac34:	6900      	ldr	r0, [r0, #16]
 800ac36:	114b      	asrs	r3, r1, #5
 800ac38:	4298      	cmp	r0, r3
 800ac3a:	b510      	push	{r4, lr}
 800ac3c:	db11      	blt.n	800ac62 <__any_on+0x32>
 800ac3e:	dd0a      	ble.n	800ac56 <__any_on+0x26>
 800ac40:	f011 011f 	ands.w	r1, r1, #31
 800ac44:	d007      	beq.n	800ac56 <__any_on+0x26>
 800ac46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac4a:	fa24 f001 	lsr.w	r0, r4, r1
 800ac4e:	fa00 f101 	lsl.w	r1, r0, r1
 800ac52:	428c      	cmp	r4, r1
 800ac54:	d10b      	bne.n	800ac6e <__any_on+0x3e>
 800ac56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d803      	bhi.n	800ac66 <__any_on+0x36>
 800ac5e:	2000      	movs	r0, #0
 800ac60:	bd10      	pop	{r4, pc}
 800ac62:	4603      	mov	r3, r0
 800ac64:	e7f7      	b.n	800ac56 <__any_on+0x26>
 800ac66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac6a:	2900      	cmp	r1, #0
 800ac6c:	d0f5      	beq.n	800ac5a <__any_on+0x2a>
 800ac6e:	2001      	movs	r0, #1
 800ac70:	e7f6      	b.n	800ac60 <__any_on+0x30>

0800ac72 <__ascii_wctomb>:
 800ac72:	b149      	cbz	r1, 800ac88 <__ascii_wctomb+0x16>
 800ac74:	2aff      	cmp	r2, #255	; 0xff
 800ac76:	bf85      	ittet	hi
 800ac78:	238a      	movhi	r3, #138	; 0x8a
 800ac7a:	6003      	strhi	r3, [r0, #0]
 800ac7c:	700a      	strbls	r2, [r1, #0]
 800ac7e:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac82:	bf98      	it	ls
 800ac84:	2001      	movls	r0, #1
 800ac86:	4770      	bx	lr
 800ac88:	4608      	mov	r0, r1
 800ac8a:	4770      	bx	lr

0800ac8c <__sflush_r>:
 800ac8c:	898a      	ldrh	r2, [r1, #12]
 800ac8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac92:	4605      	mov	r5, r0
 800ac94:	0710      	lsls	r0, r2, #28
 800ac96:	460c      	mov	r4, r1
 800ac98:	d458      	bmi.n	800ad4c <__sflush_r+0xc0>
 800ac9a:	684b      	ldr	r3, [r1, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dc05      	bgt.n	800acac <__sflush_r+0x20>
 800aca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	dc02      	bgt.n	800acac <__sflush_r+0x20>
 800aca6:	2000      	movs	r0, #0
 800aca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acae:	2e00      	cmp	r6, #0
 800acb0:	d0f9      	beq.n	800aca6 <__sflush_r+0x1a>
 800acb2:	2300      	movs	r3, #0
 800acb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acb8:	682f      	ldr	r7, [r5, #0]
 800acba:	6a21      	ldr	r1, [r4, #32]
 800acbc:	602b      	str	r3, [r5, #0]
 800acbe:	d032      	beq.n	800ad26 <__sflush_r+0x9a>
 800acc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	075a      	lsls	r2, r3, #29
 800acc6:	d505      	bpl.n	800acd4 <__sflush_r+0x48>
 800acc8:	6863      	ldr	r3, [r4, #4]
 800acca:	1ac0      	subs	r0, r0, r3
 800accc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acce:	b10b      	cbz	r3, 800acd4 <__sflush_r+0x48>
 800acd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acd2:	1ac0      	subs	r0, r0, r3
 800acd4:	2300      	movs	r3, #0
 800acd6:	4602      	mov	r2, r0
 800acd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acda:	6a21      	ldr	r1, [r4, #32]
 800acdc:	4628      	mov	r0, r5
 800acde:	47b0      	blx	r6
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	89a3      	ldrh	r3, [r4, #12]
 800ace4:	d106      	bne.n	800acf4 <__sflush_r+0x68>
 800ace6:	6829      	ldr	r1, [r5, #0]
 800ace8:	291d      	cmp	r1, #29
 800acea:	d82b      	bhi.n	800ad44 <__sflush_r+0xb8>
 800acec:	4a29      	ldr	r2, [pc, #164]	; (800ad94 <__sflush_r+0x108>)
 800acee:	410a      	asrs	r2, r1
 800acf0:	07d6      	lsls	r6, r2, #31
 800acf2:	d427      	bmi.n	800ad44 <__sflush_r+0xb8>
 800acf4:	2200      	movs	r2, #0
 800acf6:	6062      	str	r2, [r4, #4]
 800acf8:	04d9      	lsls	r1, r3, #19
 800acfa:	6922      	ldr	r2, [r4, #16]
 800acfc:	6022      	str	r2, [r4, #0]
 800acfe:	d504      	bpl.n	800ad0a <__sflush_r+0x7e>
 800ad00:	1c42      	adds	r2, r0, #1
 800ad02:	d101      	bne.n	800ad08 <__sflush_r+0x7c>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	b903      	cbnz	r3, 800ad0a <__sflush_r+0x7e>
 800ad08:	6560      	str	r0, [r4, #84]	; 0x54
 800ad0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad0c:	602f      	str	r7, [r5, #0]
 800ad0e:	2900      	cmp	r1, #0
 800ad10:	d0c9      	beq.n	800aca6 <__sflush_r+0x1a>
 800ad12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad16:	4299      	cmp	r1, r3
 800ad18:	d002      	beq.n	800ad20 <__sflush_r+0x94>
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	f7fe fe9a 	bl	8009a54 <_free_r>
 800ad20:	2000      	movs	r0, #0
 800ad22:	6360      	str	r0, [r4, #52]	; 0x34
 800ad24:	e7c0      	b.n	800aca8 <__sflush_r+0x1c>
 800ad26:	2301      	movs	r3, #1
 800ad28:	4628      	mov	r0, r5
 800ad2a:	47b0      	blx	r6
 800ad2c:	1c41      	adds	r1, r0, #1
 800ad2e:	d1c8      	bne.n	800acc2 <__sflush_r+0x36>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d0c5      	beq.n	800acc2 <__sflush_r+0x36>
 800ad36:	2b1d      	cmp	r3, #29
 800ad38:	d001      	beq.n	800ad3e <__sflush_r+0xb2>
 800ad3a:	2b16      	cmp	r3, #22
 800ad3c:	d101      	bne.n	800ad42 <__sflush_r+0xb6>
 800ad3e:	602f      	str	r7, [r5, #0]
 800ad40:	e7b1      	b.n	800aca6 <__sflush_r+0x1a>
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad48:	81a3      	strh	r3, [r4, #12]
 800ad4a:	e7ad      	b.n	800aca8 <__sflush_r+0x1c>
 800ad4c:	690f      	ldr	r7, [r1, #16]
 800ad4e:	2f00      	cmp	r7, #0
 800ad50:	d0a9      	beq.n	800aca6 <__sflush_r+0x1a>
 800ad52:	0793      	lsls	r3, r2, #30
 800ad54:	680e      	ldr	r6, [r1, #0]
 800ad56:	bf08      	it	eq
 800ad58:	694b      	ldreq	r3, [r1, #20]
 800ad5a:	600f      	str	r7, [r1, #0]
 800ad5c:	bf18      	it	ne
 800ad5e:	2300      	movne	r3, #0
 800ad60:	eba6 0807 	sub.w	r8, r6, r7
 800ad64:	608b      	str	r3, [r1, #8]
 800ad66:	f1b8 0f00 	cmp.w	r8, #0
 800ad6a:	dd9c      	ble.n	800aca6 <__sflush_r+0x1a>
 800ad6c:	6a21      	ldr	r1, [r4, #32]
 800ad6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad70:	4643      	mov	r3, r8
 800ad72:	463a      	mov	r2, r7
 800ad74:	4628      	mov	r0, r5
 800ad76:	47b0      	blx	r6
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	dc06      	bgt.n	800ad8a <__sflush_r+0xfe>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad82:	81a3      	strh	r3, [r4, #12]
 800ad84:	f04f 30ff 	mov.w	r0, #4294967295
 800ad88:	e78e      	b.n	800aca8 <__sflush_r+0x1c>
 800ad8a:	4407      	add	r7, r0
 800ad8c:	eba8 0800 	sub.w	r8, r8, r0
 800ad90:	e7e9      	b.n	800ad66 <__sflush_r+0xda>
 800ad92:	bf00      	nop
 800ad94:	dfbffffe 	.word	0xdfbffffe

0800ad98 <_fflush_r>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	690b      	ldr	r3, [r1, #16]
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	460c      	mov	r4, r1
 800ada0:	b913      	cbnz	r3, 800ada8 <_fflush_r+0x10>
 800ada2:	2500      	movs	r5, #0
 800ada4:	4628      	mov	r0, r5
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	b118      	cbz	r0, 800adb2 <_fflush_r+0x1a>
 800adaa:	6a03      	ldr	r3, [r0, #32]
 800adac:	b90b      	cbnz	r3, 800adb2 <_fflush_r+0x1a>
 800adae:	f7fe fd3b 	bl	8009828 <__sinit>
 800adb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0f3      	beq.n	800ada2 <_fflush_r+0xa>
 800adba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adbc:	07d0      	lsls	r0, r2, #31
 800adbe:	d404      	bmi.n	800adca <_fflush_r+0x32>
 800adc0:	0599      	lsls	r1, r3, #22
 800adc2:	d402      	bmi.n	800adca <_fflush_r+0x32>
 800adc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adc6:	f7fe fe34 	bl	8009a32 <__retarget_lock_acquire_recursive>
 800adca:	4628      	mov	r0, r5
 800adcc:	4621      	mov	r1, r4
 800adce:	f7ff ff5d 	bl	800ac8c <__sflush_r>
 800add2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800add4:	07da      	lsls	r2, r3, #31
 800add6:	4605      	mov	r5, r0
 800add8:	d4e4      	bmi.n	800ada4 <_fflush_r+0xc>
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	059b      	lsls	r3, r3, #22
 800adde:	d4e1      	bmi.n	800ada4 <_fflush_r+0xc>
 800ade0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ade2:	f7fe fe27 	bl	8009a34 <__retarget_lock_release_recursive>
 800ade6:	e7dd      	b.n	800ada4 <_fflush_r+0xc>

0800ade8 <_sbrk_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4d06      	ldr	r5, [pc, #24]	; (800ae04 <_sbrk_r+0x1c>)
 800adec:	2300      	movs	r3, #0
 800adee:	4604      	mov	r4, r0
 800adf0:	4608      	mov	r0, r1
 800adf2:	602b      	str	r3, [r5, #0]
 800adf4:	f7f7 fb22 	bl	800243c <_sbrk>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_sbrk_r+0x1a>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_sbrk_r+0x1a>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	20000714 	.word	0x20000714

0800ae08 <__assert_func>:
 800ae08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae0a:	4614      	mov	r4, r2
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	4b09      	ldr	r3, [pc, #36]	; (800ae34 <__assert_func+0x2c>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4605      	mov	r5, r0
 800ae14:	68d8      	ldr	r0, [r3, #12]
 800ae16:	b14c      	cbz	r4, 800ae2c <__assert_func+0x24>
 800ae18:	4b07      	ldr	r3, [pc, #28]	; (800ae38 <__assert_func+0x30>)
 800ae1a:	9100      	str	r1, [sp, #0]
 800ae1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae20:	4906      	ldr	r1, [pc, #24]	; (800ae3c <__assert_func+0x34>)
 800ae22:	462b      	mov	r3, r5
 800ae24:	f000 f82c 	bl	800ae80 <fiprintf>
 800ae28:	f000 f83c 	bl	800aea4 <abort>
 800ae2c:	4b04      	ldr	r3, [pc, #16]	; (800ae40 <__assert_func+0x38>)
 800ae2e:	461c      	mov	r4, r3
 800ae30:	e7f3      	b.n	800ae1a <__assert_func+0x12>
 800ae32:	bf00      	nop
 800ae34:	200001e4 	.word	0x200001e4
 800ae38:	0800bcad 	.word	0x0800bcad
 800ae3c:	0800bcba 	.word	0x0800bcba
 800ae40:	0800bce8 	.word	0x0800bce8

0800ae44 <_calloc_r>:
 800ae44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae46:	fba1 2402 	umull	r2, r4, r1, r2
 800ae4a:	b94c      	cbnz	r4, 800ae60 <_calloc_r+0x1c>
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	9201      	str	r2, [sp, #4]
 800ae50:	f7ff f9c4 	bl	800a1dc <_malloc_r>
 800ae54:	9a01      	ldr	r2, [sp, #4]
 800ae56:	4605      	mov	r5, r0
 800ae58:	b930      	cbnz	r0, 800ae68 <_calloc_r+0x24>
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	b003      	add	sp, #12
 800ae5e:	bd30      	pop	{r4, r5, pc}
 800ae60:	220c      	movs	r2, #12
 800ae62:	6002      	str	r2, [r0, #0]
 800ae64:	2500      	movs	r5, #0
 800ae66:	e7f8      	b.n	800ae5a <_calloc_r+0x16>
 800ae68:	4621      	mov	r1, r4
 800ae6a:	f7fe fd56 	bl	800991a <memset>
 800ae6e:	e7f4      	b.n	800ae5a <_calloc_r+0x16>

0800ae70 <malloc>:
 800ae70:	4b02      	ldr	r3, [pc, #8]	; (800ae7c <malloc+0xc>)
 800ae72:	4601      	mov	r1, r0
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	f7ff b9b1 	b.w	800a1dc <_malloc_r>
 800ae7a:	bf00      	nop
 800ae7c:	200001e4 	.word	0x200001e4

0800ae80 <fiprintf>:
 800ae80:	b40e      	push	{r1, r2, r3}
 800ae82:	b503      	push	{r0, r1, lr}
 800ae84:	4601      	mov	r1, r0
 800ae86:	ab03      	add	r3, sp, #12
 800ae88:	4805      	ldr	r0, [pc, #20]	; (800aea0 <fiprintf+0x20>)
 800ae8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae8e:	6800      	ldr	r0, [r0, #0]
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	f000 f837 	bl	800af04 <_vfiprintf_r>
 800ae96:	b002      	add	sp, #8
 800ae98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae9c:	b003      	add	sp, #12
 800ae9e:	4770      	bx	lr
 800aea0:	200001e4 	.word	0x200001e4

0800aea4 <abort>:
 800aea4:	b508      	push	{r3, lr}
 800aea6:	2006      	movs	r0, #6
 800aea8:	f000 fb94 	bl	800b5d4 <raise>
 800aeac:	2001      	movs	r0, #1
 800aeae:	f7f7 fa4d 	bl	800234c <_exit>

0800aeb2 <__sfputc_r>:
 800aeb2:	6893      	ldr	r3, [r2, #8]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	b410      	push	{r4}
 800aeba:	6093      	str	r3, [r2, #8]
 800aebc:	da08      	bge.n	800aed0 <__sfputc_r+0x1e>
 800aebe:	6994      	ldr	r4, [r2, #24]
 800aec0:	42a3      	cmp	r3, r4
 800aec2:	db01      	blt.n	800aec8 <__sfputc_r+0x16>
 800aec4:	290a      	cmp	r1, #10
 800aec6:	d103      	bne.n	800aed0 <__sfputc_r+0x1e>
 800aec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aecc:	f000 bac4 	b.w	800b458 <__swbuf_r>
 800aed0:	6813      	ldr	r3, [r2, #0]
 800aed2:	1c58      	adds	r0, r3, #1
 800aed4:	6010      	str	r0, [r2, #0]
 800aed6:	7019      	strb	r1, [r3, #0]
 800aed8:	4608      	mov	r0, r1
 800aeda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <__sfputs_r>:
 800aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee2:	4606      	mov	r6, r0
 800aee4:	460f      	mov	r7, r1
 800aee6:	4614      	mov	r4, r2
 800aee8:	18d5      	adds	r5, r2, r3
 800aeea:	42ac      	cmp	r4, r5
 800aeec:	d101      	bne.n	800aef2 <__sfputs_r+0x12>
 800aeee:	2000      	movs	r0, #0
 800aef0:	e007      	b.n	800af02 <__sfputs_r+0x22>
 800aef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aef6:	463a      	mov	r2, r7
 800aef8:	4630      	mov	r0, r6
 800aefa:	f7ff ffda 	bl	800aeb2 <__sfputc_r>
 800aefe:	1c43      	adds	r3, r0, #1
 800af00:	d1f3      	bne.n	800aeea <__sfputs_r+0xa>
 800af02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af04 <_vfiprintf_r>:
 800af04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af08:	460d      	mov	r5, r1
 800af0a:	b09d      	sub	sp, #116	; 0x74
 800af0c:	4614      	mov	r4, r2
 800af0e:	4698      	mov	r8, r3
 800af10:	4606      	mov	r6, r0
 800af12:	b118      	cbz	r0, 800af1c <_vfiprintf_r+0x18>
 800af14:	6a03      	ldr	r3, [r0, #32]
 800af16:	b90b      	cbnz	r3, 800af1c <_vfiprintf_r+0x18>
 800af18:	f7fe fc86 	bl	8009828 <__sinit>
 800af1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af1e:	07d9      	lsls	r1, r3, #31
 800af20:	d405      	bmi.n	800af2e <_vfiprintf_r+0x2a>
 800af22:	89ab      	ldrh	r3, [r5, #12]
 800af24:	059a      	lsls	r2, r3, #22
 800af26:	d402      	bmi.n	800af2e <_vfiprintf_r+0x2a>
 800af28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af2a:	f7fe fd82 	bl	8009a32 <__retarget_lock_acquire_recursive>
 800af2e:	89ab      	ldrh	r3, [r5, #12]
 800af30:	071b      	lsls	r3, r3, #28
 800af32:	d501      	bpl.n	800af38 <_vfiprintf_r+0x34>
 800af34:	692b      	ldr	r3, [r5, #16]
 800af36:	b99b      	cbnz	r3, 800af60 <_vfiprintf_r+0x5c>
 800af38:	4629      	mov	r1, r5
 800af3a:	4630      	mov	r0, r6
 800af3c:	f000 faca 	bl	800b4d4 <__swsetup_r>
 800af40:	b170      	cbz	r0, 800af60 <_vfiprintf_r+0x5c>
 800af42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af44:	07dc      	lsls	r4, r3, #31
 800af46:	d504      	bpl.n	800af52 <_vfiprintf_r+0x4e>
 800af48:	f04f 30ff 	mov.w	r0, #4294967295
 800af4c:	b01d      	add	sp, #116	; 0x74
 800af4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af52:	89ab      	ldrh	r3, [r5, #12]
 800af54:	0598      	lsls	r0, r3, #22
 800af56:	d4f7      	bmi.n	800af48 <_vfiprintf_r+0x44>
 800af58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af5a:	f7fe fd6b 	bl	8009a34 <__retarget_lock_release_recursive>
 800af5e:	e7f3      	b.n	800af48 <_vfiprintf_r+0x44>
 800af60:	2300      	movs	r3, #0
 800af62:	9309      	str	r3, [sp, #36]	; 0x24
 800af64:	2320      	movs	r3, #32
 800af66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af6e:	2330      	movs	r3, #48	; 0x30
 800af70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b124 <_vfiprintf_r+0x220>
 800af74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af78:	f04f 0901 	mov.w	r9, #1
 800af7c:	4623      	mov	r3, r4
 800af7e:	469a      	mov	sl, r3
 800af80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af84:	b10a      	cbz	r2, 800af8a <_vfiprintf_r+0x86>
 800af86:	2a25      	cmp	r2, #37	; 0x25
 800af88:	d1f9      	bne.n	800af7e <_vfiprintf_r+0x7a>
 800af8a:	ebba 0b04 	subs.w	fp, sl, r4
 800af8e:	d00b      	beq.n	800afa8 <_vfiprintf_r+0xa4>
 800af90:	465b      	mov	r3, fp
 800af92:	4622      	mov	r2, r4
 800af94:	4629      	mov	r1, r5
 800af96:	4630      	mov	r0, r6
 800af98:	f7ff ffa2 	bl	800aee0 <__sfputs_r>
 800af9c:	3001      	adds	r0, #1
 800af9e:	f000 80a9 	beq.w	800b0f4 <_vfiprintf_r+0x1f0>
 800afa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afa4:	445a      	add	r2, fp
 800afa6:	9209      	str	r2, [sp, #36]	; 0x24
 800afa8:	f89a 3000 	ldrb.w	r3, [sl]
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 80a1 	beq.w	800b0f4 <_vfiprintf_r+0x1f0>
 800afb2:	2300      	movs	r3, #0
 800afb4:	f04f 32ff 	mov.w	r2, #4294967295
 800afb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afbc:	f10a 0a01 	add.w	sl, sl, #1
 800afc0:	9304      	str	r3, [sp, #16]
 800afc2:	9307      	str	r3, [sp, #28]
 800afc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afc8:	931a      	str	r3, [sp, #104]	; 0x68
 800afca:	4654      	mov	r4, sl
 800afcc:	2205      	movs	r2, #5
 800afce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd2:	4854      	ldr	r0, [pc, #336]	; (800b124 <_vfiprintf_r+0x220>)
 800afd4:	f7f5 f8fc 	bl	80001d0 <memchr>
 800afd8:	9a04      	ldr	r2, [sp, #16]
 800afda:	b9d8      	cbnz	r0, 800b014 <_vfiprintf_r+0x110>
 800afdc:	06d1      	lsls	r1, r2, #27
 800afde:	bf44      	itt	mi
 800afe0:	2320      	movmi	r3, #32
 800afe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afe6:	0713      	lsls	r3, r2, #28
 800afe8:	bf44      	itt	mi
 800afea:	232b      	movmi	r3, #43	; 0x2b
 800afec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff0:	f89a 3000 	ldrb.w	r3, [sl]
 800aff4:	2b2a      	cmp	r3, #42	; 0x2a
 800aff6:	d015      	beq.n	800b024 <_vfiprintf_r+0x120>
 800aff8:	9a07      	ldr	r2, [sp, #28]
 800affa:	4654      	mov	r4, sl
 800affc:	2000      	movs	r0, #0
 800affe:	f04f 0c0a 	mov.w	ip, #10
 800b002:	4621      	mov	r1, r4
 800b004:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b008:	3b30      	subs	r3, #48	; 0x30
 800b00a:	2b09      	cmp	r3, #9
 800b00c:	d94d      	bls.n	800b0aa <_vfiprintf_r+0x1a6>
 800b00e:	b1b0      	cbz	r0, 800b03e <_vfiprintf_r+0x13a>
 800b010:	9207      	str	r2, [sp, #28]
 800b012:	e014      	b.n	800b03e <_vfiprintf_r+0x13a>
 800b014:	eba0 0308 	sub.w	r3, r0, r8
 800b018:	fa09 f303 	lsl.w	r3, r9, r3
 800b01c:	4313      	orrs	r3, r2
 800b01e:	9304      	str	r3, [sp, #16]
 800b020:	46a2      	mov	sl, r4
 800b022:	e7d2      	b.n	800afca <_vfiprintf_r+0xc6>
 800b024:	9b03      	ldr	r3, [sp, #12]
 800b026:	1d19      	adds	r1, r3, #4
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	9103      	str	r1, [sp, #12]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	bfbb      	ittet	lt
 800b030:	425b      	neglt	r3, r3
 800b032:	f042 0202 	orrlt.w	r2, r2, #2
 800b036:	9307      	strge	r3, [sp, #28]
 800b038:	9307      	strlt	r3, [sp, #28]
 800b03a:	bfb8      	it	lt
 800b03c:	9204      	strlt	r2, [sp, #16]
 800b03e:	7823      	ldrb	r3, [r4, #0]
 800b040:	2b2e      	cmp	r3, #46	; 0x2e
 800b042:	d10c      	bne.n	800b05e <_vfiprintf_r+0x15a>
 800b044:	7863      	ldrb	r3, [r4, #1]
 800b046:	2b2a      	cmp	r3, #42	; 0x2a
 800b048:	d134      	bne.n	800b0b4 <_vfiprintf_r+0x1b0>
 800b04a:	9b03      	ldr	r3, [sp, #12]
 800b04c:	1d1a      	adds	r2, r3, #4
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	9203      	str	r2, [sp, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	bfb8      	it	lt
 800b056:	f04f 33ff 	movlt.w	r3, #4294967295
 800b05a:	3402      	adds	r4, #2
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b134 <_vfiprintf_r+0x230>
 800b062:	7821      	ldrb	r1, [r4, #0]
 800b064:	2203      	movs	r2, #3
 800b066:	4650      	mov	r0, sl
 800b068:	f7f5 f8b2 	bl	80001d0 <memchr>
 800b06c:	b138      	cbz	r0, 800b07e <_vfiprintf_r+0x17a>
 800b06e:	9b04      	ldr	r3, [sp, #16]
 800b070:	eba0 000a 	sub.w	r0, r0, sl
 800b074:	2240      	movs	r2, #64	; 0x40
 800b076:	4082      	lsls	r2, r0
 800b078:	4313      	orrs	r3, r2
 800b07a:	3401      	adds	r4, #1
 800b07c:	9304      	str	r3, [sp, #16]
 800b07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b082:	4829      	ldr	r0, [pc, #164]	; (800b128 <_vfiprintf_r+0x224>)
 800b084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b088:	2206      	movs	r2, #6
 800b08a:	f7f5 f8a1 	bl	80001d0 <memchr>
 800b08e:	2800      	cmp	r0, #0
 800b090:	d03f      	beq.n	800b112 <_vfiprintf_r+0x20e>
 800b092:	4b26      	ldr	r3, [pc, #152]	; (800b12c <_vfiprintf_r+0x228>)
 800b094:	bb1b      	cbnz	r3, 800b0de <_vfiprintf_r+0x1da>
 800b096:	9b03      	ldr	r3, [sp, #12]
 800b098:	3307      	adds	r3, #7
 800b09a:	f023 0307 	bic.w	r3, r3, #7
 800b09e:	3308      	adds	r3, #8
 800b0a0:	9303      	str	r3, [sp, #12]
 800b0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a4:	443b      	add	r3, r7
 800b0a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a8:	e768      	b.n	800af7c <_vfiprintf_r+0x78>
 800b0aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0ae:	460c      	mov	r4, r1
 800b0b0:	2001      	movs	r0, #1
 800b0b2:	e7a6      	b.n	800b002 <_vfiprintf_r+0xfe>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	3401      	adds	r4, #1
 800b0b8:	9305      	str	r3, [sp, #20]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	f04f 0c0a 	mov.w	ip, #10
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0c6:	3a30      	subs	r2, #48	; 0x30
 800b0c8:	2a09      	cmp	r2, #9
 800b0ca:	d903      	bls.n	800b0d4 <_vfiprintf_r+0x1d0>
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0c6      	beq.n	800b05e <_vfiprintf_r+0x15a>
 800b0d0:	9105      	str	r1, [sp, #20]
 800b0d2:	e7c4      	b.n	800b05e <_vfiprintf_r+0x15a>
 800b0d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0d8:	4604      	mov	r4, r0
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e7f0      	b.n	800b0c0 <_vfiprintf_r+0x1bc>
 800b0de:	ab03      	add	r3, sp, #12
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	462a      	mov	r2, r5
 800b0e4:	4b12      	ldr	r3, [pc, #72]	; (800b130 <_vfiprintf_r+0x22c>)
 800b0e6:	a904      	add	r1, sp, #16
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f3af 8000 	nop.w
 800b0ee:	4607      	mov	r7, r0
 800b0f0:	1c78      	adds	r0, r7, #1
 800b0f2:	d1d6      	bne.n	800b0a2 <_vfiprintf_r+0x19e>
 800b0f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0f6:	07d9      	lsls	r1, r3, #31
 800b0f8:	d405      	bmi.n	800b106 <_vfiprintf_r+0x202>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	059a      	lsls	r2, r3, #22
 800b0fe:	d402      	bmi.n	800b106 <_vfiprintf_r+0x202>
 800b100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b102:	f7fe fc97 	bl	8009a34 <__retarget_lock_release_recursive>
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	065b      	lsls	r3, r3, #25
 800b10a:	f53f af1d 	bmi.w	800af48 <_vfiprintf_r+0x44>
 800b10e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b110:	e71c      	b.n	800af4c <_vfiprintf_r+0x48>
 800b112:	ab03      	add	r3, sp, #12
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	462a      	mov	r2, r5
 800b118:	4b05      	ldr	r3, [pc, #20]	; (800b130 <_vfiprintf_r+0x22c>)
 800b11a:	a904      	add	r1, sp, #16
 800b11c:	4630      	mov	r0, r6
 800b11e:	f000 f879 	bl	800b214 <_printf_i>
 800b122:	e7e4      	b.n	800b0ee <_vfiprintf_r+0x1ea>
 800b124:	0800bce9 	.word	0x0800bce9
 800b128:	0800bcf3 	.word	0x0800bcf3
 800b12c:	00000000 	.word	0x00000000
 800b130:	0800aee1 	.word	0x0800aee1
 800b134:	0800bcef 	.word	0x0800bcef

0800b138 <_printf_common>:
 800b138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b13c:	4616      	mov	r6, r2
 800b13e:	4699      	mov	r9, r3
 800b140:	688a      	ldr	r2, [r1, #8]
 800b142:	690b      	ldr	r3, [r1, #16]
 800b144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b148:	4293      	cmp	r3, r2
 800b14a:	bfb8      	it	lt
 800b14c:	4613      	movlt	r3, r2
 800b14e:	6033      	str	r3, [r6, #0]
 800b150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b154:	4607      	mov	r7, r0
 800b156:	460c      	mov	r4, r1
 800b158:	b10a      	cbz	r2, 800b15e <_printf_common+0x26>
 800b15a:	3301      	adds	r3, #1
 800b15c:	6033      	str	r3, [r6, #0]
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	0699      	lsls	r1, r3, #26
 800b162:	bf42      	ittt	mi
 800b164:	6833      	ldrmi	r3, [r6, #0]
 800b166:	3302      	addmi	r3, #2
 800b168:	6033      	strmi	r3, [r6, #0]
 800b16a:	6825      	ldr	r5, [r4, #0]
 800b16c:	f015 0506 	ands.w	r5, r5, #6
 800b170:	d106      	bne.n	800b180 <_printf_common+0x48>
 800b172:	f104 0a19 	add.w	sl, r4, #25
 800b176:	68e3      	ldr	r3, [r4, #12]
 800b178:	6832      	ldr	r2, [r6, #0]
 800b17a:	1a9b      	subs	r3, r3, r2
 800b17c:	42ab      	cmp	r3, r5
 800b17e:	dc26      	bgt.n	800b1ce <_printf_common+0x96>
 800b180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b184:	1e13      	subs	r3, r2, #0
 800b186:	6822      	ldr	r2, [r4, #0]
 800b188:	bf18      	it	ne
 800b18a:	2301      	movne	r3, #1
 800b18c:	0692      	lsls	r2, r2, #26
 800b18e:	d42b      	bmi.n	800b1e8 <_printf_common+0xb0>
 800b190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b194:	4649      	mov	r1, r9
 800b196:	4638      	mov	r0, r7
 800b198:	47c0      	blx	r8
 800b19a:	3001      	adds	r0, #1
 800b19c:	d01e      	beq.n	800b1dc <_printf_common+0xa4>
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	6922      	ldr	r2, [r4, #16]
 800b1a2:	f003 0306 	and.w	r3, r3, #6
 800b1a6:	2b04      	cmp	r3, #4
 800b1a8:	bf02      	ittt	eq
 800b1aa:	68e5      	ldreq	r5, [r4, #12]
 800b1ac:	6833      	ldreq	r3, [r6, #0]
 800b1ae:	1aed      	subeq	r5, r5, r3
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	bf0c      	ite	eq
 800b1b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1b8:	2500      	movne	r5, #0
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	bfc4      	itt	gt
 800b1be:	1a9b      	subgt	r3, r3, r2
 800b1c0:	18ed      	addgt	r5, r5, r3
 800b1c2:	2600      	movs	r6, #0
 800b1c4:	341a      	adds	r4, #26
 800b1c6:	42b5      	cmp	r5, r6
 800b1c8:	d11a      	bne.n	800b200 <_printf_common+0xc8>
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	e008      	b.n	800b1e0 <_printf_common+0xa8>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	4652      	mov	r2, sl
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	47c0      	blx	r8
 800b1d8:	3001      	adds	r0, #1
 800b1da:	d103      	bne.n	800b1e4 <_printf_common+0xac>
 800b1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e4:	3501      	adds	r5, #1
 800b1e6:	e7c6      	b.n	800b176 <_printf_common+0x3e>
 800b1e8:	18e1      	adds	r1, r4, r3
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	2030      	movs	r0, #48	; 0x30
 800b1ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1f2:	4422      	add	r2, r4
 800b1f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1fc:	3302      	adds	r3, #2
 800b1fe:	e7c7      	b.n	800b190 <_printf_common+0x58>
 800b200:	2301      	movs	r3, #1
 800b202:	4622      	mov	r2, r4
 800b204:	4649      	mov	r1, r9
 800b206:	4638      	mov	r0, r7
 800b208:	47c0      	blx	r8
 800b20a:	3001      	adds	r0, #1
 800b20c:	d0e6      	beq.n	800b1dc <_printf_common+0xa4>
 800b20e:	3601      	adds	r6, #1
 800b210:	e7d9      	b.n	800b1c6 <_printf_common+0x8e>
	...

0800b214 <_printf_i>:
 800b214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b218:	7e0f      	ldrb	r7, [r1, #24]
 800b21a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b21c:	2f78      	cmp	r7, #120	; 0x78
 800b21e:	4691      	mov	r9, r2
 800b220:	4680      	mov	r8, r0
 800b222:	460c      	mov	r4, r1
 800b224:	469a      	mov	sl, r3
 800b226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b22a:	d807      	bhi.n	800b23c <_printf_i+0x28>
 800b22c:	2f62      	cmp	r7, #98	; 0x62
 800b22e:	d80a      	bhi.n	800b246 <_printf_i+0x32>
 800b230:	2f00      	cmp	r7, #0
 800b232:	f000 80d4 	beq.w	800b3de <_printf_i+0x1ca>
 800b236:	2f58      	cmp	r7, #88	; 0x58
 800b238:	f000 80c0 	beq.w	800b3bc <_printf_i+0x1a8>
 800b23c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b244:	e03a      	b.n	800b2bc <_printf_i+0xa8>
 800b246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b24a:	2b15      	cmp	r3, #21
 800b24c:	d8f6      	bhi.n	800b23c <_printf_i+0x28>
 800b24e:	a101      	add	r1, pc, #4	; (adr r1, 800b254 <_printf_i+0x40>)
 800b250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b254:	0800b2ad 	.word	0x0800b2ad
 800b258:	0800b2c1 	.word	0x0800b2c1
 800b25c:	0800b23d 	.word	0x0800b23d
 800b260:	0800b23d 	.word	0x0800b23d
 800b264:	0800b23d 	.word	0x0800b23d
 800b268:	0800b23d 	.word	0x0800b23d
 800b26c:	0800b2c1 	.word	0x0800b2c1
 800b270:	0800b23d 	.word	0x0800b23d
 800b274:	0800b23d 	.word	0x0800b23d
 800b278:	0800b23d 	.word	0x0800b23d
 800b27c:	0800b23d 	.word	0x0800b23d
 800b280:	0800b3c5 	.word	0x0800b3c5
 800b284:	0800b2ed 	.word	0x0800b2ed
 800b288:	0800b37f 	.word	0x0800b37f
 800b28c:	0800b23d 	.word	0x0800b23d
 800b290:	0800b23d 	.word	0x0800b23d
 800b294:	0800b3e7 	.word	0x0800b3e7
 800b298:	0800b23d 	.word	0x0800b23d
 800b29c:	0800b2ed 	.word	0x0800b2ed
 800b2a0:	0800b23d 	.word	0x0800b23d
 800b2a4:	0800b23d 	.word	0x0800b23d
 800b2a8:	0800b387 	.word	0x0800b387
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	1d1a      	adds	r2, r3, #4
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	602a      	str	r2, [r5, #0]
 800b2b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e09f      	b.n	800b400 <_printf_i+0x1ec>
 800b2c0:	6820      	ldr	r0, [r4, #0]
 800b2c2:	682b      	ldr	r3, [r5, #0]
 800b2c4:	0607      	lsls	r7, r0, #24
 800b2c6:	f103 0104 	add.w	r1, r3, #4
 800b2ca:	6029      	str	r1, [r5, #0]
 800b2cc:	d501      	bpl.n	800b2d2 <_printf_i+0xbe>
 800b2ce:	681e      	ldr	r6, [r3, #0]
 800b2d0:	e003      	b.n	800b2da <_printf_i+0xc6>
 800b2d2:	0646      	lsls	r6, r0, #25
 800b2d4:	d5fb      	bpl.n	800b2ce <_printf_i+0xba>
 800b2d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b2da:	2e00      	cmp	r6, #0
 800b2dc:	da03      	bge.n	800b2e6 <_printf_i+0xd2>
 800b2de:	232d      	movs	r3, #45	; 0x2d
 800b2e0:	4276      	negs	r6, r6
 800b2e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2e6:	485a      	ldr	r0, [pc, #360]	; (800b450 <_printf_i+0x23c>)
 800b2e8:	230a      	movs	r3, #10
 800b2ea:	e012      	b.n	800b312 <_printf_i+0xfe>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	6820      	ldr	r0, [r4, #0]
 800b2f0:	1d19      	adds	r1, r3, #4
 800b2f2:	6029      	str	r1, [r5, #0]
 800b2f4:	0605      	lsls	r5, r0, #24
 800b2f6:	d501      	bpl.n	800b2fc <_printf_i+0xe8>
 800b2f8:	681e      	ldr	r6, [r3, #0]
 800b2fa:	e002      	b.n	800b302 <_printf_i+0xee>
 800b2fc:	0641      	lsls	r1, r0, #25
 800b2fe:	d5fb      	bpl.n	800b2f8 <_printf_i+0xe4>
 800b300:	881e      	ldrh	r6, [r3, #0]
 800b302:	4853      	ldr	r0, [pc, #332]	; (800b450 <_printf_i+0x23c>)
 800b304:	2f6f      	cmp	r7, #111	; 0x6f
 800b306:	bf0c      	ite	eq
 800b308:	2308      	moveq	r3, #8
 800b30a:	230a      	movne	r3, #10
 800b30c:	2100      	movs	r1, #0
 800b30e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b312:	6865      	ldr	r5, [r4, #4]
 800b314:	60a5      	str	r5, [r4, #8]
 800b316:	2d00      	cmp	r5, #0
 800b318:	bfa2      	ittt	ge
 800b31a:	6821      	ldrge	r1, [r4, #0]
 800b31c:	f021 0104 	bicge.w	r1, r1, #4
 800b320:	6021      	strge	r1, [r4, #0]
 800b322:	b90e      	cbnz	r6, 800b328 <_printf_i+0x114>
 800b324:	2d00      	cmp	r5, #0
 800b326:	d04b      	beq.n	800b3c0 <_printf_i+0x1ac>
 800b328:	4615      	mov	r5, r2
 800b32a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b32e:	fb03 6711 	mls	r7, r3, r1, r6
 800b332:	5dc7      	ldrb	r7, [r0, r7]
 800b334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b338:	4637      	mov	r7, r6
 800b33a:	42bb      	cmp	r3, r7
 800b33c:	460e      	mov	r6, r1
 800b33e:	d9f4      	bls.n	800b32a <_printf_i+0x116>
 800b340:	2b08      	cmp	r3, #8
 800b342:	d10b      	bne.n	800b35c <_printf_i+0x148>
 800b344:	6823      	ldr	r3, [r4, #0]
 800b346:	07de      	lsls	r6, r3, #31
 800b348:	d508      	bpl.n	800b35c <_printf_i+0x148>
 800b34a:	6923      	ldr	r3, [r4, #16]
 800b34c:	6861      	ldr	r1, [r4, #4]
 800b34e:	4299      	cmp	r1, r3
 800b350:	bfde      	ittt	le
 800b352:	2330      	movle	r3, #48	; 0x30
 800b354:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b35c:	1b52      	subs	r2, r2, r5
 800b35e:	6122      	str	r2, [r4, #16]
 800b360:	f8cd a000 	str.w	sl, [sp]
 800b364:	464b      	mov	r3, r9
 800b366:	aa03      	add	r2, sp, #12
 800b368:	4621      	mov	r1, r4
 800b36a:	4640      	mov	r0, r8
 800b36c:	f7ff fee4 	bl	800b138 <_printf_common>
 800b370:	3001      	adds	r0, #1
 800b372:	d14a      	bne.n	800b40a <_printf_i+0x1f6>
 800b374:	f04f 30ff 	mov.w	r0, #4294967295
 800b378:	b004      	add	sp, #16
 800b37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	f043 0320 	orr.w	r3, r3, #32
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	4833      	ldr	r0, [pc, #204]	; (800b454 <_printf_i+0x240>)
 800b388:	2778      	movs	r7, #120	; 0x78
 800b38a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b38e:	6823      	ldr	r3, [r4, #0]
 800b390:	6829      	ldr	r1, [r5, #0]
 800b392:	061f      	lsls	r7, r3, #24
 800b394:	f851 6b04 	ldr.w	r6, [r1], #4
 800b398:	d402      	bmi.n	800b3a0 <_printf_i+0x18c>
 800b39a:	065f      	lsls	r7, r3, #25
 800b39c:	bf48      	it	mi
 800b39e:	b2b6      	uxthmi	r6, r6
 800b3a0:	07df      	lsls	r7, r3, #31
 800b3a2:	bf48      	it	mi
 800b3a4:	f043 0320 	orrmi.w	r3, r3, #32
 800b3a8:	6029      	str	r1, [r5, #0]
 800b3aa:	bf48      	it	mi
 800b3ac:	6023      	strmi	r3, [r4, #0]
 800b3ae:	b91e      	cbnz	r6, 800b3b8 <_printf_i+0x1a4>
 800b3b0:	6823      	ldr	r3, [r4, #0]
 800b3b2:	f023 0320 	bic.w	r3, r3, #32
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	2310      	movs	r3, #16
 800b3ba:	e7a7      	b.n	800b30c <_printf_i+0xf8>
 800b3bc:	4824      	ldr	r0, [pc, #144]	; (800b450 <_printf_i+0x23c>)
 800b3be:	e7e4      	b.n	800b38a <_printf_i+0x176>
 800b3c0:	4615      	mov	r5, r2
 800b3c2:	e7bd      	b.n	800b340 <_printf_i+0x12c>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	6826      	ldr	r6, [r4, #0]
 800b3c8:	6961      	ldr	r1, [r4, #20]
 800b3ca:	1d18      	adds	r0, r3, #4
 800b3cc:	6028      	str	r0, [r5, #0]
 800b3ce:	0635      	lsls	r5, r6, #24
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	d501      	bpl.n	800b3d8 <_printf_i+0x1c4>
 800b3d4:	6019      	str	r1, [r3, #0]
 800b3d6:	e002      	b.n	800b3de <_printf_i+0x1ca>
 800b3d8:	0670      	lsls	r0, r6, #25
 800b3da:	d5fb      	bpl.n	800b3d4 <_printf_i+0x1c0>
 800b3dc:	8019      	strh	r1, [r3, #0]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	6123      	str	r3, [r4, #16]
 800b3e2:	4615      	mov	r5, r2
 800b3e4:	e7bc      	b.n	800b360 <_printf_i+0x14c>
 800b3e6:	682b      	ldr	r3, [r5, #0]
 800b3e8:	1d1a      	adds	r2, r3, #4
 800b3ea:	602a      	str	r2, [r5, #0]
 800b3ec:	681d      	ldr	r5, [r3, #0]
 800b3ee:	6862      	ldr	r2, [r4, #4]
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f7f4 feec 	bl	80001d0 <memchr>
 800b3f8:	b108      	cbz	r0, 800b3fe <_printf_i+0x1ea>
 800b3fa:	1b40      	subs	r0, r0, r5
 800b3fc:	6060      	str	r0, [r4, #4]
 800b3fe:	6863      	ldr	r3, [r4, #4]
 800b400:	6123      	str	r3, [r4, #16]
 800b402:	2300      	movs	r3, #0
 800b404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b408:	e7aa      	b.n	800b360 <_printf_i+0x14c>
 800b40a:	6923      	ldr	r3, [r4, #16]
 800b40c:	462a      	mov	r2, r5
 800b40e:	4649      	mov	r1, r9
 800b410:	4640      	mov	r0, r8
 800b412:	47d0      	blx	sl
 800b414:	3001      	adds	r0, #1
 800b416:	d0ad      	beq.n	800b374 <_printf_i+0x160>
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	079b      	lsls	r3, r3, #30
 800b41c:	d413      	bmi.n	800b446 <_printf_i+0x232>
 800b41e:	68e0      	ldr	r0, [r4, #12]
 800b420:	9b03      	ldr	r3, [sp, #12]
 800b422:	4298      	cmp	r0, r3
 800b424:	bfb8      	it	lt
 800b426:	4618      	movlt	r0, r3
 800b428:	e7a6      	b.n	800b378 <_printf_i+0x164>
 800b42a:	2301      	movs	r3, #1
 800b42c:	4632      	mov	r2, r6
 800b42e:	4649      	mov	r1, r9
 800b430:	4640      	mov	r0, r8
 800b432:	47d0      	blx	sl
 800b434:	3001      	adds	r0, #1
 800b436:	d09d      	beq.n	800b374 <_printf_i+0x160>
 800b438:	3501      	adds	r5, #1
 800b43a:	68e3      	ldr	r3, [r4, #12]
 800b43c:	9903      	ldr	r1, [sp, #12]
 800b43e:	1a5b      	subs	r3, r3, r1
 800b440:	42ab      	cmp	r3, r5
 800b442:	dcf2      	bgt.n	800b42a <_printf_i+0x216>
 800b444:	e7eb      	b.n	800b41e <_printf_i+0x20a>
 800b446:	2500      	movs	r5, #0
 800b448:	f104 0619 	add.w	r6, r4, #25
 800b44c:	e7f5      	b.n	800b43a <_printf_i+0x226>
 800b44e:	bf00      	nop
 800b450:	0800bcfa 	.word	0x0800bcfa
 800b454:	0800bd0b 	.word	0x0800bd0b

0800b458 <__swbuf_r>:
 800b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45a:	460e      	mov	r6, r1
 800b45c:	4614      	mov	r4, r2
 800b45e:	4605      	mov	r5, r0
 800b460:	b118      	cbz	r0, 800b46a <__swbuf_r+0x12>
 800b462:	6a03      	ldr	r3, [r0, #32]
 800b464:	b90b      	cbnz	r3, 800b46a <__swbuf_r+0x12>
 800b466:	f7fe f9df 	bl	8009828 <__sinit>
 800b46a:	69a3      	ldr	r3, [r4, #24]
 800b46c:	60a3      	str	r3, [r4, #8]
 800b46e:	89a3      	ldrh	r3, [r4, #12]
 800b470:	071a      	lsls	r2, r3, #28
 800b472:	d525      	bpl.n	800b4c0 <__swbuf_r+0x68>
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	b31b      	cbz	r3, 800b4c0 <__swbuf_r+0x68>
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	6922      	ldr	r2, [r4, #16]
 800b47c:	1a98      	subs	r0, r3, r2
 800b47e:	6963      	ldr	r3, [r4, #20]
 800b480:	b2f6      	uxtb	r6, r6
 800b482:	4283      	cmp	r3, r0
 800b484:	4637      	mov	r7, r6
 800b486:	dc04      	bgt.n	800b492 <__swbuf_r+0x3a>
 800b488:	4621      	mov	r1, r4
 800b48a:	4628      	mov	r0, r5
 800b48c:	f7ff fc84 	bl	800ad98 <_fflush_r>
 800b490:	b9e0      	cbnz	r0, 800b4cc <__swbuf_r+0x74>
 800b492:	68a3      	ldr	r3, [r4, #8]
 800b494:	3b01      	subs	r3, #1
 800b496:	60a3      	str	r3, [r4, #8]
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	6022      	str	r2, [r4, #0]
 800b49e:	701e      	strb	r6, [r3, #0]
 800b4a0:	6962      	ldr	r2, [r4, #20]
 800b4a2:	1c43      	adds	r3, r0, #1
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d004      	beq.n	800b4b2 <__swbuf_r+0x5a>
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	07db      	lsls	r3, r3, #31
 800b4ac:	d506      	bpl.n	800b4bc <__swbuf_r+0x64>
 800b4ae:	2e0a      	cmp	r6, #10
 800b4b0:	d104      	bne.n	800b4bc <__swbuf_r+0x64>
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f7ff fc6f 	bl	800ad98 <_fflush_r>
 800b4ba:	b938      	cbnz	r0, 800b4cc <__swbuf_r+0x74>
 800b4bc:	4638      	mov	r0, r7
 800b4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	f000 f806 	bl	800b4d4 <__swsetup_r>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d0d5      	beq.n	800b478 <__swbuf_r+0x20>
 800b4cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b4d0:	e7f4      	b.n	800b4bc <__swbuf_r+0x64>
	...

0800b4d4 <__swsetup_r>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	4b2a      	ldr	r3, [pc, #168]	; (800b580 <__swsetup_r+0xac>)
 800b4d8:	4605      	mov	r5, r0
 800b4da:	6818      	ldr	r0, [r3, #0]
 800b4dc:	460c      	mov	r4, r1
 800b4de:	b118      	cbz	r0, 800b4e8 <__swsetup_r+0x14>
 800b4e0:	6a03      	ldr	r3, [r0, #32]
 800b4e2:	b90b      	cbnz	r3, 800b4e8 <__swsetup_r+0x14>
 800b4e4:	f7fe f9a0 	bl	8009828 <__sinit>
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4ee:	0718      	lsls	r0, r3, #28
 800b4f0:	d422      	bmi.n	800b538 <__swsetup_r+0x64>
 800b4f2:	06d9      	lsls	r1, r3, #27
 800b4f4:	d407      	bmi.n	800b506 <__swsetup_r+0x32>
 800b4f6:	2309      	movs	r3, #9
 800b4f8:	602b      	str	r3, [r5, #0]
 800b4fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4fe:	81a3      	strh	r3, [r4, #12]
 800b500:	f04f 30ff 	mov.w	r0, #4294967295
 800b504:	e034      	b.n	800b570 <__swsetup_r+0x9c>
 800b506:	0758      	lsls	r0, r3, #29
 800b508:	d512      	bpl.n	800b530 <__swsetup_r+0x5c>
 800b50a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b50c:	b141      	cbz	r1, 800b520 <__swsetup_r+0x4c>
 800b50e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b512:	4299      	cmp	r1, r3
 800b514:	d002      	beq.n	800b51c <__swsetup_r+0x48>
 800b516:	4628      	mov	r0, r5
 800b518:	f7fe fa9c 	bl	8009a54 <_free_r>
 800b51c:	2300      	movs	r3, #0
 800b51e:	6363      	str	r3, [r4, #52]	; 0x34
 800b520:	89a3      	ldrh	r3, [r4, #12]
 800b522:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b526:	81a3      	strh	r3, [r4, #12]
 800b528:	2300      	movs	r3, #0
 800b52a:	6063      	str	r3, [r4, #4]
 800b52c:	6923      	ldr	r3, [r4, #16]
 800b52e:	6023      	str	r3, [r4, #0]
 800b530:	89a3      	ldrh	r3, [r4, #12]
 800b532:	f043 0308 	orr.w	r3, r3, #8
 800b536:	81a3      	strh	r3, [r4, #12]
 800b538:	6923      	ldr	r3, [r4, #16]
 800b53a:	b94b      	cbnz	r3, 800b550 <__swsetup_r+0x7c>
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b546:	d003      	beq.n	800b550 <__swsetup_r+0x7c>
 800b548:	4621      	mov	r1, r4
 800b54a:	4628      	mov	r0, r5
 800b54c:	f000 f884 	bl	800b658 <__smakebuf_r>
 800b550:	89a0      	ldrh	r0, [r4, #12]
 800b552:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b556:	f010 0301 	ands.w	r3, r0, #1
 800b55a:	d00a      	beq.n	800b572 <__swsetup_r+0x9e>
 800b55c:	2300      	movs	r3, #0
 800b55e:	60a3      	str	r3, [r4, #8]
 800b560:	6963      	ldr	r3, [r4, #20]
 800b562:	425b      	negs	r3, r3
 800b564:	61a3      	str	r3, [r4, #24]
 800b566:	6923      	ldr	r3, [r4, #16]
 800b568:	b943      	cbnz	r3, 800b57c <__swsetup_r+0xa8>
 800b56a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b56e:	d1c4      	bne.n	800b4fa <__swsetup_r+0x26>
 800b570:	bd38      	pop	{r3, r4, r5, pc}
 800b572:	0781      	lsls	r1, r0, #30
 800b574:	bf58      	it	pl
 800b576:	6963      	ldrpl	r3, [r4, #20]
 800b578:	60a3      	str	r3, [r4, #8]
 800b57a:	e7f4      	b.n	800b566 <__swsetup_r+0x92>
 800b57c:	2000      	movs	r0, #0
 800b57e:	e7f7      	b.n	800b570 <__swsetup_r+0x9c>
 800b580:	200001e4 	.word	0x200001e4

0800b584 <_raise_r>:
 800b584:	291f      	cmp	r1, #31
 800b586:	b538      	push	{r3, r4, r5, lr}
 800b588:	4604      	mov	r4, r0
 800b58a:	460d      	mov	r5, r1
 800b58c:	d904      	bls.n	800b598 <_raise_r+0x14>
 800b58e:	2316      	movs	r3, #22
 800b590:	6003      	str	r3, [r0, #0]
 800b592:	f04f 30ff 	mov.w	r0, #4294967295
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b59a:	b112      	cbz	r2, 800b5a2 <_raise_r+0x1e>
 800b59c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5a0:	b94b      	cbnz	r3, 800b5b6 <_raise_r+0x32>
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 f830 	bl	800b608 <_getpid_r>
 800b5a8:	462a      	mov	r2, r5
 800b5aa:	4601      	mov	r1, r0
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5b2:	f000 b817 	b.w	800b5e4 <_kill_r>
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d00a      	beq.n	800b5d0 <_raise_r+0x4c>
 800b5ba:	1c59      	adds	r1, r3, #1
 800b5bc:	d103      	bne.n	800b5c6 <_raise_r+0x42>
 800b5be:	2316      	movs	r3, #22
 800b5c0:	6003      	str	r3, [r0, #0]
 800b5c2:	2001      	movs	r0, #1
 800b5c4:	e7e7      	b.n	800b596 <_raise_r+0x12>
 800b5c6:	2400      	movs	r4, #0
 800b5c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	4798      	blx	r3
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	e7e0      	b.n	800b596 <_raise_r+0x12>

0800b5d4 <raise>:
 800b5d4:	4b02      	ldr	r3, [pc, #8]	; (800b5e0 <raise+0xc>)
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	6818      	ldr	r0, [r3, #0]
 800b5da:	f7ff bfd3 	b.w	800b584 <_raise_r>
 800b5de:	bf00      	nop
 800b5e0:	200001e4 	.word	0x200001e4

0800b5e4 <_kill_r>:
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	4d07      	ldr	r5, [pc, #28]	; (800b604 <_kill_r+0x20>)
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	4608      	mov	r0, r1
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	602b      	str	r3, [r5, #0]
 800b5f2:	f7f6 fe9b 	bl	800232c <_kill>
 800b5f6:	1c43      	adds	r3, r0, #1
 800b5f8:	d102      	bne.n	800b600 <_kill_r+0x1c>
 800b5fa:	682b      	ldr	r3, [r5, #0]
 800b5fc:	b103      	cbz	r3, 800b600 <_kill_r+0x1c>
 800b5fe:	6023      	str	r3, [r4, #0]
 800b600:	bd38      	pop	{r3, r4, r5, pc}
 800b602:	bf00      	nop
 800b604:	20000714 	.word	0x20000714

0800b608 <_getpid_r>:
 800b608:	f7f6 be88 	b.w	800231c <_getpid>

0800b60c <__swhatbuf_r>:
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	460c      	mov	r4, r1
 800b610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b614:	2900      	cmp	r1, #0
 800b616:	b096      	sub	sp, #88	; 0x58
 800b618:	4615      	mov	r5, r2
 800b61a:	461e      	mov	r6, r3
 800b61c:	da0d      	bge.n	800b63a <__swhatbuf_r+0x2e>
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b624:	f04f 0100 	mov.w	r1, #0
 800b628:	bf0c      	ite	eq
 800b62a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b62e:	2340      	movne	r3, #64	; 0x40
 800b630:	2000      	movs	r0, #0
 800b632:	6031      	str	r1, [r6, #0]
 800b634:	602b      	str	r3, [r5, #0]
 800b636:	b016      	add	sp, #88	; 0x58
 800b638:	bd70      	pop	{r4, r5, r6, pc}
 800b63a:	466a      	mov	r2, sp
 800b63c:	f000 f848 	bl	800b6d0 <_fstat_r>
 800b640:	2800      	cmp	r0, #0
 800b642:	dbec      	blt.n	800b61e <__swhatbuf_r+0x12>
 800b644:	9901      	ldr	r1, [sp, #4]
 800b646:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b64a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b64e:	4259      	negs	r1, r3
 800b650:	4159      	adcs	r1, r3
 800b652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b656:	e7eb      	b.n	800b630 <__swhatbuf_r+0x24>

0800b658 <__smakebuf_r>:
 800b658:	898b      	ldrh	r3, [r1, #12]
 800b65a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b65c:	079d      	lsls	r5, r3, #30
 800b65e:	4606      	mov	r6, r0
 800b660:	460c      	mov	r4, r1
 800b662:	d507      	bpl.n	800b674 <__smakebuf_r+0x1c>
 800b664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	6123      	str	r3, [r4, #16]
 800b66c:	2301      	movs	r3, #1
 800b66e:	6163      	str	r3, [r4, #20]
 800b670:	b002      	add	sp, #8
 800b672:	bd70      	pop	{r4, r5, r6, pc}
 800b674:	ab01      	add	r3, sp, #4
 800b676:	466a      	mov	r2, sp
 800b678:	f7ff ffc8 	bl	800b60c <__swhatbuf_r>
 800b67c:	9900      	ldr	r1, [sp, #0]
 800b67e:	4605      	mov	r5, r0
 800b680:	4630      	mov	r0, r6
 800b682:	f7fe fdab 	bl	800a1dc <_malloc_r>
 800b686:	b948      	cbnz	r0, 800b69c <__smakebuf_r+0x44>
 800b688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b68c:	059a      	lsls	r2, r3, #22
 800b68e:	d4ef      	bmi.n	800b670 <__smakebuf_r+0x18>
 800b690:	f023 0303 	bic.w	r3, r3, #3
 800b694:	f043 0302 	orr.w	r3, r3, #2
 800b698:	81a3      	strh	r3, [r4, #12]
 800b69a:	e7e3      	b.n	800b664 <__smakebuf_r+0xc>
 800b69c:	89a3      	ldrh	r3, [r4, #12]
 800b69e:	6020      	str	r0, [r4, #0]
 800b6a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6a4:	81a3      	strh	r3, [r4, #12]
 800b6a6:	9b00      	ldr	r3, [sp, #0]
 800b6a8:	6163      	str	r3, [r4, #20]
 800b6aa:	9b01      	ldr	r3, [sp, #4]
 800b6ac:	6120      	str	r0, [r4, #16]
 800b6ae:	b15b      	cbz	r3, 800b6c8 <__smakebuf_r+0x70>
 800b6b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	f000 f81d 	bl	800b6f4 <_isatty_r>
 800b6ba:	b128      	cbz	r0, 800b6c8 <__smakebuf_r+0x70>
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	f023 0303 	bic.w	r3, r3, #3
 800b6c2:	f043 0301 	orr.w	r3, r3, #1
 800b6c6:	81a3      	strh	r3, [r4, #12]
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	431d      	orrs	r5, r3
 800b6cc:	81a5      	strh	r5, [r4, #12]
 800b6ce:	e7cf      	b.n	800b670 <__smakebuf_r+0x18>

0800b6d0 <_fstat_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	4d07      	ldr	r5, [pc, #28]	; (800b6f0 <_fstat_r+0x20>)
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	4608      	mov	r0, r1
 800b6da:	4611      	mov	r1, r2
 800b6dc:	602b      	str	r3, [r5, #0]
 800b6de:	f7f6 fe84 	bl	80023ea <_fstat>
 800b6e2:	1c43      	adds	r3, r0, #1
 800b6e4:	d102      	bne.n	800b6ec <_fstat_r+0x1c>
 800b6e6:	682b      	ldr	r3, [r5, #0]
 800b6e8:	b103      	cbz	r3, 800b6ec <_fstat_r+0x1c>
 800b6ea:	6023      	str	r3, [r4, #0]
 800b6ec:	bd38      	pop	{r3, r4, r5, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20000714 	.word	0x20000714

0800b6f4 <_isatty_r>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4d06      	ldr	r5, [pc, #24]	; (800b710 <_isatty_r+0x1c>)
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	4608      	mov	r0, r1
 800b6fe:	602b      	str	r3, [r5, #0]
 800b700:	f7f6 fe83 	bl	800240a <_isatty>
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	d102      	bne.n	800b70e <_isatty_r+0x1a>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	b103      	cbz	r3, 800b70e <_isatty_r+0x1a>
 800b70c:	6023      	str	r3, [r4, #0]
 800b70e:	bd38      	pop	{r3, r4, r5, pc}
 800b710:	20000714 	.word	0x20000714

0800b714 <_init>:
 800b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b716:	bf00      	nop
 800b718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b71a:	bc08      	pop	{r3}
 800b71c:	469e      	mov	lr, r3
 800b71e:	4770      	bx	lr

0800b720 <_fini>:
 800b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b722:	bf00      	nop
 800b724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b726:	bc08      	pop	{r3}
 800b728:	469e      	mov	lr, r3
 800b72a:	4770      	bx	lr
