
OtonomArac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  0800c668  0800c668  0001c668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccc4  0800ccc4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccc4  0800ccc4  0001ccc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cccc  0800cccc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cccc  0800cccc  0001cccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccd4  0800ccd4  0001ccd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ccd8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          000006dc  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200008c4  200008c4  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   000140b2  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039a4  00000000  00000000  0003430d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f98  00000000  00000000  00037cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bf5  00000000  00000000  00038c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000268bf  00000000  00000000  00039845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001785e  00000000  00000000  00060104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cdd67  00000000  00000000  00077962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000053d8  00000000  00000000  001456cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0014aaa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c64c 	.word	0x0800c64c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800c64c 	.word	0x0800c64c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9a6 	b.w	8000fdc <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff0b 	bl	8000acc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc81 	bl	80005e8 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc02 	bl	80004f4 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc78 	bl	80005e8 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff faba 	bl	8000278 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9e08      	ldr	r6, [sp, #32]
 8000d1a:	460d      	mov	r5, r1
 8000d1c:	4604      	mov	r4, r0
 8000d1e:	460f      	mov	r7, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14a      	bne.n	8000dba <__udivmoddi4+0xa6>
 8000d24:	428a      	cmp	r2, r1
 8000d26:	4694      	mov	ip, r2
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0xe2>
 8000d2a:	fab2 f382 	clz	r3, r2
 8000d2e:	b143      	cbz	r3, 8000d42 <__udivmoddi4+0x2e>
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	f1c3 0220 	rsb	r2, r3, #32
 8000d38:	409f      	lsls	r7, r3
 8000d3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d3e:	4317      	orrs	r7, r2
 8000d40:	409c      	lsls	r4, r3
 8000d42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d46:	fa1f f58c 	uxth.w	r5, ip
 8000d4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d4e:	0c22      	lsrs	r2, r4, #16
 8000d50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d58:	fb01 f005 	mul.w	r0, r1, r5
 8000d5c:	4290      	cmp	r0, r2
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x62>
 8000d60:	eb1c 0202 	adds.w	r2, ip, r2
 8000d64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d68:	f080 811c 	bcs.w	8000fa4 <__udivmoddi4+0x290>
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	f240 8119 	bls.w	8000fa4 <__udivmoddi4+0x290>
 8000d72:	3902      	subs	r1, #2
 8000d74:	4462      	add	r2, ip
 8000d76:	1a12      	subs	r2, r2, r0
 8000d78:	b2a4      	uxth	r4, r4
 8000d7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d86:	fb00 f505 	mul.w	r5, r0, r5
 8000d8a:	42a5      	cmp	r5, r4
 8000d8c:	d90a      	bls.n	8000da4 <__udivmoddi4+0x90>
 8000d8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d96:	f080 8107 	bcs.w	8000fa8 <__udivmoddi4+0x294>
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	f240 8104 	bls.w	8000fa8 <__udivmoddi4+0x294>
 8000da0:	4464      	add	r4, ip
 8000da2:	3802      	subs	r0, #2
 8000da4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	2100      	movs	r1, #0
 8000dac:	b11e      	cbz	r6, 8000db6 <__udivmoddi4+0xa2>
 8000dae:	40dc      	lsrs	r4, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	e9c6 4300 	strd	r4, r3, [r6]
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0xbc>
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	f000 80ed 	beq.w	8000f9e <__udivmoddi4+0x28a>
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd0:	fab3 f183 	clz	r1, r3
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	d149      	bne.n	8000e6c <__udivmoddi4+0x158>
 8000dd8:	42ab      	cmp	r3, r5
 8000dda:	d302      	bcc.n	8000de2 <__udivmoddi4+0xce>
 8000ddc:	4282      	cmp	r2, r0
 8000dde:	f200 80f8 	bhi.w	8000fd2 <__udivmoddi4+0x2be>
 8000de2:	1a84      	subs	r4, r0, r2
 8000de4:	eb65 0203 	sbc.w	r2, r5, r3
 8000de8:	2001      	movs	r0, #1
 8000dea:	4617      	mov	r7, r2
 8000dec:	2e00      	cmp	r6, #0
 8000dee:	d0e2      	beq.n	8000db6 <__udivmoddi4+0xa2>
 8000df0:	e9c6 4700 	strd	r4, r7, [r6]
 8000df4:	e7df      	b.n	8000db6 <__udivmoddi4+0xa2>
 8000df6:	b902      	cbnz	r2, 8000dfa <__udivmoddi4+0xe6>
 8000df8:	deff      	udf	#255	; 0xff
 8000dfa:	fab2 f382 	clz	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 8090 	bne.w	8000f24 <__udivmoddi4+0x210>
 8000e04:	1a8a      	subs	r2, r1, r2
 8000e06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0a:	fa1f fe8c 	uxth.w	lr, ip
 8000e0e:	2101      	movs	r1, #1
 8000e10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e14:	fb07 2015 	mls	r0, r7, r5, r2
 8000e18:	0c22      	lsrs	r2, r4, #16
 8000e1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e1e:	fb0e f005 	mul.w	r0, lr, r5
 8000e22:	4290      	cmp	r0, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x124>
 8000e26:	eb1c 0202 	adds.w	r2, ip, r2
 8000e2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0x122>
 8000e30:	4290      	cmp	r0, r2
 8000e32:	f200 80cb 	bhi.w	8000fcc <__udivmoddi4+0x2b8>
 8000e36:	4645      	mov	r5, r8
 8000e38:	1a12      	subs	r2, r2, r0
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e40:	fb07 2210 	mls	r2, r7, r0, r2
 8000e44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e48:	fb0e fe00 	mul.w	lr, lr, r0
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x14e>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x14c>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	f200 80bb 	bhi.w	8000fd6 <__udivmoddi4+0x2c2>
 8000e60:	4610      	mov	r0, r2
 8000e62:	eba4 040e 	sub.w	r4, r4, lr
 8000e66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e6a:	e79f      	b.n	8000dac <__udivmoddi4+0x98>
 8000e6c:	f1c1 0720 	rsb	r7, r1, #32
 8000e70:	408b      	lsls	r3, r1
 8000e72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e82:	40fd      	lsrs	r5, r7
 8000e84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e88:	4323      	orrs	r3, r4
 8000e8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	fb09 5518 	mls	r5, r9, r8, r5
 8000e96:	0c1c      	lsrs	r4, r3, #16
 8000e98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000ea0:	42a5      	cmp	r5, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eaa:	d90b      	bls.n	8000ec4 <__udivmoddi4+0x1b0>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb4:	f080 8088 	bcs.w	8000fc8 <__udivmoddi4+0x2b4>
 8000eb8:	42a5      	cmp	r5, r4
 8000eba:	f240 8085 	bls.w	8000fc8 <__udivmoddi4+0x2b4>
 8000ebe:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec2:	4464      	add	r4, ip
 8000ec4:	1b64      	subs	r4, r4, r5
 8000ec6:	b29d      	uxth	r5, r3
 8000ec8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ecc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x1da>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ee4:	d26c      	bcs.n	8000fc0 <__udivmoddi4+0x2ac>
 8000ee6:	45a6      	cmp	lr, r4
 8000ee8:	d96a      	bls.n	8000fc0 <__udivmoddi4+0x2ac>
 8000eea:	3b02      	subs	r3, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ef2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ef6:	eba4 040e 	sub.w	r4, r4, lr
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	46c8      	mov	r8, r9
 8000efe:	46ae      	mov	lr, r5
 8000f00:	d356      	bcc.n	8000fb0 <__udivmoddi4+0x29c>
 8000f02:	d053      	beq.n	8000fac <__udivmoddi4+0x298>
 8000f04:	b156      	cbz	r6, 8000f1c <__udivmoddi4+0x208>
 8000f06:	ebb0 0208 	subs.w	r2, r0, r8
 8000f0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f12:	40ca      	lsrs	r2, r1
 8000f14:	40cc      	lsrs	r4, r1
 8000f16:	4317      	orrs	r7, r2
 8000f18:	e9c6 7400 	strd	r7, r4, [r6]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	2100      	movs	r1, #0
 8000f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f24:	f1c3 0120 	rsb	r1, r3, #32
 8000f28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f30:	fa25 f101 	lsr.w	r1, r5, r1
 8000f34:	409d      	lsls	r5, r3
 8000f36:	432a      	orrs	r2, r5
 8000f38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f3c:	fa1f fe8c 	uxth.w	lr, ip
 8000f40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f44:	fb07 1510 	mls	r5, r7, r0, r1
 8000f48:	0c11      	lsrs	r1, r2, #16
 8000f4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f52:	428d      	cmp	r5, r1
 8000f54:	fa04 f403 	lsl.w	r4, r4, r3
 8000f58:	d908      	bls.n	8000f6c <__udivmoddi4+0x258>
 8000f5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f62:	d22f      	bcs.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f64:	428d      	cmp	r5, r1
 8000f66:	d92d      	bls.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f68:	3802      	subs	r0, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	1b49      	subs	r1, r1, r5
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f74:	fb07 1115 	mls	r1, r7, r5, r1
 8000f78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f80:	4291      	cmp	r1, r2
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x282>
 8000f84:	eb1c 0202 	adds.w	r2, ip, r2
 8000f88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f8c:	d216      	bcs.n	8000fbc <__udivmoddi4+0x2a8>
 8000f8e:	4291      	cmp	r1, r2
 8000f90:	d914      	bls.n	8000fbc <__udivmoddi4+0x2a8>
 8000f92:	3d02      	subs	r5, #2
 8000f94:	4462      	add	r2, ip
 8000f96:	1a52      	subs	r2, r2, r1
 8000f98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f9c:	e738      	b.n	8000e10 <__udivmoddi4+0xfc>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	e708      	b.n	8000db6 <__udivmoddi4+0xa2>
 8000fa4:	4639      	mov	r1, r7
 8000fa6:	e6e6      	b.n	8000d76 <__udivmoddi4+0x62>
 8000fa8:	4610      	mov	r0, r2
 8000faa:	e6fb      	b.n	8000da4 <__udivmoddi4+0x90>
 8000fac:	4548      	cmp	r0, r9
 8000fae:	d2a9      	bcs.n	8000f04 <__udivmoddi4+0x1f0>
 8000fb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	e7a3      	b.n	8000f04 <__udivmoddi4+0x1f0>
 8000fbc:	4645      	mov	r5, r8
 8000fbe:	e7ea      	b.n	8000f96 <__udivmoddi4+0x282>
 8000fc0:	462b      	mov	r3, r5
 8000fc2:	e794      	b.n	8000eee <__udivmoddi4+0x1da>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	e7d1      	b.n	8000f6c <__udivmoddi4+0x258>
 8000fc8:	46d0      	mov	r8, sl
 8000fca:	e77b      	b.n	8000ec4 <__udivmoddi4+0x1b0>
 8000fcc:	3d02      	subs	r5, #2
 8000fce:	4462      	add	r2, ip
 8000fd0:	e732      	b.n	8000e38 <__udivmoddi4+0x124>
 8000fd2:	4608      	mov	r0, r1
 8000fd4:	e70a      	b.n	8000dec <__udivmoddi4+0xd8>
 8000fd6:	4464      	add	r4, ip
 8000fd8:	3802      	subs	r0, #2
 8000fda:	e742      	b.n	8000e62 <__udivmoddi4+0x14e>

08000fdc <__aeabi_idiv0>:
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	4b91      	ldr	r3, [pc, #580]	; (8001240 <MX_GPIO_Init+0x260>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a90      	ldr	r2, [pc, #576]	; (8001240 <MX_GPIO_Init+0x260>)
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b8e      	ldr	r3, [pc, #568]	; (8001240 <MX_GPIO_Init+0x260>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	61bb      	str	r3, [r7, #24]
 8001010:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	4b8a      	ldr	r3, [pc, #552]	; (8001240 <MX_GPIO_Init+0x260>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a89      	ldr	r2, [pc, #548]	; (8001240 <MX_GPIO_Init+0x260>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b87      	ldr	r3, [pc, #540]	; (8001240 <MX_GPIO_Init+0x260>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b83      	ldr	r3, [pc, #524]	; (8001240 <MX_GPIO_Init+0x260>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a82      	ldr	r2, [pc, #520]	; (8001240 <MX_GPIO_Init+0x260>)
 8001038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b80      	ldr	r3, [pc, #512]	; (8001240 <MX_GPIO_Init+0x260>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b7c      	ldr	r3, [pc, #496]	; (8001240 <MX_GPIO_Init+0x260>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a7b      	ldr	r2, [pc, #492]	; (8001240 <MX_GPIO_Init+0x260>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b79      	ldr	r3, [pc, #484]	; (8001240 <MX_GPIO_Init+0x260>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b75      	ldr	r3, [pc, #468]	; (8001240 <MX_GPIO_Init+0x260>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a74      	ldr	r2, [pc, #464]	; (8001240 <MX_GPIO_Init+0x260>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b72      	ldr	r3, [pc, #456]	; (8001240 <MX_GPIO_Init+0x260>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b6e      	ldr	r3, [pc, #440]	; (8001240 <MX_GPIO_Init+0x260>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a6d      	ldr	r2, [pc, #436]	; (8001240 <MX_GPIO_Init+0x260>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b6b      	ldr	r3, [pc, #428]	; (8001240 <MX_GPIO_Init+0x260>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2108      	movs	r1, #8
 80010a2:	4868      	ldr	r0, [pc, #416]	; (8001244 <MX_GPIO_Init+0x264>)
 80010a4:	f003 fc7c 	bl	80049a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2101      	movs	r1, #1
 80010ac:	4866      	ldr	r0, [pc, #408]	; (8001248 <MX_GPIO_Init+0x268>)
 80010ae:	f003 fc77 	bl	80049a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010b2:	2200      	movs	r2, #0
 80010b4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80010b8:	4864      	ldr	r0, [pc, #400]	; (800124c <MX_GPIO_Init+0x26c>)
 80010ba:	f003 fc71 	bl	80049a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010be:	2308      	movs	r3, #8
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	485b      	ldr	r0, [pc, #364]	; (8001244 <MX_GPIO_Init+0x264>)
 80010d6:	f003 fac7 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010da:	2301      	movs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4855      	ldr	r0, [pc, #340]	; (8001248 <MX_GPIO_Init+0x268>)
 80010f2:	f003 fab9 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010f6:	2308      	movs	r3, #8
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001106:	2305      	movs	r3, #5
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	484d      	ldr	r0, [pc, #308]	; (8001248 <MX_GPIO_Init+0x268>)
 8001112:	f003 faa9 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001116:	2301      	movs	r3, #1
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800111a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800111e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4849      	ldr	r0, [pc, #292]	; (8001250 <MX_GPIO_Init+0x270>)
 800112c:	f003 fa9c 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001130:	2310      	movs	r3, #16
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001140:	2306      	movs	r3, #6
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4841      	ldr	r0, [pc, #260]	; (8001250 <MX_GPIO_Init+0x270>)
 800114c:	f003 fa8c 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001150:	2304      	movs	r3, #4
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	483c      	ldr	r0, [pc, #240]	; (8001254 <MX_GPIO_Init+0x274>)
 8001164:	f003 fa80 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800117a:	2305      	movs	r3, #5
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4833      	ldr	r0, [pc, #204]	; (8001254 <MX_GPIO_Init+0x274>)
 8001186:	f003 fa6f 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800118a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800118e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	482a      	ldr	r0, [pc, #168]	; (800124c <MX_GPIO_Init+0x26c>)
 80011a4:	f003 fa60 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011a8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ba:	2306      	movs	r3, #6
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4820      	ldr	r0, [pc, #128]	; (8001248 <MX_GPIO_Init+0x268>)
 80011c6:	f003 fa4f 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80011ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	481c      	ldr	r0, [pc, #112]	; (8001250 <MX_GPIO_Init+0x270>)
 80011e0:	f003 fa42 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80011e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011f6:	230a      	movs	r3, #10
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_GPIO_Init+0x270>)
 8001202:	f003 fa31 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001206:	2320      	movs	r3, #32
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <MX_GPIO_Init+0x26c>)
 800121a:	f003 fa25 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800121e:	2302      	movs	r3, #2
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001222:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_GPIO_Init+0x264>)
 8001234:	f003 fa18 	bl	8004668 <HAL_GPIO_Init>

}
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40021000 	.word	0x40021000
 8001248:	40020800 	.word	0x40020800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400

08001258 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2C1_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C1_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x58>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001296:	f003 fb9d 	bl	80049d4 <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 fec6 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000204 	.word	0x20000204
 80012ac:	40005400 	.word	0x40005400
 80012b0:	000186a0 	.word	0x000186a0

080012b4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_I2C3_Init+0x50>)
 80012ba:	4a13      	ldr	r2, [pc, #76]	; (8001308 <MX_I2C3_Init+0x54>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_I2C3_Init+0x50>)
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <MX_I2C3_Init+0x58>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_I2C3_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_I2C3_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_I2C3_Init+0x50>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_I2C3_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_I2C3_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_I2C3_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_I2C3_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_I2C3_Init+0x50>)
 80012f2:	f003 fb6f 	bl	80049d4 <HAL_I2C_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80012fc:	f000 fe98 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000258 	.word	0x20000258
 8001308:	40005c00 	.word	0x40005c00
 800130c:	000186a0 	.word	0x000186a0

08001310 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08c      	sub	sp, #48	; 0x30
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a42      	ldr	r2, [pc, #264]	; (8001438 <HAL_I2C_MspInit+0x128>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12d      	bne.n	800138e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	4b41      	ldr	r3, [pc, #260]	; (800143c <HAL_I2C_MspInit+0x12c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a40      	ldr	r2, [pc, #256]	; (800143c <HAL_I2C_MspInit+0x12c>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <HAL_I2C_MspInit+0x12c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800134e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001358:	2301      	movs	r3, #1
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001360:	2304      	movs	r3, #4
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4835      	ldr	r0, [pc, #212]	; (8001440 <HAL_I2C_MspInit+0x130>)
 800136c:	f003 f97c 	bl	8004668 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <HAL_I2C_MspInit+0x12c>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a30      	ldr	r2, [pc, #192]	; (800143c <HAL_I2C_MspInit+0x12c>)
 800137a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
 8001380:	4b2e      	ldr	r3, [pc, #184]	; (800143c <HAL_I2C_MspInit+0x12c>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800138c:	e050      	b.n	8001430 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a2c      	ldr	r2, [pc, #176]	; (8001444 <HAL_I2C_MspInit+0x134>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d14b      	bne.n	8001430 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <HAL_I2C_MspInit+0x12c>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a26      	ldr	r2, [pc, #152]	; (800143c <HAL_I2C_MspInit+0x12c>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <HAL_I2C_MspInit+0x12c>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_I2C_MspInit+0x12c>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <HAL_I2C_MspInit+0x12c>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6313      	str	r3, [r2, #48]	; 0x30
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_I2C_MspInit+0x12c>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d6:	2312      	movs	r3, #18
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013e2:	2304      	movs	r3, #4
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4619      	mov	r1, r3
 80013ec:	4816      	ldr	r0, [pc, #88]	; (8001448 <HAL_I2C_MspInit+0x138>)
 80013ee:	f003 f93b 	bl	8004668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f8:	2312      	movs	r3, #18
 80013fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001404:	2304      	movs	r3, #4
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	480f      	ldr	r0, [pc, #60]	; (800144c <HAL_I2C_MspInit+0x13c>)
 8001410:	f003 f92a 	bl	8004668 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_I2C_MspInit+0x12c>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_I2C_MspInit+0x12c>)
 800141e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001422:	6413      	str	r3, [r2, #64]	; 0x40
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_I2C_MspInit+0x12c>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
}
 8001430:	bf00      	nop
 8001432:	3730      	adds	r7, #48	; 0x30
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40005400 	.word	0x40005400
 800143c:	40023800 	.word	0x40023800
 8001440:	40020400 	.word	0x40020400
 8001444:	40005c00 	.word	0x40005c00
 8001448:	40020800 	.word	0x40020800
 800144c:	40020000 	.word	0x40020000

08001450 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d106      	bne.n	8001472 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3371      	adds	r3, #113	; 0x71
 8001468:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800146a:	e002      	b.n	8001472 <prv_parse_number+0x22>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <prv_parse_number+0x30>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b20      	cmp	r3, #32
 800147e:	d0f5      	beq.n	800146c <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b2d      	cmp	r3, #45	; 0x2d
 8001486:	d104      	bne.n	8001492 <prv_parse_number+0x42>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <prv_parse_number+0x44>
 8001492:	2300      	movs	r3, #0
 8001494:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8001496:	e00d      	b.n	80014b4 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	461a      	mov	r2, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	3b30      	subs	r3, #48	; 0x30
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <prv_parse_number+0x7a>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b2f      	cmp	r3, #47	; 0x2f
 80014c0:	d903      	bls.n	80014ca <prv_parse_number+0x7a>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b39      	cmp	r3, #57	; 0x39
 80014c8:	d9e6      	bls.n	8001498 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 80014ca:	7afb      	ldrb	r3, [r7, #11]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <prv_parse_number+0x86>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	425b      	negs	r3, r3
 80014d4:	e000      	b.n	80014d8 <prv_parse_number+0x88>
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d106      	bne.n	8001502 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3371      	adds	r3, #113	; 0x71
 80014f8:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80014fa:	e002      	b.n	8001502 <prv_parse_float_number+0x1e>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <prv_parse_float_number+0x2c>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b20      	cmp	r3, #32
 800150e:	d0f5      	beq.n	80014fc <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8001510:	2100      	movs	r1, #0
 8001512:	6838      	ldr	r0, [r7, #0]
 8001514:	f009 f88c 	bl	800a630 <strtod>
 8001518:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 800151c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001520:	ec43 2b17 	vmov	d7, r2, r3
}
 8001524:	eeb0 0a47 	vmov.f32	s0, s14
 8001528:	eef0 0a67 	vmov.f32	s1, s15
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 800153c:	2100      	movs	r1, #0
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffd0 	bl	80014e4 <prv_parse_float_number>
 8001544:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8001548:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800154c:	f7ff fafc 	bl	8000b48 <__aeabi_d2iz>
 8001550:	4603      	mov	r3, r0
 8001552:	4a1d      	ldr	r2, [pc, #116]	; (80015c8 <prv_parse_lat_long+0x94>)
 8001554:	fb82 1203 	smull	r1, r2, r2, r3
 8001558:	1152      	asrs	r2, r2, #5
 800155a:	17db      	asrs	r3, r3, #31
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ffd8 	bl	8000514 <__aeabi_i2d>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <prv_parse_lat_long+0x98>)
 8001572:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001576:	f7ff f837 	bl	80005e8 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001582:	f7fe fe79 	bl	8000278 <__aeabi_dsub>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <prv_parse_lat_long+0x9c>)
 8001594:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001598:	f7ff f950 	bl	800083c <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015a4:	f7fe fe6a 	bl	800027c <__adddf3>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80015b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015b4:	ec43 2b17 	vmov	d7, r2, r3
}
 80015b8:	eeb0 0a47 	vmov.f32	s0, s14
 80015bc:	eef0 0a67 	vmov.f32	s1, s15
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	51eb851f 	.word	0x51eb851f
 80015cc:	40590000 	.word	0x40590000
 80015d0:	404e0000 	.word	0x404e0000

080015d4 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80015d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80015e4:	2900      	cmp	r1, #0
 80015e6:	d169      	bne.n	80016bc <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3371      	adds	r3, #113	; 0x71
 80015ec:	2206      	movs	r2, #6
 80015ee:	49ba      	ldr	r1, [pc, #744]	; (80018d8 <prv_parse_term+0x304>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f009 f936 	bl	800a862 <strncmp>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d009      	beq.n	8001610 <prv_parse_term+0x3c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3371      	adds	r3, #113	; 0x71
 8001600:	2206      	movs	r2, #6
 8001602:	49b6      	ldr	r1, [pc, #728]	; (80018dc <prv_parse_term+0x308>)
 8001604:	4618      	mov	r0, r3
 8001606:	f009 f92c 	bl	800a862 <strncmp>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d104      	bne.n	800161a <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001618:	e04e      	b.n	80016b8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3371      	adds	r3, #113	; 0x71
 800161e:	2206      	movs	r2, #6
 8001620:	49af      	ldr	r1, [pc, #700]	; (80018e0 <prv_parse_term+0x30c>)
 8001622:	4618      	mov	r0, r3
 8001624:	f009 f91d 	bl	800a862 <strncmp>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <prv_parse_term+0x6e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3371      	adds	r3, #113	; 0x71
 8001632:	2206      	movs	r2, #6
 8001634:	49ab      	ldr	r1, [pc, #684]	; (80018e4 <prv_parse_term+0x310>)
 8001636:	4618      	mov	r0, r3
 8001638:	f009 f913 	bl	800a862 <strncmp>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d104      	bne.n	800164c <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2202      	movs	r2, #2
 8001646:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800164a:	e035      	b.n	80016b8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3371      	adds	r3, #113	; 0x71
 8001650:	2206      	movs	r2, #6
 8001652:	49a5      	ldr	r1, [pc, #660]	; (80018e8 <prv_parse_term+0x314>)
 8001654:	4618      	mov	r0, r3
 8001656:	f009 f904 	bl	800a862 <strncmp>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d009      	beq.n	8001674 <prv_parse_term+0xa0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3371      	adds	r3, #113	; 0x71
 8001664:	2206      	movs	r2, #6
 8001666:	49a1      	ldr	r1, [pc, #644]	; (80018ec <prv_parse_term+0x318>)
 8001668:	4618      	mov	r0, r3
 800166a:	f009 f8fa 	bl	800a862 <strncmp>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d104      	bne.n	800167e <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2203      	movs	r2, #3
 8001678:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800167c:	e01c      	b.n	80016b8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3371      	adds	r3, #113	; 0x71
 8001682:	2206      	movs	r2, #6
 8001684:	499a      	ldr	r1, [pc, #616]	; (80018f0 <prv_parse_term+0x31c>)
 8001686:	4618      	mov	r0, r3
 8001688:	f009 f8eb 	bl	800a862 <strncmp>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <prv_parse_term+0xd2>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3371      	adds	r3, #113	; 0x71
 8001696:	2206      	movs	r2, #6
 8001698:	4996      	ldr	r1, [pc, #600]	; (80018f4 <prv_parse_term+0x320>)
 800169a:	4618      	mov	r0, r3
 800169c:	f009 f8e1 	bl	800a862 <strncmp>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d104      	bne.n	80016b0 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2204      	movs	r2, #4
 80016aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80016ae:	e003      	b.n	80016b8 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e231      	b.n	8001b20 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80016c2:	2900      	cmp	r1, #0
 80016c4:	f000 822b 	beq.w	8001b1e <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80016ce:	2901      	cmp	r1, #1
 80016d0:	f040 80c9 	bne.w	8001866 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80016da:	3b01      	subs	r3, #1
 80016dc:	2b0a      	cmp	r3, #10
 80016de:	f200 8213 	bhi.w	8001b08 <prv_parse_term+0x534>
 80016e2:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <prv_parse_term+0x114>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	08001715 	.word	0x08001715
 80016ec:	0800178f 	.word	0x0800178f
 80016f0:	080017a5 	.word	0x080017a5
 80016f4:	080017cf 	.word	0x080017cf
 80016f8:	080017e5 	.word	0x080017e5
 80016fc:	0800180f 	.word	0x0800180f
 8001700:	08001823 	.word	0x08001823
 8001704:	08001b09 	.word	0x08001b09
 8001708:	08001837 	.word	0x08001837
 800170c:	08001b09 	.word	0x08001b09
 8001710:	0800184f 	.word	0x0800184f
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800171a:	3b30      	subs	r3, #48	; 0x30
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	0092      	lsls	r2, r2, #2
 8001722:	4413      	add	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800172e:	4413      	add	r3, r2
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3b30      	subs	r3, #48	; 0x30
 8001734:	b2da      	uxtb	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001742:	3b30      	subs	r3, #48	; 0x30
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	4413      	add	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	b2da      	uxtb	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001756:	4413      	add	r3, r2
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3b30      	subs	r3, #48	; 0x30
 800175c:	b2da      	uxtb	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800176a:	3b30      	subs	r3, #48	; 0x30
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	4413      	add	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	b2da      	uxtb	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800177e:	4413      	add	r3, r2
 8001780:	b2db      	uxtb	r3, r3
 8001782:	3b30      	subs	r3, #48	; 0x30
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 800178c:	e1c7      	b.n	8001b1e <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fed0 	bl	8001534 <prv_parse_lat_long>
 8001794:	eeb0 7a40 	vmov.f32	s14, s0
 8001798:	eef0 7a60 	vmov.f32	s15, s1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80017a2:	e1bc      	b.n	8001b1e <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80017aa:	2b53      	cmp	r3, #83	; 0x53
 80017ac:	d005      	beq.n	80017ba <prv_parse_term+0x1e6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80017b4:	2b73      	cmp	r3, #115	; 0x73
 80017b6:	f040 81a9 	bne.w	8001b0c <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80017c0:	4690      	mov	r8, r2
 80017c2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80017cc:	e19e      	b.n	8001b0c <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff feb0 	bl	8001534 <prv_parse_lat_long>
 80017d4:	eeb0 7a40 	vmov.f32	s14, s0
 80017d8:	eef0 7a60 	vmov.f32	s15, s1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80017e2:	e19c      	b.n	8001b1e <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80017ea:	2b57      	cmp	r3, #87	; 0x57
 80017ec:	d005      	beq.n	80017fa <prv_parse_term+0x226>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80017f4:	2b77      	cmp	r3, #119	; 0x77
 80017f6:	f040 818b 	bne.w	8001b10 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001800:	4614      	mov	r4, r2
 8001802:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 800180c:	e180      	b.n	8001b10 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 800180e:	2100      	movs	r1, #0
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff fe1d 	bl	8001450 <prv_parse_number>
 8001816:	4603      	mov	r3, r0
 8001818:	b2da      	uxtb	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8001820:	e17d      	b.n	8001b1e <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8001822:	2100      	movs	r1, #0
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff fe13 	bl	8001450 <prv_parse_number>
 800182a:	4603      	mov	r3, r0
 800182c:	b2da      	uxtb	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8001834:	e173      	b.n	8001b1e <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8001836:	2100      	movs	r1, #0
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fe53 	bl	80014e4 <prv_parse_float_number>
 800183e:	eeb0 7a40 	vmov.f32	s14, s0
 8001842:	eef0 7a60 	vmov.f32	s15, s1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800184c:	e167      	b.n	8001b1e <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 800184e:	2100      	movs	r1, #0
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fe47 	bl	80014e4 <prv_parse_float_number>
 8001856:	eeb0 7a40 	vmov.f32	s14, s0
 800185a:	eef0 7a60 	vmov.f32	s15, s1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001864:	e15b      	b.n	8001b1e <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800186c:	2902      	cmp	r1, #2
 800186e:	f040 8083 	bne.w	8001978 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001878:	3b02      	subs	r3, #2
 800187a:	2b0f      	cmp	r3, #15
 800187c:	d860      	bhi.n	8001940 <prv_parse_term+0x36c>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <prv_parse_term+0x2b0>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	080018c5 	.word	0x080018c5
 8001888:	08001941 	.word	0x08001941
 800188c:	08001941 	.word	0x08001941
 8001890:	08001941 	.word	0x08001941
 8001894:	08001941 	.word	0x08001941
 8001898:	08001941 	.word	0x08001941
 800189c:	08001941 	.word	0x08001941
 80018a0:	08001941 	.word	0x08001941
 80018a4:	08001941 	.word	0x08001941
 80018a8:	08001941 	.word	0x08001941
 80018ac:	08001941 	.word	0x08001941
 80018b0:	08001941 	.word	0x08001941
 80018b4:	08001941 	.word	0x08001941
 80018b8:	080018f9 	.word	0x080018f9
 80018bc:	08001911 	.word	0x08001911
 80018c0:	08001929 	.word	0x08001929
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80018c4:	2100      	movs	r1, #0
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fdc2 	bl	8001450 <prv_parse_number>
 80018cc:	4603      	mov	r3, r0
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 80018d6:	e122      	b.n	8001b1e <prv_parse_term+0x54a>
 80018d8:	0800c668 	.word	0x0800c668
 80018dc:	0800c670 	.word	0x0800c670
 80018e0:	0800c678 	.word	0x0800c678
 80018e4:	0800c680 	.word	0x0800c680
 80018e8:	0800c688 	.word	0x0800c688
 80018ec:	0800c690 	.word	0x0800c690
 80018f0:	0800c698 	.word	0x0800c698
 80018f4:	0800c6a0 	.word	0x0800c6a0
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80018f8:	2100      	movs	r1, #0
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff fdf2 	bl	80014e4 <prv_parse_float_number>
 8001900:	eeb0 7a40 	vmov.f32	s14, s0
 8001904:	eef0 7a60 	vmov.f32	s15, s1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800190e:	e106      	b.n	8001b1e <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8001910:	2100      	movs	r1, #0
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fde6 	bl	80014e4 <prv_parse_float_number>
 8001918:	eeb0 7a40 	vmov.f32	s14, s0
 800191c:	eef0 7a60 	vmov.f32	s15, s1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001926:	e0fa      	b.n	8001b1e <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8001928:	2100      	movs	r1, #0
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fdda 	bl	80014e4 <prv_parse_float_number>
 8001930:	eeb0 7a40 	vmov.f32	s14, s0
 8001934:	eef0 7a60 	vmov.f32	s15, s1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800193e:	e0ee      	b.n	8001b1e <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001946:	2b02      	cmp	r3, #2
 8001948:	f240 80e4 	bls.w	8001b14 <prv_parse_term+0x540>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001952:	2b0e      	cmp	r3, #14
 8001954:	f200 80de 	bhi.w	8001b14 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8001958:	2100      	movs	r1, #0
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fd78 	bl	8001450 <prv_parse_number>
 8001960:	4602      	mov	r2, r0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001968:	3b03      	subs	r3, #3
 800196a:	b2d1      	uxtb	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	460a      	mov	r2, r1
 8001972:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8001976:	e0cd      	b.n	8001b14 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800197e:	2903      	cmp	r1, #3
 8001980:	d11b      	bne.n	80019ba <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001988:	2b02      	cmp	r3, #2
 800198a:	d002      	beq.n	8001992 <prv_parse_term+0x3be>
 800198c:	2b03      	cmp	r3, #3
 800198e:	d00a      	beq.n	80019a6 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001990:	e0c5      	b.n	8001b1e <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001992:	2100      	movs	r1, #0
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff fd5b 	bl	8001450 <prv_parse_number>
 800199a:	4603      	mov	r3, r0
 800199c:	b2da      	uxtb	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80019a4:	e0bb      	b.n	8001b1e <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80019a6:	2100      	movs	r1, #0
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fd51 	bl	8001450 <prv_parse_number>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80019b8:	e0b1      	b.n	8001b1e <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80019c0:	2904      	cmp	r1, #4
 80019c2:	f040 80ac 	bne.w	8001b1e <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80019cc:	3902      	subs	r1, #2
 80019ce:	2909      	cmp	r1, #9
 80019d0:	f200 80a2 	bhi.w	8001b18 <prv_parse_term+0x544>
 80019d4:	a001      	add	r0, pc, #4	; (adr r0, 80019dc <prv_parse_term+0x408>)
 80019d6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80019da:	bf00      	nop
 80019dc:	08001a05 	.word	0x08001a05
 80019e0:	08001b19 	.word	0x08001b19
 80019e4:	08001b19 	.word	0x08001b19
 80019e8:	08001b19 	.word	0x08001b19
 80019ec:	08001b19 	.word	0x08001b19
 80019f0:	08001a1f 	.word	0x08001a1f
 80019f4:	08001a37 	.word	0x08001a37
 80019f8:	08001a4f 	.word	0x08001a4f
 80019fc:	08001ac9 	.word	0x08001ac9
 8001a00:	08001ae1 	.word	0x08001ae1
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a0a:	2b41      	cmp	r3, #65	; 0x41
 8001a0c:	bf0c      	ite	eq
 8001a0e:	2301      	moveq	r3, #1
 8001a10:	2300      	movne	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001a1c:	e07f      	b.n	8001b1e <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fd5f 	bl	80014e4 <prv_parse_float_number>
 8001a26:	eeb0 7a40 	vmov.f32	s14, s0
 8001a2a:	eef0 7a60 	vmov.f32	s15, s1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001a34:	e073      	b.n	8001b1e <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8001a36:	2100      	movs	r1, #0
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fd53 	bl	80014e4 <prv_parse_float_number>
 8001a3e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a42:	eef0 7a60 	vmov.f32	s15, s1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001a4c:	e067      	b.n	8001b1e <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a54:	3b30      	subs	r3, #48	; 0x30
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001a68:	4413      	add	r3, r2
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	3b30      	subs	r3, #48	; 0x30
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001a7c:	3b30      	subs	r3, #48	; 0x30
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001a90:	4413      	add	r3, r2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	3b30      	subs	r3, #48	; 0x30
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001aa4:	3b30      	subs	r3, #48	; 0x30
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001ab8:	4413      	add	r3, r2
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3b30      	subs	r3, #48	; 0x30
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8001ac6:	e02a      	b.n	8001b1e <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fd0a 	bl	80014e4 <prv_parse_float_number>
 8001ad0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad4:	eef0 7a60 	vmov.f32	s15, s1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001ade:	e01e      	b.n	8001b1e <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001ae6:	2957      	cmp	r1, #87	; 0x57
 8001ae8:	d004      	beq.n	8001af4 <prv_parse_term+0x520>
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001af0:	2977      	cmp	r1, #119	; 0x77
 8001af2:	d113      	bne.n	8001b1c <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8001afa:	4602      	mov	r2, r0
 8001afc:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8001b06:	e009      	b.n	8001b1c <prv_parse_term+0x548>
                break;
 8001b08:	bf00      	nop
 8001b0a:	e008      	b.n	8001b1e <prv_parse_term+0x54a>
                break;
 8001b0c:	bf00      	nop
 8001b0e:	e006      	b.n	8001b1e <prv_parse_term+0x54a>
                break;
 8001b10:	bf00      	nop
 8001b12:	e004      	b.n	8001b1e <prv_parse_term+0x54a>
                break;
 8001b14:	bf00      	nop
 8001b16:	e002      	b.n	8001b1e <prv_parse_term+0x54a>
            default:
                break;
 8001b18:	bf00      	nop
 8001b1a:	e000      	b.n	8001b1e <prv_parse_term+0x54a>
                break;
 8001b1c:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8001b1e:	2301      	movs	r3, #1
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b2a:	bf00      	nop

08001b2c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b3a:	2b2f      	cmp	r3, #47	; 0x2f
 8001b3c:	d90d      	bls.n	8001b5a <prv_check_crc+0x2e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b44:	2b39      	cmp	r3, #57	; 0x39
 8001b46:	d808      	bhi.n	8001b5a <prv_check_crc+0x2e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b4e:	3b30      	subs	r3, #48	; 0x30
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	b25a      	sxtb	r2, r3
 8001b58:	e026      	b.n	8001ba8 <prv_check_crc+0x7c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b60:	2b60      	cmp	r3, #96	; 0x60
 8001b62:	d90d      	bls.n	8001b80 <prv_check_crc+0x54>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b6a:	2b7a      	cmp	r3, #122	; 0x7a
 8001b6c:	d808      	bhi.n	8001b80 <prv_check_crc+0x54>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b74:	3b57      	subs	r3, #87	; 0x57
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	b25a      	sxtb	r2, r3
 8001b7e:	e013      	b.n	8001ba8 <prv_check_crc+0x7c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b86:	2b40      	cmp	r3, #64	; 0x40
 8001b88:	d90d      	bls.n	8001ba6 <prv_check_crc+0x7a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b90:	2b5a      	cmp	r3, #90	; 0x5a
 8001b92:	d808      	bhi.n	8001ba6 <prv_check_crc+0x7a>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b9a:	3b37      	subs	r3, #55	; 0x37
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	b25a      	sxtb	r2, r3
 8001ba4:	e000      	b.n	8001ba8 <prv_check_crc+0x7c>
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001bae:	2b2f      	cmp	r3, #47	; 0x2f
 8001bb0:	d90c      	bls.n	8001bcc <prv_check_crc+0xa0>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001bb8:	2b39      	cmp	r3, #57	; 0x39
 8001bba:	d807      	bhi.n	8001bcc <prv_check_crc+0xa0>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001bc2:	b25b      	sxtb	r3, r3
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	e028      	b.n	8001c1e <prv_check_crc+0xf2>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001bd2:	2b60      	cmp	r3, #96	; 0x60
 8001bd4:	d90e      	bls.n	8001bf4 <prv_check_crc+0xc8>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001bdc:	2b7a      	cmp	r3, #122	; 0x7a
 8001bde:	d809      	bhi.n	8001bf4 <prv_check_crc+0xc8>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001be6:	3b57      	subs	r3, #87	; 0x57
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	e014      	b.n	8001c1e <prv_check_crc+0xf2>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001bfa:	2b40      	cmp	r3, #64	; 0x40
 8001bfc:	d90e      	bls.n	8001c1c <prv_check_crc+0xf0>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001c04:	2b5a      	cmp	r3, #90	; 0x5a
 8001c06:	d809      	bhi.n	8001c1c <prv_check_crc+0xf0>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001c0e:	3b37      	subs	r3, #55	; 0x37
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	e000      	b.n	8001c1e <prv_check_crc+0xf2>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d136      	bne.n	8001cc2 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001cc0:	e061      	b.n	8001d86 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d121      	bne.n	8001d10 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	33a1      	adds	r3, #161	; 0xa1
 8001d06:	220c      	movs	r2, #12
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f008 fe30 	bl	800a96e <memcpy>
 8001d0e:	e03a      	b.n	8001d86 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d106      	bne.n	8001d28 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001d26:	e02e      	b.n	8001d86 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d129      	bne.n	8001d86 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001d98:	22b0      	movs	r2, #176	; 0xb0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f008 fd58 	bl	800a852 <memset>
    return 1;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001dbc:	e0ad      	b.n	8001f1a <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b24      	cmp	r3, #36	; 0x24
 8001dc4:	d128      	bne.n	8001e18 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3370      	adds	r3, #112	; 0x70
 8001dca:	2240      	movs	r2, #64	; 0x40
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f008 fd3f 	bl	800a852 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001dda:	2b0b      	cmp	r3, #11
 8001ddc:	f200 8097 	bhi.w	8001f0e <lwgps_process+0x162>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001de6:	4619      	mov	r1, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001e16:	e07a      	b.n	8001f0e <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b2c      	cmp	r3, #44	; 0x2c
 8001e1e:	d11d      	bne.n	8001e5c <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff fbd7 	bl	80015d4 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4053      	eors	r3, r2
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001e50:	3301      	adds	r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001e5a:	e058      	b.n	8001f0e <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b2a      	cmp	r3, #42	; 0x2a
 8001e62:	d117      	bne.n	8001e94 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f7ff fbb5 	bl	80015d4 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001e88:	3301      	adds	r3, #1
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001e92:	e03c      	b.n	8001f0e <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b0d      	cmp	r3, #13
 8001e9a:	d109      	bne.n	8001eb0 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7ff fe45 	bl	8001b2c <prv_check_crc>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d032      	beq.n	8001f0e <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f7ff feca 	bl	8001c42 <prv_copy_from_tmp_memory>
 8001eae:	e02e      	b.n	8001f0e <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4053      	eors	r3, r2
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001ed4:	2b0b      	cmp	r3, #11
 8001ed6:	d81a      	bhi.n	8001f0e <lwgps_process+0x162>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001ede:	4619      	mov	r1, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f47f af4e 	bne.w	8001dbe <lwgps_process+0x12>
        }
    }
    return 1;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f30:	f002 f960 	bl	80041f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f34:	f000 f812 	bl	8001f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f38:	f7ff f852 	bl	8000fe0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f3c:	f7ff f98c 	bl	8001258 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001f40:	f000 fa0c 	bl	800235c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001f44:	f000 fbf0 	bl	8002728 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001f48:	f000 fbc4 	bl	80026d4 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001f4c:	f7ff f9b2 	bl	80012b4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8001f50:	f000 f874 	bl	800203c <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001f54:	f000 f8b6 	bl	80020c4 <loop>
 8001f58:	e7fc      	b.n	8001f54 <main+0x28>
	...

08001f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b094      	sub	sp, #80	; 0x50
 8001f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f62:	f107 0320 	add.w	r3, r7, #32
 8001f66:	2230      	movs	r2, #48	; 0x30
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f008 fc71 	bl	800a852 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	4b28      	ldr	r3, [pc, #160]	; (8002028 <SystemClock_Config+0xcc>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	4a27      	ldr	r2, [pc, #156]	; (8002028 <SystemClock_Config+0xcc>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <SystemClock_Config+0xcc>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <SystemClock_Config+0xd0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a21      	ldr	r2, [pc, #132]	; (800202c <SystemClock_Config+0xd0>)
 8001fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <SystemClock_Config+0xd0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fcc:	2308      	movs	r3, #8
 8001fce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001fd0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001fd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fda:	2307      	movs	r3, #7
 8001fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fde:	f107 0320 	add.w	r3, r7, #32
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 f99a 	bl	800631c <HAL_RCC_OscConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001fee:	f000 f81f 	bl	8002030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff2:	230f      	movs	r3, #15
 8001ff4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ffe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002002:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002008:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	2105      	movs	r1, #5
 8002010:	4618      	mov	r0, r3
 8002012:	f004 fbfb 	bl	800680c <HAL_RCC_ClockConfig>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800201c:	f000 f808 	bl	8002030 <Error_Handler>
  }
}
 8002020:	bf00      	nop
 8002022:	3750      	adds	r7, #80	; 0x50
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	40007000 	.word	0x40007000

08002030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002034:	b672      	cpsid	i
}
 8002036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002038:	e7fe      	b.n	8002038 <Error_Handler+0x8>
	...

0800203c <setup>:
void Gorevler1();
void Gorevler2();
void Gorevler3();

void setup()
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	//uart3.Yapilandir(115200, GPIOD, GPIO_PIN_8,GPIOB ,GPIO_PIN_11);
	//uart3.receiveIT(RotaData, 8);
	//HAL_UART_Receive_IT(&huart3, ArayuzData, sizeof(ArayuzData));
	ArayuzPaket.PaketKesmeInit();
 8002040:	4816      	ldr	r0, [pc, #88]	; (800209c <setup+0x60>)
 8002042:	f001 fb60 	bl	8003706 <_ZN5Paket14PaketKesmeInitEv>
	gps.Yapilandir();
 8002046:	4816      	ldr	r0, [pc, #88]	; (80020a0 <setup+0x64>)
 8002048:	f000 fc92 	bl	8002970 <_ZN3GPS10YapilandirEv>
	mag.Yapilandir();
 800204c:	4815      	ldr	r0, [pc, #84]	; (80020a4 <setup+0x68>)
 800204e:	f001 f947 	bl	80032e0 <_ZN8HMC5883L10YapilandirEv>
	mag.KalibreEt();
 8002052:	4814      	ldr	r0, [pc, #80]	; (80020a4 <setup+0x68>)
 8002054:	f001 f9ab 	bl	80033ae <_ZN8HMC5883L9KalibreEtEv>
	imu.DBC_MPU6500_YAPILANDIR();
 8002058:	4813      	ldr	r0, [pc, #76]	; (80020a8 <setup+0x6c>)
 800205a:	f000 fd48 	bl	8002aee <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv>
	imu.DBC_GYRO_OFSET();
 800205e:	4812      	ldr	r0, [pc, #72]	; (80020a8 <setup+0x6c>)
 8002060:	f000 fdaa 	bl	8002bb8 <_ZN5MyImu14DBC_GYRO_OFSETEv>
	timer7.Yapilandir(84000,5);
 8002064:	2205      	movs	r2, #5
 8002066:	4911      	ldr	r1, [pc, #68]	; (80020ac <setup+0x70>)
 8002068:	4811      	ldr	r0, [pc, #68]	; (80020b0 <setup+0x74>)
 800206a:	f001 ffa3 	bl	8003fb4 <_ZN5Timer10YapilandirEmm>
	timer7.AktifEt();
 800206e:	4810      	ldr	r0, [pc, #64]	; (80020b0 <setup+0x74>)
 8002070:	f001 ffbf 	bl	8003ff2 <_ZN5Timer7AktifEtEv>

	gorev.GorevAl(Gorevler2,25);
 8002074:	2219      	movs	r2, #25
 8002076:	490f      	ldr	r1, [pc, #60]	; (80020b4 <setup+0x78>)
 8002078:	480f      	ldr	r0, [pc, #60]	; (80020b8 <setup+0x7c>)
 800207a:	f001 fe8f 	bl	8003d9c <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(Gorevler3,500);
 800207e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002082:	490e      	ldr	r1, [pc, #56]	; (80020bc <setup+0x80>)
 8002084:	480c      	ldr	r0, [pc, #48]	; (80020b8 <setup+0x7c>)
 8002086:	f001 fe89 	bl	8003d9c <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(Gorevler1,1000);
 800208a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800208e:	490c      	ldr	r1, [pc, #48]	; (80020c0 <setup+0x84>)
 8002090:	4809      	ldr	r0, [pc, #36]	; (80020b8 <setup+0x7c>)
 8002092:	f001 fe83 	bl	8003d9c <_ZN13Gorevyonetici7GorevAlEPFvvEs>
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000604 	.word	0x20000604
 80020a0:	20000398 	.word	0x20000398
 80020a4:	200004e0 	.word	0x200004e0
 80020a8:	20000350 	.word	0x20000350
 80020ac:	00014820 	.word	0x00014820
 80020b0:	200002e4 	.word	0x200002e4
 80020b4:	08002161 	.word	0x08002161
 80020b8:	200002e8 	.word	0x200002e8
 80020bc:	08002231 	.word	0x08002231
 80020c0:	080020f1 	.word	0x080020f1

080020c4 <loop>:

void loop()
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	gorev.GorevCalistir();
 80020c8:	4807      	ldr	r0, [pc, #28]	; (80020e8 <loop+0x24>)
 80020ca:	f001 fee9 	bl	8003ea0 <_ZN13Gorevyonetici13GorevCalistirEv>
	if(ArayuzPaket.PaketCozBayrak)
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <loop+0x28>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <loop+0x1e>
	{
		ArayuzPaket.PaketCoz();
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <loop+0x28>)
 80020d8:	f001 fc10 	bl	80038fc <_ZN5Paket8PaketCozEv>
		ArayuzPaket.PaketCozBayrak = false;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <loop+0x28>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
	}
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200002e8 	.word	0x200002e8
 80020ec:	20000604 	.word	0x20000604

080020f0 <_Z9Gorevler1v>:

void Gorevler1()
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	ed2d 8b02 	vpush	{d8}
 80020f6:	af00      	add	r7, sp, #0
	//gps.LatitudeAl();
	//gps.LongitudeAl();
	GPIOD->ODR ^= GPIO_PIN_12;
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <_Z9Gorevler1v+0x5c>)
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	4a13      	ldr	r2, [pc, #76]	; (800214c <_Z9Gorevler1v+0x5c>)
 80020fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002102:	6153      	str	r3, [r2, #20]
	GpsPaket.PaketOlustur(*gps.LatitudeAl(),*gps.LongitudeAl());
 8002104:	4812      	ldr	r0, [pc, #72]	; (8002150 <_Z9Gorevler1v+0x60>)
 8002106:	f000 fcac 	bl	8002a62 <_ZN3GPS10LatitudeAlEv>
 800210a:	4603      	mov	r3, r0
 800210c:	ed93 8a00 	vldr	s16, [r3]
 8002110:	480f      	ldr	r0, [pc, #60]	; (8002150 <_Z9Gorevler1v+0x60>)
 8002112:	f000 fcb3 	bl	8002a7c <_ZN3GPS11LongitudeAlEv>
 8002116:	4603      	mov	r3, r0
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	eef0 0a67 	vmov.f32	s1, s15
 8002120:	eeb0 0a48 	vmov.f32	s0, s16
 8002124:	480b      	ldr	r0, [pc, #44]	; (8002154 <_Z9Gorevler1v+0x64>)
 8002126:	f001 fafe 	bl	8003726 <_ZN5Paket12PaketOlusturEff>
	GpsPaket.gpsPaketCagir(GpsDataPacket);
 800212a:	490b      	ldr	r1, [pc, #44]	; (8002158 <_Z9Gorevler1v+0x68>)
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <_Z9Gorevler1v+0x64>)
 800212e:	f001 fbb7 	bl	80038a0 <_ZN5Paket13gpsPaketCagirEPh>
	//uart3.transmit(GpsDataPacket, sizeof(GpsDataPacket));
	HAL_UART_Transmit(&huart3, GpsDataPacket, sizeof(GpsDataPacket), HAL_MAX_DELAY);
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	220e      	movs	r2, #14
 8002138:	4907      	ldr	r1, [pc, #28]	; (8002158 <_Z9Gorevler1v+0x68>)
 800213a:	4808      	ldr	r0, [pc, #32]	; (800215c <_Z9Gorevler1v+0x6c>)
 800213c:	f004 fe5f 	bl	8006dfe <HAL_UART_Transmit>
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	ecbd 8b02 	vpop	{d8}
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40020c00 	.word	0x40020c00
 8002150:	20000398 	.word	0x20000398
 8002154:	200004fc 	.word	0x200004fc
 8002158:	200002ac 	.word	0x200002ac
 800215c:	2000072c 	.word	0x2000072c

08002160 <_Z9Gorevler2v>:
void Gorevler2()
{
 8002160:	b580      	push	{r7, lr}
 8002162:	ed2d 8b04 	vpush	{d8-d9}
 8002166:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= GPIO_PIN_13;
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <_Z9Gorevler2v+0xac>)
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	4a27      	ldr	r2, [pc, #156]	; (800220c <_Z9Gorevler2v+0xac>)
 800216e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002172:	6153      	str	r3, [r2, #20]
	imu.DBC_ACI_BULMA();
 8002174:	4826      	ldr	r0, [pc, #152]	; (8002210 <_Z9Gorevler2v+0xb0>)
 8002176:	f000 fe93 	bl	8002ea0 <_ZN5MyImu13DBC_ACI_BULMAEv>
	heading = mag.HeadingOlustur();
 800217a:	4826      	ldr	r0, [pc, #152]	; (8002214 <_Z9Gorevler2v+0xb4>)
 800217c:	f001 f980 	bl	8003480 <_ZN8HMC5883L14HeadingOlusturEv>
 8002180:	eef0 7a40 	vmov.f32	s15, s0
 8002184:	4b24      	ldr	r3, [pc, #144]	; (8002218 <_Z9Gorevler2v+0xb8>)
 8002186:	edc3 7a00 	vstr	s15, [r3]
	pitch=*imu.PitchAl();
 800218a:	4821      	ldr	r0, [pc, #132]	; (8002210 <_Z9Gorevler2v+0xb0>)
 800218c:	f001 f854 	bl	8003238 <_ZN5MyImu7PitchAlEv>
 8002190:	4603      	mov	r3, r0
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a21      	ldr	r2, [pc, #132]	; (800221c <_Z9Gorevler2v+0xbc>)
 8002196:	6013      	str	r3, [r2, #0]
	roll=*imu.RollAl();
 8002198:	481d      	ldr	r0, [pc, #116]	; (8002210 <_Z9Gorevler2v+0xb0>)
 800219a:	f001 f859 	bl	8003250 <_ZN5MyImu6RollAlEv>
 800219e:	4603      	mov	r3, r0
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <_Z9Gorevler2v+0xc0>)
 80021a4:	6013      	str	r3, [r2, #0]
	yaw=*imu.YawAl();
 80021a6:	481a      	ldr	r0, [pc, #104]	; (8002210 <_Z9Gorevler2v+0xb0>)
 80021a8:	f001 f85e 	bl	8003268 <_ZN5MyImu5YawAlEv>
 80021ac:	4603      	mov	r3, r0
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <_Z9Gorevler2v+0xc4>)
 80021b2:	6013      	str	r3, [r2, #0]
	ImuPaket.PaketOlustur(*imu.PitchAl(), *imu.RollAl(), *imu.YawAl(), *imu.SicaklikAl());
 80021b4:	4816      	ldr	r0, [pc, #88]	; (8002210 <_Z9Gorevler2v+0xb0>)
 80021b6:	f001 f83f 	bl	8003238 <_ZN5MyImu7PitchAlEv>
 80021ba:	4603      	mov	r3, r0
 80021bc:	ed93 8a00 	vldr	s16, [r3]
 80021c0:	4813      	ldr	r0, [pc, #76]	; (8002210 <_Z9Gorevler2v+0xb0>)
 80021c2:	f001 f845 	bl	8003250 <_ZN5MyImu6RollAlEv>
 80021c6:	4603      	mov	r3, r0
 80021c8:	edd3 8a00 	vldr	s17, [r3]
 80021cc:	4810      	ldr	r0, [pc, #64]	; (8002210 <_Z9Gorevler2v+0xb0>)
 80021ce:	f001 f84b 	bl	8003268 <_ZN5MyImu5YawAlEv>
 80021d2:	4603      	mov	r3, r0
 80021d4:	ed93 9a00 	vldr	s18, [r3]
 80021d8:	480d      	ldr	r0, [pc, #52]	; (8002210 <_Z9Gorevler2v+0xb0>)
 80021da:	f001 f851 	bl	8003280 <_ZN5MyImu10SicaklikAlEv>
 80021de:	4603      	mov	r3, r0
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	eef0 1a67 	vmov.f32	s3, s15
 80021e8:	eeb0 1a49 	vmov.f32	s2, s18
 80021ec:	eef0 0a68 	vmov.f32	s1, s17
 80021f0:	eeb0 0a48 	vmov.f32	s0, s16
 80021f4:	480c      	ldr	r0, [pc, #48]	; (8002228 <_Z9Gorevler2v+0xc8>)
 80021f6:	f001 fadf 	bl	80037b8 <_ZN5Paket12PaketOlusturEffff>
	ImuPaket.imuPaketCagir(ImuDataPacket);
 80021fa:	490c      	ldr	r1, [pc, #48]	; (800222c <_Z9Gorevler2v+0xcc>)
 80021fc:	480a      	ldr	r0, [pc, #40]	; (8002228 <_Z9Gorevler2v+0xc8>)
 80021fe:	f001 fb5f 	bl	80038c0 <_ZN5Paket13imuPaketCagirEPh>
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	ecbd 8b04 	vpop	{d8-d9}
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40020c00 	.word	0x40020c00
 8002210:	20000350 	.word	0x20000350
 8002214:	200004e0 	.word	0x200004e0
 8002218:	200002e0 	.word	0x200002e0
 800221c:	200002d4 	.word	0x200002d4
 8002220:	200002d8 	.word	0x200002d8
 8002224:	200002dc 	.word	0x200002dc
 8002228:	20000580 	.word	0x20000580
 800222c:	200002bc 	.word	0x200002bc

08002230 <_Z9Gorevler3v>:
void Gorevler3()
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, ImuDataPacket, sizeof(ImuDataPacket), HAL_MAX_DELAY);
 8002234:	f04f 33ff 	mov.w	r3, #4294967295
 8002238:	2215      	movs	r2, #21
 800223a:	4903      	ldr	r1, [pc, #12]	; (8002248 <_Z9Gorevler3v+0x18>)
 800223c:	4803      	ldr	r0, [pc, #12]	; (800224c <_Z9Gorevler3v+0x1c>)
 800223e:	f004 fdde 	bl	8006dfe <HAL_UART_Transmit>

}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200002bc 	.word	0x200002bc
 800224c:	2000072c 	.word	0x2000072c

08002250 <TIM3_IRQHandler>:
extern "C" void TIM3_IRQHandler()
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	gorev.BayrakKaldir();
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <TIM3_IRQHandler+0x10>)
 8002256:	f001 fdcd 	bl	8003df4 <_ZN13Gorevyonetici12BayrakKaldirEv>
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200002e8 	.word	0x200002e8

08002264 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a08      	ldr	r2, [pc, #32]	; (8002294 <HAL_UART_RxCpltCallback+0x30>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d102      	bne.n	800227c <HAL_UART_RxCpltCallback+0x18>
	    {
	       gps.UartRxCpltCallback(); // Your existing callback for USART2
 8002276:	4808      	ldr	r0, [pc, #32]	; (8002298 <HAL_UART_RxCpltCallback+0x34>)
 8002278:	f000 fb90 	bl	800299c <_ZN3GPS18UartRxCpltCallbackEv>
	    }
	    if (huart->Instance == USART3)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a06      	ldr	r2, [pc, #24]	; (800229c <HAL_UART_RxCpltCallback+0x38>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d102      	bne.n	800228c <HAL_UART_RxCpltCallback+0x28>
	    {
	    	ArayuzPaket.BayrakKaldir();
 8002286:	4806      	ldr	r0, [pc, #24]	; (80022a0 <HAL_UART_RxCpltCallback+0x3c>)
 8002288:	f001 fb2a 	bl	80038e0 <_ZN5Paket12BayrakKaldirEv>
	    	//HAL_UART_Receive_IT(&huart3, ArayuzData, sizeof(ArayuzData));

	    }
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40004400 	.word	0x40004400
 8002298:	20000398 	.word	0x20000398
 800229c:	40004800 	.word	0x40004800
 80022a0:	20000604 	.word	0x20000604

080022a4 <_Z41__static_initialization_and_destruction_0ii>:
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d12c      	bne.n	800230e <_Z41__static_initialization_and_destruction_0ii+0x6a>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d127      	bne.n	800230e <_Z41__static_initialization_and_destruction_0ii+0x6a>
Timer timer7(TIM3);
 80022be:	4916      	ldr	r1, [pc, #88]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80022c0:	4816      	ldr	r0, [pc, #88]	; (800231c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80022c2:	f001 fe67 	bl	8003f94 <_ZN5TimerC1EP11TIM_TypeDef>
Gorevyonetici gorev(TIM3);
 80022c6:	4914      	ldr	r1, [pc, #80]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80022c8:	4815      	ldr	r0, [pc, #84]	; (8002320 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80022ca:	f001 fd33 	bl	8003d34 <_ZN13GorevyoneticiC1EP11TIM_TypeDef>
MyImu imu(&hi2c1);
 80022ce:	4915      	ldr	r1, [pc, #84]	; (8002324 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80022d0:	4815      	ldr	r0, [pc, #84]	; (8002328 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80022d2:	f000 fbe0 	bl	8002a96 <_ZN5MyImuC1EP17I2C_HandleTypeDef>
GPS gps(&huart2);
 80022d6:	4915      	ldr	r1, [pc, #84]	; (800232c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80022d8:	4815      	ldr	r0, [pc, #84]	; (8002330 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80022da:	f000 fb28 	bl	800292e <_ZN3GPSC1EP20__UART_HandleTypeDef>
HMC5883L mag(&hi2c3);
 80022de:	4915      	ldr	r1, [pc, #84]	; (8002334 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80022e0:	4815      	ldr	r0, [pc, #84]	; (8002338 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80022e2:	f000 ffd9 	bl	8003298 <_ZN8HMC5883LC1EP17I2C_HandleTypeDef>
Paket GpsPaket(0x12, 0x34, 0x01, 0x09); //veri boyutu 9
 80022e6:	2309      	movs	r3, #9
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2301      	movs	r3, #1
 80022ec:	2234      	movs	r2, #52	; 0x34
 80022ee:	2112      	movs	r1, #18
 80022f0:	4812      	ldr	r0, [pc, #72]	; (800233c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80022f2:	f001 f9aa 	bl	800364a <_ZN5PaketC1Ehhhh>
Paket ImuPaket(0x12, 0x34, 0x02, 0x11);//veri boyutu 17
 80022f6:	2311      	movs	r3, #17
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2302      	movs	r3, #2
 80022fc:	2234      	movs	r2, #52	; 0x34
 80022fe:	2112      	movs	r1, #18
 8002300:	480f      	ldr	r0, [pc, #60]	; (8002340 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002302:	f001 f9a2 	bl	800364a <_ZN5PaketC1Ehhhh>
Paket ArayuzPaket(&huart3);
 8002306:	490f      	ldr	r1, [pc, #60]	; (8002344 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002308:	480f      	ldr	r0, [pc, #60]	; (8002348 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800230a:	f001 f979 	bl	8003600 <_ZN5PaketC1EP20__UART_HandleTypeDef>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40000400 	.word	0x40000400
 800231c:	200002e4 	.word	0x200002e4
 8002320:	200002e8 	.word	0x200002e8
 8002324:	20000204 	.word	0x20000204
 8002328:	20000350 	.word	0x20000350
 800232c:	200006e4 	.word	0x200006e4
 8002330:	20000398 	.word	0x20000398
 8002334:	20000258 	.word	0x20000258
 8002338:	200004e0 	.word	0x200004e0
 800233c:	200004fc 	.word	0x200004fc
 8002340:	20000580 	.word	0x20000580
 8002344:	2000072c 	.word	0x2000072c
 8002348:	20000604 	.word	0x20000604

0800234c <_GLOBAL__sub_I_GpsDataPacket>:
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
 8002350:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002354:	2001      	movs	r0, #1
 8002356:	f7ff ffa5 	bl	80022a4 <_Z41__static_initialization_and_destruction_0ii>
 800235a:	bd80      	pop	{r7, pc}

0800235c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <MX_SPI1_Init+0x64>)
 8002362:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <MX_SPI1_Init+0x68>)
 8002364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <MX_SPI1_Init+0x64>)
 8002368:	f44f 7282 	mov.w	r2, #260	; 0x104
 800236c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <MX_SPI1_Init+0x64>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <MX_SPI1_Init+0x64>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <MX_SPI1_Init+0x64>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <MX_SPI1_Init+0x64>)
 8002382:	2200      	movs	r2, #0
 8002384:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <MX_SPI1_Init+0x64>)
 8002388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <MX_SPI1_Init+0x64>)
 8002390:	2200      	movs	r2, #0
 8002392:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002394:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <MX_SPI1_Init+0x64>)
 8002396:	2200      	movs	r2, #0
 8002398:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <MX_SPI1_Init+0x64>)
 800239c:	2200      	movs	r2, #0
 800239e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <MX_SPI1_Init+0x64>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <MX_SPI1_Init+0x64>)
 80023a8:	220a      	movs	r2, #10
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023ac:	4804      	ldr	r0, [pc, #16]	; (80023c0 <MX_SPI1_Init+0x64>)
 80023ae:	f004 fc4d 	bl	8006c4c <HAL_SPI_Init>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023b8:	f7ff fe3a 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000688 	.word	0x20000688
 80023c4:	40013000 	.word	0x40013000

080023c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_SPI_MspInit+0x84>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d12b      	bne.n	8002442 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	4b18      	ldr	r3, [pc, #96]	; (8002450 <HAL_SPI_MspInit+0x88>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	4a17      	ldr	r2, [pc, #92]	; (8002450 <HAL_SPI_MspInit+0x88>)
 80023f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023f8:	6453      	str	r3, [r2, #68]	; 0x44
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_SPI_MspInit+0x88>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_SPI_MspInit+0x88>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <HAL_SPI_MspInit+0x88>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <HAL_SPI_MspInit+0x88>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002422:	23e0      	movs	r3, #224	; 0xe0
 8002424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002432:	2305      	movs	r3, #5
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	4805      	ldr	r0, [pc, #20]	; (8002454 <HAL_SPI_MspInit+0x8c>)
 800243e:	f002 f913 	bl	8004668 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002442:	bf00      	nop
 8002444:	3728      	adds	r7, #40	; 0x28
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40013000 	.word	0x40013000
 8002450:	40023800 	.word	0x40023800
 8002454:	40020000 	.word	0x40020000

08002458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <HAL_MspInit+0x4c>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <HAL_MspInit+0x4c>)
 8002468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HAL_MspInit+0x4c>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_MspInit+0x4c>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <HAL_MspInit+0x4c>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_MspInit+0x4c>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002496:	2007      	movs	r0, #7
 8002498:	f002 f812 	bl	80044c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800

080024a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024ac:	e7fe      	b.n	80024ac <NMI_Handler+0x4>

080024ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b2:	e7fe      	b.n	80024b2 <HardFault_Handler+0x4>

080024b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <MemManage_Handler+0x4>

080024ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024be:	e7fe      	b.n	80024be <BusFault_Handler+0x4>

080024c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <UsageFault_Handler+0x4>

080024c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f4:	f001 fed0 	bl	8004298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <USART2_IRQHandler+0x10>)
 8002502:	f004 fd2d 	bl	8006f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200006e4 	.word	0x200006e4

08002510 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <USART3_IRQHandler+0x10>)
 8002516:	f004 fd23 	bl	8006f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2000072c 	.word	0x2000072c

08002524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return 1;
 8002528:	2301      	movs	r3, #1
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_kill>:

int _kill(int pid, int sig)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800253e:	f008 f9e9 	bl	800a914 <__errno>
 8002542:	4603      	mov	r3, r0
 8002544:	2216      	movs	r2, #22
 8002546:	601a      	str	r2, [r3, #0]
  return -1;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_exit>:

void _exit (int status)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ffe7 	bl	8002534 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002566:	e7fe      	b.n	8002566 <_exit+0x12>

08002568 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	e00a      	b.n	8002590 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800257a:	f3af 8000 	nop.w
 800257e:	4601      	mov	r1, r0
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	60ba      	str	r2, [r7, #8]
 8002586:	b2ca      	uxtb	r2, r1
 8002588:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3301      	adds	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	dbf0      	blt.n	800257a <_read+0x12>
  }

  return len;
 8002598:	687b      	ldr	r3, [r7, #4]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e009      	b.n	80025c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	60ba      	str	r2, [r7, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	dbf1      	blt.n	80025b4 <_write+0x12>
  }
  return len;
 80025d0:	687b      	ldr	r3, [r7, #4]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <_close>:

int _close(int file)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002602:	605a      	str	r2, [r3, #4]
  return 0;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <_isatty>:

int _isatty(int file)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800261a:	2301      	movs	r3, #1
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <_sbrk+0x5c>)
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <_sbrk+0x60>)
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <_sbrk+0x64>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <_sbrk+0x64>)
 8002662:	4a12      	ldr	r2, [pc, #72]	; (80026ac <_sbrk+0x68>)
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <_sbrk+0x64>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	429a      	cmp	r2, r3
 8002672:	d207      	bcs.n	8002684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002674:	f008 f94e 	bl	800a914 <__errno>
 8002678:	4603      	mov	r3, r0
 800267a:	220c      	movs	r2, #12
 800267c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	e009      	b.n	8002698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <_sbrk+0x64>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <_sbrk+0x64>)
 8002694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002696:	68fb      	ldr	r3, [r7, #12]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20020000 	.word	0x20020000
 80026a4:	00000400 	.word	0x00000400
 80026a8:	200006e0 	.word	0x200006e0
 80026ac:	200008c8 	.word	0x200008c8

080026b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <SystemInit+0x20>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <SystemInit+0x20>)
 80026bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <MX_USART2_UART_Init+0x4c>)
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <MX_USART2_UART_Init+0x50>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <MX_USART2_UART_Init+0x4c>)
 80026e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <MX_USART2_UART_Init+0x4c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <MX_USART2_UART_Init+0x4c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <MX_USART2_UART_Init+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <MX_USART2_UART_Init+0x4c>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <MX_USART2_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <MX_USART2_UART_Init+0x4c>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <MX_USART2_UART_Init+0x4c>)
 800270c:	f004 fb27 	bl	8006d5e <HAL_UART_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002716:	f7ff fc8b 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200006e4 	.word	0x200006e4
 8002724:	40004400 	.word	0x40004400

08002728 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <MX_USART3_UART_Init+0x4c>)
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <MX_USART3_UART_Init+0x50>)
 8002730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <MX_USART3_UART_Init+0x4c>)
 8002734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_USART3_UART_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_USART3_UART_Init+0x4c>)
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <MX_USART3_UART_Init+0x4c>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <MX_USART3_UART_Init+0x4c>)
 800274e:	220c      	movs	r2, #12
 8002750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <MX_USART3_UART_Init+0x4c>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <MX_USART3_UART_Init+0x4c>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800275e:	4805      	ldr	r0, [pc, #20]	; (8002774 <MX_USART3_UART_Init+0x4c>)
 8002760:	f004 fafd 	bl	8006d5e <HAL_UART_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800276a:	f7ff fc61 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000072c 	.word	0x2000072c
 8002778:	40004800 	.word	0x40004800

0800277c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a4a      	ldr	r2, [pc, #296]	; (80028c4 <HAL_UART_MspInit+0x148>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d134      	bne.n	8002808 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a48      	ldr	r2, [pc, #288]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
 80027ae:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	4b42      	ldr	r3, [pc, #264]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a41      	ldr	r2, [pc, #260]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027d6:	230c      	movs	r3, #12
 80027d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027e6:	2307      	movs	r3, #7
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	4836      	ldr	r0, [pc, #216]	; (80028cc <HAL_UART_MspInit+0x150>)
 80027f2:	f001 ff39 	bl	8004668 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	2026      	movs	r0, #38	; 0x26
 80027fc:	f001 fe6b 	bl	80044d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002800:	2026      	movs	r0, #38	; 0x26
 8002802:	f001 fe84 	bl	800450e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002806:	e058      	b.n	80028ba <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART3)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a30      	ldr	r2, [pc, #192]	; (80028d0 <HAL_UART_MspInit+0x154>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d153      	bne.n	80028ba <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a2b      	ldr	r2, [pc, #172]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 800281c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a24      	ldr	r2, [pc, #144]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 8002854:	f043 0308 	orr.w	r3, r3, #8
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_UART_MspInit+0x14c>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800286a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002878:	2307      	movs	r3, #7
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	4619      	mov	r1, r3
 8002882:	4814      	ldr	r0, [pc, #80]	; (80028d4 <HAL_UART_MspInit+0x158>)
 8002884:	f001 fef0 	bl	8004668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002896:	2303      	movs	r3, #3
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800289a:	2307      	movs	r3, #7
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	480c      	ldr	r0, [pc, #48]	; (80028d8 <HAL_UART_MspInit+0x15c>)
 80028a6:	f001 fedf 	bl	8004668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2100      	movs	r1, #0
 80028ae:	2027      	movs	r0, #39	; 0x27
 80028b0:	f001 fe11 	bl	80044d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028b4:	2027      	movs	r0, #39	; 0x27
 80028b6:	f001 fe2a 	bl	800450e <HAL_NVIC_EnableIRQ>
}
 80028ba:	bf00      	nop
 80028bc:	3730      	adds	r7, #48	; 0x30
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40004400 	.word	0x40004400
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40004800 	.word	0x40004800
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020c00 	.word	0x40020c00

080028dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002914 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028e0:	f7ff fee6 	bl	80026b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028e4:	480c      	ldr	r0, [pc, #48]	; (8002918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028e6:	490d      	ldr	r1, [pc, #52]	; (800291c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028e8:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028fc:	4c0a      	ldr	r4, [pc, #40]	; (8002928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800290a:	f008 f809 	bl	800a920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800290e:	f7ff fb0d 	bl	8001f2c <main>
  bx  lr    
 8002912:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800291c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002920:	0800ccd8 	.word	0x0800ccd8
  ldr r2, =_sbss
 8002924:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002928:	200008c4 	.word	0x200008c4

0800292c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800292c:	e7fe      	b.n	800292c <ADC_IRQHandler>

0800292e <_ZN3GPSC1EP20__UART_HandleTypeDef>:
 *  Created on: Jun 29, 2024
 *      Author: onurd
 */
#include "Gps.h"

GPS::GPS(UART_HandleTypeDef* huart)
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
{
	this->huart_=huart;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	601a      	str	r2, [r3, #0]
	this->rxIndex_u8=0;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	this->rxData_u8=0;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	this->latitude_f32=0;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	this->longitude_f32=0;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <_ZN3GPS10YapilandirEv>:

void GPS::Yapilandir()
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
    lwgps_init(&gps_);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3308      	adds	r3, #8
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fa07 	bl	8001d90 <lwgps_init>
    HAL_UART_Receive_IT(huart_, &rxData_u8, 1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f203 1339 	addw	r3, r3, #313	; 0x139
 800298c:	2201      	movs	r2, #1
 800298e:	4619      	mov	r1, r3
 8002990:	f004 fac0 	bl	8006f14 <HAL_UART_Receive_IT>
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <_ZN3GPS18UartRxCpltCallbackEv>:

void GPS::UartRxCpltCallback()
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    if (rxData_u8 != '\n' && rxIndex_u8 < sizeof(rxBuffer_))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 80029aa:	2b0a      	cmp	r3, #10
 80029ac:	d016      	beq.n	80029dc <_ZN3GPS18UartRxCpltCallbackEv+0x40>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	db10      	blt.n	80029dc <_ZN3GPS18UartRxCpltCallbackEv+0x40>
    {
        rxBuffer_[rxIndex_u8++] = rxData_u8;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	b2d1      	uxtb	r1, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	f882 1138 	strb.w	r1, [r2, #312]	; 0x138
 80029ca:	4619      	mov	r1, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	440b      	add	r3, r1
 80029d6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80029da:	e017      	b.n	8002a0c <_ZN3GPS18UartRxCpltCallbackEv+0x70>
    }
    else
    {
        lwgps_process(&gps_, rxBuffer_, rxIndex_u8 + 1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f103 0008 	add.w	r0, r3, #8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80029ee:	3301      	adds	r3, #1
 80029f0:	461a      	mov	r2, r3
 80029f2:	f7ff f9db 	bl	8001dac <lwgps_process>
        GpsDataCek();
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f815 	bl	8002a26 <_ZN3GPS10GpsDataCekEv>
        rxIndex_u8 = 0;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
        rxData_u8 = 0;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    }
    HAL_UART_Receive_IT(huart_, &rxData_u8, 1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f203 1339 	addw	r3, r3, #313	; 0x139
 8002a16:	2201      	movs	r2, #1
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f004 fa7b 	bl	8006f14 <HAL_UART_Receive_IT>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <_ZN3GPS10GpsDataCekEv>:

void GPS::GpsDataCek()
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
	 latitude_f32 = gps_.latitude;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f7fe f8ce 	bl	8000bd8 <__aeabi_d2f>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	 longitude_f32 = gps_.longitude;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f7fe f8c3 	bl	8000bd8 <__aeabi_d2f>
 8002a52:	4602      	mov	r2, r0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <_ZN3GPS10LatitudeAlEv>:

float* GPS::LatitudeAl()
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
    return &latitude_f32;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <_ZN3GPS11LongitudeAlEv>:

float* GPS::LongitudeAl()
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
    return &longitude_f32;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f503 73a0 	add.w	r3, r3, #320	; 0x140
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <_ZN5MyImuC1EP17I2C_HandleTypeDef>:
#define ACC_CNFG_REG 0X1C
#define MPU6500_ADDRESS 0x68<< 1
#define WHO_AM_I 0x75
#define RESET_BIT 0x80

MyImu::MyImu(I2C_HandleTypeDef *hi2c)
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
{
	this->hi2c=hi2c;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	601a      	str	r2, [r3, #0]
}
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <_ZN5MyImu17DBC_MPU6500_ResetEv>:

void MyImu::DBC_MPU6500_Reset()
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af04      	add	r7, sp, #16
 8002aba:	6078      	str	r0, [r7, #4]
	data_u8 = RESET_BIT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS , PWR_MGMT_1_REG, 1, &data_u8, 1, 1000);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ace:	9202      	str	r2, [sp, #8]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	9201      	str	r2, [sp, #4]
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	226b      	movs	r2, #107	; 0x6b
 8002ada:	21d0      	movs	r1, #208	; 0xd0
 8002adc:	f002 fbee 	bl	80052bc <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8002ae0:	2064      	movs	r0, #100	; 0x64
 8002ae2:	f001 fbf9 	bl	80042d8 <HAL_Delay>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv>:
void MyImu::DBC_MPU6500_YAPILANDIR()
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b088      	sub	sp, #32
 8002af2:	af04      	add	r7, sp, #16
 8002af4:	6078      	str	r0, [r7, #4]
	uint8_t check_u8;
	DBC_MPU6500_Reset();
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffdc 	bl	8002ab4 <_ZN5MyImu17DBC_MPU6500_ResetEv>
	// yoklama sorgusu versiyon sorgusu crc kontrol ,

	HAL_I2C_Mem_Read(hi2c, MPU6500_ADDRESS , WHO_AM_I, 1, &check_u8, 1, 1000);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b04:	9302      	str	r3, [sp, #8]
 8002b06:	2301      	movs	r3, #1
 8002b08:	9301      	str	r3, [sp, #4]
 8002b0a:	f107 030f 	add.w	r3, r7, #15
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2301      	movs	r3, #1
 8002b12:	2275      	movs	r2, #117	; 0x75
 8002b14:	21d0      	movs	r1, #208	; 0xd0
 8002b16:	f002 fccb 	bl	80054b0 <HAL_I2C_Mem_Read>
	if (check_u8 == 0x70)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b70      	cmp	r3, #112	; 0x70
 8002b1e:	d147      	bne.n	8002bb0 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv+0xc2>
	{
		data_u8 = 0x00;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS , PWR_MGMT_1_REG, 1, &data_u8, 1, 1000);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b32:	9202      	str	r2, [sp, #8]
 8002b34:	2201      	movs	r2, #1
 8002b36:	9201      	str	r2, [sp, #4]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	226b      	movs	r2, #107	; 0x6b
 8002b3e:	21d0      	movs	r1, #208	; 0xd0
 8002b40:	f002 fbbc 	bl	80052bc <HAL_I2C_Mem_Write>
		// SMPLRT_DIV register
		data_u8 = 0x07;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2207      	movs	r2, #7
 8002b48:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS ,SMPLRT_DIV_REG, 1, &data_u8, 1, 1000);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3304      	adds	r3, #4
 8002b52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b56:	9202      	str	r2, [sp, #8]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	9201      	str	r2, [sp, #4]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	2301      	movs	r3, #1
 8002b60:	2219      	movs	r2, #25
 8002b62:	21d0      	movs	r1, #208	; 0xd0
 8002b64:	f002 fbaa 	bl	80052bc <HAL_I2C_Mem_Write>
		//  ACCEL_CONFIG Register ±2g(00),±4g(01),±8g(10),±16g(11) 4:3
		data_u8 = 0x00;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS, ACC_CNFG_REG, 1, &data_u8, 1, 1000);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b7a:	9202      	str	r2, [sp, #8]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	9201      	str	r2, [sp, #4]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	2301      	movs	r3, #1
 8002b84:	221c      	movs	r2, #28
 8002b86:	21d0      	movs	r1, #208	; 0xd0
 8002b88:	f002 fb98 	bl	80052bc <HAL_I2C_Mem_Write>
		//  GYRO_CONFIG Register +250dps(00),+500dps(01),+1000dps(10),+2000dps(11) 4:3
		data_u8 = 0x00;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	711a      	strb	r2, [r3, #4]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS , GYRO_CNFG_REG, 1, &data_u8, 1, 1000);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b9e:	9202      	str	r2, [sp, #8]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	9201      	str	r2, [sp, #4]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	221b      	movs	r2, #27
 8002baa:	21d0      	movs	r1, #208	; 0xd0
 8002bac:	f002 fb86 	bl	80052bc <HAL_I2C_Mem_Write>
	}
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZN5MyImu14DBC_GYRO_OFSETEv>:

void MyImu::DBC_GYRO_OFSET()
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	for(int i=0; i<2000; i++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e032      	b.n	8002c2c <_ZN5MyImu14DBC_GYRO_OFSETEv+0x74>
	{
		DBC_GYRO_OKU();
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f930 	bl	8002e2c <_ZN5MyImu12DBC_GYRO_OKUEv>

		gyroHesap[0] += gyroEksen[0];
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	edc3 7a05 	vstr	s15, [r3, #20]
	    gyroHesap[1] += gyroEksen[1];
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	ed93 7a06 	vldr	s14, [r3, #24]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	edc3 7a06 	vstr	s15, [r3, #24]
	    gyroHesap[2] += gyroEksen[2];
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c14:	ee07 3a90 	vmov	s15, r3
 8002c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	edc3 7a07 	vstr	s15, [r3, #28]
	for(int i=0; i<2000; i++)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c32:	dbc8      	blt.n	8002bc6 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xe>
	 }
		gyroHesap[0] /= 2000;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c3a:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002c80 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 8002c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	edc3 7a05 	vstr	s15, [r3, #20]
		gyroHesap[1] /= 2000;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c4e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002c80 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 8002c52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	edc3 7a06 	vstr	s15, [r3, #24]
	    gyroHesap[2] /= 2000;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c62:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002c80 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 8002c66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	edc3 7a07 	vstr	s15, [r3, #28]
	    //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	    HAL_Delay(100);
 8002c70:	2064      	movs	r0, #100	; 0x64
 8002c72:	f001 fb31 	bl	80042d8 <HAL_Delay>
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	44fa0000 	.word	0x44fa0000

08002c84 <_ZN5MyImu12DBC_DATA_OKUEv>:
void MyImu::DBC_DATA_OKU()
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
    DBC_ACC_OKU();
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f843 	bl	8002d18 <_ZN5MyImu11DBC_ACC_OKUEv>
    DBC_SICAKLIK_OKU();
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f87c 	bl	8002d90 <_ZN5MyImu16DBC_SICAKLIK_OKUEv>
    DBC_GYRO_OKU();
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f8c7 	bl	8002e2c <_ZN5MyImu12DBC_GYRO_OKUEv>

    gyroEksen[0] -= gyroHesap[0];
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ca4:	ee07 3a90 	vmov	s15, r3
 8002ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cba:	ee17 3a90 	vmov	r3, s15
 8002cbe:	b21a      	sxth	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	80da      	strh	r2, [r3, #6]
    gyroEksen[1] -= gyroHesap[1];
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ce0:	ee17 3a90 	vmov	r3, s15
 8002ce4:	b21a      	sxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	811a      	strh	r2, [r3, #8]
    gyroEksen[2] -= gyroHesap[2];
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002cf0:	ee07 3a90 	vmov	s15, r3
 8002cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d06:	ee17 3a90 	vmov	r3, s15
 8002d0a:	b21a      	sxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	815a      	strh	r2, [r3, #10]
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_ZN5MyImu11DBC_ACC_OKUEv>:
void MyImu::DBC_ACC_OKU()
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	6078      	str	r0, [r7, #4]
	uint8_t accBuffer[6];

	accBuffer[0] = 0x3B;
 8002d20:	233b      	movs	r3, #59	; 0x3b
 8002d22:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c, MPU6500_ADDRESS, accBuffer, 1, 10);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	f107 0208 	add.w	r2, r7, #8
 8002d2c:	230a      	movs	r3, #10
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	2301      	movs	r3, #1
 8002d32:	21d0      	movs	r1, #208	; 0xd0
 8002d34:	f001 ff92 	bl	8004c5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU6500_ADDRESS, accBuffer, 6, 10);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	f107 0208 	add.w	r2, r7, #8
 8002d40:	230a      	movs	r3, #10
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2306      	movs	r3, #6
 8002d46:	21d0      	movs	r1, #208	; 0xd0
 8002d48:	f002 f886 	bl	8004e58 <HAL_I2C_Master_Receive>
	accEksen[0] = (accBuffer[0] << 8 | accBuffer[1]);
 8002d4c:	7a3b      	ldrb	r3, [r7, #8]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	7a7b      	ldrb	r3, [r7, #9]
 8002d54:	b21b      	sxth	r3, r3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	b21a      	sxth	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	819a      	strh	r2, [r3, #12]
	accEksen[1] = (accBuffer[2] << 8 | accBuffer[3]);
 8002d5e:	7abb      	ldrb	r3, [r7, #10]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	7afb      	ldrb	r3, [r7, #11]
 8002d66:	b21b      	sxth	r3, r3
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	b21a      	sxth	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	81da      	strh	r2, [r3, #14]
	accEksen[2] = (accBuffer[4] << 8 | accBuffer[5]);
 8002d70:	7b3b      	ldrb	r3, [r7, #12]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	b21a      	sxth	r2, r3
 8002d76:	7b7b      	ldrb	r3, [r7, #13]
 8002d78:	b21b      	sxth	r3, r3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	b21a      	sxth	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	821a      	strh	r2, [r3, #16]
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	0000      	movs	r0, r0
 8002d8c:	0000      	movs	r0, r0
	...

08002d90 <_ZN5MyImu16DBC_SICAKLIK_OKUEv>:
void MyImu::DBC_SICAKLIK_OKU()
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	6078      	str	r0, [r7, #4]
	uint8_t sicaklikBuffer[2];

	sicaklikBuffer[0] = 0x41;
 8002d98:	2341      	movs	r3, #65	; 0x41
 8002d9a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hi2c, MPU6500_ADDRESS, sicaklikBuffer, 1, 10);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	f107 020c 	add.w	r2, r7, #12
 8002da4:	230a      	movs	r3, #10
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2301      	movs	r3, #1
 8002daa:	21d0      	movs	r1, #208	; 0xd0
 8002dac:	f001 ff56 	bl	8004c5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU6500_ADDRESS, sicaklikBuffer, 2, 10);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	f107 020c 	add.w	r2, r7, #12
 8002db8:	230a      	movs	r3, #10
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	21d0      	movs	r1, #208	; 0xd0
 8002dc0:	f002 f84a 	bl	8004e58 <HAL_I2C_Master_Receive>
	hamSicaklik_u16 = (sicaklikBuffer[0] << 8 | sicaklikBuffer[1]);
 8002dc4:	7b3b      	ldrb	r3, [r7, #12]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	b21a      	sxth	r2, r3
 8002dca:	7b7b      	ldrb	r3, [r7, #13]
 8002dcc:	b21b      	sxth	r3, r3
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	b21b      	sxth	r3, r3
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	Sicaklik_f=((float)((float)hamSicaklik_u16 / 340.0)) + 36.53;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002e28 <_ZN5MyImu16DBC_SICAKLIK_OKUEv+0x98>
 8002dec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002df0:	ee16 0a90 	vmov	r0, s13
 8002df4:	f7fd fba0 	bl	8000538 <__aeabi_f2d>
 8002df8:	a309      	add	r3, pc, #36	; (adr r3, 8002e20 <_ZN5MyImu16DBC_SICAKLIK_OKUEv+0x90>)
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f7fd fa3d 	bl	800027c <__adddf3>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f7fd fee5 	bl	8000bd8 <__aeabi_d2f>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	f3af 8000 	nop.w
 8002e20:	0a3d70a4 	.word	0x0a3d70a4
 8002e24:	404243d7 	.word	0x404243d7
 8002e28:	43aa0000 	.word	0x43aa0000

08002e2c <_ZN5MyImu12DBC_GYRO_OKUEv>:
void MyImu::DBC_GYRO_OKU()
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	6078      	str	r0, [r7, #4]
	uint8_t gyroBuffer[6];

	gyroBuffer[0] = 0x43;
 8002e34:	2343      	movs	r3, #67	; 0x43
 8002e36:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c, MPU6500_ADDRESS, gyroBuffer, 1, 10);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	f107 0208 	add.w	r2, r7, #8
 8002e40:	230a      	movs	r3, #10
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2301      	movs	r3, #1
 8002e46:	21d0      	movs	r1, #208	; 0xd0
 8002e48:	f001 ff08 	bl	8004c5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU6500_ADDRESS, gyroBuffer, 6, 10);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	f107 0208 	add.w	r2, r7, #8
 8002e54:	230a      	movs	r3, #10
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2306      	movs	r3, #6
 8002e5a:	21d0      	movs	r1, #208	; 0xd0
 8002e5c:	f001 fffc 	bl	8004e58 <HAL_I2C_Master_Receive>
	gyroEksen[0] = (gyroBuffer[0] << 8 | gyroBuffer[1]);
 8002e60:	7a3b      	ldrb	r3, [r7, #8]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	7a7b      	ldrb	r3, [r7, #9]
 8002e68:	b21b      	sxth	r3, r3
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b21a      	sxth	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	80da      	strh	r2, [r3, #6]
	gyroEksen[1] = (gyroBuffer[2] << 8 | gyroBuffer[3]);
 8002e72:	7abb      	ldrb	r3, [r7, #10]
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	b21a      	sxth	r2, r3
 8002e78:	7afb      	ldrb	r3, [r7, #11]
 8002e7a:	b21b      	sxth	r3, r3
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	b21a      	sxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	811a      	strh	r2, [r3, #8]
	gyroEksen[2] = (gyroBuffer[4] << 8 | gyroBuffer[5]);
 8002e84:	7b3b      	ldrb	r3, [r7, #12]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	b21a      	sxth	r2, r3
 8002e8a:	7b7b      	ldrb	r3, [r7, #13]
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	b21a      	sxth	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	815a      	strh	r2, [r3, #10]

}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <_ZN5MyImu13DBC_ACI_BULMAEv>:
void MyImu::DBC_ACI_BULMA()
{
 8002ea0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
	DBC_DATA_OKU();//0.0014 0.000001066
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff feea 	bl	8002c84 <_ZN5MyImu12DBC_DATA_OKUEv>
	//Ham Veri Iyilestirmeleri
	gyroPitchAci_f += gyroEksen[0] * 0.000207; //65.5 * 4000 mikrosaniye
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fb3f 	bl	8000538 <__aeabi_f2d>
 8002eba:	4604      	mov	r4, r0
 8002ebc:	460d      	mov	r5, r1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd fb25 	bl	8000514 <__aeabi_i2d>
 8002eca:	a3cf      	add	r3, pc, #828	; (adr r3, 8003208 <_ZN5MyImu13DBC_ACI_BULMAEv+0x368>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f7fd fb8a 	bl	80005e8 <__aeabi_dmul>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4620      	mov	r0, r4
 8002eda:	4629      	mov	r1, r5
 8002edc:	f7fd f9ce 	bl	800027c <__adddf3>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f7fd fe76 	bl	8000bd8 <__aeabi_d2f>
 8002eec:	4602      	mov	r2, r0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
	gyroRollAci_f += gyroEksen[1] * 0.000207;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fb1e 	bl	8000538 <__aeabi_f2d>
 8002efc:	4604      	mov	r4, r0
 8002efe:	460d      	mov	r5, r1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fb04 	bl	8000514 <__aeabi_i2d>
 8002f0c:	a3be      	add	r3, pc, #760	; (adr r3, 8003208 <_ZN5MyImu13DBC_ACI_BULMAEv+0x368>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	f7fd fb69 	bl	80005e8 <__aeabi_dmul>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	f7fd f9ad 	bl	800027c <__adddf3>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f7fd fe55 	bl	8000bd8 <__aeabi_d2f>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c
	gyroYawAci_f += gyroEksen[2] * 0.000207;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fafd 	bl	8000538 <__aeabi_f2d>
 8002f3e:	4604      	mov	r4, r0
 8002f40:	460d      	mov	r5, r1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd fae3 	bl	8000514 <__aeabi_i2d>
 8002f4e:	a3ae      	add	r3, pc, #696	; (adr r3, 8003208 <_ZN5MyImu13DBC_ACI_BULMAEv+0x368>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f7fd fb48 	bl	80005e8 <__aeabi_dmul>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	4629      	mov	r1, r5
 8002f60:	f7fd f98c 	bl	800027c <__adddf3>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f7fd fe34 	bl	8000bd8 <__aeabi_d2f>
 8002f70:	4602      	mov	r2, r0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	635a      	str	r2, [r3, #52]	; 0x34

	gyroPitchAci_f += gyroRollAci_f * sin(gyroEksen[2]* 0.000001066);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fadc 	bl	8000538 <__aeabi_f2d>
 8002f80:	4604      	mov	r4, r0
 8002f82:	460d      	mov	r5, r1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fad5 	bl	8000538 <__aeabi_f2d>
 8002f8e:	4680      	mov	r8, r0
 8002f90:	4689      	mov	r9, r1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fabb 	bl	8000514 <__aeabi_i2d>
 8002f9e:	a39c      	add	r3, pc, #624	; (adr r3, 8003210 <_ZN5MyImu13DBC_ACI_BULMAEv+0x370>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f7fd fb20 	bl	80005e8 <__aeabi_dmul>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	ec43 2b17 	vmov	d7, r2, r3
 8002fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8002fb4:	eef0 0a67 	vmov.f32	s1, s15
 8002fb8:	f004 ff96 	bl	8007ee8 <sin>
 8002fbc:	ec53 2b10 	vmov	r2, r3, d0
 8002fc0:	4640      	mov	r0, r8
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	f7fd fb10 	bl	80005e8 <__aeabi_dmul>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4620      	mov	r0, r4
 8002fce:	4629      	mov	r1, r5
 8002fd0:	f7fd f954 	bl	800027c <__adddf3>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f7fd fdfc 	bl	8000bd8 <__aeabi_d2f>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
	gyroRollAci_f -= gyroPitchAci_f * sin(gyroEksen[2]* 0.000001066);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd faa4 	bl	8000538 <__aeabi_f2d>
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	460d      	mov	r5, r1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd fa9d 	bl	8000538 <__aeabi_f2d>
 8002ffe:	4680      	mov	r8, r0
 8003000:	4689      	mov	r9, r1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fa83 	bl	8000514 <__aeabi_i2d>
 800300e:	a380      	add	r3, pc, #512	; (adr r3, 8003210 <_ZN5MyImu13DBC_ACI_BULMAEv+0x370>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f7fd fae8 	bl	80005e8 <__aeabi_dmul>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	ec43 2b17 	vmov	d7, r2, r3
 8003020:	eeb0 0a47 	vmov.f32	s0, s14
 8003024:	eef0 0a67 	vmov.f32	s1, s15
 8003028:	f004 ff5e 	bl	8007ee8 <sin>
 800302c:	ec53 2b10 	vmov	r2, r3, d0
 8003030:	4640      	mov	r0, r8
 8003032:	4649      	mov	r1, r9
 8003034:	f7fd fad8 	bl	80005e8 <__aeabi_dmul>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4620      	mov	r0, r4
 800303e:	4629      	mov	r1, r5
 8003040:	f7fd f91a 	bl	8000278 <__aeabi_dsub>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f7fd fdc4 	bl	8000bd8 <__aeabi_d2f>
 8003050:	4602      	mov	r2, r0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c

	accToplamVektor_s16 = sqrt((accEksen[0]*accEksen[0])+(accEksen[1]*accEksen[1])+(accEksen[2]*accEksen[2]));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800305c:	461a      	mov	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003064:	fb03 f202 	mul.w	r2, r3, r2
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800306e:	4619      	mov	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	441a      	add	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003082:	4619      	mov	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f7fd fa3f 	bl	8000514 <__aeabi_i2d>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	ec43 2b10 	vmov	d0, r2, r3
 800309e:	f004 feeb 	bl	8007e78 <sqrt>
 80030a2:	ec53 2b10 	vmov	r2, r3, d0
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	f7fd fd4d 	bl	8000b48 <__aeabi_d2iz>
 80030ae:	4603      	mov	r3, r0
 80030b0:	b21a      	sxth	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	841a      	strh	r2, [r3, #32]

	//57.296 =1 /(3.142 /180)
	accPitchAci_f = asin((float)accEksen[1]/accToplamVektor_s16)*57.296;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030d6:	ee16 0a90 	vmov	r0, s13
 80030da:	f7fd fa2d 	bl	8000538 <__aeabi_f2d>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	ec43 2b10 	vmov	d0, r2, r3
 80030e6:	f004 fe91 	bl	8007e0c <asin>
 80030ea:	ec51 0b10 	vmov	r0, r1, d0
 80030ee:	a34a      	add	r3, pc, #296	; (adr r3, 8003218 <_ZN5MyImu13DBC_ACI_BULMAEv+0x378>)
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f7fd fa78 	bl	80005e8 <__aeabi_dmul>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	f7fd fd6a 	bl	8000bd8 <__aeabi_d2f>
 8003104:	4602      	mov	r2, r0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	625a      	str	r2, [r3, #36]	; 0x24
	accRollAci_f = asin((float)accEksen[0]/accToplamVektor_s16)*-57.296;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003110:	ee07 3a90 	vmov	s15, r3
 8003114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003126:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800312a:	ee16 0a90 	vmov	r0, s13
 800312e:	f7fd fa03 	bl	8000538 <__aeabi_f2d>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	ec43 2b10 	vmov	d0, r2, r3
 800313a:	f004 fe67 	bl	8007e0c <asin>
 800313e:	ec51 0b10 	vmov	r0, r1, d0
 8003142:	a337      	add	r3, pc, #220	; (adr r3, 8003220 <_ZN5MyImu13DBC_ACI_BULMAEv+0x380>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd fa4e 	bl	80005e8 <__aeabi_dmul>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	f7fd fd40 	bl	8000bd8 <__aeabi_d2f>
 8003158:	4602      	mov	r2, r0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	629a      	str	r2, [r3, #40]	; 0x28

	pitchAcisi_f = gyroPitchAci_f * 0.9 + accPitchAci_f * 0.1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd f9e8 	bl	8000538 <__aeabi_f2d>
 8003168:	a32f      	add	r3, pc, #188	; (adr r3, 8003228 <_ZN5MyImu13DBC_ACI_BULMAEv+0x388>)
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f7fd fa3b 	bl	80005e8 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4614      	mov	r4, r2
 8003178:	461d      	mov	r5, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd f9da 	bl	8000538 <__aeabi_f2d>
 8003184:	a32a      	add	r3, pc, #168	; (adr r3, 8003230 <_ZN5MyImu13DBC_ACI_BULMAEv+0x390>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f7fd fa2d 	bl	80005e8 <__aeabi_dmul>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4620      	mov	r0, r4
 8003194:	4629      	mov	r1, r5
 8003196:	f7fd f871 	bl	800027c <__adddf3>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	f7fd fd19 	bl	8000bd8 <__aeabi_d2f>
 80031a6:	4602      	mov	r2, r0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	63da      	str	r2, [r3, #60]	; 0x3c
	rollAci_f = gyroRollAci_f * 0.9 + accRollAci_f * 0.1;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd f9c1 	bl	8000538 <__aeabi_f2d>
 80031b6:	a31c      	add	r3, pc, #112	; (adr r3, 8003228 <_ZN5MyImu13DBC_ACI_BULMAEv+0x388>)
 80031b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031bc:	f7fd fa14 	bl	80005e8 <__aeabi_dmul>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4614      	mov	r4, r2
 80031c6:	461d      	mov	r5, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd f9b3 	bl	8000538 <__aeabi_f2d>
 80031d2:	a317      	add	r3, pc, #92	; (adr r3, 8003230 <_ZN5MyImu13DBC_ACI_BULMAEv+0x390>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fd fa06 	bl	80005e8 <__aeabi_dmul>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4620      	mov	r0, r4
 80031e2:	4629      	mov	r1, r5
 80031e4:	f7fd f84a 	bl	800027c <__adddf3>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7fd fcf2 	bl	8000bd8 <__aeabi_d2f>
 80031f4:	4602      	mov	r2, r0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003204:	f3af 8000 	nop.w
 8003208:	75e6362a 	.word	0x75e6362a
 800320c:	3f2b21c4 	.word	0x3f2b21c4
 8003210:	652c6e62 	.word	0x652c6e62
 8003214:	3eb1e26f 	.word	0x3eb1e26f
 8003218:	53f7ced9 	.word	0x53f7ced9
 800321c:	404ca5e3 	.word	0x404ca5e3
 8003220:	53f7ced9 	.word	0x53f7ced9
 8003224:	c04ca5e3 	.word	0xc04ca5e3
 8003228:	cccccccd 	.word	0xcccccccd
 800322c:	3feccccc 	.word	0x3feccccc
 8003230:	9999999a 	.word	0x9999999a
 8003234:	3fb99999 	.word	0x3fb99999

08003238 <_ZN5MyImu7PitchAlEv>:

float* MyImu::PitchAl()
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    return &pitchAcisi_f;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	333c      	adds	r3, #60	; 0x3c
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <_ZN5MyImu6RollAlEv>:

float* MyImu::RollAl()
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
    return &rollAci_f;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3338      	adds	r3, #56	; 0x38
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <_ZN5MyImu5YawAlEv>:
float* MyImu::YawAl()
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
    return &gyroYawAci_f;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3334      	adds	r3, #52	; 0x34
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <_ZN5MyImu10SicaklikAlEv>:
float* MyImu::SicaklikAl()
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
    return &Sicaklik_f;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3344      	adds	r3, #68	; 0x44
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <_ZN8HMC5883LC1EP17I2C_HandleTypeDef>:
#include "Mag.h"

#define HMC5883L_ADDRESS 0x1E << 1 // I2C adresi

HMC5883L::HMC5883L(I2C_HandleTypeDef *hi2c)
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
{
  this->hi2c = hi2c;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	601a      	str	r2, [r3, #0]
  x = y = z = 0;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	811a      	strh	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	80da      	strh	r2, [r3, #6]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	809a      	strh	r2, [r3, #4]
  heading = headingAcisi = 0.0f;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	615a      	str	r2, [r3, #20]
}
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <_ZN8HMC5883L10YapilandirEv>:

void HMC5883L::Yapilandir()
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  // Configuration Register A
	registerYaz(HMC5883_REGISTER_MAG_CRA_REG_M, 0x70); // 8 ortalama, 15 Hz, normal ölçüm
 80032e8:	2270      	movs	r2, #112	; 0x70
 80032ea:	2100      	movs	r1, #0
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f80e 	bl	800330e <_ZN8HMC5883L11registerYazEhh>

  // Configuration Register B
	registerYaz(HMC5883_REGISTER_MAG_CRB_REG_M, HMC5883_MAGGAIN_1_3); // Kazanç = +/- 1.3
 80032f2:	2220      	movs	r2, #32
 80032f4:	2101      	movs	r1, #1
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f809 	bl	800330e <_ZN8HMC5883L11registerYazEhh>

  // Mode Register
	registerYaz(HMC5883_REGISTER_MAG_MR_REG_M, 0x00); // Sürekli ölçüm modu
 80032fc:	2200      	movs	r2, #0
 80032fe:	2102      	movs	r1, #2
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f804 	bl	800330e <_ZN8HMC5883L11registerYazEhh>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <_ZN8HMC5883L11registerYazEhh>:

void HMC5883L::registerYaz(uint8_t reg, uint8_t value)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af02      	add	r7, sp, #8
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	460b      	mov	r3, r1
 8003318:	70fb      	strb	r3, [r7, #3]
 800331a:	4613      	mov	r3, r2
 800331c:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2] = {reg, value};
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	733b      	strb	r3, [r7, #12]
 8003322:	78bb      	ldrb	r3, [r7, #2]
 8003324:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDRESS, data, 2, HAL_MAX_DELAY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	f107 020c 	add.w	r2, r7, #12
 800332e:	f04f 33ff 	mov.w	r3, #4294967295
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2302      	movs	r3, #2
 8003336:	213c      	movs	r1, #60	; 0x3c
 8003338:	f001 fc90 	bl	8004c5c <HAL_I2C_Master_Transmit>
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_ZN8HMC5883L10MagDataOkuEPsS0_S0_>:
  HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDRESS, &reg, 1, HAL_MAX_DELAY);
  HAL_I2C_Master_Receive(hi2c, HMC5883L_ADDRESS, value, 1, HAL_MAX_DELAY);
}

void HMC5883L::MagDataOku(int16_t *x, int16_t *y, int16_t *z)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af04      	add	r7, sp, #16
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  uint8_t buffer[6];
  HAL_I2C_Mem_Read(hi2c, HMC5883L_ADDRESS, HMC5883_REGISTER_MAG_OUT_X_H_M, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
 800335a:	9302      	str	r3, [sp, #8]
 800335c:	2306      	movs	r3, #6
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	2301      	movs	r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	213c      	movs	r1, #60	; 0x3c
 800336c:	f002 f8a0 	bl	80054b0 <HAL_I2C_Mem_Read>

  *x = (int16_t)((buffer[0] << 8) | buffer[1]);
 8003370:	7c3b      	ldrb	r3, [r7, #16]
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	b21a      	sxth	r2, r3
 8003376:	7c7b      	ldrb	r3, [r7, #17]
 8003378:	b21b      	sxth	r3, r3
 800337a:	4313      	orrs	r3, r2
 800337c:	b21a      	sxth	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	801a      	strh	r2, [r3, #0]
  *z = (int16_t)((buffer[2] << 8) | buffer[3]);
 8003382:	7cbb      	ldrb	r3, [r7, #18]
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	b21a      	sxth	r2, r3
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	b21b      	sxth	r3, r3
 800338c:	4313      	orrs	r3, r2
 800338e:	b21a      	sxth	r2, r3
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	801a      	strh	r2, [r3, #0]
  *y = (int16_t)((buffer[4] << 8) | buffer[5]);
 8003394:	7d3b      	ldrb	r3, [r7, #20]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	b21a      	sxth	r2, r3
 800339a:	7d7b      	ldrb	r3, [r7, #21]
 800339c:	b21b      	sxth	r3, r3
 800339e:	4313      	orrs	r3, r2
 80033a0:	b21a      	sxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	801a      	strh	r2, [r3, #0]
}
 80033a6:	bf00      	nop
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <_ZN8HMC5883L9KalibreEtEv>:
void HMC5883L::KalibreEt()
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b088      	sub	sp, #32
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
    int16_t xRaw, yRaw, zRaw;
    int16_t xMin = 3200, yMin = 3200;
 80033b6:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80033ba:	83fb      	strh	r3, [r7, #30]
 80033bc:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80033c0:	83bb      	strh	r3, [r7, #28]
    int16_t xMax = -3200, yMax = -3200;
 80033c2:	f24f 3380 	movw	r3, #62336	; 0xf380
 80033c6:	837b      	strh	r3, [r7, #26]
 80033c8:	f24f 3380 	movw	r3, #62336	; 0xf380
 80033cc:	833b      	strh	r3, [r7, #24]

    for (int i = 0; i < 1000; i++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e02e      	b.n	8003432 <_ZN8HMC5883L9KalibreEtEv+0x84>
    {
        MagDataOku(&xRaw, &yRaw, &zRaw);
 80033d4:	f107 030e 	add.w	r3, r7, #14
 80033d8:	f107 0210 	add.w	r2, r7, #16
 80033dc:	f107 0112 	add.w	r1, r7, #18
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ffaf 	bl	8003344 <_ZN8HMC5883L10MagDataOkuEPsS0_S0_>

        if (xRaw < xMin) xMin = xRaw;
 80033e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033ea:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	dd01      	ble.n	80033f6 <_ZN8HMC5883L9KalibreEtEv+0x48>
 80033f2:	8a7b      	ldrh	r3, [r7, #18]
 80033f4:	83fb      	strh	r3, [r7, #30]
        if (xRaw > xMax) xMax = xRaw;
 80033f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033fa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80033fe:	429a      	cmp	r2, r3
 8003400:	da01      	bge.n	8003406 <_ZN8HMC5883L9KalibreEtEv+0x58>
 8003402:	8a7b      	ldrh	r3, [r7, #18]
 8003404:	837b      	strh	r3, [r7, #26]
        if (yRaw < yMin) yMin = yRaw;
 8003406:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800340a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800340e:	429a      	cmp	r2, r3
 8003410:	dd01      	ble.n	8003416 <_ZN8HMC5883L9KalibreEtEv+0x68>
 8003412:	8a3b      	ldrh	r3, [r7, #16]
 8003414:	83bb      	strh	r3, [r7, #28]
        if (yRaw > yMax) yMax = yRaw;
 8003416:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800341a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800341e:	429a      	cmp	r2, r3
 8003420:	da01      	bge.n	8003426 <_ZN8HMC5883L9KalibreEtEv+0x78>
 8003422:	8a3b      	ldrh	r3, [r7, #16]
 8003424:	833b      	strh	r3, [r7, #24]

        HAL_Delay(10);
 8003426:	200a      	movs	r0, #10
 8003428:	f000 ff56 	bl	80042d8 <HAL_Delay>
    for (int i = 0; i < 1000; i++)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	3301      	adds	r3, #1
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003438:	dbcc      	blt.n	80033d4 <_ZN8HMC5883L9KalibreEtEv+0x26>
    }

    xOffset = (xMax + xMin) / 2;
 800343a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800343e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003442:	4413      	add	r3, r2
 8003444:	0fda      	lsrs	r2, r3, #31
 8003446:	4413      	add	r3, r2
 8003448:	105b      	asrs	r3, r3, #1
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	edc3 7a03 	vstr	s15, [r3, #12]
    yOffset = (yMax + yMin) / 2;
 8003458:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800345c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	0fda      	lsrs	r2, r3, #31
 8003464:	4413      	add	r3, r2
 8003466:	105b      	asrs	r3, r3, #1
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8003476:	bf00      	nop
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <_ZN8HMC5883L14HeadingOlusturEv>:
float HMC5883L::HeadingOlustur()
{
 8003480:	b5b0      	push	{r4, r5, r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	float xCalibrated, yCalibrated;
	MagDataOku(&x,&y,&z);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	1d19      	adds	r1, r3, #4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	1d9a      	adds	r2, r3, #6
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3308      	adds	r3, #8
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff55 	bl	8003344 <_ZN8HMC5883L10MagDataOkuEPsS0_S0_>

	xCalibrated = x - xOffset;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80034ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b2:	edc7 7a03 	vstr	s15, [r7, #12]
	yCalibrated = y - yOffset;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80034bc:	ee07 3a90 	vmov	s15, r3
 80034c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80034ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ce:	edc7 7a02 	vstr	s15, [r7, #8]

	heading = atan2(yCalibrated, xCalibrated);
 80034d2:	68b8      	ldr	r0, [r7, #8]
 80034d4:	f7fd f830 	bl	8000538 <__aeabi_f2d>
 80034d8:	4604      	mov	r4, r0
 80034da:	460d      	mov	r5, r1
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7fd f82b 	bl	8000538 <__aeabi_f2d>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	ec43 2b11 	vmov	d1, r2, r3
 80034ea:	ec45 4b10 	vmov	d0, r4, r5
 80034ee:	f004 fcc1 	bl	8007e74 <atan2>
 80034f2:	ec53 2b10 	vmov	r2, r3, d0
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	f7fd fb6d 	bl	8000bd8 <__aeabi_d2f>
 80034fe:	4602      	mov	r2, r0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	615a      	str	r2, [r3, #20]

	heading = atan2((y), (x));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd f802 	bl	8000514 <__aeabi_i2d>
 8003510:	4604      	mov	r4, r0
 8003512:	460d      	mov	r5, r1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fc fffa 	bl	8000514 <__aeabi_i2d>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	ec43 2b11 	vmov	d1, r2, r3
 8003528:	ec45 4b10 	vmov	d0, r4, r5
 800352c:	f004 fca2 	bl	8007e74 <atan2>
 8003530:	ec53 2b10 	vmov	r2, r3, d0
 8003534:	4610      	mov	r0, r2
 8003536:	4619      	mov	r1, r3
 8003538:	f7fd fb4e 	bl	8000bd8 <__aeabi_d2f>
 800353c:	4602      	mov	r2, r0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	615a      	str	r2, [r3, #20]
	if(heading < 0)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	edd3 7a05 	vldr	s15, [r3, #20]
 8003548:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800354c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003550:	d512      	bpl.n	8003578 <_ZN8HMC5883L14HeadingOlusturEv+0xf8>
		heading += 2*M_PI;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fc ffee 	bl	8000538 <__aeabi_f2d>
 800355c:	a324      	add	r3, pc, #144	; (adr r3, 80035f0 <_ZN8HMC5883L14HeadingOlusturEv+0x170>)
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	f7fc fe8b 	bl	800027c <__adddf3>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	f7fd fb33 	bl	8000bd8 <__aeabi_d2f>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	615a      	str	r2, [r3, #20]

	if(heading > 2*M_PI)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc ffdb 	bl	8000538 <__aeabi_f2d>
 8003582:	a31b      	add	r3, pc, #108	; (adr r3, 80035f0 <_ZN8HMC5883L14HeadingOlusturEv+0x170>)
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f7fd fabe 	bl	8000b08 <__aeabi_dcmpgt>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d012      	beq.n	80035b8 <_ZN8HMC5883L14HeadingOlusturEv+0x138>
		heading -= 2*M_PI;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fc ffce 	bl	8000538 <__aeabi_f2d>
 800359c:	a314      	add	r3, pc, #80	; (adr r3, 80035f0 <_ZN8HMC5883L14HeadingOlusturEv+0x170>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f7fc fe69 	bl	8000278 <__aeabi_dsub>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fd fb13 	bl	8000bd8 <__aeabi_d2f>
 80035b2:	4602      	mov	r2, r0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	615a      	str	r2, [r3, #20]


	headingAcisi = heading * (180/M_PI);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fc ffbb 	bl	8000538 <__aeabi_f2d>
 80035c2:	a30d      	add	r3, pc, #52	; (adr r3, 80035f8 <_ZN8HMC5883L14HeadingOlusturEv+0x178>)
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f7fd f80e 	bl	80005e8 <__aeabi_dmul>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4610      	mov	r0, r2
 80035d2:	4619      	mov	r1, r3
 80035d4:	f7fd fb00 	bl	8000bd8 <__aeabi_d2f>
 80035d8:	4602      	mov	r2, r0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	619a      	str	r2, [r3, #24]

	return headingAcisi;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	ee07 3a90 	vmov	s15, r3

}
 80035e6:	eeb0 0a67 	vmov.f32	s0, s15
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bdb0      	pop	{r4, r5, r7, pc}
 80035f0:	54442d18 	.word	0x54442d18
 80035f4:	401921fb 	.word	0x401921fb
 80035f8:	1a63c1f8 	.word	0x1a63c1f8
 80035fc:	404ca5dc 	.word	0x404ca5dc

08003600 <_ZN5PaketC1EP20__UART_HandleTypeDef>:
	GPS=0x01 ,
	YOKLAMA=0x02

};

Paket::Paket(UART_HandleTypeDef* huart)
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	659a      	str	r2, [r3, #88]	; 0x58
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	65da      	str	r2, [r3, #92]	; 0x5c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	67da      	str	r2, [r3, #124]	; 0x7c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
{
	this->huart=huart;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	605a      	str	r2, [r3, #4]

}
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <_ZN5PaketC1Ehhhh>:
Paket::Paket(uint8_t baslik1_u8, uint8_t baslik2_u8, uint8_t paketTipi_u8, uint8_t dataBoyutu_u8)
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	4608      	mov	r0, r1
 8003654:	4611      	mov	r1, r2
 8003656:	461a      	mov	r2, r3
 8003658:	4603      	mov	r3, r0
 800365a:	70fb      	strb	r3, [r7, #3]
 800365c:	460b      	mov	r3, r1
 800365e:	70bb      	strb	r3, [r7, #2]
 8003660:	4613      	mov	r3, r2
 8003662:	707b      	strb	r3, [r7, #1]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	659a      	str	r2, [r3, #88]	; 0x58
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	65da      	str	r2, [r3, #92]	; 0x5c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	67da      	str	r2, [r3, #124]	; 0x7c
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
{
	this->baslik1_u8=baslik1_u8;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	this->baslik2_u8=baslik2_u8;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	78ba      	ldrb	r2, [r7, #2]
 800369c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	this->paketTipi_u8=paketTipi_u8;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	787a      	ldrb	r2, [r7, #1]
 80036a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	this->dataBoyutu_u8=dataBoyutu_u8;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7c3a      	ldrb	r2, [r7, #16]
 80036ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	this->latitude=0;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	661a      	str	r2, [r3, #96]	; 0x60
	this->longitude=0;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	665a      	str	r2, [r3, #100]	; 0x64
	this->pitch=0;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	669a      	str	r2, [r3, #104]	; 0x68
	this->roll=0;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	66da      	str	r2, [r3, #108]	; 0x6c
	this->yaw=0;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	671a      	str	r2, [r3, #112]	; 0x70
	this->sicaklik=0;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	675a      	str	r2, [r3, #116]	; 0x74
    memset(gpspaket, 0, sizeof(gpspaket));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3308      	adds	r3, #8
 80036e4:	220e      	movs	r2, #14
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f007 f8b2 	bl	800a852 <memset>
    memset(imupaket, 0, sizeof(imupaket));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3316      	adds	r3, #22
 80036f2:	2215      	movs	r2, #21
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f007 f8ab 	bl	800a852 <memset>
}
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_ZN5Paket14PaketKesmeInitEv>:
void Paket::PaketKesmeInit()
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, ArayuzData, sizeof(ArayuzData));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6858      	ldr	r0, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	332b      	adds	r3, #43	; 0x2b
 8003716:	220c      	movs	r2, #12
 8003718:	4619      	mov	r1, r3
 800371a:	f003 fbfb 	bl	8006f14 <HAL_UART_Receive_IT>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <_ZN5Paket12PaketOlusturEff>:
void Paket::PaketOlustur(float latitude,float longitude)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003732:	edc7 0a01 	vstr	s1, [r7, #4]

    gpspaket[0] = 0x12;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2212      	movs	r2, #18
 800373a:	721a      	strb	r2, [r3, #8]
    gpspaket[1] = 0x34;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2234      	movs	r2, #52	; 0x34
 8003740:	725a      	strb	r2, [r3, #9]
    gpspaket[2] = 0x01;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	729a      	strb	r2, [r3, #10]
    gpspaket[3] = 0x09;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2209      	movs	r2, #9
 800374c:	72da      	strb	r2, [r3, #11]
    this->latitude = latitude;
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	661a      	str	r2, [r3, #96]	; 0x60
    this->longitude = longitude;
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	665a      	str	r2, [r3, #100]	; 0x64

    floatToBytes(&latitude, latBytes_u8);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f103 0247 	add.w	r2, r3, #71	; 0x47
 8003760:	f107 0308 	add.w	r3, r7, #8
 8003764:	4619      	mov	r1, r3
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 faa6 	bl	8003cb8 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&longitude, lonBytes_u8);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f103 024b 	add.w	r2, r3, #75	; 0x4b
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	4619      	mov	r1, r3
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fa9e 	bl	8003cb8 <_ZN5Paket12floatToBytesEPfPh>

    memcpy(gpspaket + 4, latBytes_u8, 4);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3308      	adds	r3, #8
 8003780:	3304      	adds	r3, #4
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	3247      	adds	r2, #71	; 0x47
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	601a      	str	r2, [r3, #0]
    memcpy(gpspaket + 8, lonBytes_u8, 4);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3308      	adds	r3, #8
 800378e:	3308      	adds	r3, #8
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	324b      	adds	r2, #75	; 0x4b
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	601a      	str	r2, [r3, #0]
    gpspaket[13]=CRC8Hesaplama(gpspaket,4, 12);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f103 0108 	add.w	r1, r3, #8
 800379e:	230c      	movs	r3, #12
 80037a0:	2204      	movs	r2, #4
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f9e0 	bl	8003b68 <_ZN5Paket13CRC8HesaplamaEPhhh>
 80037a8:	4603      	mov	r3, r0
 80037aa:	461a      	mov	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	755a      	strb	r2, [r3, #21]
}
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <_ZN5Paket12PaketOlusturEffff>:
void Paket::PaketOlustur(float pitch,float roll,float yaw,float sicaklik)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6178      	str	r0, [r7, #20]
 80037c0:	ed87 0a04 	vstr	s0, [r7, #16]
 80037c4:	edc7 0a03 	vstr	s1, [r7, #12]
 80037c8:	ed87 1a02 	vstr	s2, [r7, #8]
 80037cc:	edc7 1a01 	vstr	s3, [r7, #4]
    imupaket[0] = 0x12;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2212      	movs	r2, #18
 80037d4:	759a      	strb	r2, [r3, #22]
    imupaket[1] = 0x34;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2234      	movs	r2, #52	; 0x34
 80037da:	75da      	strb	r2, [r3, #23]
    imupaket[2] = 0x02;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2202      	movs	r2, #2
 80037e0:	761a      	strb	r2, [r3, #24]
    imupaket[3] = 0x11;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2211      	movs	r2, #17
 80037e6:	765a      	strb	r2, [r3, #25]
    this->pitch = pitch;
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	669a      	str	r2, [r3, #104]	; 0x68
    this->roll = roll;
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	66da      	str	r2, [r3, #108]	; 0x6c
    this->yaw = yaw;
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	671a      	str	r2, [r3, #112]	; 0x70
    this-> sicaklik = sicaklik;
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	675a      	str	r2, [r3, #116]	; 0x74

    floatToBytes(&pitch, pitchBytes_u8);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8003806:	f107 0310 	add.w	r3, r7, #16
 800380a:	4619      	mov	r1, r3
 800380c:	6978      	ldr	r0, [r7, #20]
 800380e:	f000 fa53 	bl	8003cb8 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&roll, rollBytes_u8);
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 8003818:	f107 030c 	add.w	r3, r7, #12
 800381c:	4619      	mov	r1, r3
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f000 fa4a 	bl	8003cb8 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&yaw, yawBytes_u8);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 800382a:	f107 0308 	add.w	r3, r7, #8
 800382e:	4619      	mov	r1, r3
 8003830:	6978      	ldr	r0, [r7, #20]
 8003832:	f000 fa41 	bl	8003cb8 <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&sicaklik, sicaklikBytes_u8);
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f103 0243 	add.w	r2, r3, #67	; 0x43
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	4619      	mov	r1, r3
 8003840:	6978      	ldr	r0, [r7, #20]
 8003842:	f000 fa39 	bl	8003cb8 <_ZN5Paket12floatToBytesEPfPh>

    memcpy(imupaket + 4, pitchBytes_u8, 4);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	3316      	adds	r3, #22
 800384a:	3304      	adds	r3, #4
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	3237      	adds	r2, #55	; 0x37
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	601a      	str	r2, [r3, #0]
    memcpy(imupaket + 8, rollBytes_u8, 4);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	3316      	adds	r3, #22
 8003858:	3308      	adds	r3, #8
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	323b      	adds	r2, #59	; 0x3b
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	601a      	str	r2, [r3, #0]
    memcpy(imupaket + 12, yawBytes_u8, 4);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	3316      	adds	r3, #22
 8003866:	330c      	adds	r3, #12
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	323f      	adds	r2, #63	; 0x3f
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	601a      	str	r2, [r3, #0]
    memcpy(imupaket + 16, sicaklikBytes_u8, 4);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	3316      	adds	r3, #22
 8003874:	3310      	adds	r3, #16
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	3243      	adds	r2, #67	; 0x43
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	601a      	str	r2, [r3, #0]

    imupaket[20] = CRC8Hesaplama(imupaket, 4,20);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f103 0116 	add.w	r1, r3, #22
 8003884:	2314      	movs	r3, #20
 8003886:	2204      	movs	r2, #4
 8003888:	6978      	ldr	r0, [r7, #20]
 800388a:	f000 f96d 	bl	8003b68 <_ZN5Paket13CRC8HesaplamaEPhhh>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8003898:	bf00      	nop
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <_ZN5Paket13gpsPaketCagirEPh>:
void Paket::gpsPaketCagir(uint8_t *kopyaDizi)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
	memcpy(kopyaDizi, gpspaket, sizeof(gpspaket));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3308      	adds	r3, #8
 80038ae:	220e      	movs	r2, #14
 80038b0:	4619      	mov	r1, r3
 80038b2:	6838      	ldr	r0, [r7, #0]
 80038b4:	f007 f85b 	bl	800a96e <memcpy>
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <_ZN5Paket13imuPaketCagirEPh>:
void Paket::imuPaketCagir(uint8_t *kopyaDizi)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
	memcpy(kopyaDizi, imupaket, sizeof(imupaket));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3316      	adds	r3, #22
 80038ce:	2215      	movs	r2, #21
 80038d0:	4619      	mov	r1, r3
 80038d2:	6838      	ldr	r0, [r7, #0]
 80038d4:	f007 f84b 	bl	800a96e <memcpy>
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <_ZN5Paket12BayrakKaldirEv>:

void Paket::BayrakKaldir()
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	PaketCozBayrak=true;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <_ZN5Paket8PaketCozEv>:
void Paket::PaketCoz()
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
    Durumlar Durum = Baslik1Coz;
 8003904:	2300      	movs	r3, #0
 8003906:	73fb      	strb	r3, [r7, #15]
    Paketler Paket = YOKLAMA;
 8003908:	2302      	movs	r3, #2
 800390a:	73bb      	strb	r3, [r7, #14]
    bool islem = true;
 800390c:	2301      	movs	r3, #1
 800390e:	737b      	strb	r3, [r7, #13]

    while (islem)
 8003910:	bf00      	nop
 8003912:	e117      	b.n	8003b44 <_ZN5Paket8PaketCozEv+0x248>
    {
        switch (Durum)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b04      	cmp	r3, #4
 8003918:	f200 8114 	bhi.w	8003b44 <_ZN5Paket8PaketCozEv+0x248>
 800391c:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <_ZN5Paket8PaketCozEv+0x28>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003939 	.word	0x08003939
 8003928:	0800397b 	.word	0x0800397b
 800392c:	080039df 	.word	0x080039df
 8003930:	08003a41 	.word	0x08003a41
 8003934:	08003aa9 	.word	0x08003aa9
        {
            case Baslik1Coz:
                if (ArayuzData[startIndex_u32] == 0x43 && ArayuzData[startIndex_u32] != 0)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003944:	2b43      	cmp	r3, #67	; 0x43
 8003946:	d109      	bne.n	800395c <_ZN5Paket8PaketCozEv+0x60>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <_ZN5Paket8PaketCozEv+0x60>
                {
                    Durum = Baslik2Coz;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
                }
                startIndex_u32 = (startIndex_u32 + 1) % 12;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	1c59      	adds	r1, r3, #1
 8003962:	4b80      	ldr	r3, [pc, #512]	; (8003b64 <_ZN5Paket8PaketCozEv+0x268>)
 8003964:	fba3 2301 	umull	r2, r3, r3, r1
 8003968:	08da      	lsrs	r2, r3, #3
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	1aca      	subs	r2, r1, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	659a      	str	r2, [r3, #88]	; 0x58
                break;
 8003978:	e0e4      	b.n	8003b44 <_ZN5Paket8PaketCozEv+0x248>

            case Baslik2Coz:
                if (ArayuzData[startIndex_u32] == 0x12 && ArayuzData[startIndex_u32] != 0)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003986:	2b12      	cmp	r3, #18
 8003988:	d118      	bne.n	80039bc <_ZN5Paket8PaketCozEv+0xc0>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003996:	2b00      	cmp	r3, #0
 8003998:	d010      	beq.n	80039bc <_ZN5Paket8PaketCozEv+0xc0>
                {
                    Durum = PaketTuruSec;
 800399a:	2302      	movs	r3, #2
 800399c:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % 12;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	1c59      	adds	r1, r3, #1
 80039a4:	4b6f      	ldr	r3, [pc, #444]	; (8003b64 <_ZN5Paket8PaketCozEv+0x268>)
 80039a6:	fba3 2301 	umull	r2, r3, r3, r1
 80039aa:	08da      	lsrs	r2, r3, #3
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	1aca      	subs	r2, r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	659a      	str	r2, [r3, #88]	; 0x58
 80039ba:	e00f      	b.n	80039dc <_ZN5Paket8PaketCozEv+0xe0>
                }
                else
                {
                    Durum = Baslik1Coz;
 80039bc:	2300      	movs	r3, #0
 80039be:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % 12;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	1c59      	adds	r1, r3, #1
 80039c6:	4b67      	ldr	r3, [pc, #412]	; (8003b64 <_ZN5Paket8PaketCozEv+0x268>)
 80039c8:	fba3 2301 	umull	r2, r3, r3, r1
 80039cc:	08da      	lsrs	r2, r3, #3
 80039ce:	4613      	mov	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	1aca      	subs	r2, r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	659a      	str	r2, [r3, #88]	; 0x58
                }
                break;
 80039dc:	e0b2      	b.n	8003b44 <_ZN5Paket8PaketCozEv+0x248>

            case PaketTuruSec:
                if (ArayuzData[startIndex_u32] != 0)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d017      	beq.n	8003a1e <_ZN5Paket8PaketCozEv+0x122>
                {
                    Paket = (Paketler)ArayuzData[startIndex_u32];
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80039fa:	73bb      	strb	r3, [r7, #14]
                    Durum = DataBoyutuAl;
 80039fc:	2303      	movs	r3, #3
 80039fe:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % 12;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	1c59      	adds	r1, r3, #1
 8003a06:	4b57      	ldr	r3, [pc, #348]	; (8003b64 <_ZN5Paket8PaketCozEv+0x268>)
 8003a08:	fba3 2301 	umull	r2, r3, r3, r1
 8003a0c:	08da      	lsrs	r2, r3, #3
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	1aca      	subs	r2, r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003a1c:	e092      	b.n	8003b44 <_ZN5Paket8PaketCozEv+0x248>
                }
                else
                {
                    Durum = Baslik1Coz;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % 12;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	1c59      	adds	r1, r3, #1
 8003a28:	4b4e      	ldr	r3, [pc, #312]	; (8003b64 <_ZN5Paket8PaketCozEv+0x268>)
 8003a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a2e:	08da      	lsrs	r2, r3, #3
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	1aca      	subs	r2, r1, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	659a      	str	r2, [r3, #88]	; 0x58
                }
                break;
 8003a3e:	e081      	b.n	8003b44 <_ZN5Paket8PaketCozEv+0x248>

            case DataBoyutuAl:
                if (ArayuzData[startIndex_u32] != 0)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	4413      	add	r3, r2
 8003a48:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01a      	beq.n	8003a86 <_ZN5Paket8PaketCozEv+0x18a>
                {
                    dataLength_s16 = ArayuzData[startIndex_u32];
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	4413      	add	r3, r2
 8003a58:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003a5c:	b21a      	sxth	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
                    Durum = DataOku;
 8003a64:	2304      	movs	r3, #4
 8003a66:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % 12;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	1c59      	adds	r1, r3, #1
 8003a6e:	4b3d      	ldr	r3, [pc, #244]	; (8003b64 <_ZN5Paket8PaketCozEv+0x268>)
 8003a70:	fba3 2301 	umull	r2, r3, r3, r1
 8003a74:	08da      	lsrs	r2, r3, #3
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	1aca      	subs	r2, r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	659a      	str	r2, [r3, #88]	; 0x58
 8003a84:	e05e      	b.n	8003b44 <_ZN5Paket8PaketCozEv+0x248>
                }
                else
                {
                    Durum = Baslik1Coz;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % 12;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8e:	1c59      	adds	r1, r3, #1
 8003a90:	4b34      	ldr	r3, [pc, #208]	; (8003b64 <_ZN5Paket8PaketCozEv+0x268>)
 8003a92:	fba3 2301 	umull	r2, r3, r3, r1
 8003a96:	08da      	lsrs	r2, r3, #3
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	1aca      	subs	r2, r1, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	659a      	str	r2, [r3, #88]	; 0x58
                }
                break;
 8003aa6:	e04d      	b.n	8003b44 <_ZN5Paket8PaketCozEv+0x248>

            case DataOku:
                if (Paket == GPS && dataLength_s16 == 8)
 8003aa8:	7bbb      	ldrb	r3, [r7, #14]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d144      	bne.n	8003b38 <_ZN5Paket8PaketCozEv+0x23c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d13f      	bne.n	8003b38 <_ZN5Paket8PaketCozEv+0x23c>
                {
                    ArayuzEnlem_f = bytesToFloat(ArayuzData, startIndex_u32);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f103 012b 	add.w	r1, r3, #43	; 0x2b
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f88d 	bl	8003be4 <_ZN5Paket12bytesToFloatEPKhl>
 8003aca:	eef0 7a40 	vmov.f32	s15, s0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
                    ArayuzBoylam_f = bytesToFloat(ArayuzData, (startIndex_u32 + 4) % 12);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f103 002b 	add.w	r0, r3, #43	; 0x2b
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	1d19      	adds	r1, r3, #4
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <_ZN5Paket8PaketCozEv+0x268>)
 8003ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ae6:	08da      	lsrs	r2, r3, #3
 8003ae8:	4613      	mov	r3, r2
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	1aca      	subs	r2, r1, r3
 8003af2:	4613      	mov	r3, r2
 8003af4:	461a      	mov	r2, r3
 8003af6:	4601      	mov	r1, r0
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f873 	bl	8003be4 <_ZN5Paket12bytesToFloatEPKhl>
 8003afe:	eef0 7a40 	vmov.f32	s15, s0
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80


                    if (ArayuzEnlem_f != 0 && ArayuzBoylam_f != 0)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003b0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    {

                    }

                    startIndex_u32 = (startIndex_u32 + dataLength_s16) % 12;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 8003b20:	1899      	adds	r1, r3, r2
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <_ZN5Paket8PaketCozEv+0x268>)
 8003b24:	fba3 2301 	umull	r2, r3, r3, r1
 8003b28:	08da      	lsrs	r2, r3, #3
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	1aca      	subs	r2, r1, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	659a      	str	r2, [r3, #88]	; 0x58
                }

                startIndex_u32 = 0;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	659a      	str	r2, [r3, #88]	; 0x58
                islem = false;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	737b      	strb	r3, [r7, #13]
                break;
 8003b42:	bf00      	nop
    while (islem)
 8003b44:	7b7b      	ldrb	r3, [r7, #13]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f47f aee4 	bne.w	8003914 <_ZN5Paket8PaketCozEv+0x18>
        }
    }

    HAL_UART_Receive_IT(huart, ArayuzData, sizeof(ArayuzData));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6858      	ldr	r0, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	332b      	adds	r3, #43	; 0x2b
 8003b54:	220c      	movs	r2, #12
 8003b56:	4619      	mov	r1, r3
 8003b58:	f003 f9dc 	bl	8006f14 <HAL_UART_Receive_IT>
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	aaaaaaab 	.word	0xaaaaaaab

08003b68 <_ZN5Paket13CRC8HesaplamaEPhhh>:

uint8_t Paket::CRC8Hesaplama(uint8_t *data, uint8_t start ,uint8_t end)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	4611      	mov	r1, r2
 8003b74:	461a      	mov	r2, r3
 8003b76:	460b      	mov	r3, r1
 8003b78:	71fb      	strb	r3, [r7, #7]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	71bb      	strb	r3, [r7, #6]
    uint8_t crc = 0x00;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = start; i < end; i++)
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	75bb      	strb	r3, [r7, #22]
 8003b86:	e021      	b.n	8003bcc <_ZN5Paket13CRC8HesaplamaEPhhh+0x64>
    {
        crc ^= data[i]; // CRC değerini, dizinin bir sonraki byte ile XOR
 8003b88:	7dbb      	ldrb	r3, [r7, #22]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	781a      	ldrb	r2, [r3, #0]
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	4053      	eors	r3, r2
 8003b94:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) //Her bir byte için döngü
 8003b96:	2300      	movs	r3, #0
 8003b98:	757b      	strb	r3, [r7, #21]
 8003b9a:	e011      	b.n	8003bc0 <_ZN5Paket13CRC8HesaplamaEPhhh+0x58>
        {
            if (crc & 0x80)//CRC değerinin en soldaki biti 1 mi
 8003b9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	da07      	bge.n	8003bb4 <_ZN5Paket13CRC8HesaplamaEPhhh+0x4c>
            {
                crc = (crc << 1) ^ 0X07; //En yüksek bit birse CRC değerini bir bit sola kaydır ve XOR işlemi yap
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	b25b      	sxtb	r3, r3
 8003baa:	f083 0307 	eor.w	r3, r3, #7
 8003bae:	b25b      	sxtb	r3, r3
 8003bb0:	75fb      	strb	r3, [r7, #23]
 8003bb2:	e002      	b.n	8003bba <_ZN5Paket13CRC8HesaplamaEPhhh+0x52>
            }
            else
            {
                crc <<= 1; //En yüksek bit sıfırsa CRC değerini bir bit sola kaydır
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) //Her bir byte için döngü
 8003bba:	7d7b      	ldrb	r3, [r7, #21]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	757b      	strb	r3, [r7, #21]
 8003bc0:	7d7b      	ldrb	r3, [r7, #21]
 8003bc2:	2b07      	cmp	r3, #7
 8003bc4:	d9ea      	bls.n	8003b9c <_ZN5Paket13CRC8HesaplamaEPhhh+0x34>
    for (uint8_t i = start; i < end; i++)
 8003bc6:	7dbb      	ldrb	r3, [r7, #22]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	75bb      	strb	r3, [r7, #22]
 8003bcc:	7dba      	ldrb	r2, [r7, #22]
 8003bce:	79bb      	ldrb	r3, [r7, #6]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d3d9      	bcc.n	8003b88 <_ZN5Paket13CRC8HesaplamaEPhhh+0x20>
            }
        }
    }

    return crc;
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <_ZN5Paket12bytesToFloatEPKhl>:

float Paket::bytesToFloat(const uint8_t* buffer, int32_t startIndex) {
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
   intBits_u32 =(buffer[(startIndex + 0) % 120] << 24) |
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <_ZN5Paket12bytesToFloatEPKhl+0xd0>)
 8003bf4:	fb83 1302 	smull	r1, r3, r3, r2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	1199      	asrs	r1, r3, #6
 8003bfc:	17d3      	asrs	r3, r2, #31
 8003bfe:	1ac9      	subs	r1, r1, r3
 8003c00:	460b      	mov	r3, r1
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a5b      	subs	r3, r3, r1
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	1ad1      	subs	r1, r2, r3
 8003c0a:	460a      	mov	r2, r1
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4413      	add	r3, r2
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	0618      	lsls	r0, r3, #24
    		(buffer[(startIndex + 1) % 120] << 16) |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <_ZN5Paket12bytesToFloatEPKhl+0xd0>)
 8003c1a:	fb83 1302 	smull	r1, r3, r3, r2
 8003c1e:	4413      	add	r3, r2
 8003c20:	1199      	asrs	r1, r3, #6
 8003c22:	17d3      	asrs	r3, r2, #31
 8003c24:	1ac9      	subs	r1, r1, r3
 8003c26:	460b      	mov	r3, r1
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1a5b      	subs	r3, r3, r1
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	1ad1      	subs	r1, r2, r3
 8003c30:	460a      	mov	r2, r1
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4413      	add	r3, r2
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	041b      	lsls	r3, r3, #16
   intBits_u32 =(buffer[(startIndex + 0) % 120] << 24) |
 8003c3a:	4318      	orrs	r0, r3
			(buffer[(startIndex + 2) % 120] << 8)  |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	1c9a      	adds	r2, r3, #2
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <_ZN5Paket12bytesToFloatEPKhl+0xd0>)
 8003c42:	fb83 1302 	smull	r1, r3, r3, r2
 8003c46:	4413      	add	r3, r2
 8003c48:	1199      	asrs	r1, r3, #6
 8003c4a:	17d3      	asrs	r3, r2, #31
 8003c4c:	1ac9      	subs	r1, r1, r3
 8003c4e:	460b      	mov	r3, r1
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a5b      	subs	r3, r3, r1
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	1ad1      	subs	r1, r2, r3
 8003c58:	460a      	mov	r2, r1
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	021b      	lsls	r3, r3, #8
    		(buffer[(startIndex + 1) % 120] << 16) |
 8003c62:	4318      	orrs	r0, r3
			(buffer[(startIndex + 3) % 120] << 0)  ;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	1cda      	adds	r2, r3, #3
 8003c68:	4b12      	ldr	r3, [pc, #72]	; (8003cb4 <_ZN5Paket12bytesToFloatEPKhl+0xd0>)
 8003c6a:	fb83 1302 	smull	r1, r3, r3, r2
 8003c6e:	4413      	add	r3, r2
 8003c70:	1199      	asrs	r1, r3, #6
 8003c72:	17d3      	asrs	r3, r2, #31
 8003c74:	1ac9      	subs	r1, r1, r3
 8003c76:	460b      	mov	r3, r1
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	1a5b      	subs	r3, r3, r1
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	1ad1      	subs	r1, r2, r3
 8003c80:	460a      	mov	r2, r1
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4413      	add	r3, r2
 8003c86:	781b      	ldrb	r3, [r3, #0]
			(buffer[(startIndex + 2) % 120] << 8)  |
 8003c88:	4303      	orrs	r3, r0
 8003c8a:	461a      	mov	r2, r3
   intBits_u32 =(buffer[(startIndex + 0) % 120] << 24) |
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	65da      	str	r2, [r3, #92]	; 0x5c

    memcpy(&sonuc, &intBits_u32, sizeof(sonuc));
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3378      	adds	r3, #120	; 0x78
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	325c      	adds	r2, #92	; 0x5c
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	601a      	str	r2, [r3, #0]
    return sonuc;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ca0:	ee07 3a90 	vmov	s15, r3
}
 8003ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	88888889 	.word	0x88888889

08003cb8 <_ZN5Paket12floatToBytesEPfPh>:

uint32_t Paket::floatToBytes(float *Deger_f, uint8_t* bytes)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
    uint8_t* p = (uint8_t*)Deger_f;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 4; i++)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e00a      	b.n	8003ce4 <_ZN5Paket12floatToBytesEPfPh+0x2c>
    {
        bytes[i] = p[i];
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	441a      	add	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	440b      	add	r3, r1
 8003cda:	7812      	ldrb	r2, [r2, #0]
 8003cdc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	ddf1      	ble.n	8003cce <_ZN5Paket12floatToBytesEPfPh+0x16>
    }
    return (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | (bytes[0] & 0xFF);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3303      	adds	r3, #3
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	061a      	lsls	r2, r3, #24
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	4313      	orrs	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	7812      	ldrb	r2, [r2, #0]
 8003d0a:	4313      	orrs	r3, r2
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <_ZN5GorevC1Ev>:
#include "stm32f4xx_hal.h"
#include "stdint.h"

#define maxGorev 10

struct Gorev {
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	719a      	strb	r2, [r3, #6]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <_ZN13GorevyoneticiC1EP11TIM_TypeDef>:
#include "gorevyonetici.h"


Gorevyonetici::Gorevyonetici(TIM_TypeDef* pTimerAlan)
 8003d34:	b5b0      	push	{r4, r5, r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	705a      	strb	r2, [r3, #1]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	709a      	strb	r2, [r3, #2]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	70da      	strb	r2, [r3, #3]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	711a      	strb	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3310      	adds	r3, #16
 8003d60:	2409      	movs	r4, #9
 8003d62:	461d      	mov	r5, r3
 8003d64:	e004      	b.n	8003d70 <_ZN13GorevyoneticiC1EP11TIM_TypeDef+0x3c>
 8003d66:	4628      	mov	r0, r5
 8003d68:	f7ff ffd6 	bl	8003d18 <_ZN5GorevC1Ev>
 8003d6c:	3508      	adds	r5, #8
 8003d6e:	3c01      	subs	r4, #1
 8003d70:	2c00      	cmp	r4, #0
 8003d72:	daf8      	bge.n	8003d66 <_ZN13GorevyoneticiC1EP11TIM_TypeDef+0x32>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
{
    this->pTimerAlan = pTimerAlan;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	609a      	str	r2, [r3, #8]
}
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bdb0      	pop	{r4, r5, r7, pc}

08003d9c <_ZN13Gorevyonetici7GorevAlEPFvvEs>:

void Gorevyonetici::GorevAl(void (*gorev)(), int16_t ms_s16)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
	if (gorevSayac < maxGorev)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003db0:	2b09      	cmp	r3, #9
 8003db2:	d819      	bhi.n	8003de8 <_ZN13Gorevyonetici7GorevAlEPFvvEs+0x4c>
	{
	    gorevler[gorevSayac].gorev = gorev;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3202      	adds	r2, #2
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	    gorevler[gorevSayac].ms_s16 = ms_s16;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	3302      	adds	r3, #2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	88fa      	ldrh	r2, [r7, #6]
 8003dd6:	809a      	strh	r2, [r3, #4]
	    gorevSayac++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003dde:	3301      	adds	r3, #1
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <_ZN13Gorevyonetici12BayrakKaldirEv>:
void Gorevyonetici::BayrakKaldir()
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
    pTimerAlan->SR &= ~(TIM_SR_UIF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	611a      	str	r2, [r3, #16]
    Counter_u16++;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003e12:	3301      	adds	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    for (int i = 0; i < gorevSayac; i++)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e01b      	b.n	8003e5a <_ZN13Gorevyonetici12BayrakKaldirEv+0x66>
    {
		if (0 == Counter_u16 % gorevler[i].ms_s16)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3302      	adds	r3, #2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	440b      	add	r3, r1
 8003e34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e38:	fb92 f1f3 	sdiv	r1, r2, r3
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <_ZN13Gorevyonetici12BayrakKaldirEv+0x60>
		{
		   gorevler[i].Bayrak = true;
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4413      	add	r3, r2
 8003e50:	2201      	movs	r2, #1
 8003e52:	719a      	strb	r2, [r3, #6]
    for (int i = 0; i < gorevSayac; i++)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3301      	adds	r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003e60:	461a      	mov	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4293      	cmp	r3, r2
 8003e66:	dbdc      	blt.n	8003e22 <_ZN13Gorevyonetici12BayrakKaldirEv+0x2e>
		}
     }
    if (Counter_u16 % 1000 == 0)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003e6e:	4a0b      	ldr	r2, [pc, #44]	; (8003e9c <_ZN13Gorevyonetici12BayrakKaldirEv+0xa8>)
 8003e70:	fba2 1203 	umull	r1, r2, r2, r3
 8003e74:	0992      	lsrs	r2, r2, #6
 8003e76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e7a:	fb01 f202 	mul.w	r2, r1, r2
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <_ZN13Gorevyonetici12BayrakKaldirEv+0x9a>
  	{
  	    Counter_u16=0;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  	}
}
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	10624dd3 	.word	0x10624dd3

08003ea0 <_ZN13Gorevyonetici13GorevCalistirEv>:

void Gorevyonetici::GorevCalistir()
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < gorevSayac; i++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e01e      	b.n	8003eec <_ZN13Gorevyonetici13GorevCalistirEv+0x4c>
	{
		if (gorevler[i].Bayrak && gorevler[i].gorev)
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	799b      	ldrb	r3, [r3, #6]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d013      	beq.n	8003ee6 <_ZN13Gorevyonetici13GorevCalistirEv+0x46>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	3202      	adds	r2, #2
 8003ec4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00c      	beq.n	8003ee6 <_ZN13Gorevyonetici13GorevCalistirEv+0x46>
	    {
	        gorevler[i].Bayrak = false;
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3302      	adds	r3, #2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	719a      	strb	r2, [r3, #6]
	        gorevler[i].gorev();
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	3202      	adds	r2, #2
 8003ee0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003ee4:	4798      	blx	r3
	for (int i = 0; i < gorevSayac; i++)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	dbd9      	blt.n	8003eae <_ZN13Gorevyonetici13GorevCalistirEv+0xe>
	    }
	}

}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	db0b      	blt.n	8003f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	f003 021f 	and.w	r2, r3, #31
 8003f1c:	4907      	ldr	r1, [pc, #28]	; (8003f3c <__NVIC_EnableIRQ+0x38>)
 8003f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2001      	movs	r0, #1
 8003f26:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	e000e100 	.word	0xe000e100

08003f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db0a      	blt.n	8003f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	490c      	ldr	r1, [pc, #48]	; (8003f8c <__NVIC_SetPriority+0x4c>)
 8003f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f68:	e00a      	b.n	8003f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4908      	ldr	r1, [pc, #32]	; (8003f90 <__NVIC_SetPriority+0x50>)
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	3b04      	subs	r3, #4
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	761a      	strb	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <_ZN5TimerC1EP11TIM_TypeDef>:
#include "mytimer.h"

Timer::Timer(TIM_TypeDef* pTimerAlan)
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
{
    this->pTimerAlan = pTimerAlan;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	601a      	str	r2, [r3, #0]
    TimerClockAktifEt();
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f837 	bl	8004018 <_ZN5Timer17TimerClockAktifEtEv>
}
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <_ZN5Timer10YapilandirEmm>:

void Timer::Yapilandir(uint32_t prescaler_u32, uint32_t period_u32)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
	pTimerAlan->PSC = prescaler_u32 - 1;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	3a01      	subs	r2, #1
 8003fc8:	629a      	str	r2, [r3, #40]	; 0x28
	pTimerAlan->ARR = period_u32 - 1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	3a01      	subs	r2, #1
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c
	pTimerAlan->DIER |= TIM_DIER_UIE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	60da      	str	r2, [r3, #12]
    TimerInterruptAktifEt();
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f8a5 	bl	8004134 <_ZN5Timer21TimerInterruptAktifEtEv>
}
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <_ZN5Timer7AktifEtEv>:

void Timer::AktifEt()
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
	pTimerAlan->CR1 |= TIM_CR1_CEN;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <_ZN5Timer17TimerClockAktifEtEv>:
{
    return pTimerAlan->CNT;
}

void Timer::TimerClockAktifEt()
{
 8004018:	b480      	push	{r7}
 800401a:	b089      	sub	sp, #36	; 0x24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
    if (this->pTimerAlan == TIM2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004028:	d10e      	bne.n	8004048 <_ZN5Timer17TimerClockAktifEtEv+0x30>
    {
        __HAL_RCC_TIM2_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	4b3b      	ldr	r3, [pc, #236]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	4a3a      	ldr	r2, [pc, #232]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	6413      	str	r3, [r2, #64]	; 0x40
 800403a:	4b38      	ldr	r3, [pc, #224]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	61fb      	str	r3, [r7, #28]
 8004044:	69fb      	ldr	r3, [r7, #28]
    }
    else if (this->pTimerAlan == TIM7)
    {
        __HAL_RCC_TIM7_CLK_ENABLE();
    }
}
 8004046:	e062      	b.n	800410e <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM3)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a34      	ldr	r2, [pc, #208]	; (8004120 <_ZN5Timer17TimerClockAktifEtEv+0x108>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10e      	bne.n	8004070 <_ZN5Timer17TimerClockAktifEtEv+0x58>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	4b31      	ldr	r3, [pc, #196]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a30      	ldr	r2, [pc, #192]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
 8004062:	4b2e      	ldr	r3, [pc, #184]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	69bb      	ldr	r3, [r7, #24]
}
 800406e:	e04e      	b.n	800410e <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM4)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2b      	ldr	r2, [pc, #172]	; (8004124 <_ZN5Timer17TimerClockAktifEtEv+0x10c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10e      	bne.n	8004098 <_ZN5Timer17TimerClockAktifEtEv+0x80>
        __HAL_RCC_TIM4_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	4b27      	ldr	r3, [pc, #156]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	4a26      	ldr	r2, [pc, #152]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8004084:	f043 0304 	orr.w	r3, r3, #4
 8004088:	6413      	str	r3, [r2, #64]	; 0x40
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	697b      	ldr	r3, [r7, #20]
}
 8004096:	e03a      	b.n	800410e <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM5)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <_ZN5Timer17TimerClockAktifEtEv+0x110>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10e      	bne.n	80040c0 <_ZN5Timer17TimerClockAktifEtEv+0xa8>
        __HAL_RCC_TIM5_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	4b1d      	ldr	r3, [pc, #116]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	4a1c      	ldr	r2, [pc, #112]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80040ac:	f043 0308 	orr.w	r3, r3, #8
 80040b0:	6413      	str	r3, [r2, #64]	; 0x40
 80040b2:	4b1a      	ldr	r3, [pc, #104]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
}
 80040be:	e026      	b.n	800410e <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM6)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a19      	ldr	r2, [pc, #100]	; (800412c <_ZN5Timer17TimerClockAktifEtEv+0x114>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10e      	bne.n	80040e8 <_ZN5Timer17TimerClockAktifEtEv+0xd0>
        __HAL_RCC_TIM6_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	4b13      	ldr	r3, [pc, #76]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	4a12      	ldr	r2, [pc, #72]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80040d4:	f043 0310 	orr.w	r3, r3, #16
 80040d8:	6413      	str	r3, [r2, #64]	; 0x40
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
}
 80040e6:	e012      	b.n	800410e <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM7)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a10      	ldr	r2, [pc, #64]	; (8004130 <_ZN5Timer17TimerClockAktifEtEv+0x118>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10d      	bne.n	800410e <_ZN5Timer17TimerClockAktifEtEv+0xf6>
        __HAL_RCC_TIM7_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	4b09      	ldr	r3, [pc, #36]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	4a08      	ldr	r2, [pc, #32]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 80040fc:	f043 0320 	orr.w	r3, r3, #32
 8004100:	6413      	str	r3, [r2, #64]	; 0x40
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	60bb      	str	r3, [r7, #8]
 800410c:	68bb      	ldr	r3, [r7, #8]
}
 800410e:	bf00      	nop
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	40000400 	.word	0x40000400
 8004124:	40000800 	.word	0x40000800
 8004128:	40000c00 	.word	0x40000c00
 800412c:	40001000 	.word	0x40001000
 8004130:	40001400 	.word	0x40001400

08004134 <_ZN5Timer21TimerInterruptAktifEtEv>:

void Timer::TimerInterruptAktifEt()
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
    if (this->pTimerAlan == TIM2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004144:	d107      	bne.n	8004156 <_ZN5Timer21TimerInterruptAktifEtEv+0x22>
    {
        NVIC_EnableIRQ(TIM2_IRQn);
 8004146:	201c      	movs	r0, #28
 8004148:	f7ff fedc 	bl	8003f04 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM2_IRQn, 2);
 800414c:	2102      	movs	r1, #2
 800414e:	201c      	movs	r0, #28
 8004150:	f7ff fef6 	bl	8003f40 <__NVIC_SetPriority>
    else if (this->pTimerAlan == TIM7)
    {
        NVIC_EnableIRQ(TIM7_IRQn);
        NVIC_SetPriority(TIM7_IRQn, 2);
    }
}
 8004154:	e03f      	b.n	80041d6 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM3)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a21      	ldr	r2, [pc, #132]	; (80041e0 <_ZN5Timer21TimerInterruptAktifEtEv+0xac>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d107      	bne.n	8004170 <_ZN5Timer21TimerInterruptAktifEtEv+0x3c>
        NVIC_EnableIRQ(TIM3_IRQn);
 8004160:	201d      	movs	r0, #29
 8004162:	f7ff fecf 	bl	8003f04 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM3_IRQn, 2);
 8004166:	2102      	movs	r1, #2
 8004168:	201d      	movs	r0, #29
 800416a:	f7ff fee9 	bl	8003f40 <__NVIC_SetPriority>
}
 800416e:	e032      	b.n	80041d6 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM4)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <_ZN5Timer21TimerInterruptAktifEtEv+0xb0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d107      	bne.n	800418a <_ZN5Timer21TimerInterruptAktifEtEv+0x56>
        NVIC_EnableIRQ(TIM4_IRQn);
 800417a:	201e      	movs	r0, #30
 800417c:	f7ff fec2 	bl	8003f04 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM4_IRQn, 2);
 8004180:	2102      	movs	r1, #2
 8004182:	201e      	movs	r0, #30
 8004184:	f7ff fedc 	bl	8003f40 <__NVIC_SetPriority>
}
 8004188:	e025      	b.n	80041d6 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM5)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a16      	ldr	r2, [pc, #88]	; (80041e8 <_ZN5Timer21TimerInterruptAktifEtEv+0xb4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d107      	bne.n	80041a4 <_ZN5Timer21TimerInterruptAktifEtEv+0x70>
        NVIC_EnableIRQ(TIM5_IRQn);
 8004194:	2032      	movs	r0, #50	; 0x32
 8004196:	f7ff feb5 	bl	8003f04 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM5_IRQn, 2);
 800419a:	2102      	movs	r1, #2
 800419c:	2032      	movs	r0, #50	; 0x32
 800419e:	f7ff fecf 	bl	8003f40 <__NVIC_SetPriority>
}
 80041a2:	e018      	b.n	80041d6 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM6)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a10      	ldr	r2, [pc, #64]	; (80041ec <_ZN5Timer21TimerInterruptAktifEtEv+0xb8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d107      	bne.n	80041be <_ZN5Timer21TimerInterruptAktifEtEv+0x8a>
        NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80041ae:	2036      	movs	r0, #54	; 0x36
 80041b0:	f7ff fea8 	bl	8003f04 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM6_DAC_IRQn, 2);
 80041b4:	2102      	movs	r1, #2
 80041b6:	2036      	movs	r0, #54	; 0x36
 80041b8:	f7ff fec2 	bl	8003f40 <__NVIC_SetPriority>
}
 80041bc:	e00b      	b.n	80041d6 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM7)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <_ZN5Timer21TimerInterruptAktifEtEv+0xbc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d106      	bne.n	80041d6 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
        NVIC_EnableIRQ(TIM7_IRQn);
 80041c8:	2037      	movs	r0, #55	; 0x37
 80041ca:	f7ff fe9b 	bl	8003f04 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM7_IRQn, 2);
 80041ce:	2102      	movs	r1, #2
 80041d0:	2037      	movs	r0, #55	; 0x37
 80041d2:	f7ff feb5 	bl	8003f40 <__NVIC_SetPriority>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40000400 	.word	0x40000400
 80041e4:	40000800 	.word	0x40000800
 80041e8:	40000c00 	.word	0x40000c00
 80041ec:	40001000 	.word	0x40001000
 80041f0:	40001400 	.word	0x40001400

080041f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041f8:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <HAL_Init+0x40>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0d      	ldr	r2, [pc, #52]	; (8004234 <HAL_Init+0x40>)
 80041fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_Init+0x40>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_Init+0x40>)
 800420a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800420e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <HAL_Init+0x40>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a07      	ldr	r2, [pc, #28]	; (8004234 <HAL_Init+0x40>)
 8004216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800421c:	2003      	movs	r0, #3
 800421e:	f000 f94f 	bl	80044c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004222:	2000      	movs	r0, #0
 8004224:	f000 f808 	bl	8004238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004228:	f7fe f916 	bl	8002458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023c00 	.word	0x40023c00

08004238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_InitTick+0x54>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <HAL_InitTick+0x58>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	4619      	mov	r1, r3
 800424a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800424e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004252:	fbb2 f3f3 	udiv	r3, r2, r3
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f967 	bl	800452a <HAL_SYSTICK_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e00e      	b.n	8004284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b0f      	cmp	r3, #15
 800426a:	d80a      	bhi.n	8004282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800426c:	2200      	movs	r2, #0
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	f000 f92f 	bl	80044d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004278:	4a06      	ldr	r2, [pc, #24]	; (8004294 <HAL_InitTick+0x5c>)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000000 	.word	0x20000000
 8004290:	20000008 	.word	0x20000008
 8004294:	20000004 	.word	0x20000004

08004298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_IncTick+0x20>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_IncTick+0x24>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <HAL_IncTick+0x24>)
 80042aa:	6013      	str	r3, [r2, #0]
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000008 	.word	0x20000008
 80042bc:	20000774 	.word	0x20000774

080042c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return uwTick;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <HAL_GetTick+0x14>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000774 	.word	0x20000774

080042d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042e0:	f7ff ffee 	bl	80042c0 <HAL_GetTick>
 80042e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d005      	beq.n	80042fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_Delay+0x44>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042fe:	bf00      	nop
 8004300:	f7ff ffde 	bl	80042c0 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	429a      	cmp	r2, r3
 800430e:	d8f7      	bhi.n	8004300 <HAL_Delay+0x28>
  {
  }
}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000008 	.word	0x20000008

08004320 <__NVIC_SetPriorityGrouping>:
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <__NVIC_SetPriorityGrouping+0x44>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800433c:	4013      	ands	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800434c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004352:	4a04      	ldr	r2, [pc, #16]	; (8004364 <__NVIC_SetPriorityGrouping+0x44>)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	60d3      	str	r3, [r2, #12]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <__NVIC_GetPriorityGrouping>:
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <__NVIC_GetPriorityGrouping+0x18>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	0a1b      	lsrs	r3, r3, #8
 8004372:	f003 0307 	and.w	r3, r3, #7
}
 8004376:	4618      	mov	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <__NVIC_EnableIRQ>:
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	2b00      	cmp	r3, #0
 8004394:	db0b      	blt.n	80043ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	f003 021f 	and.w	r2, r3, #31
 800439c:	4907      	ldr	r1, [pc, #28]	; (80043bc <__NVIC_EnableIRQ+0x38>)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	2001      	movs	r0, #1
 80043a6:	fa00 f202 	lsl.w	r2, r0, r2
 80043aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000e100 	.word	0xe000e100

080043c0 <__NVIC_SetPriority>:
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	db0a      	blt.n	80043ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	490c      	ldr	r1, [pc, #48]	; (800440c <__NVIC_SetPriority+0x4c>)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	0112      	lsls	r2, r2, #4
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	440b      	add	r3, r1
 80043e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043e8:	e00a      	b.n	8004400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	4908      	ldr	r1, [pc, #32]	; (8004410 <__NVIC_SetPriority+0x50>)
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	3b04      	subs	r3, #4
 80043f8:	0112      	lsls	r2, r2, #4
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	440b      	add	r3, r1
 80043fe:	761a      	strb	r2, [r3, #24]
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	e000e100 	.word	0xe000e100
 8004410:	e000ed00 	.word	0xe000ed00

08004414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004414:	b480      	push	{r7}
 8004416:	b089      	sub	sp, #36	; 0x24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f1c3 0307 	rsb	r3, r3, #7
 800442e:	2b04      	cmp	r3, #4
 8004430:	bf28      	it	cs
 8004432:	2304      	movcs	r3, #4
 8004434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3304      	adds	r3, #4
 800443a:	2b06      	cmp	r3, #6
 800443c:	d902      	bls.n	8004444 <NVIC_EncodePriority+0x30>
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3b03      	subs	r3, #3
 8004442:	e000      	b.n	8004446 <NVIC_EncodePriority+0x32>
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004448:	f04f 32ff 	mov.w	r2, #4294967295
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43da      	mvns	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	401a      	ands	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800445c:	f04f 31ff 	mov.w	r1, #4294967295
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fa01 f303 	lsl.w	r3, r1, r3
 8004466:	43d9      	mvns	r1, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800446c:	4313      	orrs	r3, r2
         );
}
 800446e:	4618      	mov	r0, r3
 8004470:	3724      	adds	r7, #36	; 0x24
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3b01      	subs	r3, #1
 8004488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800448c:	d301      	bcc.n	8004492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800448e:	2301      	movs	r3, #1
 8004490:	e00f      	b.n	80044b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004492:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <SysTick_Config+0x40>)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3b01      	subs	r3, #1
 8004498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800449a:	210f      	movs	r1, #15
 800449c:	f04f 30ff 	mov.w	r0, #4294967295
 80044a0:	f7ff ff8e 	bl	80043c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <SysTick_Config+0x40>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <SysTick_Config+0x40>)
 80044ac:	2207      	movs	r2, #7
 80044ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	e000e010 	.word	0xe000e010

080044c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff ff29 	bl	8004320 <__NVIC_SetPriorityGrouping>
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b086      	sub	sp, #24
 80044da:	af00      	add	r7, sp, #0
 80044dc:	4603      	mov	r3, r0
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044e8:	f7ff ff3e 	bl	8004368 <__NVIC_GetPriorityGrouping>
 80044ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	6978      	ldr	r0, [r7, #20]
 80044f4:	f7ff ff8e 	bl	8004414 <NVIC_EncodePriority>
 80044f8:	4602      	mov	r2, r0
 80044fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff ff5d 	bl	80043c0 <__NVIC_SetPriority>
}
 8004506:	bf00      	nop
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	4603      	mov	r3, r0
 8004516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff31 	bl	8004384 <__NVIC_EnableIRQ>
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ffa2 	bl	800447c <SysTick_Config>
 8004538:	4603      	mov	r3, r0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004550:	f7ff feb6 	bl	80042c0 <HAL_GetTick>
 8004554:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d008      	beq.n	8004574 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2280      	movs	r2, #128	; 0x80
 8004566:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e052      	b.n	800461a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0216 	bic.w	r2, r2, #22
 8004582:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004592:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d103      	bne.n	80045a4 <HAL_DMA_Abort+0x62>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0208 	bic.w	r2, r2, #8
 80045b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0201 	bic.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045c4:	e013      	b.n	80045ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045c6:	f7ff fe7b 	bl	80042c0 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b05      	cmp	r3, #5
 80045d2:	d90c      	bls.n	80045ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2203      	movs	r2, #3
 80045de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e015      	b.n	800461a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e4      	bne.n	80045c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004600:	223f      	movs	r2, #63	; 0x3f
 8004602:	409a      	lsls	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d004      	beq.n	8004640 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2280      	movs	r2, #128	; 0x80
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e00c      	b.n	800465a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2205      	movs	r2, #5
 8004644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004668:	b480      	push	{r7}
 800466a:	b089      	sub	sp, #36	; 0x24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800467a:	2300      	movs	r3, #0
 800467c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	e16b      	b.n	800495c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004684:	2201      	movs	r2, #1
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4013      	ands	r3, r2
 8004696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	429a      	cmp	r2, r3
 800469e:	f040 815a 	bne.w	8004956 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d005      	beq.n	80046ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d130      	bne.n	800471c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	2203      	movs	r2, #3
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4013      	ands	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046f0:	2201      	movs	r2, #1
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 0201 	and.w	r2, r3, #1
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	2b03      	cmp	r3, #3
 8004726:	d017      	beq.n	8004758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	2203      	movs	r2, #3
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d123      	bne.n	80047ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	08da      	lsrs	r2, r3, #3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3208      	adds	r2, #8
 800476c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	220f      	movs	r2, #15
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43db      	mvns	r3, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4013      	ands	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4313      	orrs	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	08da      	lsrs	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3208      	adds	r2, #8
 80047a6:	69b9      	ldr	r1, [r7, #24]
 80047a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	2203      	movs	r2, #3
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 0203 	and.w	r2, r3, #3
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80b4 	beq.w	8004956 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	4b60      	ldr	r3, [pc, #384]	; (8004974 <HAL_GPIO_Init+0x30c>)
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	4a5f      	ldr	r2, [pc, #380]	; (8004974 <HAL_GPIO_Init+0x30c>)
 80047f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047fc:	6453      	str	r3, [r2, #68]	; 0x44
 80047fe:	4b5d      	ldr	r3, [pc, #372]	; (8004974 <HAL_GPIO_Init+0x30c>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800480a:	4a5b      	ldr	r2, [pc, #364]	; (8004978 <HAL_GPIO_Init+0x310>)
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	089b      	lsrs	r3, r3, #2
 8004810:	3302      	adds	r3, #2
 8004812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	220f      	movs	r2, #15
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4013      	ands	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a52      	ldr	r2, [pc, #328]	; (800497c <HAL_GPIO_Init+0x314>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d02b      	beq.n	800488e <HAL_GPIO_Init+0x226>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a51      	ldr	r2, [pc, #324]	; (8004980 <HAL_GPIO_Init+0x318>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d025      	beq.n	800488a <HAL_GPIO_Init+0x222>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a50      	ldr	r2, [pc, #320]	; (8004984 <HAL_GPIO_Init+0x31c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d01f      	beq.n	8004886 <HAL_GPIO_Init+0x21e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a4f      	ldr	r2, [pc, #316]	; (8004988 <HAL_GPIO_Init+0x320>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d019      	beq.n	8004882 <HAL_GPIO_Init+0x21a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a4e      	ldr	r2, [pc, #312]	; (800498c <HAL_GPIO_Init+0x324>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <HAL_GPIO_Init+0x216>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a4d      	ldr	r2, [pc, #308]	; (8004990 <HAL_GPIO_Init+0x328>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00d      	beq.n	800487a <HAL_GPIO_Init+0x212>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a4c      	ldr	r2, [pc, #304]	; (8004994 <HAL_GPIO_Init+0x32c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <HAL_GPIO_Init+0x20e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a4b      	ldr	r2, [pc, #300]	; (8004998 <HAL_GPIO_Init+0x330>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d101      	bne.n	8004872 <HAL_GPIO_Init+0x20a>
 800486e:	2307      	movs	r3, #7
 8004870:	e00e      	b.n	8004890 <HAL_GPIO_Init+0x228>
 8004872:	2308      	movs	r3, #8
 8004874:	e00c      	b.n	8004890 <HAL_GPIO_Init+0x228>
 8004876:	2306      	movs	r3, #6
 8004878:	e00a      	b.n	8004890 <HAL_GPIO_Init+0x228>
 800487a:	2305      	movs	r3, #5
 800487c:	e008      	b.n	8004890 <HAL_GPIO_Init+0x228>
 800487e:	2304      	movs	r3, #4
 8004880:	e006      	b.n	8004890 <HAL_GPIO_Init+0x228>
 8004882:	2303      	movs	r3, #3
 8004884:	e004      	b.n	8004890 <HAL_GPIO_Init+0x228>
 8004886:	2302      	movs	r3, #2
 8004888:	e002      	b.n	8004890 <HAL_GPIO_Init+0x228>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <HAL_GPIO_Init+0x228>
 800488e:	2300      	movs	r3, #0
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	f002 0203 	and.w	r2, r2, #3
 8004896:	0092      	lsls	r2, r2, #2
 8004898:	4093      	lsls	r3, r2
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048a0:	4935      	ldr	r1, [pc, #212]	; (8004978 <HAL_GPIO_Init+0x310>)
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	3302      	adds	r3, #2
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ae:	4b3b      	ldr	r3, [pc, #236]	; (800499c <HAL_GPIO_Init+0x334>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048d2:	4a32      	ldr	r2, [pc, #200]	; (800499c <HAL_GPIO_Init+0x334>)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048d8:	4b30      	ldr	r3, [pc, #192]	; (800499c <HAL_GPIO_Init+0x334>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048fc:	4a27      	ldr	r2, [pc, #156]	; (800499c <HAL_GPIO_Init+0x334>)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004902:	4b26      	ldr	r3, [pc, #152]	; (800499c <HAL_GPIO_Init+0x334>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	43db      	mvns	r3, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004926:	4a1d      	ldr	r2, [pc, #116]	; (800499c <HAL_GPIO_Init+0x334>)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800492c:	4b1b      	ldr	r3, [pc, #108]	; (800499c <HAL_GPIO_Init+0x334>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	43db      	mvns	r3, r3
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4013      	ands	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004950:	4a12      	ldr	r2, [pc, #72]	; (800499c <HAL_GPIO_Init+0x334>)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3301      	adds	r3, #1
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	2b0f      	cmp	r3, #15
 8004960:	f67f ae90 	bls.w	8004684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	3724      	adds	r7, #36	; 0x24
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800
 8004978:	40013800 	.word	0x40013800
 800497c:	40020000 	.word	0x40020000
 8004980:	40020400 	.word	0x40020400
 8004984:	40020800 	.word	0x40020800
 8004988:	40020c00 	.word	0x40020c00
 800498c:	40021000 	.word	0x40021000
 8004990:	40021400 	.word	0x40021400
 8004994:	40021800 	.word	0x40021800
 8004998:	40021c00 	.word	0x40021c00
 800499c:	40013c00 	.word	0x40013c00

080049a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	807b      	strh	r3, [r7, #2]
 80049ac:	4613      	mov	r3, r2
 80049ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049b0:	787b      	ldrb	r3, [r7, #1]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049bc:	e003      	b.n	80049c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049be:	887b      	ldrh	r3, [r7, #2]
 80049c0:	041a      	lsls	r2, r3, #16
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	619a      	str	r2, [r3, #24]
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e12b      	b.n	8004c3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fc fc88 	bl	8001310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2224      	movs	r2, #36	; 0x24
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a38:	f002 f8e0 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
 8004a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4a81      	ldr	r2, [pc, #516]	; (8004c48 <HAL_I2C_Init+0x274>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d807      	bhi.n	8004a58 <HAL_I2C_Init+0x84>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a80      	ldr	r2, [pc, #512]	; (8004c4c <HAL_I2C_Init+0x278>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	bf94      	ite	ls
 8004a50:	2301      	movls	r3, #1
 8004a52:	2300      	movhi	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e006      	b.n	8004a66 <HAL_I2C_Init+0x92>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4a7d      	ldr	r2, [pc, #500]	; (8004c50 <HAL_I2C_Init+0x27c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	bf94      	ite	ls
 8004a60:	2301      	movls	r3, #1
 8004a62:	2300      	movhi	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e0e7      	b.n	8004c3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a78      	ldr	r2, [pc, #480]	; (8004c54 <HAL_I2C_Init+0x280>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0c9b      	lsrs	r3, r3, #18
 8004a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4a6a      	ldr	r2, [pc, #424]	; (8004c48 <HAL_I2C_Init+0x274>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d802      	bhi.n	8004aa8 <HAL_I2C_Init+0xd4>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	e009      	b.n	8004abc <HAL_I2C_Init+0xe8>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	4a69      	ldr	r2, [pc, #420]	; (8004c58 <HAL_I2C_Init+0x284>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	099b      	lsrs	r3, r3, #6
 8004aba:	3301      	adds	r3, #1
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ace:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	495c      	ldr	r1, [pc, #368]	; (8004c48 <HAL_I2C_Init+0x274>)
 8004ad8:	428b      	cmp	r3, r1
 8004ada:	d819      	bhi.n	8004b10 <HAL_I2C_Init+0x13c>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1e59      	subs	r1, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004af0:	400b      	ands	r3, r1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_I2C_Init+0x138>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1e59      	subs	r1, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b04:	3301      	adds	r3, #1
 8004b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b0a:	e051      	b.n	8004bb0 <HAL_I2C_Init+0x1dc>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	e04f      	b.n	8004bb0 <HAL_I2C_Init+0x1dc>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d111      	bne.n	8004b3c <HAL_I2C_Init+0x168>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1e58      	subs	r0, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	440b      	add	r3, r1
 8004b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	e012      	b.n	8004b62 <HAL_I2C_Init+0x18e>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1e58      	subs	r0, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6859      	ldr	r1, [r3, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	0099      	lsls	r1, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b52:	3301      	adds	r3, #1
 8004b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_Init+0x196>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e022      	b.n	8004bb0 <HAL_I2C_Init+0x1dc>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10e      	bne.n	8004b90 <HAL_I2C_Init+0x1bc>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1e58      	subs	r0, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6859      	ldr	r1, [r3, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	440b      	add	r3, r1
 8004b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b84:	3301      	adds	r3, #1
 8004b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8e:	e00f      	b.n	8004bb0 <HAL_I2C_Init+0x1dc>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1e58      	subs	r0, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6859      	ldr	r1, [r3, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	0099      	lsls	r1, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	6809      	ldr	r1, [r1, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6911      	ldr	r1, [r2, #16]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68d2      	ldr	r2, [r2, #12]
 8004bea:	4311      	orrs	r1, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	000186a0 	.word	0x000186a0
 8004c4c:	001e847f 	.word	0x001e847f
 8004c50:	003d08ff 	.word	0x003d08ff
 8004c54:	431bde83 	.word	0x431bde83
 8004c58:	10624dd3 	.word	0x10624dd3

08004c5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	461a      	mov	r2, r3
 8004c68:	460b      	mov	r3, r1
 8004c6a:	817b      	strh	r3, [r7, #10]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c70:	f7ff fb26 	bl	80042c0 <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	f040 80e0 	bne.w	8004e44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	2319      	movs	r3, #25
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	4970      	ldr	r1, [pc, #448]	; (8004e50 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f001 f90e 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e0d3      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_I2C_Master_Transmit+0x50>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e0cc      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1ea>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d007      	beq.n	8004cd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2221      	movs	r2, #33	; 0x21
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2210      	movs	r2, #16
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	893a      	ldrh	r2, [r7, #8]
 8004d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4a50      	ldr	r2, [pc, #320]	; (8004e54 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d14:	8979      	ldrh	r1, [r7, #10]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	6a3a      	ldr	r2, [r7, #32]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fdfa 	bl	8005914 <I2C_MasterRequestWrite>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e08d      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d40:	e066      	b.n	8004e10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	6a39      	ldr	r1, [r7, #32]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f001 f9cc 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00d      	beq.n	8004d6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d107      	bne.n	8004d6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e06b      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	781a      	ldrb	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d11b      	bne.n	8004de4 <HAL_I2C_Master_Transmit+0x188>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d017      	beq.n	8004de4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	6a39      	ldr	r1, [r7, #32]
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f001 f9c3 	bl	8006174 <I2C_WaitOnBTFFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00d      	beq.n	8004e10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d107      	bne.n	8004e0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e01a      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d194      	bne.n	8004d42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	00100002 	.word	0x00100002
 8004e54:	ffff0000 	.word	0xffff0000

08004e58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08c      	sub	sp, #48	; 0x30
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	461a      	mov	r2, r3
 8004e64:	460b      	mov	r3, r1
 8004e66:	817b      	strh	r3, [r7, #10]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e6c:	f7ff fa28 	bl	80042c0 <HAL_GetTick>
 8004e70:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	f040 8217 	bne.w	80052ae <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	2319      	movs	r3, #25
 8004e86:	2201      	movs	r2, #1
 8004e88:	497c      	ldr	r1, [pc, #496]	; (800507c <HAL_I2C_Master_Receive+0x224>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f001 f810 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004e96:	2302      	movs	r3, #2
 8004e98:	e20a      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_I2C_Master_Receive+0x50>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e203      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d007      	beq.n	8004ece <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004edc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2222      	movs	r2, #34	; 0x22
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2210      	movs	r2, #16
 8004eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	893a      	ldrh	r2, [r7, #8]
 8004efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4a5c      	ldr	r2, [pc, #368]	; (8005080 <HAL_I2C_Master_Receive+0x228>)
 8004f0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f10:	8979      	ldrh	r1, [r7, #10]
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fd7e 	bl	8005a18 <I2C_MasterRequestRead>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e1c4      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d113      	bne.n	8004f56 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	623b      	str	r3, [r7, #32]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	623b      	str	r3, [r7, #32]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	623b      	str	r3, [r7, #32]
 8004f42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e198      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d11b      	bne.n	8004f96 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	e178      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d11b      	bne.n	8004fd6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61bb      	str	r3, [r7, #24]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	e158      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ffc:	e144      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005002:	2b03      	cmp	r3, #3
 8005004:	f200 80f1 	bhi.w	80051ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500c:	2b01      	cmp	r3, #1
 800500e:	d123      	bne.n	8005058 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005012:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f001 f8f5 	bl	8006204 <I2C_WaitOnRXNEFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e145      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005056:	e117      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505c:	2b02      	cmp	r3, #2
 800505e:	d14e      	bne.n	80050fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	2200      	movs	r2, #0
 8005068:	4906      	ldr	r1, [pc, #24]	; (8005084 <HAL_I2C_Master_Receive+0x22c>)
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 ff20 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e11a      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
 800507a:	bf00      	nop
 800507c:	00100002 	.word	0x00100002
 8005080:	ffff0000 	.word	0xffff0000
 8005084:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050fc:	e0c4      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	2200      	movs	r2, #0
 8005106:	496c      	ldr	r1, [pc, #432]	; (80052b8 <HAL_I2C_Master_Receive+0x460>)
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 fed1 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0cb      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	2200      	movs	r2, #0
 8005162:	4955      	ldr	r1, [pc, #340]	; (80052b8 <HAL_I2C_Master_Receive+0x460>)
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 fea3 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e09d      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051e8:	e04e      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f001 f808 	bl	8006204 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e058      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b04      	cmp	r3, #4
 800523c:	d124      	bne.n	8005288 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005242:	2b03      	cmp	r3, #3
 8005244:	d107      	bne.n	8005256 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005254:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528c:	2b00      	cmp	r3, #0
 800528e:	f47f aeb6 	bne.w	8004ffe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e000      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80052ae:	2302      	movs	r3, #2
  }
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3728      	adds	r7, #40	; 0x28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	00010004 	.word	0x00010004

080052bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	4608      	mov	r0, r1
 80052c6:	4611      	mov	r1, r2
 80052c8:	461a      	mov	r2, r3
 80052ca:	4603      	mov	r3, r0
 80052cc:	817b      	strh	r3, [r7, #10]
 80052ce:	460b      	mov	r3, r1
 80052d0:	813b      	strh	r3, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052d6:	f7fe fff3 	bl	80042c0 <HAL_GetTick>
 80052da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	f040 80d9 	bne.w	800549c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	2319      	movs	r3, #25
 80052f0:	2201      	movs	r2, #1
 80052f2:	496d      	ldr	r1, [pc, #436]	; (80054a8 <HAL_I2C_Mem_Write+0x1ec>)
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 fddb 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005300:	2302      	movs	r3, #2
 8005302:	e0cc      	b.n	800549e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_I2C_Mem_Write+0x56>
 800530e:	2302      	movs	r3, #2
 8005310:	e0c5      	b.n	800549e <HAL_I2C_Mem_Write+0x1e2>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d007      	beq.n	8005338 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005346:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2221      	movs	r2, #33	; 0x21
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2240      	movs	r2, #64	; 0x40
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a3a      	ldr	r2, [r7, #32]
 8005362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005368:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a4d      	ldr	r2, [pc, #308]	; (80054ac <HAL_I2C_Mem_Write+0x1f0>)
 8005378:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800537a:	88f8      	ldrh	r0, [r7, #6]
 800537c:	893a      	ldrh	r2, [r7, #8]
 800537e:	8979      	ldrh	r1, [r7, #10]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	4603      	mov	r3, r0
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fc12 	bl	8005bb4 <I2C_RequestMemoryWrite>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d052      	beq.n	800543c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e081      	b.n	800549e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fea0 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d107      	bne.n	80053c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e06b      	b.n	800549e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	781a      	ldrb	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b04      	cmp	r3, #4
 8005402:	d11b      	bne.n	800543c <HAL_I2C_Mem_Write+0x180>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005408:	2b00      	cmp	r3, #0
 800540a:	d017      	beq.n	800543c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1aa      	bne.n	800539a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fe93 	bl	8006174 <I2C_WaitOnBTFFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00d      	beq.n	8005470 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	2b04      	cmp	r3, #4
 800545a:	d107      	bne.n	800546c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e016      	b.n	800549e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	e000      	b.n	800549e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800549c:	2302      	movs	r3, #2
  }
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	00100002 	.word	0x00100002
 80054ac:	ffff0000 	.word	0xffff0000

080054b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	; 0x30
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	4608      	mov	r0, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	461a      	mov	r2, r3
 80054be:	4603      	mov	r3, r0
 80054c0:	817b      	strh	r3, [r7, #10]
 80054c2:	460b      	mov	r3, r1
 80054c4:	813b      	strh	r3, [r7, #8]
 80054c6:	4613      	mov	r3, r2
 80054c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054ca:	f7fe fef9 	bl	80042c0 <HAL_GetTick>
 80054ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b20      	cmp	r3, #32
 80054da:	f040 8214 	bne.w	8005906 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	2319      	movs	r3, #25
 80054e4:	2201      	movs	r2, #1
 80054e6:	497b      	ldr	r1, [pc, #492]	; (80056d4 <HAL_I2C_Mem_Read+0x224>)
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 fce1 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054f4:	2302      	movs	r3, #2
 80054f6:	e207      	b.n	8005908 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_I2C_Mem_Read+0x56>
 8005502:	2302      	movs	r3, #2
 8005504:	e200      	b.n	8005908 <HAL_I2C_Mem_Read+0x458>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b01      	cmp	r3, #1
 800551a:	d007      	beq.n	800552c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0201 	orr.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800553a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2222      	movs	r2, #34	; 0x22
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2240      	movs	r2, #64	; 0x40
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800555c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a5b      	ldr	r2, [pc, #364]	; (80056d8 <HAL_I2C_Mem_Read+0x228>)
 800556c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800556e:	88f8      	ldrh	r0, [r7, #6]
 8005570:	893a      	ldrh	r2, [r7, #8]
 8005572:	8979      	ldrh	r1, [r7, #10]
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	4603      	mov	r3, r0
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 fbae 	bl	8005ce0 <I2C_RequestMemoryRead>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e1bc      	b.n	8005908 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d113      	bne.n	80055be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005596:	2300      	movs	r3, #0
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	623b      	str	r3, [r7, #32]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	623b      	str	r3, [r7, #32]
 80055aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	e190      	b.n	80058e0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d11b      	bne.n	80055fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e170      	b.n	80058e0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005602:	2b02      	cmp	r3, #2
 8005604:	d11b      	bne.n	800563e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005614:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	e150      	b.n	80058e0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005654:	e144      	b.n	80058e0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565a:	2b03      	cmp	r3, #3
 800565c:	f200 80f1 	bhi.w	8005842 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005664:	2b01      	cmp	r3, #1
 8005666:	d123      	bne.n	80056b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 fdc9 	bl	8006204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e145      	b.n	8005908 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056ae:	e117      	b.n	80058e0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d14e      	bne.n	8005756 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	2200      	movs	r2, #0
 80056c0:	4906      	ldr	r1, [pc, #24]	; (80056dc <HAL_I2C_Mem_Read+0x22c>)
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fbf4 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e11a      	b.n	8005908 <HAL_I2C_Mem_Read+0x458>
 80056d2:	bf00      	nop
 80056d4:	00100002 	.word	0x00100002
 80056d8:	ffff0000 	.word	0xffff0000
 80056dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	b2d2      	uxtb	r2, r2
 800572e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005754:	e0c4      	b.n	80058e0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	2200      	movs	r2, #0
 800575e:	496c      	ldr	r1, [pc, #432]	; (8005910 <HAL_I2C_Mem_Read+0x460>)
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fba5 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e0cb      	b.n	8005908 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800577e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	2200      	movs	r2, #0
 80057ba:	4955      	ldr	r1, [pc, #340]	; (8005910 <HAL_I2C_Mem_Read+0x460>)
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fb77 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e09d      	b.n	8005908 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005840:	e04e      	b.n	80058e0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005844:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 fcdc 	bl	8006204 <I2C_WaitOnRXNEFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e058      	b.n	8005908 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b04      	cmp	r3, #4
 8005894:	d124      	bne.n	80058e0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589a:	2b03      	cmp	r3, #3
 800589c:	d107      	bne.n	80058ae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f47f aeb6 	bne.w	8005656 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e000      	b.n	8005908 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005906:	2302      	movs	r3, #2
  }
}
 8005908:	4618      	mov	r0, r3
 800590a:	3728      	adds	r7, #40	; 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	00010004 	.word	0x00010004

08005914 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af02      	add	r7, sp, #8
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	607a      	str	r2, [r7, #4]
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	460b      	mov	r3, r1
 8005922:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d006      	beq.n	800593e <I2C_MasterRequestWrite+0x2a>
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d003      	beq.n	800593e <I2C_MasterRequestWrite+0x2a>
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800593c:	d108      	bne.n	8005950 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	e00b      	b.n	8005968 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	2b12      	cmp	r3, #18
 8005956:	d107      	bne.n	8005968 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005966:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 fa9b 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00d      	beq.n	800599c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598e:	d103      	bne.n	8005998 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e035      	b.n	8005a08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059a4:	d108      	bne.n	80059b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059a6:	897b      	ldrh	r3, [r7, #10]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059b4:	611a      	str	r2, [r3, #16]
 80059b6:	e01b      	b.n	80059f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059b8:	897b      	ldrh	r3, [r7, #10]
 80059ba:	11db      	asrs	r3, r3, #7
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f003 0306 	and.w	r3, r3, #6
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f063 030f 	orn	r3, r3, #15
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	490e      	ldr	r1, [pc, #56]	; (8005a10 <I2C_MasterRequestWrite+0xfc>)
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 fae4 	bl	8005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e010      	b.n	8005a08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059e6:	897b      	ldrh	r3, [r7, #10]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	4907      	ldr	r1, [pc, #28]	; (8005a14 <I2C_MasterRequestWrite+0x100>)
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 fad4 	bl	8005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	00010008 	.word	0x00010008
 8005a14:	00010002 	.word	0x00010002

08005a18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	460b      	mov	r3, r1
 8005a26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d006      	beq.n	8005a52 <I2C_MasterRequestRead+0x3a>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d003      	beq.n	8005a52 <I2C_MasterRequestRead+0x3a>
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a50:	d108      	bne.n	8005a64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	e00b      	b.n	8005a7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	2b11      	cmp	r3, #17
 8005a6a:	d107      	bne.n	8005a7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fa11 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00d      	beq.n	8005ab0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa2:	d103      	bne.n	8005aac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e079      	b.n	8005ba4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ab8:	d108      	bne.n	8005acc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005aba:	897b      	ldrh	r3, [r7, #10]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	611a      	str	r2, [r3, #16]
 8005aca:	e05f      	b.n	8005b8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005acc:	897b      	ldrh	r3, [r7, #10]
 8005ace:	11db      	asrs	r3, r3, #7
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	f003 0306 	and.w	r3, r3, #6
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	f063 030f 	orn	r3, r3, #15
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	4930      	ldr	r1, [pc, #192]	; (8005bac <I2C_MasterRequestRead+0x194>)
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fa5a 	bl	8005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e054      	b.n	8005ba4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005afa:	897b      	ldrh	r3, [r7, #10]
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	4929      	ldr	r1, [pc, #164]	; (8005bb0 <I2C_MasterRequestRead+0x198>)
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fa4a 	bl	8005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e044      	b.n	8005ba4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f9af 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00d      	beq.n	8005b74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b66:	d103      	bne.n	8005b70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e017      	b.n	8005ba4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b74:	897b      	ldrh	r3, [r7, #10]
 8005b76:	11db      	asrs	r3, r3, #7
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f003 0306 	and.w	r3, r3, #6
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f063 030e 	orn	r3, r3, #14
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	4907      	ldr	r1, [pc, #28]	; (8005bb0 <I2C_MasterRequestRead+0x198>)
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fa06 	bl	8005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	00010008 	.word	0x00010008
 8005bb0:	00010002 	.word	0x00010002

08005bb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	817b      	strh	r3, [r7, #10]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	813b      	strh	r3, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f960 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00d      	beq.n	8005c12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c04:	d103      	bne.n	8005c0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e05f      	b.n	8005cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c12:	897b      	ldrh	r3, [r7, #10]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	6a3a      	ldr	r2, [r7, #32]
 8005c26:	492d      	ldr	r1, [pc, #180]	; (8005cdc <I2C_RequestMemoryWrite+0x128>)
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f9bb 	bl	8005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e04c      	b.n	8005cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c50:	6a39      	ldr	r1, [r7, #32]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fa46 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00d      	beq.n	8005c7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d107      	bne.n	8005c76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e02b      	b.n	8005cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d105      	bne.n	8005c8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c80:	893b      	ldrh	r3, [r7, #8]
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	611a      	str	r2, [r3, #16]
 8005c8a:	e021      	b.n	8005cd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c8c:	893b      	ldrh	r3, [r7, #8]
 8005c8e:	0a1b      	lsrs	r3, r3, #8
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9c:	6a39      	ldr	r1, [r7, #32]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fa20 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00d      	beq.n	8005cc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d107      	bne.n	8005cc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e005      	b.n	8005cd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cc6:	893b      	ldrh	r3, [r7, #8]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	00010002 	.word	0x00010002

08005ce0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b088      	sub	sp, #32
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	4608      	mov	r0, r1
 8005cea:	4611      	mov	r1, r2
 8005cec:	461a      	mov	r2, r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	817b      	strh	r3, [r7, #10]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	813b      	strh	r3, [r7, #8]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f8c2 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00d      	beq.n	8005d4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d40:	d103      	bne.n	8005d4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e0aa      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d4e:	897b      	ldrh	r3, [r7, #10]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	6a3a      	ldr	r2, [r7, #32]
 8005d62:	4952      	ldr	r1, [pc, #328]	; (8005eac <I2C_RequestMemoryRead+0x1cc>)
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f91d 	bl	8005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e097      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8c:	6a39      	ldr	r1, [r7, #32]
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f9a8 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00d      	beq.n	8005db6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d107      	bne.n	8005db2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e076      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d105      	bne.n	8005dc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dbc:	893b      	ldrh	r3, [r7, #8]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	611a      	str	r2, [r3, #16]
 8005dc6:	e021      	b.n	8005e0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005dc8:	893b      	ldrh	r3, [r7, #8]
 8005dca:	0a1b      	lsrs	r3, r3, #8
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd8:	6a39      	ldr	r1, [r7, #32]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f982 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00d      	beq.n	8005e02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d107      	bne.n	8005dfe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e050      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e02:	893b      	ldrh	r3, [r7, #8]
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0e:	6a39      	ldr	r1, [r7, #32]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f967 	bl	80060e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00d      	beq.n	8005e38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d107      	bne.n	8005e34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e035      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f82b 	bl	8005eb0 <I2C_WaitOnFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00d      	beq.n	8005e7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6e:	d103      	bne.n	8005e78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e013      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e7c:	897b      	ldrh	r3, [r7, #10]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f043 0301 	orr.w	r3, r3, #1
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	6a3a      	ldr	r2, [r7, #32]
 8005e90:	4906      	ldr	r1, [pc, #24]	; (8005eac <I2C_RequestMemoryRead+0x1cc>)
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f886 	bl	8005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	00010002 	.word	0x00010002

08005eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ec0:	e048      	b.n	8005f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d044      	beq.n	8005f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eca:	f7fe f9f9 	bl	80042c0 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d302      	bcc.n	8005ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d139      	bne.n	8005f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	0c1b      	lsrs	r3, r3, #16
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d10d      	bne.n	8005f06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	43da      	mvns	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bf0c      	ite	eq
 8005efc:	2301      	moveq	r3, #1
 8005efe:	2300      	movne	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	e00c      	b.n	8005f20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	43da      	mvns	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4013      	ands	r3, r2
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d116      	bne.n	8005f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	f043 0220 	orr.w	r2, r3, #32
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e023      	b.n	8005f9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	0c1b      	lsrs	r3, r3, #16
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d10d      	bne.n	8005f7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	43da      	mvns	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf0c      	ite	eq
 8005f70:	2301      	moveq	r3, #1
 8005f72:	2300      	movne	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	e00c      	b.n	8005f94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	43da      	mvns	r2, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4013      	ands	r3, r2
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d093      	beq.n	8005ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fb2:	e071      	b.n	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc2:	d123      	bne.n	800600c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	f043 0204 	orr.w	r2, r3, #4
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e067      	b.n	80060dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d041      	beq.n	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006014:	f7fe f954 	bl	80042c0 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d136      	bne.n	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	0c1b      	lsrs	r3, r3, #16
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d10c      	bne.n	800604e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	43da      	mvns	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4013      	ands	r3, r2
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	bf14      	ite	ne
 8006046:	2301      	movne	r3, #1
 8006048:	2300      	moveq	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	e00b      	b.n	8006066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	43da      	mvns	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	4013      	ands	r3, r2
 800605a:	b29b      	uxth	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	bf14      	ite	ne
 8006060:	2301      	movne	r3, #1
 8006062:	2300      	moveq	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d016      	beq.n	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	f043 0220 	orr.w	r2, r3, #32
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e021      	b.n	80060dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	0c1b      	lsrs	r3, r3, #16
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d10c      	bne.n	80060bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	43da      	mvns	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4013      	ands	r3, r2
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	e00b      	b.n	80060d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	43da      	mvns	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4013      	ands	r3, r2
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bf14      	ite	ne
 80060ce:	2301      	movne	r3, #1
 80060d0:	2300      	moveq	r3, #0
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f47f af6d 	bne.w	8005fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060f0:	e034      	b.n	800615c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f8e3 	bl	80062be <I2C_IsAcknowledgeFailed>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e034      	b.n	800616c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006108:	d028      	beq.n	800615c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610a:	f7fe f8d9 	bl	80042c0 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	429a      	cmp	r2, r3
 8006118:	d302      	bcc.n	8006120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d11d      	bne.n	800615c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612a:	2b80      	cmp	r3, #128	; 0x80
 800612c:	d016      	beq.n	800615c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	f043 0220 	orr.w	r2, r3, #32
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e007      	b.n	800616c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006166:	2b80      	cmp	r3, #128	; 0x80
 8006168:	d1c3      	bne.n	80060f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006180:	e034      	b.n	80061ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f89b 	bl	80062be <I2C_IsAcknowledgeFailed>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e034      	b.n	80061fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d028      	beq.n	80061ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619a:	f7fe f891 	bl	80042c0 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d302      	bcc.n	80061b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d11d      	bne.n	80061ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d016      	beq.n	80061ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	f043 0220 	orr.w	r2, r3, #32
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e007      	b.n	80061fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d1c3      	bne.n	8006182 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006210:	e049      	b.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	f003 0310 	and.w	r3, r3, #16
 800621c:	2b10      	cmp	r3, #16
 800621e:	d119      	bne.n	8006254 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0210 	mvn.w	r2, #16
 8006228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e030      	b.n	80062b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006254:	f7fe f834 	bl	80042c0 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	d302      	bcc.n	800626a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d11d      	bne.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b40      	cmp	r3, #64	; 0x40
 8006276:	d016      	beq.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f043 0220 	orr.w	r2, r3, #32
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e007      	b.n	80062b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	d1ae      	bne.n	8006212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d4:	d11b      	bne.n	800630e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	f043 0204 	orr.w	r2, r3, #4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e267      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d075      	beq.n	8006426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800633a:	4b88      	ldr	r3, [pc, #544]	; (800655c <HAL_RCC_OscConfig+0x240>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 030c 	and.w	r3, r3, #12
 8006342:	2b04      	cmp	r3, #4
 8006344:	d00c      	beq.n	8006360 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006346:	4b85      	ldr	r3, [pc, #532]	; (800655c <HAL_RCC_OscConfig+0x240>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800634e:	2b08      	cmp	r3, #8
 8006350:	d112      	bne.n	8006378 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006352:	4b82      	ldr	r3, [pc, #520]	; (800655c <HAL_RCC_OscConfig+0x240>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800635e:	d10b      	bne.n	8006378 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006360:	4b7e      	ldr	r3, [pc, #504]	; (800655c <HAL_RCC_OscConfig+0x240>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d05b      	beq.n	8006424 <HAL_RCC_OscConfig+0x108>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d157      	bne.n	8006424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e242      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006380:	d106      	bne.n	8006390 <HAL_RCC_OscConfig+0x74>
 8006382:	4b76      	ldr	r3, [pc, #472]	; (800655c <HAL_RCC_OscConfig+0x240>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a75      	ldr	r2, [pc, #468]	; (800655c <HAL_RCC_OscConfig+0x240>)
 8006388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e01d      	b.n	80063cc <HAL_RCC_OscConfig+0xb0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006398:	d10c      	bne.n	80063b4 <HAL_RCC_OscConfig+0x98>
 800639a:	4b70      	ldr	r3, [pc, #448]	; (800655c <HAL_RCC_OscConfig+0x240>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a6f      	ldr	r2, [pc, #444]	; (800655c <HAL_RCC_OscConfig+0x240>)
 80063a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	4b6d      	ldr	r3, [pc, #436]	; (800655c <HAL_RCC_OscConfig+0x240>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a6c      	ldr	r2, [pc, #432]	; (800655c <HAL_RCC_OscConfig+0x240>)
 80063ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	e00b      	b.n	80063cc <HAL_RCC_OscConfig+0xb0>
 80063b4:	4b69      	ldr	r3, [pc, #420]	; (800655c <HAL_RCC_OscConfig+0x240>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a68      	ldr	r2, [pc, #416]	; (800655c <HAL_RCC_OscConfig+0x240>)
 80063ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	4b66      	ldr	r3, [pc, #408]	; (800655c <HAL_RCC_OscConfig+0x240>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a65      	ldr	r2, [pc, #404]	; (800655c <HAL_RCC_OscConfig+0x240>)
 80063c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d013      	beq.n	80063fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d4:	f7fd ff74 	bl	80042c0 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063dc:	f7fd ff70 	bl	80042c0 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b64      	cmp	r3, #100	; 0x64
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e207      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ee:	4b5b      	ldr	r3, [pc, #364]	; (800655c <HAL_RCC_OscConfig+0x240>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0xc0>
 80063fa:	e014      	b.n	8006426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063fc:	f7fd ff60 	bl	80042c0 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006404:	f7fd ff5c 	bl	80042c0 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b64      	cmp	r3, #100	; 0x64
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e1f3      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006416:	4b51      	ldr	r3, [pc, #324]	; (800655c <HAL_RCC_OscConfig+0x240>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f0      	bne.n	8006404 <HAL_RCC_OscConfig+0xe8>
 8006422:	e000      	b.n	8006426 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d063      	beq.n	80064fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006432:	4b4a      	ldr	r3, [pc, #296]	; (800655c <HAL_RCC_OscConfig+0x240>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 030c 	and.w	r3, r3, #12
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800643e:	4b47      	ldr	r3, [pc, #284]	; (800655c <HAL_RCC_OscConfig+0x240>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006446:	2b08      	cmp	r3, #8
 8006448:	d11c      	bne.n	8006484 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800644a:	4b44      	ldr	r3, [pc, #272]	; (800655c <HAL_RCC_OscConfig+0x240>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d116      	bne.n	8006484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006456:	4b41      	ldr	r3, [pc, #260]	; (800655c <HAL_RCC_OscConfig+0x240>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d005      	beq.n	800646e <HAL_RCC_OscConfig+0x152>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d001      	beq.n	800646e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e1c7      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800646e:	4b3b      	ldr	r3, [pc, #236]	; (800655c <HAL_RCC_OscConfig+0x240>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	4937      	ldr	r1, [pc, #220]	; (800655c <HAL_RCC_OscConfig+0x240>)
 800647e:	4313      	orrs	r3, r2
 8006480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006482:	e03a      	b.n	80064fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d020      	beq.n	80064ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800648c:	4b34      	ldr	r3, [pc, #208]	; (8006560 <HAL_RCC_OscConfig+0x244>)
 800648e:	2201      	movs	r2, #1
 8006490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006492:	f7fd ff15 	bl	80042c0 <HAL_GetTick>
 8006496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006498:	e008      	b.n	80064ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800649a:	f7fd ff11 	bl	80042c0 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d901      	bls.n	80064ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e1a8      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ac:	4b2b      	ldr	r3, [pc, #172]	; (800655c <HAL_RCC_OscConfig+0x240>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0f0      	beq.n	800649a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b8:	4b28      	ldr	r3, [pc, #160]	; (800655c <HAL_RCC_OscConfig+0x240>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	4925      	ldr	r1, [pc, #148]	; (800655c <HAL_RCC_OscConfig+0x240>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	600b      	str	r3, [r1, #0]
 80064cc:	e015      	b.n	80064fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ce:	4b24      	ldr	r3, [pc, #144]	; (8006560 <HAL_RCC_OscConfig+0x244>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fd fef4 	bl	80042c0 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064dc:	f7fd fef0 	bl	80042c0 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e187      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ee:	4b1b      	ldr	r3, [pc, #108]	; (800655c <HAL_RCC_OscConfig+0x240>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f0      	bne.n	80064dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d036      	beq.n	8006574 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d016      	beq.n	800653c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800650e:	4b15      	ldr	r3, [pc, #84]	; (8006564 <HAL_RCC_OscConfig+0x248>)
 8006510:	2201      	movs	r2, #1
 8006512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006514:	f7fd fed4 	bl	80042c0 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800651c:	f7fd fed0 	bl	80042c0 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e167      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800652e:	4b0b      	ldr	r3, [pc, #44]	; (800655c <HAL_RCC_OscConfig+0x240>)
 8006530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0f0      	beq.n	800651c <HAL_RCC_OscConfig+0x200>
 800653a:	e01b      	b.n	8006574 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800653c:	4b09      	ldr	r3, [pc, #36]	; (8006564 <HAL_RCC_OscConfig+0x248>)
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006542:	f7fd febd 	bl	80042c0 <HAL_GetTick>
 8006546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006548:	e00e      	b.n	8006568 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800654a:	f7fd feb9 	bl	80042c0 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d907      	bls.n	8006568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e150      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
 800655c:	40023800 	.word	0x40023800
 8006560:	42470000 	.word	0x42470000
 8006564:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006568:	4b88      	ldr	r3, [pc, #544]	; (800678c <HAL_RCC_OscConfig+0x470>)
 800656a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1ea      	bne.n	800654a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 8097 	beq.w	80066b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006582:	2300      	movs	r3, #0
 8006584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006586:	4b81      	ldr	r3, [pc, #516]	; (800678c <HAL_RCC_OscConfig+0x470>)
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10f      	bne.n	80065b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006592:	2300      	movs	r3, #0
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	4b7d      	ldr	r3, [pc, #500]	; (800678c <HAL_RCC_OscConfig+0x470>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	4a7c      	ldr	r2, [pc, #496]	; (800678c <HAL_RCC_OscConfig+0x470>)
 800659c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a0:	6413      	str	r3, [r2, #64]	; 0x40
 80065a2:	4b7a      	ldr	r3, [pc, #488]	; (800678c <HAL_RCC_OscConfig+0x470>)
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065aa:	60bb      	str	r3, [r7, #8]
 80065ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ae:	2301      	movs	r3, #1
 80065b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b2:	4b77      	ldr	r3, [pc, #476]	; (8006790 <HAL_RCC_OscConfig+0x474>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d118      	bne.n	80065f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065be:	4b74      	ldr	r3, [pc, #464]	; (8006790 <HAL_RCC_OscConfig+0x474>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a73      	ldr	r2, [pc, #460]	; (8006790 <HAL_RCC_OscConfig+0x474>)
 80065c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ca:	f7fd fe79 	bl	80042c0 <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065d2:	f7fd fe75 	bl	80042c0 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e10c      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e4:	4b6a      	ldr	r3, [pc, #424]	; (8006790 <HAL_RCC_OscConfig+0x474>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f0      	beq.n	80065d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d106      	bne.n	8006606 <HAL_RCC_OscConfig+0x2ea>
 80065f8:	4b64      	ldr	r3, [pc, #400]	; (800678c <HAL_RCC_OscConfig+0x470>)
 80065fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fc:	4a63      	ldr	r2, [pc, #396]	; (800678c <HAL_RCC_OscConfig+0x470>)
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	6713      	str	r3, [r2, #112]	; 0x70
 8006604:	e01c      	b.n	8006640 <HAL_RCC_OscConfig+0x324>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	2b05      	cmp	r3, #5
 800660c:	d10c      	bne.n	8006628 <HAL_RCC_OscConfig+0x30c>
 800660e:	4b5f      	ldr	r3, [pc, #380]	; (800678c <HAL_RCC_OscConfig+0x470>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	4a5e      	ldr	r2, [pc, #376]	; (800678c <HAL_RCC_OscConfig+0x470>)
 8006614:	f043 0304 	orr.w	r3, r3, #4
 8006618:	6713      	str	r3, [r2, #112]	; 0x70
 800661a:	4b5c      	ldr	r3, [pc, #368]	; (800678c <HAL_RCC_OscConfig+0x470>)
 800661c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661e:	4a5b      	ldr	r2, [pc, #364]	; (800678c <HAL_RCC_OscConfig+0x470>)
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	6713      	str	r3, [r2, #112]	; 0x70
 8006626:	e00b      	b.n	8006640 <HAL_RCC_OscConfig+0x324>
 8006628:	4b58      	ldr	r3, [pc, #352]	; (800678c <HAL_RCC_OscConfig+0x470>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662c:	4a57      	ldr	r2, [pc, #348]	; (800678c <HAL_RCC_OscConfig+0x470>)
 800662e:	f023 0301 	bic.w	r3, r3, #1
 8006632:	6713      	str	r3, [r2, #112]	; 0x70
 8006634:	4b55      	ldr	r3, [pc, #340]	; (800678c <HAL_RCC_OscConfig+0x470>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	4a54      	ldr	r2, [pc, #336]	; (800678c <HAL_RCC_OscConfig+0x470>)
 800663a:	f023 0304 	bic.w	r3, r3, #4
 800663e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d015      	beq.n	8006674 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006648:	f7fd fe3a 	bl	80042c0 <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800664e:	e00a      	b.n	8006666 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006650:	f7fd fe36 	bl	80042c0 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	f241 3288 	movw	r2, #5000	; 0x1388
 800665e:	4293      	cmp	r3, r2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e0cb      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006666:	4b49      	ldr	r3, [pc, #292]	; (800678c <HAL_RCC_OscConfig+0x470>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0ee      	beq.n	8006650 <HAL_RCC_OscConfig+0x334>
 8006672:	e014      	b.n	800669e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006674:	f7fd fe24 	bl	80042c0 <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800667a:	e00a      	b.n	8006692 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800667c:	f7fd fe20 	bl	80042c0 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	f241 3288 	movw	r2, #5000	; 0x1388
 800668a:	4293      	cmp	r3, r2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e0b5      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006692:	4b3e      	ldr	r3, [pc, #248]	; (800678c <HAL_RCC_OscConfig+0x470>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1ee      	bne.n	800667c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800669e:	7dfb      	ldrb	r3, [r7, #23]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d105      	bne.n	80066b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066a4:	4b39      	ldr	r3, [pc, #228]	; (800678c <HAL_RCC_OscConfig+0x470>)
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	4a38      	ldr	r2, [pc, #224]	; (800678c <HAL_RCC_OscConfig+0x470>)
 80066aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80a1 	beq.w	80067fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066ba:	4b34      	ldr	r3, [pc, #208]	; (800678c <HAL_RCC_OscConfig+0x470>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 030c 	and.w	r3, r3, #12
 80066c2:	2b08      	cmp	r3, #8
 80066c4:	d05c      	beq.n	8006780 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d141      	bne.n	8006752 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ce:	4b31      	ldr	r3, [pc, #196]	; (8006794 <HAL_RCC_OscConfig+0x478>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d4:	f7fd fdf4 	bl	80042c0 <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066dc:	f7fd fdf0 	bl	80042c0 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e087      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ee:	4b27      	ldr	r3, [pc, #156]	; (800678c <HAL_RCC_OscConfig+0x470>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f0      	bne.n	80066dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69da      	ldr	r2, [r3, #28]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	019b      	lsls	r3, r3, #6
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	085b      	lsrs	r3, r3, #1
 8006712:	3b01      	subs	r3, #1
 8006714:	041b      	lsls	r3, r3, #16
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	061b      	lsls	r3, r3, #24
 800671e:	491b      	ldr	r1, [pc, #108]	; (800678c <HAL_RCC_OscConfig+0x470>)
 8006720:	4313      	orrs	r3, r2
 8006722:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006724:	4b1b      	ldr	r3, [pc, #108]	; (8006794 <HAL_RCC_OscConfig+0x478>)
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800672a:	f7fd fdc9 	bl	80042c0 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006732:	f7fd fdc5 	bl	80042c0 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e05c      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006744:	4b11      	ldr	r3, [pc, #68]	; (800678c <HAL_RCC_OscConfig+0x470>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f0      	beq.n	8006732 <HAL_RCC_OscConfig+0x416>
 8006750:	e054      	b.n	80067fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006752:	4b10      	ldr	r3, [pc, #64]	; (8006794 <HAL_RCC_OscConfig+0x478>)
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006758:	f7fd fdb2 	bl	80042c0 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006760:	f7fd fdae 	bl	80042c0 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e045      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006772:	4b06      	ldr	r3, [pc, #24]	; (800678c <HAL_RCC_OscConfig+0x470>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x444>
 800677e:	e03d      	b.n	80067fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d107      	bne.n	8006798 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e038      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
 800678c:	40023800 	.word	0x40023800
 8006790:	40007000 	.word	0x40007000
 8006794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006798:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <HAL_RCC_OscConfig+0x4ec>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d028      	beq.n	80067f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d121      	bne.n	80067f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067be:	429a      	cmp	r2, r3
 80067c0:	d11a      	bne.n	80067f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067c8:	4013      	ands	r3, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d111      	bne.n	80067f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	085b      	lsrs	r3, r3, #1
 80067e0:	3b01      	subs	r3, #1
 80067e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d107      	bne.n	80067f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d001      	beq.n	80067fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e000      	b.n	80067fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	40023800 	.word	0x40023800

0800680c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0cc      	b.n	80069ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006820:	4b68      	ldr	r3, [pc, #416]	; (80069c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d90c      	bls.n	8006848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800682e:	4b65      	ldr	r3, [pc, #404]	; (80069c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006836:	4b63      	ldr	r3, [pc, #396]	; (80069c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	429a      	cmp	r2, r3
 8006842:	d001      	beq.n	8006848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e0b8      	b.n	80069ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d020      	beq.n	8006896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006860:	4b59      	ldr	r3, [pc, #356]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4a58      	ldr	r2, [pc, #352]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800686a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006878:	4b53      	ldr	r3, [pc, #332]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	4a52      	ldr	r2, [pc, #328]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006884:	4b50      	ldr	r3, [pc, #320]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	494d      	ldr	r1, [pc, #308]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006892:	4313      	orrs	r3, r2
 8006894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d044      	beq.n	800692c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d107      	bne.n	80068ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068aa:	4b47      	ldr	r3, [pc, #284]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d119      	bne.n	80068ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e07f      	b.n	80069ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d003      	beq.n	80068ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d107      	bne.n	80068da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ca:	4b3f      	ldr	r3, [pc, #252]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e06f      	b.n	80069ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068da:	4b3b      	ldr	r3, [pc, #236]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e067      	b.n	80069ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068ea:	4b37      	ldr	r3, [pc, #220]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f023 0203 	bic.w	r2, r3, #3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	4934      	ldr	r1, [pc, #208]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068fc:	f7fd fce0 	bl	80042c0 <HAL_GetTick>
 8006900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006902:	e00a      	b.n	800691a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006904:	f7fd fcdc 	bl	80042c0 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006912:	4293      	cmp	r3, r2
 8006914:	d901      	bls.n	800691a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e04f      	b.n	80069ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800691a:	4b2b      	ldr	r3, [pc, #172]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 020c 	and.w	r2, r3, #12
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	429a      	cmp	r2, r3
 800692a:	d1eb      	bne.n	8006904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800692c:	4b25      	ldr	r3, [pc, #148]	; (80069c4 <HAL_RCC_ClockConfig+0x1b8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d20c      	bcs.n	8006954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800693a:	4b22      	ldr	r3, [pc, #136]	; (80069c4 <HAL_RCC_ClockConfig+0x1b8>)
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006942:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d001      	beq.n	8006954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e032      	b.n	80069ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d008      	beq.n	8006972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006960:	4b19      	ldr	r3, [pc, #100]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	4916      	ldr	r1, [pc, #88]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 800696e:	4313      	orrs	r3, r2
 8006970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0308 	and.w	r3, r3, #8
 800697a:	2b00      	cmp	r3, #0
 800697c:	d009      	beq.n	8006992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800697e:	4b12      	ldr	r3, [pc, #72]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	00db      	lsls	r3, r3, #3
 800698c:	490e      	ldr	r1, [pc, #56]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 800698e:	4313      	orrs	r3, r2
 8006990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006992:	f000 f821 	bl	80069d8 <HAL_RCC_GetSysClockFreq>
 8006996:	4602      	mov	r2, r0
 8006998:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <HAL_RCC_ClockConfig+0x1bc>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	091b      	lsrs	r3, r3, #4
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	490a      	ldr	r1, [pc, #40]	; (80069cc <HAL_RCC_ClockConfig+0x1c0>)
 80069a4:	5ccb      	ldrb	r3, [r1, r3]
 80069a6:	fa22 f303 	lsr.w	r3, r2, r3
 80069aa:	4a09      	ldr	r2, [pc, #36]	; (80069d0 <HAL_RCC_ClockConfig+0x1c4>)
 80069ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069ae:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <HAL_RCC_ClockConfig+0x1c8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fd fc40 	bl	8004238 <HAL_InitTick>

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	40023c00 	.word	0x40023c00
 80069c8:	40023800 	.word	0x40023800
 80069cc:	0800c6a8 	.word	0x0800c6a8
 80069d0:	20000000 	.word	0x20000000
 80069d4:	20000004 	.word	0x20000004

080069d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069dc:	b094      	sub	sp, #80	; 0x50
 80069de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	647b      	str	r3, [r7, #68]	; 0x44
 80069e4:	2300      	movs	r3, #0
 80069e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069e8:	2300      	movs	r3, #0
 80069ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069f0:	4b79      	ldr	r3, [pc, #484]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 030c 	and.w	r3, r3, #12
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d00d      	beq.n	8006a18 <HAL_RCC_GetSysClockFreq+0x40>
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	f200 80e1 	bhi.w	8006bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <HAL_RCC_GetSysClockFreq+0x34>
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d003      	beq.n	8006a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a0a:	e0db      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a0c:	4b73      	ldr	r3, [pc, #460]	; (8006bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8006a0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a10:	e0db      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a12:	4b73      	ldr	r3, [pc, #460]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a16:	e0d8      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a18:	4b6f      	ldr	r3, [pc, #444]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a22:	4b6d      	ldr	r3, [pc, #436]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d063      	beq.n	8006af6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a2e:	4b6a      	ldr	r3, [pc, #424]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	099b      	lsrs	r3, r3, #6
 8006a34:	2200      	movs	r2, #0
 8006a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a40:	633b      	str	r3, [r7, #48]	; 0x30
 8006a42:	2300      	movs	r3, #0
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
 8006a46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	462b      	mov	r3, r5
 8006a4e:	f04f 0000 	mov.w	r0, #0
 8006a52:	f04f 0100 	mov.w	r1, #0
 8006a56:	0159      	lsls	r1, r3, #5
 8006a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a5c:	0150      	lsls	r0, r2, #5
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4621      	mov	r1, r4
 8006a64:	1a51      	subs	r1, r2, r1
 8006a66:	6139      	str	r1, [r7, #16]
 8006a68:	4629      	mov	r1, r5
 8006a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	f04f 0200 	mov.w	r2, #0
 8006a74:	f04f 0300 	mov.w	r3, #0
 8006a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a7c:	4659      	mov	r1, fp
 8006a7e:	018b      	lsls	r3, r1, #6
 8006a80:	4651      	mov	r1, sl
 8006a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a86:	4651      	mov	r1, sl
 8006a88:	018a      	lsls	r2, r1, #6
 8006a8a:	4651      	mov	r1, sl
 8006a8c:	ebb2 0801 	subs.w	r8, r2, r1
 8006a90:	4659      	mov	r1, fp
 8006a92:	eb63 0901 	sbc.w	r9, r3, r1
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006aaa:	4690      	mov	r8, r2
 8006aac:	4699      	mov	r9, r3
 8006aae:	4623      	mov	r3, r4
 8006ab0:	eb18 0303 	adds.w	r3, r8, r3
 8006ab4:	60bb      	str	r3, [r7, #8]
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	eb49 0303 	adc.w	r3, r9, r3
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006aca:	4629      	mov	r1, r5
 8006acc:	024b      	lsls	r3, r1, #9
 8006ace:	4621      	mov	r1, r4
 8006ad0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	024a      	lsls	r2, r1, #9
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4619      	mov	r1, r3
 8006adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ade:	2200      	movs	r2, #0
 8006ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ae4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ae8:	f7fa f8c6 	bl	8000c78 <__aeabi_uldivmod>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4613      	mov	r3, r2
 8006af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006af4:	e058      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006af6:	4b38      	ldr	r3, [pc, #224]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	099b      	lsrs	r3, r3, #6
 8006afc:	2200      	movs	r2, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	4611      	mov	r1, r2
 8006b02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b06:	623b      	str	r3, [r7, #32]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b10:	4642      	mov	r2, r8
 8006b12:	464b      	mov	r3, r9
 8006b14:	f04f 0000 	mov.w	r0, #0
 8006b18:	f04f 0100 	mov.w	r1, #0
 8006b1c:	0159      	lsls	r1, r3, #5
 8006b1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b22:	0150      	lsls	r0, r2, #5
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4641      	mov	r1, r8
 8006b2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b2e:	4649      	mov	r1, r9
 8006b30:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b48:	ebb2 040a 	subs.w	r4, r2, sl
 8006b4c:	eb63 050b 	sbc.w	r5, r3, fp
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	00eb      	lsls	r3, r5, #3
 8006b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b5e:	00e2      	lsls	r2, r4, #3
 8006b60:	4614      	mov	r4, r2
 8006b62:	461d      	mov	r5, r3
 8006b64:	4643      	mov	r3, r8
 8006b66:	18e3      	adds	r3, r4, r3
 8006b68:	603b      	str	r3, [r7, #0]
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	eb45 0303 	adc.w	r3, r5, r3
 8006b70:	607b      	str	r3, [r7, #4]
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b7e:	4629      	mov	r1, r5
 8006b80:	028b      	lsls	r3, r1, #10
 8006b82:	4621      	mov	r1, r4
 8006b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b88:	4621      	mov	r1, r4
 8006b8a:	028a      	lsls	r2, r1, #10
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b92:	2200      	movs	r2, #0
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	61fa      	str	r2, [r7, #28]
 8006b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b9c:	f7fa f86c 	bl	8000c78 <__aeabi_uldivmod>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ba8:	4b0b      	ldr	r3, [pc, #44]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	0c1b      	lsrs	r3, r3, #16
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bc2:	e002      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8006bc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3750      	adds	r7, #80	; 0x50
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bd6:	bf00      	nop
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	00f42400 	.word	0x00f42400
 8006be0:	007a1200 	.word	0x007a1200

08006be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006be8:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bea:	681b      	ldr	r3, [r3, #0]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20000000 	.word	0x20000000

08006bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c00:	f7ff fff0 	bl	8006be4 <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	0a9b      	lsrs	r3, r3, #10
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4903      	ldr	r1, [pc, #12]	; (8006c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	0800c6b8 	.word	0x0800c6b8

08006c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c28:	f7ff ffdc 	bl	8006be4 <HAL_RCC_GetHCLKFreq>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	0b5b      	lsrs	r3, r3, #13
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	4903      	ldr	r1, [pc, #12]	; (8006c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c3a:	5ccb      	ldrb	r3, [r1, r3]
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	40023800 	.word	0x40023800
 8006c48:	0800c6b8 	.word	0x0800c6b8

08006c4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e07b      	b.n	8006d56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d108      	bne.n	8006c78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c6e:	d009      	beq.n	8006c84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	61da      	str	r2, [r3, #28]
 8006c76:	e005      	b.n	8006c84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d106      	bne.n	8006ca4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fb fb92 	bl	80023c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d08:	ea42 0103 	orr.w	r1, r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	0c1b      	lsrs	r3, r3, #16
 8006d22:	f003 0104 	and.w	r1, r3, #4
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	f003 0210 	and.w	r2, r3, #16
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69da      	ldr	r2, [r3, #28]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e042      	b.n	8006df6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d106      	bne.n	8006d8a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7fb fcf9 	bl	800277c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2224      	movs	r2, #36	; 0x24
 8006d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006da0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fdbe 	bl	8007924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691a      	ldr	r2, [r3, #16]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006db6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695a      	ldr	r2, [r3, #20]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dc6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dd6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b08a      	sub	sp, #40	; 0x28
 8006e02:	af02      	add	r7, sp, #8
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	603b      	str	r3, [r7, #0]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	d175      	bne.n	8006f0a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <HAL_UART_Transmit+0x2c>
 8006e24:	88fb      	ldrh	r3, [r7, #6]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e06e      	b.n	8006f0c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2221      	movs	r2, #33	; 0x21
 8006e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e3c:	f7fd fa40 	bl	80042c0 <HAL_GetTick>
 8006e40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	88fa      	ldrh	r2, [r7, #6]
 8006e46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	88fa      	ldrh	r2, [r7, #6]
 8006e4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e56:	d108      	bne.n	8006e6a <HAL_UART_Transmit+0x6c>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d104      	bne.n	8006e6a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	61bb      	str	r3, [r7, #24]
 8006e68:	e003      	b.n	8006e72 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e72:	e02e      	b.n	8006ed2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	2180      	movs	r1, #128	; 0x80
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 fb20 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e03a      	b.n	8006f0c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10b      	bne.n	8006eb4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eaa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	3302      	adds	r3, #2
 8006eb0:	61bb      	str	r3, [r7, #24]
 8006eb2:	e007      	b.n	8006ec4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	781a      	ldrb	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1cb      	bne.n	8006e74 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2140      	movs	r1, #64	; 0x40
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 faec 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e006      	b.n	8006f0c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	e000      	b.n	8006f0c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006f0a:	2302      	movs	r3, #2
  }
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3720      	adds	r7, #32
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d112      	bne.n	8006f54 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HAL_UART_Receive_IT+0x26>
 8006f34:	88fb      	ldrh	r3, [r7, #6]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e00b      	b.n	8006f56 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	461a      	mov	r2, r3
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fb13 	bl	8007576 <UART_Start_Receive_IT>
 8006f50:	4603      	mov	r3, r0
 8006f52:	e000      	b.n	8006f56 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f54:	2302      	movs	r3, #2
  }
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b0ba      	sub	sp, #232	; 0xe8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10f      	bne.n	8006fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x66>
 8006fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fbf2 	bl	80077a8 <UART_Receive_IT>
      return;
 8006fc4:	e25b      	b.n	800747e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 80de 	beq.w	800718c <HAL_UART_IRQHandler+0x22c>
 8006fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d106      	bne.n	8006fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80d1 	beq.w	800718c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00b      	beq.n	800700e <HAL_UART_IRQHandler+0xae>
 8006ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007006:	f043 0201 	orr.w	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800700e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <HAL_UART_IRQHandler+0xd2>
 800701a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702a:	f043 0202 	orr.w	r2, r3, #2
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00b      	beq.n	8007056 <HAL_UART_IRQHandler+0xf6>
 800703e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d005      	beq.n	8007056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704e:	f043 0204 	orr.w	r2, r3, #4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	2b00      	cmp	r3, #0
 8007060:	d011      	beq.n	8007086 <HAL_UART_IRQHandler+0x126>
 8007062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d105      	bne.n	800707a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800706e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707e:	f043 0208 	orr.w	r2, r3, #8
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 81f2 	beq.w	8007474 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <HAL_UART_IRQHandler+0x14e>
 800709c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fb7d 	bl	80077a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b8:	2b40      	cmp	r3, #64	; 0x40
 80070ba:	bf0c      	ite	eq
 80070bc:	2301      	moveq	r3, #1
 80070be:	2300      	movne	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d103      	bne.n	80070da <HAL_UART_IRQHandler+0x17a>
 80070d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d04f      	beq.n	800717a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa85 	bl	80075ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	d141      	bne.n	8007172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3314      	adds	r3, #20
 80070f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800710c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3314      	adds	r3, #20
 8007116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800711a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800711e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1d9      	bne.n	80070ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d013      	beq.n	800716a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007146:	4a7e      	ldr	r2, [pc, #504]	; (8007340 <HAL_UART_IRQHandler+0x3e0>)
 8007148:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	4618      	mov	r0, r3
 8007150:	f7fd fa67 	bl	8004622 <HAL_DMA_Abort_IT>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d016      	beq.n	8007188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007168:	e00e      	b.n	8007188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f994 	bl	8007498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007170:	e00a      	b.n	8007188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f990 	bl	8007498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007178:	e006      	b.n	8007188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f98c 	bl	8007498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007186:	e175      	b.n	8007474 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007188:	bf00      	nop
    return;
 800718a:	e173      	b.n	8007474 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	2b01      	cmp	r3, #1
 8007192:	f040 814f 	bne.w	8007434 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719a:	f003 0310 	and.w	r3, r3, #16
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 8148 	beq.w	8007434 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80071a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a8:	f003 0310 	and.w	r3, r3, #16
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8141 	beq.w	8007434 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071b2:	2300      	movs	r3, #0
 80071b4:	60bb      	str	r3, [r7, #8]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d2:	2b40      	cmp	r3, #64	; 0x40
 80071d4:	f040 80b6 	bne.w	8007344 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8145 	beq.w	8007478 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071f6:	429a      	cmp	r2, r3
 80071f8:	f080 813e 	bcs.w	8007478 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007202:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720e:	f000 8088 	beq.w	8007322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	330c      	adds	r3, #12
 8007218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007220:	e853 3f00 	ldrex	r3, [r3]
 8007224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800722c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800723e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800724a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1d9      	bne.n	8007212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3314      	adds	r3, #20
 8007264:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800726e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007270:	f023 0301 	bic.w	r3, r3, #1
 8007274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3314      	adds	r3, #20
 800727e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007282:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007286:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800728a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e1      	bne.n	800725e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3314      	adds	r3, #20
 80072a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3314      	adds	r3, #20
 80072ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e3      	bne.n	800729a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072f2:	f023 0310 	bic.w	r3, r3, #16
 80072f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	330c      	adds	r3, #12
 8007300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007304:	65ba      	str	r2, [r7, #88]	; 0x58
 8007306:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800730a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e3      	bne.n	80072e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731c:	4618      	mov	r0, r3
 800731e:	f7fd f910 	bl	8004542 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2202      	movs	r2, #2
 8007326:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007330:	b29b      	uxth	r3, r3
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	b29b      	uxth	r3, r3
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f8b7 	bl	80074ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800733e:	e09b      	b.n	8007478 <HAL_UART_IRQHandler+0x518>
 8007340:	080076b1 	.word	0x080076b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800734c:	b29b      	uxth	r3, r3
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 808e 	beq.w	800747c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 8089 	beq.w	800747c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007380:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	330c      	adds	r3, #12
 800738a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800738e:	647a      	str	r2, [r7, #68]	; 0x44
 8007390:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800739c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e3      	bne.n	800736a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3314      	adds	r3, #20
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	623b      	str	r3, [r7, #32]
   return(result);
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	f023 0301 	bic.w	r3, r3, #1
 80073b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3314      	adds	r3, #20
 80073c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073c6:	633a      	str	r2, [r7, #48]	; 0x30
 80073c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e3      	bne.n	80073a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2220      	movs	r2, #32
 80073de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	330c      	adds	r3, #12
 80073ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0310 	bic.w	r3, r3, #16
 80073fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	330c      	adds	r3, #12
 8007408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800740c:	61fa      	str	r2, [r7, #28]
 800740e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	69b9      	ldr	r1, [r7, #24]
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	617b      	str	r3, [r7, #20]
   return(result);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e3      	bne.n	80073e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f83d 	bl	80074ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007432:	e023      	b.n	800747c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743c:	2b00      	cmp	r3, #0
 800743e:	d009      	beq.n	8007454 <HAL_UART_IRQHandler+0x4f4>
 8007440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f943 	bl	80076d8 <UART_Transmit_IT>
    return;
 8007452:	e014      	b.n	800747e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00e      	beq.n	800747e <HAL_UART_IRQHandler+0x51e>
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f983 	bl	8007778 <UART_EndTransmit_IT>
    return;
 8007472:	e004      	b.n	800747e <HAL_UART_IRQHandler+0x51e>
    return;
 8007474:	bf00      	nop
 8007476:	e002      	b.n	800747e <HAL_UART_IRQHandler+0x51e>
      return;
 8007478:	bf00      	nop
 800747a:	e000      	b.n	800747e <HAL_UART_IRQHandler+0x51e>
      return;
 800747c:	bf00      	nop
  }
}
 800747e:	37e8      	adds	r7, #232	; 0xe8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	4613      	mov	r3, r2
 80074d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d4:	e03b      	b.n	800754e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074dc:	d037      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074de:	f7fc feef 	bl	80042c0 <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	6a3a      	ldr	r2, [r7, #32]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d302      	bcc.n	80074f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e03a      	b.n	800756e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f003 0304 	and.w	r3, r3, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	d023      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b80      	cmp	r3, #128	; 0x80
 800750a:	d020      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0x8a>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b40      	cmp	r3, #64	; 0x40
 8007510:	d01d      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0308 	and.w	r3, r3, #8
 800751c:	2b08      	cmp	r3, #8
 800751e:	d116      	bne.n	800754e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	617b      	str	r3, [r7, #20]
 8007534:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 f857 	bl	80075ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2208      	movs	r2, #8
 8007540:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e00f      	b.n	800756e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	4013      	ands	r3, r2
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	429a      	cmp	r2, r3
 800755c:	bf0c      	ite	eq
 800755e:	2301      	moveq	r3, #1
 8007560:	2300      	movne	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	429a      	cmp	r2, r3
 800756a:	d0b4      	beq.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007576:	b480      	push	{r7}
 8007578:	b085      	sub	sp, #20
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	4613      	mov	r3, r2
 8007582:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	88fa      	ldrh	r2, [r7, #6]
 800758e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	88fa      	ldrh	r2, [r7, #6]
 8007594:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2222      	movs	r2, #34	; 0x22
 80075a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d007      	beq.n	80075bc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075ba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695a      	ldr	r2, [r3, #20]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0201 	orr.w	r2, r2, #1
 80075ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0220 	orr.w	r2, r2, #32
 80075da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b095      	sub	sp, #84	; 0x54
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	330c      	adds	r3, #12
 80075f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	330c      	adds	r3, #12
 8007610:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007612:	643a      	str	r2, [r7, #64]	; 0x40
 8007614:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007618:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e5      	bne.n	80075f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3314      	adds	r3, #20
 800762c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	e853 3f00 	ldrex	r3, [r3]
 8007634:	61fb      	str	r3, [r7, #28]
   return(result);
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	f023 0301 	bic.w	r3, r3, #1
 800763c:	64bb      	str	r3, [r7, #72]	; 0x48
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3314      	adds	r3, #20
 8007644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007646:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800764c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e5      	bne.n	8007626 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	2b01      	cmp	r3, #1
 8007660:	d119      	bne.n	8007696 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	330c      	adds	r3, #12
 8007668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	60bb      	str	r3, [r7, #8]
   return(result);
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	f023 0310 	bic.w	r3, r3, #16
 8007678:	647b      	str	r3, [r7, #68]	; 0x44
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	330c      	adds	r3, #12
 8007680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007682:	61ba      	str	r2, [r7, #24]
 8007684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	6979      	ldr	r1, [r7, #20]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	e841 2300 	strex	r3, r2, [r1]
 800768e:	613b      	str	r3, [r7, #16]
   return(result);
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e5      	bne.n	8007662 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076a4:	bf00      	nop
 80076a6:	3754      	adds	r7, #84	; 0x54
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7ff fee4 	bl	8007498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076d0:	bf00      	nop
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b21      	cmp	r3, #33	; 0x21
 80076ea:	d13e      	bne.n	800776a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f4:	d114      	bne.n	8007720 <UART_Transmit_IT+0x48>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d110      	bne.n	8007720 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007712:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	1c9a      	adds	r2, r3, #2
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	621a      	str	r2, [r3, #32]
 800771e:	e008      	b.n	8007732 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	1c59      	adds	r1, r3, #1
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6211      	str	r1, [r2, #32]
 800772a:	781a      	ldrb	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29b      	uxth	r3, r3
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	4619      	mov	r1, r3
 8007740:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10f      	bne.n	8007766 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007754:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007764:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	e000      	b.n	800776c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800776a:	2302      	movs	r3, #2
  }
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68da      	ldr	r2, [r3, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800778e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff fe73 	bl	8007484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08c      	sub	sp, #48	; 0x30
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b22      	cmp	r3, #34	; 0x22
 80077ba:	f040 80ae 	bne.w	800791a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c6:	d117      	bne.n	80077f8 <UART_Receive_IT+0x50>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d113      	bne.n	80077f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f0:	1c9a      	adds	r2, r3, #2
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	629a      	str	r2, [r3, #40]	; 0x28
 80077f6:	e026      	b.n	8007846 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780a:	d007      	beq.n	800781c <UART_Receive_IT+0x74>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10a      	bne.n	800782a <UART_Receive_IT+0x82>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d106      	bne.n	800782a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	b2da      	uxtb	r2, r3
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	701a      	strb	r2, [r3, #0]
 8007828:	e008      	b.n	800783c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007836:	b2da      	uxtb	r2, r3
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800784a:	b29b      	uxth	r3, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	b29b      	uxth	r3, r3
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	4619      	mov	r1, r3
 8007854:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007856:	2b00      	cmp	r3, #0
 8007858:	d15d      	bne.n	8007916 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0220 	bic.w	r2, r2, #32
 8007868:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007878:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	695a      	ldr	r2, [r3, #20]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0201 	bic.w	r2, r2, #1
 8007888:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2220      	movs	r2, #32
 800788e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	2b01      	cmp	r3, #1
 800789e:	d135      	bne.n	800790c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	330c      	adds	r3, #12
 80078ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	613b      	str	r3, [r7, #16]
   return(result);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f023 0310 	bic.w	r3, r3, #16
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	330c      	adds	r3, #12
 80078c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c6:	623a      	str	r2, [r7, #32]
 80078c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	69f9      	ldr	r1, [r7, #28]
 80078cc:	6a3a      	ldr	r2, [r7, #32]
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e5      	bne.n	80078a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b10      	cmp	r3, #16
 80078e6:	d10a      	bne.n	80078fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078e8:	2300      	movs	r3, #0
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff fdd1 	bl	80074ac <HAL_UARTEx_RxEventCallback>
 800790a:	e002      	b.n	8007912 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7fa fca9 	bl	8002264 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	e002      	b.n	800791c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	e000      	b.n	800791c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800791a:	2302      	movs	r3, #2
  }
}
 800791c:	4618      	mov	r0, r3
 800791e:	3730      	adds	r7, #48	; 0x30
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007928:	b0c0      	sub	sp, #256	; 0x100
 800792a:	af00      	add	r7, sp, #0
 800792c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800793c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007940:	68d9      	ldr	r1, [r3, #12]
 8007942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	ea40 0301 	orr.w	r3, r0, r1
 800794c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800794e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	431a      	orrs	r2, r3
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	431a      	orrs	r2, r3
 8007964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	4313      	orrs	r3, r2
 800796c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800797c:	f021 010c 	bic.w	r1, r1, #12
 8007980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800798a:	430b      	orrs	r3, r1
 800798c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800798e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800799a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799e:	6999      	ldr	r1, [r3, #24]
 80079a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	ea40 0301 	orr.w	r3, r0, r1
 80079aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	4b8f      	ldr	r3, [pc, #572]	; (8007bf0 <UART_SetConfig+0x2cc>)
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d005      	beq.n	80079c4 <UART_SetConfig+0xa0>
 80079b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	4b8d      	ldr	r3, [pc, #564]	; (8007bf4 <UART_SetConfig+0x2d0>)
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d104      	bne.n	80079ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079c4:	f7ff f92e 	bl	8006c24 <HAL_RCC_GetPCLK2Freq>
 80079c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80079cc:	e003      	b.n	80079d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079ce:	f7ff f915 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
 80079d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e0:	f040 810c 	bne.w	8007bfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e8:	2200      	movs	r2, #0
 80079ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80079f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80079f6:	4622      	mov	r2, r4
 80079f8:	462b      	mov	r3, r5
 80079fa:	1891      	adds	r1, r2, r2
 80079fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80079fe:	415b      	adcs	r3, r3
 8007a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a06:	4621      	mov	r1, r4
 8007a08:	eb12 0801 	adds.w	r8, r2, r1
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	eb43 0901 	adc.w	r9, r3, r1
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a26:	4690      	mov	r8, r2
 8007a28:	4699      	mov	r9, r3
 8007a2a:	4623      	mov	r3, r4
 8007a2c:	eb18 0303 	adds.w	r3, r8, r3
 8007a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a34:	462b      	mov	r3, r5
 8007a36:	eb49 0303 	adc.w	r3, r9, r3
 8007a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a52:	460b      	mov	r3, r1
 8007a54:	18db      	adds	r3, r3, r3
 8007a56:	653b      	str	r3, [r7, #80]	; 0x50
 8007a58:	4613      	mov	r3, r2
 8007a5a:	eb42 0303 	adc.w	r3, r2, r3
 8007a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a68:	f7f9 f906 	bl	8000c78 <__aeabi_uldivmod>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4b61      	ldr	r3, [pc, #388]	; (8007bf8 <UART_SetConfig+0x2d4>)
 8007a72:	fba3 2302 	umull	r2, r3, r3, r2
 8007a76:	095b      	lsrs	r3, r3, #5
 8007a78:	011c      	lsls	r4, r3, #4
 8007a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a8c:	4642      	mov	r2, r8
 8007a8e:	464b      	mov	r3, r9
 8007a90:	1891      	adds	r1, r2, r2
 8007a92:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a94:	415b      	adcs	r3, r3
 8007a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a9c:	4641      	mov	r1, r8
 8007a9e:	eb12 0a01 	adds.w	sl, r2, r1
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	eb43 0b01 	adc.w	fp, r3, r1
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ab4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007abc:	4692      	mov	sl, r2
 8007abe:	469b      	mov	fp, r3
 8007ac0:	4643      	mov	r3, r8
 8007ac2:	eb1a 0303 	adds.w	r3, sl, r3
 8007ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007aca:	464b      	mov	r3, r9
 8007acc:	eb4b 0303 	adc.w	r3, fp, r3
 8007ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ae0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ae4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	18db      	adds	r3, r3, r3
 8007aec:	643b      	str	r3, [r7, #64]	; 0x40
 8007aee:	4613      	mov	r3, r2
 8007af0:	eb42 0303 	adc.w	r3, r2, r3
 8007af4:	647b      	str	r3, [r7, #68]	; 0x44
 8007af6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007afa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007afe:	f7f9 f8bb 	bl	8000c78 <__aeabi_uldivmod>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4611      	mov	r1, r2
 8007b08:	4b3b      	ldr	r3, [pc, #236]	; (8007bf8 <UART_SetConfig+0x2d4>)
 8007b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	2264      	movs	r2, #100	; 0x64
 8007b12:	fb02 f303 	mul.w	r3, r2, r3
 8007b16:	1acb      	subs	r3, r1, r3
 8007b18:	00db      	lsls	r3, r3, #3
 8007b1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b1e:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <UART_SetConfig+0x2d4>)
 8007b20:	fba3 2302 	umull	r2, r3, r3, r2
 8007b24:	095b      	lsrs	r3, r3, #5
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b2c:	441c      	add	r4, r3
 8007b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b40:	4642      	mov	r2, r8
 8007b42:	464b      	mov	r3, r9
 8007b44:	1891      	adds	r1, r2, r2
 8007b46:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b48:	415b      	adcs	r3, r3
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b50:	4641      	mov	r1, r8
 8007b52:	1851      	adds	r1, r2, r1
 8007b54:	6339      	str	r1, [r7, #48]	; 0x30
 8007b56:	4649      	mov	r1, r9
 8007b58:	414b      	adcs	r3, r1
 8007b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b5c:	f04f 0200 	mov.w	r2, #0
 8007b60:	f04f 0300 	mov.w	r3, #0
 8007b64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b68:	4659      	mov	r1, fp
 8007b6a:	00cb      	lsls	r3, r1, #3
 8007b6c:	4651      	mov	r1, sl
 8007b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b72:	4651      	mov	r1, sl
 8007b74:	00ca      	lsls	r2, r1, #3
 8007b76:	4610      	mov	r0, r2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	189b      	adds	r3, r3, r2
 8007b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b84:	464b      	mov	r3, r9
 8007b86:	460a      	mov	r2, r1
 8007b88:	eb42 0303 	adc.w	r3, r2, r3
 8007b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	18db      	adds	r3, r3, r3
 8007ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007baa:	4613      	mov	r3, r2
 8007bac:	eb42 0303 	adc.w	r3, r2, r3
 8007bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007bba:	f7f9 f85d 	bl	8000c78 <__aeabi_uldivmod>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4b0d      	ldr	r3, [pc, #52]	; (8007bf8 <UART_SetConfig+0x2d4>)
 8007bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc8:	095b      	lsrs	r3, r3, #5
 8007bca:	2164      	movs	r1, #100	; 0x64
 8007bcc:	fb01 f303 	mul.w	r3, r1, r3
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	3332      	adds	r3, #50	; 0x32
 8007bd6:	4a08      	ldr	r2, [pc, #32]	; (8007bf8 <UART_SetConfig+0x2d4>)
 8007bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bdc:	095b      	lsrs	r3, r3, #5
 8007bde:	f003 0207 	and.w	r2, r3, #7
 8007be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4422      	add	r2, r4
 8007bea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bec:	e106      	b.n	8007dfc <UART_SetConfig+0x4d8>
 8007bee:	bf00      	nop
 8007bf0:	40011000 	.word	0x40011000
 8007bf4:	40011400 	.word	0x40011400
 8007bf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c0e:	4642      	mov	r2, r8
 8007c10:	464b      	mov	r3, r9
 8007c12:	1891      	adds	r1, r2, r2
 8007c14:	6239      	str	r1, [r7, #32]
 8007c16:	415b      	adcs	r3, r3
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
 8007c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c1e:	4641      	mov	r1, r8
 8007c20:	1854      	adds	r4, r2, r1
 8007c22:	4649      	mov	r1, r9
 8007c24:	eb43 0501 	adc.w	r5, r3, r1
 8007c28:	f04f 0200 	mov.w	r2, #0
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	00eb      	lsls	r3, r5, #3
 8007c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c36:	00e2      	lsls	r2, r4, #3
 8007c38:	4614      	mov	r4, r2
 8007c3a:	461d      	mov	r5, r3
 8007c3c:	4643      	mov	r3, r8
 8007c3e:	18e3      	adds	r3, r4, r3
 8007c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c44:	464b      	mov	r3, r9
 8007c46:	eb45 0303 	adc.w	r3, r5, r3
 8007c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	008b      	lsls	r3, r1, #2
 8007c6e:	4621      	mov	r1, r4
 8007c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c74:	4621      	mov	r1, r4
 8007c76:	008a      	lsls	r2, r1, #2
 8007c78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c7c:	f7f8 fffc 	bl	8000c78 <__aeabi_uldivmod>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4b60      	ldr	r3, [pc, #384]	; (8007e08 <UART_SetConfig+0x4e4>)
 8007c86:	fba3 2302 	umull	r2, r3, r3, r2
 8007c8a:	095b      	lsrs	r3, r3, #5
 8007c8c:	011c      	lsls	r4, r3, #4
 8007c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ca0:	4642      	mov	r2, r8
 8007ca2:	464b      	mov	r3, r9
 8007ca4:	1891      	adds	r1, r2, r2
 8007ca6:	61b9      	str	r1, [r7, #24]
 8007ca8:	415b      	adcs	r3, r3
 8007caa:	61fb      	str	r3, [r7, #28]
 8007cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	1851      	adds	r1, r2, r1
 8007cb4:	6139      	str	r1, [r7, #16]
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	414b      	adcs	r3, r1
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	f04f 0300 	mov.w	r3, #0
 8007cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cc8:	4659      	mov	r1, fp
 8007cca:	00cb      	lsls	r3, r1, #3
 8007ccc:	4651      	mov	r1, sl
 8007cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cd2:	4651      	mov	r1, sl
 8007cd4:	00ca      	lsls	r2, r1, #3
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4642      	mov	r2, r8
 8007cde:	189b      	adds	r3, r3, r2
 8007ce0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ce4:	464b      	mov	r3, r9
 8007ce6:	460a      	mov	r2, r1
 8007ce8:	eb42 0303 	adc.w	r3, r2, r3
 8007cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007cfc:	f04f 0200 	mov.w	r2, #0
 8007d00:	f04f 0300 	mov.w	r3, #0
 8007d04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d08:	4649      	mov	r1, r9
 8007d0a:	008b      	lsls	r3, r1, #2
 8007d0c:	4641      	mov	r1, r8
 8007d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d12:	4641      	mov	r1, r8
 8007d14:	008a      	lsls	r2, r1, #2
 8007d16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d1a:	f7f8 ffad 	bl	8000c78 <__aeabi_uldivmod>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4611      	mov	r1, r2
 8007d24:	4b38      	ldr	r3, [pc, #224]	; (8007e08 <UART_SetConfig+0x4e4>)
 8007d26:	fba3 2301 	umull	r2, r3, r3, r1
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	2264      	movs	r2, #100	; 0x64
 8007d2e:	fb02 f303 	mul.w	r3, r2, r3
 8007d32:	1acb      	subs	r3, r1, r3
 8007d34:	011b      	lsls	r3, r3, #4
 8007d36:	3332      	adds	r3, #50	; 0x32
 8007d38:	4a33      	ldr	r2, [pc, #204]	; (8007e08 <UART_SetConfig+0x4e4>)
 8007d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d44:	441c      	add	r4, r3
 8007d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	673b      	str	r3, [r7, #112]	; 0x70
 8007d4e:	677a      	str	r2, [r7, #116]	; 0x74
 8007d50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d54:	4642      	mov	r2, r8
 8007d56:	464b      	mov	r3, r9
 8007d58:	1891      	adds	r1, r2, r2
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	415b      	adcs	r3, r3
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d64:	4641      	mov	r1, r8
 8007d66:	1851      	adds	r1, r2, r1
 8007d68:	6039      	str	r1, [r7, #0]
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	414b      	adcs	r3, r1
 8007d6e:	607b      	str	r3, [r7, #4]
 8007d70:	f04f 0200 	mov.w	r2, #0
 8007d74:	f04f 0300 	mov.w	r3, #0
 8007d78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d7c:	4659      	mov	r1, fp
 8007d7e:	00cb      	lsls	r3, r1, #3
 8007d80:	4651      	mov	r1, sl
 8007d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d86:	4651      	mov	r1, sl
 8007d88:	00ca      	lsls	r2, r1, #3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4603      	mov	r3, r0
 8007d90:	4642      	mov	r2, r8
 8007d92:	189b      	adds	r3, r3, r2
 8007d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d96:	464b      	mov	r3, r9
 8007d98:	460a      	mov	r2, r1
 8007d9a:	eb42 0303 	adc.w	r3, r2, r3
 8007d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	663b      	str	r3, [r7, #96]	; 0x60
 8007daa:	667a      	str	r2, [r7, #100]	; 0x64
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	f04f 0300 	mov.w	r3, #0
 8007db4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007db8:	4649      	mov	r1, r9
 8007dba:	008b      	lsls	r3, r1, #2
 8007dbc:	4641      	mov	r1, r8
 8007dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dc2:	4641      	mov	r1, r8
 8007dc4:	008a      	lsls	r2, r1, #2
 8007dc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007dca:	f7f8 ff55 	bl	8000c78 <__aeabi_uldivmod>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	; (8007e08 <UART_SetConfig+0x4e4>)
 8007dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd8:	095b      	lsrs	r3, r3, #5
 8007dda:	2164      	movs	r1, #100	; 0x64
 8007ddc:	fb01 f303 	mul.w	r3, r1, r3
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	3332      	adds	r3, #50	; 0x32
 8007de6:	4a08      	ldr	r2, [pc, #32]	; (8007e08 <UART_SetConfig+0x4e4>)
 8007de8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dec:	095b      	lsrs	r3, r3, #5
 8007dee:	f003 020f 	and.w	r2, r3, #15
 8007df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4422      	add	r2, r4
 8007dfa:	609a      	str	r2, [r3, #8]
}
 8007dfc:	bf00      	nop
 8007dfe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e02:	46bd      	mov	sp, r7
 8007e04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e08:	51eb851f 	.word	0x51eb851f

08007e0c <asin>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	ed2d 8b02 	vpush	{d8}
 8007e12:	ec55 4b10 	vmov	r4, r5, d0
 8007e16:	f000 fb2b 	bl	8008470 <__ieee754_asin>
 8007e1a:	4622      	mov	r2, r4
 8007e1c:	462b      	mov	r3, r5
 8007e1e:	4620      	mov	r0, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	eeb0 8a40 	vmov.f32	s16, s0
 8007e26:	eef0 8a60 	vmov.f32	s17, s1
 8007e2a:	f7f8 fe77 	bl	8000b1c <__aeabi_dcmpun>
 8007e2e:	b9a8      	cbnz	r0, 8007e5c <asin+0x50>
 8007e30:	ec45 4b10 	vmov	d0, r4, r5
 8007e34:	f000 f84c 	bl	8007ed0 <fabs>
 8007e38:	4b0c      	ldr	r3, [pc, #48]	; (8007e6c <asin+0x60>)
 8007e3a:	ec51 0b10 	vmov	r0, r1, d0
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f7f8 fe62 	bl	8000b08 <__aeabi_dcmpgt>
 8007e44:	b150      	cbz	r0, 8007e5c <asin+0x50>
 8007e46:	f002 fd65 	bl	800a914 <__errno>
 8007e4a:	ecbd 8b02 	vpop	{d8}
 8007e4e:	2321      	movs	r3, #33	; 0x21
 8007e50:	6003      	str	r3, [r0, #0]
 8007e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e56:	4806      	ldr	r0, [pc, #24]	; (8007e70 <asin+0x64>)
 8007e58:	f000 b89e 	b.w	8007f98 <nan>
 8007e5c:	eeb0 0a48 	vmov.f32	s0, s16
 8007e60:	eef0 0a68 	vmov.f32	s1, s17
 8007e64:	ecbd 8b02 	vpop	{d8}
 8007e68:	bd38      	pop	{r3, r4, r5, pc}
 8007e6a:	bf00      	nop
 8007e6c:	3ff00000 	.word	0x3ff00000
 8007e70:	0800cc90 	.word	0x0800cc90

08007e74 <atan2>:
 8007e74:	f000 bd10 	b.w	8008898 <__ieee754_atan2>

08007e78 <sqrt>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	ed2d 8b02 	vpush	{d8}
 8007e7e:	ec55 4b10 	vmov	r4, r5, d0
 8007e82:	f000 f891 	bl	8007fa8 <__ieee754_sqrt>
 8007e86:	4622      	mov	r2, r4
 8007e88:	462b      	mov	r3, r5
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	eeb0 8a40 	vmov.f32	s16, s0
 8007e92:	eef0 8a60 	vmov.f32	s17, s1
 8007e96:	f7f8 fe41 	bl	8000b1c <__aeabi_dcmpun>
 8007e9a:	b990      	cbnz	r0, 8007ec2 <sqrt+0x4a>
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	f7f8 fe12 	bl	8000acc <__aeabi_dcmplt>
 8007ea8:	b158      	cbz	r0, 8007ec2 <sqrt+0x4a>
 8007eaa:	f002 fd33 	bl	800a914 <__errno>
 8007eae:	2321      	movs	r3, #33	; 0x21
 8007eb0:	6003      	str	r3, [r0, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f7f8 fcbf 	bl	800083c <__aeabi_ddiv>
 8007ebe:	ec41 0b18 	vmov	d8, r0, r1
 8007ec2:	eeb0 0a48 	vmov.f32	s0, s16
 8007ec6:	eef0 0a68 	vmov.f32	s1, s17
 8007eca:	ecbd 8b02 	vpop	{d8}
 8007ece:	bd38      	pop	{r3, r4, r5, pc}

08007ed0 <fabs>:
 8007ed0:	ec51 0b10 	vmov	r0, r1, d0
 8007ed4:	ee10 2a10 	vmov	r2, s0
 8007ed8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007edc:	ec43 2b10 	vmov	d0, r2, r3
 8007ee0:	4770      	bx	lr
 8007ee2:	0000      	movs	r0, r0
 8007ee4:	0000      	movs	r0, r0
	...

08007ee8 <sin>:
 8007ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eea:	ec53 2b10 	vmov	r2, r3, d0
 8007eee:	4828      	ldr	r0, [pc, #160]	; (8007f90 <sin+0xa8>)
 8007ef0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ef4:	4281      	cmp	r1, r0
 8007ef6:	dc07      	bgt.n	8007f08 <sin+0x20>
 8007ef8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007f88 <sin+0xa0>
 8007efc:	2000      	movs	r0, #0
 8007efe:	b005      	add	sp, #20
 8007f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f04:	f000 b9f4 	b.w	80082f0 <__kernel_sin>
 8007f08:	4822      	ldr	r0, [pc, #136]	; (8007f94 <sin+0xac>)
 8007f0a:	4281      	cmp	r1, r0
 8007f0c:	dd09      	ble.n	8007f22 <sin+0x3a>
 8007f0e:	ee10 0a10 	vmov	r0, s0
 8007f12:	4619      	mov	r1, r3
 8007f14:	f7f8 f9b0 	bl	8000278 <__aeabi_dsub>
 8007f18:	ec41 0b10 	vmov	d0, r0, r1
 8007f1c:	b005      	add	sp, #20
 8007f1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f22:	4668      	mov	r0, sp
 8007f24:	f000 fd80 	bl	8008a28 <__ieee754_rem_pio2>
 8007f28:	f000 0003 	and.w	r0, r0, #3
 8007f2c:	2801      	cmp	r0, #1
 8007f2e:	d00c      	beq.n	8007f4a <sin+0x62>
 8007f30:	2802      	cmp	r0, #2
 8007f32:	d011      	beq.n	8007f58 <sin+0x70>
 8007f34:	b9f0      	cbnz	r0, 8007f74 <sin+0x8c>
 8007f36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f3a:	ed9d 0b00 	vldr	d0, [sp]
 8007f3e:	2001      	movs	r0, #1
 8007f40:	f000 f9d6 	bl	80082f0 <__kernel_sin>
 8007f44:	ec51 0b10 	vmov	r0, r1, d0
 8007f48:	e7e6      	b.n	8007f18 <sin+0x30>
 8007f4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f4e:	ed9d 0b00 	vldr	d0, [sp]
 8007f52:	f000 f905 	bl	8008160 <__kernel_cos>
 8007f56:	e7f5      	b.n	8007f44 <sin+0x5c>
 8007f58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f5c:	ed9d 0b00 	vldr	d0, [sp]
 8007f60:	2001      	movs	r0, #1
 8007f62:	f000 f9c5 	bl	80082f0 <__kernel_sin>
 8007f66:	ec53 2b10 	vmov	r2, r3, d0
 8007f6a:	ee10 0a10 	vmov	r0, s0
 8007f6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007f72:	e7d1      	b.n	8007f18 <sin+0x30>
 8007f74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f78:	ed9d 0b00 	vldr	d0, [sp]
 8007f7c:	f000 f8f0 	bl	8008160 <__kernel_cos>
 8007f80:	e7f1      	b.n	8007f66 <sin+0x7e>
 8007f82:	bf00      	nop
 8007f84:	f3af 8000 	nop.w
	...
 8007f90:	3fe921fb 	.word	0x3fe921fb
 8007f94:	7fefffff 	.word	0x7fefffff

08007f98 <nan>:
 8007f98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007fa0 <nan+0x8>
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	00000000 	.word	0x00000000
 8007fa4:	7ff80000 	.word	0x7ff80000

08007fa8 <__ieee754_sqrt>:
 8007fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	ec55 4b10 	vmov	r4, r5, d0
 8007fb0:	4e67      	ldr	r6, [pc, #412]	; (8008150 <__ieee754_sqrt+0x1a8>)
 8007fb2:	43ae      	bics	r6, r5
 8007fb4:	ee10 0a10 	vmov	r0, s0
 8007fb8:	ee10 2a10 	vmov	r2, s0
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	462b      	mov	r3, r5
 8007fc0:	d10d      	bne.n	8007fde <__ieee754_sqrt+0x36>
 8007fc2:	f7f8 fb11 	bl	80005e8 <__aeabi_dmul>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4620      	mov	r0, r4
 8007fcc:	4629      	mov	r1, r5
 8007fce:	f7f8 f955 	bl	800027c <__adddf3>
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	460d      	mov	r5, r1
 8007fd6:	ec45 4b10 	vmov	d0, r4, r5
 8007fda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fde:	2d00      	cmp	r5, #0
 8007fe0:	dc0b      	bgt.n	8007ffa <__ieee754_sqrt+0x52>
 8007fe2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007fe6:	4326      	orrs	r6, r4
 8007fe8:	d0f5      	beq.n	8007fd6 <__ieee754_sqrt+0x2e>
 8007fea:	b135      	cbz	r5, 8007ffa <__ieee754_sqrt+0x52>
 8007fec:	f7f8 f944 	bl	8000278 <__aeabi_dsub>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	f7f8 fc22 	bl	800083c <__aeabi_ddiv>
 8007ff8:	e7eb      	b.n	8007fd2 <__ieee754_sqrt+0x2a>
 8007ffa:	1509      	asrs	r1, r1, #20
 8007ffc:	f000 808d 	beq.w	800811a <__ieee754_sqrt+0x172>
 8008000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008004:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800800c:	07c9      	lsls	r1, r1, #31
 800800e:	bf5c      	itt	pl
 8008010:	005b      	lslpl	r3, r3, #1
 8008012:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008016:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800801a:	bf58      	it	pl
 800801c:	0052      	lslpl	r2, r2, #1
 800801e:	2500      	movs	r5, #0
 8008020:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008024:	1076      	asrs	r6, r6, #1
 8008026:	0052      	lsls	r2, r2, #1
 8008028:	f04f 0e16 	mov.w	lr, #22
 800802c:	46ac      	mov	ip, r5
 800802e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008032:	eb0c 0001 	add.w	r0, ip, r1
 8008036:	4298      	cmp	r0, r3
 8008038:	bfde      	ittt	le
 800803a:	1a1b      	suble	r3, r3, r0
 800803c:	eb00 0c01 	addle.w	ip, r0, r1
 8008040:	186d      	addle	r5, r5, r1
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	f1be 0e01 	subs.w	lr, lr, #1
 8008048:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800804c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008050:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008054:	d1ed      	bne.n	8008032 <__ieee754_sqrt+0x8a>
 8008056:	4674      	mov	r4, lr
 8008058:	2720      	movs	r7, #32
 800805a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800805e:	4563      	cmp	r3, ip
 8008060:	eb01 000e 	add.w	r0, r1, lr
 8008064:	dc02      	bgt.n	800806c <__ieee754_sqrt+0xc4>
 8008066:	d113      	bne.n	8008090 <__ieee754_sqrt+0xe8>
 8008068:	4290      	cmp	r0, r2
 800806a:	d811      	bhi.n	8008090 <__ieee754_sqrt+0xe8>
 800806c:	2800      	cmp	r0, #0
 800806e:	eb00 0e01 	add.w	lr, r0, r1
 8008072:	da57      	bge.n	8008124 <__ieee754_sqrt+0x17c>
 8008074:	f1be 0f00 	cmp.w	lr, #0
 8008078:	db54      	blt.n	8008124 <__ieee754_sqrt+0x17c>
 800807a:	f10c 0801 	add.w	r8, ip, #1
 800807e:	eba3 030c 	sub.w	r3, r3, ip
 8008082:	4290      	cmp	r0, r2
 8008084:	bf88      	it	hi
 8008086:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800808a:	1a12      	subs	r2, r2, r0
 800808c:	440c      	add	r4, r1
 800808e:	46c4      	mov	ip, r8
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	3f01      	subs	r7, #1
 8008094:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008098:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800809c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80080a0:	d1dd      	bne.n	800805e <__ieee754_sqrt+0xb6>
 80080a2:	4313      	orrs	r3, r2
 80080a4:	d01b      	beq.n	80080de <__ieee754_sqrt+0x136>
 80080a6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008154 <__ieee754_sqrt+0x1ac>
 80080aa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008158 <__ieee754_sqrt+0x1b0>
 80080ae:	e9da 0100 	ldrd	r0, r1, [sl]
 80080b2:	e9db 2300 	ldrd	r2, r3, [fp]
 80080b6:	f7f8 f8df 	bl	8000278 <__aeabi_dsub>
 80080ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	4640      	mov	r0, r8
 80080c4:	4649      	mov	r1, r9
 80080c6:	f7f8 fd0b 	bl	8000ae0 <__aeabi_dcmple>
 80080ca:	b140      	cbz	r0, 80080de <__ieee754_sqrt+0x136>
 80080cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80080d0:	e9da 0100 	ldrd	r0, r1, [sl]
 80080d4:	e9db 2300 	ldrd	r2, r3, [fp]
 80080d8:	d126      	bne.n	8008128 <__ieee754_sqrt+0x180>
 80080da:	3501      	adds	r5, #1
 80080dc:	463c      	mov	r4, r7
 80080de:	106a      	asrs	r2, r5, #1
 80080e0:	0863      	lsrs	r3, r4, #1
 80080e2:	07e9      	lsls	r1, r5, #31
 80080e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80080e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80080ec:	bf48      	it	mi
 80080ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80080f2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80080f6:	461c      	mov	r4, r3
 80080f8:	e76d      	b.n	8007fd6 <__ieee754_sqrt+0x2e>
 80080fa:	0ad3      	lsrs	r3, r2, #11
 80080fc:	3815      	subs	r0, #21
 80080fe:	0552      	lsls	r2, r2, #21
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0fa      	beq.n	80080fa <__ieee754_sqrt+0x152>
 8008104:	02dc      	lsls	r4, r3, #11
 8008106:	d50a      	bpl.n	800811e <__ieee754_sqrt+0x176>
 8008108:	f1c1 0420 	rsb	r4, r1, #32
 800810c:	fa22 f404 	lsr.w	r4, r2, r4
 8008110:	1e4d      	subs	r5, r1, #1
 8008112:	408a      	lsls	r2, r1
 8008114:	4323      	orrs	r3, r4
 8008116:	1b41      	subs	r1, r0, r5
 8008118:	e772      	b.n	8008000 <__ieee754_sqrt+0x58>
 800811a:	4608      	mov	r0, r1
 800811c:	e7f0      	b.n	8008100 <__ieee754_sqrt+0x158>
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	3101      	adds	r1, #1
 8008122:	e7ef      	b.n	8008104 <__ieee754_sqrt+0x15c>
 8008124:	46e0      	mov	r8, ip
 8008126:	e7aa      	b.n	800807e <__ieee754_sqrt+0xd6>
 8008128:	f7f8 f8a8 	bl	800027c <__adddf3>
 800812c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4640      	mov	r0, r8
 8008136:	4649      	mov	r1, r9
 8008138:	f7f8 fcc8 	bl	8000acc <__aeabi_dcmplt>
 800813c:	b120      	cbz	r0, 8008148 <__ieee754_sqrt+0x1a0>
 800813e:	1ca0      	adds	r0, r4, #2
 8008140:	bf08      	it	eq
 8008142:	3501      	addeq	r5, #1
 8008144:	3402      	adds	r4, #2
 8008146:	e7ca      	b.n	80080de <__ieee754_sqrt+0x136>
 8008148:	3401      	adds	r4, #1
 800814a:	f024 0401 	bic.w	r4, r4, #1
 800814e:	e7c6      	b.n	80080de <__ieee754_sqrt+0x136>
 8008150:	7ff00000 	.word	0x7ff00000
 8008154:	20000010 	.word	0x20000010
 8008158:	20000018 	.word	0x20000018
 800815c:	00000000 	.word	0x00000000

08008160 <__kernel_cos>:
 8008160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	ec57 6b10 	vmov	r6, r7, d0
 8008168:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800816c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008170:	ed8d 1b00 	vstr	d1, [sp]
 8008174:	da07      	bge.n	8008186 <__kernel_cos+0x26>
 8008176:	ee10 0a10 	vmov	r0, s0
 800817a:	4639      	mov	r1, r7
 800817c:	f7f8 fce4 	bl	8000b48 <__aeabi_d2iz>
 8008180:	2800      	cmp	r0, #0
 8008182:	f000 8088 	beq.w	8008296 <__kernel_cos+0x136>
 8008186:	4632      	mov	r2, r6
 8008188:	463b      	mov	r3, r7
 800818a:	4630      	mov	r0, r6
 800818c:	4639      	mov	r1, r7
 800818e:	f7f8 fa2b 	bl	80005e8 <__aeabi_dmul>
 8008192:	4b51      	ldr	r3, [pc, #324]	; (80082d8 <__kernel_cos+0x178>)
 8008194:	2200      	movs	r2, #0
 8008196:	4604      	mov	r4, r0
 8008198:	460d      	mov	r5, r1
 800819a:	f7f8 fa25 	bl	80005e8 <__aeabi_dmul>
 800819e:	a340      	add	r3, pc, #256	; (adr r3, 80082a0 <__kernel_cos+0x140>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	4682      	mov	sl, r0
 80081a6:	468b      	mov	fp, r1
 80081a8:	4620      	mov	r0, r4
 80081aa:	4629      	mov	r1, r5
 80081ac:	f7f8 fa1c 	bl	80005e8 <__aeabi_dmul>
 80081b0:	a33d      	add	r3, pc, #244	; (adr r3, 80082a8 <__kernel_cos+0x148>)
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	f7f8 f861 	bl	800027c <__adddf3>
 80081ba:	4622      	mov	r2, r4
 80081bc:	462b      	mov	r3, r5
 80081be:	f7f8 fa13 	bl	80005e8 <__aeabi_dmul>
 80081c2:	a33b      	add	r3, pc, #236	; (adr r3, 80082b0 <__kernel_cos+0x150>)
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f7f8 f856 	bl	8000278 <__aeabi_dsub>
 80081cc:	4622      	mov	r2, r4
 80081ce:	462b      	mov	r3, r5
 80081d0:	f7f8 fa0a 	bl	80005e8 <__aeabi_dmul>
 80081d4:	a338      	add	r3, pc, #224	; (adr r3, 80082b8 <__kernel_cos+0x158>)
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	f7f8 f84f 	bl	800027c <__adddf3>
 80081de:	4622      	mov	r2, r4
 80081e0:	462b      	mov	r3, r5
 80081e2:	f7f8 fa01 	bl	80005e8 <__aeabi_dmul>
 80081e6:	a336      	add	r3, pc, #216	; (adr r3, 80082c0 <__kernel_cos+0x160>)
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f7f8 f844 	bl	8000278 <__aeabi_dsub>
 80081f0:	4622      	mov	r2, r4
 80081f2:	462b      	mov	r3, r5
 80081f4:	f7f8 f9f8 	bl	80005e8 <__aeabi_dmul>
 80081f8:	a333      	add	r3, pc, #204	; (adr r3, 80082c8 <__kernel_cos+0x168>)
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	f7f8 f83d 	bl	800027c <__adddf3>
 8008202:	4622      	mov	r2, r4
 8008204:	462b      	mov	r3, r5
 8008206:	f7f8 f9ef 	bl	80005e8 <__aeabi_dmul>
 800820a:	4622      	mov	r2, r4
 800820c:	462b      	mov	r3, r5
 800820e:	f7f8 f9eb 	bl	80005e8 <__aeabi_dmul>
 8008212:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008216:	4604      	mov	r4, r0
 8008218:	460d      	mov	r5, r1
 800821a:	4630      	mov	r0, r6
 800821c:	4639      	mov	r1, r7
 800821e:	f7f8 f9e3 	bl	80005e8 <__aeabi_dmul>
 8008222:	460b      	mov	r3, r1
 8008224:	4602      	mov	r2, r0
 8008226:	4629      	mov	r1, r5
 8008228:	4620      	mov	r0, r4
 800822a:	f7f8 f825 	bl	8000278 <__aeabi_dsub>
 800822e:	4b2b      	ldr	r3, [pc, #172]	; (80082dc <__kernel_cos+0x17c>)
 8008230:	4598      	cmp	r8, r3
 8008232:	4606      	mov	r6, r0
 8008234:	460f      	mov	r7, r1
 8008236:	dc10      	bgt.n	800825a <__kernel_cos+0xfa>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4650      	mov	r0, sl
 800823e:	4659      	mov	r1, fp
 8008240:	f7f8 f81a 	bl	8000278 <__aeabi_dsub>
 8008244:	460b      	mov	r3, r1
 8008246:	4926      	ldr	r1, [pc, #152]	; (80082e0 <__kernel_cos+0x180>)
 8008248:	4602      	mov	r2, r0
 800824a:	2000      	movs	r0, #0
 800824c:	f7f8 f814 	bl	8000278 <__aeabi_dsub>
 8008250:	ec41 0b10 	vmov	d0, r0, r1
 8008254:	b003      	add	sp, #12
 8008256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825a:	4b22      	ldr	r3, [pc, #136]	; (80082e4 <__kernel_cos+0x184>)
 800825c:	4920      	ldr	r1, [pc, #128]	; (80082e0 <__kernel_cos+0x180>)
 800825e:	4598      	cmp	r8, r3
 8008260:	bfcc      	ite	gt
 8008262:	4d21      	ldrgt	r5, [pc, #132]	; (80082e8 <__kernel_cos+0x188>)
 8008264:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008268:	2400      	movs	r4, #0
 800826a:	4622      	mov	r2, r4
 800826c:	462b      	mov	r3, r5
 800826e:	2000      	movs	r0, #0
 8008270:	f7f8 f802 	bl	8000278 <__aeabi_dsub>
 8008274:	4622      	mov	r2, r4
 8008276:	4680      	mov	r8, r0
 8008278:	4689      	mov	r9, r1
 800827a:	462b      	mov	r3, r5
 800827c:	4650      	mov	r0, sl
 800827e:	4659      	mov	r1, fp
 8008280:	f7f7 fffa 	bl	8000278 <__aeabi_dsub>
 8008284:	4632      	mov	r2, r6
 8008286:	463b      	mov	r3, r7
 8008288:	f7f7 fff6 	bl	8000278 <__aeabi_dsub>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4640      	mov	r0, r8
 8008292:	4649      	mov	r1, r9
 8008294:	e7da      	b.n	800824c <__kernel_cos+0xec>
 8008296:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80082d0 <__kernel_cos+0x170>
 800829a:	e7db      	b.n	8008254 <__kernel_cos+0xf4>
 800829c:	f3af 8000 	nop.w
 80082a0:	be8838d4 	.word	0xbe8838d4
 80082a4:	bda8fae9 	.word	0xbda8fae9
 80082a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80082ac:	3e21ee9e 	.word	0x3e21ee9e
 80082b0:	809c52ad 	.word	0x809c52ad
 80082b4:	3e927e4f 	.word	0x3e927e4f
 80082b8:	19cb1590 	.word	0x19cb1590
 80082bc:	3efa01a0 	.word	0x3efa01a0
 80082c0:	16c15177 	.word	0x16c15177
 80082c4:	3f56c16c 	.word	0x3f56c16c
 80082c8:	5555554c 	.word	0x5555554c
 80082cc:	3fa55555 	.word	0x3fa55555
 80082d0:	00000000 	.word	0x00000000
 80082d4:	3ff00000 	.word	0x3ff00000
 80082d8:	3fe00000 	.word	0x3fe00000
 80082dc:	3fd33332 	.word	0x3fd33332
 80082e0:	3ff00000 	.word	0x3ff00000
 80082e4:	3fe90000 	.word	0x3fe90000
 80082e8:	3fd20000 	.word	0x3fd20000
 80082ec:	00000000 	.word	0x00000000

080082f0 <__kernel_sin>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	ed2d 8b04 	vpush	{d8-d9}
 80082f8:	eeb0 8a41 	vmov.f32	s16, s2
 80082fc:	eef0 8a61 	vmov.f32	s17, s3
 8008300:	ec55 4b10 	vmov	r4, r5, d0
 8008304:	b083      	sub	sp, #12
 8008306:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800830a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800830e:	9001      	str	r0, [sp, #4]
 8008310:	da06      	bge.n	8008320 <__kernel_sin+0x30>
 8008312:	ee10 0a10 	vmov	r0, s0
 8008316:	4629      	mov	r1, r5
 8008318:	f7f8 fc16 	bl	8000b48 <__aeabi_d2iz>
 800831c:	2800      	cmp	r0, #0
 800831e:	d051      	beq.n	80083c4 <__kernel_sin+0xd4>
 8008320:	4622      	mov	r2, r4
 8008322:	462b      	mov	r3, r5
 8008324:	4620      	mov	r0, r4
 8008326:	4629      	mov	r1, r5
 8008328:	f7f8 f95e 	bl	80005e8 <__aeabi_dmul>
 800832c:	4682      	mov	sl, r0
 800832e:	468b      	mov	fp, r1
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4620      	mov	r0, r4
 8008336:	4629      	mov	r1, r5
 8008338:	f7f8 f956 	bl	80005e8 <__aeabi_dmul>
 800833c:	a341      	add	r3, pc, #260	; (adr r3, 8008444 <__kernel_sin+0x154>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	4680      	mov	r8, r0
 8008344:	4689      	mov	r9, r1
 8008346:	4650      	mov	r0, sl
 8008348:	4659      	mov	r1, fp
 800834a:	f7f8 f94d 	bl	80005e8 <__aeabi_dmul>
 800834e:	a33f      	add	r3, pc, #252	; (adr r3, 800844c <__kernel_sin+0x15c>)
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	f7f7 ff90 	bl	8000278 <__aeabi_dsub>
 8008358:	4652      	mov	r2, sl
 800835a:	465b      	mov	r3, fp
 800835c:	f7f8 f944 	bl	80005e8 <__aeabi_dmul>
 8008360:	a33c      	add	r3, pc, #240	; (adr r3, 8008454 <__kernel_sin+0x164>)
 8008362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008366:	f7f7 ff89 	bl	800027c <__adddf3>
 800836a:	4652      	mov	r2, sl
 800836c:	465b      	mov	r3, fp
 800836e:	f7f8 f93b 	bl	80005e8 <__aeabi_dmul>
 8008372:	a33a      	add	r3, pc, #232	; (adr r3, 800845c <__kernel_sin+0x16c>)
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	f7f7 ff7e 	bl	8000278 <__aeabi_dsub>
 800837c:	4652      	mov	r2, sl
 800837e:	465b      	mov	r3, fp
 8008380:	f7f8 f932 	bl	80005e8 <__aeabi_dmul>
 8008384:	a337      	add	r3, pc, #220	; (adr r3, 8008464 <__kernel_sin+0x174>)
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	f7f7 ff77 	bl	800027c <__adddf3>
 800838e:	9b01      	ldr	r3, [sp, #4]
 8008390:	4606      	mov	r6, r0
 8008392:	460f      	mov	r7, r1
 8008394:	b9eb      	cbnz	r3, 80083d2 <__kernel_sin+0xe2>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4650      	mov	r0, sl
 800839c:	4659      	mov	r1, fp
 800839e:	f7f8 f923 	bl	80005e8 <__aeabi_dmul>
 80083a2:	a325      	add	r3, pc, #148	; (adr r3, 8008438 <__kernel_sin+0x148>)
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f7f7 ff66 	bl	8000278 <__aeabi_dsub>
 80083ac:	4642      	mov	r2, r8
 80083ae:	464b      	mov	r3, r9
 80083b0:	f7f8 f91a 	bl	80005e8 <__aeabi_dmul>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4620      	mov	r0, r4
 80083ba:	4629      	mov	r1, r5
 80083bc:	f7f7 ff5e 	bl	800027c <__adddf3>
 80083c0:	4604      	mov	r4, r0
 80083c2:	460d      	mov	r5, r1
 80083c4:	ec45 4b10 	vmov	d0, r4, r5
 80083c8:	b003      	add	sp, #12
 80083ca:	ecbd 8b04 	vpop	{d8-d9}
 80083ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d2:	4b1b      	ldr	r3, [pc, #108]	; (8008440 <__kernel_sin+0x150>)
 80083d4:	ec51 0b18 	vmov	r0, r1, d8
 80083d8:	2200      	movs	r2, #0
 80083da:	f7f8 f905 	bl	80005e8 <__aeabi_dmul>
 80083de:	4632      	mov	r2, r6
 80083e0:	ec41 0b19 	vmov	d9, r0, r1
 80083e4:	463b      	mov	r3, r7
 80083e6:	4640      	mov	r0, r8
 80083e8:	4649      	mov	r1, r9
 80083ea:	f7f8 f8fd 	bl	80005e8 <__aeabi_dmul>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	ec51 0b19 	vmov	r0, r1, d9
 80083f6:	f7f7 ff3f 	bl	8000278 <__aeabi_dsub>
 80083fa:	4652      	mov	r2, sl
 80083fc:	465b      	mov	r3, fp
 80083fe:	f7f8 f8f3 	bl	80005e8 <__aeabi_dmul>
 8008402:	ec53 2b18 	vmov	r2, r3, d8
 8008406:	f7f7 ff37 	bl	8000278 <__aeabi_dsub>
 800840a:	a30b      	add	r3, pc, #44	; (adr r3, 8008438 <__kernel_sin+0x148>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	4606      	mov	r6, r0
 8008412:	460f      	mov	r7, r1
 8008414:	4640      	mov	r0, r8
 8008416:	4649      	mov	r1, r9
 8008418:	f7f8 f8e6 	bl	80005e8 <__aeabi_dmul>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4630      	mov	r0, r6
 8008422:	4639      	mov	r1, r7
 8008424:	f7f7 ff2a 	bl	800027c <__adddf3>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4620      	mov	r0, r4
 800842e:	4629      	mov	r1, r5
 8008430:	f7f7 ff22 	bl	8000278 <__aeabi_dsub>
 8008434:	e7c4      	b.n	80083c0 <__kernel_sin+0xd0>
 8008436:	bf00      	nop
 8008438:	55555549 	.word	0x55555549
 800843c:	3fc55555 	.word	0x3fc55555
 8008440:	3fe00000 	.word	0x3fe00000
 8008444:	5acfd57c 	.word	0x5acfd57c
 8008448:	3de5d93a 	.word	0x3de5d93a
 800844c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008450:	3e5ae5e6 	.word	0x3e5ae5e6
 8008454:	57b1fe7d 	.word	0x57b1fe7d
 8008458:	3ec71de3 	.word	0x3ec71de3
 800845c:	19c161d5 	.word	0x19c161d5
 8008460:	3f2a01a0 	.word	0x3f2a01a0
 8008464:	1110f8a6 	.word	0x1110f8a6
 8008468:	3f811111 	.word	0x3f811111
 800846c:	00000000 	.word	0x00000000

08008470 <__ieee754_asin>:
 8008470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008474:	ed2d 8b04 	vpush	{d8-d9}
 8008478:	ec55 4b10 	vmov	r4, r5, d0
 800847c:	4bcc      	ldr	r3, [pc, #816]	; (80087b0 <__ieee754_asin+0x340>)
 800847e:	b083      	sub	sp, #12
 8008480:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008484:	4598      	cmp	r8, r3
 8008486:	9501      	str	r5, [sp, #4]
 8008488:	dd33      	ble.n	80084f2 <__ieee754_asin+0x82>
 800848a:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800848e:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8008492:	ea58 0804 	orrs.w	r8, r8, r4
 8008496:	d117      	bne.n	80084c8 <__ieee754_asin+0x58>
 8008498:	a3ab      	add	r3, pc, #684	; (adr r3, 8008748 <__ieee754_asin+0x2d8>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	ee10 0a10 	vmov	r0, s0
 80084a2:	4629      	mov	r1, r5
 80084a4:	f7f8 f8a0 	bl	80005e8 <__aeabi_dmul>
 80084a8:	a3a9      	add	r3, pc, #676	; (adr r3, 8008750 <__ieee754_asin+0x2e0>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	4606      	mov	r6, r0
 80084b0:	460f      	mov	r7, r1
 80084b2:	4620      	mov	r0, r4
 80084b4:	4629      	mov	r1, r5
 80084b6:	f7f8 f897 	bl	80005e8 <__aeabi_dmul>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4630      	mov	r0, r6
 80084c0:	4639      	mov	r1, r7
 80084c2:	f7f7 fedb 	bl	800027c <__adddf3>
 80084c6:	e00b      	b.n	80084e0 <__ieee754_asin+0x70>
 80084c8:	ee10 2a10 	vmov	r2, s0
 80084cc:	462b      	mov	r3, r5
 80084ce:	ee10 0a10 	vmov	r0, s0
 80084d2:	4629      	mov	r1, r5
 80084d4:	f7f7 fed0 	bl	8000278 <__aeabi_dsub>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	f7f8 f9ae 	bl	800083c <__aeabi_ddiv>
 80084e0:	4604      	mov	r4, r0
 80084e2:	460d      	mov	r5, r1
 80084e4:	ec45 4b10 	vmov	d0, r4, r5
 80084e8:	b003      	add	sp, #12
 80084ea:	ecbd 8b04 	vpop	{d8-d9}
 80084ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f2:	4bb0      	ldr	r3, [pc, #704]	; (80087b4 <__ieee754_asin+0x344>)
 80084f4:	4598      	cmp	r8, r3
 80084f6:	dc11      	bgt.n	800851c <__ieee754_asin+0xac>
 80084f8:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80084fc:	f280 80ae 	bge.w	800865c <__ieee754_asin+0x1ec>
 8008500:	a395      	add	r3, pc, #596	; (adr r3, 8008758 <__ieee754_asin+0x2e8>)
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	ee10 0a10 	vmov	r0, s0
 800850a:	4629      	mov	r1, r5
 800850c:	f7f7 feb6 	bl	800027c <__adddf3>
 8008510:	4ba9      	ldr	r3, [pc, #676]	; (80087b8 <__ieee754_asin+0x348>)
 8008512:	2200      	movs	r2, #0
 8008514:	f7f8 faf8 	bl	8000b08 <__aeabi_dcmpgt>
 8008518:	2800      	cmp	r0, #0
 800851a:	d1e3      	bne.n	80084e4 <__ieee754_asin+0x74>
 800851c:	ec45 4b10 	vmov	d0, r4, r5
 8008520:	f7ff fcd6 	bl	8007ed0 <fabs>
 8008524:	49a4      	ldr	r1, [pc, #656]	; (80087b8 <__ieee754_asin+0x348>)
 8008526:	ec53 2b10 	vmov	r2, r3, d0
 800852a:	2000      	movs	r0, #0
 800852c:	f7f7 fea4 	bl	8000278 <__aeabi_dsub>
 8008530:	4ba2      	ldr	r3, [pc, #648]	; (80087bc <__ieee754_asin+0x34c>)
 8008532:	2200      	movs	r2, #0
 8008534:	f7f8 f858 	bl	80005e8 <__aeabi_dmul>
 8008538:	a389      	add	r3, pc, #548	; (adr r3, 8008760 <__ieee754_asin+0x2f0>)
 800853a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853e:	4604      	mov	r4, r0
 8008540:	460d      	mov	r5, r1
 8008542:	f7f8 f851 	bl	80005e8 <__aeabi_dmul>
 8008546:	a388      	add	r3, pc, #544	; (adr r3, 8008768 <__ieee754_asin+0x2f8>)
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	f7f7 fe96 	bl	800027c <__adddf3>
 8008550:	4622      	mov	r2, r4
 8008552:	462b      	mov	r3, r5
 8008554:	f7f8 f848 	bl	80005e8 <__aeabi_dmul>
 8008558:	a385      	add	r3, pc, #532	; (adr r3, 8008770 <__ieee754_asin+0x300>)
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	f7f7 fe8b 	bl	8000278 <__aeabi_dsub>
 8008562:	4622      	mov	r2, r4
 8008564:	462b      	mov	r3, r5
 8008566:	f7f8 f83f 	bl	80005e8 <__aeabi_dmul>
 800856a:	a383      	add	r3, pc, #524	; (adr r3, 8008778 <__ieee754_asin+0x308>)
 800856c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008570:	f7f7 fe84 	bl	800027c <__adddf3>
 8008574:	4622      	mov	r2, r4
 8008576:	462b      	mov	r3, r5
 8008578:	f7f8 f836 	bl	80005e8 <__aeabi_dmul>
 800857c:	a380      	add	r3, pc, #512	; (adr r3, 8008780 <__ieee754_asin+0x310>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	f7f7 fe79 	bl	8000278 <__aeabi_dsub>
 8008586:	4622      	mov	r2, r4
 8008588:	462b      	mov	r3, r5
 800858a:	f7f8 f82d 	bl	80005e8 <__aeabi_dmul>
 800858e:	a37e      	add	r3, pc, #504	; (adr r3, 8008788 <__ieee754_asin+0x318>)
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f7f7 fe72 	bl	800027c <__adddf3>
 8008598:	4622      	mov	r2, r4
 800859a:	462b      	mov	r3, r5
 800859c:	f7f8 f824 	bl	80005e8 <__aeabi_dmul>
 80085a0:	a37b      	add	r3, pc, #492	; (adr r3, 8008790 <__ieee754_asin+0x320>)
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	ec41 0b18 	vmov	d8, r0, r1
 80085aa:	4620      	mov	r0, r4
 80085ac:	4629      	mov	r1, r5
 80085ae:	f7f8 f81b 	bl	80005e8 <__aeabi_dmul>
 80085b2:	a379      	add	r3, pc, #484	; (adr r3, 8008798 <__ieee754_asin+0x328>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f7f7 fe5e 	bl	8000278 <__aeabi_dsub>
 80085bc:	4622      	mov	r2, r4
 80085be:	462b      	mov	r3, r5
 80085c0:	f7f8 f812 	bl	80005e8 <__aeabi_dmul>
 80085c4:	a376      	add	r3, pc, #472	; (adr r3, 80087a0 <__ieee754_asin+0x330>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	f7f7 fe57 	bl	800027c <__adddf3>
 80085ce:	4622      	mov	r2, r4
 80085d0:	462b      	mov	r3, r5
 80085d2:	f7f8 f809 	bl	80005e8 <__aeabi_dmul>
 80085d6:	a374      	add	r3, pc, #464	; (adr r3, 80087a8 <__ieee754_asin+0x338>)
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	f7f7 fe4c 	bl	8000278 <__aeabi_dsub>
 80085e0:	4622      	mov	r2, r4
 80085e2:	462b      	mov	r3, r5
 80085e4:	f7f8 f800 	bl	80005e8 <__aeabi_dmul>
 80085e8:	4b73      	ldr	r3, [pc, #460]	; (80087b8 <__ieee754_asin+0x348>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	f7f7 fe46 	bl	800027c <__adddf3>
 80085f0:	ec45 4b10 	vmov	d0, r4, r5
 80085f4:	4606      	mov	r6, r0
 80085f6:	460f      	mov	r7, r1
 80085f8:	f7ff fcd6 	bl	8007fa8 <__ieee754_sqrt>
 80085fc:	4b70      	ldr	r3, [pc, #448]	; (80087c0 <__ieee754_asin+0x350>)
 80085fe:	4598      	cmp	r8, r3
 8008600:	ec5b ab10 	vmov	sl, fp, d0
 8008604:	f340 80de 	ble.w	80087c4 <__ieee754_asin+0x354>
 8008608:	4632      	mov	r2, r6
 800860a:	463b      	mov	r3, r7
 800860c:	ec51 0b18 	vmov	r0, r1, d8
 8008610:	f7f8 f914 	bl	800083c <__aeabi_ddiv>
 8008614:	4652      	mov	r2, sl
 8008616:	465b      	mov	r3, fp
 8008618:	f7f7 ffe6 	bl	80005e8 <__aeabi_dmul>
 800861c:	4652      	mov	r2, sl
 800861e:	465b      	mov	r3, fp
 8008620:	f7f7 fe2c 	bl	800027c <__adddf3>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	f7f7 fe28 	bl	800027c <__adddf3>
 800862c:	a348      	add	r3, pc, #288	; (adr r3, 8008750 <__ieee754_asin+0x2e0>)
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	f7f7 fe21 	bl	8000278 <__aeabi_dsub>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	a143      	add	r1, pc, #268	; (adr r1, 8008748 <__ieee754_asin+0x2d8>)
 800863c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008640:	f7f7 fe1a 	bl	8000278 <__aeabi_dsub>
 8008644:	9b01      	ldr	r3, [sp, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	bfdc      	itt	le
 800864a:	4602      	movle	r2, r0
 800864c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008650:	4604      	mov	r4, r0
 8008652:	460d      	mov	r5, r1
 8008654:	bfdc      	itt	le
 8008656:	4614      	movle	r4, r2
 8008658:	461d      	movle	r5, r3
 800865a:	e743      	b.n	80084e4 <__ieee754_asin+0x74>
 800865c:	ee10 2a10 	vmov	r2, s0
 8008660:	ee10 0a10 	vmov	r0, s0
 8008664:	462b      	mov	r3, r5
 8008666:	4629      	mov	r1, r5
 8008668:	f7f7 ffbe 	bl	80005e8 <__aeabi_dmul>
 800866c:	a33c      	add	r3, pc, #240	; (adr r3, 8008760 <__ieee754_asin+0x2f0>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	4606      	mov	r6, r0
 8008674:	460f      	mov	r7, r1
 8008676:	f7f7 ffb7 	bl	80005e8 <__aeabi_dmul>
 800867a:	a33b      	add	r3, pc, #236	; (adr r3, 8008768 <__ieee754_asin+0x2f8>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f7f7 fdfc 	bl	800027c <__adddf3>
 8008684:	4632      	mov	r2, r6
 8008686:	463b      	mov	r3, r7
 8008688:	f7f7 ffae 	bl	80005e8 <__aeabi_dmul>
 800868c:	a338      	add	r3, pc, #224	; (adr r3, 8008770 <__ieee754_asin+0x300>)
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	f7f7 fdf1 	bl	8000278 <__aeabi_dsub>
 8008696:	4632      	mov	r2, r6
 8008698:	463b      	mov	r3, r7
 800869a:	f7f7 ffa5 	bl	80005e8 <__aeabi_dmul>
 800869e:	a336      	add	r3, pc, #216	; (adr r3, 8008778 <__ieee754_asin+0x308>)
 80086a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a4:	f7f7 fdea 	bl	800027c <__adddf3>
 80086a8:	4632      	mov	r2, r6
 80086aa:	463b      	mov	r3, r7
 80086ac:	f7f7 ff9c 	bl	80005e8 <__aeabi_dmul>
 80086b0:	a333      	add	r3, pc, #204	; (adr r3, 8008780 <__ieee754_asin+0x310>)
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f7f7 fddf 	bl	8000278 <__aeabi_dsub>
 80086ba:	4632      	mov	r2, r6
 80086bc:	463b      	mov	r3, r7
 80086be:	f7f7 ff93 	bl	80005e8 <__aeabi_dmul>
 80086c2:	a331      	add	r3, pc, #196	; (adr r3, 8008788 <__ieee754_asin+0x318>)
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	f7f7 fdd8 	bl	800027c <__adddf3>
 80086cc:	4632      	mov	r2, r6
 80086ce:	463b      	mov	r3, r7
 80086d0:	f7f7 ff8a 	bl	80005e8 <__aeabi_dmul>
 80086d4:	a32e      	add	r3, pc, #184	; (adr r3, 8008790 <__ieee754_asin+0x320>)
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	4680      	mov	r8, r0
 80086dc:	4689      	mov	r9, r1
 80086de:	4630      	mov	r0, r6
 80086e0:	4639      	mov	r1, r7
 80086e2:	f7f7 ff81 	bl	80005e8 <__aeabi_dmul>
 80086e6:	a32c      	add	r3, pc, #176	; (adr r3, 8008798 <__ieee754_asin+0x328>)
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	f7f7 fdc4 	bl	8000278 <__aeabi_dsub>
 80086f0:	4632      	mov	r2, r6
 80086f2:	463b      	mov	r3, r7
 80086f4:	f7f7 ff78 	bl	80005e8 <__aeabi_dmul>
 80086f8:	a329      	add	r3, pc, #164	; (adr r3, 80087a0 <__ieee754_asin+0x330>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 fdbd 	bl	800027c <__adddf3>
 8008702:	4632      	mov	r2, r6
 8008704:	463b      	mov	r3, r7
 8008706:	f7f7 ff6f 	bl	80005e8 <__aeabi_dmul>
 800870a:	a327      	add	r3, pc, #156	; (adr r3, 80087a8 <__ieee754_asin+0x338>)
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f7f7 fdb2 	bl	8000278 <__aeabi_dsub>
 8008714:	4632      	mov	r2, r6
 8008716:	463b      	mov	r3, r7
 8008718:	f7f7 ff66 	bl	80005e8 <__aeabi_dmul>
 800871c:	4b26      	ldr	r3, [pc, #152]	; (80087b8 <__ieee754_asin+0x348>)
 800871e:	2200      	movs	r2, #0
 8008720:	f7f7 fdac 	bl	800027c <__adddf3>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4640      	mov	r0, r8
 800872a:	4649      	mov	r1, r9
 800872c:	f7f8 f886 	bl	800083c <__aeabi_ddiv>
 8008730:	4622      	mov	r2, r4
 8008732:	462b      	mov	r3, r5
 8008734:	f7f7 ff58 	bl	80005e8 <__aeabi_dmul>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	4620      	mov	r0, r4
 800873e:	4629      	mov	r1, r5
 8008740:	e6bf      	b.n	80084c2 <__ieee754_asin+0x52>
 8008742:	bf00      	nop
 8008744:	f3af 8000 	nop.w
 8008748:	54442d18 	.word	0x54442d18
 800874c:	3ff921fb 	.word	0x3ff921fb
 8008750:	33145c07 	.word	0x33145c07
 8008754:	3c91a626 	.word	0x3c91a626
 8008758:	8800759c 	.word	0x8800759c
 800875c:	7e37e43c 	.word	0x7e37e43c
 8008760:	0dfdf709 	.word	0x0dfdf709
 8008764:	3f023de1 	.word	0x3f023de1
 8008768:	7501b288 	.word	0x7501b288
 800876c:	3f49efe0 	.word	0x3f49efe0
 8008770:	b5688f3b 	.word	0xb5688f3b
 8008774:	3fa48228 	.word	0x3fa48228
 8008778:	0e884455 	.word	0x0e884455
 800877c:	3fc9c155 	.word	0x3fc9c155
 8008780:	03eb6f7d 	.word	0x03eb6f7d
 8008784:	3fd4d612 	.word	0x3fd4d612
 8008788:	55555555 	.word	0x55555555
 800878c:	3fc55555 	.word	0x3fc55555
 8008790:	b12e9282 	.word	0xb12e9282
 8008794:	3fb3b8c5 	.word	0x3fb3b8c5
 8008798:	1b8d0159 	.word	0x1b8d0159
 800879c:	3fe6066c 	.word	0x3fe6066c
 80087a0:	9c598ac8 	.word	0x9c598ac8
 80087a4:	40002ae5 	.word	0x40002ae5
 80087a8:	1c8a2d4b 	.word	0x1c8a2d4b
 80087ac:	40033a27 	.word	0x40033a27
 80087b0:	3fefffff 	.word	0x3fefffff
 80087b4:	3fdfffff 	.word	0x3fdfffff
 80087b8:	3ff00000 	.word	0x3ff00000
 80087bc:	3fe00000 	.word	0x3fe00000
 80087c0:	3fef3332 	.word	0x3fef3332
 80087c4:	ee10 2a10 	vmov	r2, s0
 80087c8:	ee10 0a10 	vmov	r0, s0
 80087cc:	465b      	mov	r3, fp
 80087ce:	4659      	mov	r1, fp
 80087d0:	f7f7 fd54 	bl	800027c <__adddf3>
 80087d4:	4632      	mov	r2, r6
 80087d6:	463b      	mov	r3, r7
 80087d8:	ec41 0b19 	vmov	d9, r0, r1
 80087dc:	ec51 0b18 	vmov	r0, r1, d8
 80087e0:	f7f8 f82c 	bl	800083c <__aeabi_ddiv>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	ec51 0b19 	vmov	r0, r1, d9
 80087ec:	f7f7 fefc 	bl	80005e8 <__aeabi_dmul>
 80087f0:	f04f 0800 	mov.w	r8, #0
 80087f4:	4606      	mov	r6, r0
 80087f6:	460f      	mov	r7, r1
 80087f8:	4642      	mov	r2, r8
 80087fa:	465b      	mov	r3, fp
 80087fc:	4640      	mov	r0, r8
 80087fe:	4659      	mov	r1, fp
 8008800:	f7f7 fef2 	bl	80005e8 <__aeabi_dmul>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4620      	mov	r0, r4
 800880a:	4629      	mov	r1, r5
 800880c:	f7f7 fd34 	bl	8000278 <__aeabi_dsub>
 8008810:	4642      	mov	r2, r8
 8008812:	4604      	mov	r4, r0
 8008814:	460d      	mov	r5, r1
 8008816:	465b      	mov	r3, fp
 8008818:	4650      	mov	r0, sl
 800881a:	4659      	mov	r1, fp
 800881c:	f7f7 fd2e 	bl	800027c <__adddf3>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	4620      	mov	r0, r4
 8008826:	4629      	mov	r1, r5
 8008828:	f7f8 f808 	bl	800083c <__aeabi_ddiv>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	f7f7 fd24 	bl	800027c <__adddf3>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	a113      	add	r1, pc, #76	; (adr r1, 8008888 <__ieee754_asin+0x418>)
 800883a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800883e:	f7f7 fd1b 	bl	8000278 <__aeabi_dsub>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4630      	mov	r0, r6
 8008848:	4639      	mov	r1, r7
 800884a:	f7f7 fd15 	bl	8000278 <__aeabi_dsub>
 800884e:	4642      	mov	r2, r8
 8008850:	4604      	mov	r4, r0
 8008852:	460d      	mov	r5, r1
 8008854:	465b      	mov	r3, fp
 8008856:	4640      	mov	r0, r8
 8008858:	4659      	mov	r1, fp
 800885a:	f7f7 fd0f 	bl	800027c <__adddf3>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	a10b      	add	r1, pc, #44	; (adr r1, 8008890 <__ieee754_asin+0x420>)
 8008864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008868:	f7f7 fd06 	bl	8000278 <__aeabi_dsub>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4620      	mov	r0, r4
 8008872:	4629      	mov	r1, r5
 8008874:	f7f7 fd00 	bl	8000278 <__aeabi_dsub>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	a104      	add	r1, pc, #16	; (adr r1, 8008890 <__ieee754_asin+0x420>)
 800887e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008882:	e6dd      	b.n	8008640 <__ieee754_asin+0x1d0>
 8008884:	f3af 8000 	nop.w
 8008888:	33145c07 	.word	0x33145c07
 800888c:	3c91a626 	.word	0x3c91a626
 8008890:	54442d18 	.word	0x54442d18
 8008894:	3fe921fb 	.word	0x3fe921fb

08008898 <__ieee754_atan2>:
 8008898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800889c:	ec57 6b11 	vmov	r6, r7, d1
 80088a0:	4273      	negs	r3, r6
 80088a2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008a20 <__ieee754_atan2+0x188>
 80088a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80088aa:	4333      	orrs	r3, r6
 80088ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80088b0:	4543      	cmp	r3, r8
 80088b2:	ec51 0b10 	vmov	r0, r1, d0
 80088b6:	ee11 5a10 	vmov	r5, s2
 80088ba:	d80a      	bhi.n	80088d2 <__ieee754_atan2+0x3a>
 80088bc:	4244      	negs	r4, r0
 80088be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80088c2:	4304      	orrs	r4, r0
 80088c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80088c8:	4544      	cmp	r4, r8
 80088ca:	ee10 9a10 	vmov	r9, s0
 80088ce:	468e      	mov	lr, r1
 80088d0:	d907      	bls.n	80088e2 <__ieee754_atan2+0x4a>
 80088d2:	4632      	mov	r2, r6
 80088d4:	463b      	mov	r3, r7
 80088d6:	f7f7 fcd1 	bl	800027c <__adddf3>
 80088da:	ec41 0b10 	vmov	d0, r0, r1
 80088de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80088e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80088ea:	4334      	orrs	r4, r6
 80088ec:	d103      	bne.n	80088f6 <__ieee754_atan2+0x5e>
 80088ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f2:	f000 baa1 	b.w	8008e38 <atan>
 80088f6:	17bc      	asrs	r4, r7, #30
 80088f8:	f004 0402 	and.w	r4, r4, #2
 80088fc:	ea53 0909 	orrs.w	r9, r3, r9
 8008900:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008904:	d107      	bne.n	8008916 <__ieee754_atan2+0x7e>
 8008906:	2c02      	cmp	r4, #2
 8008908:	d05f      	beq.n	80089ca <__ieee754_atan2+0x132>
 800890a:	2c03      	cmp	r4, #3
 800890c:	d1e5      	bne.n	80088da <__ieee754_atan2+0x42>
 800890e:	a140      	add	r1, pc, #256	; (adr r1, 8008a10 <__ieee754_atan2+0x178>)
 8008910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008914:	e7e1      	b.n	80088da <__ieee754_atan2+0x42>
 8008916:	4315      	orrs	r5, r2
 8008918:	d106      	bne.n	8008928 <__ieee754_atan2+0x90>
 800891a:	f1be 0f00 	cmp.w	lr, #0
 800891e:	da5f      	bge.n	80089e0 <__ieee754_atan2+0x148>
 8008920:	a13d      	add	r1, pc, #244	; (adr r1, 8008a18 <__ieee754_atan2+0x180>)
 8008922:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008926:	e7d8      	b.n	80088da <__ieee754_atan2+0x42>
 8008928:	4542      	cmp	r2, r8
 800892a:	d10f      	bne.n	800894c <__ieee754_atan2+0xb4>
 800892c:	4293      	cmp	r3, r2
 800892e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008932:	d107      	bne.n	8008944 <__ieee754_atan2+0xac>
 8008934:	2c02      	cmp	r4, #2
 8008936:	d84c      	bhi.n	80089d2 <__ieee754_atan2+0x13a>
 8008938:	4b33      	ldr	r3, [pc, #204]	; (8008a08 <__ieee754_atan2+0x170>)
 800893a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800893e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008942:	e7ca      	b.n	80088da <__ieee754_atan2+0x42>
 8008944:	2c02      	cmp	r4, #2
 8008946:	d848      	bhi.n	80089da <__ieee754_atan2+0x142>
 8008948:	4b30      	ldr	r3, [pc, #192]	; (8008a0c <__ieee754_atan2+0x174>)
 800894a:	e7f6      	b.n	800893a <__ieee754_atan2+0xa2>
 800894c:	4543      	cmp	r3, r8
 800894e:	d0e4      	beq.n	800891a <__ieee754_atan2+0x82>
 8008950:	1a9b      	subs	r3, r3, r2
 8008952:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008956:	ea4f 5223 	mov.w	r2, r3, asr #20
 800895a:	da1e      	bge.n	800899a <__ieee754_atan2+0x102>
 800895c:	2f00      	cmp	r7, #0
 800895e:	da01      	bge.n	8008964 <__ieee754_atan2+0xcc>
 8008960:	323c      	adds	r2, #60	; 0x3c
 8008962:	db1e      	blt.n	80089a2 <__ieee754_atan2+0x10a>
 8008964:	4632      	mov	r2, r6
 8008966:	463b      	mov	r3, r7
 8008968:	f7f7 ff68 	bl	800083c <__aeabi_ddiv>
 800896c:	ec41 0b10 	vmov	d0, r0, r1
 8008970:	f7ff faae 	bl	8007ed0 <fabs>
 8008974:	f000 fa60 	bl	8008e38 <atan>
 8008978:	ec51 0b10 	vmov	r0, r1, d0
 800897c:	2c01      	cmp	r4, #1
 800897e:	d013      	beq.n	80089a8 <__ieee754_atan2+0x110>
 8008980:	2c02      	cmp	r4, #2
 8008982:	d015      	beq.n	80089b0 <__ieee754_atan2+0x118>
 8008984:	2c00      	cmp	r4, #0
 8008986:	d0a8      	beq.n	80088da <__ieee754_atan2+0x42>
 8008988:	a317      	add	r3, pc, #92	; (adr r3, 80089e8 <__ieee754_atan2+0x150>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f7f7 fc73 	bl	8000278 <__aeabi_dsub>
 8008992:	a317      	add	r3, pc, #92	; (adr r3, 80089f0 <__ieee754_atan2+0x158>)
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	e014      	b.n	80089c4 <__ieee754_atan2+0x12c>
 800899a:	a117      	add	r1, pc, #92	; (adr r1, 80089f8 <__ieee754_atan2+0x160>)
 800899c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089a0:	e7ec      	b.n	800897c <__ieee754_atan2+0xe4>
 80089a2:	2000      	movs	r0, #0
 80089a4:	2100      	movs	r1, #0
 80089a6:	e7e9      	b.n	800897c <__ieee754_atan2+0xe4>
 80089a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089ac:	4619      	mov	r1, r3
 80089ae:	e794      	b.n	80088da <__ieee754_atan2+0x42>
 80089b0:	a30d      	add	r3, pc, #52	; (adr r3, 80089e8 <__ieee754_atan2+0x150>)
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	f7f7 fc5f 	bl	8000278 <__aeabi_dsub>
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	a10c      	add	r1, pc, #48	; (adr r1, 80089f0 <__ieee754_atan2+0x158>)
 80089c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089c4:	f7f7 fc58 	bl	8000278 <__aeabi_dsub>
 80089c8:	e787      	b.n	80088da <__ieee754_atan2+0x42>
 80089ca:	a109      	add	r1, pc, #36	; (adr r1, 80089f0 <__ieee754_atan2+0x158>)
 80089cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d0:	e783      	b.n	80088da <__ieee754_atan2+0x42>
 80089d2:	a10b      	add	r1, pc, #44	; (adr r1, 8008a00 <__ieee754_atan2+0x168>)
 80089d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d8:	e77f      	b.n	80088da <__ieee754_atan2+0x42>
 80089da:	2000      	movs	r0, #0
 80089dc:	2100      	movs	r1, #0
 80089de:	e77c      	b.n	80088da <__ieee754_atan2+0x42>
 80089e0:	a105      	add	r1, pc, #20	; (adr r1, 80089f8 <__ieee754_atan2+0x160>)
 80089e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089e6:	e778      	b.n	80088da <__ieee754_atan2+0x42>
 80089e8:	33145c07 	.word	0x33145c07
 80089ec:	3ca1a626 	.word	0x3ca1a626
 80089f0:	54442d18 	.word	0x54442d18
 80089f4:	400921fb 	.word	0x400921fb
 80089f8:	54442d18 	.word	0x54442d18
 80089fc:	3ff921fb 	.word	0x3ff921fb
 8008a00:	54442d18 	.word	0x54442d18
 8008a04:	3fe921fb 	.word	0x3fe921fb
 8008a08:	0800c6c0 	.word	0x0800c6c0
 8008a0c:	0800c6d8 	.word	0x0800c6d8
 8008a10:	54442d18 	.word	0x54442d18
 8008a14:	c00921fb 	.word	0xc00921fb
 8008a18:	54442d18 	.word	0x54442d18
 8008a1c:	bff921fb 	.word	0xbff921fb
 8008a20:	7ff00000 	.word	0x7ff00000
 8008a24:	00000000 	.word	0x00000000

08008a28 <__ieee754_rem_pio2>:
 8008a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2c:	ed2d 8b02 	vpush	{d8}
 8008a30:	ec55 4b10 	vmov	r4, r5, d0
 8008a34:	4bca      	ldr	r3, [pc, #808]	; (8008d60 <__ieee754_rem_pio2+0x338>)
 8008a36:	b08b      	sub	sp, #44	; 0x2c
 8008a38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008a3c:	4598      	cmp	r8, r3
 8008a3e:	4682      	mov	sl, r0
 8008a40:	9502      	str	r5, [sp, #8]
 8008a42:	dc08      	bgt.n	8008a56 <__ieee754_rem_pio2+0x2e>
 8008a44:	2200      	movs	r2, #0
 8008a46:	2300      	movs	r3, #0
 8008a48:	ed80 0b00 	vstr	d0, [r0]
 8008a4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008a50:	f04f 0b00 	mov.w	fp, #0
 8008a54:	e028      	b.n	8008aa8 <__ieee754_rem_pio2+0x80>
 8008a56:	4bc3      	ldr	r3, [pc, #780]	; (8008d64 <__ieee754_rem_pio2+0x33c>)
 8008a58:	4598      	cmp	r8, r3
 8008a5a:	dc78      	bgt.n	8008b4e <__ieee754_rem_pio2+0x126>
 8008a5c:	9b02      	ldr	r3, [sp, #8]
 8008a5e:	4ec2      	ldr	r6, [pc, #776]	; (8008d68 <__ieee754_rem_pio2+0x340>)
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	ee10 0a10 	vmov	r0, s0
 8008a66:	a3b0      	add	r3, pc, #704	; (adr r3, 8008d28 <__ieee754_rem_pio2+0x300>)
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	dd39      	ble.n	8008ae4 <__ieee754_rem_pio2+0xbc>
 8008a70:	f7f7 fc02 	bl	8000278 <__aeabi_dsub>
 8008a74:	45b0      	cmp	r8, r6
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	d01b      	beq.n	8008ab4 <__ieee754_rem_pio2+0x8c>
 8008a7c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008d30 <__ieee754_rem_pio2+0x308>)
 8008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a82:	f7f7 fbf9 	bl	8000278 <__aeabi_dsub>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	e9ca 2300 	strd	r2, r3, [sl]
 8008a8e:	4620      	mov	r0, r4
 8008a90:	4629      	mov	r1, r5
 8008a92:	f7f7 fbf1 	bl	8000278 <__aeabi_dsub>
 8008a96:	a3a6      	add	r3, pc, #664	; (adr r3, 8008d30 <__ieee754_rem_pio2+0x308>)
 8008a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9c:	f7f7 fbec 	bl	8000278 <__aeabi_dsub>
 8008aa0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008aa4:	f04f 0b01 	mov.w	fp, #1
 8008aa8:	4658      	mov	r0, fp
 8008aaa:	b00b      	add	sp, #44	; 0x2c
 8008aac:	ecbd 8b02 	vpop	{d8}
 8008ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008d38 <__ieee754_rem_pio2+0x310>)
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	f7f7 fbdd 	bl	8000278 <__aeabi_dsub>
 8008abe:	a3a0      	add	r3, pc, #640	; (adr r3, 8008d40 <__ieee754_rem_pio2+0x318>)
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	460d      	mov	r5, r1
 8008ac8:	f7f7 fbd6 	bl	8000278 <__aeabi_dsub>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	e9ca 2300 	strd	r2, r3, [sl]
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7f7 fbce 	bl	8000278 <__aeabi_dsub>
 8008adc:	a398      	add	r3, pc, #608	; (adr r3, 8008d40 <__ieee754_rem_pio2+0x318>)
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	e7db      	b.n	8008a9c <__ieee754_rem_pio2+0x74>
 8008ae4:	f7f7 fbca 	bl	800027c <__adddf3>
 8008ae8:	45b0      	cmp	r8, r6
 8008aea:	4604      	mov	r4, r0
 8008aec:	460d      	mov	r5, r1
 8008aee:	d016      	beq.n	8008b1e <__ieee754_rem_pio2+0xf6>
 8008af0:	a38f      	add	r3, pc, #572	; (adr r3, 8008d30 <__ieee754_rem_pio2+0x308>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f7f7 fbc1 	bl	800027c <__adddf3>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	e9ca 2300 	strd	r2, r3, [sl]
 8008b02:	4620      	mov	r0, r4
 8008b04:	4629      	mov	r1, r5
 8008b06:	f7f7 fbb7 	bl	8000278 <__aeabi_dsub>
 8008b0a:	a389      	add	r3, pc, #548	; (adr r3, 8008d30 <__ieee754_rem_pio2+0x308>)
 8008b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b10:	f7f7 fbb4 	bl	800027c <__adddf3>
 8008b14:	f04f 3bff 	mov.w	fp, #4294967295
 8008b18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008b1c:	e7c4      	b.n	8008aa8 <__ieee754_rem_pio2+0x80>
 8008b1e:	a386      	add	r3, pc, #536	; (adr r3, 8008d38 <__ieee754_rem_pio2+0x310>)
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f7f7 fbaa 	bl	800027c <__adddf3>
 8008b28:	a385      	add	r3, pc, #532	; (adr r3, 8008d40 <__ieee754_rem_pio2+0x318>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	460d      	mov	r5, r1
 8008b32:	f7f7 fba3 	bl	800027c <__adddf3>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	e9ca 2300 	strd	r2, r3, [sl]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7f7 fb99 	bl	8000278 <__aeabi_dsub>
 8008b46:	a37e      	add	r3, pc, #504	; (adr r3, 8008d40 <__ieee754_rem_pio2+0x318>)
 8008b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4c:	e7e0      	b.n	8008b10 <__ieee754_rem_pio2+0xe8>
 8008b4e:	4b87      	ldr	r3, [pc, #540]	; (8008d6c <__ieee754_rem_pio2+0x344>)
 8008b50:	4598      	cmp	r8, r3
 8008b52:	f300 80d8 	bgt.w	8008d06 <__ieee754_rem_pio2+0x2de>
 8008b56:	f7ff f9bb 	bl	8007ed0 <fabs>
 8008b5a:	ec55 4b10 	vmov	r4, r5, d0
 8008b5e:	ee10 0a10 	vmov	r0, s0
 8008b62:	a379      	add	r3, pc, #484	; (adr r3, 8008d48 <__ieee754_rem_pio2+0x320>)
 8008b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b68:	4629      	mov	r1, r5
 8008b6a:	f7f7 fd3d 	bl	80005e8 <__aeabi_dmul>
 8008b6e:	4b80      	ldr	r3, [pc, #512]	; (8008d70 <__ieee754_rem_pio2+0x348>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	f7f7 fb83 	bl	800027c <__adddf3>
 8008b76:	f7f7 ffe7 	bl	8000b48 <__aeabi_d2iz>
 8008b7a:	4683      	mov	fp, r0
 8008b7c:	f7f7 fcca 	bl	8000514 <__aeabi_i2d>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	ec43 2b18 	vmov	d8, r2, r3
 8008b88:	a367      	add	r3, pc, #412	; (adr r3, 8008d28 <__ieee754_rem_pio2+0x300>)
 8008b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8e:	f7f7 fd2b 	bl	80005e8 <__aeabi_dmul>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4620      	mov	r0, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	f7f7 fb6d 	bl	8000278 <__aeabi_dsub>
 8008b9e:	a364      	add	r3, pc, #400	; (adr r3, 8008d30 <__ieee754_rem_pio2+0x308>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	460f      	mov	r7, r1
 8008ba8:	ec51 0b18 	vmov	r0, r1, d8
 8008bac:	f7f7 fd1c 	bl	80005e8 <__aeabi_dmul>
 8008bb0:	f1bb 0f1f 	cmp.w	fp, #31
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	460d      	mov	r5, r1
 8008bb8:	dc0d      	bgt.n	8008bd6 <__ieee754_rem_pio2+0x1ae>
 8008bba:	4b6e      	ldr	r3, [pc, #440]	; (8008d74 <__ieee754_rem_pio2+0x34c>)
 8008bbc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc4:	4543      	cmp	r3, r8
 8008bc6:	d006      	beq.n	8008bd6 <__ieee754_rem_pio2+0x1ae>
 8008bc8:	4622      	mov	r2, r4
 8008bca:	462b      	mov	r3, r5
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 fb52 	bl	8000278 <__aeabi_dsub>
 8008bd4:	e00e      	b.n	8008bf4 <__ieee754_rem_pio2+0x1cc>
 8008bd6:	462b      	mov	r3, r5
 8008bd8:	4622      	mov	r2, r4
 8008bda:	4630      	mov	r0, r6
 8008bdc:	4639      	mov	r1, r7
 8008bde:	f7f7 fb4b 	bl	8000278 <__aeabi_dsub>
 8008be2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008be6:	9303      	str	r3, [sp, #12]
 8008be8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008bec:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008bf0:	2b10      	cmp	r3, #16
 8008bf2:	dc02      	bgt.n	8008bfa <__ieee754_rem_pio2+0x1d2>
 8008bf4:	e9ca 0100 	strd	r0, r1, [sl]
 8008bf8:	e039      	b.n	8008c6e <__ieee754_rem_pio2+0x246>
 8008bfa:	a34f      	add	r3, pc, #316	; (adr r3, 8008d38 <__ieee754_rem_pio2+0x310>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	ec51 0b18 	vmov	r0, r1, d8
 8008c04:	f7f7 fcf0 	bl	80005e8 <__aeabi_dmul>
 8008c08:	4604      	mov	r4, r0
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f7f7 fb30 	bl	8000278 <__aeabi_dsub>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4680      	mov	r8, r0
 8008c1e:	4689      	mov	r9, r1
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f7f7 fb28 	bl	8000278 <__aeabi_dsub>
 8008c28:	4622      	mov	r2, r4
 8008c2a:	462b      	mov	r3, r5
 8008c2c:	f7f7 fb24 	bl	8000278 <__aeabi_dsub>
 8008c30:	a343      	add	r3, pc, #268	; (adr r3, 8008d40 <__ieee754_rem_pio2+0x318>)
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	4604      	mov	r4, r0
 8008c38:	460d      	mov	r5, r1
 8008c3a:	ec51 0b18 	vmov	r0, r1, d8
 8008c3e:	f7f7 fcd3 	bl	80005e8 <__aeabi_dmul>
 8008c42:	4622      	mov	r2, r4
 8008c44:	462b      	mov	r3, r5
 8008c46:	f7f7 fb17 	bl	8000278 <__aeabi_dsub>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4604      	mov	r4, r0
 8008c50:	460d      	mov	r5, r1
 8008c52:	4640      	mov	r0, r8
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 fb0f 	bl	8000278 <__aeabi_dsub>
 8008c5a:	9a03      	ldr	r2, [sp, #12]
 8008c5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	2b31      	cmp	r3, #49	; 0x31
 8008c64:	dc24      	bgt.n	8008cb0 <__ieee754_rem_pio2+0x288>
 8008c66:	e9ca 0100 	strd	r0, r1, [sl]
 8008c6a:	4646      	mov	r6, r8
 8008c6c:	464f      	mov	r7, r9
 8008c6e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008c72:	4630      	mov	r0, r6
 8008c74:	4642      	mov	r2, r8
 8008c76:	464b      	mov	r3, r9
 8008c78:	4639      	mov	r1, r7
 8008c7a:	f7f7 fafd 	bl	8000278 <__aeabi_dsub>
 8008c7e:	462b      	mov	r3, r5
 8008c80:	4622      	mov	r2, r4
 8008c82:	f7f7 faf9 	bl	8000278 <__aeabi_dsub>
 8008c86:	9b02      	ldr	r3, [sp, #8]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c8e:	f6bf af0b 	bge.w	8008aa8 <__ieee754_rem_pio2+0x80>
 8008c92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c96:	f8ca 3004 	str.w	r3, [sl, #4]
 8008c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c9e:	f8ca 8000 	str.w	r8, [sl]
 8008ca2:	f8ca 0008 	str.w	r0, [sl, #8]
 8008ca6:	f8ca 300c 	str.w	r3, [sl, #12]
 8008caa:	f1cb 0b00 	rsb	fp, fp, #0
 8008cae:	e6fb      	b.n	8008aa8 <__ieee754_rem_pio2+0x80>
 8008cb0:	a327      	add	r3, pc, #156	; (adr r3, 8008d50 <__ieee754_rem_pio2+0x328>)
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	ec51 0b18 	vmov	r0, r1, d8
 8008cba:	f7f7 fc95 	bl	80005e8 <__aeabi_dmul>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4640      	mov	r0, r8
 8008cc8:	4649      	mov	r1, r9
 8008cca:	f7f7 fad5 	bl	8000278 <__aeabi_dsub>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460f      	mov	r7, r1
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	4649      	mov	r1, r9
 8008cda:	f7f7 facd 	bl	8000278 <__aeabi_dsub>
 8008cde:	4622      	mov	r2, r4
 8008ce0:	462b      	mov	r3, r5
 8008ce2:	f7f7 fac9 	bl	8000278 <__aeabi_dsub>
 8008ce6:	a31c      	add	r3, pc, #112	; (adr r3, 8008d58 <__ieee754_rem_pio2+0x330>)
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	4604      	mov	r4, r0
 8008cee:	460d      	mov	r5, r1
 8008cf0:	ec51 0b18 	vmov	r0, r1, d8
 8008cf4:	f7f7 fc78 	bl	80005e8 <__aeabi_dmul>
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	462b      	mov	r3, r5
 8008cfc:	f7f7 fabc 	bl	8000278 <__aeabi_dsub>
 8008d00:	4604      	mov	r4, r0
 8008d02:	460d      	mov	r5, r1
 8008d04:	e760      	b.n	8008bc8 <__ieee754_rem_pio2+0x1a0>
 8008d06:	4b1c      	ldr	r3, [pc, #112]	; (8008d78 <__ieee754_rem_pio2+0x350>)
 8008d08:	4598      	cmp	r8, r3
 8008d0a:	dd37      	ble.n	8008d7c <__ieee754_rem_pio2+0x354>
 8008d0c:	ee10 2a10 	vmov	r2, s0
 8008d10:	462b      	mov	r3, r5
 8008d12:	4620      	mov	r0, r4
 8008d14:	4629      	mov	r1, r5
 8008d16:	f7f7 faaf 	bl	8000278 <__aeabi_dsub>
 8008d1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008d1e:	e9ca 0100 	strd	r0, r1, [sl]
 8008d22:	e695      	b.n	8008a50 <__ieee754_rem_pio2+0x28>
 8008d24:	f3af 8000 	nop.w
 8008d28:	54400000 	.word	0x54400000
 8008d2c:	3ff921fb 	.word	0x3ff921fb
 8008d30:	1a626331 	.word	0x1a626331
 8008d34:	3dd0b461 	.word	0x3dd0b461
 8008d38:	1a600000 	.word	0x1a600000
 8008d3c:	3dd0b461 	.word	0x3dd0b461
 8008d40:	2e037073 	.word	0x2e037073
 8008d44:	3ba3198a 	.word	0x3ba3198a
 8008d48:	6dc9c883 	.word	0x6dc9c883
 8008d4c:	3fe45f30 	.word	0x3fe45f30
 8008d50:	2e000000 	.word	0x2e000000
 8008d54:	3ba3198a 	.word	0x3ba3198a
 8008d58:	252049c1 	.word	0x252049c1
 8008d5c:	397b839a 	.word	0x397b839a
 8008d60:	3fe921fb 	.word	0x3fe921fb
 8008d64:	4002d97b 	.word	0x4002d97b
 8008d68:	3ff921fb 	.word	0x3ff921fb
 8008d6c:	413921fb 	.word	0x413921fb
 8008d70:	3fe00000 	.word	0x3fe00000
 8008d74:	0800c6f0 	.word	0x0800c6f0
 8008d78:	7fefffff 	.word	0x7fefffff
 8008d7c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008d80:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8008d84:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008d88:	4620      	mov	r0, r4
 8008d8a:	460d      	mov	r5, r1
 8008d8c:	f7f7 fedc 	bl	8000b48 <__aeabi_d2iz>
 8008d90:	f7f7 fbc0 	bl	8000514 <__aeabi_i2d>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4620      	mov	r0, r4
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008da0:	f7f7 fa6a 	bl	8000278 <__aeabi_dsub>
 8008da4:	4b21      	ldr	r3, [pc, #132]	; (8008e2c <__ieee754_rem_pio2+0x404>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	f7f7 fc1e 	bl	80005e8 <__aeabi_dmul>
 8008dac:	460d      	mov	r5, r1
 8008dae:	4604      	mov	r4, r0
 8008db0:	f7f7 feca 	bl	8000b48 <__aeabi_d2iz>
 8008db4:	f7f7 fbae 	bl	8000514 <__aeabi_i2d>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008dc4:	f7f7 fa58 	bl	8000278 <__aeabi_dsub>
 8008dc8:	4b18      	ldr	r3, [pc, #96]	; (8008e2c <__ieee754_rem_pio2+0x404>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f7f7 fc0c 	bl	80005e8 <__aeabi_dmul>
 8008dd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008dd4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008dd8:	2703      	movs	r7, #3
 8008dda:	2400      	movs	r4, #0
 8008ddc:	2500      	movs	r5, #0
 8008dde:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008de2:	4622      	mov	r2, r4
 8008de4:	462b      	mov	r3, r5
 8008de6:	46b9      	mov	r9, r7
 8008de8:	3f01      	subs	r7, #1
 8008dea:	f7f7 fe65 	bl	8000ab8 <__aeabi_dcmpeq>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d1f5      	bne.n	8008dde <__ieee754_rem_pio2+0x3b6>
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <__ieee754_rem_pio2+0x408>)
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	2302      	movs	r3, #2
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	4632      	mov	r2, r6
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	4651      	mov	r1, sl
 8008e00:	a804      	add	r0, sp, #16
 8008e02:	f000 f9b9 	bl	8009178 <__kernel_rem_pio2>
 8008e06:	9b02      	ldr	r3, [sp, #8]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	4683      	mov	fp, r0
 8008e0c:	f6bf ae4c 	bge.w	8008aa8 <__ieee754_rem_pio2+0x80>
 8008e10:	e9da 2100 	ldrd	r2, r1, [sl]
 8008e14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e18:	e9ca 2300 	strd	r2, r3, [sl]
 8008e1c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008e20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e24:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008e28:	e73f      	b.n	8008caa <__ieee754_rem_pio2+0x282>
 8008e2a:	bf00      	nop
 8008e2c:	41700000 	.word	0x41700000
 8008e30:	0800c770 	.word	0x0800c770
 8008e34:	00000000 	.word	0x00000000

08008e38 <atan>:
 8008e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	ec55 4b10 	vmov	r4, r5, d0
 8008e40:	4bc3      	ldr	r3, [pc, #780]	; (8009150 <atan+0x318>)
 8008e42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008e46:	429e      	cmp	r6, r3
 8008e48:	46ab      	mov	fp, r5
 8008e4a:	dd18      	ble.n	8008e7e <atan+0x46>
 8008e4c:	4bc1      	ldr	r3, [pc, #772]	; (8009154 <atan+0x31c>)
 8008e4e:	429e      	cmp	r6, r3
 8008e50:	dc01      	bgt.n	8008e56 <atan+0x1e>
 8008e52:	d109      	bne.n	8008e68 <atan+0x30>
 8008e54:	b144      	cbz	r4, 8008e68 <atan+0x30>
 8008e56:	4622      	mov	r2, r4
 8008e58:	462b      	mov	r3, r5
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	f7f7 fa0d 	bl	800027c <__adddf3>
 8008e62:	4604      	mov	r4, r0
 8008e64:	460d      	mov	r5, r1
 8008e66:	e006      	b.n	8008e76 <atan+0x3e>
 8008e68:	f1bb 0f00 	cmp.w	fp, #0
 8008e6c:	f300 8131 	bgt.w	80090d2 <atan+0x29a>
 8008e70:	a59b      	add	r5, pc, #620	; (adr r5, 80090e0 <atan+0x2a8>)
 8008e72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e76:	ec45 4b10 	vmov	d0, r4, r5
 8008e7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7e:	4bb6      	ldr	r3, [pc, #728]	; (8009158 <atan+0x320>)
 8008e80:	429e      	cmp	r6, r3
 8008e82:	dc14      	bgt.n	8008eae <atan+0x76>
 8008e84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008e88:	429e      	cmp	r6, r3
 8008e8a:	dc0d      	bgt.n	8008ea8 <atan+0x70>
 8008e8c:	a396      	add	r3, pc, #600	; (adr r3, 80090e8 <atan+0x2b0>)
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	ee10 0a10 	vmov	r0, s0
 8008e96:	4629      	mov	r1, r5
 8008e98:	f7f7 f9f0 	bl	800027c <__adddf3>
 8008e9c:	4baf      	ldr	r3, [pc, #700]	; (800915c <atan+0x324>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f7f7 fe32 	bl	8000b08 <__aeabi_dcmpgt>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d1e6      	bne.n	8008e76 <atan+0x3e>
 8008ea8:	f04f 3aff 	mov.w	sl, #4294967295
 8008eac:	e02b      	b.n	8008f06 <atan+0xce>
 8008eae:	f7ff f80f 	bl	8007ed0 <fabs>
 8008eb2:	4bab      	ldr	r3, [pc, #684]	; (8009160 <atan+0x328>)
 8008eb4:	429e      	cmp	r6, r3
 8008eb6:	ec55 4b10 	vmov	r4, r5, d0
 8008eba:	f300 80bf 	bgt.w	800903c <atan+0x204>
 8008ebe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008ec2:	429e      	cmp	r6, r3
 8008ec4:	f300 80a0 	bgt.w	8009008 <atan+0x1d0>
 8008ec8:	ee10 2a10 	vmov	r2, s0
 8008ecc:	ee10 0a10 	vmov	r0, s0
 8008ed0:	462b      	mov	r3, r5
 8008ed2:	4629      	mov	r1, r5
 8008ed4:	f7f7 f9d2 	bl	800027c <__adddf3>
 8008ed8:	4ba0      	ldr	r3, [pc, #640]	; (800915c <atan+0x324>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	f7f7 f9cc 	bl	8000278 <__aeabi_dsub>
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460f      	mov	r7, r1
 8008ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008eea:	4620      	mov	r0, r4
 8008eec:	4629      	mov	r1, r5
 8008eee:	f7f7 f9c5 	bl	800027c <__adddf3>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	4639      	mov	r1, r7
 8008efa:	f7f7 fc9f 	bl	800083c <__aeabi_ddiv>
 8008efe:	f04f 0a00 	mov.w	sl, #0
 8008f02:	4604      	mov	r4, r0
 8008f04:	460d      	mov	r5, r1
 8008f06:	4622      	mov	r2, r4
 8008f08:	462b      	mov	r3, r5
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	f7f7 fb6b 	bl	80005e8 <__aeabi_dmul>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4680      	mov	r8, r0
 8008f18:	4689      	mov	r9, r1
 8008f1a:	f7f7 fb65 	bl	80005e8 <__aeabi_dmul>
 8008f1e:	a374      	add	r3, pc, #464	; (adr r3, 80090f0 <atan+0x2b8>)
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	4606      	mov	r6, r0
 8008f26:	460f      	mov	r7, r1
 8008f28:	f7f7 fb5e 	bl	80005e8 <__aeabi_dmul>
 8008f2c:	a372      	add	r3, pc, #456	; (adr r3, 80090f8 <atan+0x2c0>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	f7f7 f9a3 	bl	800027c <__adddf3>
 8008f36:	4632      	mov	r2, r6
 8008f38:	463b      	mov	r3, r7
 8008f3a:	f7f7 fb55 	bl	80005e8 <__aeabi_dmul>
 8008f3e:	a370      	add	r3, pc, #448	; (adr r3, 8009100 <atan+0x2c8>)
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	f7f7 f99a 	bl	800027c <__adddf3>
 8008f48:	4632      	mov	r2, r6
 8008f4a:	463b      	mov	r3, r7
 8008f4c:	f7f7 fb4c 	bl	80005e8 <__aeabi_dmul>
 8008f50:	a36d      	add	r3, pc, #436	; (adr r3, 8009108 <atan+0x2d0>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f7f7 f991 	bl	800027c <__adddf3>
 8008f5a:	4632      	mov	r2, r6
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	f7f7 fb43 	bl	80005e8 <__aeabi_dmul>
 8008f62:	a36b      	add	r3, pc, #428	; (adr r3, 8009110 <atan+0x2d8>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	f7f7 f988 	bl	800027c <__adddf3>
 8008f6c:	4632      	mov	r2, r6
 8008f6e:	463b      	mov	r3, r7
 8008f70:	f7f7 fb3a 	bl	80005e8 <__aeabi_dmul>
 8008f74:	a368      	add	r3, pc, #416	; (adr r3, 8009118 <atan+0x2e0>)
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	f7f7 f97f 	bl	800027c <__adddf3>
 8008f7e:	4642      	mov	r2, r8
 8008f80:	464b      	mov	r3, r9
 8008f82:	f7f7 fb31 	bl	80005e8 <__aeabi_dmul>
 8008f86:	a366      	add	r3, pc, #408	; (adr r3, 8009120 <atan+0x2e8>)
 8008f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8c:	4680      	mov	r8, r0
 8008f8e:	4689      	mov	r9, r1
 8008f90:	4630      	mov	r0, r6
 8008f92:	4639      	mov	r1, r7
 8008f94:	f7f7 fb28 	bl	80005e8 <__aeabi_dmul>
 8008f98:	a363      	add	r3, pc, #396	; (adr r3, 8009128 <atan+0x2f0>)
 8008f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9e:	f7f7 f96b 	bl	8000278 <__aeabi_dsub>
 8008fa2:	4632      	mov	r2, r6
 8008fa4:	463b      	mov	r3, r7
 8008fa6:	f7f7 fb1f 	bl	80005e8 <__aeabi_dmul>
 8008faa:	a361      	add	r3, pc, #388	; (adr r3, 8009130 <atan+0x2f8>)
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f7f7 f962 	bl	8000278 <__aeabi_dsub>
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	463b      	mov	r3, r7
 8008fb8:	f7f7 fb16 	bl	80005e8 <__aeabi_dmul>
 8008fbc:	a35e      	add	r3, pc, #376	; (adr r3, 8009138 <atan+0x300>)
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f7f7 f959 	bl	8000278 <__aeabi_dsub>
 8008fc6:	4632      	mov	r2, r6
 8008fc8:	463b      	mov	r3, r7
 8008fca:	f7f7 fb0d 	bl	80005e8 <__aeabi_dmul>
 8008fce:	a35c      	add	r3, pc, #368	; (adr r3, 8009140 <atan+0x308>)
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f7f7 f950 	bl	8000278 <__aeabi_dsub>
 8008fd8:	4632      	mov	r2, r6
 8008fda:	463b      	mov	r3, r7
 8008fdc:	f7f7 fb04 	bl	80005e8 <__aeabi_dmul>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	f7f7 f948 	bl	800027c <__adddf3>
 8008fec:	4622      	mov	r2, r4
 8008fee:	462b      	mov	r3, r5
 8008ff0:	f7f7 fafa 	bl	80005e8 <__aeabi_dmul>
 8008ff4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	d14b      	bne.n	8009096 <atan+0x25e>
 8008ffe:	4620      	mov	r0, r4
 8009000:	4629      	mov	r1, r5
 8009002:	f7f7 f939 	bl	8000278 <__aeabi_dsub>
 8009006:	e72c      	b.n	8008e62 <atan+0x2a>
 8009008:	ee10 0a10 	vmov	r0, s0
 800900c:	4b53      	ldr	r3, [pc, #332]	; (800915c <atan+0x324>)
 800900e:	2200      	movs	r2, #0
 8009010:	4629      	mov	r1, r5
 8009012:	f7f7 f931 	bl	8000278 <__aeabi_dsub>
 8009016:	4b51      	ldr	r3, [pc, #324]	; (800915c <atan+0x324>)
 8009018:	4606      	mov	r6, r0
 800901a:	460f      	mov	r7, r1
 800901c:	2200      	movs	r2, #0
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 f92b 	bl	800027c <__adddf3>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4630      	mov	r0, r6
 800902c:	4639      	mov	r1, r7
 800902e:	f7f7 fc05 	bl	800083c <__aeabi_ddiv>
 8009032:	f04f 0a01 	mov.w	sl, #1
 8009036:	4604      	mov	r4, r0
 8009038:	460d      	mov	r5, r1
 800903a:	e764      	b.n	8008f06 <atan+0xce>
 800903c:	4b49      	ldr	r3, [pc, #292]	; (8009164 <atan+0x32c>)
 800903e:	429e      	cmp	r6, r3
 8009040:	da1d      	bge.n	800907e <atan+0x246>
 8009042:	ee10 0a10 	vmov	r0, s0
 8009046:	4b48      	ldr	r3, [pc, #288]	; (8009168 <atan+0x330>)
 8009048:	2200      	movs	r2, #0
 800904a:	4629      	mov	r1, r5
 800904c:	f7f7 f914 	bl	8000278 <__aeabi_dsub>
 8009050:	4b45      	ldr	r3, [pc, #276]	; (8009168 <atan+0x330>)
 8009052:	4606      	mov	r6, r0
 8009054:	460f      	mov	r7, r1
 8009056:	2200      	movs	r2, #0
 8009058:	4620      	mov	r0, r4
 800905a:	4629      	mov	r1, r5
 800905c:	f7f7 fac4 	bl	80005e8 <__aeabi_dmul>
 8009060:	4b3e      	ldr	r3, [pc, #248]	; (800915c <atan+0x324>)
 8009062:	2200      	movs	r2, #0
 8009064:	f7f7 f90a 	bl	800027c <__adddf3>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	4630      	mov	r0, r6
 800906e:	4639      	mov	r1, r7
 8009070:	f7f7 fbe4 	bl	800083c <__aeabi_ddiv>
 8009074:	f04f 0a02 	mov.w	sl, #2
 8009078:	4604      	mov	r4, r0
 800907a:	460d      	mov	r5, r1
 800907c:	e743      	b.n	8008f06 <atan+0xce>
 800907e:	462b      	mov	r3, r5
 8009080:	ee10 2a10 	vmov	r2, s0
 8009084:	4939      	ldr	r1, [pc, #228]	; (800916c <atan+0x334>)
 8009086:	2000      	movs	r0, #0
 8009088:	f7f7 fbd8 	bl	800083c <__aeabi_ddiv>
 800908c:	f04f 0a03 	mov.w	sl, #3
 8009090:	4604      	mov	r4, r0
 8009092:	460d      	mov	r5, r1
 8009094:	e737      	b.n	8008f06 <atan+0xce>
 8009096:	4b36      	ldr	r3, [pc, #216]	; (8009170 <atan+0x338>)
 8009098:	4e36      	ldr	r6, [pc, #216]	; (8009174 <atan+0x33c>)
 800909a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	f7f7 f8e9 	bl	8000278 <__aeabi_dsub>
 80090a6:	4622      	mov	r2, r4
 80090a8:	462b      	mov	r3, r5
 80090aa:	f7f7 f8e5 	bl	8000278 <__aeabi_dsub>
 80090ae:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80090ba:	f7f7 f8dd 	bl	8000278 <__aeabi_dsub>
 80090be:	f1bb 0f00 	cmp.w	fp, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	460d      	mov	r5, r1
 80090c6:	f6bf aed6 	bge.w	8008e76 <atan+0x3e>
 80090ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090ce:	461d      	mov	r5, r3
 80090d0:	e6d1      	b.n	8008e76 <atan+0x3e>
 80090d2:	a51d      	add	r5, pc, #116	; (adr r5, 8009148 <atan+0x310>)
 80090d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090d8:	e6cd      	b.n	8008e76 <atan+0x3e>
 80090da:	bf00      	nop
 80090dc:	f3af 8000 	nop.w
 80090e0:	54442d18 	.word	0x54442d18
 80090e4:	bff921fb 	.word	0xbff921fb
 80090e8:	8800759c 	.word	0x8800759c
 80090ec:	7e37e43c 	.word	0x7e37e43c
 80090f0:	e322da11 	.word	0xe322da11
 80090f4:	3f90ad3a 	.word	0x3f90ad3a
 80090f8:	24760deb 	.word	0x24760deb
 80090fc:	3fa97b4b 	.word	0x3fa97b4b
 8009100:	a0d03d51 	.word	0xa0d03d51
 8009104:	3fb10d66 	.word	0x3fb10d66
 8009108:	c54c206e 	.word	0xc54c206e
 800910c:	3fb745cd 	.word	0x3fb745cd
 8009110:	920083ff 	.word	0x920083ff
 8009114:	3fc24924 	.word	0x3fc24924
 8009118:	5555550d 	.word	0x5555550d
 800911c:	3fd55555 	.word	0x3fd55555
 8009120:	2c6a6c2f 	.word	0x2c6a6c2f
 8009124:	bfa2b444 	.word	0xbfa2b444
 8009128:	52defd9a 	.word	0x52defd9a
 800912c:	3fadde2d 	.word	0x3fadde2d
 8009130:	af749a6d 	.word	0xaf749a6d
 8009134:	3fb3b0f2 	.word	0x3fb3b0f2
 8009138:	fe231671 	.word	0xfe231671
 800913c:	3fbc71c6 	.word	0x3fbc71c6
 8009140:	9998ebc4 	.word	0x9998ebc4
 8009144:	3fc99999 	.word	0x3fc99999
 8009148:	54442d18 	.word	0x54442d18
 800914c:	3ff921fb 	.word	0x3ff921fb
 8009150:	440fffff 	.word	0x440fffff
 8009154:	7ff00000 	.word	0x7ff00000
 8009158:	3fdbffff 	.word	0x3fdbffff
 800915c:	3ff00000 	.word	0x3ff00000
 8009160:	3ff2ffff 	.word	0x3ff2ffff
 8009164:	40038000 	.word	0x40038000
 8009168:	3ff80000 	.word	0x3ff80000
 800916c:	bff00000 	.word	0xbff00000
 8009170:	0800c898 	.word	0x0800c898
 8009174:	0800c878 	.word	0x0800c878

08009178 <__kernel_rem_pio2>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	ed2d 8b02 	vpush	{d8}
 8009180:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009184:	f112 0f14 	cmn.w	r2, #20
 8009188:	9306      	str	r3, [sp, #24]
 800918a:	9104      	str	r1, [sp, #16]
 800918c:	4bc2      	ldr	r3, [pc, #776]	; (8009498 <__kernel_rem_pio2+0x320>)
 800918e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009190:	9009      	str	r0, [sp, #36]	; 0x24
 8009192:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	9b06      	ldr	r3, [sp, #24]
 800919a:	f103 33ff 	add.w	r3, r3, #4294967295
 800919e:	bfa8      	it	ge
 80091a0:	1ed4      	subge	r4, r2, #3
 80091a2:	9305      	str	r3, [sp, #20]
 80091a4:	bfb2      	itee	lt
 80091a6:	2400      	movlt	r4, #0
 80091a8:	2318      	movge	r3, #24
 80091aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80091ae:	f06f 0317 	mvn.w	r3, #23
 80091b2:	fb04 3303 	mla	r3, r4, r3, r3
 80091b6:	eb03 0a02 	add.w	sl, r3, r2
 80091ba:	9b00      	ldr	r3, [sp, #0]
 80091bc:	9a05      	ldr	r2, [sp, #20]
 80091be:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8009488 <__kernel_rem_pio2+0x310>
 80091c2:	eb03 0802 	add.w	r8, r3, r2
 80091c6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80091c8:	1aa7      	subs	r7, r4, r2
 80091ca:	ae20      	add	r6, sp, #128	; 0x80
 80091cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80091d0:	2500      	movs	r5, #0
 80091d2:	4545      	cmp	r5, r8
 80091d4:	dd13      	ble.n	80091fe <__kernel_rem_pio2+0x86>
 80091d6:	9b06      	ldr	r3, [sp, #24]
 80091d8:	aa20      	add	r2, sp, #128	; 0x80
 80091da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80091de:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80091e2:	f04f 0800 	mov.w	r8, #0
 80091e6:	9b00      	ldr	r3, [sp, #0]
 80091e8:	4598      	cmp	r8, r3
 80091ea:	dc31      	bgt.n	8009250 <__kernel_rem_pio2+0xd8>
 80091ec:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8009488 <__kernel_rem_pio2+0x310>
 80091f0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80091f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80091f8:	462f      	mov	r7, r5
 80091fa:	2600      	movs	r6, #0
 80091fc:	e01b      	b.n	8009236 <__kernel_rem_pio2+0xbe>
 80091fe:	42ef      	cmn	r7, r5
 8009200:	d407      	bmi.n	8009212 <__kernel_rem_pio2+0x9a>
 8009202:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009206:	f7f7 f985 	bl	8000514 <__aeabi_i2d>
 800920a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800920e:	3501      	adds	r5, #1
 8009210:	e7df      	b.n	80091d2 <__kernel_rem_pio2+0x5a>
 8009212:	ec51 0b18 	vmov	r0, r1, d8
 8009216:	e7f8      	b.n	800920a <__kernel_rem_pio2+0x92>
 8009218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800921c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009220:	f7f7 f9e2 	bl	80005e8 <__aeabi_dmul>
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800922c:	f7f7 f826 	bl	800027c <__adddf3>
 8009230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009234:	3601      	adds	r6, #1
 8009236:	9b05      	ldr	r3, [sp, #20]
 8009238:	429e      	cmp	r6, r3
 800923a:	f1a7 0708 	sub.w	r7, r7, #8
 800923e:	ddeb      	ble.n	8009218 <__kernel_rem_pio2+0xa0>
 8009240:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009244:	f108 0801 	add.w	r8, r8, #1
 8009248:	ecab 7b02 	vstmia	fp!, {d7}
 800924c:	3508      	adds	r5, #8
 800924e:	e7ca      	b.n	80091e6 <__kernel_rem_pio2+0x6e>
 8009250:	9b00      	ldr	r3, [sp, #0]
 8009252:	aa0c      	add	r2, sp, #48	; 0x30
 8009254:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009258:	930b      	str	r3, [sp, #44]	; 0x2c
 800925a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800925c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009260:	9c00      	ldr	r4, [sp, #0]
 8009262:	930a      	str	r3, [sp, #40]	; 0x28
 8009264:	00e3      	lsls	r3, r4, #3
 8009266:	9308      	str	r3, [sp, #32]
 8009268:	ab98      	add	r3, sp, #608	; 0x260
 800926a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800926e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009272:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8009276:	ab70      	add	r3, sp, #448	; 0x1c0
 8009278:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800927c:	46c3      	mov	fp, r8
 800927e:	46a1      	mov	r9, r4
 8009280:	f1b9 0f00 	cmp.w	r9, #0
 8009284:	f1a5 0508 	sub.w	r5, r5, #8
 8009288:	dc77      	bgt.n	800937a <__kernel_rem_pio2+0x202>
 800928a:	ec47 6b10 	vmov	d0, r6, r7
 800928e:	4650      	mov	r0, sl
 8009290:	f000 fac2 	bl	8009818 <scalbn>
 8009294:	ec57 6b10 	vmov	r6, r7, d0
 8009298:	2200      	movs	r2, #0
 800929a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800929e:	ee10 0a10 	vmov	r0, s0
 80092a2:	4639      	mov	r1, r7
 80092a4:	f7f7 f9a0 	bl	80005e8 <__aeabi_dmul>
 80092a8:	ec41 0b10 	vmov	d0, r0, r1
 80092ac:	f000 fb34 	bl	8009918 <floor>
 80092b0:	4b7a      	ldr	r3, [pc, #488]	; (800949c <__kernel_rem_pio2+0x324>)
 80092b2:	ec51 0b10 	vmov	r0, r1, d0
 80092b6:	2200      	movs	r2, #0
 80092b8:	f7f7 f996 	bl	80005e8 <__aeabi_dmul>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4630      	mov	r0, r6
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f6 ffd8 	bl	8000278 <__aeabi_dsub>
 80092c8:	460f      	mov	r7, r1
 80092ca:	4606      	mov	r6, r0
 80092cc:	f7f7 fc3c 	bl	8000b48 <__aeabi_d2iz>
 80092d0:	9002      	str	r0, [sp, #8]
 80092d2:	f7f7 f91f 	bl	8000514 <__aeabi_i2d>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	4630      	mov	r0, r6
 80092dc:	4639      	mov	r1, r7
 80092de:	f7f6 ffcb 	bl	8000278 <__aeabi_dsub>
 80092e2:	f1ba 0f00 	cmp.w	sl, #0
 80092e6:	4606      	mov	r6, r0
 80092e8:	460f      	mov	r7, r1
 80092ea:	dd6d      	ble.n	80093c8 <__kernel_rem_pio2+0x250>
 80092ec:	1e61      	subs	r1, r4, #1
 80092ee:	ab0c      	add	r3, sp, #48	; 0x30
 80092f0:	9d02      	ldr	r5, [sp, #8]
 80092f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092f6:	f1ca 0018 	rsb	r0, sl, #24
 80092fa:	fa43 f200 	asr.w	r2, r3, r0
 80092fe:	4415      	add	r5, r2
 8009300:	4082      	lsls	r2, r0
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	aa0c      	add	r2, sp, #48	; 0x30
 8009306:	9502      	str	r5, [sp, #8]
 8009308:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800930c:	f1ca 0217 	rsb	r2, sl, #23
 8009310:	fa43 fb02 	asr.w	fp, r3, r2
 8009314:	f1bb 0f00 	cmp.w	fp, #0
 8009318:	dd65      	ble.n	80093e6 <__kernel_rem_pio2+0x26e>
 800931a:	9b02      	ldr	r3, [sp, #8]
 800931c:	2200      	movs	r2, #0
 800931e:	3301      	adds	r3, #1
 8009320:	9302      	str	r3, [sp, #8]
 8009322:	4615      	mov	r5, r2
 8009324:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009328:	4294      	cmp	r4, r2
 800932a:	f300 809f 	bgt.w	800946c <__kernel_rem_pio2+0x2f4>
 800932e:	f1ba 0f00 	cmp.w	sl, #0
 8009332:	dd07      	ble.n	8009344 <__kernel_rem_pio2+0x1cc>
 8009334:	f1ba 0f01 	cmp.w	sl, #1
 8009338:	f000 80c1 	beq.w	80094be <__kernel_rem_pio2+0x346>
 800933c:	f1ba 0f02 	cmp.w	sl, #2
 8009340:	f000 80c7 	beq.w	80094d2 <__kernel_rem_pio2+0x35a>
 8009344:	f1bb 0f02 	cmp.w	fp, #2
 8009348:	d14d      	bne.n	80093e6 <__kernel_rem_pio2+0x26e>
 800934a:	4632      	mov	r2, r6
 800934c:	463b      	mov	r3, r7
 800934e:	4954      	ldr	r1, [pc, #336]	; (80094a0 <__kernel_rem_pio2+0x328>)
 8009350:	2000      	movs	r0, #0
 8009352:	f7f6 ff91 	bl	8000278 <__aeabi_dsub>
 8009356:	4606      	mov	r6, r0
 8009358:	460f      	mov	r7, r1
 800935a:	2d00      	cmp	r5, #0
 800935c:	d043      	beq.n	80093e6 <__kernel_rem_pio2+0x26e>
 800935e:	4650      	mov	r0, sl
 8009360:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8009490 <__kernel_rem_pio2+0x318>
 8009364:	f000 fa58 	bl	8009818 <scalbn>
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	ec53 2b10 	vmov	r2, r3, d0
 8009370:	f7f6 ff82 	bl	8000278 <__aeabi_dsub>
 8009374:	4606      	mov	r6, r0
 8009376:	460f      	mov	r7, r1
 8009378:	e035      	b.n	80093e6 <__kernel_rem_pio2+0x26e>
 800937a:	4b4a      	ldr	r3, [pc, #296]	; (80094a4 <__kernel_rem_pio2+0x32c>)
 800937c:	2200      	movs	r2, #0
 800937e:	4630      	mov	r0, r6
 8009380:	4639      	mov	r1, r7
 8009382:	f7f7 f931 	bl	80005e8 <__aeabi_dmul>
 8009386:	f7f7 fbdf 	bl	8000b48 <__aeabi_d2iz>
 800938a:	f7f7 f8c3 	bl	8000514 <__aeabi_i2d>
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	ec43 2b18 	vmov	d8, r2, r3
 8009396:	4b44      	ldr	r3, [pc, #272]	; (80094a8 <__kernel_rem_pio2+0x330>)
 8009398:	2200      	movs	r2, #0
 800939a:	f7f7 f925 	bl	80005e8 <__aeabi_dmul>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	4630      	mov	r0, r6
 80093a4:	4639      	mov	r1, r7
 80093a6:	f7f6 ff67 	bl	8000278 <__aeabi_dsub>
 80093aa:	f7f7 fbcd 	bl	8000b48 <__aeabi_d2iz>
 80093ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093b2:	f84b 0b04 	str.w	r0, [fp], #4
 80093b6:	ec51 0b18 	vmov	r0, r1, d8
 80093ba:	f7f6 ff5f 	bl	800027c <__adddf3>
 80093be:	f109 39ff 	add.w	r9, r9, #4294967295
 80093c2:	4606      	mov	r6, r0
 80093c4:	460f      	mov	r7, r1
 80093c6:	e75b      	b.n	8009280 <__kernel_rem_pio2+0x108>
 80093c8:	d106      	bne.n	80093d8 <__kernel_rem_pio2+0x260>
 80093ca:	1e63      	subs	r3, r4, #1
 80093cc:	aa0c      	add	r2, sp, #48	; 0x30
 80093ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093d2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80093d6:	e79d      	b.n	8009314 <__kernel_rem_pio2+0x19c>
 80093d8:	4b34      	ldr	r3, [pc, #208]	; (80094ac <__kernel_rem_pio2+0x334>)
 80093da:	2200      	movs	r2, #0
 80093dc:	f7f7 fb8a 	bl	8000af4 <__aeabi_dcmpge>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d140      	bne.n	8009466 <__kernel_rem_pio2+0x2ee>
 80093e4:	4683      	mov	fp, r0
 80093e6:	2200      	movs	r2, #0
 80093e8:	2300      	movs	r3, #0
 80093ea:	4630      	mov	r0, r6
 80093ec:	4639      	mov	r1, r7
 80093ee:	f7f7 fb63 	bl	8000ab8 <__aeabi_dcmpeq>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	f000 80c1 	beq.w	800957a <__kernel_rem_pio2+0x402>
 80093f8:	1e65      	subs	r5, r4, #1
 80093fa:	462b      	mov	r3, r5
 80093fc:	2200      	movs	r2, #0
 80093fe:	9900      	ldr	r1, [sp, #0]
 8009400:	428b      	cmp	r3, r1
 8009402:	da6d      	bge.n	80094e0 <__kernel_rem_pio2+0x368>
 8009404:	2a00      	cmp	r2, #0
 8009406:	f000 808a 	beq.w	800951e <__kernel_rem_pio2+0x3a6>
 800940a:	ab0c      	add	r3, sp, #48	; 0x30
 800940c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009410:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 80ae 	beq.w	8009576 <__kernel_rem_pio2+0x3fe>
 800941a:	4650      	mov	r0, sl
 800941c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8009490 <__kernel_rem_pio2+0x318>
 8009420:	f000 f9fa 	bl	8009818 <scalbn>
 8009424:	1c6b      	adds	r3, r5, #1
 8009426:	00da      	lsls	r2, r3, #3
 8009428:	9205      	str	r2, [sp, #20]
 800942a:	ec57 6b10 	vmov	r6, r7, d0
 800942e:	aa70      	add	r2, sp, #448	; 0x1c0
 8009430:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80094a4 <__kernel_rem_pio2+0x32c>
 8009434:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8009438:	462c      	mov	r4, r5
 800943a:	f04f 0800 	mov.w	r8, #0
 800943e:	2c00      	cmp	r4, #0
 8009440:	f280 80d4 	bge.w	80095ec <__kernel_rem_pio2+0x474>
 8009444:	462c      	mov	r4, r5
 8009446:	2c00      	cmp	r4, #0
 8009448:	f2c0 8102 	blt.w	8009650 <__kernel_rem_pio2+0x4d8>
 800944c:	4b18      	ldr	r3, [pc, #96]	; (80094b0 <__kernel_rem_pio2+0x338>)
 800944e:	461e      	mov	r6, r3
 8009450:	ab70      	add	r3, sp, #448	; 0x1c0
 8009452:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8009456:	1b2b      	subs	r3, r5, r4
 8009458:	f04f 0900 	mov.w	r9, #0
 800945c:	f04f 0a00 	mov.w	sl, #0
 8009460:	2700      	movs	r7, #0
 8009462:	9306      	str	r3, [sp, #24]
 8009464:	e0e6      	b.n	8009634 <__kernel_rem_pio2+0x4bc>
 8009466:	f04f 0b02 	mov.w	fp, #2
 800946a:	e756      	b.n	800931a <__kernel_rem_pio2+0x1a2>
 800946c:	f8d8 3000 	ldr.w	r3, [r8]
 8009470:	bb05      	cbnz	r5, 80094b4 <__kernel_rem_pio2+0x33c>
 8009472:	b123      	cbz	r3, 800947e <__kernel_rem_pio2+0x306>
 8009474:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009478:	f8c8 3000 	str.w	r3, [r8]
 800947c:	2301      	movs	r3, #1
 800947e:	3201      	adds	r2, #1
 8009480:	f108 0804 	add.w	r8, r8, #4
 8009484:	461d      	mov	r5, r3
 8009486:	e74f      	b.n	8009328 <__kernel_rem_pio2+0x1b0>
	...
 8009494:	3ff00000 	.word	0x3ff00000
 8009498:	0800c8f8 	.word	0x0800c8f8
 800949c:	40200000 	.word	0x40200000
 80094a0:	3ff00000 	.word	0x3ff00000
 80094a4:	3e700000 	.word	0x3e700000
 80094a8:	41700000 	.word	0x41700000
 80094ac:	3fe00000 	.word	0x3fe00000
 80094b0:	0800c8b8 	.word	0x0800c8b8
 80094b4:	1acb      	subs	r3, r1, r3
 80094b6:	f8c8 3000 	str.w	r3, [r8]
 80094ba:	462b      	mov	r3, r5
 80094bc:	e7df      	b.n	800947e <__kernel_rem_pio2+0x306>
 80094be:	1e62      	subs	r2, r4, #1
 80094c0:	ab0c      	add	r3, sp, #48	; 0x30
 80094c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80094ca:	a90c      	add	r1, sp, #48	; 0x30
 80094cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80094d0:	e738      	b.n	8009344 <__kernel_rem_pio2+0x1cc>
 80094d2:	1e62      	subs	r2, r4, #1
 80094d4:	ab0c      	add	r3, sp, #48	; 0x30
 80094d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094da:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80094de:	e7f4      	b.n	80094ca <__kernel_rem_pio2+0x352>
 80094e0:	a90c      	add	r1, sp, #48	; 0x30
 80094e2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80094e6:	3b01      	subs	r3, #1
 80094e8:	430a      	orrs	r2, r1
 80094ea:	e788      	b.n	80093fe <__kernel_rem_pio2+0x286>
 80094ec:	3301      	adds	r3, #1
 80094ee:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80094f2:	2900      	cmp	r1, #0
 80094f4:	d0fa      	beq.n	80094ec <__kernel_rem_pio2+0x374>
 80094f6:	9a08      	ldr	r2, [sp, #32]
 80094f8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80094fc:	446a      	add	r2, sp
 80094fe:	3a98      	subs	r2, #152	; 0x98
 8009500:	9208      	str	r2, [sp, #32]
 8009502:	9a06      	ldr	r2, [sp, #24]
 8009504:	a920      	add	r1, sp, #128	; 0x80
 8009506:	18a2      	adds	r2, r4, r2
 8009508:	18e3      	adds	r3, r4, r3
 800950a:	f104 0801 	add.w	r8, r4, #1
 800950e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8009512:	9302      	str	r3, [sp, #8]
 8009514:	9b02      	ldr	r3, [sp, #8]
 8009516:	4543      	cmp	r3, r8
 8009518:	da04      	bge.n	8009524 <__kernel_rem_pio2+0x3ac>
 800951a:	461c      	mov	r4, r3
 800951c:	e6a2      	b.n	8009264 <__kernel_rem_pio2+0xec>
 800951e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009520:	2301      	movs	r3, #1
 8009522:	e7e4      	b.n	80094ee <__kernel_rem_pio2+0x376>
 8009524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009526:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800952a:	f7f6 fff3 	bl	8000514 <__aeabi_i2d>
 800952e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009534:	46ab      	mov	fp, r5
 8009536:	461c      	mov	r4, r3
 8009538:	f04f 0900 	mov.w	r9, #0
 800953c:	2600      	movs	r6, #0
 800953e:	2700      	movs	r7, #0
 8009540:	9b05      	ldr	r3, [sp, #20]
 8009542:	4599      	cmp	r9, r3
 8009544:	dd06      	ble.n	8009554 <__kernel_rem_pio2+0x3dc>
 8009546:	9b08      	ldr	r3, [sp, #32]
 8009548:	e8e3 6702 	strd	r6, r7, [r3], #8
 800954c:	f108 0801 	add.w	r8, r8, #1
 8009550:	9308      	str	r3, [sp, #32]
 8009552:	e7df      	b.n	8009514 <__kernel_rem_pio2+0x39c>
 8009554:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009558:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800955c:	f7f7 f844 	bl	80005e8 <__aeabi_dmul>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	4630      	mov	r0, r6
 8009566:	4639      	mov	r1, r7
 8009568:	f7f6 fe88 	bl	800027c <__adddf3>
 800956c:	f109 0901 	add.w	r9, r9, #1
 8009570:	4606      	mov	r6, r0
 8009572:	460f      	mov	r7, r1
 8009574:	e7e4      	b.n	8009540 <__kernel_rem_pio2+0x3c8>
 8009576:	3d01      	subs	r5, #1
 8009578:	e747      	b.n	800940a <__kernel_rem_pio2+0x292>
 800957a:	ec47 6b10 	vmov	d0, r6, r7
 800957e:	f1ca 0000 	rsb	r0, sl, #0
 8009582:	f000 f949 	bl	8009818 <scalbn>
 8009586:	ec57 6b10 	vmov	r6, r7, d0
 800958a:	4ba0      	ldr	r3, [pc, #640]	; (800980c <__kernel_rem_pio2+0x694>)
 800958c:	ee10 0a10 	vmov	r0, s0
 8009590:	2200      	movs	r2, #0
 8009592:	4639      	mov	r1, r7
 8009594:	f7f7 faae 	bl	8000af4 <__aeabi_dcmpge>
 8009598:	b1f8      	cbz	r0, 80095da <__kernel_rem_pio2+0x462>
 800959a:	4b9d      	ldr	r3, [pc, #628]	; (8009810 <__kernel_rem_pio2+0x698>)
 800959c:	2200      	movs	r2, #0
 800959e:	4630      	mov	r0, r6
 80095a0:	4639      	mov	r1, r7
 80095a2:	f7f7 f821 	bl	80005e8 <__aeabi_dmul>
 80095a6:	f7f7 facf 	bl	8000b48 <__aeabi_d2iz>
 80095aa:	4680      	mov	r8, r0
 80095ac:	f7f6 ffb2 	bl	8000514 <__aeabi_i2d>
 80095b0:	4b96      	ldr	r3, [pc, #600]	; (800980c <__kernel_rem_pio2+0x694>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	f7f7 f818 	bl	80005e8 <__aeabi_dmul>
 80095b8:	460b      	mov	r3, r1
 80095ba:	4602      	mov	r2, r0
 80095bc:	4639      	mov	r1, r7
 80095be:	4630      	mov	r0, r6
 80095c0:	f7f6 fe5a 	bl	8000278 <__aeabi_dsub>
 80095c4:	f7f7 fac0 	bl	8000b48 <__aeabi_d2iz>
 80095c8:	1c65      	adds	r5, r4, #1
 80095ca:	ab0c      	add	r3, sp, #48	; 0x30
 80095cc:	f10a 0a18 	add.w	sl, sl, #24
 80095d0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80095d4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80095d8:	e71f      	b.n	800941a <__kernel_rem_pio2+0x2a2>
 80095da:	4630      	mov	r0, r6
 80095dc:	4639      	mov	r1, r7
 80095de:	f7f7 fab3 	bl	8000b48 <__aeabi_d2iz>
 80095e2:	ab0c      	add	r3, sp, #48	; 0x30
 80095e4:	4625      	mov	r5, r4
 80095e6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80095ea:	e716      	b.n	800941a <__kernel_rem_pio2+0x2a2>
 80095ec:	ab0c      	add	r3, sp, #48	; 0x30
 80095ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80095f2:	f7f6 ff8f 	bl	8000514 <__aeabi_i2d>
 80095f6:	4632      	mov	r2, r6
 80095f8:	463b      	mov	r3, r7
 80095fa:	f7f6 fff5 	bl	80005e8 <__aeabi_dmul>
 80095fe:	4642      	mov	r2, r8
 8009600:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009604:	464b      	mov	r3, r9
 8009606:	4630      	mov	r0, r6
 8009608:	4639      	mov	r1, r7
 800960a:	f7f6 ffed 	bl	80005e8 <__aeabi_dmul>
 800960e:	3c01      	subs	r4, #1
 8009610:	4606      	mov	r6, r0
 8009612:	460f      	mov	r7, r1
 8009614:	e713      	b.n	800943e <__kernel_rem_pio2+0x2c6>
 8009616:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800961a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800961e:	f7f6 ffe3 	bl	80005e8 <__aeabi_dmul>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4648      	mov	r0, r9
 8009628:	4651      	mov	r1, sl
 800962a:	f7f6 fe27 	bl	800027c <__adddf3>
 800962e:	3701      	adds	r7, #1
 8009630:	4681      	mov	r9, r0
 8009632:	468a      	mov	sl, r1
 8009634:	9b00      	ldr	r3, [sp, #0]
 8009636:	429f      	cmp	r7, r3
 8009638:	dc02      	bgt.n	8009640 <__kernel_rem_pio2+0x4c8>
 800963a:	9b06      	ldr	r3, [sp, #24]
 800963c:	429f      	cmp	r7, r3
 800963e:	ddea      	ble.n	8009616 <__kernel_rem_pio2+0x49e>
 8009640:	9a06      	ldr	r2, [sp, #24]
 8009642:	ab48      	add	r3, sp, #288	; 0x120
 8009644:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8009648:	e9c6 9a00 	strd	r9, sl, [r6]
 800964c:	3c01      	subs	r4, #1
 800964e:	e6fa      	b.n	8009446 <__kernel_rem_pio2+0x2ce>
 8009650:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009652:	2b02      	cmp	r3, #2
 8009654:	dc0b      	bgt.n	800966e <__kernel_rem_pio2+0x4f6>
 8009656:	2b00      	cmp	r3, #0
 8009658:	dc39      	bgt.n	80096ce <__kernel_rem_pio2+0x556>
 800965a:	d05d      	beq.n	8009718 <__kernel_rem_pio2+0x5a0>
 800965c:	9b02      	ldr	r3, [sp, #8]
 800965e:	f003 0007 	and.w	r0, r3, #7
 8009662:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009666:	ecbd 8b02 	vpop	{d8}
 800966a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009670:	2b03      	cmp	r3, #3
 8009672:	d1f3      	bne.n	800965c <__kernel_rem_pio2+0x4e4>
 8009674:	9b05      	ldr	r3, [sp, #20]
 8009676:	9500      	str	r5, [sp, #0]
 8009678:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800967c:	eb0d 0403 	add.w	r4, sp, r3
 8009680:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8009684:	46a2      	mov	sl, r4
 8009686:	9b00      	ldr	r3, [sp, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f1aa 0a08 	sub.w	sl, sl, #8
 800968e:	dc69      	bgt.n	8009764 <__kernel_rem_pio2+0x5ec>
 8009690:	46aa      	mov	sl, r5
 8009692:	f1ba 0f01 	cmp.w	sl, #1
 8009696:	f1a4 0408 	sub.w	r4, r4, #8
 800969a:	f300 8083 	bgt.w	80097a4 <__kernel_rem_pio2+0x62c>
 800969e:	9c05      	ldr	r4, [sp, #20]
 80096a0:	ab48      	add	r3, sp, #288	; 0x120
 80096a2:	441c      	add	r4, r3
 80096a4:	2000      	movs	r0, #0
 80096a6:	2100      	movs	r1, #0
 80096a8:	2d01      	cmp	r5, #1
 80096aa:	f300 809a 	bgt.w	80097e2 <__kernel_rem_pio2+0x66a>
 80096ae:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80096b2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80096b6:	f1bb 0f00 	cmp.w	fp, #0
 80096ba:	f040 8098 	bne.w	80097ee <__kernel_rem_pio2+0x676>
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	e9c3 7800 	strd	r7, r8, [r3]
 80096c4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80096c8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80096cc:	e7c6      	b.n	800965c <__kernel_rem_pio2+0x4e4>
 80096ce:	9e05      	ldr	r6, [sp, #20]
 80096d0:	ab48      	add	r3, sp, #288	; 0x120
 80096d2:	441e      	add	r6, r3
 80096d4:	462c      	mov	r4, r5
 80096d6:	2000      	movs	r0, #0
 80096d8:	2100      	movs	r1, #0
 80096da:	2c00      	cmp	r4, #0
 80096dc:	da33      	bge.n	8009746 <__kernel_rem_pio2+0x5ce>
 80096de:	f1bb 0f00 	cmp.w	fp, #0
 80096e2:	d036      	beq.n	8009752 <__kernel_rem_pio2+0x5da>
 80096e4:	4602      	mov	r2, r0
 80096e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096ea:	9c04      	ldr	r4, [sp, #16]
 80096ec:	e9c4 2300 	strd	r2, r3, [r4]
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80096f8:	f7f6 fdbe 	bl	8000278 <__aeabi_dsub>
 80096fc:	ae4a      	add	r6, sp, #296	; 0x128
 80096fe:	2401      	movs	r4, #1
 8009700:	42a5      	cmp	r5, r4
 8009702:	da29      	bge.n	8009758 <__kernel_rem_pio2+0x5e0>
 8009704:	f1bb 0f00 	cmp.w	fp, #0
 8009708:	d002      	beq.n	8009710 <__kernel_rem_pio2+0x598>
 800970a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800970e:	4619      	mov	r1, r3
 8009710:	9b04      	ldr	r3, [sp, #16]
 8009712:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009716:	e7a1      	b.n	800965c <__kernel_rem_pio2+0x4e4>
 8009718:	9c05      	ldr	r4, [sp, #20]
 800971a:	ab48      	add	r3, sp, #288	; 0x120
 800971c:	441c      	add	r4, r3
 800971e:	2000      	movs	r0, #0
 8009720:	2100      	movs	r1, #0
 8009722:	2d00      	cmp	r5, #0
 8009724:	da09      	bge.n	800973a <__kernel_rem_pio2+0x5c2>
 8009726:	f1bb 0f00 	cmp.w	fp, #0
 800972a:	d002      	beq.n	8009732 <__kernel_rem_pio2+0x5ba>
 800972c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009730:	4619      	mov	r1, r3
 8009732:	9b04      	ldr	r3, [sp, #16]
 8009734:	e9c3 0100 	strd	r0, r1, [r3]
 8009738:	e790      	b.n	800965c <__kernel_rem_pio2+0x4e4>
 800973a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800973e:	f7f6 fd9d 	bl	800027c <__adddf3>
 8009742:	3d01      	subs	r5, #1
 8009744:	e7ed      	b.n	8009722 <__kernel_rem_pio2+0x5aa>
 8009746:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800974a:	f7f6 fd97 	bl	800027c <__adddf3>
 800974e:	3c01      	subs	r4, #1
 8009750:	e7c3      	b.n	80096da <__kernel_rem_pio2+0x562>
 8009752:	4602      	mov	r2, r0
 8009754:	460b      	mov	r3, r1
 8009756:	e7c8      	b.n	80096ea <__kernel_rem_pio2+0x572>
 8009758:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800975c:	f7f6 fd8e 	bl	800027c <__adddf3>
 8009760:	3401      	adds	r4, #1
 8009762:	e7cd      	b.n	8009700 <__kernel_rem_pio2+0x588>
 8009764:	e9da 8900 	ldrd	r8, r9, [sl]
 8009768:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800976c:	9b00      	ldr	r3, [sp, #0]
 800976e:	3b01      	subs	r3, #1
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	4632      	mov	r2, r6
 8009774:	463b      	mov	r3, r7
 8009776:	4640      	mov	r0, r8
 8009778:	4649      	mov	r1, r9
 800977a:	f7f6 fd7f 	bl	800027c <__adddf3>
 800977e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	4640      	mov	r0, r8
 8009788:	4649      	mov	r1, r9
 800978a:	f7f6 fd75 	bl	8000278 <__aeabi_dsub>
 800978e:	4632      	mov	r2, r6
 8009790:	463b      	mov	r3, r7
 8009792:	f7f6 fd73 	bl	800027c <__adddf3>
 8009796:	ed9d 7b06 	vldr	d7, [sp, #24]
 800979a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800979e:	ed8a 7b00 	vstr	d7, [sl]
 80097a2:	e770      	b.n	8009686 <__kernel_rem_pio2+0x50e>
 80097a4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80097a8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80097ac:	4640      	mov	r0, r8
 80097ae:	4632      	mov	r2, r6
 80097b0:	463b      	mov	r3, r7
 80097b2:	4649      	mov	r1, r9
 80097b4:	f7f6 fd62 	bl	800027c <__adddf3>
 80097b8:	e9cd 0100 	strd	r0, r1, [sp]
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	4640      	mov	r0, r8
 80097c2:	4649      	mov	r1, r9
 80097c4:	f7f6 fd58 	bl	8000278 <__aeabi_dsub>
 80097c8:	4632      	mov	r2, r6
 80097ca:	463b      	mov	r3, r7
 80097cc:	f7f6 fd56 	bl	800027c <__adddf3>
 80097d0:	ed9d 7b00 	vldr	d7, [sp]
 80097d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80097d8:	ed84 7b00 	vstr	d7, [r4]
 80097dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097e0:	e757      	b.n	8009692 <__kernel_rem_pio2+0x51a>
 80097e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80097e6:	f7f6 fd49 	bl	800027c <__adddf3>
 80097ea:	3d01      	subs	r5, #1
 80097ec:	e75c      	b.n	80096a8 <__kernel_rem_pio2+0x530>
 80097ee:	9b04      	ldr	r3, [sp, #16]
 80097f0:	9a04      	ldr	r2, [sp, #16]
 80097f2:	601f      	str	r7, [r3, #0]
 80097f4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80097f8:	605c      	str	r4, [r3, #4]
 80097fa:	609d      	str	r5, [r3, #8]
 80097fc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009800:	60d3      	str	r3, [r2, #12]
 8009802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009806:	6110      	str	r0, [r2, #16]
 8009808:	6153      	str	r3, [r2, #20]
 800980a:	e727      	b.n	800965c <__kernel_rem_pio2+0x4e4>
 800980c:	41700000 	.word	0x41700000
 8009810:	3e700000 	.word	0x3e700000
 8009814:	00000000 	.word	0x00000000

08009818 <scalbn>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	ec55 4b10 	vmov	r4, r5, d0
 800981e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009822:	4606      	mov	r6, r0
 8009824:	462b      	mov	r3, r5
 8009826:	b999      	cbnz	r1, 8009850 <scalbn+0x38>
 8009828:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800982c:	4323      	orrs	r3, r4
 800982e:	d03f      	beq.n	80098b0 <scalbn+0x98>
 8009830:	4b35      	ldr	r3, [pc, #212]	; (8009908 <scalbn+0xf0>)
 8009832:	4629      	mov	r1, r5
 8009834:	ee10 0a10 	vmov	r0, s0
 8009838:	2200      	movs	r2, #0
 800983a:	f7f6 fed5 	bl	80005e8 <__aeabi_dmul>
 800983e:	4b33      	ldr	r3, [pc, #204]	; (800990c <scalbn+0xf4>)
 8009840:	429e      	cmp	r6, r3
 8009842:	4604      	mov	r4, r0
 8009844:	460d      	mov	r5, r1
 8009846:	da10      	bge.n	800986a <scalbn+0x52>
 8009848:	a327      	add	r3, pc, #156	; (adr r3, 80098e8 <scalbn+0xd0>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	e01f      	b.n	8009890 <scalbn+0x78>
 8009850:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009854:	4291      	cmp	r1, r2
 8009856:	d10c      	bne.n	8009872 <scalbn+0x5a>
 8009858:	ee10 2a10 	vmov	r2, s0
 800985c:	4620      	mov	r0, r4
 800985e:	4629      	mov	r1, r5
 8009860:	f7f6 fd0c 	bl	800027c <__adddf3>
 8009864:	4604      	mov	r4, r0
 8009866:	460d      	mov	r5, r1
 8009868:	e022      	b.n	80098b0 <scalbn+0x98>
 800986a:	460b      	mov	r3, r1
 800986c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009870:	3936      	subs	r1, #54	; 0x36
 8009872:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009876:	4296      	cmp	r6, r2
 8009878:	dd0d      	ble.n	8009896 <scalbn+0x7e>
 800987a:	2d00      	cmp	r5, #0
 800987c:	a11c      	add	r1, pc, #112	; (adr r1, 80098f0 <scalbn+0xd8>)
 800987e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009882:	da02      	bge.n	800988a <scalbn+0x72>
 8009884:	a11c      	add	r1, pc, #112	; (adr r1, 80098f8 <scalbn+0xe0>)
 8009886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800988a:	a319      	add	r3, pc, #100	; (adr r3, 80098f0 <scalbn+0xd8>)
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	f7f6 feaa 	bl	80005e8 <__aeabi_dmul>
 8009894:	e7e6      	b.n	8009864 <scalbn+0x4c>
 8009896:	1872      	adds	r2, r6, r1
 8009898:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800989c:	428a      	cmp	r2, r1
 800989e:	dcec      	bgt.n	800987a <scalbn+0x62>
 80098a0:	2a00      	cmp	r2, #0
 80098a2:	dd08      	ble.n	80098b6 <scalbn+0x9e>
 80098a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098b0:	ec45 4b10 	vmov	d0, r4, r5
 80098b4:	bd70      	pop	{r4, r5, r6, pc}
 80098b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80098ba:	da08      	bge.n	80098ce <scalbn+0xb6>
 80098bc:	2d00      	cmp	r5, #0
 80098be:	a10a      	add	r1, pc, #40	; (adr r1, 80098e8 <scalbn+0xd0>)
 80098c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c4:	dac0      	bge.n	8009848 <scalbn+0x30>
 80098c6:	a10e      	add	r1, pc, #56	; (adr r1, 8009900 <scalbn+0xe8>)
 80098c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098cc:	e7bc      	b.n	8009848 <scalbn+0x30>
 80098ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098d2:	3236      	adds	r2, #54	; 0x36
 80098d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80098dc:	4620      	mov	r0, r4
 80098de:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <scalbn+0xf8>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	e7d5      	b.n	8009890 <scalbn+0x78>
 80098e4:	f3af 8000 	nop.w
 80098e8:	c2f8f359 	.word	0xc2f8f359
 80098ec:	01a56e1f 	.word	0x01a56e1f
 80098f0:	8800759c 	.word	0x8800759c
 80098f4:	7e37e43c 	.word	0x7e37e43c
 80098f8:	8800759c 	.word	0x8800759c
 80098fc:	fe37e43c 	.word	0xfe37e43c
 8009900:	c2f8f359 	.word	0xc2f8f359
 8009904:	81a56e1f 	.word	0x81a56e1f
 8009908:	43500000 	.word	0x43500000
 800990c:	ffff3cb0 	.word	0xffff3cb0
 8009910:	3c900000 	.word	0x3c900000
 8009914:	00000000 	.word	0x00000000

08009918 <floor>:
 8009918:	ec51 0b10 	vmov	r0, r1, d0
 800991c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009924:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009928:	2e13      	cmp	r6, #19
 800992a:	ee10 5a10 	vmov	r5, s0
 800992e:	ee10 8a10 	vmov	r8, s0
 8009932:	460c      	mov	r4, r1
 8009934:	dc31      	bgt.n	800999a <floor+0x82>
 8009936:	2e00      	cmp	r6, #0
 8009938:	da14      	bge.n	8009964 <floor+0x4c>
 800993a:	a333      	add	r3, pc, #204	; (adr r3, 8009a08 <floor+0xf0>)
 800993c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009940:	f7f6 fc9c 	bl	800027c <__adddf3>
 8009944:	2200      	movs	r2, #0
 8009946:	2300      	movs	r3, #0
 8009948:	f7f7 f8de 	bl	8000b08 <__aeabi_dcmpgt>
 800994c:	b138      	cbz	r0, 800995e <floor+0x46>
 800994e:	2c00      	cmp	r4, #0
 8009950:	da53      	bge.n	80099fa <floor+0xe2>
 8009952:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009956:	4325      	orrs	r5, r4
 8009958:	d052      	beq.n	8009a00 <floor+0xe8>
 800995a:	4c2d      	ldr	r4, [pc, #180]	; (8009a10 <floor+0xf8>)
 800995c:	2500      	movs	r5, #0
 800995e:	4621      	mov	r1, r4
 8009960:	4628      	mov	r0, r5
 8009962:	e024      	b.n	80099ae <floor+0x96>
 8009964:	4f2b      	ldr	r7, [pc, #172]	; (8009a14 <floor+0xfc>)
 8009966:	4137      	asrs	r7, r6
 8009968:	ea01 0307 	and.w	r3, r1, r7
 800996c:	4303      	orrs	r3, r0
 800996e:	d01e      	beq.n	80099ae <floor+0x96>
 8009970:	a325      	add	r3, pc, #148	; (adr r3, 8009a08 <floor+0xf0>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fc81 	bl	800027c <__adddf3>
 800997a:	2200      	movs	r2, #0
 800997c:	2300      	movs	r3, #0
 800997e:	f7f7 f8c3 	bl	8000b08 <__aeabi_dcmpgt>
 8009982:	2800      	cmp	r0, #0
 8009984:	d0eb      	beq.n	800995e <floor+0x46>
 8009986:	2c00      	cmp	r4, #0
 8009988:	bfbe      	ittt	lt
 800998a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800998e:	4133      	asrlt	r3, r6
 8009990:	18e4      	addlt	r4, r4, r3
 8009992:	ea24 0407 	bic.w	r4, r4, r7
 8009996:	2500      	movs	r5, #0
 8009998:	e7e1      	b.n	800995e <floor+0x46>
 800999a:	2e33      	cmp	r6, #51	; 0x33
 800999c:	dd0b      	ble.n	80099b6 <floor+0x9e>
 800999e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80099a2:	d104      	bne.n	80099ae <floor+0x96>
 80099a4:	ee10 2a10 	vmov	r2, s0
 80099a8:	460b      	mov	r3, r1
 80099aa:	f7f6 fc67 	bl	800027c <__adddf3>
 80099ae:	ec41 0b10 	vmov	d0, r0, r1
 80099b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80099ba:	f04f 37ff 	mov.w	r7, #4294967295
 80099be:	40df      	lsrs	r7, r3
 80099c0:	4238      	tst	r0, r7
 80099c2:	d0f4      	beq.n	80099ae <floor+0x96>
 80099c4:	a310      	add	r3, pc, #64	; (adr r3, 8009a08 <floor+0xf0>)
 80099c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ca:	f7f6 fc57 	bl	800027c <__adddf3>
 80099ce:	2200      	movs	r2, #0
 80099d0:	2300      	movs	r3, #0
 80099d2:	f7f7 f899 	bl	8000b08 <__aeabi_dcmpgt>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d0c1      	beq.n	800995e <floor+0x46>
 80099da:	2c00      	cmp	r4, #0
 80099dc:	da0a      	bge.n	80099f4 <floor+0xdc>
 80099de:	2e14      	cmp	r6, #20
 80099e0:	d101      	bne.n	80099e6 <floor+0xce>
 80099e2:	3401      	adds	r4, #1
 80099e4:	e006      	b.n	80099f4 <floor+0xdc>
 80099e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80099ea:	2301      	movs	r3, #1
 80099ec:	40b3      	lsls	r3, r6
 80099ee:	441d      	add	r5, r3
 80099f0:	45a8      	cmp	r8, r5
 80099f2:	d8f6      	bhi.n	80099e2 <floor+0xca>
 80099f4:	ea25 0507 	bic.w	r5, r5, r7
 80099f8:	e7b1      	b.n	800995e <floor+0x46>
 80099fa:	2500      	movs	r5, #0
 80099fc:	462c      	mov	r4, r5
 80099fe:	e7ae      	b.n	800995e <floor+0x46>
 8009a00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009a04:	e7ab      	b.n	800995e <floor+0x46>
 8009a06:	bf00      	nop
 8009a08:	8800759c 	.word	0x8800759c
 8009a0c:	7e37e43c 	.word	0x7e37e43c
 8009a10:	bff00000 	.word	0xbff00000
 8009a14:	000fffff 	.word	0x000fffff

08009a18 <sulp>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	460d      	mov	r5, r1
 8009a1e:	ec45 4b10 	vmov	d0, r4, r5
 8009a22:	4616      	mov	r6, r2
 8009a24:	f001 ff80 	bl	800b928 <__ulp>
 8009a28:	ec51 0b10 	vmov	r0, r1, d0
 8009a2c:	b17e      	cbz	r6, 8009a4e <sulp+0x36>
 8009a2e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	dd09      	ble.n	8009a4e <sulp+0x36>
 8009a3a:	051b      	lsls	r3, r3, #20
 8009a3c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009a40:	2400      	movs	r4, #0
 8009a42:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009a46:	4622      	mov	r2, r4
 8009a48:	462b      	mov	r3, r5
 8009a4a:	f7f6 fdcd 	bl	80005e8 <__aeabi_dmul>
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}

08009a50 <_strtod_l>:
 8009a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	ed2d 8b02 	vpush	{d8}
 8009a58:	b09b      	sub	sp, #108	; 0x6c
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	9213      	str	r2, [sp, #76]	; 0x4c
 8009a5e:	2200      	movs	r2, #0
 8009a60:	9216      	str	r2, [sp, #88]	; 0x58
 8009a62:	460d      	mov	r5, r1
 8009a64:	f04f 0800 	mov.w	r8, #0
 8009a68:	f04f 0900 	mov.w	r9, #0
 8009a6c:	460a      	mov	r2, r1
 8009a6e:	9215      	str	r2, [sp, #84]	; 0x54
 8009a70:	7811      	ldrb	r1, [r2, #0]
 8009a72:	292b      	cmp	r1, #43	; 0x2b
 8009a74:	d04c      	beq.n	8009b10 <_strtod_l+0xc0>
 8009a76:	d83a      	bhi.n	8009aee <_strtod_l+0x9e>
 8009a78:	290d      	cmp	r1, #13
 8009a7a:	d834      	bhi.n	8009ae6 <_strtod_l+0x96>
 8009a7c:	2908      	cmp	r1, #8
 8009a7e:	d834      	bhi.n	8009aea <_strtod_l+0x9a>
 8009a80:	2900      	cmp	r1, #0
 8009a82:	d03d      	beq.n	8009b00 <_strtod_l+0xb0>
 8009a84:	2200      	movs	r2, #0
 8009a86:	920a      	str	r2, [sp, #40]	; 0x28
 8009a88:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009a8a:	7832      	ldrb	r2, [r6, #0]
 8009a8c:	2a30      	cmp	r2, #48	; 0x30
 8009a8e:	f040 80b4 	bne.w	8009bfa <_strtod_l+0x1aa>
 8009a92:	7872      	ldrb	r2, [r6, #1]
 8009a94:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009a98:	2a58      	cmp	r2, #88	; 0x58
 8009a9a:	d170      	bne.n	8009b7e <_strtod_l+0x12e>
 8009a9c:	9302      	str	r3, [sp, #8]
 8009a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa0:	9301      	str	r3, [sp, #4]
 8009aa2:	ab16      	add	r3, sp, #88	; 0x58
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	4a8e      	ldr	r2, [pc, #568]	; (8009ce0 <_strtod_l+0x290>)
 8009aa8:	ab17      	add	r3, sp, #92	; 0x5c
 8009aaa:	a915      	add	r1, sp, #84	; 0x54
 8009aac:	4620      	mov	r0, r4
 8009aae:	f001 f821 	bl	800aaf4 <__gethex>
 8009ab2:	f010 070f 	ands.w	r7, r0, #15
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	d005      	beq.n	8009ac6 <_strtod_l+0x76>
 8009aba:	2f06      	cmp	r7, #6
 8009abc:	d12a      	bne.n	8009b14 <_strtod_l+0xc4>
 8009abe:	3601      	adds	r6, #1
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9615      	str	r6, [sp, #84]	; 0x54
 8009ac4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ac6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f040 857f 	bne.w	800a5cc <_strtod_l+0xb7c>
 8009ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad0:	b1db      	cbz	r3, 8009b0a <_strtod_l+0xba>
 8009ad2:	4642      	mov	r2, r8
 8009ad4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009ad8:	ec43 2b10 	vmov	d0, r2, r3
 8009adc:	b01b      	add	sp, #108	; 0x6c
 8009ade:	ecbd 8b02 	vpop	{d8}
 8009ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae6:	2920      	cmp	r1, #32
 8009ae8:	d1cc      	bne.n	8009a84 <_strtod_l+0x34>
 8009aea:	3201      	adds	r2, #1
 8009aec:	e7bf      	b.n	8009a6e <_strtod_l+0x1e>
 8009aee:	292d      	cmp	r1, #45	; 0x2d
 8009af0:	d1c8      	bne.n	8009a84 <_strtod_l+0x34>
 8009af2:	2101      	movs	r1, #1
 8009af4:	910a      	str	r1, [sp, #40]	; 0x28
 8009af6:	1c51      	adds	r1, r2, #1
 8009af8:	9115      	str	r1, [sp, #84]	; 0x54
 8009afa:	7852      	ldrb	r2, [r2, #1]
 8009afc:	2a00      	cmp	r2, #0
 8009afe:	d1c3      	bne.n	8009a88 <_strtod_l+0x38>
 8009b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b02:	9515      	str	r5, [sp, #84]	; 0x54
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f040 855f 	bne.w	800a5c8 <_strtod_l+0xb78>
 8009b0a:	4642      	mov	r2, r8
 8009b0c:	464b      	mov	r3, r9
 8009b0e:	e7e3      	b.n	8009ad8 <_strtod_l+0x88>
 8009b10:	2100      	movs	r1, #0
 8009b12:	e7ef      	b.n	8009af4 <_strtod_l+0xa4>
 8009b14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009b16:	b13a      	cbz	r2, 8009b28 <_strtod_l+0xd8>
 8009b18:	2135      	movs	r1, #53	; 0x35
 8009b1a:	a818      	add	r0, sp, #96	; 0x60
 8009b1c:	f002 f801 	bl	800bb22 <__copybits>
 8009b20:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009b22:	4620      	mov	r0, r4
 8009b24:	f001 fbd4 	bl	800b2d0 <_Bfree>
 8009b28:	3f01      	subs	r7, #1
 8009b2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b2c:	2f04      	cmp	r7, #4
 8009b2e:	d806      	bhi.n	8009b3e <_strtod_l+0xee>
 8009b30:	e8df f007 	tbb	[pc, r7]
 8009b34:	201d0314 	.word	0x201d0314
 8009b38:	14          	.byte	0x14
 8009b39:	00          	.byte	0x00
 8009b3a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009b3e:	05e9      	lsls	r1, r5, #23
 8009b40:	bf48      	it	mi
 8009b42:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009b46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b4a:	0d1b      	lsrs	r3, r3, #20
 8009b4c:	051b      	lsls	r3, r3, #20
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1b9      	bne.n	8009ac6 <_strtod_l+0x76>
 8009b52:	f000 fedf 	bl	800a914 <__errno>
 8009b56:	2322      	movs	r3, #34	; 0x22
 8009b58:	6003      	str	r3, [r0, #0]
 8009b5a:	e7b4      	b.n	8009ac6 <_strtod_l+0x76>
 8009b5c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009b60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009b64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009b68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009b6c:	e7e7      	b.n	8009b3e <_strtod_l+0xee>
 8009b6e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009ce8 <_strtod_l+0x298>
 8009b72:	e7e4      	b.n	8009b3e <_strtod_l+0xee>
 8009b74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009b78:	f04f 38ff 	mov.w	r8, #4294967295
 8009b7c:	e7df      	b.n	8009b3e <_strtod_l+0xee>
 8009b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	9215      	str	r2, [sp, #84]	; 0x54
 8009b84:	785b      	ldrb	r3, [r3, #1]
 8009b86:	2b30      	cmp	r3, #48	; 0x30
 8009b88:	d0f9      	beq.n	8009b7e <_strtod_l+0x12e>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d09b      	beq.n	8009ac6 <_strtod_l+0x76>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	f04f 0a00 	mov.w	sl, #0
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b9a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009b9e:	46d3      	mov	fp, sl
 8009ba0:	220a      	movs	r2, #10
 8009ba2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009ba4:	7806      	ldrb	r6, [r0, #0]
 8009ba6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009baa:	b2d9      	uxtb	r1, r3
 8009bac:	2909      	cmp	r1, #9
 8009bae:	d926      	bls.n	8009bfe <_strtod_l+0x1ae>
 8009bb0:	494c      	ldr	r1, [pc, #304]	; (8009ce4 <_strtod_l+0x294>)
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f000 fe55 	bl	800a862 <strncmp>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d030      	beq.n	8009c1e <_strtod_l+0x1ce>
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	4632      	mov	r2, r6
 8009bc0:	9005      	str	r0, [sp, #20]
 8009bc2:	465e      	mov	r6, fp
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2a65      	cmp	r2, #101	; 0x65
 8009bc8:	d001      	beq.n	8009bce <_strtod_l+0x17e>
 8009bca:	2a45      	cmp	r2, #69	; 0x45
 8009bcc:	d113      	bne.n	8009bf6 <_strtod_l+0x1a6>
 8009bce:	b91e      	cbnz	r6, 8009bd8 <_strtod_l+0x188>
 8009bd0:	9a04      	ldr	r2, [sp, #16]
 8009bd2:	4302      	orrs	r2, r0
 8009bd4:	d094      	beq.n	8009b00 <_strtod_l+0xb0>
 8009bd6:	2600      	movs	r6, #0
 8009bd8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009bda:	1c6a      	adds	r2, r5, #1
 8009bdc:	9215      	str	r2, [sp, #84]	; 0x54
 8009bde:	786a      	ldrb	r2, [r5, #1]
 8009be0:	2a2b      	cmp	r2, #43	; 0x2b
 8009be2:	d074      	beq.n	8009cce <_strtod_l+0x27e>
 8009be4:	2a2d      	cmp	r2, #45	; 0x2d
 8009be6:	d078      	beq.n	8009cda <_strtod_l+0x28a>
 8009be8:	f04f 0c00 	mov.w	ip, #0
 8009bec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009bf0:	2909      	cmp	r1, #9
 8009bf2:	d97f      	bls.n	8009cf4 <_strtod_l+0x2a4>
 8009bf4:	9515      	str	r5, [sp, #84]	; 0x54
 8009bf6:	2700      	movs	r7, #0
 8009bf8:	e09e      	b.n	8009d38 <_strtod_l+0x2e8>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e7c8      	b.n	8009b90 <_strtod_l+0x140>
 8009bfe:	f1bb 0f08 	cmp.w	fp, #8
 8009c02:	bfd8      	it	le
 8009c04:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009c06:	f100 0001 	add.w	r0, r0, #1
 8009c0a:	bfda      	itte	le
 8009c0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c10:	9309      	strle	r3, [sp, #36]	; 0x24
 8009c12:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009c16:	f10b 0b01 	add.w	fp, fp, #1
 8009c1a:	9015      	str	r0, [sp, #84]	; 0x54
 8009c1c:	e7c1      	b.n	8009ba2 <_strtod_l+0x152>
 8009c1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c20:	1c5a      	adds	r2, r3, #1
 8009c22:	9215      	str	r2, [sp, #84]	; 0x54
 8009c24:	785a      	ldrb	r2, [r3, #1]
 8009c26:	f1bb 0f00 	cmp.w	fp, #0
 8009c2a:	d037      	beq.n	8009c9c <_strtod_l+0x24c>
 8009c2c:	9005      	str	r0, [sp, #20]
 8009c2e:	465e      	mov	r6, fp
 8009c30:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009c34:	2b09      	cmp	r3, #9
 8009c36:	d912      	bls.n	8009c5e <_strtod_l+0x20e>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e7c4      	b.n	8009bc6 <_strtod_l+0x176>
 8009c3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	9215      	str	r2, [sp, #84]	; 0x54
 8009c42:	785a      	ldrb	r2, [r3, #1]
 8009c44:	3001      	adds	r0, #1
 8009c46:	2a30      	cmp	r2, #48	; 0x30
 8009c48:	d0f8      	beq.n	8009c3c <_strtod_l+0x1ec>
 8009c4a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009c4e:	2b08      	cmp	r3, #8
 8009c50:	f200 84c1 	bhi.w	800a5d6 <_strtod_l+0xb86>
 8009c54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c56:	9005      	str	r0, [sp, #20]
 8009c58:	2000      	movs	r0, #0
 8009c5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	3a30      	subs	r2, #48	; 0x30
 8009c60:	f100 0301 	add.w	r3, r0, #1
 8009c64:	d014      	beq.n	8009c90 <_strtod_l+0x240>
 8009c66:	9905      	ldr	r1, [sp, #20]
 8009c68:	4419      	add	r1, r3
 8009c6a:	9105      	str	r1, [sp, #20]
 8009c6c:	4633      	mov	r3, r6
 8009c6e:	eb00 0c06 	add.w	ip, r0, r6
 8009c72:	210a      	movs	r1, #10
 8009c74:	4563      	cmp	r3, ip
 8009c76:	d113      	bne.n	8009ca0 <_strtod_l+0x250>
 8009c78:	1833      	adds	r3, r6, r0
 8009c7a:	2b08      	cmp	r3, #8
 8009c7c:	f106 0601 	add.w	r6, r6, #1
 8009c80:	4406      	add	r6, r0
 8009c82:	dc1a      	bgt.n	8009cba <_strtod_l+0x26a>
 8009c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c86:	230a      	movs	r3, #10
 8009c88:	fb03 2301 	mla	r3, r3, r1, r2
 8009c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c92:	1c51      	adds	r1, r2, #1
 8009c94:	9115      	str	r1, [sp, #84]	; 0x54
 8009c96:	7852      	ldrb	r2, [r2, #1]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	e7c9      	b.n	8009c30 <_strtod_l+0x1e0>
 8009c9c:	4658      	mov	r0, fp
 8009c9e:	e7d2      	b.n	8009c46 <_strtod_l+0x1f6>
 8009ca0:	2b08      	cmp	r3, #8
 8009ca2:	f103 0301 	add.w	r3, r3, #1
 8009ca6:	dc03      	bgt.n	8009cb0 <_strtod_l+0x260>
 8009ca8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009caa:	434f      	muls	r7, r1
 8009cac:	9709      	str	r7, [sp, #36]	; 0x24
 8009cae:	e7e1      	b.n	8009c74 <_strtod_l+0x224>
 8009cb0:	2b10      	cmp	r3, #16
 8009cb2:	bfd8      	it	le
 8009cb4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009cb8:	e7dc      	b.n	8009c74 <_strtod_l+0x224>
 8009cba:	2e10      	cmp	r6, #16
 8009cbc:	bfdc      	itt	le
 8009cbe:	230a      	movle	r3, #10
 8009cc0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009cc4:	e7e3      	b.n	8009c8e <_strtod_l+0x23e>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9305      	str	r3, [sp, #20]
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e780      	b.n	8009bd0 <_strtod_l+0x180>
 8009cce:	f04f 0c00 	mov.w	ip, #0
 8009cd2:	1caa      	adds	r2, r5, #2
 8009cd4:	9215      	str	r2, [sp, #84]	; 0x54
 8009cd6:	78aa      	ldrb	r2, [r5, #2]
 8009cd8:	e788      	b.n	8009bec <_strtod_l+0x19c>
 8009cda:	f04f 0c01 	mov.w	ip, #1
 8009cde:	e7f8      	b.n	8009cd2 <_strtod_l+0x282>
 8009ce0:	0800c918 	.word	0x0800c918
 8009ce4:	0800c908 	.word	0x0800c908
 8009ce8:	7ff00000 	.word	0x7ff00000
 8009cec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009cee:	1c51      	adds	r1, r2, #1
 8009cf0:	9115      	str	r1, [sp, #84]	; 0x54
 8009cf2:	7852      	ldrb	r2, [r2, #1]
 8009cf4:	2a30      	cmp	r2, #48	; 0x30
 8009cf6:	d0f9      	beq.n	8009cec <_strtod_l+0x29c>
 8009cf8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009cfc:	2908      	cmp	r1, #8
 8009cfe:	f63f af7a 	bhi.w	8009bf6 <_strtod_l+0x1a6>
 8009d02:	3a30      	subs	r2, #48	; 0x30
 8009d04:	9208      	str	r2, [sp, #32]
 8009d06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d08:	920c      	str	r2, [sp, #48]	; 0x30
 8009d0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d0c:	1c57      	adds	r7, r2, #1
 8009d0e:	9715      	str	r7, [sp, #84]	; 0x54
 8009d10:	7852      	ldrb	r2, [r2, #1]
 8009d12:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009d16:	f1be 0f09 	cmp.w	lr, #9
 8009d1a:	d938      	bls.n	8009d8e <_strtod_l+0x33e>
 8009d1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d1e:	1a7f      	subs	r7, r7, r1
 8009d20:	2f08      	cmp	r7, #8
 8009d22:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009d26:	dc03      	bgt.n	8009d30 <_strtod_l+0x2e0>
 8009d28:	9908      	ldr	r1, [sp, #32]
 8009d2a:	428f      	cmp	r7, r1
 8009d2c:	bfa8      	it	ge
 8009d2e:	460f      	movge	r7, r1
 8009d30:	f1bc 0f00 	cmp.w	ip, #0
 8009d34:	d000      	beq.n	8009d38 <_strtod_l+0x2e8>
 8009d36:	427f      	negs	r7, r7
 8009d38:	2e00      	cmp	r6, #0
 8009d3a:	d14f      	bne.n	8009ddc <_strtod_l+0x38c>
 8009d3c:	9904      	ldr	r1, [sp, #16]
 8009d3e:	4301      	orrs	r1, r0
 8009d40:	f47f aec1 	bne.w	8009ac6 <_strtod_l+0x76>
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f47f aedb 	bne.w	8009b00 <_strtod_l+0xb0>
 8009d4a:	2a69      	cmp	r2, #105	; 0x69
 8009d4c:	d029      	beq.n	8009da2 <_strtod_l+0x352>
 8009d4e:	dc26      	bgt.n	8009d9e <_strtod_l+0x34e>
 8009d50:	2a49      	cmp	r2, #73	; 0x49
 8009d52:	d026      	beq.n	8009da2 <_strtod_l+0x352>
 8009d54:	2a4e      	cmp	r2, #78	; 0x4e
 8009d56:	f47f aed3 	bne.w	8009b00 <_strtod_l+0xb0>
 8009d5a:	499b      	ldr	r1, [pc, #620]	; (8009fc8 <_strtod_l+0x578>)
 8009d5c:	a815      	add	r0, sp, #84	; 0x54
 8009d5e:	f001 f909 	bl	800af74 <__match>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	f43f aecc 	beq.w	8009b00 <_strtod_l+0xb0>
 8009d68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b28      	cmp	r3, #40	; 0x28
 8009d6e:	d12f      	bne.n	8009dd0 <_strtod_l+0x380>
 8009d70:	4996      	ldr	r1, [pc, #600]	; (8009fcc <_strtod_l+0x57c>)
 8009d72:	aa18      	add	r2, sp, #96	; 0x60
 8009d74:	a815      	add	r0, sp, #84	; 0x54
 8009d76:	f001 f911 	bl	800af9c <__hexnan>
 8009d7a:	2805      	cmp	r0, #5
 8009d7c:	d128      	bne.n	8009dd0 <_strtod_l+0x380>
 8009d7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d84:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009d88:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009d8c:	e69b      	b.n	8009ac6 <_strtod_l+0x76>
 8009d8e:	9f08      	ldr	r7, [sp, #32]
 8009d90:	210a      	movs	r1, #10
 8009d92:	fb01 2107 	mla	r1, r1, r7, r2
 8009d96:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009d9a:	9208      	str	r2, [sp, #32]
 8009d9c:	e7b5      	b.n	8009d0a <_strtod_l+0x2ba>
 8009d9e:	2a6e      	cmp	r2, #110	; 0x6e
 8009da0:	e7d9      	b.n	8009d56 <_strtod_l+0x306>
 8009da2:	498b      	ldr	r1, [pc, #556]	; (8009fd0 <_strtod_l+0x580>)
 8009da4:	a815      	add	r0, sp, #84	; 0x54
 8009da6:	f001 f8e5 	bl	800af74 <__match>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f43f aea8 	beq.w	8009b00 <_strtod_l+0xb0>
 8009db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009db2:	4988      	ldr	r1, [pc, #544]	; (8009fd4 <_strtod_l+0x584>)
 8009db4:	3b01      	subs	r3, #1
 8009db6:	a815      	add	r0, sp, #84	; 0x54
 8009db8:	9315      	str	r3, [sp, #84]	; 0x54
 8009dba:	f001 f8db 	bl	800af74 <__match>
 8009dbe:	b910      	cbnz	r0, 8009dc6 <_strtod_l+0x376>
 8009dc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	9315      	str	r3, [sp, #84]	; 0x54
 8009dc6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009fe4 <_strtod_l+0x594>
 8009dca:	f04f 0800 	mov.w	r8, #0
 8009dce:	e67a      	b.n	8009ac6 <_strtod_l+0x76>
 8009dd0:	4881      	ldr	r0, [pc, #516]	; (8009fd8 <_strtod_l+0x588>)
 8009dd2:	f7fe f8e1 	bl	8007f98 <nan>
 8009dd6:	ec59 8b10 	vmov	r8, r9, d0
 8009dda:	e674      	b.n	8009ac6 <_strtod_l+0x76>
 8009ddc:	9b05      	ldr	r3, [sp, #20]
 8009dde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009de0:	1afb      	subs	r3, r7, r3
 8009de2:	f1bb 0f00 	cmp.w	fp, #0
 8009de6:	bf08      	it	eq
 8009de8:	46b3      	moveq	fp, r6
 8009dea:	2e10      	cmp	r6, #16
 8009dec:	9308      	str	r3, [sp, #32]
 8009dee:	4635      	mov	r5, r6
 8009df0:	bfa8      	it	ge
 8009df2:	2510      	movge	r5, #16
 8009df4:	f7f6 fb7e 	bl	80004f4 <__aeabi_ui2d>
 8009df8:	2e09      	cmp	r6, #9
 8009dfa:	4680      	mov	r8, r0
 8009dfc:	4689      	mov	r9, r1
 8009dfe:	dd13      	ble.n	8009e28 <_strtod_l+0x3d8>
 8009e00:	4b76      	ldr	r3, [pc, #472]	; (8009fdc <_strtod_l+0x58c>)
 8009e02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009e06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009e0a:	f7f6 fbed 	bl	80005e8 <__aeabi_dmul>
 8009e0e:	4680      	mov	r8, r0
 8009e10:	4650      	mov	r0, sl
 8009e12:	4689      	mov	r9, r1
 8009e14:	f7f6 fb6e 	bl	80004f4 <__aeabi_ui2d>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	4649      	mov	r1, r9
 8009e20:	f7f6 fa2c 	bl	800027c <__adddf3>
 8009e24:	4680      	mov	r8, r0
 8009e26:	4689      	mov	r9, r1
 8009e28:	2e0f      	cmp	r6, #15
 8009e2a:	dc38      	bgt.n	8009e9e <_strtod_l+0x44e>
 8009e2c:	9b08      	ldr	r3, [sp, #32]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f43f ae49 	beq.w	8009ac6 <_strtod_l+0x76>
 8009e34:	dd24      	ble.n	8009e80 <_strtod_l+0x430>
 8009e36:	2b16      	cmp	r3, #22
 8009e38:	dc0b      	bgt.n	8009e52 <_strtod_l+0x402>
 8009e3a:	4968      	ldr	r1, [pc, #416]	; (8009fdc <_strtod_l+0x58c>)
 8009e3c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e44:	4642      	mov	r2, r8
 8009e46:	464b      	mov	r3, r9
 8009e48:	f7f6 fbce 	bl	80005e8 <__aeabi_dmul>
 8009e4c:	4680      	mov	r8, r0
 8009e4e:	4689      	mov	r9, r1
 8009e50:	e639      	b.n	8009ac6 <_strtod_l+0x76>
 8009e52:	9a08      	ldr	r2, [sp, #32]
 8009e54:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	db20      	blt.n	8009e9e <_strtod_l+0x44e>
 8009e5c:	4c5f      	ldr	r4, [pc, #380]	; (8009fdc <_strtod_l+0x58c>)
 8009e5e:	f1c6 060f 	rsb	r6, r6, #15
 8009e62:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009e66:	4642      	mov	r2, r8
 8009e68:	464b      	mov	r3, r9
 8009e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e6e:	f7f6 fbbb 	bl	80005e8 <__aeabi_dmul>
 8009e72:	9b08      	ldr	r3, [sp, #32]
 8009e74:	1b9e      	subs	r6, r3, r6
 8009e76:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009e7a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e7e:	e7e3      	b.n	8009e48 <_strtod_l+0x3f8>
 8009e80:	9b08      	ldr	r3, [sp, #32]
 8009e82:	3316      	adds	r3, #22
 8009e84:	db0b      	blt.n	8009e9e <_strtod_l+0x44e>
 8009e86:	9b05      	ldr	r3, [sp, #20]
 8009e88:	1bdf      	subs	r7, r3, r7
 8009e8a:	4b54      	ldr	r3, [pc, #336]	; (8009fdc <_strtod_l+0x58c>)
 8009e8c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e94:	4640      	mov	r0, r8
 8009e96:	4649      	mov	r1, r9
 8009e98:	f7f6 fcd0 	bl	800083c <__aeabi_ddiv>
 8009e9c:	e7d6      	b.n	8009e4c <_strtod_l+0x3fc>
 8009e9e:	9b08      	ldr	r3, [sp, #32]
 8009ea0:	1b75      	subs	r5, r6, r5
 8009ea2:	441d      	add	r5, r3
 8009ea4:	2d00      	cmp	r5, #0
 8009ea6:	dd70      	ble.n	8009f8a <_strtod_l+0x53a>
 8009ea8:	f015 030f 	ands.w	r3, r5, #15
 8009eac:	d00a      	beq.n	8009ec4 <_strtod_l+0x474>
 8009eae:	494b      	ldr	r1, [pc, #300]	; (8009fdc <_strtod_l+0x58c>)
 8009eb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009eb4:	4642      	mov	r2, r8
 8009eb6:	464b      	mov	r3, r9
 8009eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ebc:	f7f6 fb94 	bl	80005e8 <__aeabi_dmul>
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	4689      	mov	r9, r1
 8009ec4:	f035 050f 	bics.w	r5, r5, #15
 8009ec8:	d04d      	beq.n	8009f66 <_strtod_l+0x516>
 8009eca:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009ece:	dd22      	ble.n	8009f16 <_strtod_l+0x4c6>
 8009ed0:	2500      	movs	r5, #0
 8009ed2:	46ab      	mov	fp, r5
 8009ed4:	9509      	str	r5, [sp, #36]	; 0x24
 8009ed6:	9505      	str	r5, [sp, #20]
 8009ed8:	2322      	movs	r3, #34	; 0x22
 8009eda:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009fe4 <_strtod_l+0x594>
 8009ede:	6023      	str	r3, [r4, #0]
 8009ee0:	f04f 0800 	mov.w	r8, #0
 8009ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f43f aded 	beq.w	8009ac6 <_strtod_l+0x76>
 8009eec:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f001 f9ee 	bl	800b2d0 <_Bfree>
 8009ef4:	9905      	ldr	r1, [sp, #20]
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f001 f9ea 	bl	800b2d0 <_Bfree>
 8009efc:	4659      	mov	r1, fp
 8009efe:	4620      	mov	r0, r4
 8009f00:	f001 f9e6 	bl	800b2d0 <_Bfree>
 8009f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f06:	4620      	mov	r0, r4
 8009f08:	f001 f9e2 	bl	800b2d0 <_Bfree>
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f001 f9de 	bl	800b2d0 <_Bfree>
 8009f14:	e5d7      	b.n	8009ac6 <_strtod_l+0x76>
 8009f16:	4b32      	ldr	r3, [pc, #200]	; (8009fe0 <_strtod_l+0x590>)
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	112d      	asrs	r5, r5, #4
 8009f1e:	4640      	mov	r0, r8
 8009f20:	4649      	mov	r1, r9
 8009f22:	469a      	mov	sl, r3
 8009f24:	2d01      	cmp	r5, #1
 8009f26:	dc21      	bgt.n	8009f6c <_strtod_l+0x51c>
 8009f28:	b10b      	cbz	r3, 8009f2e <_strtod_l+0x4de>
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	4689      	mov	r9, r1
 8009f2e:	492c      	ldr	r1, [pc, #176]	; (8009fe0 <_strtod_l+0x590>)
 8009f30:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009f34:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009f38:	4642      	mov	r2, r8
 8009f3a:	464b      	mov	r3, r9
 8009f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f40:	f7f6 fb52 	bl	80005e8 <__aeabi_dmul>
 8009f44:	4b27      	ldr	r3, [pc, #156]	; (8009fe4 <_strtod_l+0x594>)
 8009f46:	460a      	mov	r2, r1
 8009f48:	400b      	ands	r3, r1
 8009f4a:	4927      	ldr	r1, [pc, #156]	; (8009fe8 <_strtod_l+0x598>)
 8009f4c:	428b      	cmp	r3, r1
 8009f4e:	4680      	mov	r8, r0
 8009f50:	d8be      	bhi.n	8009ed0 <_strtod_l+0x480>
 8009f52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009f56:	428b      	cmp	r3, r1
 8009f58:	bf86      	itte	hi
 8009f5a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009fec <_strtod_l+0x59c>
 8009f5e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009f62:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009f66:	2300      	movs	r3, #0
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	e07b      	b.n	800a064 <_strtod_l+0x614>
 8009f6c:	07ea      	lsls	r2, r5, #31
 8009f6e:	d505      	bpl.n	8009f7c <_strtod_l+0x52c>
 8009f70:	9b04      	ldr	r3, [sp, #16]
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	f7f6 fb37 	bl	80005e8 <__aeabi_dmul>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	9a04      	ldr	r2, [sp, #16]
 8009f7e:	3208      	adds	r2, #8
 8009f80:	f10a 0a01 	add.w	sl, sl, #1
 8009f84:	106d      	asrs	r5, r5, #1
 8009f86:	9204      	str	r2, [sp, #16]
 8009f88:	e7cc      	b.n	8009f24 <_strtod_l+0x4d4>
 8009f8a:	d0ec      	beq.n	8009f66 <_strtod_l+0x516>
 8009f8c:	426d      	negs	r5, r5
 8009f8e:	f015 020f 	ands.w	r2, r5, #15
 8009f92:	d00a      	beq.n	8009faa <_strtod_l+0x55a>
 8009f94:	4b11      	ldr	r3, [pc, #68]	; (8009fdc <_strtod_l+0x58c>)
 8009f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	4649      	mov	r1, r9
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	f7f6 fc4b 	bl	800083c <__aeabi_ddiv>
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	4689      	mov	r9, r1
 8009faa:	112d      	asrs	r5, r5, #4
 8009fac:	d0db      	beq.n	8009f66 <_strtod_l+0x516>
 8009fae:	2d1f      	cmp	r5, #31
 8009fb0:	dd1e      	ble.n	8009ff0 <_strtod_l+0x5a0>
 8009fb2:	2500      	movs	r5, #0
 8009fb4:	46ab      	mov	fp, r5
 8009fb6:	9509      	str	r5, [sp, #36]	; 0x24
 8009fb8:	9505      	str	r5, [sp, #20]
 8009fba:	2322      	movs	r3, #34	; 0x22
 8009fbc:	f04f 0800 	mov.w	r8, #0
 8009fc0:	f04f 0900 	mov.w	r9, #0
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	e78d      	b.n	8009ee4 <_strtod_l+0x494>
 8009fc8:	0800c913 	.word	0x0800c913
 8009fcc:	0800c92c 	.word	0x0800c92c
 8009fd0:	0800c90a 	.word	0x0800c90a
 8009fd4:	0800c90d 	.word	0x0800c90d
 8009fd8:	0800cc90 	.word	0x0800cc90
 8009fdc:	0800ca80 	.word	0x0800ca80
 8009fe0:	0800ca58 	.word	0x0800ca58
 8009fe4:	7ff00000 	.word	0x7ff00000
 8009fe8:	7ca00000 	.word	0x7ca00000
 8009fec:	7fefffff 	.word	0x7fefffff
 8009ff0:	f015 0310 	ands.w	r3, r5, #16
 8009ff4:	bf18      	it	ne
 8009ff6:	236a      	movne	r3, #106	; 0x6a
 8009ff8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a39c <_strtod_l+0x94c>
 8009ffc:	9304      	str	r3, [sp, #16]
 8009ffe:	4640      	mov	r0, r8
 800a000:	4649      	mov	r1, r9
 800a002:	2300      	movs	r3, #0
 800a004:	07ea      	lsls	r2, r5, #31
 800a006:	d504      	bpl.n	800a012 <_strtod_l+0x5c2>
 800a008:	e9da 2300 	ldrd	r2, r3, [sl]
 800a00c:	f7f6 faec 	bl	80005e8 <__aeabi_dmul>
 800a010:	2301      	movs	r3, #1
 800a012:	106d      	asrs	r5, r5, #1
 800a014:	f10a 0a08 	add.w	sl, sl, #8
 800a018:	d1f4      	bne.n	800a004 <_strtod_l+0x5b4>
 800a01a:	b10b      	cbz	r3, 800a020 <_strtod_l+0x5d0>
 800a01c:	4680      	mov	r8, r0
 800a01e:	4689      	mov	r9, r1
 800a020:	9b04      	ldr	r3, [sp, #16]
 800a022:	b1bb      	cbz	r3, 800a054 <_strtod_l+0x604>
 800a024:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a028:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	4649      	mov	r1, r9
 800a030:	dd10      	ble.n	800a054 <_strtod_l+0x604>
 800a032:	2b1f      	cmp	r3, #31
 800a034:	f340 811e 	ble.w	800a274 <_strtod_l+0x824>
 800a038:	2b34      	cmp	r3, #52	; 0x34
 800a03a:	bfde      	ittt	le
 800a03c:	f04f 33ff 	movle.w	r3, #4294967295
 800a040:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a044:	4093      	lslle	r3, r2
 800a046:	f04f 0800 	mov.w	r8, #0
 800a04a:	bfcc      	ite	gt
 800a04c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a050:	ea03 0901 	andle.w	r9, r3, r1
 800a054:	2200      	movs	r2, #0
 800a056:	2300      	movs	r3, #0
 800a058:	4640      	mov	r0, r8
 800a05a:	4649      	mov	r1, r9
 800a05c:	f7f6 fd2c 	bl	8000ab8 <__aeabi_dcmpeq>
 800a060:	2800      	cmp	r0, #0
 800a062:	d1a6      	bne.n	8009fb2 <_strtod_l+0x562>
 800a064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a06a:	4633      	mov	r3, r6
 800a06c:	465a      	mov	r2, fp
 800a06e:	4620      	mov	r0, r4
 800a070:	f001 f996 	bl	800b3a0 <__s2b>
 800a074:	9009      	str	r0, [sp, #36]	; 0x24
 800a076:	2800      	cmp	r0, #0
 800a078:	f43f af2a 	beq.w	8009ed0 <_strtod_l+0x480>
 800a07c:	9a08      	ldr	r2, [sp, #32]
 800a07e:	9b05      	ldr	r3, [sp, #20]
 800a080:	2a00      	cmp	r2, #0
 800a082:	eba3 0307 	sub.w	r3, r3, r7
 800a086:	bfa8      	it	ge
 800a088:	2300      	movge	r3, #0
 800a08a:	930c      	str	r3, [sp, #48]	; 0x30
 800a08c:	2500      	movs	r5, #0
 800a08e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a092:	9312      	str	r3, [sp, #72]	; 0x48
 800a094:	46ab      	mov	fp, r5
 800a096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a098:	4620      	mov	r0, r4
 800a09a:	6859      	ldr	r1, [r3, #4]
 800a09c:	f001 f8d8 	bl	800b250 <_Balloc>
 800a0a0:	9005      	str	r0, [sp, #20]
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	f43f af18 	beq.w	8009ed8 <_strtod_l+0x488>
 800a0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0aa:	691a      	ldr	r2, [r3, #16]
 800a0ac:	3202      	adds	r2, #2
 800a0ae:	f103 010c 	add.w	r1, r3, #12
 800a0b2:	0092      	lsls	r2, r2, #2
 800a0b4:	300c      	adds	r0, #12
 800a0b6:	f000 fc5a 	bl	800a96e <memcpy>
 800a0ba:	ec49 8b10 	vmov	d0, r8, r9
 800a0be:	aa18      	add	r2, sp, #96	; 0x60
 800a0c0:	a917      	add	r1, sp, #92	; 0x5c
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f001 fca0 	bl	800ba08 <__d2b>
 800a0c8:	ec49 8b18 	vmov	d8, r8, r9
 800a0cc:	9016      	str	r0, [sp, #88]	; 0x58
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	f43f af02 	beq.w	8009ed8 <_strtod_l+0x488>
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f001 f9fa 	bl	800b4d0 <__i2b>
 800a0dc:	4683      	mov	fp, r0
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	f43f aefa 	beq.w	8009ed8 <_strtod_l+0x488>
 800a0e4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a0e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a0e8:	2e00      	cmp	r6, #0
 800a0ea:	bfab      	itete	ge
 800a0ec:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a0ee:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a0f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a0f2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a0f6:	bfac      	ite	ge
 800a0f8:	eb06 0a03 	addge.w	sl, r6, r3
 800a0fc:	1b9f      	sublt	r7, r3, r6
 800a0fe:	9b04      	ldr	r3, [sp, #16]
 800a100:	1af6      	subs	r6, r6, r3
 800a102:	4416      	add	r6, r2
 800a104:	4ba0      	ldr	r3, [pc, #640]	; (800a388 <_strtod_l+0x938>)
 800a106:	3e01      	subs	r6, #1
 800a108:	429e      	cmp	r6, r3
 800a10a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a10e:	f280 80c4 	bge.w	800a29a <_strtod_l+0x84a>
 800a112:	1b9b      	subs	r3, r3, r6
 800a114:	2b1f      	cmp	r3, #31
 800a116:	eba2 0203 	sub.w	r2, r2, r3
 800a11a:	f04f 0101 	mov.w	r1, #1
 800a11e:	f300 80b0 	bgt.w	800a282 <_strtod_l+0x832>
 800a122:	fa01 f303 	lsl.w	r3, r1, r3
 800a126:	930e      	str	r3, [sp, #56]	; 0x38
 800a128:	2300      	movs	r3, #0
 800a12a:	930d      	str	r3, [sp, #52]	; 0x34
 800a12c:	eb0a 0602 	add.w	r6, sl, r2
 800a130:	9b04      	ldr	r3, [sp, #16]
 800a132:	45b2      	cmp	sl, r6
 800a134:	4417      	add	r7, r2
 800a136:	441f      	add	r7, r3
 800a138:	4653      	mov	r3, sl
 800a13a:	bfa8      	it	ge
 800a13c:	4633      	movge	r3, r6
 800a13e:	42bb      	cmp	r3, r7
 800a140:	bfa8      	it	ge
 800a142:	463b      	movge	r3, r7
 800a144:	2b00      	cmp	r3, #0
 800a146:	bfc2      	ittt	gt
 800a148:	1af6      	subgt	r6, r6, r3
 800a14a:	1aff      	subgt	r7, r7, r3
 800a14c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a152:	2b00      	cmp	r3, #0
 800a154:	dd17      	ble.n	800a186 <_strtod_l+0x736>
 800a156:	4659      	mov	r1, fp
 800a158:	461a      	mov	r2, r3
 800a15a:	4620      	mov	r0, r4
 800a15c:	f001 fa78 	bl	800b650 <__pow5mult>
 800a160:	4683      	mov	fp, r0
 800a162:	2800      	cmp	r0, #0
 800a164:	f43f aeb8 	beq.w	8009ed8 <_strtod_l+0x488>
 800a168:	4601      	mov	r1, r0
 800a16a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a16c:	4620      	mov	r0, r4
 800a16e:	f001 f9c5 	bl	800b4fc <__multiply>
 800a172:	900b      	str	r0, [sp, #44]	; 0x2c
 800a174:	2800      	cmp	r0, #0
 800a176:	f43f aeaf 	beq.w	8009ed8 <_strtod_l+0x488>
 800a17a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a17c:	4620      	mov	r0, r4
 800a17e:	f001 f8a7 	bl	800b2d0 <_Bfree>
 800a182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a184:	9316      	str	r3, [sp, #88]	; 0x58
 800a186:	2e00      	cmp	r6, #0
 800a188:	f300 808c 	bgt.w	800a2a4 <_strtod_l+0x854>
 800a18c:	9b08      	ldr	r3, [sp, #32]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	dd08      	ble.n	800a1a4 <_strtod_l+0x754>
 800a192:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a194:	9905      	ldr	r1, [sp, #20]
 800a196:	4620      	mov	r0, r4
 800a198:	f001 fa5a 	bl	800b650 <__pow5mult>
 800a19c:	9005      	str	r0, [sp, #20]
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	f43f ae9a 	beq.w	8009ed8 <_strtod_l+0x488>
 800a1a4:	2f00      	cmp	r7, #0
 800a1a6:	dd08      	ble.n	800a1ba <_strtod_l+0x76a>
 800a1a8:	9905      	ldr	r1, [sp, #20]
 800a1aa:	463a      	mov	r2, r7
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f001 faa9 	bl	800b704 <__lshift>
 800a1b2:	9005      	str	r0, [sp, #20]
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	f43f ae8f 	beq.w	8009ed8 <_strtod_l+0x488>
 800a1ba:	f1ba 0f00 	cmp.w	sl, #0
 800a1be:	dd08      	ble.n	800a1d2 <_strtod_l+0x782>
 800a1c0:	4659      	mov	r1, fp
 800a1c2:	4652      	mov	r2, sl
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f001 fa9d 	bl	800b704 <__lshift>
 800a1ca:	4683      	mov	fp, r0
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	f43f ae83 	beq.w	8009ed8 <_strtod_l+0x488>
 800a1d2:	9a05      	ldr	r2, [sp, #20]
 800a1d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f001 fb1c 	bl	800b814 <__mdiff>
 800a1dc:	4605      	mov	r5, r0
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f43f ae7a 	beq.w	8009ed8 <_strtod_l+0x488>
 800a1e4:	68c3      	ldr	r3, [r0, #12]
 800a1e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	60c3      	str	r3, [r0, #12]
 800a1ec:	4659      	mov	r1, fp
 800a1ee:	f001 faf5 	bl	800b7dc <__mcmp>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	da60      	bge.n	800a2b8 <_strtod_l+0x868>
 800a1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f8:	ea53 0308 	orrs.w	r3, r3, r8
 800a1fc:	f040 8084 	bne.w	800a308 <_strtod_l+0x8b8>
 800a200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a204:	2b00      	cmp	r3, #0
 800a206:	d17f      	bne.n	800a308 <_strtod_l+0x8b8>
 800a208:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a20c:	0d1b      	lsrs	r3, r3, #20
 800a20e:	051b      	lsls	r3, r3, #20
 800a210:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a214:	d978      	bls.n	800a308 <_strtod_l+0x8b8>
 800a216:	696b      	ldr	r3, [r5, #20]
 800a218:	b913      	cbnz	r3, 800a220 <_strtod_l+0x7d0>
 800a21a:	692b      	ldr	r3, [r5, #16]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	dd73      	ble.n	800a308 <_strtod_l+0x8b8>
 800a220:	4629      	mov	r1, r5
 800a222:	2201      	movs	r2, #1
 800a224:	4620      	mov	r0, r4
 800a226:	f001 fa6d 	bl	800b704 <__lshift>
 800a22a:	4659      	mov	r1, fp
 800a22c:	4605      	mov	r5, r0
 800a22e:	f001 fad5 	bl	800b7dc <__mcmp>
 800a232:	2800      	cmp	r0, #0
 800a234:	dd68      	ble.n	800a308 <_strtod_l+0x8b8>
 800a236:	9904      	ldr	r1, [sp, #16]
 800a238:	4a54      	ldr	r2, [pc, #336]	; (800a38c <_strtod_l+0x93c>)
 800a23a:	464b      	mov	r3, r9
 800a23c:	2900      	cmp	r1, #0
 800a23e:	f000 8084 	beq.w	800a34a <_strtod_l+0x8fa>
 800a242:	ea02 0109 	and.w	r1, r2, r9
 800a246:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a24a:	dc7e      	bgt.n	800a34a <_strtod_l+0x8fa>
 800a24c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a250:	f77f aeb3 	ble.w	8009fba <_strtod_l+0x56a>
 800a254:	4b4e      	ldr	r3, [pc, #312]	; (800a390 <_strtod_l+0x940>)
 800a256:	4640      	mov	r0, r8
 800a258:	4649      	mov	r1, r9
 800a25a:	2200      	movs	r2, #0
 800a25c:	f7f6 f9c4 	bl	80005e8 <__aeabi_dmul>
 800a260:	4b4a      	ldr	r3, [pc, #296]	; (800a38c <_strtod_l+0x93c>)
 800a262:	400b      	ands	r3, r1
 800a264:	4680      	mov	r8, r0
 800a266:	4689      	mov	r9, r1
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f47f ae3f 	bne.w	8009eec <_strtod_l+0x49c>
 800a26e:	2322      	movs	r3, #34	; 0x22
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	e63b      	b.n	8009eec <_strtod_l+0x49c>
 800a274:	f04f 32ff 	mov.w	r2, #4294967295
 800a278:	fa02 f303 	lsl.w	r3, r2, r3
 800a27c:	ea03 0808 	and.w	r8, r3, r8
 800a280:	e6e8      	b.n	800a054 <_strtod_l+0x604>
 800a282:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a286:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a28a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a28e:	36e2      	adds	r6, #226	; 0xe2
 800a290:	fa01 f306 	lsl.w	r3, r1, r6
 800a294:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a298:	e748      	b.n	800a12c <_strtod_l+0x6dc>
 800a29a:	2100      	movs	r1, #0
 800a29c:	2301      	movs	r3, #1
 800a29e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a2a2:	e743      	b.n	800a12c <_strtod_l+0x6dc>
 800a2a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a2a6:	4632      	mov	r2, r6
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f001 fa2b 	bl	800b704 <__lshift>
 800a2ae:	9016      	str	r0, [sp, #88]	; 0x58
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	f47f af6b 	bne.w	800a18c <_strtod_l+0x73c>
 800a2b6:	e60f      	b.n	8009ed8 <_strtod_l+0x488>
 800a2b8:	46ca      	mov	sl, r9
 800a2ba:	d171      	bne.n	800a3a0 <_strtod_l+0x950>
 800a2bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2c2:	b352      	cbz	r2, 800a31a <_strtod_l+0x8ca>
 800a2c4:	4a33      	ldr	r2, [pc, #204]	; (800a394 <_strtod_l+0x944>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d12a      	bne.n	800a320 <_strtod_l+0x8d0>
 800a2ca:	9b04      	ldr	r3, [sp, #16]
 800a2cc:	4641      	mov	r1, r8
 800a2ce:	b1fb      	cbz	r3, 800a310 <_strtod_l+0x8c0>
 800a2d0:	4b2e      	ldr	r3, [pc, #184]	; (800a38c <_strtod_l+0x93c>)
 800a2d2:	ea09 0303 	and.w	r3, r9, r3
 800a2d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a2da:	f04f 32ff 	mov.w	r2, #4294967295
 800a2de:	d81a      	bhi.n	800a316 <_strtod_l+0x8c6>
 800a2e0:	0d1b      	lsrs	r3, r3, #20
 800a2e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ea:	4299      	cmp	r1, r3
 800a2ec:	d118      	bne.n	800a320 <_strtod_l+0x8d0>
 800a2ee:	4b2a      	ldr	r3, [pc, #168]	; (800a398 <_strtod_l+0x948>)
 800a2f0:	459a      	cmp	sl, r3
 800a2f2:	d102      	bne.n	800a2fa <_strtod_l+0x8aa>
 800a2f4:	3101      	adds	r1, #1
 800a2f6:	f43f adef 	beq.w	8009ed8 <_strtod_l+0x488>
 800a2fa:	4b24      	ldr	r3, [pc, #144]	; (800a38c <_strtod_l+0x93c>)
 800a2fc:	ea0a 0303 	and.w	r3, sl, r3
 800a300:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a304:	f04f 0800 	mov.w	r8, #0
 800a308:	9b04      	ldr	r3, [sp, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1a2      	bne.n	800a254 <_strtod_l+0x804>
 800a30e:	e5ed      	b.n	8009eec <_strtod_l+0x49c>
 800a310:	f04f 33ff 	mov.w	r3, #4294967295
 800a314:	e7e9      	b.n	800a2ea <_strtod_l+0x89a>
 800a316:	4613      	mov	r3, r2
 800a318:	e7e7      	b.n	800a2ea <_strtod_l+0x89a>
 800a31a:	ea53 0308 	orrs.w	r3, r3, r8
 800a31e:	d08a      	beq.n	800a236 <_strtod_l+0x7e6>
 800a320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a322:	b1e3      	cbz	r3, 800a35e <_strtod_l+0x90e>
 800a324:	ea13 0f0a 	tst.w	r3, sl
 800a328:	d0ee      	beq.n	800a308 <_strtod_l+0x8b8>
 800a32a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a32c:	9a04      	ldr	r2, [sp, #16]
 800a32e:	4640      	mov	r0, r8
 800a330:	4649      	mov	r1, r9
 800a332:	b1c3      	cbz	r3, 800a366 <_strtod_l+0x916>
 800a334:	f7ff fb70 	bl	8009a18 <sulp>
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	ec51 0b18 	vmov	r0, r1, d8
 800a340:	f7f5 ff9c 	bl	800027c <__adddf3>
 800a344:	4680      	mov	r8, r0
 800a346:	4689      	mov	r9, r1
 800a348:	e7de      	b.n	800a308 <_strtod_l+0x8b8>
 800a34a:	4013      	ands	r3, r2
 800a34c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a350:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a354:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a358:	f04f 38ff 	mov.w	r8, #4294967295
 800a35c:	e7d4      	b.n	800a308 <_strtod_l+0x8b8>
 800a35e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a360:	ea13 0f08 	tst.w	r3, r8
 800a364:	e7e0      	b.n	800a328 <_strtod_l+0x8d8>
 800a366:	f7ff fb57 	bl	8009a18 <sulp>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	ec51 0b18 	vmov	r0, r1, d8
 800a372:	f7f5 ff81 	bl	8000278 <__aeabi_dsub>
 800a376:	2200      	movs	r2, #0
 800a378:	2300      	movs	r3, #0
 800a37a:	4680      	mov	r8, r0
 800a37c:	4689      	mov	r9, r1
 800a37e:	f7f6 fb9b 	bl	8000ab8 <__aeabi_dcmpeq>
 800a382:	2800      	cmp	r0, #0
 800a384:	d0c0      	beq.n	800a308 <_strtod_l+0x8b8>
 800a386:	e618      	b.n	8009fba <_strtod_l+0x56a>
 800a388:	fffffc02 	.word	0xfffffc02
 800a38c:	7ff00000 	.word	0x7ff00000
 800a390:	39500000 	.word	0x39500000
 800a394:	000fffff 	.word	0x000fffff
 800a398:	7fefffff 	.word	0x7fefffff
 800a39c:	0800c940 	.word	0x0800c940
 800a3a0:	4659      	mov	r1, fp
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f001 fb8a 	bl	800babc <__ratio>
 800a3a8:	ec57 6b10 	vmov	r6, r7, d0
 800a3ac:	ee10 0a10 	vmov	r0, s0
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	f7f6 fb92 	bl	8000ae0 <__aeabi_dcmple>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d071      	beq.n	800a4a4 <_strtod_l+0xa54>
 800a3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d17c      	bne.n	800a4c0 <_strtod_l+0xa70>
 800a3c6:	f1b8 0f00 	cmp.w	r8, #0
 800a3ca:	d15a      	bne.n	800a482 <_strtod_l+0xa32>
 800a3cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d15d      	bne.n	800a490 <_strtod_l+0xa40>
 800a3d4:	4b90      	ldr	r3, [pc, #576]	; (800a618 <_strtod_l+0xbc8>)
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	4630      	mov	r0, r6
 800a3da:	4639      	mov	r1, r7
 800a3dc:	f7f6 fb76 	bl	8000acc <__aeabi_dcmplt>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d15c      	bne.n	800a49e <_strtod_l+0xa4e>
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	4639      	mov	r1, r7
 800a3e8:	4b8c      	ldr	r3, [pc, #560]	; (800a61c <_strtod_l+0xbcc>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f7f6 f8fc 	bl	80005e8 <__aeabi_dmul>
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	460f      	mov	r7, r1
 800a3f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a3f8:	9606      	str	r6, [sp, #24]
 800a3fa:	9307      	str	r3, [sp, #28]
 800a3fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a400:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a404:	4b86      	ldr	r3, [pc, #536]	; (800a620 <_strtod_l+0xbd0>)
 800a406:	ea0a 0303 	and.w	r3, sl, r3
 800a40a:	930d      	str	r3, [sp, #52]	; 0x34
 800a40c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a40e:	4b85      	ldr	r3, [pc, #532]	; (800a624 <_strtod_l+0xbd4>)
 800a410:	429a      	cmp	r2, r3
 800a412:	f040 8090 	bne.w	800a536 <_strtod_l+0xae6>
 800a416:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a41a:	ec49 8b10 	vmov	d0, r8, r9
 800a41e:	f001 fa83 	bl	800b928 <__ulp>
 800a422:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a426:	ec51 0b10 	vmov	r0, r1, d0
 800a42a:	f7f6 f8dd 	bl	80005e8 <__aeabi_dmul>
 800a42e:	4642      	mov	r2, r8
 800a430:	464b      	mov	r3, r9
 800a432:	f7f5 ff23 	bl	800027c <__adddf3>
 800a436:	460b      	mov	r3, r1
 800a438:	4979      	ldr	r1, [pc, #484]	; (800a620 <_strtod_l+0xbd0>)
 800a43a:	4a7b      	ldr	r2, [pc, #492]	; (800a628 <_strtod_l+0xbd8>)
 800a43c:	4019      	ands	r1, r3
 800a43e:	4291      	cmp	r1, r2
 800a440:	4680      	mov	r8, r0
 800a442:	d944      	bls.n	800a4ce <_strtod_l+0xa7e>
 800a444:	ee18 2a90 	vmov	r2, s17
 800a448:	4b78      	ldr	r3, [pc, #480]	; (800a62c <_strtod_l+0xbdc>)
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d104      	bne.n	800a458 <_strtod_l+0xa08>
 800a44e:	ee18 3a10 	vmov	r3, s16
 800a452:	3301      	adds	r3, #1
 800a454:	f43f ad40 	beq.w	8009ed8 <_strtod_l+0x488>
 800a458:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a62c <_strtod_l+0xbdc>
 800a45c:	f04f 38ff 	mov.w	r8, #4294967295
 800a460:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a462:	4620      	mov	r0, r4
 800a464:	f000 ff34 	bl	800b2d0 <_Bfree>
 800a468:	9905      	ldr	r1, [sp, #20]
 800a46a:	4620      	mov	r0, r4
 800a46c:	f000 ff30 	bl	800b2d0 <_Bfree>
 800a470:	4659      	mov	r1, fp
 800a472:	4620      	mov	r0, r4
 800a474:	f000 ff2c 	bl	800b2d0 <_Bfree>
 800a478:	4629      	mov	r1, r5
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 ff28 	bl	800b2d0 <_Bfree>
 800a480:	e609      	b.n	800a096 <_strtod_l+0x646>
 800a482:	f1b8 0f01 	cmp.w	r8, #1
 800a486:	d103      	bne.n	800a490 <_strtod_l+0xa40>
 800a488:	f1b9 0f00 	cmp.w	r9, #0
 800a48c:	f43f ad95 	beq.w	8009fba <_strtod_l+0x56a>
 800a490:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a5e8 <_strtod_l+0xb98>
 800a494:	4f60      	ldr	r7, [pc, #384]	; (800a618 <_strtod_l+0xbc8>)
 800a496:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a49a:	2600      	movs	r6, #0
 800a49c:	e7ae      	b.n	800a3fc <_strtod_l+0x9ac>
 800a49e:	4f5f      	ldr	r7, [pc, #380]	; (800a61c <_strtod_l+0xbcc>)
 800a4a0:	2600      	movs	r6, #0
 800a4a2:	e7a7      	b.n	800a3f4 <_strtod_l+0x9a4>
 800a4a4:	4b5d      	ldr	r3, [pc, #372]	; (800a61c <_strtod_l+0xbcc>)
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	4639      	mov	r1, r7
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f7f6 f89c 	bl	80005e8 <__aeabi_dmul>
 800a4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4b2:	4606      	mov	r6, r0
 800a4b4:	460f      	mov	r7, r1
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d09c      	beq.n	800a3f4 <_strtod_l+0x9a4>
 800a4ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a4be:	e79d      	b.n	800a3fc <_strtod_l+0x9ac>
 800a4c0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a5f0 <_strtod_l+0xba0>
 800a4c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a4c8:	ec57 6b17 	vmov	r6, r7, d7
 800a4cc:	e796      	b.n	800a3fc <_strtod_l+0x9ac>
 800a4ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a4d2:	9b04      	ldr	r3, [sp, #16]
 800a4d4:	46ca      	mov	sl, r9
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1c2      	bne.n	800a460 <_strtod_l+0xa10>
 800a4da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a4de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4e0:	0d1b      	lsrs	r3, r3, #20
 800a4e2:	051b      	lsls	r3, r3, #20
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d1bb      	bne.n	800a460 <_strtod_l+0xa10>
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	f7f6 fbdc 	bl	8000ca8 <__aeabi_d2lz>
 800a4f0:	f7f6 f84c 	bl	800058c <__aeabi_l2d>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	f7f5 febc 	bl	8000278 <__aeabi_dsub>
 800a500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a502:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a506:	ea43 0308 	orr.w	r3, r3, r8
 800a50a:	4313      	orrs	r3, r2
 800a50c:	4606      	mov	r6, r0
 800a50e:	460f      	mov	r7, r1
 800a510:	d054      	beq.n	800a5bc <_strtod_l+0xb6c>
 800a512:	a339      	add	r3, pc, #228	; (adr r3, 800a5f8 <_strtod_l+0xba8>)
 800a514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a518:	f7f6 fad8 	bl	8000acc <__aeabi_dcmplt>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f47f ace5 	bne.w	8009eec <_strtod_l+0x49c>
 800a522:	a337      	add	r3, pc, #220	; (adr r3, 800a600 <_strtod_l+0xbb0>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	4630      	mov	r0, r6
 800a52a:	4639      	mov	r1, r7
 800a52c:	f7f6 faec 	bl	8000b08 <__aeabi_dcmpgt>
 800a530:	2800      	cmp	r0, #0
 800a532:	d095      	beq.n	800a460 <_strtod_l+0xa10>
 800a534:	e4da      	b.n	8009eec <_strtod_l+0x49c>
 800a536:	9b04      	ldr	r3, [sp, #16]
 800a538:	b333      	cbz	r3, 800a588 <_strtod_l+0xb38>
 800a53a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a53c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a540:	d822      	bhi.n	800a588 <_strtod_l+0xb38>
 800a542:	a331      	add	r3, pc, #196	; (adr r3, 800a608 <_strtod_l+0xbb8>)
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	4630      	mov	r0, r6
 800a54a:	4639      	mov	r1, r7
 800a54c:	f7f6 fac8 	bl	8000ae0 <__aeabi_dcmple>
 800a550:	b1a0      	cbz	r0, 800a57c <_strtod_l+0xb2c>
 800a552:	4639      	mov	r1, r7
 800a554:	4630      	mov	r0, r6
 800a556:	f7f6 fb1f 	bl	8000b98 <__aeabi_d2uiz>
 800a55a:	2801      	cmp	r0, #1
 800a55c:	bf38      	it	cc
 800a55e:	2001      	movcc	r0, #1
 800a560:	f7f5 ffc8 	bl	80004f4 <__aeabi_ui2d>
 800a564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a566:	4606      	mov	r6, r0
 800a568:	460f      	mov	r7, r1
 800a56a:	bb23      	cbnz	r3, 800a5b6 <_strtod_l+0xb66>
 800a56c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a570:	9010      	str	r0, [sp, #64]	; 0x40
 800a572:	9311      	str	r3, [sp, #68]	; 0x44
 800a574:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a578:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a57c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a57e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a580:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a584:	1a9b      	subs	r3, r3, r2
 800a586:	930f      	str	r3, [sp, #60]	; 0x3c
 800a588:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a58c:	eeb0 0a48 	vmov.f32	s0, s16
 800a590:	eef0 0a68 	vmov.f32	s1, s17
 800a594:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a598:	f001 f9c6 	bl	800b928 <__ulp>
 800a59c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a5a0:	ec53 2b10 	vmov	r2, r3, d0
 800a5a4:	f7f6 f820 	bl	80005e8 <__aeabi_dmul>
 800a5a8:	ec53 2b18 	vmov	r2, r3, d8
 800a5ac:	f7f5 fe66 	bl	800027c <__adddf3>
 800a5b0:	4680      	mov	r8, r0
 800a5b2:	4689      	mov	r9, r1
 800a5b4:	e78d      	b.n	800a4d2 <_strtod_l+0xa82>
 800a5b6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a5ba:	e7db      	b.n	800a574 <_strtod_l+0xb24>
 800a5bc:	a314      	add	r3, pc, #80	; (adr r3, 800a610 <_strtod_l+0xbc0>)
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	f7f6 fa83 	bl	8000acc <__aeabi_dcmplt>
 800a5c6:	e7b3      	b.n	800a530 <_strtod_l+0xae0>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a5cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a5ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5d0:	6013      	str	r3, [r2, #0]
 800a5d2:	f7ff ba7c 	b.w	8009ace <_strtod_l+0x7e>
 800a5d6:	2a65      	cmp	r2, #101	; 0x65
 800a5d8:	f43f ab75 	beq.w	8009cc6 <_strtod_l+0x276>
 800a5dc:	2a45      	cmp	r2, #69	; 0x45
 800a5de:	f43f ab72 	beq.w	8009cc6 <_strtod_l+0x276>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	f7ff bbaa 	b.w	8009d3c <_strtod_l+0x2ec>
 800a5e8:	00000000 	.word	0x00000000
 800a5ec:	bff00000 	.word	0xbff00000
 800a5f0:	00000000 	.word	0x00000000
 800a5f4:	3ff00000 	.word	0x3ff00000
 800a5f8:	94a03595 	.word	0x94a03595
 800a5fc:	3fdfffff 	.word	0x3fdfffff
 800a600:	35afe535 	.word	0x35afe535
 800a604:	3fe00000 	.word	0x3fe00000
 800a608:	ffc00000 	.word	0xffc00000
 800a60c:	41dfffff 	.word	0x41dfffff
 800a610:	94a03595 	.word	0x94a03595
 800a614:	3fcfffff 	.word	0x3fcfffff
 800a618:	3ff00000 	.word	0x3ff00000
 800a61c:	3fe00000 	.word	0x3fe00000
 800a620:	7ff00000 	.word	0x7ff00000
 800a624:	7fe00000 	.word	0x7fe00000
 800a628:	7c9fffff 	.word	0x7c9fffff
 800a62c:	7fefffff 	.word	0x7fefffff

0800a630 <strtod>:
 800a630:	460a      	mov	r2, r1
 800a632:	4601      	mov	r1, r0
 800a634:	4802      	ldr	r0, [pc, #8]	; (800a640 <strtod+0x10>)
 800a636:	4b03      	ldr	r3, [pc, #12]	; (800a644 <strtod+0x14>)
 800a638:	6800      	ldr	r0, [r0, #0]
 800a63a:	f7ff ba09 	b.w	8009a50 <_strtod_l>
 800a63e:	bf00      	nop
 800a640:	200001e4 	.word	0x200001e4
 800a644:	2000002c 	.word	0x2000002c

0800a648 <std>:
 800a648:	2300      	movs	r3, #0
 800a64a:	b510      	push	{r4, lr}
 800a64c:	4604      	mov	r4, r0
 800a64e:	e9c0 3300 	strd	r3, r3, [r0]
 800a652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a656:	6083      	str	r3, [r0, #8]
 800a658:	8181      	strh	r1, [r0, #12]
 800a65a:	6643      	str	r3, [r0, #100]	; 0x64
 800a65c:	81c2      	strh	r2, [r0, #14]
 800a65e:	6183      	str	r3, [r0, #24]
 800a660:	4619      	mov	r1, r3
 800a662:	2208      	movs	r2, #8
 800a664:	305c      	adds	r0, #92	; 0x5c
 800a666:	f000 f8f4 	bl	800a852 <memset>
 800a66a:	4b0d      	ldr	r3, [pc, #52]	; (800a6a0 <std+0x58>)
 800a66c:	6263      	str	r3, [r4, #36]	; 0x24
 800a66e:	4b0d      	ldr	r3, [pc, #52]	; (800a6a4 <std+0x5c>)
 800a670:	62a3      	str	r3, [r4, #40]	; 0x28
 800a672:	4b0d      	ldr	r3, [pc, #52]	; (800a6a8 <std+0x60>)
 800a674:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a676:	4b0d      	ldr	r3, [pc, #52]	; (800a6ac <std+0x64>)
 800a678:	6323      	str	r3, [r4, #48]	; 0x30
 800a67a:	4b0d      	ldr	r3, [pc, #52]	; (800a6b0 <std+0x68>)
 800a67c:	6224      	str	r4, [r4, #32]
 800a67e:	429c      	cmp	r4, r3
 800a680:	d006      	beq.n	800a690 <std+0x48>
 800a682:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a686:	4294      	cmp	r4, r2
 800a688:	d002      	beq.n	800a690 <std+0x48>
 800a68a:	33d0      	adds	r3, #208	; 0xd0
 800a68c:	429c      	cmp	r4, r3
 800a68e:	d105      	bne.n	800a69c <std+0x54>
 800a690:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a698:	f000 b966 	b.w	800a968 <__retarget_lock_init_recursive>
 800a69c:	bd10      	pop	{r4, pc}
 800a69e:	bf00      	nop
 800a6a0:	0800a7cd 	.word	0x0800a7cd
 800a6a4:	0800a7ef 	.word	0x0800a7ef
 800a6a8:	0800a827 	.word	0x0800a827
 800a6ac:	0800a84b 	.word	0x0800a84b
 800a6b0:	20000778 	.word	0x20000778

0800a6b4 <stdio_exit_handler>:
 800a6b4:	4a02      	ldr	r2, [pc, #8]	; (800a6c0 <stdio_exit_handler+0xc>)
 800a6b6:	4903      	ldr	r1, [pc, #12]	; (800a6c4 <stdio_exit_handler+0x10>)
 800a6b8:	4803      	ldr	r0, [pc, #12]	; (800a6c8 <stdio_exit_handler+0x14>)
 800a6ba:	f000 b869 	b.w	800a790 <_fwalk_sglue>
 800a6be:	bf00      	nop
 800a6c0:	20000020 	.word	0x20000020
 800a6c4:	0800bcd1 	.word	0x0800bcd1
 800a6c8:	20000198 	.word	0x20000198

0800a6cc <cleanup_stdio>:
 800a6cc:	6841      	ldr	r1, [r0, #4]
 800a6ce:	4b0c      	ldr	r3, [pc, #48]	; (800a700 <cleanup_stdio+0x34>)
 800a6d0:	4299      	cmp	r1, r3
 800a6d2:	b510      	push	{r4, lr}
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	d001      	beq.n	800a6dc <cleanup_stdio+0x10>
 800a6d8:	f001 fafa 	bl	800bcd0 <_fflush_r>
 800a6dc:	68a1      	ldr	r1, [r4, #8]
 800a6de:	4b09      	ldr	r3, [pc, #36]	; (800a704 <cleanup_stdio+0x38>)
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d002      	beq.n	800a6ea <cleanup_stdio+0x1e>
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f001 faf3 	bl	800bcd0 <_fflush_r>
 800a6ea:	68e1      	ldr	r1, [r4, #12]
 800a6ec:	4b06      	ldr	r3, [pc, #24]	; (800a708 <cleanup_stdio+0x3c>)
 800a6ee:	4299      	cmp	r1, r3
 800a6f0:	d004      	beq.n	800a6fc <cleanup_stdio+0x30>
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6f8:	f001 baea 	b.w	800bcd0 <_fflush_r>
 800a6fc:	bd10      	pop	{r4, pc}
 800a6fe:	bf00      	nop
 800a700:	20000778 	.word	0x20000778
 800a704:	200007e0 	.word	0x200007e0
 800a708:	20000848 	.word	0x20000848

0800a70c <global_stdio_init.part.0>:
 800a70c:	b510      	push	{r4, lr}
 800a70e:	4b0b      	ldr	r3, [pc, #44]	; (800a73c <global_stdio_init.part.0+0x30>)
 800a710:	4c0b      	ldr	r4, [pc, #44]	; (800a740 <global_stdio_init.part.0+0x34>)
 800a712:	4a0c      	ldr	r2, [pc, #48]	; (800a744 <global_stdio_init.part.0+0x38>)
 800a714:	601a      	str	r2, [r3, #0]
 800a716:	4620      	mov	r0, r4
 800a718:	2200      	movs	r2, #0
 800a71a:	2104      	movs	r1, #4
 800a71c:	f7ff ff94 	bl	800a648 <std>
 800a720:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a724:	2201      	movs	r2, #1
 800a726:	2109      	movs	r1, #9
 800a728:	f7ff ff8e 	bl	800a648 <std>
 800a72c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a730:	2202      	movs	r2, #2
 800a732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a736:	2112      	movs	r1, #18
 800a738:	f7ff bf86 	b.w	800a648 <std>
 800a73c:	200008b0 	.word	0x200008b0
 800a740:	20000778 	.word	0x20000778
 800a744:	0800a6b5 	.word	0x0800a6b5

0800a748 <__sfp_lock_acquire>:
 800a748:	4801      	ldr	r0, [pc, #4]	; (800a750 <__sfp_lock_acquire+0x8>)
 800a74a:	f000 b90e 	b.w	800a96a <__retarget_lock_acquire_recursive>
 800a74e:	bf00      	nop
 800a750:	200008b9 	.word	0x200008b9

0800a754 <__sfp_lock_release>:
 800a754:	4801      	ldr	r0, [pc, #4]	; (800a75c <__sfp_lock_release+0x8>)
 800a756:	f000 b909 	b.w	800a96c <__retarget_lock_release_recursive>
 800a75a:	bf00      	nop
 800a75c:	200008b9 	.word	0x200008b9

0800a760 <__sinit>:
 800a760:	b510      	push	{r4, lr}
 800a762:	4604      	mov	r4, r0
 800a764:	f7ff fff0 	bl	800a748 <__sfp_lock_acquire>
 800a768:	6a23      	ldr	r3, [r4, #32]
 800a76a:	b11b      	cbz	r3, 800a774 <__sinit+0x14>
 800a76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a770:	f7ff bff0 	b.w	800a754 <__sfp_lock_release>
 800a774:	4b04      	ldr	r3, [pc, #16]	; (800a788 <__sinit+0x28>)
 800a776:	6223      	str	r3, [r4, #32]
 800a778:	4b04      	ldr	r3, [pc, #16]	; (800a78c <__sinit+0x2c>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1f5      	bne.n	800a76c <__sinit+0xc>
 800a780:	f7ff ffc4 	bl	800a70c <global_stdio_init.part.0>
 800a784:	e7f2      	b.n	800a76c <__sinit+0xc>
 800a786:	bf00      	nop
 800a788:	0800a6cd 	.word	0x0800a6cd
 800a78c:	200008b0 	.word	0x200008b0

0800a790 <_fwalk_sglue>:
 800a790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a794:	4607      	mov	r7, r0
 800a796:	4688      	mov	r8, r1
 800a798:	4614      	mov	r4, r2
 800a79a:	2600      	movs	r6, #0
 800a79c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a7a4:	d505      	bpl.n	800a7b2 <_fwalk_sglue+0x22>
 800a7a6:	6824      	ldr	r4, [r4, #0]
 800a7a8:	2c00      	cmp	r4, #0
 800a7aa:	d1f7      	bne.n	800a79c <_fwalk_sglue+0xc>
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7b2:	89ab      	ldrh	r3, [r5, #12]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d907      	bls.n	800a7c8 <_fwalk_sglue+0x38>
 800a7b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	d003      	beq.n	800a7c8 <_fwalk_sglue+0x38>
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	47c0      	blx	r8
 800a7c6:	4306      	orrs	r6, r0
 800a7c8:	3568      	adds	r5, #104	; 0x68
 800a7ca:	e7e9      	b.n	800a7a0 <_fwalk_sglue+0x10>

0800a7cc <__sread>:
 800a7cc:	b510      	push	{r4, lr}
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d4:	f000 f87a 	bl	800a8cc <_read_r>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	bfab      	itete	ge
 800a7dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7de:	89a3      	ldrhlt	r3, [r4, #12]
 800a7e0:	181b      	addge	r3, r3, r0
 800a7e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7e6:	bfac      	ite	ge
 800a7e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7ea:	81a3      	strhlt	r3, [r4, #12]
 800a7ec:	bd10      	pop	{r4, pc}

0800a7ee <__swrite>:
 800a7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f2:	461f      	mov	r7, r3
 800a7f4:	898b      	ldrh	r3, [r1, #12]
 800a7f6:	05db      	lsls	r3, r3, #23
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	4616      	mov	r6, r2
 800a7fe:	d505      	bpl.n	800a80c <__swrite+0x1e>
 800a800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a804:	2302      	movs	r3, #2
 800a806:	2200      	movs	r2, #0
 800a808:	f000 f84e 	bl	800a8a8 <_lseek_r>
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a816:	81a3      	strh	r3, [r4, #12]
 800a818:	4632      	mov	r2, r6
 800a81a:	463b      	mov	r3, r7
 800a81c:	4628      	mov	r0, r5
 800a81e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a822:	f000 b865 	b.w	800a8f0 <_write_r>

0800a826 <__sseek>:
 800a826:	b510      	push	{r4, lr}
 800a828:	460c      	mov	r4, r1
 800a82a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a82e:	f000 f83b 	bl	800a8a8 <_lseek_r>
 800a832:	1c43      	adds	r3, r0, #1
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	bf15      	itete	ne
 800a838:	6560      	strne	r0, [r4, #84]	; 0x54
 800a83a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a83e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a842:	81a3      	strheq	r3, [r4, #12]
 800a844:	bf18      	it	ne
 800a846:	81a3      	strhne	r3, [r4, #12]
 800a848:	bd10      	pop	{r4, pc}

0800a84a <__sclose>:
 800a84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a84e:	f000 b81b 	b.w	800a888 <_close_r>

0800a852 <memset>:
 800a852:	4402      	add	r2, r0
 800a854:	4603      	mov	r3, r0
 800a856:	4293      	cmp	r3, r2
 800a858:	d100      	bne.n	800a85c <memset+0xa>
 800a85a:	4770      	bx	lr
 800a85c:	f803 1b01 	strb.w	r1, [r3], #1
 800a860:	e7f9      	b.n	800a856 <memset+0x4>

0800a862 <strncmp>:
 800a862:	b510      	push	{r4, lr}
 800a864:	b16a      	cbz	r2, 800a882 <strncmp+0x20>
 800a866:	3901      	subs	r1, #1
 800a868:	1884      	adds	r4, r0, r2
 800a86a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a86e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a872:	429a      	cmp	r2, r3
 800a874:	d103      	bne.n	800a87e <strncmp+0x1c>
 800a876:	42a0      	cmp	r0, r4
 800a878:	d001      	beq.n	800a87e <strncmp+0x1c>
 800a87a:	2a00      	cmp	r2, #0
 800a87c:	d1f5      	bne.n	800a86a <strncmp+0x8>
 800a87e:	1ad0      	subs	r0, r2, r3
 800a880:	bd10      	pop	{r4, pc}
 800a882:	4610      	mov	r0, r2
 800a884:	e7fc      	b.n	800a880 <strncmp+0x1e>
	...

0800a888 <_close_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4d06      	ldr	r5, [pc, #24]	; (800a8a4 <_close_r+0x1c>)
 800a88c:	2300      	movs	r3, #0
 800a88e:	4604      	mov	r4, r0
 800a890:	4608      	mov	r0, r1
 800a892:	602b      	str	r3, [r5, #0]
 800a894:	f7f7 fea1 	bl	80025da <_close>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d102      	bne.n	800a8a2 <_close_r+0x1a>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	b103      	cbz	r3, 800a8a2 <_close_r+0x1a>
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	200008b4 	.word	0x200008b4

0800a8a8 <_lseek_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4d07      	ldr	r5, [pc, #28]	; (800a8c8 <_lseek_r+0x20>)
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	4608      	mov	r0, r1
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	602a      	str	r2, [r5, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f7f7 feb6 	bl	8002628 <_lseek>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	d102      	bne.n	800a8c6 <_lseek_r+0x1e>
 800a8c0:	682b      	ldr	r3, [r5, #0]
 800a8c2:	b103      	cbz	r3, 800a8c6 <_lseek_r+0x1e>
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	200008b4 	.word	0x200008b4

0800a8cc <_read_r>:
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	4d07      	ldr	r5, [pc, #28]	; (800a8ec <_read_r+0x20>)
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	4608      	mov	r0, r1
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	602a      	str	r2, [r5, #0]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	f7f7 fe44 	bl	8002568 <_read>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d102      	bne.n	800a8ea <_read_r+0x1e>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	b103      	cbz	r3, 800a8ea <_read_r+0x1e>
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
 800a8ec:	200008b4 	.word	0x200008b4

0800a8f0 <_write_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d07      	ldr	r5, [pc, #28]	; (800a910 <_write_r+0x20>)
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	4608      	mov	r0, r1
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	602a      	str	r2, [r5, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	f7f7 fe4f 	bl	80025a2 <_write>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_write_r+0x1e>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_write_r+0x1e>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	200008b4 	.word	0x200008b4

0800a914 <__errno>:
 800a914:	4b01      	ldr	r3, [pc, #4]	; (800a91c <__errno+0x8>)
 800a916:	6818      	ldr	r0, [r3, #0]
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	200001e4 	.word	0x200001e4

0800a920 <__libc_init_array>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	4d0d      	ldr	r5, [pc, #52]	; (800a958 <__libc_init_array+0x38>)
 800a924:	4c0d      	ldr	r4, [pc, #52]	; (800a95c <__libc_init_array+0x3c>)
 800a926:	1b64      	subs	r4, r4, r5
 800a928:	10a4      	asrs	r4, r4, #2
 800a92a:	2600      	movs	r6, #0
 800a92c:	42a6      	cmp	r6, r4
 800a92e:	d109      	bne.n	800a944 <__libc_init_array+0x24>
 800a930:	4d0b      	ldr	r5, [pc, #44]	; (800a960 <__libc_init_array+0x40>)
 800a932:	4c0c      	ldr	r4, [pc, #48]	; (800a964 <__libc_init_array+0x44>)
 800a934:	f001 fe8a 	bl	800c64c <_init>
 800a938:	1b64      	subs	r4, r4, r5
 800a93a:	10a4      	asrs	r4, r4, #2
 800a93c:	2600      	movs	r6, #0
 800a93e:	42a6      	cmp	r6, r4
 800a940:	d105      	bne.n	800a94e <__libc_init_array+0x2e>
 800a942:	bd70      	pop	{r4, r5, r6, pc}
 800a944:	f855 3b04 	ldr.w	r3, [r5], #4
 800a948:	4798      	blx	r3
 800a94a:	3601      	adds	r6, #1
 800a94c:	e7ee      	b.n	800a92c <__libc_init_array+0xc>
 800a94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a952:	4798      	blx	r3
 800a954:	3601      	adds	r6, #1
 800a956:	e7f2      	b.n	800a93e <__libc_init_array+0x1e>
 800a958:	0800cccc 	.word	0x0800cccc
 800a95c:	0800cccc 	.word	0x0800cccc
 800a960:	0800cccc 	.word	0x0800cccc
 800a964:	0800ccd4 	.word	0x0800ccd4

0800a968 <__retarget_lock_init_recursive>:
 800a968:	4770      	bx	lr

0800a96a <__retarget_lock_acquire_recursive>:
 800a96a:	4770      	bx	lr

0800a96c <__retarget_lock_release_recursive>:
 800a96c:	4770      	bx	lr

0800a96e <memcpy>:
 800a96e:	440a      	add	r2, r1
 800a970:	4291      	cmp	r1, r2
 800a972:	f100 33ff 	add.w	r3, r0, #4294967295
 800a976:	d100      	bne.n	800a97a <memcpy+0xc>
 800a978:	4770      	bx	lr
 800a97a:	b510      	push	{r4, lr}
 800a97c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a980:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a984:	4291      	cmp	r1, r2
 800a986:	d1f9      	bne.n	800a97c <memcpy+0xe>
 800a988:	bd10      	pop	{r4, pc}
	...

0800a98c <_free_r>:
 800a98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a98e:	2900      	cmp	r1, #0
 800a990:	d044      	beq.n	800aa1c <_free_r+0x90>
 800a992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a996:	9001      	str	r0, [sp, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f1a1 0404 	sub.w	r4, r1, #4
 800a99e:	bfb8      	it	lt
 800a9a0:	18e4      	addlt	r4, r4, r3
 800a9a2:	f000 fc49 	bl	800b238 <__malloc_lock>
 800a9a6:	4a1e      	ldr	r2, [pc, #120]	; (800aa20 <_free_r+0x94>)
 800a9a8:	9801      	ldr	r0, [sp, #4]
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	b933      	cbnz	r3, 800a9bc <_free_r+0x30>
 800a9ae:	6063      	str	r3, [r4, #4]
 800a9b0:	6014      	str	r4, [r2, #0]
 800a9b2:	b003      	add	sp, #12
 800a9b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9b8:	f000 bc44 	b.w	800b244 <__malloc_unlock>
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	d908      	bls.n	800a9d2 <_free_r+0x46>
 800a9c0:	6825      	ldr	r5, [r4, #0]
 800a9c2:	1961      	adds	r1, r4, r5
 800a9c4:	428b      	cmp	r3, r1
 800a9c6:	bf01      	itttt	eq
 800a9c8:	6819      	ldreq	r1, [r3, #0]
 800a9ca:	685b      	ldreq	r3, [r3, #4]
 800a9cc:	1949      	addeq	r1, r1, r5
 800a9ce:	6021      	streq	r1, [r4, #0]
 800a9d0:	e7ed      	b.n	800a9ae <_free_r+0x22>
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	b10b      	cbz	r3, 800a9dc <_free_r+0x50>
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d9fa      	bls.n	800a9d2 <_free_r+0x46>
 800a9dc:	6811      	ldr	r1, [r2, #0]
 800a9de:	1855      	adds	r5, r2, r1
 800a9e0:	42a5      	cmp	r5, r4
 800a9e2:	d10b      	bne.n	800a9fc <_free_r+0x70>
 800a9e4:	6824      	ldr	r4, [r4, #0]
 800a9e6:	4421      	add	r1, r4
 800a9e8:	1854      	adds	r4, r2, r1
 800a9ea:	42a3      	cmp	r3, r4
 800a9ec:	6011      	str	r1, [r2, #0]
 800a9ee:	d1e0      	bne.n	800a9b2 <_free_r+0x26>
 800a9f0:	681c      	ldr	r4, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	6053      	str	r3, [r2, #4]
 800a9f6:	440c      	add	r4, r1
 800a9f8:	6014      	str	r4, [r2, #0]
 800a9fa:	e7da      	b.n	800a9b2 <_free_r+0x26>
 800a9fc:	d902      	bls.n	800aa04 <_free_r+0x78>
 800a9fe:	230c      	movs	r3, #12
 800aa00:	6003      	str	r3, [r0, #0]
 800aa02:	e7d6      	b.n	800a9b2 <_free_r+0x26>
 800aa04:	6825      	ldr	r5, [r4, #0]
 800aa06:	1961      	adds	r1, r4, r5
 800aa08:	428b      	cmp	r3, r1
 800aa0a:	bf04      	itt	eq
 800aa0c:	6819      	ldreq	r1, [r3, #0]
 800aa0e:	685b      	ldreq	r3, [r3, #4]
 800aa10:	6063      	str	r3, [r4, #4]
 800aa12:	bf04      	itt	eq
 800aa14:	1949      	addeq	r1, r1, r5
 800aa16:	6021      	streq	r1, [r4, #0]
 800aa18:	6054      	str	r4, [r2, #4]
 800aa1a:	e7ca      	b.n	800a9b2 <_free_r+0x26>
 800aa1c:	b003      	add	sp, #12
 800aa1e:	bd30      	pop	{r4, r5, pc}
 800aa20:	200008bc 	.word	0x200008bc

0800aa24 <rshift>:
 800aa24:	6903      	ldr	r3, [r0, #16]
 800aa26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa32:	f100 0414 	add.w	r4, r0, #20
 800aa36:	dd45      	ble.n	800aac4 <rshift+0xa0>
 800aa38:	f011 011f 	ands.w	r1, r1, #31
 800aa3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa44:	d10c      	bne.n	800aa60 <rshift+0x3c>
 800aa46:	f100 0710 	add.w	r7, r0, #16
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	42b1      	cmp	r1, r6
 800aa4e:	d334      	bcc.n	800aaba <rshift+0x96>
 800aa50:	1a9b      	subs	r3, r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	1eea      	subs	r2, r5, #3
 800aa56:	4296      	cmp	r6, r2
 800aa58:	bf38      	it	cc
 800aa5a:	2300      	movcc	r3, #0
 800aa5c:	4423      	add	r3, r4
 800aa5e:	e015      	b.n	800aa8c <rshift+0x68>
 800aa60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa64:	f1c1 0820 	rsb	r8, r1, #32
 800aa68:	40cf      	lsrs	r7, r1
 800aa6a:	f105 0e04 	add.w	lr, r5, #4
 800aa6e:	46a1      	mov	r9, r4
 800aa70:	4576      	cmp	r6, lr
 800aa72:	46f4      	mov	ip, lr
 800aa74:	d815      	bhi.n	800aaa2 <rshift+0x7e>
 800aa76:	1a9a      	subs	r2, r3, r2
 800aa78:	0092      	lsls	r2, r2, #2
 800aa7a:	3a04      	subs	r2, #4
 800aa7c:	3501      	adds	r5, #1
 800aa7e:	42ae      	cmp	r6, r5
 800aa80:	bf38      	it	cc
 800aa82:	2200      	movcc	r2, #0
 800aa84:	18a3      	adds	r3, r4, r2
 800aa86:	50a7      	str	r7, [r4, r2]
 800aa88:	b107      	cbz	r7, 800aa8c <rshift+0x68>
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	1b1a      	subs	r2, r3, r4
 800aa8e:	42a3      	cmp	r3, r4
 800aa90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa94:	bf08      	it	eq
 800aa96:	2300      	moveq	r3, #0
 800aa98:	6102      	str	r2, [r0, #16]
 800aa9a:	bf08      	it	eq
 800aa9c:	6143      	streq	r3, [r0, #20]
 800aa9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaa2:	f8dc c000 	ldr.w	ip, [ip]
 800aaa6:	fa0c fc08 	lsl.w	ip, ip, r8
 800aaaa:	ea4c 0707 	orr.w	r7, ip, r7
 800aaae:	f849 7b04 	str.w	r7, [r9], #4
 800aab2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aab6:	40cf      	lsrs	r7, r1
 800aab8:	e7da      	b.n	800aa70 <rshift+0x4c>
 800aaba:	f851 cb04 	ldr.w	ip, [r1], #4
 800aabe:	f847 cf04 	str.w	ip, [r7, #4]!
 800aac2:	e7c3      	b.n	800aa4c <rshift+0x28>
 800aac4:	4623      	mov	r3, r4
 800aac6:	e7e1      	b.n	800aa8c <rshift+0x68>

0800aac8 <__hexdig_fun>:
 800aac8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aacc:	2b09      	cmp	r3, #9
 800aace:	d802      	bhi.n	800aad6 <__hexdig_fun+0xe>
 800aad0:	3820      	subs	r0, #32
 800aad2:	b2c0      	uxtb	r0, r0
 800aad4:	4770      	bx	lr
 800aad6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aada:	2b05      	cmp	r3, #5
 800aadc:	d801      	bhi.n	800aae2 <__hexdig_fun+0x1a>
 800aade:	3847      	subs	r0, #71	; 0x47
 800aae0:	e7f7      	b.n	800aad2 <__hexdig_fun+0xa>
 800aae2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aae6:	2b05      	cmp	r3, #5
 800aae8:	d801      	bhi.n	800aaee <__hexdig_fun+0x26>
 800aaea:	3827      	subs	r0, #39	; 0x27
 800aaec:	e7f1      	b.n	800aad2 <__hexdig_fun+0xa>
 800aaee:	2000      	movs	r0, #0
 800aaf0:	4770      	bx	lr
	...

0800aaf4 <__gethex>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	4617      	mov	r7, r2
 800aafa:	680a      	ldr	r2, [r1, #0]
 800aafc:	b085      	sub	sp, #20
 800aafe:	f102 0b02 	add.w	fp, r2, #2
 800ab02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ab06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ab0a:	4681      	mov	r9, r0
 800ab0c:	468a      	mov	sl, r1
 800ab0e:	9302      	str	r3, [sp, #8]
 800ab10:	32fe      	adds	r2, #254	; 0xfe
 800ab12:	eb02 030b 	add.w	r3, r2, fp
 800ab16:	46d8      	mov	r8, fp
 800ab18:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ab1c:	9301      	str	r3, [sp, #4]
 800ab1e:	2830      	cmp	r0, #48	; 0x30
 800ab20:	d0f7      	beq.n	800ab12 <__gethex+0x1e>
 800ab22:	f7ff ffd1 	bl	800aac8 <__hexdig_fun>
 800ab26:	4604      	mov	r4, r0
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d138      	bne.n	800ab9e <__gethex+0xaa>
 800ab2c:	49a7      	ldr	r1, [pc, #668]	; (800adcc <__gethex+0x2d8>)
 800ab2e:	2201      	movs	r2, #1
 800ab30:	4640      	mov	r0, r8
 800ab32:	f7ff fe96 	bl	800a862 <strncmp>
 800ab36:	4606      	mov	r6, r0
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d169      	bne.n	800ac10 <__gethex+0x11c>
 800ab3c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ab40:	465d      	mov	r5, fp
 800ab42:	f7ff ffc1 	bl	800aac8 <__hexdig_fun>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d064      	beq.n	800ac14 <__gethex+0x120>
 800ab4a:	465a      	mov	r2, fp
 800ab4c:	7810      	ldrb	r0, [r2, #0]
 800ab4e:	2830      	cmp	r0, #48	; 0x30
 800ab50:	4690      	mov	r8, r2
 800ab52:	f102 0201 	add.w	r2, r2, #1
 800ab56:	d0f9      	beq.n	800ab4c <__gethex+0x58>
 800ab58:	f7ff ffb6 	bl	800aac8 <__hexdig_fun>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	fab0 f480 	clz	r4, r0
 800ab62:	0964      	lsrs	r4, r4, #5
 800ab64:	465e      	mov	r6, fp
 800ab66:	9301      	str	r3, [sp, #4]
 800ab68:	4642      	mov	r2, r8
 800ab6a:	4615      	mov	r5, r2
 800ab6c:	3201      	adds	r2, #1
 800ab6e:	7828      	ldrb	r0, [r5, #0]
 800ab70:	f7ff ffaa 	bl	800aac8 <__hexdig_fun>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d1f8      	bne.n	800ab6a <__gethex+0x76>
 800ab78:	4994      	ldr	r1, [pc, #592]	; (800adcc <__gethex+0x2d8>)
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	f7ff fe70 	bl	800a862 <strncmp>
 800ab82:	b978      	cbnz	r0, 800aba4 <__gethex+0xb0>
 800ab84:	b946      	cbnz	r6, 800ab98 <__gethex+0xa4>
 800ab86:	1c6e      	adds	r6, r5, #1
 800ab88:	4632      	mov	r2, r6
 800ab8a:	4615      	mov	r5, r2
 800ab8c:	3201      	adds	r2, #1
 800ab8e:	7828      	ldrb	r0, [r5, #0]
 800ab90:	f7ff ff9a 	bl	800aac8 <__hexdig_fun>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d1f8      	bne.n	800ab8a <__gethex+0x96>
 800ab98:	1b73      	subs	r3, r6, r5
 800ab9a:	009e      	lsls	r6, r3, #2
 800ab9c:	e004      	b.n	800aba8 <__gethex+0xb4>
 800ab9e:	2400      	movs	r4, #0
 800aba0:	4626      	mov	r6, r4
 800aba2:	e7e1      	b.n	800ab68 <__gethex+0x74>
 800aba4:	2e00      	cmp	r6, #0
 800aba6:	d1f7      	bne.n	800ab98 <__gethex+0xa4>
 800aba8:	782b      	ldrb	r3, [r5, #0]
 800abaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800abae:	2b50      	cmp	r3, #80	; 0x50
 800abb0:	d13d      	bne.n	800ac2e <__gethex+0x13a>
 800abb2:	786b      	ldrb	r3, [r5, #1]
 800abb4:	2b2b      	cmp	r3, #43	; 0x2b
 800abb6:	d02f      	beq.n	800ac18 <__gethex+0x124>
 800abb8:	2b2d      	cmp	r3, #45	; 0x2d
 800abba:	d031      	beq.n	800ac20 <__gethex+0x12c>
 800abbc:	1c69      	adds	r1, r5, #1
 800abbe:	f04f 0b00 	mov.w	fp, #0
 800abc2:	7808      	ldrb	r0, [r1, #0]
 800abc4:	f7ff ff80 	bl	800aac8 <__hexdig_fun>
 800abc8:	1e42      	subs	r2, r0, #1
 800abca:	b2d2      	uxtb	r2, r2
 800abcc:	2a18      	cmp	r2, #24
 800abce:	d82e      	bhi.n	800ac2e <__gethex+0x13a>
 800abd0:	f1a0 0210 	sub.w	r2, r0, #16
 800abd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800abd8:	f7ff ff76 	bl	800aac8 <__hexdig_fun>
 800abdc:	f100 3cff 	add.w	ip, r0, #4294967295
 800abe0:	fa5f fc8c 	uxtb.w	ip, ip
 800abe4:	f1bc 0f18 	cmp.w	ip, #24
 800abe8:	d91d      	bls.n	800ac26 <__gethex+0x132>
 800abea:	f1bb 0f00 	cmp.w	fp, #0
 800abee:	d000      	beq.n	800abf2 <__gethex+0xfe>
 800abf0:	4252      	negs	r2, r2
 800abf2:	4416      	add	r6, r2
 800abf4:	f8ca 1000 	str.w	r1, [sl]
 800abf8:	b1dc      	cbz	r4, 800ac32 <__gethex+0x13e>
 800abfa:	9b01      	ldr	r3, [sp, #4]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bf14      	ite	ne
 800ac00:	f04f 0800 	movne.w	r8, #0
 800ac04:	f04f 0806 	moveq.w	r8, #6
 800ac08:	4640      	mov	r0, r8
 800ac0a:	b005      	add	sp, #20
 800ac0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac10:	4645      	mov	r5, r8
 800ac12:	4626      	mov	r6, r4
 800ac14:	2401      	movs	r4, #1
 800ac16:	e7c7      	b.n	800aba8 <__gethex+0xb4>
 800ac18:	f04f 0b00 	mov.w	fp, #0
 800ac1c:	1ca9      	adds	r1, r5, #2
 800ac1e:	e7d0      	b.n	800abc2 <__gethex+0xce>
 800ac20:	f04f 0b01 	mov.w	fp, #1
 800ac24:	e7fa      	b.n	800ac1c <__gethex+0x128>
 800ac26:	230a      	movs	r3, #10
 800ac28:	fb03 0002 	mla	r0, r3, r2, r0
 800ac2c:	e7d0      	b.n	800abd0 <__gethex+0xdc>
 800ac2e:	4629      	mov	r1, r5
 800ac30:	e7e0      	b.n	800abf4 <__gethex+0x100>
 800ac32:	eba5 0308 	sub.w	r3, r5, r8
 800ac36:	3b01      	subs	r3, #1
 800ac38:	4621      	mov	r1, r4
 800ac3a:	2b07      	cmp	r3, #7
 800ac3c:	dc0a      	bgt.n	800ac54 <__gethex+0x160>
 800ac3e:	4648      	mov	r0, r9
 800ac40:	f000 fb06 	bl	800b250 <_Balloc>
 800ac44:	4604      	mov	r4, r0
 800ac46:	b940      	cbnz	r0, 800ac5a <__gethex+0x166>
 800ac48:	4b61      	ldr	r3, [pc, #388]	; (800add0 <__gethex+0x2dc>)
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	21e4      	movs	r1, #228	; 0xe4
 800ac4e:	4861      	ldr	r0, [pc, #388]	; (800add4 <__gethex+0x2e0>)
 800ac50:	f001 f876 	bl	800bd40 <__assert_func>
 800ac54:	3101      	adds	r1, #1
 800ac56:	105b      	asrs	r3, r3, #1
 800ac58:	e7ef      	b.n	800ac3a <__gethex+0x146>
 800ac5a:	f100 0a14 	add.w	sl, r0, #20
 800ac5e:	2300      	movs	r3, #0
 800ac60:	495a      	ldr	r1, [pc, #360]	; (800adcc <__gethex+0x2d8>)
 800ac62:	f8cd a004 	str.w	sl, [sp, #4]
 800ac66:	469b      	mov	fp, r3
 800ac68:	45a8      	cmp	r8, r5
 800ac6a:	d342      	bcc.n	800acf2 <__gethex+0x1fe>
 800ac6c:	9801      	ldr	r0, [sp, #4]
 800ac6e:	f840 bb04 	str.w	fp, [r0], #4
 800ac72:	eba0 000a 	sub.w	r0, r0, sl
 800ac76:	1080      	asrs	r0, r0, #2
 800ac78:	6120      	str	r0, [r4, #16]
 800ac7a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ac7e:	4658      	mov	r0, fp
 800ac80:	f000 fbd8 	bl	800b434 <__hi0bits>
 800ac84:	683d      	ldr	r5, [r7, #0]
 800ac86:	eba8 0000 	sub.w	r0, r8, r0
 800ac8a:	42a8      	cmp	r0, r5
 800ac8c:	dd59      	ble.n	800ad42 <__gethex+0x24e>
 800ac8e:	eba0 0805 	sub.w	r8, r0, r5
 800ac92:	4641      	mov	r1, r8
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 ff67 	bl	800bb68 <__any_on>
 800ac9a:	4683      	mov	fp, r0
 800ac9c:	b1b8      	cbz	r0, 800acce <__gethex+0x1da>
 800ac9e:	f108 33ff 	add.w	r3, r8, #4294967295
 800aca2:	1159      	asrs	r1, r3, #5
 800aca4:	f003 021f 	and.w	r2, r3, #31
 800aca8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800acac:	f04f 0b01 	mov.w	fp, #1
 800acb0:	fa0b f202 	lsl.w	r2, fp, r2
 800acb4:	420a      	tst	r2, r1
 800acb6:	d00a      	beq.n	800acce <__gethex+0x1da>
 800acb8:	455b      	cmp	r3, fp
 800acba:	dd06      	ble.n	800acca <__gethex+0x1d6>
 800acbc:	f1a8 0102 	sub.w	r1, r8, #2
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 ff51 	bl	800bb68 <__any_on>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d138      	bne.n	800ad3c <__gethex+0x248>
 800acca:	f04f 0b02 	mov.w	fp, #2
 800acce:	4641      	mov	r1, r8
 800acd0:	4620      	mov	r0, r4
 800acd2:	f7ff fea7 	bl	800aa24 <rshift>
 800acd6:	4446      	add	r6, r8
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	42b3      	cmp	r3, r6
 800acdc:	da41      	bge.n	800ad62 <__gethex+0x26e>
 800acde:	4621      	mov	r1, r4
 800ace0:	4648      	mov	r0, r9
 800ace2:	f000 faf5 	bl	800b2d0 <_Bfree>
 800ace6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ace8:	2300      	movs	r3, #0
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800acf0:	e78a      	b.n	800ac08 <__gethex+0x114>
 800acf2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800acf6:	2a2e      	cmp	r2, #46	; 0x2e
 800acf8:	d014      	beq.n	800ad24 <__gethex+0x230>
 800acfa:	2b20      	cmp	r3, #32
 800acfc:	d106      	bne.n	800ad0c <__gethex+0x218>
 800acfe:	9b01      	ldr	r3, [sp, #4]
 800ad00:	f843 bb04 	str.w	fp, [r3], #4
 800ad04:	f04f 0b00 	mov.w	fp, #0
 800ad08:	9301      	str	r3, [sp, #4]
 800ad0a:	465b      	mov	r3, fp
 800ad0c:	7828      	ldrb	r0, [r5, #0]
 800ad0e:	9303      	str	r3, [sp, #12]
 800ad10:	f7ff feda 	bl	800aac8 <__hexdig_fun>
 800ad14:	9b03      	ldr	r3, [sp, #12]
 800ad16:	f000 000f 	and.w	r0, r0, #15
 800ad1a:	4098      	lsls	r0, r3
 800ad1c:	ea4b 0b00 	orr.w	fp, fp, r0
 800ad20:	3304      	adds	r3, #4
 800ad22:	e7a1      	b.n	800ac68 <__gethex+0x174>
 800ad24:	45a8      	cmp	r8, r5
 800ad26:	d8e8      	bhi.n	800acfa <__gethex+0x206>
 800ad28:	2201      	movs	r2, #1
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	9303      	str	r3, [sp, #12]
 800ad2e:	f7ff fd98 	bl	800a862 <strncmp>
 800ad32:	4926      	ldr	r1, [pc, #152]	; (800adcc <__gethex+0x2d8>)
 800ad34:	9b03      	ldr	r3, [sp, #12]
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d1df      	bne.n	800acfa <__gethex+0x206>
 800ad3a:	e795      	b.n	800ac68 <__gethex+0x174>
 800ad3c:	f04f 0b03 	mov.w	fp, #3
 800ad40:	e7c5      	b.n	800acce <__gethex+0x1da>
 800ad42:	da0b      	bge.n	800ad5c <__gethex+0x268>
 800ad44:	eba5 0800 	sub.w	r8, r5, r0
 800ad48:	4621      	mov	r1, r4
 800ad4a:	4642      	mov	r2, r8
 800ad4c:	4648      	mov	r0, r9
 800ad4e:	f000 fcd9 	bl	800b704 <__lshift>
 800ad52:	eba6 0608 	sub.w	r6, r6, r8
 800ad56:	4604      	mov	r4, r0
 800ad58:	f100 0a14 	add.w	sl, r0, #20
 800ad5c:	f04f 0b00 	mov.w	fp, #0
 800ad60:	e7ba      	b.n	800acd8 <__gethex+0x1e4>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	42b3      	cmp	r3, r6
 800ad66:	dd73      	ble.n	800ae50 <__gethex+0x35c>
 800ad68:	1b9e      	subs	r6, r3, r6
 800ad6a:	42b5      	cmp	r5, r6
 800ad6c:	dc34      	bgt.n	800add8 <__gethex+0x2e4>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	d023      	beq.n	800adbc <__gethex+0x2c8>
 800ad74:	2b03      	cmp	r3, #3
 800ad76:	d025      	beq.n	800adc4 <__gethex+0x2d0>
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d115      	bne.n	800ada8 <__gethex+0x2b4>
 800ad7c:	42b5      	cmp	r5, r6
 800ad7e:	d113      	bne.n	800ada8 <__gethex+0x2b4>
 800ad80:	2d01      	cmp	r5, #1
 800ad82:	d10b      	bne.n	800ad9c <__gethex+0x2a8>
 800ad84:	9a02      	ldr	r2, [sp, #8]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6013      	str	r3, [r2, #0]
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	6123      	str	r3, [r4, #16]
 800ad8e:	f8ca 3000 	str.w	r3, [sl]
 800ad92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad94:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ad98:	601c      	str	r4, [r3, #0]
 800ad9a:	e735      	b.n	800ac08 <__gethex+0x114>
 800ad9c:	1e69      	subs	r1, r5, #1
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 fee2 	bl	800bb68 <__any_on>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d1ed      	bne.n	800ad84 <__gethex+0x290>
 800ada8:	4621      	mov	r1, r4
 800adaa:	4648      	mov	r0, r9
 800adac:	f000 fa90 	bl	800b2d0 <_Bfree>
 800adb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adb2:	2300      	movs	r3, #0
 800adb4:	6013      	str	r3, [r2, #0]
 800adb6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800adba:	e725      	b.n	800ac08 <__gethex+0x114>
 800adbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1f2      	bne.n	800ada8 <__gethex+0x2b4>
 800adc2:	e7df      	b.n	800ad84 <__gethex+0x290>
 800adc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1dc      	bne.n	800ad84 <__gethex+0x290>
 800adca:	e7ed      	b.n	800ada8 <__gethex+0x2b4>
 800adcc:	0800c908 	.word	0x0800c908
 800add0:	0800c970 	.word	0x0800c970
 800add4:	0800c981 	.word	0x0800c981
 800add8:	f106 38ff 	add.w	r8, r6, #4294967295
 800addc:	f1bb 0f00 	cmp.w	fp, #0
 800ade0:	d133      	bne.n	800ae4a <__gethex+0x356>
 800ade2:	f1b8 0f00 	cmp.w	r8, #0
 800ade6:	d004      	beq.n	800adf2 <__gethex+0x2fe>
 800ade8:	4641      	mov	r1, r8
 800adea:	4620      	mov	r0, r4
 800adec:	f000 febc 	bl	800bb68 <__any_on>
 800adf0:	4683      	mov	fp, r0
 800adf2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800adf6:	2301      	movs	r3, #1
 800adf8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800adfc:	f008 081f 	and.w	r8, r8, #31
 800ae00:	fa03 f308 	lsl.w	r3, r3, r8
 800ae04:	4213      	tst	r3, r2
 800ae06:	4631      	mov	r1, r6
 800ae08:	4620      	mov	r0, r4
 800ae0a:	bf18      	it	ne
 800ae0c:	f04b 0b02 	orrne.w	fp, fp, #2
 800ae10:	1bad      	subs	r5, r5, r6
 800ae12:	f7ff fe07 	bl	800aa24 <rshift>
 800ae16:	687e      	ldr	r6, [r7, #4]
 800ae18:	f04f 0802 	mov.w	r8, #2
 800ae1c:	f1bb 0f00 	cmp.w	fp, #0
 800ae20:	d04a      	beq.n	800aeb8 <__gethex+0x3c4>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d016      	beq.n	800ae56 <__gethex+0x362>
 800ae28:	2b03      	cmp	r3, #3
 800ae2a:	d018      	beq.n	800ae5e <__gethex+0x36a>
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d109      	bne.n	800ae44 <__gethex+0x350>
 800ae30:	f01b 0f02 	tst.w	fp, #2
 800ae34:	d006      	beq.n	800ae44 <__gethex+0x350>
 800ae36:	f8da 3000 	ldr.w	r3, [sl]
 800ae3a:	ea4b 0b03 	orr.w	fp, fp, r3
 800ae3e:	f01b 0f01 	tst.w	fp, #1
 800ae42:	d10f      	bne.n	800ae64 <__gethex+0x370>
 800ae44:	f048 0810 	orr.w	r8, r8, #16
 800ae48:	e036      	b.n	800aeb8 <__gethex+0x3c4>
 800ae4a:	f04f 0b01 	mov.w	fp, #1
 800ae4e:	e7d0      	b.n	800adf2 <__gethex+0x2fe>
 800ae50:	f04f 0801 	mov.w	r8, #1
 800ae54:	e7e2      	b.n	800ae1c <__gethex+0x328>
 800ae56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae58:	f1c3 0301 	rsb	r3, r3, #1
 800ae5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d0ef      	beq.n	800ae44 <__gethex+0x350>
 800ae64:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae68:	f104 0214 	add.w	r2, r4, #20
 800ae6c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ae76:	2300      	movs	r3, #0
 800ae78:	4694      	mov	ip, r2
 800ae7a:	f852 1b04 	ldr.w	r1, [r2], #4
 800ae7e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ae82:	d01e      	beq.n	800aec2 <__gethex+0x3ce>
 800ae84:	3101      	adds	r1, #1
 800ae86:	f8cc 1000 	str.w	r1, [ip]
 800ae8a:	f1b8 0f02 	cmp.w	r8, #2
 800ae8e:	f104 0214 	add.w	r2, r4, #20
 800ae92:	d13d      	bne.n	800af10 <__gethex+0x41c>
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	3b01      	subs	r3, #1
 800ae98:	42ab      	cmp	r3, r5
 800ae9a:	d10b      	bne.n	800aeb4 <__gethex+0x3c0>
 800ae9c:	1169      	asrs	r1, r5, #5
 800ae9e:	2301      	movs	r3, #1
 800aea0:	f005 051f 	and.w	r5, r5, #31
 800aea4:	fa03 f505 	lsl.w	r5, r3, r5
 800aea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aeac:	421d      	tst	r5, r3
 800aeae:	bf18      	it	ne
 800aeb0:	f04f 0801 	movne.w	r8, #1
 800aeb4:	f048 0820 	orr.w	r8, r8, #32
 800aeb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeba:	601c      	str	r4, [r3, #0]
 800aebc:	9b02      	ldr	r3, [sp, #8]
 800aebe:	601e      	str	r6, [r3, #0]
 800aec0:	e6a2      	b.n	800ac08 <__gethex+0x114>
 800aec2:	4290      	cmp	r0, r2
 800aec4:	f842 3c04 	str.w	r3, [r2, #-4]
 800aec8:	d8d6      	bhi.n	800ae78 <__gethex+0x384>
 800aeca:	68a2      	ldr	r2, [r4, #8]
 800aecc:	4593      	cmp	fp, r2
 800aece:	db17      	blt.n	800af00 <__gethex+0x40c>
 800aed0:	6861      	ldr	r1, [r4, #4]
 800aed2:	4648      	mov	r0, r9
 800aed4:	3101      	adds	r1, #1
 800aed6:	f000 f9bb 	bl	800b250 <_Balloc>
 800aeda:	4682      	mov	sl, r0
 800aedc:	b918      	cbnz	r0, 800aee6 <__gethex+0x3f2>
 800aede:	4b1b      	ldr	r3, [pc, #108]	; (800af4c <__gethex+0x458>)
 800aee0:	4602      	mov	r2, r0
 800aee2:	2184      	movs	r1, #132	; 0x84
 800aee4:	e6b3      	b.n	800ac4e <__gethex+0x15a>
 800aee6:	6922      	ldr	r2, [r4, #16]
 800aee8:	3202      	adds	r2, #2
 800aeea:	f104 010c 	add.w	r1, r4, #12
 800aeee:	0092      	lsls	r2, r2, #2
 800aef0:	300c      	adds	r0, #12
 800aef2:	f7ff fd3c 	bl	800a96e <memcpy>
 800aef6:	4621      	mov	r1, r4
 800aef8:	4648      	mov	r0, r9
 800aefa:	f000 f9e9 	bl	800b2d0 <_Bfree>
 800aefe:	4654      	mov	r4, sl
 800af00:	6922      	ldr	r2, [r4, #16]
 800af02:	1c51      	adds	r1, r2, #1
 800af04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800af08:	6121      	str	r1, [r4, #16]
 800af0a:	2101      	movs	r1, #1
 800af0c:	6151      	str	r1, [r2, #20]
 800af0e:	e7bc      	b.n	800ae8a <__gethex+0x396>
 800af10:	6921      	ldr	r1, [r4, #16]
 800af12:	4559      	cmp	r1, fp
 800af14:	dd0b      	ble.n	800af2e <__gethex+0x43a>
 800af16:	2101      	movs	r1, #1
 800af18:	4620      	mov	r0, r4
 800af1a:	f7ff fd83 	bl	800aa24 <rshift>
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	3601      	adds	r6, #1
 800af22:	42b3      	cmp	r3, r6
 800af24:	f6ff aedb 	blt.w	800acde <__gethex+0x1ea>
 800af28:	f04f 0801 	mov.w	r8, #1
 800af2c:	e7c2      	b.n	800aeb4 <__gethex+0x3c0>
 800af2e:	f015 051f 	ands.w	r5, r5, #31
 800af32:	d0f9      	beq.n	800af28 <__gethex+0x434>
 800af34:	9b01      	ldr	r3, [sp, #4]
 800af36:	441a      	add	r2, r3
 800af38:	f1c5 0520 	rsb	r5, r5, #32
 800af3c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800af40:	f000 fa78 	bl	800b434 <__hi0bits>
 800af44:	42a8      	cmp	r0, r5
 800af46:	dbe6      	blt.n	800af16 <__gethex+0x422>
 800af48:	e7ee      	b.n	800af28 <__gethex+0x434>
 800af4a:	bf00      	nop
 800af4c:	0800c970 	.word	0x0800c970

0800af50 <L_shift>:
 800af50:	f1c2 0208 	rsb	r2, r2, #8
 800af54:	0092      	lsls	r2, r2, #2
 800af56:	b570      	push	{r4, r5, r6, lr}
 800af58:	f1c2 0620 	rsb	r6, r2, #32
 800af5c:	6843      	ldr	r3, [r0, #4]
 800af5e:	6804      	ldr	r4, [r0, #0]
 800af60:	fa03 f506 	lsl.w	r5, r3, r6
 800af64:	432c      	orrs	r4, r5
 800af66:	40d3      	lsrs	r3, r2
 800af68:	6004      	str	r4, [r0, #0]
 800af6a:	f840 3f04 	str.w	r3, [r0, #4]!
 800af6e:	4288      	cmp	r0, r1
 800af70:	d3f4      	bcc.n	800af5c <L_shift+0xc>
 800af72:	bd70      	pop	{r4, r5, r6, pc}

0800af74 <__match>:
 800af74:	b530      	push	{r4, r5, lr}
 800af76:	6803      	ldr	r3, [r0, #0]
 800af78:	3301      	adds	r3, #1
 800af7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af7e:	b914      	cbnz	r4, 800af86 <__match+0x12>
 800af80:	6003      	str	r3, [r0, #0]
 800af82:	2001      	movs	r0, #1
 800af84:	bd30      	pop	{r4, r5, pc}
 800af86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af8e:	2d19      	cmp	r5, #25
 800af90:	bf98      	it	ls
 800af92:	3220      	addls	r2, #32
 800af94:	42a2      	cmp	r2, r4
 800af96:	d0f0      	beq.n	800af7a <__match+0x6>
 800af98:	2000      	movs	r0, #0
 800af9a:	e7f3      	b.n	800af84 <__match+0x10>

0800af9c <__hexnan>:
 800af9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa0:	680b      	ldr	r3, [r1, #0]
 800afa2:	6801      	ldr	r1, [r0, #0]
 800afa4:	115e      	asrs	r6, r3, #5
 800afa6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800afaa:	f013 031f 	ands.w	r3, r3, #31
 800afae:	b087      	sub	sp, #28
 800afb0:	bf18      	it	ne
 800afb2:	3604      	addne	r6, #4
 800afb4:	2500      	movs	r5, #0
 800afb6:	1f37      	subs	r7, r6, #4
 800afb8:	4682      	mov	sl, r0
 800afba:	4690      	mov	r8, r2
 800afbc:	9301      	str	r3, [sp, #4]
 800afbe:	f846 5c04 	str.w	r5, [r6, #-4]
 800afc2:	46b9      	mov	r9, r7
 800afc4:	463c      	mov	r4, r7
 800afc6:	9502      	str	r5, [sp, #8]
 800afc8:	46ab      	mov	fp, r5
 800afca:	784a      	ldrb	r2, [r1, #1]
 800afcc:	1c4b      	adds	r3, r1, #1
 800afce:	9303      	str	r3, [sp, #12]
 800afd0:	b342      	cbz	r2, 800b024 <__hexnan+0x88>
 800afd2:	4610      	mov	r0, r2
 800afd4:	9105      	str	r1, [sp, #20]
 800afd6:	9204      	str	r2, [sp, #16]
 800afd8:	f7ff fd76 	bl	800aac8 <__hexdig_fun>
 800afdc:	2800      	cmp	r0, #0
 800afde:	d14f      	bne.n	800b080 <__hexnan+0xe4>
 800afe0:	9a04      	ldr	r2, [sp, #16]
 800afe2:	9905      	ldr	r1, [sp, #20]
 800afe4:	2a20      	cmp	r2, #32
 800afe6:	d818      	bhi.n	800b01a <__hexnan+0x7e>
 800afe8:	9b02      	ldr	r3, [sp, #8]
 800afea:	459b      	cmp	fp, r3
 800afec:	dd13      	ble.n	800b016 <__hexnan+0x7a>
 800afee:	454c      	cmp	r4, r9
 800aff0:	d206      	bcs.n	800b000 <__hexnan+0x64>
 800aff2:	2d07      	cmp	r5, #7
 800aff4:	dc04      	bgt.n	800b000 <__hexnan+0x64>
 800aff6:	462a      	mov	r2, r5
 800aff8:	4649      	mov	r1, r9
 800affa:	4620      	mov	r0, r4
 800affc:	f7ff ffa8 	bl	800af50 <L_shift>
 800b000:	4544      	cmp	r4, r8
 800b002:	d950      	bls.n	800b0a6 <__hexnan+0x10a>
 800b004:	2300      	movs	r3, #0
 800b006:	f1a4 0904 	sub.w	r9, r4, #4
 800b00a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b00e:	f8cd b008 	str.w	fp, [sp, #8]
 800b012:	464c      	mov	r4, r9
 800b014:	461d      	mov	r5, r3
 800b016:	9903      	ldr	r1, [sp, #12]
 800b018:	e7d7      	b.n	800afca <__hexnan+0x2e>
 800b01a:	2a29      	cmp	r2, #41	; 0x29
 800b01c:	d155      	bne.n	800b0ca <__hexnan+0x12e>
 800b01e:	3102      	adds	r1, #2
 800b020:	f8ca 1000 	str.w	r1, [sl]
 800b024:	f1bb 0f00 	cmp.w	fp, #0
 800b028:	d04f      	beq.n	800b0ca <__hexnan+0x12e>
 800b02a:	454c      	cmp	r4, r9
 800b02c:	d206      	bcs.n	800b03c <__hexnan+0xa0>
 800b02e:	2d07      	cmp	r5, #7
 800b030:	dc04      	bgt.n	800b03c <__hexnan+0xa0>
 800b032:	462a      	mov	r2, r5
 800b034:	4649      	mov	r1, r9
 800b036:	4620      	mov	r0, r4
 800b038:	f7ff ff8a 	bl	800af50 <L_shift>
 800b03c:	4544      	cmp	r4, r8
 800b03e:	d934      	bls.n	800b0aa <__hexnan+0x10e>
 800b040:	f1a8 0204 	sub.w	r2, r8, #4
 800b044:	4623      	mov	r3, r4
 800b046:	f853 1b04 	ldr.w	r1, [r3], #4
 800b04a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b04e:	429f      	cmp	r7, r3
 800b050:	d2f9      	bcs.n	800b046 <__hexnan+0xaa>
 800b052:	1b3b      	subs	r3, r7, r4
 800b054:	f023 0303 	bic.w	r3, r3, #3
 800b058:	3304      	adds	r3, #4
 800b05a:	3e03      	subs	r6, #3
 800b05c:	3401      	adds	r4, #1
 800b05e:	42a6      	cmp	r6, r4
 800b060:	bf38      	it	cc
 800b062:	2304      	movcc	r3, #4
 800b064:	4443      	add	r3, r8
 800b066:	2200      	movs	r2, #0
 800b068:	f843 2b04 	str.w	r2, [r3], #4
 800b06c:	429f      	cmp	r7, r3
 800b06e:	d2fb      	bcs.n	800b068 <__hexnan+0xcc>
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	b91b      	cbnz	r3, 800b07c <__hexnan+0xe0>
 800b074:	4547      	cmp	r7, r8
 800b076:	d126      	bne.n	800b0c6 <__hexnan+0x12a>
 800b078:	2301      	movs	r3, #1
 800b07a:	603b      	str	r3, [r7, #0]
 800b07c:	2005      	movs	r0, #5
 800b07e:	e025      	b.n	800b0cc <__hexnan+0x130>
 800b080:	3501      	adds	r5, #1
 800b082:	2d08      	cmp	r5, #8
 800b084:	f10b 0b01 	add.w	fp, fp, #1
 800b088:	dd06      	ble.n	800b098 <__hexnan+0xfc>
 800b08a:	4544      	cmp	r4, r8
 800b08c:	d9c3      	bls.n	800b016 <__hexnan+0x7a>
 800b08e:	2300      	movs	r3, #0
 800b090:	f844 3c04 	str.w	r3, [r4, #-4]
 800b094:	2501      	movs	r5, #1
 800b096:	3c04      	subs	r4, #4
 800b098:	6822      	ldr	r2, [r4, #0]
 800b09a:	f000 000f 	and.w	r0, r0, #15
 800b09e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b0a2:	6020      	str	r0, [r4, #0]
 800b0a4:	e7b7      	b.n	800b016 <__hexnan+0x7a>
 800b0a6:	2508      	movs	r5, #8
 800b0a8:	e7b5      	b.n	800b016 <__hexnan+0x7a>
 800b0aa:	9b01      	ldr	r3, [sp, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d0df      	beq.n	800b070 <__hexnan+0xd4>
 800b0b0:	f1c3 0320 	rsb	r3, r3, #32
 800b0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b8:	40da      	lsrs	r2, r3
 800b0ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b0be:	4013      	ands	r3, r2
 800b0c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b0c4:	e7d4      	b.n	800b070 <__hexnan+0xd4>
 800b0c6:	3f04      	subs	r7, #4
 800b0c8:	e7d2      	b.n	800b070 <__hexnan+0xd4>
 800b0ca:	2004      	movs	r0, #4
 800b0cc:	b007      	add	sp, #28
 800b0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b0d4 <sbrk_aligned>:
 800b0d4:	b570      	push	{r4, r5, r6, lr}
 800b0d6:	4e0e      	ldr	r6, [pc, #56]	; (800b110 <sbrk_aligned+0x3c>)
 800b0d8:	460c      	mov	r4, r1
 800b0da:	6831      	ldr	r1, [r6, #0]
 800b0dc:	4605      	mov	r5, r0
 800b0de:	b911      	cbnz	r1, 800b0e6 <sbrk_aligned+0x12>
 800b0e0:	f000 fe1e 	bl	800bd20 <_sbrk_r>
 800b0e4:	6030      	str	r0, [r6, #0]
 800b0e6:	4621      	mov	r1, r4
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f000 fe19 	bl	800bd20 <_sbrk_r>
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	d00a      	beq.n	800b108 <sbrk_aligned+0x34>
 800b0f2:	1cc4      	adds	r4, r0, #3
 800b0f4:	f024 0403 	bic.w	r4, r4, #3
 800b0f8:	42a0      	cmp	r0, r4
 800b0fa:	d007      	beq.n	800b10c <sbrk_aligned+0x38>
 800b0fc:	1a21      	subs	r1, r4, r0
 800b0fe:	4628      	mov	r0, r5
 800b100:	f000 fe0e 	bl	800bd20 <_sbrk_r>
 800b104:	3001      	adds	r0, #1
 800b106:	d101      	bne.n	800b10c <sbrk_aligned+0x38>
 800b108:	f04f 34ff 	mov.w	r4, #4294967295
 800b10c:	4620      	mov	r0, r4
 800b10e:	bd70      	pop	{r4, r5, r6, pc}
 800b110:	200008c0 	.word	0x200008c0

0800b114 <_malloc_r>:
 800b114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b118:	1ccd      	adds	r5, r1, #3
 800b11a:	f025 0503 	bic.w	r5, r5, #3
 800b11e:	3508      	adds	r5, #8
 800b120:	2d0c      	cmp	r5, #12
 800b122:	bf38      	it	cc
 800b124:	250c      	movcc	r5, #12
 800b126:	2d00      	cmp	r5, #0
 800b128:	4607      	mov	r7, r0
 800b12a:	db01      	blt.n	800b130 <_malloc_r+0x1c>
 800b12c:	42a9      	cmp	r1, r5
 800b12e:	d905      	bls.n	800b13c <_malloc_r+0x28>
 800b130:	230c      	movs	r3, #12
 800b132:	603b      	str	r3, [r7, #0]
 800b134:	2600      	movs	r6, #0
 800b136:	4630      	mov	r0, r6
 800b138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b13c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b210 <_malloc_r+0xfc>
 800b140:	f000 f87a 	bl	800b238 <__malloc_lock>
 800b144:	f8d8 3000 	ldr.w	r3, [r8]
 800b148:	461c      	mov	r4, r3
 800b14a:	bb5c      	cbnz	r4, 800b1a4 <_malloc_r+0x90>
 800b14c:	4629      	mov	r1, r5
 800b14e:	4638      	mov	r0, r7
 800b150:	f7ff ffc0 	bl	800b0d4 <sbrk_aligned>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	4604      	mov	r4, r0
 800b158:	d155      	bne.n	800b206 <_malloc_r+0xf2>
 800b15a:	f8d8 4000 	ldr.w	r4, [r8]
 800b15e:	4626      	mov	r6, r4
 800b160:	2e00      	cmp	r6, #0
 800b162:	d145      	bne.n	800b1f0 <_malloc_r+0xdc>
 800b164:	2c00      	cmp	r4, #0
 800b166:	d048      	beq.n	800b1fa <_malloc_r+0xe6>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	4631      	mov	r1, r6
 800b16c:	4638      	mov	r0, r7
 800b16e:	eb04 0903 	add.w	r9, r4, r3
 800b172:	f000 fdd5 	bl	800bd20 <_sbrk_r>
 800b176:	4581      	cmp	r9, r0
 800b178:	d13f      	bne.n	800b1fa <_malloc_r+0xe6>
 800b17a:	6821      	ldr	r1, [r4, #0]
 800b17c:	1a6d      	subs	r5, r5, r1
 800b17e:	4629      	mov	r1, r5
 800b180:	4638      	mov	r0, r7
 800b182:	f7ff ffa7 	bl	800b0d4 <sbrk_aligned>
 800b186:	3001      	adds	r0, #1
 800b188:	d037      	beq.n	800b1fa <_malloc_r+0xe6>
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	442b      	add	r3, r5
 800b18e:	6023      	str	r3, [r4, #0]
 800b190:	f8d8 3000 	ldr.w	r3, [r8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d038      	beq.n	800b20a <_malloc_r+0xf6>
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	42a2      	cmp	r2, r4
 800b19c:	d12b      	bne.n	800b1f6 <_malloc_r+0xe2>
 800b19e:	2200      	movs	r2, #0
 800b1a0:	605a      	str	r2, [r3, #4]
 800b1a2:	e00f      	b.n	800b1c4 <_malloc_r+0xb0>
 800b1a4:	6822      	ldr	r2, [r4, #0]
 800b1a6:	1b52      	subs	r2, r2, r5
 800b1a8:	d41f      	bmi.n	800b1ea <_malloc_r+0xd6>
 800b1aa:	2a0b      	cmp	r2, #11
 800b1ac:	d917      	bls.n	800b1de <_malloc_r+0xca>
 800b1ae:	1961      	adds	r1, r4, r5
 800b1b0:	42a3      	cmp	r3, r4
 800b1b2:	6025      	str	r5, [r4, #0]
 800b1b4:	bf18      	it	ne
 800b1b6:	6059      	strne	r1, [r3, #4]
 800b1b8:	6863      	ldr	r3, [r4, #4]
 800b1ba:	bf08      	it	eq
 800b1bc:	f8c8 1000 	streq.w	r1, [r8]
 800b1c0:	5162      	str	r2, [r4, r5]
 800b1c2:	604b      	str	r3, [r1, #4]
 800b1c4:	4638      	mov	r0, r7
 800b1c6:	f104 060b 	add.w	r6, r4, #11
 800b1ca:	f000 f83b 	bl	800b244 <__malloc_unlock>
 800b1ce:	f026 0607 	bic.w	r6, r6, #7
 800b1d2:	1d23      	adds	r3, r4, #4
 800b1d4:	1af2      	subs	r2, r6, r3
 800b1d6:	d0ae      	beq.n	800b136 <_malloc_r+0x22>
 800b1d8:	1b9b      	subs	r3, r3, r6
 800b1da:	50a3      	str	r3, [r4, r2]
 800b1dc:	e7ab      	b.n	800b136 <_malloc_r+0x22>
 800b1de:	42a3      	cmp	r3, r4
 800b1e0:	6862      	ldr	r2, [r4, #4]
 800b1e2:	d1dd      	bne.n	800b1a0 <_malloc_r+0x8c>
 800b1e4:	f8c8 2000 	str.w	r2, [r8]
 800b1e8:	e7ec      	b.n	800b1c4 <_malloc_r+0xb0>
 800b1ea:	4623      	mov	r3, r4
 800b1ec:	6864      	ldr	r4, [r4, #4]
 800b1ee:	e7ac      	b.n	800b14a <_malloc_r+0x36>
 800b1f0:	4634      	mov	r4, r6
 800b1f2:	6876      	ldr	r6, [r6, #4]
 800b1f4:	e7b4      	b.n	800b160 <_malloc_r+0x4c>
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	e7cc      	b.n	800b194 <_malloc_r+0x80>
 800b1fa:	230c      	movs	r3, #12
 800b1fc:	603b      	str	r3, [r7, #0]
 800b1fe:	4638      	mov	r0, r7
 800b200:	f000 f820 	bl	800b244 <__malloc_unlock>
 800b204:	e797      	b.n	800b136 <_malloc_r+0x22>
 800b206:	6025      	str	r5, [r4, #0]
 800b208:	e7dc      	b.n	800b1c4 <_malloc_r+0xb0>
 800b20a:	605b      	str	r3, [r3, #4]
 800b20c:	deff      	udf	#255	; 0xff
 800b20e:	bf00      	nop
 800b210:	200008bc 	.word	0x200008bc

0800b214 <__ascii_mbtowc>:
 800b214:	b082      	sub	sp, #8
 800b216:	b901      	cbnz	r1, 800b21a <__ascii_mbtowc+0x6>
 800b218:	a901      	add	r1, sp, #4
 800b21a:	b142      	cbz	r2, 800b22e <__ascii_mbtowc+0x1a>
 800b21c:	b14b      	cbz	r3, 800b232 <__ascii_mbtowc+0x1e>
 800b21e:	7813      	ldrb	r3, [r2, #0]
 800b220:	600b      	str	r3, [r1, #0]
 800b222:	7812      	ldrb	r2, [r2, #0]
 800b224:	1e10      	subs	r0, r2, #0
 800b226:	bf18      	it	ne
 800b228:	2001      	movne	r0, #1
 800b22a:	b002      	add	sp, #8
 800b22c:	4770      	bx	lr
 800b22e:	4610      	mov	r0, r2
 800b230:	e7fb      	b.n	800b22a <__ascii_mbtowc+0x16>
 800b232:	f06f 0001 	mvn.w	r0, #1
 800b236:	e7f8      	b.n	800b22a <__ascii_mbtowc+0x16>

0800b238 <__malloc_lock>:
 800b238:	4801      	ldr	r0, [pc, #4]	; (800b240 <__malloc_lock+0x8>)
 800b23a:	f7ff bb96 	b.w	800a96a <__retarget_lock_acquire_recursive>
 800b23e:	bf00      	nop
 800b240:	200008b8 	.word	0x200008b8

0800b244 <__malloc_unlock>:
 800b244:	4801      	ldr	r0, [pc, #4]	; (800b24c <__malloc_unlock+0x8>)
 800b246:	f7ff bb91 	b.w	800a96c <__retarget_lock_release_recursive>
 800b24a:	bf00      	nop
 800b24c:	200008b8 	.word	0x200008b8

0800b250 <_Balloc>:
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	69c6      	ldr	r6, [r0, #28]
 800b254:	4604      	mov	r4, r0
 800b256:	460d      	mov	r5, r1
 800b258:	b976      	cbnz	r6, 800b278 <_Balloc+0x28>
 800b25a:	2010      	movs	r0, #16
 800b25c:	f000 fda4 	bl	800bda8 <malloc>
 800b260:	4602      	mov	r2, r0
 800b262:	61e0      	str	r0, [r4, #28]
 800b264:	b920      	cbnz	r0, 800b270 <_Balloc+0x20>
 800b266:	4b18      	ldr	r3, [pc, #96]	; (800b2c8 <_Balloc+0x78>)
 800b268:	4818      	ldr	r0, [pc, #96]	; (800b2cc <_Balloc+0x7c>)
 800b26a:	216b      	movs	r1, #107	; 0x6b
 800b26c:	f000 fd68 	bl	800bd40 <__assert_func>
 800b270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b274:	6006      	str	r6, [r0, #0]
 800b276:	60c6      	str	r6, [r0, #12]
 800b278:	69e6      	ldr	r6, [r4, #28]
 800b27a:	68f3      	ldr	r3, [r6, #12]
 800b27c:	b183      	cbz	r3, 800b2a0 <_Balloc+0x50>
 800b27e:	69e3      	ldr	r3, [r4, #28]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b286:	b9b8      	cbnz	r0, 800b2b8 <_Balloc+0x68>
 800b288:	2101      	movs	r1, #1
 800b28a:	fa01 f605 	lsl.w	r6, r1, r5
 800b28e:	1d72      	adds	r2, r6, #5
 800b290:	0092      	lsls	r2, r2, #2
 800b292:	4620      	mov	r0, r4
 800b294:	f000 fd72 	bl	800bd7c <_calloc_r>
 800b298:	b160      	cbz	r0, 800b2b4 <_Balloc+0x64>
 800b29a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b29e:	e00e      	b.n	800b2be <_Balloc+0x6e>
 800b2a0:	2221      	movs	r2, #33	; 0x21
 800b2a2:	2104      	movs	r1, #4
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f000 fd69 	bl	800bd7c <_calloc_r>
 800b2aa:	69e3      	ldr	r3, [r4, #28]
 800b2ac:	60f0      	str	r0, [r6, #12]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e4      	bne.n	800b27e <_Balloc+0x2e>
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	bd70      	pop	{r4, r5, r6, pc}
 800b2b8:	6802      	ldr	r2, [r0, #0]
 800b2ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2be:	2300      	movs	r3, #0
 800b2c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2c4:	e7f7      	b.n	800b2b6 <_Balloc+0x66>
 800b2c6:	bf00      	nop
 800b2c8:	0800c9e1 	.word	0x0800c9e1
 800b2cc:	0800c9f8 	.word	0x0800c9f8

0800b2d0 <_Bfree>:
 800b2d0:	b570      	push	{r4, r5, r6, lr}
 800b2d2:	69c6      	ldr	r6, [r0, #28]
 800b2d4:	4605      	mov	r5, r0
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	b976      	cbnz	r6, 800b2f8 <_Bfree+0x28>
 800b2da:	2010      	movs	r0, #16
 800b2dc:	f000 fd64 	bl	800bda8 <malloc>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	61e8      	str	r0, [r5, #28]
 800b2e4:	b920      	cbnz	r0, 800b2f0 <_Bfree+0x20>
 800b2e6:	4b09      	ldr	r3, [pc, #36]	; (800b30c <_Bfree+0x3c>)
 800b2e8:	4809      	ldr	r0, [pc, #36]	; (800b310 <_Bfree+0x40>)
 800b2ea:	218f      	movs	r1, #143	; 0x8f
 800b2ec:	f000 fd28 	bl	800bd40 <__assert_func>
 800b2f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2f4:	6006      	str	r6, [r0, #0]
 800b2f6:	60c6      	str	r6, [r0, #12]
 800b2f8:	b13c      	cbz	r4, 800b30a <_Bfree+0x3a>
 800b2fa:	69eb      	ldr	r3, [r5, #28]
 800b2fc:	6862      	ldr	r2, [r4, #4]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b304:	6021      	str	r1, [r4, #0]
 800b306:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b30a:	bd70      	pop	{r4, r5, r6, pc}
 800b30c:	0800c9e1 	.word	0x0800c9e1
 800b310:	0800c9f8 	.word	0x0800c9f8

0800b314 <__multadd>:
 800b314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b318:	690d      	ldr	r5, [r1, #16]
 800b31a:	4607      	mov	r7, r0
 800b31c:	460c      	mov	r4, r1
 800b31e:	461e      	mov	r6, r3
 800b320:	f101 0c14 	add.w	ip, r1, #20
 800b324:	2000      	movs	r0, #0
 800b326:	f8dc 3000 	ldr.w	r3, [ip]
 800b32a:	b299      	uxth	r1, r3
 800b32c:	fb02 6101 	mla	r1, r2, r1, r6
 800b330:	0c1e      	lsrs	r6, r3, #16
 800b332:	0c0b      	lsrs	r3, r1, #16
 800b334:	fb02 3306 	mla	r3, r2, r6, r3
 800b338:	b289      	uxth	r1, r1
 800b33a:	3001      	adds	r0, #1
 800b33c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b340:	4285      	cmp	r5, r0
 800b342:	f84c 1b04 	str.w	r1, [ip], #4
 800b346:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b34a:	dcec      	bgt.n	800b326 <__multadd+0x12>
 800b34c:	b30e      	cbz	r6, 800b392 <__multadd+0x7e>
 800b34e:	68a3      	ldr	r3, [r4, #8]
 800b350:	42ab      	cmp	r3, r5
 800b352:	dc19      	bgt.n	800b388 <__multadd+0x74>
 800b354:	6861      	ldr	r1, [r4, #4]
 800b356:	4638      	mov	r0, r7
 800b358:	3101      	adds	r1, #1
 800b35a:	f7ff ff79 	bl	800b250 <_Balloc>
 800b35e:	4680      	mov	r8, r0
 800b360:	b928      	cbnz	r0, 800b36e <__multadd+0x5a>
 800b362:	4602      	mov	r2, r0
 800b364:	4b0c      	ldr	r3, [pc, #48]	; (800b398 <__multadd+0x84>)
 800b366:	480d      	ldr	r0, [pc, #52]	; (800b39c <__multadd+0x88>)
 800b368:	21ba      	movs	r1, #186	; 0xba
 800b36a:	f000 fce9 	bl	800bd40 <__assert_func>
 800b36e:	6922      	ldr	r2, [r4, #16]
 800b370:	3202      	adds	r2, #2
 800b372:	f104 010c 	add.w	r1, r4, #12
 800b376:	0092      	lsls	r2, r2, #2
 800b378:	300c      	adds	r0, #12
 800b37a:	f7ff faf8 	bl	800a96e <memcpy>
 800b37e:	4621      	mov	r1, r4
 800b380:	4638      	mov	r0, r7
 800b382:	f7ff ffa5 	bl	800b2d0 <_Bfree>
 800b386:	4644      	mov	r4, r8
 800b388:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b38c:	3501      	adds	r5, #1
 800b38e:	615e      	str	r6, [r3, #20]
 800b390:	6125      	str	r5, [r4, #16]
 800b392:	4620      	mov	r0, r4
 800b394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b398:	0800c970 	.word	0x0800c970
 800b39c:	0800c9f8 	.word	0x0800c9f8

0800b3a0 <__s2b>:
 800b3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	4615      	mov	r5, r2
 800b3a8:	461f      	mov	r7, r3
 800b3aa:	2209      	movs	r2, #9
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	db09      	blt.n	800b3d0 <__s2b+0x30>
 800b3bc:	4630      	mov	r0, r6
 800b3be:	f7ff ff47 	bl	800b250 <_Balloc>
 800b3c2:	b940      	cbnz	r0, 800b3d6 <__s2b+0x36>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	4b19      	ldr	r3, [pc, #100]	; (800b42c <__s2b+0x8c>)
 800b3c8:	4819      	ldr	r0, [pc, #100]	; (800b430 <__s2b+0x90>)
 800b3ca:	21d3      	movs	r1, #211	; 0xd3
 800b3cc:	f000 fcb8 	bl	800bd40 <__assert_func>
 800b3d0:	0052      	lsls	r2, r2, #1
 800b3d2:	3101      	adds	r1, #1
 800b3d4:	e7f0      	b.n	800b3b8 <__s2b+0x18>
 800b3d6:	9b08      	ldr	r3, [sp, #32]
 800b3d8:	6143      	str	r3, [r0, #20]
 800b3da:	2d09      	cmp	r5, #9
 800b3dc:	f04f 0301 	mov.w	r3, #1
 800b3e0:	6103      	str	r3, [r0, #16]
 800b3e2:	dd16      	ble.n	800b412 <__s2b+0x72>
 800b3e4:	f104 0909 	add.w	r9, r4, #9
 800b3e8:	46c8      	mov	r8, r9
 800b3ea:	442c      	add	r4, r5
 800b3ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b3f0:	4601      	mov	r1, r0
 800b3f2:	3b30      	subs	r3, #48	; 0x30
 800b3f4:	220a      	movs	r2, #10
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	f7ff ff8c 	bl	800b314 <__multadd>
 800b3fc:	45a0      	cmp	r8, r4
 800b3fe:	d1f5      	bne.n	800b3ec <__s2b+0x4c>
 800b400:	f1a5 0408 	sub.w	r4, r5, #8
 800b404:	444c      	add	r4, r9
 800b406:	1b2d      	subs	r5, r5, r4
 800b408:	1963      	adds	r3, r4, r5
 800b40a:	42bb      	cmp	r3, r7
 800b40c:	db04      	blt.n	800b418 <__s2b+0x78>
 800b40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b412:	340a      	adds	r4, #10
 800b414:	2509      	movs	r5, #9
 800b416:	e7f6      	b.n	800b406 <__s2b+0x66>
 800b418:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b41c:	4601      	mov	r1, r0
 800b41e:	3b30      	subs	r3, #48	; 0x30
 800b420:	220a      	movs	r2, #10
 800b422:	4630      	mov	r0, r6
 800b424:	f7ff ff76 	bl	800b314 <__multadd>
 800b428:	e7ee      	b.n	800b408 <__s2b+0x68>
 800b42a:	bf00      	nop
 800b42c:	0800c970 	.word	0x0800c970
 800b430:	0800c9f8 	.word	0x0800c9f8

0800b434 <__hi0bits>:
 800b434:	0c03      	lsrs	r3, r0, #16
 800b436:	041b      	lsls	r3, r3, #16
 800b438:	b9d3      	cbnz	r3, 800b470 <__hi0bits+0x3c>
 800b43a:	0400      	lsls	r0, r0, #16
 800b43c:	2310      	movs	r3, #16
 800b43e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b442:	bf04      	itt	eq
 800b444:	0200      	lsleq	r0, r0, #8
 800b446:	3308      	addeq	r3, #8
 800b448:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b44c:	bf04      	itt	eq
 800b44e:	0100      	lsleq	r0, r0, #4
 800b450:	3304      	addeq	r3, #4
 800b452:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b456:	bf04      	itt	eq
 800b458:	0080      	lsleq	r0, r0, #2
 800b45a:	3302      	addeq	r3, #2
 800b45c:	2800      	cmp	r0, #0
 800b45e:	db05      	blt.n	800b46c <__hi0bits+0x38>
 800b460:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b464:	f103 0301 	add.w	r3, r3, #1
 800b468:	bf08      	it	eq
 800b46a:	2320      	moveq	r3, #32
 800b46c:	4618      	mov	r0, r3
 800b46e:	4770      	bx	lr
 800b470:	2300      	movs	r3, #0
 800b472:	e7e4      	b.n	800b43e <__hi0bits+0xa>

0800b474 <__lo0bits>:
 800b474:	6803      	ldr	r3, [r0, #0]
 800b476:	f013 0207 	ands.w	r2, r3, #7
 800b47a:	d00c      	beq.n	800b496 <__lo0bits+0x22>
 800b47c:	07d9      	lsls	r1, r3, #31
 800b47e:	d422      	bmi.n	800b4c6 <__lo0bits+0x52>
 800b480:	079a      	lsls	r2, r3, #30
 800b482:	bf49      	itett	mi
 800b484:	085b      	lsrmi	r3, r3, #1
 800b486:	089b      	lsrpl	r3, r3, #2
 800b488:	6003      	strmi	r3, [r0, #0]
 800b48a:	2201      	movmi	r2, #1
 800b48c:	bf5c      	itt	pl
 800b48e:	6003      	strpl	r3, [r0, #0]
 800b490:	2202      	movpl	r2, #2
 800b492:	4610      	mov	r0, r2
 800b494:	4770      	bx	lr
 800b496:	b299      	uxth	r1, r3
 800b498:	b909      	cbnz	r1, 800b49e <__lo0bits+0x2a>
 800b49a:	0c1b      	lsrs	r3, r3, #16
 800b49c:	2210      	movs	r2, #16
 800b49e:	b2d9      	uxtb	r1, r3
 800b4a0:	b909      	cbnz	r1, 800b4a6 <__lo0bits+0x32>
 800b4a2:	3208      	adds	r2, #8
 800b4a4:	0a1b      	lsrs	r3, r3, #8
 800b4a6:	0719      	lsls	r1, r3, #28
 800b4a8:	bf04      	itt	eq
 800b4aa:	091b      	lsreq	r3, r3, #4
 800b4ac:	3204      	addeq	r2, #4
 800b4ae:	0799      	lsls	r1, r3, #30
 800b4b0:	bf04      	itt	eq
 800b4b2:	089b      	lsreq	r3, r3, #2
 800b4b4:	3202      	addeq	r2, #2
 800b4b6:	07d9      	lsls	r1, r3, #31
 800b4b8:	d403      	bmi.n	800b4c2 <__lo0bits+0x4e>
 800b4ba:	085b      	lsrs	r3, r3, #1
 800b4bc:	f102 0201 	add.w	r2, r2, #1
 800b4c0:	d003      	beq.n	800b4ca <__lo0bits+0x56>
 800b4c2:	6003      	str	r3, [r0, #0]
 800b4c4:	e7e5      	b.n	800b492 <__lo0bits+0x1e>
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	e7e3      	b.n	800b492 <__lo0bits+0x1e>
 800b4ca:	2220      	movs	r2, #32
 800b4cc:	e7e1      	b.n	800b492 <__lo0bits+0x1e>
	...

0800b4d0 <__i2b>:
 800b4d0:	b510      	push	{r4, lr}
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	2101      	movs	r1, #1
 800b4d6:	f7ff febb 	bl	800b250 <_Balloc>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	b928      	cbnz	r0, 800b4ea <__i2b+0x1a>
 800b4de:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <__i2b+0x24>)
 800b4e0:	4805      	ldr	r0, [pc, #20]	; (800b4f8 <__i2b+0x28>)
 800b4e2:	f240 1145 	movw	r1, #325	; 0x145
 800b4e6:	f000 fc2b 	bl	800bd40 <__assert_func>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	6144      	str	r4, [r0, #20]
 800b4ee:	6103      	str	r3, [r0, #16]
 800b4f0:	bd10      	pop	{r4, pc}
 800b4f2:	bf00      	nop
 800b4f4:	0800c970 	.word	0x0800c970
 800b4f8:	0800c9f8 	.word	0x0800c9f8

0800b4fc <__multiply>:
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	4691      	mov	r9, r2
 800b502:	690a      	ldr	r2, [r1, #16]
 800b504:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b508:	429a      	cmp	r2, r3
 800b50a:	bfb8      	it	lt
 800b50c:	460b      	movlt	r3, r1
 800b50e:	460c      	mov	r4, r1
 800b510:	bfbc      	itt	lt
 800b512:	464c      	movlt	r4, r9
 800b514:	4699      	movlt	r9, r3
 800b516:	6927      	ldr	r7, [r4, #16]
 800b518:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b51c:	68a3      	ldr	r3, [r4, #8]
 800b51e:	6861      	ldr	r1, [r4, #4]
 800b520:	eb07 060a 	add.w	r6, r7, sl
 800b524:	42b3      	cmp	r3, r6
 800b526:	b085      	sub	sp, #20
 800b528:	bfb8      	it	lt
 800b52a:	3101      	addlt	r1, #1
 800b52c:	f7ff fe90 	bl	800b250 <_Balloc>
 800b530:	b930      	cbnz	r0, 800b540 <__multiply+0x44>
 800b532:	4602      	mov	r2, r0
 800b534:	4b44      	ldr	r3, [pc, #272]	; (800b648 <__multiply+0x14c>)
 800b536:	4845      	ldr	r0, [pc, #276]	; (800b64c <__multiply+0x150>)
 800b538:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b53c:	f000 fc00 	bl	800bd40 <__assert_func>
 800b540:	f100 0514 	add.w	r5, r0, #20
 800b544:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b548:	462b      	mov	r3, r5
 800b54a:	2200      	movs	r2, #0
 800b54c:	4543      	cmp	r3, r8
 800b54e:	d321      	bcc.n	800b594 <__multiply+0x98>
 800b550:	f104 0314 	add.w	r3, r4, #20
 800b554:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b558:	f109 0314 	add.w	r3, r9, #20
 800b55c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b560:	9202      	str	r2, [sp, #8]
 800b562:	1b3a      	subs	r2, r7, r4
 800b564:	3a15      	subs	r2, #21
 800b566:	f022 0203 	bic.w	r2, r2, #3
 800b56a:	3204      	adds	r2, #4
 800b56c:	f104 0115 	add.w	r1, r4, #21
 800b570:	428f      	cmp	r7, r1
 800b572:	bf38      	it	cc
 800b574:	2204      	movcc	r2, #4
 800b576:	9201      	str	r2, [sp, #4]
 800b578:	9a02      	ldr	r2, [sp, #8]
 800b57a:	9303      	str	r3, [sp, #12]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d80c      	bhi.n	800b59a <__multiply+0x9e>
 800b580:	2e00      	cmp	r6, #0
 800b582:	dd03      	ble.n	800b58c <__multiply+0x90>
 800b584:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d05b      	beq.n	800b644 <__multiply+0x148>
 800b58c:	6106      	str	r6, [r0, #16]
 800b58e:	b005      	add	sp, #20
 800b590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b594:	f843 2b04 	str.w	r2, [r3], #4
 800b598:	e7d8      	b.n	800b54c <__multiply+0x50>
 800b59a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b59e:	f1ba 0f00 	cmp.w	sl, #0
 800b5a2:	d024      	beq.n	800b5ee <__multiply+0xf2>
 800b5a4:	f104 0e14 	add.w	lr, r4, #20
 800b5a8:	46a9      	mov	r9, r5
 800b5aa:	f04f 0c00 	mov.w	ip, #0
 800b5ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b5b2:	f8d9 1000 	ldr.w	r1, [r9]
 800b5b6:	fa1f fb82 	uxth.w	fp, r2
 800b5ba:	b289      	uxth	r1, r1
 800b5bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b5c4:	f8d9 2000 	ldr.w	r2, [r9]
 800b5c8:	4461      	add	r1, ip
 800b5ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800b5d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b5d6:	b289      	uxth	r1, r1
 800b5d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b5dc:	4577      	cmp	r7, lr
 800b5de:	f849 1b04 	str.w	r1, [r9], #4
 800b5e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5e6:	d8e2      	bhi.n	800b5ae <__multiply+0xb2>
 800b5e8:	9a01      	ldr	r2, [sp, #4]
 800b5ea:	f845 c002 	str.w	ip, [r5, r2]
 800b5ee:	9a03      	ldr	r2, [sp, #12]
 800b5f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	f1b9 0f00 	cmp.w	r9, #0
 800b5fa:	d021      	beq.n	800b640 <__multiply+0x144>
 800b5fc:	6829      	ldr	r1, [r5, #0]
 800b5fe:	f104 0c14 	add.w	ip, r4, #20
 800b602:	46ae      	mov	lr, r5
 800b604:	f04f 0a00 	mov.w	sl, #0
 800b608:	f8bc b000 	ldrh.w	fp, [ip]
 800b60c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b610:	fb09 220b 	mla	r2, r9, fp, r2
 800b614:	4452      	add	r2, sl
 800b616:	b289      	uxth	r1, r1
 800b618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b61c:	f84e 1b04 	str.w	r1, [lr], #4
 800b620:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b624:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b628:	f8be 1000 	ldrh.w	r1, [lr]
 800b62c:	fb09 110a 	mla	r1, r9, sl, r1
 800b630:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b634:	4567      	cmp	r7, ip
 800b636:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b63a:	d8e5      	bhi.n	800b608 <__multiply+0x10c>
 800b63c:	9a01      	ldr	r2, [sp, #4]
 800b63e:	50a9      	str	r1, [r5, r2]
 800b640:	3504      	adds	r5, #4
 800b642:	e799      	b.n	800b578 <__multiply+0x7c>
 800b644:	3e01      	subs	r6, #1
 800b646:	e79b      	b.n	800b580 <__multiply+0x84>
 800b648:	0800c970 	.word	0x0800c970
 800b64c:	0800c9f8 	.word	0x0800c9f8

0800b650 <__pow5mult>:
 800b650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b654:	4615      	mov	r5, r2
 800b656:	f012 0203 	ands.w	r2, r2, #3
 800b65a:	4606      	mov	r6, r0
 800b65c:	460f      	mov	r7, r1
 800b65e:	d007      	beq.n	800b670 <__pow5mult+0x20>
 800b660:	4c25      	ldr	r4, [pc, #148]	; (800b6f8 <__pow5mult+0xa8>)
 800b662:	3a01      	subs	r2, #1
 800b664:	2300      	movs	r3, #0
 800b666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b66a:	f7ff fe53 	bl	800b314 <__multadd>
 800b66e:	4607      	mov	r7, r0
 800b670:	10ad      	asrs	r5, r5, #2
 800b672:	d03d      	beq.n	800b6f0 <__pow5mult+0xa0>
 800b674:	69f4      	ldr	r4, [r6, #28]
 800b676:	b97c      	cbnz	r4, 800b698 <__pow5mult+0x48>
 800b678:	2010      	movs	r0, #16
 800b67a:	f000 fb95 	bl	800bda8 <malloc>
 800b67e:	4602      	mov	r2, r0
 800b680:	61f0      	str	r0, [r6, #28]
 800b682:	b928      	cbnz	r0, 800b690 <__pow5mult+0x40>
 800b684:	4b1d      	ldr	r3, [pc, #116]	; (800b6fc <__pow5mult+0xac>)
 800b686:	481e      	ldr	r0, [pc, #120]	; (800b700 <__pow5mult+0xb0>)
 800b688:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b68c:	f000 fb58 	bl	800bd40 <__assert_func>
 800b690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b694:	6004      	str	r4, [r0, #0]
 800b696:	60c4      	str	r4, [r0, #12]
 800b698:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b69c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6a0:	b94c      	cbnz	r4, 800b6b6 <__pow5mult+0x66>
 800b6a2:	f240 2171 	movw	r1, #625	; 0x271
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	f7ff ff12 	bl	800b4d0 <__i2b>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	6003      	str	r3, [r0, #0]
 800b6b6:	f04f 0900 	mov.w	r9, #0
 800b6ba:	07eb      	lsls	r3, r5, #31
 800b6bc:	d50a      	bpl.n	800b6d4 <__pow5mult+0x84>
 800b6be:	4639      	mov	r1, r7
 800b6c0:	4622      	mov	r2, r4
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f7ff ff1a 	bl	800b4fc <__multiply>
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7ff fdff 	bl	800b2d0 <_Bfree>
 800b6d2:	4647      	mov	r7, r8
 800b6d4:	106d      	asrs	r5, r5, #1
 800b6d6:	d00b      	beq.n	800b6f0 <__pow5mult+0xa0>
 800b6d8:	6820      	ldr	r0, [r4, #0]
 800b6da:	b938      	cbnz	r0, 800b6ec <__pow5mult+0x9c>
 800b6dc:	4622      	mov	r2, r4
 800b6de:	4621      	mov	r1, r4
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f7ff ff0b 	bl	800b4fc <__multiply>
 800b6e6:	6020      	str	r0, [r4, #0]
 800b6e8:	f8c0 9000 	str.w	r9, [r0]
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	e7e4      	b.n	800b6ba <__pow5mult+0x6a>
 800b6f0:	4638      	mov	r0, r7
 800b6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6f6:	bf00      	nop
 800b6f8:	0800cb48 	.word	0x0800cb48
 800b6fc:	0800c9e1 	.word	0x0800c9e1
 800b700:	0800c9f8 	.word	0x0800c9f8

0800b704 <__lshift>:
 800b704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b708:	460c      	mov	r4, r1
 800b70a:	6849      	ldr	r1, [r1, #4]
 800b70c:	6923      	ldr	r3, [r4, #16]
 800b70e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b712:	68a3      	ldr	r3, [r4, #8]
 800b714:	4607      	mov	r7, r0
 800b716:	4691      	mov	r9, r2
 800b718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b71c:	f108 0601 	add.w	r6, r8, #1
 800b720:	42b3      	cmp	r3, r6
 800b722:	db0b      	blt.n	800b73c <__lshift+0x38>
 800b724:	4638      	mov	r0, r7
 800b726:	f7ff fd93 	bl	800b250 <_Balloc>
 800b72a:	4605      	mov	r5, r0
 800b72c:	b948      	cbnz	r0, 800b742 <__lshift+0x3e>
 800b72e:	4602      	mov	r2, r0
 800b730:	4b28      	ldr	r3, [pc, #160]	; (800b7d4 <__lshift+0xd0>)
 800b732:	4829      	ldr	r0, [pc, #164]	; (800b7d8 <__lshift+0xd4>)
 800b734:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b738:	f000 fb02 	bl	800bd40 <__assert_func>
 800b73c:	3101      	adds	r1, #1
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	e7ee      	b.n	800b720 <__lshift+0x1c>
 800b742:	2300      	movs	r3, #0
 800b744:	f100 0114 	add.w	r1, r0, #20
 800b748:	f100 0210 	add.w	r2, r0, #16
 800b74c:	4618      	mov	r0, r3
 800b74e:	4553      	cmp	r3, sl
 800b750:	db33      	blt.n	800b7ba <__lshift+0xb6>
 800b752:	6920      	ldr	r0, [r4, #16]
 800b754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b758:	f104 0314 	add.w	r3, r4, #20
 800b75c:	f019 091f 	ands.w	r9, r9, #31
 800b760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b764:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b768:	d02b      	beq.n	800b7c2 <__lshift+0xbe>
 800b76a:	f1c9 0e20 	rsb	lr, r9, #32
 800b76e:	468a      	mov	sl, r1
 800b770:	2200      	movs	r2, #0
 800b772:	6818      	ldr	r0, [r3, #0]
 800b774:	fa00 f009 	lsl.w	r0, r0, r9
 800b778:	4310      	orrs	r0, r2
 800b77a:	f84a 0b04 	str.w	r0, [sl], #4
 800b77e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b782:	459c      	cmp	ip, r3
 800b784:	fa22 f20e 	lsr.w	r2, r2, lr
 800b788:	d8f3      	bhi.n	800b772 <__lshift+0x6e>
 800b78a:	ebac 0304 	sub.w	r3, ip, r4
 800b78e:	3b15      	subs	r3, #21
 800b790:	f023 0303 	bic.w	r3, r3, #3
 800b794:	3304      	adds	r3, #4
 800b796:	f104 0015 	add.w	r0, r4, #21
 800b79a:	4584      	cmp	ip, r0
 800b79c:	bf38      	it	cc
 800b79e:	2304      	movcc	r3, #4
 800b7a0:	50ca      	str	r2, [r1, r3]
 800b7a2:	b10a      	cbz	r2, 800b7a8 <__lshift+0xa4>
 800b7a4:	f108 0602 	add.w	r6, r8, #2
 800b7a8:	3e01      	subs	r6, #1
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	612e      	str	r6, [r5, #16]
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	f7ff fd8e 	bl	800b2d0 <_Bfree>
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7be:	3301      	adds	r3, #1
 800b7c0:	e7c5      	b.n	800b74e <__lshift+0x4a>
 800b7c2:	3904      	subs	r1, #4
 800b7c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7cc:	459c      	cmp	ip, r3
 800b7ce:	d8f9      	bhi.n	800b7c4 <__lshift+0xc0>
 800b7d0:	e7ea      	b.n	800b7a8 <__lshift+0xa4>
 800b7d2:	bf00      	nop
 800b7d4:	0800c970 	.word	0x0800c970
 800b7d8:	0800c9f8 	.word	0x0800c9f8

0800b7dc <__mcmp>:
 800b7dc:	b530      	push	{r4, r5, lr}
 800b7de:	6902      	ldr	r2, [r0, #16]
 800b7e0:	690c      	ldr	r4, [r1, #16]
 800b7e2:	1b12      	subs	r2, r2, r4
 800b7e4:	d10e      	bne.n	800b804 <__mcmp+0x28>
 800b7e6:	f100 0314 	add.w	r3, r0, #20
 800b7ea:	3114      	adds	r1, #20
 800b7ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b7f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b7f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b7f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b7fc:	42a5      	cmp	r5, r4
 800b7fe:	d003      	beq.n	800b808 <__mcmp+0x2c>
 800b800:	d305      	bcc.n	800b80e <__mcmp+0x32>
 800b802:	2201      	movs	r2, #1
 800b804:	4610      	mov	r0, r2
 800b806:	bd30      	pop	{r4, r5, pc}
 800b808:	4283      	cmp	r3, r0
 800b80a:	d3f3      	bcc.n	800b7f4 <__mcmp+0x18>
 800b80c:	e7fa      	b.n	800b804 <__mcmp+0x28>
 800b80e:	f04f 32ff 	mov.w	r2, #4294967295
 800b812:	e7f7      	b.n	800b804 <__mcmp+0x28>

0800b814 <__mdiff>:
 800b814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b818:	460c      	mov	r4, r1
 800b81a:	4606      	mov	r6, r0
 800b81c:	4611      	mov	r1, r2
 800b81e:	4620      	mov	r0, r4
 800b820:	4690      	mov	r8, r2
 800b822:	f7ff ffdb 	bl	800b7dc <__mcmp>
 800b826:	1e05      	subs	r5, r0, #0
 800b828:	d110      	bne.n	800b84c <__mdiff+0x38>
 800b82a:	4629      	mov	r1, r5
 800b82c:	4630      	mov	r0, r6
 800b82e:	f7ff fd0f 	bl	800b250 <_Balloc>
 800b832:	b930      	cbnz	r0, 800b842 <__mdiff+0x2e>
 800b834:	4b3a      	ldr	r3, [pc, #232]	; (800b920 <__mdiff+0x10c>)
 800b836:	4602      	mov	r2, r0
 800b838:	f240 2137 	movw	r1, #567	; 0x237
 800b83c:	4839      	ldr	r0, [pc, #228]	; (800b924 <__mdiff+0x110>)
 800b83e:	f000 fa7f 	bl	800bd40 <__assert_func>
 800b842:	2301      	movs	r3, #1
 800b844:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84c:	bfa4      	itt	ge
 800b84e:	4643      	movge	r3, r8
 800b850:	46a0      	movge	r8, r4
 800b852:	4630      	mov	r0, r6
 800b854:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b858:	bfa6      	itte	ge
 800b85a:	461c      	movge	r4, r3
 800b85c:	2500      	movge	r5, #0
 800b85e:	2501      	movlt	r5, #1
 800b860:	f7ff fcf6 	bl	800b250 <_Balloc>
 800b864:	b920      	cbnz	r0, 800b870 <__mdiff+0x5c>
 800b866:	4b2e      	ldr	r3, [pc, #184]	; (800b920 <__mdiff+0x10c>)
 800b868:	4602      	mov	r2, r0
 800b86a:	f240 2145 	movw	r1, #581	; 0x245
 800b86e:	e7e5      	b.n	800b83c <__mdiff+0x28>
 800b870:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b874:	6926      	ldr	r6, [r4, #16]
 800b876:	60c5      	str	r5, [r0, #12]
 800b878:	f104 0914 	add.w	r9, r4, #20
 800b87c:	f108 0514 	add.w	r5, r8, #20
 800b880:	f100 0e14 	add.w	lr, r0, #20
 800b884:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b888:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b88c:	f108 0210 	add.w	r2, r8, #16
 800b890:	46f2      	mov	sl, lr
 800b892:	2100      	movs	r1, #0
 800b894:	f859 3b04 	ldr.w	r3, [r9], #4
 800b898:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b89c:	fa11 f88b 	uxtah	r8, r1, fp
 800b8a0:	b299      	uxth	r1, r3
 800b8a2:	0c1b      	lsrs	r3, r3, #16
 800b8a4:	eba8 0801 	sub.w	r8, r8, r1
 800b8a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b8b0:	fa1f f888 	uxth.w	r8, r8
 800b8b4:	1419      	asrs	r1, r3, #16
 800b8b6:	454e      	cmp	r6, r9
 800b8b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b8bc:	f84a 3b04 	str.w	r3, [sl], #4
 800b8c0:	d8e8      	bhi.n	800b894 <__mdiff+0x80>
 800b8c2:	1b33      	subs	r3, r6, r4
 800b8c4:	3b15      	subs	r3, #21
 800b8c6:	f023 0303 	bic.w	r3, r3, #3
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	3415      	adds	r4, #21
 800b8ce:	42a6      	cmp	r6, r4
 800b8d0:	bf38      	it	cc
 800b8d2:	2304      	movcc	r3, #4
 800b8d4:	441d      	add	r5, r3
 800b8d6:	4473      	add	r3, lr
 800b8d8:	469e      	mov	lr, r3
 800b8da:	462e      	mov	r6, r5
 800b8dc:	4566      	cmp	r6, ip
 800b8de:	d30e      	bcc.n	800b8fe <__mdiff+0xea>
 800b8e0:	f10c 0203 	add.w	r2, ip, #3
 800b8e4:	1b52      	subs	r2, r2, r5
 800b8e6:	f022 0203 	bic.w	r2, r2, #3
 800b8ea:	3d03      	subs	r5, #3
 800b8ec:	45ac      	cmp	ip, r5
 800b8ee:	bf38      	it	cc
 800b8f0:	2200      	movcc	r2, #0
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b8f8:	b17a      	cbz	r2, 800b91a <__mdiff+0x106>
 800b8fa:	6107      	str	r7, [r0, #16]
 800b8fc:	e7a4      	b.n	800b848 <__mdiff+0x34>
 800b8fe:	f856 8b04 	ldr.w	r8, [r6], #4
 800b902:	fa11 f288 	uxtah	r2, r1, r8
 800b906:	1414      	asrs	r4, r2, #16
 800b908:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b90c:	b292      	uxth	r2, r2
 800b90e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b912:	f84e 2b04 	str.w	r2, [lr], #4
 800b916:	1421      	asrs	r1, r4, #16
 800b918:	e7e0      	b.n	800b8dc <__mdiff+0xc8>
 800b91a:	3f01      	subs	r7, #1
 800b91c:	e7ea      	b.n	800b8f4 <__mdiff+0xe0>
 800b91e:	bf00      	nop
 800b920:	0800c970 	.word	0x0800c970
 800b924:	0800c9f8 	.word	0x0800c9f8

0800b928 <__ulp>:
 800b928:	b082      	sub	sp, #8
 800b92a:	ed8d 0b00 	vstr	d0, [sp]
 800b92e:	9a01      	ldr	r2, [sp, #4]
 800b930:	4b0f      	ldr	r3, [pc, #60]	; (800b970 <__ulp+0x48>)
 800b932:	4013      	ands	r3, r2
 800b934:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b938:	2b00      	cmp	r3, #0
 800b93a:	dc08      	bgt.n	800b94e <__ulp+0x26>
 800b93c:	425b      	negs	r3, r3
 800b93e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b942:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b946:	da04      	bge.n	800b952 <__ulp+0x2a>
 800b948:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b94c:	4113      	asrs	r3, r2
 800b94e:	2200      	movs	r2, #0
 800b950:	e008      	b.n	800b964 <__ulp+0x3c>
 800b952:	f1a2 0314 	sub.w	r3, r2, #20
 800b956:	2b1e      	cmp	r3, #30
 800b958:	bfda      	itte	le
 800b95a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b95e:	40da      	lsrle	r2, r3
 800b960:	2201      	movgt	r2, #1
 800b962:	2300      	movs	r3, #0
 800b964:	4619      	mov	r1, r3
 800b966:	4610      	mov	r0, r2
 800b968:	ec41 0b10 	vmov	d0, r0, r1
 800b96c:	b002      	add	sp, #8
 800b96e:	4770      	bx	lr
 800b970:	7ff00000 	.word	0x7ff00000

0800b974 <__b2d>:
 800b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b978:	6906      	ldr	r6, [r0, #16]
 800b97a:	f100 0814 	add.w	r8, r0, #20
 800b97e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b982:	1f37      	subs	r7, r6, #4
 800b984:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b988:	4610      	mov	r0, r2
 800b98a:	f7ff fd53 	bl	800b434 <__hi0bits>
 800b98e:	f1c0 0320 	rsb	r3, r0, #32
 800b992:	280a      	cmp	r0, #10
 800b994:	600b      	str	r3, [r1, #0]
 800b996:	491b      	ldr	r1, [pc, #108]	; (800ba04 <__b2d+0x90>)
 800b998:	dc15      	bgt.n	800b9c6 <__b2d+0x52>
 800b99a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b99e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b9a2:	45b8      	cmp	r8, r7
 800b9a4:	ea43 0501 	orr.w	r5, r3, r1
 800b9a8:	bf34      	ite	cc
 800b9aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b9ae:	2300      	movcs	r3, #0
 800b9b0:	3015      	adds	r0, #21
 800b9b2:	fa02 f000 	lsl.w	r0, r2, r0
 800b9b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800b9ba:	4303      	orrs	r3, r0
 800b9bc:	461c      	mov	r4, r3
 800b9be:	ec45 4b10 	vmov	d0, r4, r5
 800b9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c6:	45b8      	cmp	r8, r7
 800b9c8:	bf3a      	itte	cc
 800b9ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b9ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800b9d2:	2300      	movcs	r3, #0
 800b9d4:	380b      	subs	r0, #11
 800b9d6:	d012      	beq.n	800b9fe <__b2d+0x8a>
 800b9d8:	f1c0 0120 	rsb	r1, r0, #32
 800b9dc:	fa23 f401 	lsr.w	r4, r3, r1
 800b9e0:	4082      	lsls	r2, r0
 800b9e2:	4322      	orrs	r2, r4
 800b9e4:	4547      	cmp	r7, r8
 800b9e6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b9ea:	bf8c      	ite	hi
 800b9ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b9f0:	2200      	movls	r2, #0
 800b9f2:	4083      	lsls	r3, r0
 800b9f4:	40ca      	lsrs	r2, r1
 800b9f6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	e7de      	b.n	800b9bc <__b2d+0x48>
 800b9fe:	ea42 0501 	orr.w	r5, r2, r1
 800ba02:	e7db      	b.n	800b9bc <__b2d+0x48>
 800ba04:	3ff00000 	.word	0x3ff00000

0800ba08 <__d2b>:
 800ba08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba0c:	460f      	mov	r7, r1
 800ba0e:	2101      	movs	r1, #1
 800ba10:	ec59 8b10 	vmov	r8, r9, d0
 800ba14:	4616      	mov	r6, r2
 800ba16:	f7ff fc1b 	bl	800b250 <_Balloc>
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	b930      	cbnz	r0, 800ba2c <__d2b+0x24>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	4b24      	ldr	r3, [pc, #144]	; (800bab4 <__d2b+0xac>)
 800ba22:	4825      	ldr	r0, [pc, #148]	; (800bab8 <__d2b+0xb0>)
 800ba24:	f240 310f 	movw	r1, #783	; 0x30f
 800ba28:	f000 f98a 	bl	800bd40 <__assert_func>
 800ba2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba34:	bb2d      	cbnz	r5, 800ba82 <__d2b+0x7a>
 800ba36:	9301      	str	r3, [sp, #4]
 800ba38:	f1b8 0300 	subs.w	r3, r8, #0
 800ba3c:	d026      	beq.n	800ba8c <__d2b+0x84>
 800ba3e:	4668      	mov	r0, sp
 800ba40:	9300      	str	r3, [sp, #0]
 800ba42:	f7ff fd17 	bl	800b474 <__lo0bits>
 800ba46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba4a:	b1e8      	cbz	r0, 800ba88 <__d2b+0x80>
 800ba4c:	f1c0 0320 	rsb	r3, r0, #32
 800ba50:	fa02 f303 	lsl.w	r3, r2, r3
 800ba54:	430b      	orrs	r3, r1
 800ba56:	40c2      	lsrs	r2, r0
 800ba58:	6163      	str	r3, [r4, #20]
 800ba5a:	9201      	str	r2, [sp, #4]
 800ba5c:	9b01      	ldr	r3, [sp, #4]
 800ba5e:	61a3      	str	r3, [r4, #24]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	bf14      	ite	ne
 800ba64:	2202      	movne	r2, #2
 800ba66:	2201      	moveq	r2, #1
 800ba68:	6122      	str	r2, [r4, #16]
 800ba6a:	b1bd      	cbz	r5, 800ba9c <__d2b+0x94>
 800ba6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba70:	4405      	add	r5, r0
 800ba72:	603d      	str	r5, [r7, #0]
 800ba74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba78:	6030      	str	r0, [r6, #0]
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	b003      	add	sp, #12
 800ba7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba86:	e7d6      	b.n	800ba36 <__d2b+0x2e>
 800ba88:	6161      	str	r1, [r4, #20]
 800ba8a:	e7e7      	b.n	800ba5c <__d2b+0x54>
 800ba8c:	a801      	add	r0, sp, #4
 800ba8e:	f7ff fcf1 	bl	800b474 <__lo0bits>
 800ba92:	9b01      	ldr	r3, [sp, #4]
 800ba94:	6163      	str	r3, [r4, #20]
 800ba96:	3020      	adds	r0, #32
 800ba98:	2201      	movs	r2, #1
 800ba9a:	e7e5      	b.n	800ba68 <__d2b+0x60>
 800ba9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800baa0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800baa4:	6038      	str	r0, [r7, #0]
 800baa6:	6918      	ldr	r0, [r3, #16]
 800baa8:	f7ff fcc4 	bl	800b434 <__hi0bits>
 800baac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bab0:	e7e2      	b.n	800ba78 <__d2b+0x70>
 800bab2:	bf00      	nop
 800bab4:	0800c970 	.word	0x0800c970
 800bab8:	0800c9f8 	.word	0x0800c9f8

0800babc <__ratio>:
 800babc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac0:	4688      	mov	r8, r1
 800bac2:	4669      	mov	r1, sp
 800bac4:	4681      	mov	r9, r0
 800bac6:	f7ff ff55 	bl	800b974 <__b2d>
 800baca:	a901      	add	r1, sp, #4
 800bacc:	4640      	mov	r0, r8
 800bace:	ec55 4b10 	vmov	r4, r5, d0
 800bad2:	f7ff ff4f 	bl	800b974 <__b2d>
 800bad6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bada:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bade:	eba3 0c02 	sub.w	ip, r3, r2
 800bae2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bae6:	1a9b      	subs	r3, r3, r2
 800bae8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800baec:	ec51 0b10 	vmov	r0, r1, d0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	bfd6      	itet	le
 800baf4:	460a      	movle	r2, r1
 800baf6:	462a      	movgt	r2, r5
 800baf8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bafc:	468b      	mov	fp, r1
 800bafe:	462f      	mov	r7, r5
 800bb00:	bfd4      	ite	le
 800bb02:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bb06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	ee10 2a10 	vmov	r2, s0
 800bb10:	465b      	mov	r3, fp
 800bb12:	4639      	mov	r1, r7
 800bb14:	f7f4 fe92 	bl	800083c <__aeabi_ddiv>
 800bb18:	ec41 0b10 	vmov	d0, r0, r1
 800bb1c:	b003      	add	sp, #12
 800bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb22 <__copybits>:
 800bb22:	3901      	subs	r1, #1
 800bb24:	b570      	push	{r4, r5, r6, lr}
 800bb26:	1149      	asrs	r1, r1, #5
 800bb28:	6914      	ldr	r4, [r2, #16]
 800bb2a:	3101      	adds	r1, #1
 800bb2c:	f102 0314 	add.w	r3, r2, #20
 800bb30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb38:	1f05      	subs	r5, r0, #4
 800bb3a:	42a3      	cmp	r3, r4
 800bb3c:	d30c      	bcc.n	800bb58 <__copybits+0x36>
 800bb3e:	1aa3      	subs	r3, r4, r2
 800bb40:	3b11      	subs	r3, #17
 800bb42:	f023 0303 	bic.w	r3, r3, #3
 800bb46:	3211      	adds	r2, #17
 800bb48:	42a2      	cmp	r2, r4
 800bb4a:	bf88      	it	hi
 800bb4c:	2300      	movhi	r3, #0
 800bb4e:	4418      	add	r0, r3
 800bb50:	2300      	movs	r3, #0
 800bb52:	4288      	cmp	r0, r1
 800bb54:	d305      	bcc.n	800bb62 <__copybits+0x40>
 800bb56:	bd70      	pop	{r4, r5, r6, pc}
 800bb58:	f853 6b04 	ldr.w	r6, [r3], #4
 800bb5c:	f845 6f04 	str.w	r6, [r5, #4]!
 800bb60:	e7eb      	b.n	800bb3a <__copybits+0x18>
 800bb62:	f840 3b04 	str.w	r3, [r0], #4
 800bb66:	e7f4      	b.n	800bb52 <__copybits+0x30>

0800bb68 <__any_on>:
 800bb68:	f100 0214 	add.w	r2, r0, #20
 800bb6c:	6900      	ldr	r0, [r0, #16]
 800bb6e:	114b      	asrs	r3, r1, #5
 800bb70:	4298      	cmp	r0, r3
 800bb72:	b510      	push	{r4, lr}
 800bb74:	db11      	blt.n	800bb9a <__any_on+0x32>
 800bb76:	dd0a      	ble.n	800bb8e <__any_on+0x26>
 800bb78:	f011 011f 	ands.w	r1, r1, #31
 800bb7c:	d007      	beq.n	800bb8e <__any_on+0x26>
 800bb7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb82:	fa24 f001 	lsr.w	r0, r4, r1
 800bb86:	fa00 f101 	lsl.w	r1, r0, r1
 800bb8a:	428c      	cmp	r4, r1
 800bb8c:	d10b      	bne.n	800bba6 <__any_on+0x3e>
 800bb8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d803      	bhi.n	800bb9e <__any_on+0x36>
 800bb96:	2000      	movs	r0, #0
 800bb98:	bd10      	pop	{r4, pc}
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	e7f7      	b.n	800bb8e <__any_on+0x26>
 800bb9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bba2:	2900      	cmp	r1, #0
 800bba4:	d0f5      	beq.n	800bb92 <__any_on+0x2a>
 800bba6:	2001      	movs	r0, #1
 800bba8:	e7f6      	b.n	800bb98 <__any_on+0x30>

0800bbaa <__ascii_wctomb>:
 800bbaa:	b149      	cbz	r1, 800bbc0 <__ascii_wctomb+0x16>
 800bbac:	2aff      	cmp	r2, #255	; 0xff
 800bbae:	bf85      	ittet	hi
 800bbb0:	238a      	movhi	r3, #138	; 0x8a
 800bbb2:	6003      	strhi	r3, [r0, #0]
 800bbb4:	700a      	strbls	r2, [r1, #0]
 800bbb6:	f04f 30ff 	movhi.w	r0, #4294967295
 800bbba:	bf98      	it	ls
 800bbbc:	2001      	movls	r0, #1
 800bbbe:	4770      	bx	lr
 800bbc0:	4608      	mov	r0, r1
 800bbc2:	4770      	bx	lr

0800bbc4 <__sflush_r>:
 800bbc4:	898a      	ldrh	r2, [r1, #12]
 800bbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbca:	4605      	mov	r5, r0
 800bbcc:	0710      	lsls	r0, r2, #28
 800bbce:	460c      	mov	r4, r1
 800bbd0:	d458      	bmi.n	800bc84 <__sflush_r+0xc0>
 800bbd2:	684b      	ldr	r3, [r1, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	dc05      	bgt.n	800bbe4 <__sflush_r+0x20>
 800bbd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dc02      	bgt.n	800bbe4 <__sflush_r+0x20>
 800bbde:	2000      	movs	r0, #0
 800bbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbe6:	2e00      	cmp	r6, #0
 800bbe8:	d0f9      	beq.n	800bbde <__sflush_r+0x1a>
 800bbea:	2300      	movs	r3, #0
 800bbec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbf0:	682f      	ldr	r7, [r5, #0]
 800bbf2:	6a21      	ldr	r1, [r4, #32]
 800bbf4:	602b      	str	r3, [r5, #0]
 800bbf6:	d032      	beq.n	800bc5e <__sflush_r+0x9a>
 800bbf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbfa:	89a3      	ldrh	r3, [r4, #12]
 800bbfc:	075a      	lsls	r2, r3, #29
 800bbfe:	d505      	bpl.n	800bc0c <__sflush_r+0x48>
 800bc00:	6863      	ldr	r3, [r4, #4]
 800bc02:	1ac0      	subs	r0, r0, r3
 800bc04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc06:	b10b      	cbz	r3, 800bc0c <__sflush_r+0x48>
 800bc08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc0a:	1ac0      	subs	r0, r0, r3
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	4602      	mov	r2, r0
 800bc10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc12:	6a21      	ldr	r1, [r4, #32]
 800bc14:	4628      	mov	r0, r5
 800bc16:	47b0      	blx	r6
 800bc18:	1c43      	adds	r3, r0, #1
 800bc1a:	89a3      	ldrh	r3, [r4, #12]
 800bc1c:	d106      	bne.n	800bc2c <__sflush_r+0x68>
 800bc1e:	6829      	ldr	r1, [r5, #0]
 800bc20:	291d      	cmp	r1, #29
 800bc22:	d82b      	bhi.n	800bc7c <__sflush_r+0xb8>
 800bc24:	4a29      	ldr	r2, [pc, #164]	; (800bccc <__sflush_r+0x108>)
 800bc26:	410a      	asrs	r2, r1
 800bc28:	07d6      	lsls	r6, r2, #31
 800bc2a:	d427      	bmi.n	800bc7c <__sflush_r+0xb8>
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	6062      	str	r2, [r4, #4]
 800bc30:	04d9      	lsls	r1, r3, #19
 800bc32:	6922      	ldr	r2, [r4, #16]
 800bc34:	6022      	str	r2, [r4, #0]
 800bc36:	d504      	bpl.n	800bc42 <__sflush_r+0x7e>
 800bc38:	1c42      	adds	r2, r0, #1
 800bc3a:	d101      	bne.n	800bc40 <__sflush_r+0x7c>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	b903      	cbnz	r3, 800bc42 <__sflush_r+0x7e>
 800bc40:	6560      	str	r0, [r4, #84]	; 0x54
 800bc42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc44:	602f      	str	r7, [r5, #0]
 800bc46:	2900      	cmp	r1, #0
 800bc48:	d0c9      	beq.n	800bbde <__sflush_r+0x1a>
 800bc4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc4e:	4299      	cmp	r1, r3
 800bc50:	d002      	beq.n	800bc58 <__sflush_r+0x94>
 800bc52:	4628      	mov	r0, r5
 800bc54:	f7fe fe9a 	bl	800a98c <_free_r>
 800bc58:	2000      	movs	r0, #0
 800bc5a:	6360      	str	r0, [r4, #52]	; 0x34
 800bc5c:	e7c0      	b.n	800bbe0 <__sflush_r+0x1c>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	4628      	mov	r0, r5
 800bc62:	47b0      	blx	r6
 800bc64:	1c41      	adds	r1, r0, #1
 800bc66:	d1c8      	bne.n	800bbfa <__sflush_r+0x36>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0c5      	beq.n	800bbfa <__sflush_r+0x36>
 800bc6e:	2b1d      	cmp	r3, #29
 800bc70:	d001      	beq.n	800bc76 <__sflush_r+0xb2>
 800bc72:	2b16      	cmp	r3, #22
 800bc74:	d101      	bne.n	800bc7a <__sflush_r+0xb6>
 800bc76:	602f      	str	r7, [r5, #0]
 800bc78:	e7b1      	b.n	800bbde <__sflush_r+0x1a>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	e7ad      	b.n	800bbe0 <__sflush_r+0x1c>
 800bc84:	690f      	ldr	r7, [r1, #16]
 800bc86:	2f00      	cmp	r7, #0
 800bc88:	d0a9      	beq.n	800bbde <__sflush_r+0x1a>
 800bc8a:	0793      	lsls	r3, r2, #30
 800bc8c:	680e      	ldr	r6, [r1, #0]
 800bc8e:	bf08      	it	eq
 800bc90:	694b      	ldreq	r3, [r1, #20]
 800bc92:	600f      	str	r7, [r1, #0]
 800bc94:	bf18      	it	ne
 800bc96:	2300      	movne	r3, #0
 800bc98:	eba6 0807 	sub.w	r8, r6, r7
 800bc9c:	608b      	str	r3, [r1, #8]
 800bc9e:	f1b8 0f00 	cmp.w	r8, #0
 800bca2:	dd9c      	ble.n	800bbde <__sflush_r+0x1a>
 800bca4:	6a21      	ldr	r1, [r4, #32]
 800bca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bca8:	4643      	mov	r3, r8
 800bcaa:	463a      	mov	r2, r7
 800bcac:	4628      	mov	r0, r5
 800bcae:	47b0      	blx	r6
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	dc06      	bgt.n	800bcc2 <__sflush_r+0xfe>
 800bcb4:	89a3      	ldrh	r3, [r4, #12]
 800bcb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcba:	81a3      	strh	r3, [r4, #12]
 800bcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc0:	e78e      	b.n	800bbe0 <__sflush_r+0x1c>
 800bcc2:	4407      	add	r7, r0
 800bcc4:	eba8 0800 	sub.w	r8, r8, r0
 800bcc8:	e7e9      	b.n	800bc9e <__sflush_r+0xda>
 800bcca:	bf00      	nop
 800bccc:	dfbffffe 	.word	0xdfbffffe

0800bcd0 <_fflush_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	690b      	ldr	r3, [r1, #16]
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	b913      	cbnz	r3, 800bce0 <_fflush_r+0x10>
 800bcda:	2500      	movs	r5, #0
 800bcdc:	4628      	mov	r0, r5
 800bcde:	bd38      	pop	{r3, r4, r5, pc}
 800bce0:	b118      	cbz	r0, 800bcea <_fflush_r+0x1a>
 800bce2:	6a03      	ldr	r3, [r0, #32]
 800bce4:	b90b      	cbnz	r3, 800bcea <_fflush_r+0x1a>
 800bce6:	f7fe fd3b 	bl	800a760 <__sinit>
 800bcea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d0f3      	beq.n	800bcda <_fflush_r+0xa>
 800bcf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcf4:	07d0      	lsls	r0, r2, #31
 800bcf6:	d404      	bmi.n	800bd02 <_fflush_r+0x32>
 800bcf8:	0599      	lsls	r1, r3, #22
 800bcfa:	d402      	bmi.n	800bd02 <_fflush_r+0x32>
 800bcfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcfe:	f7fe fe34 	bl	800a96a <__retarget_lock_acquire_recursive>
 800bd02:	4628      	mov	r0, r5
 800bd04:	4621      	mov	r1, r4
 800bd06:	f7ff ff5d 	bl	800bbc4 <__sflush_r>
 800bd0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd0c:	07da      	lsls	r2, r3, #31
 800bd0e:	4605      	mov	r5, r0
 800bd10:	d4e4      	bmi.n	800bcdc <_fflush_r+0xc>
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	059b      	lsls	r3, r3, #22
 800bd16:	d4e1      	bmi.n	800bcdc <_fflush_r+0xc>
 800bd18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd1a:	f7fe fe27 	bl	800a96c <__retarget_lock_release_recursive>
 800bd1e:	e7dd      	b.n	800bcdc <_fflush_r+0xc>

0800bd20 <_sbrk_r>:
 800bd20:	b538      	push	{r3, r4, r5, lr}
 800bd22:	4d06      	ldr	r5, [pc, #24]	; (800bd3c <_sbrk_r+0x1c>)
 800bd24:	2300      	movs	r3, #0
 800bd26:	4604      	mov	r4, r0
 800bd28:	4608      	mov	r0, r1
 800bd2a:	602b      	str	r3, [r5, #0]
 800bd2c:	f7f6 fc8a 	bl	8002644 <_sbrk>
 800bd30:	1c43      	adds	r3, r0, #1
 800bd32:	d102      	bne.n	800bd3a <_sbrk_r+0x1a>
 800bd34:	682b      	ldr	r3, [r5, #0]
 800bd36:	b103      	cbz	r3, 800bd3a <_sbrk_r+0x1a>
 800bd38:	6023      	str	r3, [r4, #0]
 800bd3a:	bd38      	pop	{r3, r4, r5, pc}
 800bd3c:	200008b4 	.word	0x200008b4

0800bd40 <__assert_func>:
 800bd40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd42:	4614      	mov	r4, r2
 800bd44:	461a      	mov	r2, r3
 800bd46:	4b09      	ldr	r3, [pc, #36]	; (800bd6c <__assert_func+0x2c>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4605      	mov	r5, r0
 800bd4c:	68d8      	ldr	r0, [r3, #12]
 800bd4e:	b14c      	cbz	r4, 800bd64 <__assert_func+0x24>
 800bd50:	4b07      	ldr	r3, [pc, #28]	; (800bd70 <__assert_func+0x30>)
 800bd52:	9100      	str	r1, [sp, #0]
 800bd54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd58:	4906      	ldr	r1, [pc, #24]	; (800bd74 <__assert_func+0x34>)
 800bd5a:	462b      	mov	r3, r5
 800bd5c:	f000 f82c 	bl	800bdb8 <fiprintf>
 800bd60:	f000 f83c 	bl	800bddc <abort>
 800bd64:	4b04      	ldr	r3, [pc, #16]	; (800bd78 <__assert_func+0x38>)
 800bd66:	461c      	mov	r4, r3
 800bd68:	e7f3      	b.n	800bd52 <__assert_func+0x12>
 800bd6a:	bf00      	nop
 800bd6c:	200001e4 	.word	0x200001e4
 800bd70:	0800cc55 	.word	0x0800cc55
 800bd74:	0800cc62 	.word	0x0800cc62
 800bd78:	0800cc90 	.word	0x0800cc90

0800bd7c <_calloc_r>:
 800bd7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd7e:	fba1 2402 	umull	r2, r4, r1, r2
 800bd82:	b94c      	cbnz	r4, 800bd98 <_calloc_r+0x1c>
 800bd84:	4611      	mov	r1, r2
 800bd86:	9201      	str	r2, [sp, #4]
 800bd88:	f7ff f9c4 	bl	800b114 <_malloc_r>
 800bd8c:	9a01      	ldr	r2, [sp, #4]
 800bd8e:	4605      	mov	r5, r0
 800bd90:	b930      	cbnz	r0, 800bda0 <_calloc_r+0x24>
 800bd92:	4628      	mov	r0, r5
 800bd94:	b003      	add	sp, #12
 800bd96:	bd30      	pop	{r4, r5, pc}
 800bd98:	220c      	movs	r2, #12
 800bd9a:	6002      	str	r2, [r0, #0]
 800bd9c:	2500      	movs	r5, #0
 800bd9e:	e7f8      	b.n	800bd92 <_calloc_r+0x16>
 800bda0:	4621      	mov	r1, r4
 800bda2:	f7fe fd56 	bl	800a852 <memset>
 800bda6:	e7f4      	b.n	800bd92 <_calloc_r+0x16>

0800bda8 <malloc>:
 800bda8:	4b02      	ldr	r3, [pc, #8]	; (800bdb4 <malloc+0xc>)
 800bdaa:	4601      	mov	r1, r0
 800bdac:	6818      	ldr	r0, [r3, #0]
 800bdae:	f7ff b9b1 	b.w	800b114 <_malloc_r>
 800bdb2:	bf00      	nop
 800bdb4:	200001e4 	.word	0x200001e4

0800bdb8 <fiprintf>:
 800bdb8:	b40e      	push	{r1, r2, r3}
 800bdba:	b503      	push	{r0, r1, lr}
 800bdbc:	4601      	mov	r1, r0
 800bdbe:	ab03      	add	r3, sp, #12
 800bdc0:	4805      	ldr	r0, [pc, #20]	; (800bdd8 <fiprintf+0x20>)
 800bdc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc6:	6800      	ldr	r0, [r0, #0]
 800bdc8:	9301      	str	r3, [sp, #4]
 800bdca:	f000 f837 	bl	800be3c <_vfiprintf_r>
 800bdce:	b002      	add	sp, #8
 800bdd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdd4:	b003      	add	sp, #12
 800bdd6:	4770      	bx	lr
 800bdd8:	200001e4 	.word	0x200001e4

0800bddc <abort>:
 800bddc:	b508      	push	{r3, lr}
 800bdde:	2006      	movs	r0, #6
 800bde0:	f000 fb94 	bl	800c50c <raise>
 800bde4:	2001      	movs	r0, #1
 800bde6:	f7f6 fbb5 	bl	8002554 <_exit>

0800bdea <__sfputc_r>:
 800bdea:	6893      	ldr	r3, [r2, #8]
 800bdec:	3b01      	subs	r3, #1
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	b410      	push	{r4}
 800bdf2:	6093      	str	r3, [r2, #8]
 800bdf4:	da08      	bge.n	800be08 <__sfputc_r+0x1e>
 800bdf6:	6994      	ldr	r4, [r2, #24]
 800bdf8:	42a3      	cmp	r3, r4
 800bdfa:	db01      	blt.n	800be00 <__sfputc_r+0x16>
 800bdfc:	290a      	cmp	r1, #10
 800bdfe:	d103      	bne.n	800be08 <__sfputc_r+0x1e>
 800be00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be04:	f000 bac4 	b.w	800c390 <__swbuf_r>
 800be08:	6813      	ldr	r3, [r2, #0]
 800be0a:	1c58      	adds	r0, r3, #1
 800be0c:	6010      	str	r0, [r2, #0]
 800be0e:	7019      	strb	r1, [r3, #0]
 800be10:	4608      	mov	r0, r1
 800be12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <__sfputs_r>:
 800be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1a:	4606      	mov	r6, r0
 800be1c:	460f      	mov	r7, r1
 800be1e:	4614      	mov	r4, r2
 800be20:	18d5      	adds	r5, r2, r3
 800be22:	42ac      	cmp	r4, r5
 800be24:	d101      	bne.n	800be2a <__sfputs_r+0x12>
 800be26:	2000      	movs	r0, #0
 800be28:	e007      	b.n	800be3a <__sfputs_r+0x22>
 800be2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be2e:	463a      	mov	r2, r7
 800be30:	4630      	mov	r0, r6
 800be32:	f7ff ffda 	bl	800bdea <__sfputc_r>
 800be36:	1c43      	adds	r3, r0, #1
 800be38:	d1f3      	bne.n	800be22 <__sfputs_r+0xa>
 800be3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be3c <_vfiprintf_r>:
 800be3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be40:	460d      	mov	r5, r1
 800be42:	b09d      	sub	sp, #116	; 0x74
 800be44:	4614      	mov	r4, r2
 800be46:	4698      	mov	r8, r3
 800be48:	4606      	mov	r6, r0
 800be4a:	b118      	cbz	r0, 800be54 <_vfiprintf_r+0x18>
 800be4c:	6a03      	ldr	r3, [r0, #32]
 800be4e:	b90b      	cbnz	r3, 800be54 <_vfiprintf_r+0x18>
 800be50:	f7fe fc86 	bl	800a760 <__sinit>
 800be54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be56:	07d9      	lsls	r1, r3, #31
 800be58:	d405      	bmi.n	800be66 <_vfiprintf_r+0x2a>
 800be5a:	89ab      	ldrh	r3, [r5, #12]
 800be5c:	059a      	lsls	r2, r3, #22
 800be5e:	d402      	bmi.n	800be66 <_vfiprintf_r+0x2a>
 800be60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be62:	f7fe fd82 	bl	800a96a <__retarget_lock_acquire_recursive>
 800be66:	89ab      	ldrh	r3, [r5, #12]
 800be68:	071b      	lsls	r3, r3, #28
 800be6a:	d501      	bpl.n	800be70 <_vfiprintf_r+0x34>
 800be6c:	692b      	ldr	r3, [r5, #16]
 800be6e:	b99b      	cbnz	r3, 800be98 <_vfiprintf_r+0x5c>
 800be70:	4629      	mov	r1, r5
 800be72:	4630      	mov	r0, r6
 800be74:	f000 faca 	bl	800c40c <__swsetup_r>
 800be78:	b170      	cbz	r0, 800be98 <_vfiprintf_r+0x5c>
 800be7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be7c:	07dc      	lsls	r4, r3, #31
 800be7e:	d504      	bpl.n	800be8a <_vfiprintf_r+0x4e>
 800be80:	f04f 30ff 	mov.w	r0, #4294967295
 800be84:	b01d      	add	sp, #116	; 0x74
 800be86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8a:	89ab      	ldrh	r3, [r5, #12]
 800be8c:	0598      	lsls	r0, r3, #22
 800be8e:	d4f7      	bmi.n	800be80 <_vfiprintf_r+0x44>
 800be90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be92:	f7fe fd6b 	bl	800a96c <__retarget_lock_release_recursive>
 800be96:	e7f3      	b.n	800be80 <_vfiprintf_r+0x44>
 800be98:	2300      	movs	r3, #0
 800be9a:	9309      	str	r3, [sp, #36]	; 0x24
 800be9c:	2320      	movs	r3, #32
 800be9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bea2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bea6:	2330      	movs	r3, #48	; 0x30
 800bea8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c05c <_vfiprintf_r+0x220>
 800beac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800beb0:	f04f 0901 	mov.w	r9, #1
 800beb4:	4623      	mov	r3, r4
 800beb6:	469a      	mov	sl, r3
 800beb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bebc:	b10a      	cbz	r2, 800bec2 <_vfiprintf_r+0x86>
 800bebe:	2a25      	cmp	r2, #37	; 0x25
 800bec0:	d1f9      	bne.n	800beb6 <_vfiprintf_r+0x7a>
 800bec2:	ebba 0b04 	subs.w	fp, sl, r4
 800bec6:	d00b      	beq.n	800bee0 <_vfiprintf_r+0xa4>
 800bec8:	465b      	mov	r3, fp
 800beca:	4622      	mov	r2, r4
 800becc:	4629      	mov	r1, r5
 800bece:	4630      	mov	r0, r6
 800bed0:	f7ff ffa2 	bl	800be18 <__sfputs_r>
 800bed4:	3001      	adds	r0, #1
 800bed6:	f000 80a9 	beq.w	800c02c <_vfiprintf_r+0x1f0>
 800beda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bedc:	445a      	add	r2, fp
 800bede:	9209      	str	r2, [sp, #36]	; 0x24
 800bee0:	f89a 3000 	ldrb.w	r3, [sl]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f000 80a1 	beq.w	800c02c <_vfiprintf_r+0x1f0>
 800beea:	2300      	movs	r3, #0
 800beec:	f04f 32ff 	mov.w	r2, #4294967295
 800bef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bef4:	f10a 0a01 	add.w	sl, sl, #1
 800bef8:	9304      	str	r3, [sp, #16]
 800befa:	9307      	str	r3, [sp, #28]
 800befc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf00:	931a      	str	r3, [sp, #104]	; 0x68
 800bf02:	4654      	mov	r4, sl
 800bf04:	2205      	movs	r2, #5
 800bf06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf0a:	4854      	ldr	r0, [pc, #336]	; (800c05c <_vfiprintf_r+0x220>)
 800bf0c:	f7f4 f960 	bl	80001d0 <memchr>
 800bf10:	9a04      	ldr	r2, [sp, #16]
 800bf12:	b9d8      	cbnz	r0, 800bf4c <_vfiprintf_r+0x110>
 800bf14:	06d1      	lsls	r1, r2, #27
 800bf16:	bf44      	itt	mi
 800bf18:	2320      	movmi	r3, #32
 800bf1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf1e:	0713      	lsls	r3, r2, #28
 800bf20:	bf44      	itt	mi
 800bf22:	232b      	movmi	r3, #43	; 0x2b
 800bf24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf28:	f89a 3000 	ldrb.w	r3, [sl]
 800bf2c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf2e:	d015      	beq.n	800bf5c <_vfiprintf_r+0x120>
 800bf30:	9a07      	ldr	r2, [sp, #28]
 800bf32:	4654      	mov	r4, sl
 800bf34:	2000      	movs	r0, #0
 800bf36:	f04f 0c0a 	mov.w	ip, #10
 800bf3a:	4621      	mov	r1, r4
 800bf3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf40:	3b30      	subs	r3, #48	; 0x30
 800bf42:	2b09      	cmp	r3, #9
 800bf44:	d94d      	bls.n	800bfe2 <_vfiprintf_r+0x1a6>
 800bf46:	b1b0      	cbz	r0, 800bf76 <_vfiprintf_r+0x13a>
 800bf48:	9207      	str	r2, [sp, #28]
 800bf4a:	e014      	b.n	800bf76 <_vfiprintf_r+0x13a>
 800bf4c:	eba0 0308 	sub.w	r3, r0, r8
 800bf50:	fa09 f303 	lsl.w	r3, r9, r3
 800bf54:	4313      	orrs	r3, r2
 800bf56:	9304      	str	r3, [sp, #16]
 800bf58:	46a2      	mov	sl, r4
 800bf5a:	e7d2      	b.n	800bf02 <_vfiprintf_r+0xc6>
 800bf5c:	9b03      	ldr	r3, [sp, #12]
 800bf5e:	1d19      	adds	r1, r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	9103      	str	r1, [sp, #12]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	bfbb      	ittet	lt
 800bf68:	425b      	neglt	r3, r3
 800bf6a:	f042 0202 	orrlt.w	r2, r2, #2
 800bf6e:	9307      	strge	r3, [sp, #28]
 800bf70:	9307      	strlt	r3, [sp, #28]
 800bf72:	bfb8      	it	lt
 800bf74:	9204      	strlt	r2, [sp, #16]
 800bf76:	7823      	ldrb	r3, [r4, #0]
 800bf78:	2b2e      	cmp	r3, #46	; 0x2e
 800bf7a:	d10c      	bne.n	800bf96 <_vfiprintf_r+0x15a>
 800bf7c:	7863      	ldrb	r3, [r4, #1]
 800bf7e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf80:	d134      	bne.n	800bfec <_vfiprintf_r+0x1b0>
 800bf82:	9b03      	ldr	r3, [sp, #12]
 800bf84:	1d1a      	adds	r2, r3, #4
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	9203      	str	r2, [sp, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	bfb8      	it	lt
 800bf8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf92:	3402      	adds	r4, #2
 800bf94:	9305      	str	r3, [sp, #20]
 800bf96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c06c <_vfiprintf_r+0x230>
 800bf9a:	7821      	ldrb	r1, [r4, #0]
 800bf9c:	2203      	movs	r2, #3
 800bf9e:	4650      	mov	r0, sl
 800bfa0:	f7f4 f916 	bl	80001d0 <memchr>
 800bfa4:	b138      	cbz	r0, 800bfb6 <_vfiprintf_r+0x17a>
 800bfa6:	9b04      	ldr	r3, [sp, #16]
 800bfa8:	eba0 000a 	sub.w	r0, r0, sl
 800bfac:	2240      	movs	r2, #64	; 0x40
 800bfae:	4082      	lsls	r2, r0
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	3401      	adds	r4, #1
 800bfb4:	9304      	str	r3, [sp, #16]
 800bfb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfba:	4829      	ldr	r0, [pc, #164]	; (800c060 <_vfiprintf_r+0x224>)
 800bfbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfc0:	2206      	movs	r2, #6
 800bfc2:	f7f4 f905 	bl	80001d0 <memchr>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d03f      	beq.n	800c04a <_vfiprintf_r+0x20e>
 800bfca:	4b26      	ldr	r3, [pc, #152]	; (800c064 <_vfiprintf_r+0x228>)
 800bfcc:	bb1b      	cbnz	r3, 800c016 <_vfiprintf_r+0x1da>
 800bfce:	9b03      	ldr	r3, [sp, #12]
 800bfd0:	3307      	adds	r3, #7
 800bfd2:	f023 0307 	bic.w	r3, r3, #7
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	9303      	str	r3, [sp, #12]
 800bfda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfdc:	443b      	add	r3, r7
 800bfde:	9309      	str	r3, [sp, #36]	; 0x24
 800bfe0:	e768      	b.n	800beb4 <_vfiprintf_r+0x78>
 800bfe2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfe6:	460c      	mov	r4, r1
 800bfe8:	2001      	movs	r0, #1
 800bfea:	e7a6      	b.n	800bf3a <_vfiprintf_r+0xfe>
 800bfec:	2300      	movs	r3, #0
 800bfee:	3401      	adds	r4, #1
 800bff0:	9305      	str	r3, [sp, #20]
 800bff2:	4619      	mov	r1, r3
 800bff4:	f04f 0c0a 	mov.w	ip, #10
 800bff8:	4620      	mov	r0, r4
 800bffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bffe:	3a30      	subs	r2, #48	; 0x30
 800c000:	2a09      	cmp	r2, #9
 800c002:	d903      	bls.n	800c00c <_vfiprintf_r+0x1d0>
 800c004:	2b00      	cmp	r3, #0
 800c006:	d0c6      	beq.n	800bf96 <_vfiprintf_r+0x15a>
 800c008:	9105      	str	r1, [sp, #20]
 800c00a:	e7c4      	b.n	800bf96 <_vfiprintf_r+0x15a>
 800c00c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c010:	4604      	mov	r4, r0
 800c012:	2301      	movs	r3, #1
 800c014:	e7f0      	b.n	800bff8 <_vfiprintf_r+0x1bc>
 800c016:	ab03      	add	r3, sp, #12
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	462a      	mov	r2, r5
 800c01c:	4b12      	ldr	r3, [pc, #72]	; (800c068 <_vfiprintf_r+0x22c>)
 800c01e:	a904      	add	r1, sp, #16
 800c020:	4630      	mov	r0, r6
 800c022:	f3af 8000 	nop.w
 800c026:	4607      	mov	r7, r0
 800c028:	1c78      	adds	r0, r7, #1
 800c02a:	d1d6      	bne.n	800bfda <_vfiprintf_r+0x19e>
 800c02c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c02e:	07d9      	lsls	r1, r3, #31
 800c030:	d405      	bmi.n	800c03e <_vfiprintf_r+0x202>
 800c032:	89ab      	ldrh	r3, [r5, #12]
 800c034:	059a      	lsls	r2, r3, #22
 800c036:	d402      	bmi.n	800c03e <_vfiprintf_r+0x202>
 800c038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c03a:	f7fe fc97 	bl	800a96c <__retarget_lock_release_recursive>
 800c03e:	89ab      	ldrh	r3, [r5, #12]
 800c040:	065b      	lsls	r3, r3, #25
 800c042:	f53f af1d 	bmi.w	800be80 <_vfiprintf_r+0x44>
 800c046:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c048:	e71c      	b.n	800be84 <_vfiprintf_r+0x48>
 800c04a:	ab03      	add	r3, sp, #12
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	462a      	mov	r2, r5
 800c050:	4b05      	ldr	r3, [pc, #20]	; (800c068 <_vfiprintf_r+0x22c>)
 800c052:	a904      	add	r1, sp, #16
 800c054:	4630      	mov	r0, r6
 800c056:	f000 f879 	bl	800c14c <_printf_i>
 800c05a:	e7e4      	b.n	800c026 <_vfiprintf_r+0x1ea>
 800c05c:	0800cc91 	.word	0x0800cc91
 800c060:	0800cc9b 	.word	0x0800cc9b
 800c064:	00000000 	.word	0x00000000
 800c068:	0800be19 	.word	0x0800be19
 800c06c:	0800cc97 	.word	0x0800cc97

0800c070 <_printf_common>:
 800c070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c074:	4616      	mov	r6, r2
 800c076:	4699      	mov	r9, r3
 800c078:	688a      	ldr	r2, [r1, #8]
 800c07a:	690b      	ldr	r3, [r1, #16]
 800c07c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c080:	4293      	cmp	r3, r2
 800c082:	bfb8      	it	lt
 800c084:	4613      	movlt	r3, r2
 800c086:	6033      	str	r3, [r6, #0]
 800c088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c08c:	4607      	mov	r7, r0
 800c08e:	460c      	mov	r4, r1
 800c090:	b10a      	cbz	r2, 800c096 <_printf_common+0x26>
 800c092:	3301      	adds	r3, #1
 800c094:	6033      	str	r3, [r6, #0]
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	0699      	lsls	r1, r3, #26
 800c09a:	bf42      	ittt	mi
 800c09c:	6833      	ldrmi	r3, [r6, #0]
 800c09e:	3302      	addmi	r3, #2
 800c0a0:	6033      	strmi	r3, [r6, #0]
 800c0a2:	6825      	ldr	r5, [r4, #0]
 800c0a4:	f015 0506 	ands.w	r5, r5, #6
 800c0a8:	d106      	bne.n	800c0b8 <_printf_common+0x48>
 800c0aa:	f104 0a19 	add.w	sl, r4, #25
 800c0ae:	68e3      	ldr	r3, [r4, #12]
 800c0b0:	6832      	ldr	r2, [r6, #0]
 800c0b2:	1a9b      	subs	r3, r3, r2
 800c0b4:	42ab      	cmp	r3, r5
 800c0b6:	dc26      	bgt.n	800c106 <_printf_common+0x96>
 800c0b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0bc:	1e13      	subs	r3, r2, #0
 800c0be:	6822      	ldr	r2, [r4, #0]
 800c0c0:	bf18      	it	ne
 800c0c2:	2301      	movne	r3, #1
 800c0c4:	0692      	lsls	r2, r2, #26
 800c0c6:	d42b      	bmi.n	800c120 <_printf_common+0xb0>
 800c0c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	4638      	mov	r0, r7
 800c0d0:	47c0      	blx	r8
 800c0d2:	3001      	adds	r0, #1
 800c0d4:	d01e      	beq.n	800c114 <_printf_common+0xa4>
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	6922      	ldr	r2, [r4, #16]
 800c0da:	f003 0306 	and.w	r3, r3, #6
 800c0de:	2b04      	cmp	r3, #4
 800c0e0:	bf02      	ittt	eq
 800c0e2:	68e5      	ldreq	r5, [r4, #12]
 800c0e4:	6833      	ldreq	r3, [r6, #0]
 800c0e6:	1aed      	subeq	r5, r5, r3
 800c0e8:	68a3      	ldr	r3, [r4, #8]
 800c0ea:	bf0c      	ite	eq
 800c0ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0f0:	2500      	movne	r5, #0
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	bfc4      	itt	gt
 800c0f6:	1a9b      	subgt	r3, r3, r2
 800c0f8:	18ed      	addgt	r5, r5, r3
 800c0fa:	2600      	movs	r6, #0
 800c0fc:	341a      	adds	r4, #26
 800c0fe:	42b5      	cmp	r5, r6
 800c100:	d11a      	bne.n	800c138 <_printf_common+0xc8>
 800c102:	2000      	movs	r0, #0
 800c104:	e008      	b.n	800c118 <_printf_common+0xa8>
 800c106:	2301      	movs	r3, #1
 800c108:	4652      	mov	r2, sl
 800c10a:	4649      	mov	r1, r9
 800c10c:	4638      	mov	r0, r7
 800c10e:	47c0      	blx	r8
 800c110:	3001      	adds	r0, #1
 800c112:	d103      	bne.n	800c11c <_printf_common+0xac>
 800c114:	f04f 30ff 	mov.w	r0, #4294967295
 800c118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c11c:	3501      	adds	r5, #1
 800c11e:	e7c6      	b.n	800c0ae <_printf_common+0x3e>
 800c120:	18e1      	adds	r1, r4, r3
 800c122:	1c5a      	adds	r2, r3, #1
 800c124:	2030      	movs	r0, #48	; 0x30
 800c126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c12a:	4422      	add	r2, r4
 800c12c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c134:	3302      	adds	r3, #2
 800c136:	e7c7      	b.n	800c0c8 <_printf_common+0x58>
 800c138:	2301      	movs	r3, #1
 800c13a:	4622      	mov	r2, r4
 800c13c:	4649      	mov	r1, r9
 800c13e:	4638      	mov	r0, r7
 800c140:	47c0      	blx	r8
 800c142:	3001      	adds	r0, #1
 800c144:	d0e6      	beq.n	800c114 <_printf_common+0xa4>
 800c146:	3601      	adds	r6, #1
 800c148:	e7d9      	b.n	800c0fe <_printf_common+0x8e>
	...

0800c14c <_printf_i>:
 800c14c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c150:	7e0f      	ldrb	r7, [r1, #24]
 800c152:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c154:	2f78      	cmp	r7, #120	; 0x78
 800c156:	4691      	mov	r9, r2
 800c158:	4680      	mov	r8, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	469a      	mov	sl, r3
 800c15e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c162:	d807      	bhi.n	800c174 <_printf_i+0x28>
 800c164:	2f62      	cmp	r7, #98	; 0x62
 800c166:	d80a      	bhi.n	800c17e <_printf_i+0x32>
 800c168:	2f00      	cmp	r7, #0
 800c16a:	f000 80d4 	beq.w	800c316 <_printf_i+0x1ca>
 800c16e:	2f58      	cmp	r7, #88	; 0x58
 800c170:	f000 80c0 	beq.w	800c2f4 <_printf_i+0x1a8>
 800c174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c17c:	e03a      	b.n	800c1f4 <_printf_i+0xa8>
 800c17e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c182:	2b15      	cmp	r3, #21
 800c184:	d8f6      	bhi.n	800c174 <_printf_i+0x28>
 800c186:	a101      	add	r1, pc, #4	; (adr r1, 800c18c <_printf_i+0x40>)
 800c188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c18c:	0800c1e5 	.word	0x0800c1e5
 800c190:	0800c1f9 	.word	0x0800c1f9
 800c194:	0800c175 	.word	0x0800c175
 800c198:	0800c175 	.word	0x0800c175
 800c19c:	0800c175 	.word	0x0800c175
 800c1a0:	0800c175 	.word	0x0800c175
 800c1a4:	0800c1f9 	.word	0x0800c1f9
 800c1a8:	0800c175 	.word	0x0800c175
 800c1ac:	0800c175 	.word	0x0800c175
 800c1b0:	0800c175 	.word	0x0800c175
 800c1b4:	0800c175 	.word	0x0800c175
 800c1b8:	0800c2fd 	.word	0x0800c2fd
 800c1bc:	0800c225 	.word	0x0800c225
 800c1c0:	0800c2b7 	.word	0x0800c2b7
 800c1c4:	0800c175 	.word	0x0800c175
 800c1c8:	0800c175 	.word	0x0800c175
 800c1cc:	0800c31f 	.word	0x0800c31f
 800c1d0:	0800c175 	.word	0x0800c175
 800c1d4:	0800c225 	.word	0x0800c225
 800c1d8:	0800c175 	.word	0x0800c175
 800c1dc:	0800c175 	.word	0x0800c175
 800c1e0:	0800c2bf 	.word	0x0800c2bf
 800c1e4:	682b      	ldr	r3, [r5, #0]
 800c1e6:	1d1a      	adds	r2, r3, #4
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	602a      	str	r2, [r5, #0]
 800c1ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e09f      	b.n	800c338 <_printf_i+0x1ec>
 800c1f8:	6820      	ldr	r0, [r4, #0]
 800c1fa:	682b      	ldr	r3, [r5, #0]
 800c1fc:	0607      	lsls	r7, r0, #24
 800c1fe:	f103 0104 	add.w	r1, r3, #4
 800c202:	6029      	str	r1, [r5, #0]
 800c204:	d501      	bpl.n	800c20a <_printf_i+0xbe>
 800c206:	681e      	ldr	r6, [r3, #0]
 800c208:	e003      	b.n	800c212 <_printf_i+0xc6>
 800c20a:	0646      	lsls	r6, r0, #25
 800c20c:	d5fb      	bpl.n	800c206 <_printf_i+0xba>
 800c20e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c212:	2e00      	cmp	r6, #0
 800c214:	da03      	bge.n	800c21e <_printf_i+0xd2>
 800c216:	232d      	movs	r3, #45	; 0x2d
 800c218:	4276      	negs	r6, r6
 800c21a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c21e:	485a      	ldr	r0, [pc, #360]	; (800c388 <_printf_i+0x23c>)
 800c220:	230a      	movs	r3, #10
 800c222:	e012      	b.n	800c24a <_printf_i+0xfe>
 800c224:	682b      	ldr	r3, [r5, #0]
 800c226:	6820      	ldr	r0, [r4, #0]
 800c228:	1d19      	adds	r1, r3, #4
 800c22a:	6029      	str	r1, [r5, #0]
 800c22c:	0605      	lsls	r5, r0, #24
 800c22e:	d501      	bpl.n	800c234 <_printf_i+0xe8>
 800c230:	681e      	ldr	r6, [r3, #0]
 800c232:	e002      	b.n	800c23a <_printf_i+0xee>
 800c234:	0641      	lsls	r1, r0, #25
 800c236:	d5fb      	bpl.n	800c230 <_printf_i+0xe4>
 800c238:	881e      	ldrh	r6, [r3, #0]
 800c23a:	4853      	ldr	r0, [pc, #332]	; (800c388 <_printf_i+0x23c>)
 800c23c:	2f6f      	cmp	r7, #111	; 0x6f
 800c23e:	bf0c      	ite	eq
 800c240:	2308      	moveq	r3, #8
 800c242:	230a      	movne	r3, #10
 800c244:	2100      	movs	r1, #0
 800c246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c24a:	6865      	ldr	r5, [r4, #4]
 800c24c:	60a5      	str	r5, [r4, #8]
 800c24e:	2d00      	cmp	r5, #0
 800c250:	bfa2      	ittt	ge
 800c252:	6821      	ldrge	r1, [r4, #0]
 800c254:	f021 0104 	bicge.w	r1, r1, #4
 800c258:	6021      	strge	r1, [r4, #0]
 800c25a:	b90e      	cbnz	r6, 800c260 <_printf_i+0x114>
 800c25c:	2d00      	cmp	r5, #0
 800c25e:	d04b      	beq.n	800c2f8 <_printf_i+0x1ac>
 800c260:	4615      	mov	r5, r2
 800c262:	fbb6 f1f3 	udiv	r1, r6, r3
 800c266:	fb03 6711 	mls	r7, r3, r1, r6
 800c26a:	5dc7      	ldrb	r7, [r0, r7]
 800c26c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c270:	4637      	mov	r7, r6
 800c272:	42bb      	cmp	r3, r7
 800c274:	460e      	mov	r6, r1
 800c276:	d9f4      	bls.n	800c262 <_printf_i+0x116>
 800c278:	2b08      	cmp	r3, #8
 800c27a:	d10b      	bne.n	800c294 <_printf_i+0x148>
 800c27c:	6823      	ldr	r3, [r4, #0]
 800c27e:	07de      	lsls	r6, r3, #31
 800c280:	d508      	bpl.n	800c294 <_printf_i+0x148>
 800c282:	6923      	ldr	r3, [r4, #16]
 800c284:	6861      	ldr	r1, [r4, #4]
 800c286:	4299      	cmp	r1, r3
 800c288:	bfde      	ittt	le
 800c28a:	2330      	movle	r3, #48	; 0x30
 800c28c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c290:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c294:	1b52      	subs	r2, r2, r5
 800c296:	6122      	str	r2, [r4, #16]
 800c298:	f8cd a000 	str.w	sl, [sp]
 800c29c:	464b      	mov	r3, r9
 800c29e:	aa03      	add	r2, sp, #12
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4640      	mov	r0, r8
 800c2a4:	f7ff fee4 	bl	800c070 <_printf_common>
 800c2a8:	3001      	adds	r0, #1
 800c2aa:	d14a      	bne.n	800c342 <_printf_i+0x1f6>
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b0:	b004      	add	sp, #16
 800c2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b6:	6823      	ldr	r3, [r4, #0]
 800c2b8:	f043 0320 	orr.w	r3, r3, #32
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	4833      	ldr	r0, [pc, #204]	; (800c38c <_printf_i+0x240>)
 800c2c0:	2778      	movs	r7, #120	; 0x78
 800c2c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c2c6:	6823      	ldr	r3, [r4, #0]
 800c2c8:	6829      	ldr	r1, [r5, #0]
 800c2ca:	061f      	lsls	r7, r3, #24
 800c2cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2d0:	d402      	bmi.n	800c2d8 <_printf_i+0x18c>
 800c2d2:	065f      	lsls	r7, r3, #25
 800c2d4:	bf48      	it	mi
 800c2d6:	b2b6      	uxthmi	r6, r6
 800c2d8:	07df      	lsls	r7, r3, #31
 800c2da:	bf48      	it	mi
 800c2dc:	f043 0320 	orrmi.w	r3, r3, #32
 800c2e0:	6029      	str	r1, [r5, #0]
 800c2e2:	bf48      	it	mi
 800c2e4:	6023      	strmi	r3, [r4, #0]
 800c2e6:	b91e      	cbnz	r6, 800c2f0 <_printf_i+0x1a4>
 800c2e8:	6823      	ldr	r3, [r4, #0]
 800c2ea:	f023 0320 	bic.w	r3, r3, #32
 800c2ee:	6023      	str	r3, [r4, #0]
 800c2f0:	2310      	movs	r3, #16
 800c2f2:	e7a7      	b.n	800c244 <_printf_i+0xf8>
 800c2f4:	4824      	ldr	r0, [pc, #144]	; (800c388 <_printf_i+0x23c>)
 800c2f6:	e7e4      	b.n	800c2c2 <_printf_i+0x176>
 800c2f8:	4615      	mov	r5, r2
 800c2fa:	e7bd      	b.n	800c278 <_printf_i+0x12c>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	6826      	ldr	r6, [r4, #0]
 800c300:	6961      	ldr	r1, [r4, #20]
 800c302:	1d18      	adds	r0, r3, #4
 800c304:	6028      	str	r0, [r5, #0]
 800c306:	0635      	lsls	r5, r6, #24
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	d501      	bpl.n	800c310 <_printf_i+0x1c4>
 800c30c:	6019      	str	r1, [r3, #0]
 800c30e:	e002      	b.n	800c316 <_printf_i+0x1ca>
 800c310:	0670      	lsls	r0, r6, #25
 800c312:	d5fb      	bpl.n	800c30c <_printf_i+0x1c0>
 800c314:	8019      	strh	r1, [r3, #0]
 800c316:	2300      	movs	r3, #0
 800c318:	6123      	str	r3, [r4, #16]
 800c31a:	4615      	mov	r5, r2
 800c31c:	e7bc      	b.n	800c298 <_printf_i+0x14c>
 800c31e:	682b      	ldr	r3, [r5, #0]
 800c320:	1d1a      	adds	r2, r3, #4
 800c322:	602a      	str	r2, [r5, #0]
 800c324:	681d      	ldr	r5, [r3, #0]
 800c326:	6862      	ldr	r2, [r4, #4]
 800c328:	2100      	movs	r1, #0
 800c32a:	4628      	mov	r0, r5
 800c32c:	f7f3 ff50 	bl	80001d0 <memchr>
 800c330:	b108      	cbz	r0, 800c336 <_printf_i+0x1ea>
 800c332:	1b40      	subs	r0, r0, r5
 800c334:	6060      	str	r0, [r4, #4]
 800c336:	6863      	ldr	r3, [r4, #4]
 800c338:	6123      	str	r3, [r4, #16]
 800c33a:	2300      	movs	r3, #0
 800c33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c340:	e7aa      	b.n	800c298 <_printf_i+0x14c>
 800c342:	6923      	ldr	r3, [r4, #16]
 800c344:	462a      	mov	r2, r5
 800c346:	4649      	mov	r1, r9
 800c348:	4640      	mov	r0, r8
 800c34a:	47d0      	blx	sl
 800c34c:	3001      	adds	r0, #1
 800c34e:	d0ad      	beq.n	800c2ac <_printf_i+0x160>
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	079b      	lsls	r3, r3, #30
 800c354:	d413      	bmi.n	800c37e <_printf_i+0x232>
 800c356:	68e0      	ldr	r0, [r4, #12]
 800c358:	9b03      	ldr	r3, [sp, #12]
 800c35a:	4298      	cmp	r0, r3
 800c35c:	bfb8      	it	lt
 800c35e:	4618      	movlt	r0, r3
 800c360:	e7a6      	b.n	800c2b0 <_printf_i+0x164>
 800c362:	2301      	movs	r3, #1
 800c364:	4632      	mov	r2, r6
 800c366:	4649      	mov	r1, r9
 800c368:	4640      	mov	r0, r8
 800c36a:	47d0      	blx	sl
 800c36c:	3001      	adds	r0, #1
 800c36e:	d09d      	beq.n	800c2ac <_printf_i+0x160>
 800c370:	3501      	adds	r5, #1
 800c372:	68e3      	ldr	r3, [r4, #12]
 800c374:	9903      	ldr	r1, [sp, #12]
 800c376:	1a5b      	subs	r3, r3, r1
 800c378:	42ab      	cmp	r3, r5
 800c37a:	dcf2      	bgt.n	800c362 <_printf_i+0x216>
 800c37c:	e7eb      	b.n	800c356 <_printf_i+0x20a>
 800c37e:	2500      	movs	r5, #0
 800c380:	f104 0619 	add.w	r6, r4, #25
 800c384:	e7f5      	b.n	800c372 <_printf_i+0x226>
 800c386:	bf00      	nop
 800c388:	0800cca2 	.word	0x0800cca2
 800c38c:	0800ccb3 	.word	0x0800ccb3

0800c390 <__swbuf_r>:
 800c390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c392:	460e      	mov	r6, r1
 800c394:	4614      	mov	r4, r2
 800c396:	4605      	mov	r5, r0
 800c398:	b118      	cbz	r0, 800c3a2 <__swbuf_r+0x12>
 800c39a:	6a03      	ldr	r3, [r0, #32]
 800c39c:	b90b      	cbnz	r3, 800c3a2 <__swbuf_r+0x12>
 800c39e:	f7fe f9df 	bl	800a760 <__sinit>
 800c3a2:	69a3      	ldr	r3, [r4, #24]
 800c3a4:	60a3      	str	r3, [r4, #8]
 800c3a6:	89a3      	ldrh	r3, [r4, #12]
 800c3a8:	071a      	lsls	r2, r3, #28
 800c3aa:	d525      	bpl.n	800c3f8 <__swbuf_r+0x68>
 800c3ac:	6923      	ldr	r3, [r4, #16]
 800c3ae:	b31b      	cbz	r3, 800c3f8 <__swbuf_r+0x68>
 800c3b0:	6823      	ldr	r3, [r4, #0]
 800c3b2:	6922      	ldr	r2, [r4, #16]
 800c3b4:	1a98      	subs	r0, r3, r2
 800c3b6:	6963      	ldr	r3, [r4, #20]
 800c3b8:	b2f6      	uxtb	r6, r6
 800c3ba:	4283      	cmp	r3, r0
 800c3bc:	4637      	mov	r7, r6
 800c3be:	dc04      	bgt.n	800c3ca <__swbuf_r+0x3a>
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	f7ff fc84 	bl	800bcd0 <_fflush_r>
 800c3c8:	b9e0      	cbnz	r0, 800c404 <__swbuf_r+0x74>
 800c3ca:	68a3      	ldr	r3, [r4, #8]
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	60a3      	str	r3, [r4, #8]
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	1c5a      	adds	r2, r3, #1
 800c3d4:	6022      	str	r2, [r4, #0]
 800c3d6:	701e      	strb	r6, [r3, #0]
 800c3d8:	6962      	ldr	r2, [r4, #20]
 800c3da:	1c43      	adds	r3, r0, #1
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d004      	beq.n	800c3ea <__swbuf_r+0x5a>
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	07db      	lsls	r3, r3, #31
 800c3e4:	d506      	bpl.n	800c3f4 <__swbuf_r+0x64>
 800c3e6:	2e0a      	cmp	r6, #10
 800c3e8:	d104      	bne.n	800c3f4 <__swbuf_r+0x64>
 800c3ea:	4621      	mov	r1, r4
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	f7ff fc6f 	bl	800bcd0 <_fflush_r>
 800c3f2:	b938      	cbnz	r0, 800c404 <__swbuf_r+0x74>
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	f000 f806 	bl	800c40c <__swsetup_r>
 800c400:	2800      	cmp	r0, #0
 800c402:	d0d5      	beq.n	800c3b0 <__swbuf_r+0x20>
 800c404:	f04f 37ff 	mov.w	r7, #4294967295
 800c408:	e7f4      	b.n	800c3f4 <__swbuf_r+0x64>
	...

0800c40c <__swsetup_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4b2a      	ldr	r3, [pc, #168]	; (800c4b8 <__swsetup_r+0xac>)
 800c410:	4605      	mov	r5, r0
 800c412:	6818      	ldr	r0, [r3, #0]
 800c414:	460c      	mov	r4, r1
 800c416:	b118      	cbz	r0, 800c420 <__swsetup_r+0x14>
 800c418:	6a03      	ldr	r3, [r0, #32]
 800c41a:	b90b      	cbnz	r3, 800c420 <__swsetup_r+0x14>
 800c41c:	f7fe f9a0 	bl	800a760 <__sinit>
 800c420:	89a3      	ldrh	r3, [r4, #12]
 800c422:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c426:	0718      	lsls	r0, r3, #28
 800c428:	d422      	bmi.n	800c470 <__swsetup_r+0x64>
 800c42a:	06d9      	lsls	r1, r3, #27
 800c42c:	d407      	bmi.n	800c43e <__swsetup_r+0x32>
 800c42e:	2309      	movs	r3, #9
 800c430:	602b      	str	r3, [r5, #0]
 800c432:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c436:	81a3      	strh	r3, [r4, #12]
 800c438:	f04f 30ff 	mov.w	r0, #4294967295
 800c43c:	e034      	b.n	800c4a8 <__swsetup_r+0x9c>
 800c43e:	0758      	lsls	r0, r3, #29
 800c440:	d512      	bpl.n	800c468 <__swsetup_r+0x5c>
 800c442:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c444:	b141      	cbz	r1, 800c458 <__swsetup_r+0x4c>
 800c446:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c44a:	4299      	cmp	r1, r3
 800c44c:	d002      	beq.n	800c454 <__swsetup_r+0x48>
 800c44e:	4628      	mov	r0, r5
 800c450:	f7fe fa9c 	bl	800a98c <_free_r>
 800c454:	2300      	movs	r3, #0
 800c456:	6363      	str	r3, [r4, #52]	; 0x34
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c45e:	81a3      	strh	r3, [r4, #12]
 800c460:	2300      	movs	r3, #0
 800c462:	6063      	str	r3, [r4, #4]
 800c464:	6923      	ldr	r3, [r4, #16]
 800c466:	6023      	str	r3, [r4, #0]
 800c468:	89a3      	ldrh	r3, [r4, #12]
 800c46a:	f043 0308 	orr.w	r3, r3, #8
 800c46e:	81a3      	strh	r3, [r4, #12]
 800c470:	6923      	ldr	r3, [r4, #16]
 800c472:	b94b      	cbnz	r3, 800c488 <__swsetup_r+0x7c>
 800c474:	89a3      	ldrh	r3, [r4, #12]
 800c476:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c47a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c47e:	d003      	beq.n	800c488 <__swsetup_r+0x7c>
 800c480:	4621      	mov	r1, r4
 800c482:	4628      	mov	r0, r5
 800c484:	f000 f884 	bl	800c590 <__smakebuf_r>
 800c488:	89a0      	ldrh	r0, [r4, #12]
 800c48a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c48e:	f010 0301 	ands.w	r3, r0, #1
 800c492:	d00a      	beq.n	800c4aa <__swsetup_r+0x9e>
 800c494:	2300      	movs	r3, #0
 800c496:	60a3      	str	r3, [r4, #8]
 800c498:	6963      	ldr	r3, [r4, #20]
 800c49a:	425b      	negs	r3, r3
 800c49c:	61a3      	str	r3, [r4, #24]
 800c49e:	6923      	ldr	r3, [r4, #16]
 800c4a0:	b943      	cbnz	r3, 800c4b4 <__swsetup_r+0xa8>
 800c4a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4a6:	d1c4      	bne.n	800c432 <__swsetup_r+0x26>
 800c4a8:	bd38      	pop	{r3, r4, r5, pc}
 800c4aa:	0781      	lsls	r1, r0, #30
 800c4ac:	bf58      	it	pl
 800c4ae:	6963      	ldrpl	r3, [r4, #20]
 800c4b0:	60a3      	str	r3, [r4, #8]
 800c4b2:	e7f4      	b.n	800c49e <__swsetup_r+0x92>
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	e7f7      	b.n	800c4a8 <__swsetup_r+0x9c>
 800c4b8:	200001e4 	.word	0x200001e4

0800c4bc <_raise_r>:
 800c4bc:	291f      	cmp	r1, #31
 800c4be:	b538      	push	{r3, r4, r5, lr}
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	460d      	mov	r5, r1
 800c4c4:	d904      	bls.n	800c4d0 <_raise_r+0x14>
 800c4c6:	2316      	movs	r3, #22
 800c4c8:	6003      	str	r3, [r0, #0]
 800c4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}
 800c4d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c4d2:	b112      	cbz	r2, 800c4da <_raise_r+0x1e>
 800c4d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4d8:	b94b      	cbnz	r3, 800c4ee <_raise_r+0x32>
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f000 f830 	bl	800c540 <_getpid_r>
 800c4e0:	462a      	mov	r2, r5
 800c4e2:	4601      	mov	r1, r0
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ea:	f000 b817 	b.w	800c51c <_kill_r>
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d00a      	beq.n	800c508 <_raise_r+0x4c>
 800c4f2:	1c59      	adds	r1, r3, #1
 800c4f4:	d103      	bne.n	800c4fe <_raise_r+0x42>
 800c4f6:	2316      	movs	r3, #22
 800c4f8:	6003      	str	r3, [r0, #0]
 800c4fa:	2001      	movs	r0, #1
 800c4fc:	e7e7      	b.n	800c4ce <_raise_r+0x12>
 800c4fe:	2400      	movs	r4, #0
 800c500:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c504:	4628      	mov	r0, r5
 800c506:	4798      	blx	r3
 800c508:	2000      	movs	r0, #0
 800c50a:	e7e0      	b.n	800c4ce <_raise_r+0x12>

0800c50c <raise>:
 800c50c:	4b02      	ldr	r3, [pc, #8]	; (800c518 <raise+0xc>)
 800c50e:	4601      	mov	r1, r0
 800c510:	6818      	ldr	r0, [r3, #0]
 800c512:	f7ff bfd3 	b.w	800c4bc <_raise_r>
 800c516:	bf00      	nop
 800c518:	200001e4 	.word	0x200001e4

0800c51c <_kill_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	4d07      	ldr	r5, [pc, #28]	; (800c53c <_kill_r+0x20>)
 800c520:	2300      	movs	r3, #0
 800c522:	4604      	mov	r4, r0
 800c524:	4608      	mov	r0, r1
 800c526:	4611      	mov	r1, r2
 800c528:	602b      	str	r3, [r5, #0]
 800c52a:	f7f6 f803 	bl	8002534 <_kill>
 800c52e:	1c43      	adds	r3, r0, #1
 800c530:	d102      	bne.n	800c538 <_kill_r+0x1c>
 800c532:	682b      	ldr	r3, [r5, #0]
 800c534:	b103      	cbz	r3, 800c538 <_kill_r+0x1c>
 800c536:	6023      	str	r3, [r4, #0]
 800c538:	bd38      	pop	{r3, r4, r5, pc}
 800c53a:	bf00      	nop
 800c53c:	200008b4 	.word	0x200008b4

0800c540 <_getpid_r>:
 800c540:	f7f5 bff0 	b.w	8002524 <_getpid>

0800c544 <__swhatbuf_r>:
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	460c      	mov	r4, r1
 800c548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c54c:	2900      	cmp	r1, #0
 800c54e:	b096      	sub	sp, #88	; 0x58
 800c550:	4615      	mov	r5, r2
 800c552:	461e      	mov	r6, r3
 800c554:	da0d      	bge.n	800c572 <__swhatbuf_r+0x2e>
 800c556:	89a3      	ldrh	r3, [r4, #12]
 800c558:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c55c:	f04f 0100 	mov.w	r1, #0
 800c560:	bf0c      	ite	eq
 800c562:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c566:	2340      	movne	r3, #64	; 0x40
 800c568:	2000      	movs	r0, #0
 800c56a:	6031      	str	r1, [r6, #0]
 800c56c:	602b      	str	r3, [r5, #0]
 800c56e:	b016      	add	sp, #88	; 0x58
 800c570:	bd70      	pop	{r4, r5, r6, pc}
 800c572:	466a      	mov	r2, sp
 800c574:	f000 f848 	bl	800c608 <_fstat_r>
 800c578:	2800      	cmp	r0, #0
 800c57a:	dbec      	blt.n	800c556 <__swhatbuf_r+0x12>
 800c57c:	9901      	ldr	r1, [sp, #4]
 800c57e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c582:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c586:	4259      	negs	r1, r3
 800c588:	4159      	adcs	r1, r3
 800c58a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c58e:	e7eb      	b.n	800c568 <__swhatbuf_r+0x24>

0800c590 <__smakebuf_r>:
 800c590:	898b      	ldrh	r3, [r1, #12]
 800c592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c594:	079d      	lsls	r5, r3, #30
 800c596:	4606      	mov	r6, r0
 800c598:	460c      	mov	r4, r1
 800c59a:	d507      	bpl.n	800c5ac <__smakebuf_r+0x1c>
 800c59c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5a0:	6023      	str	r3, [r4, #0]
 800c5a2:	6123      	str	r3, [r4, #16]
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	6163      	str	r3, [r4, #20]
 800c5a8:	b002      	add	sp, #8
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}
 800c5ac:	ab01      	add	r3, sp, #4
 800c5ae:	466a      	mov	r2, sp
 800c5b0:	f7ff ffc8 	bl	800c544 <__swhatbuf_r>
 800c5b4:	9900      	ldr	r1, [sp, #0]
 800c5b6:	4605      	mov	r5, r0
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f7fe fdab 	bl	800b114 <_malloc_r>
 800c5be:	b948      	cbnz	r0, 800c5d4 <__smakebuf_r+0x44>
 800c5c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5c4:	059a      	lsls	r2, r3, #22
 800c5c6:	d4ef      	bmi.n	800c5a8 <__smakebuf_r+0x18>
 800c5c8:	f023 0303 	bic.w	r3, r3, #3
 800c5cc:	f043 0302 	orr.w	r3, r3, #2
 800c5d0:	81a3      	strh	r3, [r4, #12]
 800c5d2:	e7e3      	b.n	800c59c <__smakebuf_r+0xc>
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	6020      	str	r0, [r4, #0]
 800c5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5dc:	81a3      	strh	r3, [r4, #12]
 800c5de:	9b00      	ldr	r3, [sp, #0]
 800c5e0:	6163      	str	r3, [r4, #20]
 800c5e2:	9b01      	ldr	r3, [sp, #4]
 800c5e4:	6120      	str	r0, [r4, #16]
 800c5e6:	b15b      	cbz	r3, 800c600 <__smakebuf_r+0x70>
 800c5e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	f000 f81d 	bl	800c62c <_isatty_r>
 800c5f2:	b128      	cbz	r0, 800c600 <__smakebuf_r+0x70>
 800c5f4:	89a3      	ldrh	r3, [r4, #12]
 800c5f6:	f023 0303 	bic.w	r3, r3, #3
 800c5fa:	f043 0301 	orr.w	r3, r3, #1
 800c5fe:	81a3      	strh	r3, [r4, #12]
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	431d      	orrs	r5, r3
 800c604:	81a5      	strh	r5, [r4, #12]
 800c606:	e7cf      	b.n	800c5a8 <__smakebuf_r+0x18>

0800c608 <_fstat_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4d07      	ldr	r5, [pc, #28]	; (800c628 <_fstat_r+0x20>)
 800c60c:	2300      	movs	r3, #0
 800c60e:	4604      	mov	r4, r0
 800c610:	4608      	mov	r0, r1
 800c612:	4611      	mov	r1, r2
 800c614:	602b      	str	r3, [r5, #0]
 800c616:	f7f5 ffec 	bl	80025f2 <_fstat>
 800c61a:	1c43      	adds	r3, r0, #1
 800c61c:	d102      	bne.n	800c624 <_fstat_r+0x1c>
 800c61e:	682b      	ldr	r3, [r5, #0]
 800c620:	b103      	cbz	r3, 800c624 <_fstat_r+0x1c>
 800c622:	6023      	str	r3, [r4, #0]
 800c624:	bd38      	pop	{r3, r4, r5, pc}
 800c626:	bf00      	nop
 800c628:	200008b4 	.word	0x200008b4

0800c62c <_isatty_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	4d06      	ldr	r5, [pc, #24]	; (800c648 <_isatty_r+0x1c>)
 800c630:	2300      	movs	r3, #0
 800c632:	4604      	mov	r4, r0
 800c634:	4608      	mov	r0, r1
 800c636:	602b      	str	r3, [r5, #0]
 800c638:	f7f5 ffeb 	bl	8002612 <_isatty>
 800c63c:	1c43      	adds	r3, r0, #1
 800c63e:	d102      	bne.n	800c646 <_isatty_r+0x1a>
 800c640:	682b      	ldr	r3, [r5, #0]
 800c642:	b103      	cbz	r3, 800c646 <_isatty_r+0x1a>
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	bd38      	pop	{r3, r4, r5, pc}
 800c648:	200008b4 	.word	0x200008b4

0800c64c <_init>:
 800c64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64e:	bf00      	nop
 800c650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c652:	bc08      	pop	{r3}
 800c654:	469e      	mov	lr, r3
 800c656:	4770      	bx	lr

0800c658 <_fini>:
 800c658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65a:	bf00      	nop
 800c65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c65e:	bc08      	pop	{r3}
 800c660:	469e      	mov	lr, r3
 800c662:	4770      	bx	lr
