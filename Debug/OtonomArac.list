
OtonomArac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  0800fd90  0800fd90  0001fd90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010664  08010664  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08010664  08010664  00020664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801066c  0801066c  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801066c  0801066c  0002066c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010674  08010674  00020674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08010678  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          00000ca0  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000e98  20000e98  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e2d8  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000047e4  00000000  00000000  0004e543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001500  00000000  00000000  00052d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001040  00000000  00000000  00054228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027bb9  00000000  00000000  00055268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e1f4  00000000  00000000  0007ce21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5d95  00000000  00000000  0009b015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006f10  00000000  00000000  00170dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00177cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd74 	.word	0x0800fd74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800fd74 	.word	0x0800fd74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9a6 	b.w	8000fdc <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff0b 	bl	8000acc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc81 	bl	80005e8 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc02 	bl	80004f4 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc78 	bl	80005e8 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff faba 	bl	8000278 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9e08      	ldr	r6, [sp, #32]
 8000d1a:	460d      	mov	r5, r1
 8000d1c:	4604      	mov	r4, r0
 8000d1e:	460f      	mov	r7, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14a      	bne.n	8000dba <__udivmoddi4+0xa6>
 8000d24:	428a      	cmp	r2, r1
 8000d26:	4694      	mov	ip, r2
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0xe2>
 8000d2a:	fab2 f382 	clz	r3, r2
 8000d2e:	b143      	cbz	r3, 8000d42 <__udivmoddi4+0x2e>
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	f1c3 0220 	rsb	r2, r3, #32
 8000d38:	409f      	lsls	r7, r3
 8000d3a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d3e:	4317      	orrs	r7, r2
 8000d40:	409c      	lsls	r4, r3
 8000d42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d46:	fa1f f58c 	uxth.w	r5, ip
 8000d4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d4e:	0c22      	lsrs	r2, r4, #16
 8000d50:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d58:	fb01 f005 	mul.w	r0, r1, r5
 8000d5c:	4290      	cmp	r0, r2
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x62>
 8000d60:	eb1c 0202 	adds.w	r2, ip, r2
 8000d64:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d68:	f080 811c 	bcs.w	8000fa4 <__udivmoddi4+0x290>
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	f240 8119 	bls.w	8000fa4 <__udivmoddi4+0x290>
 8000d72:	3902      	subs	r1, #2
 8000d74:	4462      	add	r2, ip
 8000d76:	1a12      	subs	r2, r2, r0
 8000d78:	b2a4      	uxth	r4, r4
 8000d7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d86:	fb00 f505 	mul.w	r5, r0, r5
 8000d8a:	42a5      	cmp	r5, r4
 8000d8c:	d90a      	bls.n	8000da4 <__udivmoddi4+0x90>
 8000d8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d92:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d96:	f080 8107 	bcs.w	8000fa8 <__udivmoddi4+0x294>
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	f240 8104 	bls.w	8000fa8 <__udivmoddi4+0x294>
 8000da0:	4464      	add	r4, ip
 8000da2:	3802      	subs	r0, #2
 8000da4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	2100      	movs	r1, #0
 8000dac:	b11e      	cbz	r6, 8000db6 <__udivmoddi4+0xa2>
 8000dae:	40dc      	lsrs	r4, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	e9c6 4300 	strd	r4, r3, [r6]
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0xbc>
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	f000 80ed 	beq.w	8000f9e <__udivmoddi4+0x28a>
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd0:	fab3 f183 	clz	r1, r3
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	d149      	bne.n	8000e6c <__udivmoddi4+0x158>
 8000dd8:	42ab      	cmp	r3, r5
 8000dda:	d302      	bcc.n	8000de2 <__udivmoddi4+0xce>
 8000ddc:	4282      	cmp	r2, r0
 8000dde:	f200 80f8 	bhi.w	8000fd2 <__udivmoddi4+0x2be>
 8000de2:	1a84      	subs	r4, r0, r2
 8000de4:	eb65 0203 	sbc.w	r2, r5, r3
 8000de8:	2001      	movs	r0, #1
 8000dea:	4617      	mov	r7, r2
 8000dec:	2e00      	cmp	r6, #0
 8000dee:	d0e2      	beq.n	8000db6 <__udivmoddi4+0xa2>
 8000df0:	e9c6 4700 	strd	r4, r7, [r6]
 8000df4:	e7df      	b.n	8000db6 <__udivmoddi4+0xa2>
 8000df6:	b902      	cbnz	r2, 8000dfa <__udivmoddi4+0xe6>
 8000df8:	deff      	udf	#255	; 0xff
 8000dfa:	fab2 f382 	clz	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 8090 	bne.w	8000f24 <__udivmoddi4+0x210>
 8000e04:	1a8a      	subs	r2, r1, r2
 8000e06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0a:	fa1f fe8c 	uxth.w	lr, ip
 8000e0e:	2101      	movs	r1, #1
 8000e10:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e14:	fb07 2015 	mls	r0, r7, r5, r2
 8000e18:	0c22      	lsrs	r2, r4, #16
 8000e1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e1e:	fb0e f005 	mul.w	r0, lr, r5
 8000e22:	4290      	cmp	r0, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x124>
 8000e26:	eb1c 0202 	adds.w	r2, ip, r2
 8000e2a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0x122>
 8000e30:	4290      	cmp	r0, r2
 8000e32:	f200 80cb 	bhi.w	8000fcc <__udivmoddi4+0x2b8>
 8000e36:	4645      	mov	r5, r8
 8000e38:	1a12      	subs	r2, r2, r0
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e40:	fb07 2210 	mls	r2, r7, r0, r2
 8000e44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e48:	fb0e fe00 	mul.w	lr, lr, r0
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x14e>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x14c>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	f200 80bb 	bhi.w	8000fd6 <__udivmoddi4+0x2c2>
 8000e60:	4610      	mov	r0, r2
 8000e62:	eba4 040e 	sub.w	r4, r4, lr
 8000e66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e6a:	e79f      	b.n	8000dac <__udivmoddi4+0x98>
 8000e6c:	f1c1 0720 	rsb	r7, r1, #32
 8000e70:	408b      	lsls	r3, r1
 8000e72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e7a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e7e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e82:	40fd      	lsrs	r5, r7
 8000e84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e88:	4323      	orrs	r3, r4
 8000e8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	fb09 5518 	mls	r5, r9, r8, r5
 8000e96:	0c1c      	lsrs	r4, r3, #16
 8000e98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e9c:	fb08 f50e 	mul.w	r5, r8, lr
 8000ea0:	42a5      	cmp	r5, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eaa:	d90b      	bls.n	8000ec4 <__udivmoddi4+0x1b0>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb4:	f080 8088 	bcs.w	8000fc8 <__udivmoddi4+0x2b4>
 8000eb8:	42a5      	cmp	r5, r4
 8000eba:	f240 8085 	bls.w	8000fc8 <__udivmoddi4+0x2b4>
 8000ebe:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec2:	4464      	add	r4, ip
 8000ec4:	1b64      	subs	r4, r4, r5
 8000ec6:	b29d      	uxth	r5, r3
 8000ec8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ecc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x1da>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ee4:	d26c      	bcs.n	8000fc0 <__udivmoddi4+0x2ac>
 8000ee6:	45a6      	cmp	lr, r4
 8000ee8:	d96a      	bls.n	8000fc0 <__udivmoddi4+0x2ac>
 8000eea:	3b02      	subs	r3, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ef2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ef6:	eba4 040e 	sub.w	r4, r4, lr
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	46c8      	mov	r8, r9
 8000efe:	46ae      	mov	lr, r5
 8000f00:	d356      	bcc.n	8000fb0 <__udivmoddi4+0x29c>
 8000f02:	d053      	beq.n	8000fac <__udivmoddi4+0x298>
 8000f04:	b156      	cbz	r6, 8000f1c <__udivmoddi4+0x208>
 8000f06:	ebb0 0208 	subs.w	r2, r0, r8
 8000f0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f12:	40ca      	lsrs	r2, r1
 8000f14:	40cc      	lsrs	r4, r1
 8000f16:	4317      	orrs	r7, r2
 8000f18:	e9c6 7400 	strd	r7, r4, [r6]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	2100      	movs	r1, #0
 8000f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f24:	f1c3 0120 	rsb	r1, r3, #32
 8000f28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f30:	fa25 f101 	lsr.w	r1, r5, r1
 8000f34:	409d      	lsls	r5, r3
 8000f36:	432a      	orrs	r2, r5
 8000f38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f3c:	fa1f fe8c 	uxth.w	lr, ip
 8000f40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f44:	fb07 1510 	mls	r5, r7, r0, r1
 8000f48:	0c11      	lsrs	r1, r2, #16
 8000f4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f52:	428d      	cmp	r5, r1
 8000f54:	fa04 f403 	lsl.w	r4, r4, r3
 8000f58:	d908      	bls.n	8000f6c <__udivmoddi4+0x258>
 8000f5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f62:	d22f      	bcs.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f64:	428d      	cmp	r5, r1
 8000f66:	d92d      	bls.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f68:	3802      	subs	r0, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	1b49      	subs	r1, r1, r5
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f74:	fb07 1115 	mls	r1, r7, r5, r1
 8000f78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f80:	4291      	cmp	r1, r2
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x282>
 8000f84:	eb1c 0202 	adds.w	r2, ip, r2
 8000f88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f8c:	d216      	bcs.n	8000fbc <__udivmoddi4+0x2a8>
 8000f8e:	4291      	cmp	r1, r2
 8000f90:	d914      	bls.n	8000fbc <__udivmoddi4+0x2a8>
 8000f92:	3d02      	subs	r5, #2
 8000f94:	4462      	add	r2, ip
 8000f96:	1a52      	subs	r2, r2, r1
 8000f98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f9c:	e738      	b.n	8000e10 <__udivmoddi4+0xfc>
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	e708      	b.n	8000db6 <__udivmoddi4+0xa2>
 8000fa4:	4639      	mov	r1, r7
 8000fa6:	e6e6      	b.n	8000d76 <__udivmoddi4+0x62>
 8000fa8:	4610      	mov	r0, r2
 8000faa:	e6fb      	b.n	8000da4 <__udivmoddi4+0x90>
 8000fac:	4548      	cmp	r0, r9
 8000fae:	d2a9      	bcs.n	8000f04 <__udivmoddi4+0x1f0>
 8000fb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	e7a3      	b.n	8000f04 <__udivmoddi4+0x1f0>
 8000fbc:	4645      	mov	r5, r8
 8000fbe:	e7ea      	b.n	8000f96 <__udivmoddi4+0x282>
 8000fc0:	462b      	mov	r3, r5
 8000fc2:	e794      	b.n	8000eee <__udivmoddi4+0x1da>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	e7d1      	b.n	8000f6c <__udivmoddi4+0x258>
 8000fc8:	46d0      	mov	r8, sl
 8000fca:	e77b      	b.n	8000ec4 <__udivmoddi4+0x1b0>
 8000fcc:	3d02      	subs	r5, #2
 8000fce:	4462      	add	r2, ip
 8000fd0:	e732      	b.n	8000e38 <__udivmoddi4+0x124>
 8000fd2:	4608      	mov	r0, r1
 8000fd4:	e70a      	b.n	8000dec <__udivmoddi4+0xd8>
 8000fd6:	4464      	add	r4, ip
 8000fd8:	3802      	subs	r0, #2
 8000fda:	e742      	b.n	8000e62 <__udivmoddi4+0x14e>

08000fdc <__aeabi_idiv0>:
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	4bae      	ldr	r3, [pc, #696]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4aad      	ldr	r2, [pc, #692]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4bab      	ldr	r3, [pc, #684]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	61bb      	str	r3, [r7, #24]
 8001010:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	4ba7      	ldr	r3, [pc, #668]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4aa6      	ldr	r2, [pc, #664]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4ba4      	ldr	r3, [pc, #656]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4ba0      	ldr	r3, [pc, #640]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a9f      	ldr	r2, [pc, #636]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b9d      	ldr	r3, [pc, #628]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b99      	ldr	r3, [pc, #612]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a98      	ldr	r2, [pc, #608]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b96      	ldr	r3, [pc, #600]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b92      	ldr	r3, [pc, #584]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a91      	ldr	r2, [pc, #580]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b8f      	ldr	r3, [pc, #572]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b8b      	ldr	r3, [pc, #556]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a8a      	ldr	r2, [pc, #552]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b88      	ldr	r3, [pc, #544]	; (80012b4 <MX_GPIO_Init+0x2d4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2108      	movs	r1, #8
 80010a2:	4885      	ldr	r0, [pc, #532]	; (80012b8 <MX_GPIO_Init+0x2d8>)
 80010a4:	f005 fa74 	bl	8006590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2101      	movs	r1, #1
 80010ac:	4883      	ldr	r0, [pc, #524]	; (80012bc <MX_GPIO_Init+0x2dc>)
 80010ae:	f005 fa6f 	bl	8006590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010b2:	2200      	movs	r2, #0
 80010b4:	f24f 0116 	movw	r1, #61462	; 0xf016
 80010b8:	4881      	ldr	r0, [pc, #516]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 80010ba:	f005 fa69 	bl	8006590 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2130      	movs	r1, #48	; 0x30
 80010c2:	4880      	ldr	r0, [pc, #512]	; (80012c4 <MX_GPIO_Init+0x2e4>)
 80010c4:	f005 fa64 	bl	8006590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010c8:	2308      	movs	r3, #8
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4876      	ldr	r0, [pc, #472]	; (80012b8 <MX_GPIO_Init+0x2d8>)
 80010e0:	f005 f8ba 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4870      	ldr	r0, [pc, #448]	; (80012bc <MX_GPIO_Init+0x2dc>)
 80010fc:	f005 f8ac 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001100:	2308      	movs	r3, #8
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001110:	2305      	movs	r3, #5
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4868      	ldr	r0, [pc, #416]	; (80012bc <MX_GPIO_Init+0x2dc>)
 800111c:	f005 f89c 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001120:	2301      	movs	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001124:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4864      	ldr	r0, [pc, #400]	; (80012c8 <MX_GPIO_Init+0x2e8>)
 8001136:	f005 f88f 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800113a:	2310      	movs	r3, #16
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800114a:	2306      	movs	r3, #6
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	485c      	ldr	r0, [pc, #368]	; (80012c8 <MX_GPIO_Init+0x2e8>)
 8001156:	f005 f87f 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800115a:	23e0      	movs	r3, #224	; 0xe0
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800116a:	2305      	movs	r3, #5
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	4854      	ldr	r0, [pc, #336]	; (80012c8 <MX_GPIO_Init+0x2e8>)
 8001176:	f005 f86f 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800117a:	2304      	movs	r3, #4
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	484d      	ldr	r0, [pc, #308]	; (80012c4 <MX_GPIO_Init+0x2e4>)
 800118e:	f005 f863 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001192:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001198:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800119c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	4843      	ldr	r0, [pc, #268]	; (80012b8 <MX_GPIO_Init+0x2d8>)
 80011aa:	f005 f855 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b4:	2312      	movs	r3, #18
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011c0:	2304      	movs	r3, #4
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	483e      	ldr	r0, [pc, #248]	; (80012c4 <MX_GPIO_Init+0x2e4>)
 80011cc:	f005 f844 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PD1 PD2 PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011d0:	f24f 0316 	movw	r3, #61462	; 0xf016
 80011d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4835      	ldr	r0, [pc, #212]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 80011ea:	f005 f835 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011ee:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001200:	2306      	movs	r3, #6
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	482c      	ldr	r0, [pc, #176]	; (80012bc <MX_GPIO_Init+0x2dc>)
 800120c:	f005 f824 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4828      	ldr	r0, [pc, #160]	; (80012c8 <MX_GPIO_Init+0x2e8>)
 8001226:	f005 f817 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800122a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800123c:	230a      	movs	r3, #10
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	4820      	ldr	r0, [pc, #128]	; (80012c8 <MX_GPIO_Init+0x2e8>)
 8001248:	f005 f806 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800124c:	2320      	movs	r3, #32
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	4818      	ldr	r0, [pc, #96]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001260:	f004 fffa 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001264:	2330      	movs	r3, #48	; 0x30
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4812      	ldr	r0, [pc, #72]	; (80012c4 <MX_GPIO_Init+0x2e4>)
 800127c:	f004 ffec 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001280:	2302      	movs	r3, #2
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001284:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	4808      	ldr	r0, [pc, #32]	; (80012b8 <MX_GPIO_Init+0x2d8>)
 8001296:	f004 ffdf 	bl	8006258 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2017      	movs	r0, #23
 80012a0:	f004 ff11 	bl	80060c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012a4:	2017      	movs	r0, #23
 80012a6:	f004 ff2a 	bl	80060fe <HAL_NVIC_EnableIRQ>

}
 80012aa:	bf00      	nop
 80012ac:	3730      	adds	r7, #48	; 0x30
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020000 	.word	0x40020000

080012cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_I2C1_Init+0x50>)
 80012d2:	4a13      	ldr	r2, [pc, #76]	; (8001320 <MX_I2C1_Init+0x54>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_I2C1_Init+0x50>)
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_I2C1_Init+0x58>)
 80012da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_I2C1_Init+0x50>)
 80012ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <MX_I2C1_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_I2C1_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_I2C1_Init+0x50>)
 800130a:	f005 f97f 	bl	800660c <HAL_I2C_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001314:	f000 fe40 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000214 	.word	0x20000214
 8001320:	40005400 	.word	0x40005400
 8001324:	000186a0 	.word	0x000186a0

08001328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_I2C_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12c      	bne.n	80013a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_I2C_MspInit+0x88>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_I2C_MspInit+0x88>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_I2C_MspInit+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001366:	f44f 7310 	mov.w	r3, #576	; 0x240
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136c:	2312      	movs	r3, #18
 800136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001370:	2301      	movs	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001378:	2304      	movs	r3, #4
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <HAL_I2C_MspInit+0x8c>)
 8001384:	f004 ff68 	bl	8006258 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_I2C_MspInit+0x88>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_I2C_MspInit+0x88>)
 8001392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001396:	6413      	str	r3, [r2, #64]	; 0x40
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_I2C_MspInit+0x88>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40005400 	.word	0x40005400
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020400 	.word	0x40020400

080013b8 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d106      	bne.n	80013da <prv_parse_number+0x22>
        t = gh->p.term_str;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3371      	adds	r3, #113	; 0x71
 80013d0:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80013d2:	e002      	b.n	80013da <prv_parse_number+0x22>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <prv_parse_number+0x30>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b20      	cmp	r3, #32
 80013e6:	d0f5      	beq.n	80013d4 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b2d      	cmp	r3, #45	; 0x2d
 80013ee:	d104      	bne.n	80013fa <prv_parse_number+0x42>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <prv_parse_number+0x44>
 80013fa:	2300      	movs	r3, #0
 80013fc:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80013fe:	e00d      	b.n	800141c <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	461a      	mov	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	3b30      	subs	r3, #48	; 0x30
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <prv_parse_number+0x7a>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b2f      	cmp	r3, #47	; 0x2f
 8001428:	d903      	bls.n	8001432 <prv_parse_number+0x7a>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b39      	cmp	r3, #57	; 0x39
 8001430:	d9e6      	bls.n	8001400 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8001432:	7afb      	ldrb	r3, [r7, #11]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <prv_parse_number+0x86>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	425b      	negs	r3, r3
 800143c:	e000      	b.n	8001440 <prv_parse_number+0x88>
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d106      	bne.n	800146a <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3371      	adds	r3, #113	; 0x71
 8001460:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8001462:	e002      	b.n	800146a <prv_parse_float_number+0x1e>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <prv_parse_float_number+0x2c>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b20      	cmp	r3, #32
 8001476:	d0f5      	beq.n	8001464 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8001478:	2100      	movs	r1, #0
 800147a:	6838      	ldr	r0, [r7, #0]
 800147c:	f00c fc6c 	bl	800dd58 <strtod>
 8001480:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8001484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001488:	ec43 2b17 	vmov	d7, r2, r3
}
 800148c:	eeb0 0a47 	vmov.f32	s0, s14
 8001490:	eef0 0a67 	vmov.f32	s1, s15
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 80014a4:	2100      	movs	r1, #0
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffd0 	bl	800144c <prv_parse_float_number>
 80014ac:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 80014b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014b4:	f7ff fb48 	bl	8000b48 <__aeabi_d2iz>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <prv_parse_lat_long+0x94>)
 80014bc:	fb82 1203 	smull	r1, r2, r2, r3
 80014c0:	1152      	asrs	r2, r2, #5
 80014c2:	17db      	asrs	r3, r3, #31
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f824 	bl	8000514 <__aeabi_i2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <prv_parse_lat_long+0x98>)
 80014da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014de:	f7ff f883 	bl	80005e8 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014ea:	f7fe fec5 	bl	8000278 <__aeabi_dsub>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <prv_parse_lat_long+0x9c>)
 80014fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001500:	f7ff f99c 	bl	800083c <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800150c:	f7fe feb6 	bl	800027c <__adddf3>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800151c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001520:	eeb0 0a47 	vmov.f32	s0, s14
 8001524:	eef0 0a67 	vmov.f32	s1, s15
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	51eb851f 	.word	0x51eb851f
 8001534:	40590000 	.word	0x40590000
 8001538:	404e0000 	.word	0x404e0000

0800153c <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 800153c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 800154c:	2900      	cmp	r1, #0
 800154e:	d169      	bne.n	8001624 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3371      	adds	r3, #113	; 0x71
 8001554:	2206      	movs	r2, #6
 8001556:	49ba      	ldr	r1, [pc, #744]	; (8001840 <prv_parse_term+0x304>)
 8001558:	4618      	mov	r0, r3
 800155a:	f00c fd16 	bl	800df8a <strncmp>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d009      	beq.n	8001578 <prv_parse_term+0x3c>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3371      	adds	r3, #113	; 0x71
 8001568:	2206      	movs	r2, #6
 800156a:	49b6      	ldr	r1, [pc, #728]	; (8001844 <prv_parse_term+0x308>)
 800156c:	4618      	mov	r0, r3
 800156e:	f00c fd0c 	bl	800df8a <strncmp>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d104      	bne.n	8001582 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001580:	e04e      	b.n	8001620 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3371      	adds	r3, #113	; 0x71
 8001586:	2206      	movs	r2, #6
 8001588:	49af      	ldr	r1, [pc, #700]	; (8001848 <prv_parse_term+0x30c>)
 800158a:	4618      	mov	r0, r3
 800158c:	f00c fcfd 	bl	800df8a <strncmp>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <prv_parse_term+0x6e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3371      	adds	r3, #113	; 0x71
 800159a:	2206      	movs	r2, #6
 800159c:	49ab      	ldr	r1, [pc, #684]	; (800184c <prv_parse_term+0x310>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f00c fcf3 	bl	800df8a <strncmp>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d104      	bne.n	80015b4 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2202      	movs	r2, #2
 80015ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80015b2:	e035      	b.n	8001620 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3371      	adds	r3, #113	; 0x71
 80015b8:	2206      	movs	r2, #6
 80015ba:	49a5      	ldr	r1, [pc, #660]	; (8001850 <prv_parse_term+0x314>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f00c fce4 	bl	800df8a <strncmp>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d009      	beq.n	80015dc <prv_parse_term+0xa0>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3371      	adds	r3, #113	; 0x71
 80015cc:	2206      	movs	r2, #6
 80015ce:	49a1      	ldr	r1, [pc, #644]	; (8001854 <prv_parse_term+0x318>)
 80015d0:	4618      	mov	r0, r3
 80015d2:	f00c fcda 	bl	800df8a <strncmp>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d104      	bne.n	80015e6 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80015e4:	e01c      	b.n	8001620 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3371      	adds	r3, #113	; 0x71
 80015ea:	2206      	movs	r2, #6
 80015ec:	499a      	ldr	r1, [pc, #616]	; (8001858 <prv_parse_term+0x31c>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00c fccb 	bl	800df8a <strncmp>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <prv_parse_term+0xd2>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3371      	adds	r3, #113	; 0x71
 80015fe:	2206      	movs	r2, #6
 8001600:	4996      	ldr	r1, [pc, #600]	; (800185c <prv_parse_term+0x320>)
 8001602:	4618      	mov	r0, r3
 8001604:	f00c fcc1 	bl	800df8a <strncmp>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d104      	bne.n	8001618 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2204      	movs	r2, #4
 8001612:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001616:	e003      	b.n	8001620 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8001620:	2301      	movs	r3, #1
 8001622:	e231      	b.n	8001a88 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800162a:	2900      	cmp	r1, #0
 800162c:	f000 822b 	beq.w	8001a86 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001636:	2901      	cmp	r1, #1
 8001638:	f040 80c9 	bne.w	80017ce <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001642:	3b01      	subs	r3, #1
 8001644:	2b0a      	cmp	r3, #10
 8001646:	f200 8213 	bhi.w	8001a70 <prv_parse_term+0x534>
 800164a:	a201      	add	r2, pc, #4	; (adr r2, 8001650 <prv_parse_term+0x114>)
 800164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001650:	0800167d 	.word	0x0800167d
 8001654:	080016f7 	.word	0x080016f7
 8001658:	0800170d 	.word	0x0800170d
 800165c:	08001737 	.word	0x08001737
 8001660:	0800174d 	.word	0x0800174d
 8001664:	08001777 	.word	0x08001777
 8001668:	0800178b 	.word	0x0800178b
 800166c:	08001a71 	.word	0x08001a71
 8001670:	0800179f 	.word	0x0800179f
 8001674:	08001a71 	.word	0x08001a71
 8001678:	080017b7 	.word	0x080017b7
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001682:	3b30      	subs	r3, #48	; 0x30
 8001684:	b2db      	uxtb	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	0092      	lsls	r2, r2, #2
 800168a:	4413      	add	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001696:	4413      	add	r3, r2
 8001698:	b2db      	uxtb	r3, r3
 800169a:	3b30      	subs	r3, #48	; 0x30
 800169c:	b2da      	uxtb	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80016aa:	3b30      	subs	r3, #48	; 0x30
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80016be:	4413      	add	r3, r2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	3b30      	subs	r3, #48	; 0x30
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80016d2:	3b30      	subs	r3, #48	; 0x30
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	0092      	lsls	r2, r2, #2
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80016e6:	4413      	add	r3, r2
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	3b30      	subs	r3, #48	; 0x30
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 80016f4:	e1c7      	b.n	8001a86 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fed0 	bl	800149c <prv_parse_lat_long>
 80016fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001700:	eef0 7a60 	vmov.f32	s15, s1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800170a:	e1bc      	b.n	8001a86 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001712:	2b53      	cmp	r3, #83	; 0x53
 8001714:	d005      	beq.n	8001722 <prv_parse_term+0x1e6>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800171c:	2b73      	cmp	r3, #115	; 0x73
 800171e:	f040 81a9 	bne.w	8001a74 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001728:	4690      	mov	r8, r2
 800172a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8001734:	e19e      	b.n	8001a74 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff feb0 	bl	800149c <prv_parse_lat_long>
 800173c:	eeb0 7a40 	vmov.f32	s14, s0
 8001740:	eef0 7a60 	vmov.f32	s15, s1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800174a:	e19c      	b.n	8001a86 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001752:	2b57      	cmp	r3, #87	; 0x57
 8001754:	d005      	beq.n	8001762 <prv_parse_term+0x226>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800175c:	2b77      	cmp	r3, #119	; 0x77
 800175e:	f040 818b 	bne.w	8001a78 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001768:	4614      	mov	r4, r2
 800176a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8001774:	e180      	b.n	8001a78 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8001776:	2100      	movs	r1, #0
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fe1d 	bl	80013b8 <prv_parse_number>
 800177e:	4603      	mov	r3, r0
 8001780:	b2da      	uxtb	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8001788:	e17d      	b.n	8001a86 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 800178a:	2100      	movs	r1, #0
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff fe13 	bl	80013b8 <prv_parse_number>
 8001792:	4603      	mov	r3, r0
 8001794:	b2da      	uxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 800179c:	e173      	b.n	8001a86 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800179e:	2100      	movs	r1, #0
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fe53 	bl	800144c <prv_parse_float_number>
 80017a6:	eeb0 7a40 	vmov.f32	s14, s0
 80017aa:	eef0 7a60 	vmov.f32	s15, s1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80017b4:	e167      	b.n	8001a86 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 80017b6:	2100      	movs	r1, #0
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe47 	bl	800144c <prv_parse_float_number>
 80017be:	eeb0 7a40 	vmov.f32	s14, s0
 80017c2:	eef0 7a60 	vmov.f32	s15, s1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80017cc:	e15b      	b.n	8001a86 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80017d4:	2902      	cmp	r1, #2
 80017d6:	f040 8083 	bne.w	80018e0 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80017e0:	3b02      	subs	r3, #2
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	d860      	bhi.n	80018a8 <prv_parse_term+0x36c>
 80017e6:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <prv_parse_term+0x2b0>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	0800182d 	.word	0x0800182d
 80017f0:	080018a9 	.word	0x080018a9
 80017f4:	080018a9 	.word	0x080018a9
 80017f8:	080018a9 	.word	0x080018a9
 80017fc:	080018a9 	.word	0x080018a9
 8001800:	080018a9 	.word	0x080018a9
 8001804:	080018a9 	.word	0x080018a9
 8001808:	080018a9 	.word	0x080018a9
 800180c:	080018a9 	.word	0x080018a9
 8001810:	080018a9 	.word	0x080018a9
 8001814:	080018a9 	.word	0x080018a9
 8001818:	080018a9 	.word	0x080018a9
 800181c:	080018a9 	.word	0x080018a9
 8001820:	08001861 	.word	0x08001861
 8001824:	08001879 	.word	0x08001879
 8001828:	08001891 	.word	0x08001891
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 800182c:	2100      	movs	r1, #0
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fdc2 	bl	80013b8 <prv_parse_number>
 8001834:	4603      	mov	r3, r0
 8001836:	b2da      	uxtb	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 800183e:	e122      	b.n	8001a86 <prv_parse_term+0x54a>
 8001840:	0800fd90 	.word	0x0800fd90
 8001844:	0800fd98 	.word	0x0800fd98
 8001848:	0800fda0 	.word	0x0800fda0
 800184c:	0800fda8 	.word	0x0800fda8
 8001850:	0800fdb0 	.word	0x0800fdb0
 8001854:	0800fdb8 	.word	0x0800fdb8
 8001858:	0800fdc0 	.word	0x0800fdc0
 800185c:	0800fdc8 	.word	0x0800fdc8
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8001860:	2100      	movs	r1, #0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fdf2 	bl	800144c <prv_parse_float_number>
 8001868:	eeb0 7a40 	vmov.f32	s14, s0
 800186c:	eef0 7a60 	vmov.f32	s15, s1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001876:	e106      	b.n	8001a86 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8001878:	2100      	movs	r1, #0
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fde6 	bl	800144c <prv_parse_float_number>
 8001880:	eeb0 7a40 	vmov.f32	s14, s0
 8001884:	eef0 7a60 	vmov.f32	s15, s1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800188e:	e0fa      	b.n	8001a86 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8001890:	2100      	movs	r1, #0
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fdda 	bl	800144c <prv_parse_float_number>
 8001898:	eeb0 7a40 	vmov.f32	s14, s0
 800189c:	eef0 7a60 	vmov.f32	s15, s1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80018a6:	e0ee      	b.n	8001a86 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	f240 80e4 	bls.w	8001a7c <prv_parse_term+0x540>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80018ba:	2b0e      	cmp	r3, #14
 80018bc:	f200 80de 	bhi.w	8001a7c <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 80018c0:	2100      	movs	r1, #0
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fd78 	bl	80013b8 <prv_parse_number>
 80018c8:	4602      	mov	r2, r0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80018d0:	3b03      	subs	r3, #3
 80018d2:	b2d1      	uxtb	r1, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	460a      	mov	r2, r1
 80018da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 80018de:	e0cd      	b.n	8001a7c <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80018e6:	2903      	cmp	r1, #3
 80018e8:	d11b      	bne.n	8001922 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d002      	beq.n	80018fa <prv_parse_term+0x3be>
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d00a      	beq.n	800190e <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80018f8:	e0c5      	b.n	8001a86 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80018fa:	2100      	movs	r1, #0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fd5b 	bl	80013b8 <prv_parse_number>
 8001902:	4603      	mov	r3, r0
 8001904:	b2da      	uxtb	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 800190c:	e0bb      	b.n	8001a86 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800190e:	2100      	movs	r1, #0
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fd51 	bl	80013b8 <prv_parse_number>
 8001916:	4603      	mov	r3, r0
 8001918:	b2da      	uxtb	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001920:	e0b1      	b.n	8001a86 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001928:	2904      	cmp	r1, #4
 800192a:	f040 80ac 	bne.w	8001a86 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001934:	3902      	subs	r1, #2
 8001936:	2909      	cmp	r1, #9
 8001938:	f200 80a2 	bhi.w	8001a80 <prv_parse_term+0x544>
 800193c:	a001      	add	r0, pc, #4	; (adr r0, 8001944 <prv_parse_term+0x408>)
 800193e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001942:	bf00      	nop
 8001944:	0800196d 	.word	0x0800196d
 8001948:	08001a81 	.word	0x08001a81
 800194c:	08001a81 	.word	0x08001a81
 8001950:	08001a81 	.word	0x08001a81
 8001954:	08001a81 	.word	0x08001a81
 8001958:	08001987 	.word	0x08001987
 800195c:	0800199f 	.word	0x0800199f
 8001960:	080019b7 	.word	0x080019b7
 8001964:	08001a31 	.word	0x08001a31
 8001968:	08001a49 	.word	0x08001a49
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001972:	2b41      	cmp	r3, #65	; 0x41
 8001974:	bf0c      	ite	eq
 8001976:	2301      	moveq	r3, #1
 8001978:	2300      	movne	r3, #0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001984:	e07f      	b.n	8001a86 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8001986:	2100      	movs	r1, #0
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fd5f 	bl	800144c <prv_parse_float_number>
 800198e:	eeb0 7a40 	vmov.f32	s14, s0
 8001992:	eef0 7a60 	vmov.f32	s15, s1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800199c:	e073      	b.n	8001a86 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800199e:	2100      	movs	r1, #0
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff fd53 	bl	800144c <prv_parse_float_number>
 80019a6:	eeb0 7a40 	vmov.f32	s14, s0
 80019aa:	eef0 7a60 	vmov.f32	s15, s1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80019b4:	e067      	b.n	8001a86 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80019bc:	3b30      	subs	r3, #48	; 0x30
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80019d0:	4413      	add	r3, r2
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	3b30      	subs	r3, #48	; 0x30
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80019e4:	3b30      	subs	r3, #48	; 0x30
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80019f8:	4413      	add	r3, r2
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	3b30      	subs	r3, #48	; 0x30
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001a0c:	3b30      	subs	r3, #48	; 0x30
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001a20:	4413      	add	r3, r2
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3b30      	subs	r3, #48	; 0x30
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8001a2e:	e02a      	b.n	8001a86 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8001a30:	2100      	movs	r1, #0
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fd0a 	bl	800144c <prv_parse_float_number>
 8001a38:	eeb0 7a40 	vmov.f32	s14, s0
 8001a3c:	eef0 7a60 	vmov.f32	s15, s1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001a46:	e01e      	b.n	8001a86 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001a4e:	2957      	cmp	r1, #87	; 0x57
 8001a50:	d004      	beq.n	8001a5c <prv_parse_term+0x520>
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001a58:	2977      	cmp	r1, #119	; 0x77
 8001a5a:	d113      	bne.n	8001a84 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8001a62:	4602      	mov	r2, r0
 8001a64:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8001a6e:	e009      	b.n	8001a84 <prv_parse_term+0x548>
                break;
 8001a70:	bf00      	nop
 8001a72:	e008      	b.n	8001a86 <prv_parse_term+0x54a>
                break;
 8001a74:	bf00      	nop
 8001a76:	e006      	b.n	8001a86 <prv_parse_term+0x54a>
                break;
 8001a78:	bf00      	nop
 8001a7a:	e004      	b.n	8001a86 <prv_parse_term+0x54a>
                break;
 8001a7c:	bf00      	nop
 8001a7e:	e002      	b.n	8001a86 <prv_parse_term+0x54a>
            default:
                break;
 8001a80:	bf00      	nop
 8001a82:	e000      	b.n	8001a86 <prv_parse_term+0x54a>
                break;
 8001a84:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a92:	bf00      	nop

08001a94 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001aa2:	2b2f      	cmp	r3, #47	; 0x2f
 8001aa4:	d90d      	bls.n	8001ac2 <prv_check_crc+0x2e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001aac:	2b39      	cmp	r3, #57	; 0x39
 8001aae:	d808      	bhi.n	8001ac2 <prv_check_crc+0x2e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001ab6:	3b30      	subs	r3, #48	; 0x30
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	b25a      	sxtb	r2, r3
 8001ac0:	e026      	b.n	8001b10 <prv_check_crc+0x7c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001ac8:	2b60      	cmp	r3, #96	; 0x60
 8001aca:	d90d      	bls.n	8001ae8 <prv_check_crc+0x54>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001ad2:	2b7a      	cmp	r3, #122	; 0x7a
 8001ad4:	d808      	bhi.n	8001ae8 <prv_check_crc+0x54>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001adc:	3b57      	subs	r3, #87	; 0x57
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	b25a      	sxtb	r2, r3
 8001ae6:	e013      	b.n	8001b10 <prv_check_crc+0x7c>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001aee:	2b40      	cmp	r3, #64	; 0x40
 8001af0:	d90d      	bls.n	8001b0e <prv_check_crc+0x7a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001af8:	2b5a      	cmp	r3, #90	; 0x5a
 8001afa:	d808      	bhi.n	8001b0e <prv_check_crc+0x7a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b02:	3b37      	subs	r3, #55	; 0x37
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	b25a      	sxtb	r2, r3
 8001b0c:	e000      	b.n	8001b10 <prv_check_crc+0x7c>
 8001b0e:	2200      	movs	r2, #0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001b16:	2b2f      	cmp	r3, #47	; 0x2f
 8001b18:	d90c      	bls.n	8001b34 <prv_check_crc+0xa0>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001b20:	2b39      	cmp	r3, #57	; 0x39
 8001b22:	d807      	bhi.n	8001b34 <prv_check_crc+0xa0>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	e028      	b.n	8001b86 <prv_check_crc+0xf2>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001b3a:	2b60      	cmp	r3, #96	; 0x60
 8001b3c:	d90e      	bls.n	8001b5c <prv_check_crc+0xc8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001b44:	2b7a      	cmp	r3, #122	; 0x7a
 8001b46:	d809      	bhi.n	8001b5c <prv_check_crc+0xc8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001b4e:	3b57      	subs	r3, #87	; 0x57
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	e014      	b.n	8001b86 <prv_check_crc+0xf2>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001b62:	2b40      	cmp	r3, #64	; 0x40
 8001b64:	d90e      	bls.n	8001b84 <prv_check_crc+0xf0>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001b6c:	2b5a      	cmp	r3, #90	; 0x5a
 8001b6e:	d809      	bhi.n	8001b84 <prv_check_crc+0xf0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001b76:	3b37      	subs	r3, #55	; 0x37
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	b25b      	sxtb	r3, r3
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	b25b      	sxtb	r3, r3
 8001b82:	e000      	b.n	8001b86 <prv_check_crc+0xf2>
 8001b84:	2300      	movs	r3, #0
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b25b      	sxtb	r3, r3
 8001b8a:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001b92:	7bfa      	ldrb	r2, [r7, #15]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	bf0c      	ite	eq
 8001b98:	2301      	moveq	r3, #1
 8001b9a:	2300      	movne	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d136      	bne.n	8001c2a <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c28:	e061      	b.n	8001cee <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d121      	bne.n	8001c78 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	33a1      	adds	r3, #161	; 0xa1
 8001c6e:	220c      	movs	r2, #12
 8001c70:	4619      	mov	r1, r3
 8001c72:	f00c fa10 	bl	800e096 <memcpy>
 8001c76:	e03a      	b.n	8001cee <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d106      	bne.n	8001c90 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001c8e:	e02e      	b.n	8001cee <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d129      	bne.n	8001cee <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001d00:	22b0      	movs	r2, #176	; 0xb0
 8001d02:	2100      	movs	r1, #0
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f00c f938 	bl	800df7a <memset>
    return 1;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001d24:	e0ad      	b.n	8001e82 <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b24      	cmp	r3, #36	; 0x24
 8001d2c:	d128      	bne.n	8001d80 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3370      	adds	r3, #112	; 0x70
 8001d32:	2240      	movs	r2, #64	; 0x40
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f00c f91f 	bl	800df7a <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001d42:	2b0b      	cmp	r3, #11
 8001d44:	f200 8097 	bhi.w	8001e76 <lwgps_process+0x162>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001d4e:	4619      	mov	r1, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001d62:	3301      	adds	r3, #1
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001d7e:	e07a      	b.n	8001e76 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b2c      	cmp	r3, #44	; 0x2c
 8001d86:	d11d      	bne.n	8001dc4 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f7ff fbd7 	bl	800153c <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4053      	eors	r3, r2
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001db8:	3301      	adds	r3, #1
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001dc2:	e058      	b.n	8001e76 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8001dca:	d117      	bne.n	8001dfc <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff fbb5 	bl	800153c <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001df0:	3301      	adds	r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001dfa:	e03c      	b.n	8001e76 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b0d      	cmp	r3, #13
 8001e02:	d109      	bne.n	8001e18 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fe45 	bl	8001a94 <prv_check_crc>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d032      	beq.n	8001e76 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f7ff feca 	bl	8001baa <prv_copy_from_tmp_memory>
 8001e16:	e02e      	b.n	8001e76 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4053      	eors	r3, r2
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001e3c:	2b0b      	cmp	r3, #11
 8001e3e:	d81a      	bhi.n	8001e76 <lwgps_process+0x162>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001e46:	4619      	mov	r1, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f47f af4e 	bne.w	8001d26 <lwgps_process+0x12>
        }
    }
    return 1;
 8001e8a:	2301      	movs	r3, #1
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e98:	f003 ffa4 	bl	8005de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e9c:	f000 f812 	bl	8001ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ea0:	f7ff f89e 	bl	8000fe0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ea4:	f7ff fa12 	bl	80012cc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001ea8:	f001 f894 	bl	8002fd4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001eac:	f001 f868 	bl	8002f80 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001eb0:	f000 fec2 	bl	8002c38 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001eb4:	f000 ff68 	bl	8002d88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8001eb8:	f000 f884 	bl	8001fc4 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  loop();
 8001ebc:	f000 f912 	bl	80020e4 <loop>
 8001ec0:	e7fc      	b.n	8001ebc <main+0x28>
	...

08001ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b094      	sub	sp, #80	; 0x50
 8001ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	2230      	movs	r2, #48	; 0x30
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00c f851 	bl	800df7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <SystemClock_Config+0xcc>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <SystemClock_Config+0xcc>)
 8001ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <SystemClock_Config+0xcc>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f04:	2300      	movs	r3, #0
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <SystemClock_Config+0xd0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <SystemClock_Config+0xd0>)
 8001f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <SystemClock_Config+0xd0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f34:	2308      	movs	r3, #8
 8001f36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f42:	2307      	movs	r3, #7
 8001f44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f46:	f107 0320 	add.w	r3, r7, #32
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f006 f802 	bl	8007f54 <HAL_RCC_OscConfig>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f56:	f000 f81f 	bl	8001f98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f5a:	230f      	movs	r3, #15
 8001f5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	2105      	movs	r1, #5
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f006 fa63 	bl	8008444 <HAL_RCC_ClockConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f84:	f000 f808 	bl	8001f98 <Error_Handler>
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3750      	adds	r7, #80	; 0x50
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40007000 	.word	0x40007000

08001f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9c:	b672      	cpsid	i
}
 8001f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <Error_Handler+0x8>

08001fa2 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fb0:	eef0 7ae7 	vabs.f32	s15, s15
 8001fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <setup>:
void YonelmeGorev();
void ImuVeriGorev();
void ArayuzTask();
void YonelmeBayrakGorev();
void setup()
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	//uart3.Yapilandir(115200, GPIOD, GPIO_PIN_8,GPIOB ,GPIO_PIN_11);
	//uart3.receiveIT(RotaData, 8);

	ArayuzPaket.PaketKesmeYapilandir();
 8001fc8:	4834      	ldr	r0, [pc, #208]	; (800209c <setup+0xd8>)
 8001fca:	f002 feb6 	bl	8004d3a <_ZN5Paket20PaketKesmeYapilandirEv>
	motorSag.Yapilandir();
 8001fce:	4834      	ldr	r0, [pc, #208]	; (80020a0 <setup+0xdc>)
 8001fd0:	f002 fb8b 	bl	80046ea <_ZN5Motor10YapilandirEv>
	motorSol.Yapilandir();
 8001fd4:	4833      	ldr	r0, [pc, #204]	; (80020a4 <setup+0xe0>)
 8001fd6:	f002 fb88 	bl	80046ea <_ZN5Motor10YapilandirEv>
	gps.Yapilandir();
 8001fda:	4833      	ldr	r0, [pc, #204]	; (80020a8 <setup+0xe4>)
 8001fdc:	f001 fc0f 	bl	80037fe <_ZN3GPS10YapilandirEv>
	mag.Yapilandir();
 8001fe0:	4832      	ldr	r0, [pc, #200]	; (80020ac <setup+0xe8>)
 8001fe2:	f002 f943 	bl	800426c <_ZN5MyMag10YapilandirEv>
	imu.DBC_MPU6500_YAPILANDIR();
 8001fe6:	4832      	ldr	r0, [pc, #200]	; (80020b0 <setup+0xec>)
 8001fe8:	f001 fcba 	bl	8003960 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv>
	barometre.Yapilandir();
 8001fec:	4831      	ldr	r0, [pc, #196]	; (80020b4 <setup+0xf0>)
 8001fee:	f001 f901 	bl	80031f4 <_ZN9Barometre10YapilandirEv>
	timer3.Yapilandir(84000,5);
 8001ff2:	2205      	movs	r2, #5
 8001ff4:	4930      	ldr	r1, [pc, #192]	; (80020b8 <setup+0xf4>)
 8001ff6:	4831      	ldr	r0, [pc, #196]	; (80020bc <setup+0xf8>)
 8001ff8:	f003 fdd4 	bl	8005ba4 <_ZN5Timer10YapilandirEmm>
	timer3.AktifEt();
 8001ffc:	482f      	ldr	r0, [pc, #188]	; (80020bc <setup+0xf8>)
 8001ffe:	f003 fdf0 	bl	8005be2 <_ZN5Timer7AktifEtEv>

	HAL_Delay(1000);
 8002002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002006:	f003 ff5f 	bl	8005ec8 <HAL_Delay>
	GPIOD->ODR ^= GPIO_PIN_12;
 800200a:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <setup+0xfc>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	4a2c      	ldr	r2, [pc, #176]	; (80020c0 <setup+0xfc>)
 8002010:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002014:	6153      	str	r3, [r2, #20]
	mag.KalibreEt();
 8002016:	4825      	ldr	r0, [pc, #148]	; (80020ac <setup+0xe8>)
 8002018:	f002 f98a 	bl	8004330 <_ZN5MyMag9KalibreEtEv>
	GPIOD->ODR ^= GPIO_PIN_12;
 800201c:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <setup+0xfc>)
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	4a27      	ldr	r2, [pc, #156]	; (80020c0 <setup+0xfc>)
 8002022:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002026:	6153      	str	r3, [r2, #20]
	HAL_Delay(2000);
 8002028:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800202c:	f003 ff4c 	bl	8005ec8 <HAL_Delay>
	imu.DBC_GYRO_OFSET();
 8002030:	481f      	ldr	r0, [pc, #124]	; (80020b0 <setup+0xec>)
 8002032:	f001 fcfb 	bl	8003a2c <_ZN5MyImu14DBC_GYRO_OFSETEv>
	gorev.GorevAl(EksenGorev,30);
 8002036:	221e      	movs	r2, #30
 8002038:	4922      	ldr	r1, [pc, #136]	; (80020c4 <setup+0x100>)
 800203a:	4823      	ldr	r0, [pc, #140]	; (80020c8 <setup+0x104>)
 800203c:	f003 fc53 	bl	80058e6 <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(YonelmeGorev,35);
 8002040:	2223      	movs	r2, #35	; 0x23
 8002042:	4922      	ldr	r1, [pc, #136]	; (80020cc <setup+0x108>)
 8002044:	4820      	ldr	r0, [pc, #128]	; (80020c8 <setup+0x104>)
 8002046:	f003 fc4e 	bl	80058e6 <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(ArayuzTask,100);
 800204a:	2264      	movs	r2, #100	; 0x64
 800204c:	4920      	ldr	r1, [pc, #128]	; (80020d0 <setup+0x10c>)
 800204e:	481e      	ldr	r0, [pc, #120]	; (80020c8 <setup+0x104>)
 8002050:	f003 fc49 	bl	80058e6 <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(ImuVeriGorev,700);
 8002054:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002058:	491e      	ldr	r1, [pc, #120]	; (80020d4 <setup+0x110>)
 800205a:	481b      	ldr	r0, [pc, #108]	; (80020c8 <setup+0x104>)
 800205c:	f003 fc43 	bl	80058e6 <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(GpsVeriGorev,1000);
 8002060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002064:	491c      	ldr	r1, [pc, #112]	; (80020d8 <setup+0x114>)
 8002066:	4818      	ldr	r0, [pc, #96]	; (80020c8 <setup+0x104>)
 8002068:	f003 fc3d 	bl	80058e6 <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(YonelmeBayrakGorev,5000);
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	491a      	ldr	r1, [pc, #104]	; (80020dc <setup+0x118>)
 8002072:	4815      	ldr	r0, [pc, #84]	; (80020c8 <setup+0x104>)
 8002074:	f003 fc37 	bl	80058e6 <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	motorSag.PWM(400,TIM_CHANNEL_2);
 8002078:	2204      	movs	r2, #4
 800207a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800207e:	4808      	ldr	r0, [pc, #32]	; (80020a0 <setup+0xdc>)
 8002080:	f002 fb5e 	bl	8004740 <_ZN5Motor3PWMEtm>
	motorSol.PWM(400,TIM_CHANNEL_4);
 8002084:	220c      	movs	r2, #12
 8002086:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800208a:	4806      	ldr	r0, [pc, #24]	; (80020a4 <setup+0xe0>)
 800208c:	f002 fb58 	bl	8004740 <_ZN5Motor3PWMEtm>
	araba.Dur();
 8002090:	4813      	ldr	r0, [pc, #76]	; (80020e0 <setup+0x11c>)
 8002092:	f002 fbc5 	bl	8004820 <_ZN5Araba3DurEv>

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000a9c 	.word	0x20000a9c
 80020a0:	20000530 	.word	0x20000530
 80020a4:	20000558 	.word	0x20000558
 80020a8:	20000358 	.word	0x20000358
 80020ac:	200004a0 	.word	0x200004a0
 80020b0:	200002f8 	.word	0x200002f8
 80020b4:	200004c0 	.word	0x200004c0
 80020b8:	00014820 	.word	0x00014820
 80020bc:	20000268 	.word	0x20000268
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	080021d5 	.word	0x080021d5
 80020c8:	2000026c 	.word	0x2000026c
 80020cc:	080022ad 	.word	0x080022ad
 80020d0:	08002719 	.word	0x08002719
 80020d4:	08002281 	.word	0x08002281
 80020d8:	080020f9 	.word	0x080020f9
 80020dc:	08002701 	.word	0x08002701
 80020e0:	20000580 	.word	0x20000580

080020e4 <loop>:

void loop()
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	//motor1.AciBul();
	//tur=*motor1.TurAl();
	//aci=*motor1.AciAl();

	gorev.GorevCalistir();
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <loop+0x10>)
 80020ea:	f003 fc8b 	bl	8005a04 <_ZN13Gorevyonetici13GorevCalistirEv>

}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000026c 	.word	0x2000026c

080020f8 <_Z12GpsVeriGorevv>:

void GpsVeriGorev()
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= GPIO_PIN_12;
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <_Z12GpsVeriGorevv+0x9c>)
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	4a24      	ldr	r2, [pc, #144]	; (8002194 <_Z12GpsVeriGorevv+0x9c>)
 8002102:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002106:	6153      	str	r3, [r2, #20]
	irtifa=*barometre.IrtifaOku(0); // baro irtifa al
 8002108:	2100      	movs	r1, #0
 800210a:	4823      	ldr	r0, [pc, #140]	; (8002198 <_Z12GpsVeriGorevv+0xa0>)
 800210c:	f001 fa60 	bl	80035d0 <_ZN9Barometre9IrtifaOkuEh>
 8002110:	4603      	mov	r3, r0
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a21      	ldr	r2, [pc, #132]	; (800219c <_Z12GpsVeriGorevv+0xa4>)
 8002116:	6013      	str	r3, [r2, #0]
	GpsPaket.GpsPaketOlustur(41.2174316, 36.4566603,irtifa,barosicaklik);
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <_Z12GpsVeriGorevv+0xa4>)
 800211a:	edd3 7a00 	vldr	s15, [r3]
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <_Z12GpsVeriGorevv+0xa8>)
 8002120:	ed93 7a00 	vldr	s14, [r3]
 8002124:	eef0 1a47 	vmov.f32	s3, s14
 8002128:	eeb0 1a67 	vmov.f32	s2, s15
 800212c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80021a4 <_Z12GpsVeriGorevv+0xac>
 8002130:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80021a8 <_Z12GpsVeriGorevv+0xb0>
 8002134:	481d      	ldr	r0, [pc, #116]	; (80021ac <_Z12GpsVeriGorevv+0xb4>)
 8002136:	f002 fe10 	bl	8004d5a <_ZN5Paket15GpsPaketOlusturEffff>
	GpsPaket.gpsPaketCagir(GpsVeriPaket);
 800213a:	491d      	ldr	r1, [pc, #116]	; (80021b0 <_Z12GpsVeriGorevv+0xb8>)
 800213c:	481b      	ldr	r0, [pc, #108]	; (80021ac <_Z12GpsVeriGorevv+0xb4>)
 800213e:	f002 ffa4 	bl	800508a <_ZN5Paket13gpsPaketCagirEPh>
	ImuPaket.ImuPaketOlustur(pitch, roll,heading, imusicaklik);
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <_Z12GpsVeriGorevv+0xbc>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <_Z12GpsVeriGorevv+0xc0>)
 800214a:	ed93 7a00 	vldr	s14, [r3]
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <_Z12GpsVeriGorevv+0xc4>)
 8002150:	edd3 6a00 	vldr	s13, [r3]
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <_Z12GpsVeriGorevv+0xc8>)
 8002156:	ed93 6a00 	vldr	s12, [r3]
 800215a:	eef0 1a46 	vmov.f32	s3, s12
 800215e:	eeb0 1a66 	vmov.f32	s2, s13
 8002162:	eef0 0a47 	vmov.f32	s1, s14
 8002166:	eeb0 0a67 	vmov.f32	s0, s15
 800216a:	4816      	ldr	r0, [pc, #88]	; (80021c4 <_Z12GpsVeriGorevv+0xcc>)
 800216c:	f002 fe65 	bl	8004e3a <_ZN5Paket15ImuPaketOlusturEffff>
	ImuPaket.imuPaketCagir(ImuVeriPaket);
 8002170:	4915      	ldr	r1, [pc, #84]	; (80021c8 <_Z12GpsVeriGorevv+0xd0>)
 8002172:	4814      	ldr	r0, [pc, #80]	; (80021c4 <_Z12GpsVeriGorevv+0xcc>)
 8002174:	f002 ff99 	bl	80050aa <_ZN5Paket13imuPaketCagirEPh>
	if(ArayuzPaket.YoklamaFlag)
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <_Z12GpsVeriGorevv+0xd4>)
 800217a:	789b      	ldrb	r3, [r3, #2]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <_Z12GpsVeriGorevv+0x96>
	{
		HAL_UART_Transmit(&huart3, GpsVeriPaket, sizeof(GpsVeriPaket), 1000);
 8002180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002184:	2215      	movs	r2, #21
 8002186:	490a      	ldr	r1, [pc, #40]	; (80021b0 <_Z12GpsVeriGorevv+0xb8>)
 8002188:	4811      	ldr	r0, [pc, #68]	; (80021d0 <_Z12GpsVeriGorevv+0xd8>)
 800218a:	f007 fb5f 	bl	800984c <HAL_UART_Transmit>
	}
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40020c00 	.word	0x40020c00
 8002198:	200004c0 	.word	0x200004c0
 800219c:	20000c0c 	.word	0x20000c0c
 80021a0:	20000c14 	.word	0x20000c14
 80021a4:	4211d39f 	.word	0x4211d39f
 80021a8:	4224dea6 	.word	0x4224dea6
 80021ac:	20000588 	.word	0x20000588
 80021b0:	20000bb4 	.word	0x20000bb4
 80021b4:	20000bfc 	.word	0x20000bfc
 80021b8:	20000c00 	.word	0x20000c00
 80021bc:	20000c08 	.word	0x20000c08
 80021c0:	20000c10 	.word	0x20000c10
 80021c4:	2000068c 	.word	0x2000068c
 80021c8:	20000bcc 	.word	0x20000bcc
 80021cc:	20000a9c 	.word	0x20000a9c
 80021d0:	20000d00 	.word	0x20000d00

080021d4 <_Z10EksenGorevv>:
void EksenGorev()
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= GPIO_PIN_13;
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <_Z10EksenGorevv+0x84>)
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <_Z10EksenGorevv+0x84>)
 80021de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021e2:	6153      	str	r3, [r2, #20]
	imu.DBC_ACI_BULMA(); //imu pitch roll yaw al
 80021e4:	481d      	ldr	r0, [pc, #116]	; (800225c <_Z10EksenGorevv+0x88>)
 80021e6:	f001 fdbf 	bl	8003d68 <_ZN5MyImu13DBC_ACI_BULMAEv>

	pitch=*imu.PitchAl();
 80021ea:	481c      	ldr	r0, [pc, #112]	; (800225c <_Z10EksenGorevv+0x88>)
 80021ec:	f001 ff24 	bl	8004038 <_ZN5MyImu7PitchAlEv>
 80021f0:	4603      	mov	r3, r0
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <_Z10EksenGorevv+0x8c>)
 80021f6:	6013      	str	r3, [r2, #0]
	roll=*imu.RollAl();
 80021f8:	4818      	ldr	r0, [pc, #96]	; (800225c <_Z10EksenGorevv+0x88>)
 80021fa:	f001 ff29 	bl	8004050 <_ZN5MyImu6RollAlEv>
 80021fe:	4603      	mov	r3, r0
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a18      	ldr	r2, [pc, #96]	; (8002264 <_Z10EksenGorevv+0x90>)
 8002204:	6013      	str	r3, [r2, #0]
	yaw=*imu.YawAl();
 8002206:	4815      	ldr	r0, [pc, #84]	; (800225c <_Z10EksenGorevv+0x88>)
 8002208:	f001 ff2e 	bl	8004068 <_ZN5MyImu5YawAlEv>
 800220c:	4603      	mov	r3, r0
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a15      	ldr	r2, [pc, #84]	; (8002268 <_Z10EksenGorevv+0x94>)
 8002212:	6013      	str	r3, [r2, #0]
	heading =*mag.HeadingOlustur(pitch,roll); // mag heading al
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <_Z10EksenGorevv+0x8c>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <_Z10EksenGorevv+0x90>)
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	eef0 0a47 	vmov.f32	s1, s14
 8002224:	eeb0 0a67 	vmov.f32	s0, s15
 8002228:	4810      	ldr	r0, [pc, #64]	; (800226c <_Z10EksenGorevv+0x98>)
 800222a:	f002 f911 	bl	8004450 <_ZN5MyMag14HeadingOlusturEff>
 800222e:	4603      	mov	r3, r0
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <_Z10EksenGorevv+0x9c>)
 8002234:	6013      	str	r3, [r2, #0]
	imusicaklik=*imu.SicaklikAl();
 8002236:	4809      	ldr	r0, [pc, #36]	; (800225c <_Z10EksenGorevv+0x88>)
 8002238:	f001 ff22 	bl	8004080 <_ZN5MyImu10SicaklikAlEv>
 800223c:	4603      	mov	r3, r0
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <_Z10EksenGorevv+0xa0>)
 8002242:	6013      	str	r3, [r2, #0]
	barosicaklik=*barometre.SicaklikOku();
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <_Z10EksenGorevv+0xa4>)
 8002246:	f001 f869 	bl	800331c <_ZN9Barometre11SicaklikOkuEv>
 800224a:	4603      	mov	r3, r0
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <_Z10EksenGorevv+0xa8>)
 8002250:	6013      	str	r3, [r2, #0]
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40020c00 	.word	0x40020c00
 800225c:	200002f8 	.word	0x200002f8
 8002260:	20000bfc 	.word	0x20000bfc
 8002264:	20000c00 	.word	0x20000c00
 8002268:	20000c04 	.word	0x20000c04
 800226c:	200004a0 	.word	0x200004a0
 8002270:	20000c08 	.word	0x20000c08
 8002274:	20000c10 	.word	0x20000c10
 8002278:	200004c0 	.word	0x200004c0
 800227c:	20000c14 	.word	0x20000c14

08002280 <_Z12ImuVeriGorevv>:
void ImuVeriGorev()
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	if(ArayuzPaket.YoklamaFlag)
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <_Z12ImuVeriGorevv+0x20>)
 8002286:	789b      	ldrb	r3, [r3, #2]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <_Z12ImuVeriGorevv+0x1a>
	{
		HAL_UART_Transmit(&huart3, ImuVeriPaket, sizeof(ImuVeriPaket), 1000);
 800228c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002290:	2215      	movs	r2, #21
 8002292:	4904      	ldr	r1, [pc, #16]	; (80022a4 <_Z12ImuVeriGorevv+0x24>)
 8002294:	4804      	ldr	r0, [pc, #16]	; (80022a8 <_Z12ImuVeriGorevv+0x28>)
 8002296:	f007 fad9 	bl	800984c <HAL_UART_Transmit>
	}
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000a9c 	.word	0x20000a9c
 80022a4:	20000bcc 	.word	0x20000bcc
 80022a8:	20000d00 	.word	0x20000d00

080022ac <_Z12YonelmeGorevv>:
void YonelmeGorev()
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	ed2d 8b02 	vpush	{d8}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
    ArabaDurumlar Durum= Hazirlik;
 80022b6:	2300      	movs	r3, #0
 80022b8:	71fb      	strb	r3, [r7, #7]
    if(ArayuzPaket.GidilecekNoktaBayrak==true && yonelmeBayrak==true && ArayuzPaket.arabaDurBayrak==false)
 80022ba:	4bcb      	ldr	r3, [pc, #812]	; (80025e8 <_Z12YonelmeGorevv+0x33c>)
 80022bc:	78db      	ldrb	r3, [r3, #3]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	f040 81fb 	bne.w	80026ba <_Z12YonelmeGorevv+0x40e>
 80022c4:	4bc9      	ldr	r3, [pc, #804]	; (80025ec <_Z12YonelmeGorevv+0x340>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	f040 81f6 	bne.w	80026ba <_Z12YonelmeGorevv+0x40e>
 80022ce:	4bc6      	ldr	r3, [pc, #792]	; (80025e8 <_Z12YonelmeGorevv+0x33c>)
 80022d0:	799b      	ldrb	r3, [r3, #6]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f040 81f1 	bne.w	80026ba <_Z12YonelmeGorevv+0x40e>
    {
        hedefbayrak = true;
 80022d8:	4bc5      	ldr	r3, [pc, #788]	; (80025f0 <_Z12YonelmeGorevv+0x344>)
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
        while(hedefbayrak)
 80022de:	e1d7      	b.n	8002690 <_Z12YonelmeGorevv+0x3e4>
        {
            switch(Durum)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <_Z12YonelmeGorevv+0x40>
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d03b      	beq.n	8002362 <_Z12YonelmeGorevv+0xb6>
 80022ea:	e1d1      	b.n	8002690 <_Z12YonelmeGorevv+0x3e4>
            {
                case Hazirlik:
                    gidilecekMesafe_f = araba.mesafeBul(41.2174316,36.4566603, *ArayuzPaket.ArayuzLatAl(), *ArayuzPaket.ArayuzLonAl());
 80022ec:	48be      	ldr	r0, [pc, #760]	; (80025e8 <_Z12YonelmeGorevv+0x33c>)
 80022ee:	f003 f9d9 	bl	80056a4 <_ZN5Paket11ArayuzLatAlEv>
 80022f2:	4603      	mov	r3, r0
 80022f4:	ed93 8a00 	vldr	s16, [r3]
 80022f8:	48bb      	ldr	r0, [pc, #748]	; (80025e8 <_Z12YonelmeGorevv+0x33c>)
 80022fa:	f003 f9df 	bl	80056bc <_ZN5Paket11ArayuzLonAlEv>
 80022fe:	4603      	mov	r3, r0
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	eef0 1a67 	vmov.f32	s3, s15
 8002308:	eeb0 1a48 	vmov.f32	s2, s16
 800230c:	eddf 0ab9 	vldr	s1, [pc, #740]	; 80025f4 <_Z12YonelmeGorevv+0x348>
 8002310:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80025f8 <_Z12YonelmeGorevv+0x34c>
 8002314:	48b9      	ldr	r0, [pc, #740]	; (80025fc <_Z12YonelmeGorevv+0x350>)
 8002316:	f002 fabb 	bl	8004890 <_ZN5Araba9mesafeBulEffff>
 800231a:	eef0 7a40 	vmov.f32	s15, s0
 800231e:	4bb8      	ldr	r3, [pc, #736]	; (8002600 <_Z12YonelmeGorevv+0x354>)
 8002320:	edc3 7a00 	vstr	s15, [r3]
                    donulecekAci_f = araba.yonelimBul(41.2174316, 36.4566603, *ArayuzPaket.ArayuzLatAl(), *ArayuzPaket.ArayuzLonAl());
 8002324:	48b0      	ldr	r0, [pc, #704]	; (80025e8 <_Z12YonelmeGorevv+0x33c>)
 8002326:	f003 f9bd 	bl	80056a4 <_ZN5Paket11ArayuzLatAlEv>
 800232a:	4603      	mov	r3, r0
 800232c:	ed93 8a00 	vldr	s16, [r3]
 8002330:	48ad      	ldr	r0, [pc, #692]	; (80025e8 <_Z12YonelmeGorevv+0x33c>)
 8002332:	f003 f9c3 	bl	80056bc <_ZN5Paket11ArayuzLonAlEv>
 8002336:	4603      	mov	r3, r0
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	eef0 1a67 	vmov.f32	s3, s15
 8002340:	eeb0 1a48 	vmov.f32	s2, s16
 8002344:	eddf 0aab 	vldr	s1, [pc, #684]	; 80025f4 <_Z12YonelmeGorevv+0x348>
 8002348:	ed9f 0aab 	vldr	s0, [pc, #684]	; 80025f8 <_Z12YonelmeGorevv+0x34c>
 800234c:	48ab      	ldr	r0, [pc, #684]	; (80025fc <_Z12YonelmeGorevv+0x350>)
 800234e:	f002 fb7f 	bl	8004a50 <_ZN5Araba10yonelimBulEffff>
 8002352:	eef0 7a40 	vmov.f32	s15, s0
 8002356:	4bab      	ldr	r3, [pc, #684]	; (8002604 <_Z12YonelmeGorevv+0x358>)
 8002358:	edc3 7a00 	vstr	s15, [r3]
                    Durum = Yonelim;
 800235c:	2301      	movs	r3, #1
 800235e:	71fb      	strb	r3, [r7, #7]
                    break;
 8002360:	e196      	b.n	8002690 <_Z12YonelmeGorevv+0x3e4>

                case Yonelim:
                	if(gidilecekMesafe_f>=7)
 8002362:	4ba7      	ldr	r3, [pc, #668]	; (8002600 <_Z12YonelmeGorevv+0x354>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800236c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002374:	f2c0 8188 	blt.w	8002688 <_Z12YonelmeGorevv+0x3dc>
                	{
                		if(heading < donulecekAci_f - 3 || heading > donulecekAci_f + 3)
 8002378:	4ba2      	ldr	r3, [pc, #648]	; (8002604 <_Z12YonelmeGorevv+0x358>)
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002382:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002386:	4ba0      	ldr	r3, [pc, #640]	; (8002608 <_Z12YonelmeGorevv+0x35c>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	dc0f      	bgt.n	80023b6 <_Z12YonelmeGorevv+0x10a>
 8002396:	4b9b      	ldr	r3, [pc, #620]	; (8002604 <_Z12YonelmeGorevv+0x358>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80023a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80023a4:	4b98      	ldr	r3, [pc, #608]	; (8002608 <_Z12YonelmeGorevv+0x35c>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b2:	f140 8153 	bpl.w	800265c <_Z12YonelmeGorevv+0x3b0>
                		{
                			hata = donulecekAci_f - heading;
 80023b6:	4b93      	ldr	r3, [pc, #588]	; (8002604 <_Z12YonelmeGorevv+0x358>)
 80023b8:	ed93 7a00 	vldr	s14, [r3]
 80023bc:	4b92      	ldr	r3, [pc, #584]	; (8002608 <_Z12YonelmeGorevv+0x35c>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c6:	4b91      	ldr	r3, [pc, #580]	; (800260c <_Z12YonelmeGorevv+0x360>)
 80023c8:	edc3 7a00 	vstr	s15, [r3]
                			integral += abs(hata);
 80023cc:	4b8f      	ldr	r3, [pc, #572]	; (800260c <_Z12YonelmeGorevv+0x360>)
 80023ce:	edd3 7a00 	vldr	s15, [r3]
 80023d2:	eeb0 0a67 	vmov.f32	s0, s15
 80023d6:	f7ff fde4 	bl	8001fa2 <_ZSt3absf>
 80023da:	eeb0 7a40 	vmov.f32	s14, s0
 80023de:	4b8c      	ldr	r3, [pc, #560]	; (8002610 <_Z12YonelmeGorevv+0x364>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e8:	4b89      	ldr	r3, [pc, #548]	; (8002610 <_Z12YonelmeGorevv+0x364>)
 80023ea:	edc3 7a00 	vstr	s15, [r3]
                			if(hata > 180)
 80023ee:	4b87      	ldr	r3, [pc, #540]	; (800260c <_Z12YonelmeGorevv+0x360>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002614 <_Z12YonelmeGorevv+0x368>
 80023f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002400:	dd0a      	ble.n	8002418 <_Z12YonelmeGorevv+0x16c>
                			{
                				hata = hata - 360;
 8002402:	4b82      	ldr	r3, [pc, #520]	; (800260c <_Z12YonelmeGorevv+0x360>)
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8002618 <_Z12YonelmeGorevv+0x36c>
 800240c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002410:	4b7e      	ldr	r3, [pc, #504]	; (800260c <_Z12YonelmeGorevv+0x360>)
 8002412:	edc3 7a00 	vstr	s15, [r3]
 8002416:	e013      	b.n	8002440 <_Z12YonelmeGorevv+0x194>
                			}
                			else if(hata < -180)
 8002418:	4b7c      	ldr	r3, [pc, #496]	; (800260c <_Z12YonelmeGorevv+0x360>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800261c <_Z12YonelmeGorevv+0x370>
 8002422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242a:	d509      	bpl.n	8002440 <_Z12YonelmeGorevv+0x194>
                			{
                				hata = 360 + hata;
 800242c:	4b77      	ldr	r3, [pc, #476]	; (800260c <_Z12YonelmeGorevv+0x360>)
 800242e:	edd3 7a00 	vldr	s15, [r3]
 8002432:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002618 <_Z12YonelmeGorevv+0x36c>
 8002436:	ee77 7a87 	vadd.f32	s15, s15, s14
 800243a:	4b74      	ldr	r3, [pc, #464]	; (800260c <_Z12YonelmeGorevv+0x360>)
 800243c:	edc3 7a00 	vstr	s15, [r3]
                			}

                			integral=isaret.ustSinirla(integral,200);
 8002440:	4b73      	ldr	r3, [pc, #460]	; (8002610 <_Z12YonelmeGorevv+0x364>)
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	21c8      	movs	r1, #200	; 0xc8
 8002448:	eeb0 0a67 	vmov.f32	s0, s15
 800244c:	4874      	ldr	r0, [pc, #464]	; (8002620 <_Z12YonelmeGorevv+0x374>)
 800244e:	f001 fe2e 	bl	80040ae <_ZN6Isaret10ustSinirlaEfm>
 8002452:	eef0 7a40 	vmov.f32	s15, s0
 8002456:	4b6e      	ldr	r3, [pc, #440]	; (8002610 <_Z12YonelmeGorevv+0x364>)
 8002458:	edc3 7a00 	vstr	s15, [r3]

                			kontrolSinyali1_f = pwmOffset+Kp * abs(hata) + Ki * integral;
 800245c:	4b6b      	ldr	r3, [pc, #428]	; (800260c <_Z12YonelmeGorevv+0x360>)
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	eeb0 0a67 	vmov.f32	s0, s15
 8002466:	f7ff fd9c 	bl	8001fa2 <_ZSt3absf>
 800246a:	eeb0 7a40 	vmov.f32	s14, s0
 800246e:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <_Z12YonelmeGorevv+0x378>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002478:	4b6b      	ldr	r3, [pc, #428]	; (8002628 <_Z12YonelmeGorevv+0x37c>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002482:	4b6a      	ldr	r3, [pc, #424]	; (800262c <_Z12YonelmeGorevv+0x380>)
 8002484:	edd3 6a00 	vldr	s13, [r3]
 8002488:	4b61      	ldr	r3, [pc, #388]	; (8002610 <_Z12YonelmeGorevv+0x364>)
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002496:	4b66      	ldr	r3, [pc, #408]	; (8002630 <_Z12YonelmeGorevv+0x384>)
 8002498:	edc3 7a00 	vstr	s15, [r3]
                			kontrolSinyali1_f=isaret.ustSinirla(kontrolSinyali1_f, 1000);
 800249c:	4b64      	ldr	r3, [pc, #400]	; (8002630 <_Z12YonelmeGorevv+0x384>)
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024a6:	eeb0 0a67 	vmov.f32	s0, s15
 80024aa:	485d      	ldr	r0, [pc, #372]	; (8002620 <_Z12YonelmeGorevv+0x374>)
 80024ac:	f001 fdff 	bl	80040ae <_ZN6Isaret10ustSinirlaEfm>
 80024b0:	eef0 7a40 	vmov.f32	s15, s0
 80024b4:	4b5e      	ldr	r3, [pc, #376]	; (8002630 <_Z12YonelmeGorevv+0x384>)
 80024b6:	edc3 7a00 	vstr	s15, [r3]
                			kontrolSinyali1_f=isaret.altSinirla(kontrolSinyali1_f, 450);
 80024ba:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <_Z12YonelmeGorevv+0x384>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80024c4:	eeb0 0a67 	vmov.f32	s0, s15
 80024c8:	4855      	ldr	r0, [pc, #340]	; (8002620 <_Z12YonelmeGorevv+0x374>)
 80024ca:	f001 fe14 	bl	80040f6 <_ZN6Isaret10altSinirlaEfm>
 80024ce:	eef0 7a40 	vmov.f32	s15, s0
 80024d2:	4b57      	ldr	r3, [pc, #348]	; (8002630 <_Z12YonelmeGorevv+0x384>)
 80024d4:	edc3 7a00 	vstr	s15, [r3]
                			kontrolSinyali2_f = 300 - ((kontrolSinyali1_f - 450) * (300 - 75)) / (1000 - 450);
 80024d8:	4b55      	ldr	r3, [pc, #340]	; (8002630 <_Z12YonelmeGorevv+0x384>)
 80024da:	edd3 7a00 	vldr	s15, [r3]
 80024de:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002634 <_Z12YonelmeGorevv+0x388>
 80024e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024e6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002638 <_Z12YonelmeGorevv+0x38c>
 80024ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024ee:	eddf 6a53 	vldr	s13, [pc, #332]	; 800263c <_Z12YonelmeGorevv+0x390>
 80024f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024f6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002640 <_Z12YonelmeGorevv+0x394>
 80024fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024fe:	4b51      	ldr	r3, [pc, #324]	; (8002644 <_Z12YonelmeGorevv+0x398>)
 8002500:	edc3 7a00 	vstr	s15, [r3]
                			kontrolSinyali2_f=isaret.ustSinirla(kontrolSinyali2_f, 300);
 8002504:	4b4f      	ldr	r3, [pc, #316]	; (8002644 <_Z12YonelmeGorevv+0x398>)
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800250e:	eeb0 0a67 	vmov.f32	s0, s15
 8002512:	4843      	ldr	r0, [pc, #268]	; (8002620 <_Z12YonelmeGorevv+0x374>)
 8002514:	f001 fdcb 	bl	80040ae <_ZN6Isaret10ustSinirlaEfm>
 8002518:	eef0 7a40 	vmov.f32	s15, s0
 800251c:	4b49      	ldr	r3, [pc, #292]	; (8002644 <_Z12YonelmeGorevv+0x398>)
 800251e:	edc3 7a00 	vstr	s15, [r3]
                			kontrolSinyali2_f=isaret.altSinirla(kontrolSinyali2_f, 75);
 8002522:	4b48      	ldr	r3, [pc, #288]	; (8002644 <_Z12YonelmeGorevv+0x398>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	214b      	movs	r1, #75	; 0x4b
 800252a:	eeb0 0a67 	vmov.f32	s0, s15
 800252e:	483c      	ldr	r0, [pc, #240]	; (8002620 <_Z12YonelmeGorevv+0x374>)
 8002530:	f001 fde1 	bl	80040f6 <_ZN6Isaret10altSinirlaEfm>
 8002534:	eef0 7a40 	vmov.f32	s15, s0
 8002538:	4b42      	ldr	r3, [pc, #264]	; (8002644 <_Z12YonelmeGorevv+0x398>)
 800253a:	edc3 7a00 	vstr	s15, [r3]
                			if(hata < 0)
 800253e:	4b33      	ldr	r3, [pc, #204]	; (800260c <_Z12YonelmeGorevv+0x360>)
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	d51d      	bpl.n	800258a <_Z12YonelmeGorevv+0x2de>
                			{
                				motorSag.PWM(kontrolSinyali1_f, TIM_CHANNEL_2);
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <_Z12YonelmeGorevv+0x384>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002558:	ee17 3a90 	vmov	r3, s15
 800255c:	b29b      	uxth	r3, r3
 800255e:	2204      	movs	r2, #4
 8002560:	4619      	mov	r1, r3
 8002562:	4839      	ldr	r0, [pc, #228]	; (8002648 <_Z12YonelmeGorevv+0x39c>)
 8002564:	f002 f8ec 	bl	8004740 <_ZN5Motor3PWMEtm>
                				motorSol.PWM(kontrolSinyali2_f, TIM_CHANNEL_4);
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <_Z12YonelmeGorevv+0x398>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002572:	ee17 3a90 	vmov	r3, s15
 8002576:	b29b      	uxth	r3, r3
 8002578:	220c      	movs	r2, #12
 800257a:	4619      	mov	r1, r3
 800257c:	4833      	ldr	r0, [pc, #204]	; (800264c <_Z12YonelmeGorevv+0x3a0>)
 800257e:	f002 f8df 	bl	8004740 <_ZN5Motor3PWMEtm>
                				araba.solGit();
 8002582:	481e      	ldr	r0, [pc, #120]	; (80025fc <_Z12YonelmeGorevv+0x350>)
 8002584:	f002 f970 	bl	8004868 <_ZN5Araba6solGitEv>
 8002588:	e01c      	b.n	80025c4 <_Z12YonelmeGorevv+0x318>
                			}
                			else
                			{
                				motorSol.PWM(kontrolSinyali1_f, TIM_CHANNEL_4);
 800258a:	4b29      	ldr	r3, [pc, #164]	; (8002630 <_Z12YonelmeGorevv+0x384>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002594:	ee17 3a90 	vmov	r3, s15
 8002598:	b29b      	uxth	r3, r3
 800259a:	220c      	movs	r2, #12
 800259c:	4619      	mov	r1, r3
 800259e:	482b      	ldr	r0, [pc, #172]	; (800264c <_Z12YonelmeGorevv+0x3a0>)
 80025a0:	f002 f8ce 	bl	8004740 <_ZN5Motor3PWMEtm>
                				motorSag.PWM(kontrolSinyali2_f, TIM_CHANNEL_2);
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <_Z12YonelmeGorevv+0x398>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ae:	ee17 3a90 	vmov	r3, s15
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2204      	movs	r2, #4
 80025b6:	4619      	mov	r1, r3
 80025b8:	4823      	ldr	r0, [pc, #140]	; (8002648 <_Z12YonelmeGorevv+0x39c>)
 80025ba:	f002 f8c1 	bl	8004740 <_ZN5Motor3PWMEtm>
                				araba.sagGit();
 80025be:	480f      	ldr	r0, [pc, #60]	; (80025fc <_Z12YonelmeGorevv+0x350>)
 80025c0:	f002 f940 	bl	8004844 <_ZN5Araba6sagGitEv>
                			}
                			heading =*mag.HeadingOlustur(pitch,roll); // mag heading al
 80025c4:	4b22      	ldr	r3, [pc, #136]	; (8002650 <_Z12YonelmeGorevv+0x3a4>)
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <_Z12YonelmeGorevv+0x3a8>)
 80025cc:	ed93 7a00 	vldr	s14, [r3]
 80025d0:	eef0 0a47 	vmov.f32	s1, s14
 80025d4:	eeb0 0a67 	vmov.f32	s0, s15
 80025d8:	481f      	ldr	r0, [pc, #124]	; (8002658 <_Z12YonelmeGorevv+0x3ac>)
 80025da:	f001 ff39 	bl	8004450 <_ZN5MyMag14HeadingOlusturEff>
 80025de:	4603      	mov	r3, r0
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <_Z12YonelmeGorevv+0x35c>)
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e04f      	b.n	8002688 <_Z12YonelmeGorevv+0x3dc>
 80025e8:	20000a9c 	.word	0x20000a9c
 80025ec:	20000c20 	.word	0x20000c20
 80025f0:	2000000c 	.word	0x2000000c
 80025f4:	4211d39f 	.word	0x4211d39f
 80025f8:	4224dea6 	.word	0x4224dea6
 80025fc:	20000580 	.word	0x20000580
 8002600:	20000c18 	.word	0x20000c18
 8002604:	20000c1c 	.word	0x20000c1c
 8002608:	20000c08 	.word	0x20000c08
 800260c:	20000ba4 	.word	0x20000ba4
 8002610:	20000bb0 	.word	0x20000bb0
 8002614:	43340000 	.word	0x43340000
 8002618:	43b40000 	.word	0x43b40000
 800261c:	c3340000 	.word	0xc3340000
 8002620:	20000ba0 	.word	0x20000ba0
 8002624:	20000000 	.word	0x20000000
 8002628:	20000008 	.word	0x20000008
 800262c:	20000004 	.word	0x20000004
 8002630:	20000ba8 	.word	0x20000ba8
 8002634:	43e10000 	.word	0x43e10000
 8002638:	43610000 	.word	0x43610000
 800263c:	44098000 	.word	0x44098000
 8002640:	43960000 	.word	0x43960000
 8002644:	20000bac 	.word	0x20000bac
 8002648:	20000530 	.word	0x20000530
 800264c:	20000558 	.word	0x20000558
 8002650:	20000bfc 	.word	0x20000bfc
 8002654:	20000c00 	.word	0x20000c00
 8002658:	200004a0 	.word	0x200004a0
                		}
                		else
                		{
                			motorSag.PWM(1000, TIM_CHANNEL_2);
 800265c:	2204      	movs	r2, #4
 800265e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002662:	481f      	ldr	r0, [pc, #124]	; (80026e0 <_Z12YonelmeGorevv+0x434>)
 8002664:	f002 f86c 	bl	8004740 <_ZN5Motor3PWMEtm>
                			motorSol.PWM(1000, TIM_CHANNEL_4);
 8002668:	220c      	movs	r2, #12
 800266a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800266e:	481d      	ldr	r0, [pc, #116]	; (80026e4 <_Z12YonelmeGorevv+0x438>)
 8002670:	f002 f866 	bl	8004740 <_ZN5Motor3PWMEtm>
                			araba.Dur();
 8002674:	481c      	ldr	r0, [pc, #112]	; (80026e8 <_Z12YonelmeGorevv+0x43c>)
 8002676:	f002 f8d3 	bl	8004820 <_ZN5Araba3DurEv>
                			integral=0;
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <_Z12YonelmeGorevv+0x440>)
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
                			yonelmeBayrak=false;
 8002682:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <_Z12YonelmeGorevv+0x444>)
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
                		}
                	}
                	hedefbayrak = false;
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <_Z12YonelmeGorevv+0x448>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]

                	break;
 800268e:	bf00      	nop
        while(hedefbayrak)
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <_Z12YonelmeGorevv+0x448>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f47f ae23 	bne.w	80022e0 <_Z12YonelmeGorevv+0x34>
            }
        }
        if(gidilecekMesafe_f < 7)
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <_Z12YonelmeGorevv+0x44c>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80026a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ac:	d505      	bpl.n	80026ba <_Z12YonelmeGorevv+0x40e>
        {
            ArayuzPaket.GidilecekNoktaBayrak = false;
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <_Z12YonelmeGorevv+0x450>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	70da      	strb	r2, [r3, #3]

            araba.Dur();
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <_Z12YonelmeGorevv+0x43c>)
 80026b6:	f002 f8b3 	bl	8004820 <_ZN5Araba3DurEv>
        }
    }
    if(ArayuzPaket.arabaDurBayrak==true)
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <_Z12YonelmeGorevv+0x450>)
 80026bc:	799b      	ldrb	r3, [r3, #6]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d108      	bne.n	80026d4 <_Z12YonelmeGorevv+0x428>
    {
    	araba.Dur();
 80026c2:	4809      	ldr	r0, [pc, #36]	; (80026e8 <_Z12YonelmeGorevv+0x43c>)
 80026c4:	f002 f8ac 	bl	8004820 <_ZN5Araba3DurEv>
    	ArayuzPaket.GidilecekNoktaBayrak=false;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <_Z12YonelmeGorevv+0x450>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	70da      	strb	r2, [r3, #3]
    	ArayuzPaket.arabaDurBayrak=false;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <_Z12YonelmeGorevv+0x450>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	719a      	strb	r2, [r3, #6]
    }
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	ecbd 8b02 	vpop	{d8}
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000530 	.word	0x20000530
 80026e4:	20000558 	.word	0x20000558
 80026e8:	20000580 	.word	0x20000580
 80026ec:	20000bb0 	.word	0x20000bb0
 80026f0:	20000c20 	.word	0x20000c20
 80026f4:	2000000c 	.word	0x2000000c
 80026f8:	20000c18 	.word	0x20000c18
 80026fc:	20000a9c 	.word	0x20000a9c

08002700 <_Z18YonelmeBayrakGorevv>:

void YonelmeBayrakGorev()
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
	yonelmeBayrak=true;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <_Z18YonelmeBayrakGorevv+0x14>)
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	20000c20 	.word	0x20000c20

08002718 <_Z10ArayuzTaskv>:
void ArayuzTask()
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	 if(ArayuzPaket.PaketCozBayrak)
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <_Z10ArayuzTaskv+0xa8>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d032      	beq.n	800278a <_Z10ArayuzTaskv+0x72>
	 {
		 ArayuzPaket.PaketCozBayrak = false;
 8002724:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <_Z10ArayuzTaskv+0xa8>)
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
		 ArayuzPaket.PaketCoz();
 800272a:	4825      	ldr	r0, [pc, #148]	; (80027c0 <_Z10ArayuzTaskv+0xa8>)
 800272c:	f002 fd36 	bl	800519c <_ZN5Paket8PaketCozEv>
		 if(ArayuzPaket.VersiyonPaketBayrak==true)
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <_Z10ArayuzTaskv+0xa8>)
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d113      	bne.n	8002760 <_Z10ArayuzTaskv+0x48>
		 {
			 VersiyonPaket.VersiyonPaketOlustur(0, 0, 9);
 8002738:	2309      	movs	r3, #9
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	4821      	ldr	r0, [pc, #132]	; (80027c4 <_Z10ArayuzTaskv+0xac>)
 8002740:	f002 fbef 	bl	8004f22 <_ZN5Paket20VersiyonPaketOlusturEhhh>
			 VersiyonPaket.versiyonPaketCagir(VersiyonVeriPaket);
 8002744:	4920      	ldr	r1, [pc, #128]	; (80027c8 <_Z10ArayuzTaskv+0xb0>)
 8002746:	481f      	ldr	r0, [pc, #124]	; (80027c4 <_Z10ArayuzTaskv+0xac>)
 8002748:	f002 fcbf 	bl	80050ca <_ZN5Paket18versiyonPaketCagirEPh>
			 HAL_UART_Transmit(&huart3, VersiyonVeriPaket, sizeof(VersiyonVeriPaket), 1000);
 800274c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002750:	2208      	movs	r2, #8
 8002752:	491d      	ldr	r1, [pc, #116]	; (80027c8 <_Z10ArayuzTaskv+0xb0>)
 8002754:	481d      	ldr	r0, [pc, #116]	; (80027cc <_Z10ArayuzTaskv+0xb4>)
 8002756:	f007 f879 	bl	800984c <HAL_UART_Transmit>
			 ArayuzPaket.VersiyonPaketBayrak=false;
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <_Z10ArayuzTaskv+0xa8>)
 800275c:	2200      	movs	r2, #0
 800275e:	705a      	strb	r2, [r3, #1]
		 }
		 if(ArayuzPaket.YoklamaPaketFlag==true)
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <_Z10ArayuzTaskv+0xa8>)
 8002762:	791b      	ldrb	r3, [r3, #4]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d110      	bne.n	800278a <_Z10ArayuzTaskv+0x72>
		 {
			 YoklamaPaket.YoklamaPaketOlustur();
 8002768:	4819      	ldr	r0, [pc, #100]	; (80027d0 <_Z10ArayuzTaskv+0xb8>)
 800276a:	f002 fc1c 	bl	8004fa6 <_ZN5Paket19YoklamaPaketOlusturEv>
			 YoklamaPaket.yoklamaPaketCagir(YoklamaVeriPaket);
 800276e:	4919      	ldr	r1, [pc, #100]	; (80027d4 <_Z10ArayuzTaskv+0xbc>)
 8002770:	4817      	ldr	r0, [pc, #92]	; (80027d0 <_Z10ArayuzTaskv+0xb8>)
 8002772:	f002 fcba 	bl	80050ea <_ZN5Paket17yoklamaPaketCagirEPh>
			 HAL_UART_Transmit(&huart3, YoklamaVeriPaket, sizeof(YoklamaVeriPaket), 1000);
 8002776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277a:	2208      	movs	r2, #8
 800277c:	4915      	ldr	r1, [pc, #84]	; (80027d4 <_Z10ArayuzTaskv+0xbc>)
 800277e:	4813      	ldr	r0, [pc, #76]	; (80027cc <_Z10ArayuzTaskv+0xb4>)
 8002780:	f007 f864 	bl	800984c <HAL_UART_Transmit>
			 ArayuzPaket.YoklamaPaketFlag=false;
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <_Z10ArayuzTaskv+0xa8>)
 8002786:	2200      	movs	r2, #0
 8002788:	711a      	strb	r2, [r3, #4]
		 }
	 }
	 if(ArayuzPaket.GidilecekNoktaBayrak==false && ArayuzPaket.RotaGeldiBayrak==true)
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <_Z10ArayuzTaskv+0xa8>)
 800278c:	78db      	ldrb	r3, [r3, #3]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d114      	bne.n	80027bc <_Z10ArayuzTaskv+0xa4>
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <_Z10ArayuzTaskv+0xa8>)
 8002794:	795b      	ldrb	r3, [r3, #5]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d110      	bne.n	80027bc <_Z10ArayuzTaskv+0xa4>
	 {
		 RotaPaket.RotaPaketOlustur();
 800279a:	480f      	ldr	r0, [pc, #60]	; (80027d8 <_Z10ArayuzTaskv+0xc0>)
 800279c:	f002 fc3c 	bl	8005018 <_ZN5Paket16RotaPaketOlusturEv>
		 RotaPaket.rotaPaketCagir(RotaVeriPaket);
 80027a0:	490e      	ldr	r1, [pc, #56]	; (80027dc <_Z10ArayuzTaskv+0xc4>)
 80027a2:	480d      	ldr	r0, [pc, #52]	; (80027d8 <_Z10ArayuzTaskv+0xc0>)
 80027a4:	f002 fcb1 	bl	800510a <_ZN5Paket14rotaPaketCagirEPh>
		 HAL_UART_Transmit(&huart3, RotaVeriPaket, sizeof(RotaVeriPaket), 1000);
 80027a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ac:	2208      	movs	r2, #8
 80027ae:	490b      	ldr	r1, [pc, #44]	; (80027dc <_Z10ArayuzTaskv+0xc4>)
 80027b0:	4806      	ldr	r0, [pc, #24]	; (80027cc <_Z10ArayuzTaskv+0xb4>)
 80027b2:	f007 f84b 	bl	800984c <HAL_UART_Transmit>
		 ArayuzPaket.RotaGeldiBayrak=false;
 80027b6:	4b02      	ldr	r3, [pc, #8]	; (80027c0 <_Z10ArayuzTaskv+0xa8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	715a      	strb	r2, [r3, #5]
	 }
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000a9c 	.word	0x20000a9c
 80027c4:	20000790 	.word	0x20000790
 80027c8:	20000be4 	.word	0x20000be4
 80027cc:	20000d00 	.word	0x20000d00
 80027d0:	20000894 	.word	0x20000894
 80027d4:	20000bec 	.word	0x20000bec
 80027d8:	20000998 	.word	0x20000998
 80027dc:	20000bf4 	.word	0x20000bf4

080027e0 <TIM3_IRQHandler>:

extern "C" void TIM3_IRQHandler()
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	gorev.GorevBayrakKaldir();
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <TIM3_IRQHandler+0x10>)
 80027e6:	f003 f8a9 	bl	800593c <_ZN13Gorevyonetici17GorevBayrakKaldirEv>
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000026c 	.word	0x2000026c

080027f4 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a08      	ldr	r2, [pc, #32]	; (8002824 <HAL_UART_RxCpltCallback+0x30>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d102      	bne.n	800280c <HAL_UART_RxCpltCallback+0x18>
	{
		gps.UartRxCpltCallback();
 8002806:	4808      	ldr	r0, [pc, #32]	; (8002828 <HAL_UART_RxCpltCallback+0x34>)
 8002808:	f001 f80f 	bl	800382a <_ZN3GPS18UartRxCpltCallbackEv>
	}
	if (huart->Instance == USART3)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a06      	ldr	r2, [pc, #24]	; (800282c <HAL_UART_RxCpltCallback+0x38>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d102      	bne.n	800281c <HAL_UART_RxCpltCallback+0x28>
	{
		ArayuzPaket.ArayuzDataAlveBayrakKaldir();
 8002816:	4806      	ldr	r0, [pc, #24]	; (8002830 <HAL_UART_RxCpltCallback+0x3c>)
 8002818:	f002 fc88 	bl	800512c <_ZN5Paket26ArayuzDataAlveBayrakKaldirEv>
	}
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40004400 	.word	0x40004400
 8002828:	20000358 	.word	0x20000358
 800282c:	40004800 	.word	0x40004800
 8002830:	20000a9c 	.word	0x20000a9c

08002834 <_Z41__static_initialization_and_destruction_0ii>:
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af04      	add	r7, sp, #16
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d169      	bne.n	8002918 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800284a:	4293      	cmp	r3, r2
 800284c:	d164      	bne.n	8002918 <_Z41__static_initialization_and_destruction_0ii+0xe4>
#include "IsaretIsleme.h"
#include "Mag.h"
/*************************Nesneler**************************/
//Uart uart3(USART3);

Timer timer3(TIM3);
 800284e:	4934      	ldr	r1, [pc, #208]	; (8002920 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002850:	4834      	ldr	r0, [pc, #208]	; (8002924 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002852:	f003 f997 	bl	8005b84 <_ZN5TimerC1EP11TIM_TypeDef>
//Timer timer2(TIM2);
Gorevyonetici gorev(TIM3);
 8002856:	4932      	ldr	r1, [pc, #200]	; (8002920 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002858:	4833      	ldr	r0, [pc, #204]	; (8002928 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800285a:	f002 ffff 	bl	800585c <_ZN13GorevyoneticiC1EP11TIM_TypeDef>
MyImu imu(&hi2c1);
 800285e:	4933      	ldr	r1, [pc, #204]	; (800292c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002860:	4833      	ldr	r0, [pc, #204]	; (8002930 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002862:	f001 f845 	bl	80038f0 <_ZN5MyImuC1EP17I2C_HandleTypeDef>
GPS gps(&huart2);
 8002866:	4933      	ldr	r1, [pc, #204]	; (8002934 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002868:	4833      	ldr	r0, [pc, #204]	; (8002938 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800286a:	f000 ffa7 	bl	80037bc <_ZN3GPSC1EP20__UART_HandleTypeDef>
MyMag mag(&hi2c1);
 800286e:	492f      	ldr	r1, [pc, #188]	; (800292c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002870:	4832      	ldr	r0, [pc, #200]	; (800293c <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8002872:	f001 fccf 	bl	8004214 <_ZN5MyMagC1EP17I2C_HandleTypeDef>
Barometre barometre(&hi2c1, 0xEE);
 8002876:	22ee      	movs	r2, #238	; 0xee
 8002878:	492c      	ldr	r1, [pc, #176]	; (800292c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800287a:	4831      	ldr	r0, [pc, #196]	; (8002940 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 800287c:	f000 fc8c 	bl	8003198 <_ZN9BarometreC1EP17I2C_HandleTypeDefh>
Motor motorSag(&htim1, &htim2, GPIOD, GPIO_PIN_1, GPIOD, GPIO_PIN_2);
 8002880:	2304      	movs	r3, #4
 8002882:	9302      	str	r3, [sp, #8]
 8002884:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	2302      	movs	r3, #2
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800288e:	4a2e      	ldr	r2, [pc, #184]	; (8002948 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8002890:	492e      	ldr	r1, [pc, #184]	; (800294c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8002892:	482f      	ldr	r0, [pc, #188]	; (8002950 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8002894:	f001 fef4 	bl	8004680 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_P12GPIO_TypeDeftS3_t>
Motor motorSol(&htim1, &htim2, GPIOB, GPIO_PIN_4, GPIOB, GPIO_PIN_5);
 8002898:	2320      	movs	r3, #32
 800289a:	9302      	str	r3, [sp, #8]
 800289c:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2310      	movs	r3, #16
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80028a6:	4a28      	ldr	r2, [pc, #160]	; (8002948 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80028a8:	4928      	ldr	r1, [pc, #160]	; (800294c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80028aa:	482b      	ldr	r0, [pc, #172]	; (8002958 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80028ac:	f001 fee8 	bl	8004680 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_P12GPIO_TypeDeftS3_t>
Araba araba(motorSol,motorSag); //sol 4 ,sag 2
 80028b0:	4a27      	ldr	r2, [pc, #156]	; (8002950 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80028b2:	4929      	ldr	r1, [pc, #164]	; (8002958 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80028b4:	4829      	ldr	r0, [pc, #164]	; (800295c <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80028b6:	f001 ffa0 	bl	80047fa <_ZN5ArabaC1ER5MotorS1_>

Paket GpsPaket(0x12, 0x34, 0x01, 0x11); //veri boyutu 17
 80028ba:	2311      	movs	r3, #17
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2301      	movs	r3, #1
 80028c0:	2234      	movs	r2, #52	; 0x34
 80028c2:	2112      	movs	r1, #18
 80028c4:	4826      	ldr	r0, [pc, #152]	; (8002960 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80028c6:	f002 f9e0 	bl	8004c8a <_ZN5PaketC1Ehhhh>
Paket ImuPaket(0x12, 0x34, 0x02, 0x11);//veri boyutu 17
 80028ca:	2311      	movs	r3, #17
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2302      	movs	r3, #2
 80028d0:	2234      	movs	r2, #52	; 0x34
 80028d2:	2112      	movs	r1, #18
 80028d4:	4823      	ldr	r0, [pc, #140]	; (8002964 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80028d6:	f002 f9d8 	bl	8004c8a <_ZN5PaketC1Ehhhh>
Paket VersiyonPaket(0x12, 0x34, 0x03, 0x04); //veri boyutu 4
 80028da:	2304      	movs	r3, #4
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2303      	movs	r3, #3
 80028e0:	2234      	movs	r2, #52	; 0x34
 80028e2:	2112      	movs	r1, #18
 80028e4:	4820      	ldr	r0, [pc, #128]	; (8002968 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80028e6:	f002 f9d0 	bl	8004c8a <_ZN5PaketC1Ehhhh>
Paket YoklamaPaket(0x12, 0x34, 0x04, 0x04);//veri boyutu 4
 80028ea:	2304      	movs	r3, #4
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2304      	movs	r3, #4
 80028f0:	2234      	movs	r2, #52	; 0x34
 80028f2:	2112      	movs	r1, #18
 80028f4:	481d      	ldr	r0, [pc, #116]	; (800296c <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80028f6:	f002 f9c8 	bl	8004c8a <_ZN5PaketC1Ehhhh>
Paket RotaPaket(0x12, 0x34, 0x05, 0x04);//veri boyutu 4
 80028fa:	2304      	movs	r3, #4
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	2305      	movs	r3, #5
 8002900:	2234      	movs	r2, #52	; 0x34
 8002902:	2112      	movs	r1, #18
 8002904:	481a      	ldr	r0, [pc, #104]	; (8002970 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8002906:	f002 f9c0 	bl	8004c8a <_ZN5PaketC1Ehhhh>

Paket ArayuzPaket(&huart3);
 800290a:	491a      	ldr	r1, [pc, #104]	; (8002974 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800290c:	481a      	ldr	r0, [pc, #104]	; (8002978 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800290e:	f002 f979 	bl	8004c04 <_ZN5PaketC1EP20__UART_HandleTypeDef>
Isaret isaret;
 8002912:	481a      	ldr	r0, [pc, #104]	; (800297c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8002914:	f001 fbc0 	bl	8004098 <_ZN6IsaretC1Ev>
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40000400 	.word	0x40000400
 8002924:	20000268 	.word	0x20000268
 8002928:	2000026c 	.word	0x2000026c
 800292c:	20000214 	.word	0x20000214
 8002930:	200002f8 	.word	0x200002f8
 8002934:	20000cb8 	.word	0x20000cb8
 8002938:	20000358 	.word	0x20000358
 800293c:	200004a0 	.word	0x200004a0
 8002940:	200004c0 	.word	0x200004c0
 8002944:	40020c00 	.word	0x40020c00
 8002948:	20000c70 	.word	0x20000c70
 800294c:	20000c28 	.word	0x20000c28
 8002950:	20000530 	.word	0x20000530
 8002954:	40020400 	.word	0x40020400
 8002958:	20000558 	.word	0x20000558
 800295c:	20000580 	.word	0x20000580
 8002960:	20000588 	.word	0x20000588
 8002964:	2000068c 	.word	0x2000068c
 8002968:	20000790 	.word	0x20000790
 800296c:	20000894 	.word	0x20000894
 8002970:	20000998 	.word	0x20000998
 8002974:	20000d00 	.word	0x20000d00
 8002978:	20000a9c 	.word	0x20000a9c
 800297c:	20000ba0 	.word	0x20000ba0

08002980 <_GLOBAL__sub_I_timer3>:
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
 8002984:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002988:	2001      	movs	r0, #1
 800298a:	f7ff ff53 	bl	8002834 <_Z41__static_initialization_and_destruction_0ii>
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_MspInit+0x4c>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <HAL_MspInit+0x4c>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_MspInit+0x4c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_MspInit+0x4c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a08      	ldr	r2, [pc, #32]	; (80029dc <HAL_MspInit+0x4c>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_MspInit+0x4c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029ce:	2007      	movs	r0, #7
 80029d0:	f003 fb6e 	bl	80060b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800

080029e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029e4:	e7fe      	b.n	80029e4 <NMI_Handler+0x4>

080029e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ea:	e7fe      	b.n	80029ea <HardFault_Handler+0x4>

080029ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <MemManage_Handler+0x4>

080029f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f6:	e7fe      	b.n	80029f6 <BusFault_Handler+0x4>

080029f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029fc:	e7fe      	b.n	80029fc <UsageFault_Handler+0x4>

080029fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a2c:	f003 fa2c 	bl	8005e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002a38:	2080      	movs	r0, #128	; 0x80
 8002a3a:	f003 fdc3 	bl	80065c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002a3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a42:	f003 fdbf 	bl	80065c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002a52:	f006 f963 	bl	8008d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000c28 	.word	0x20000c28

08002a60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <USART2_IRQHandler+0x10>)
 8002a66:	f006 ffa1 	bl	80099ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000cb8 	.word	0x20000cb8

08002a74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <USART3_IRQHandler+0x10>)
 8002a7a:	f006 ff97 	bl	80099ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000d00 	.word	0x20000d00

08002a88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return 1;
 8002a8c:	2301      	movs	r3, #1
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <_kill>:

int _kill(int pid, int sig)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aa2:	f00b facb 	bl	800e03c <__errno>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2216      	movs	r2, #22
 8002aaa:	601a      	str	r2, [r3, #0]
  return -1;
 8002aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_exit>:

void _exit (int status)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ffe7 	bl	8002a98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002aca:	e7fe      	b.n	8002aca <_exit+0x12>

08002acc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e00a      	b.n	8002af4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ade:	f3af 8000 	nop.w
 8002ae2:	4601      	mov	r1, r0
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	60ba      	str	r2, [r7, #8]
 8002aea:	b2ca      	uxtb	r2, r1
 8002aec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3301      	adds	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	dbf0      	blt.n	8002ade <_read+0x12>
  }

  return len;
 8002afc:	687b      	ldr	r3, [r7, #4]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e009      	b.n	8002b2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	60ba      	str	r2, [r7, #8]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	dbf1      	blt.n	8002b18 <_write+0x12>
  }
  return len;
 8002b34:	687b      	ldr	r3, [r7, #4]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <_close>:

int _close(int file)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b66:	605a      	str	r2, [r3, #4]
  return 0;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <_isatty>:

int _isatty(int file)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb0:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <_sbrk+0x5c>)
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <_sbrk+0x60>)
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <_sbrk+0x64>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <_sbrk+0x64>)
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <_sbrk+0x68>)
 8002bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <_sbrk+0x64>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d207      	bcs.n	8002be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bd8:	f00b fa30 	bl	800e03c <__errno>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	220c      	movs	r2, #12
 8002be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295
 8002be6:	e009      	b.n	8002bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <_sbrk+0x64>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <_sbrk+0x64>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <_sbrk+0x64>)
 8002bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20020000 	.word	0x20020000
 8002c08:	00000400 	.word	0x00000400
 8002c0c:	20000c24 	.word	0x20000c24
 8002c10:	20000e98 	.word	0x20000e98

08002c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <SystemInit+0x20>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <SystemInit+0x20>)
 8002c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b092      	sub	sp, #72	; 0x48
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
 8002c58:	615a      	str	r2, [r3, #20]
 8002c5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	2220      	movs	r2, #32
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f00b f989 	bl	800df7a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c68:	4b45      	ldr	r3, [pc, #276]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002c6a:	4a46      	ldr	r2, [pc, #280]	; (8002d84 <MX_TIM1_Init+0x14c>)
 8002c6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8002c6e:	4b44      	ldr	r3, [pc, #272]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002c70:	2254      	movs	r2, #84	; 0x54
 8002c72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c74:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002c7a:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002c7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c82:	4b3f      	ldr	r3, [pc, #252]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c88:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8e:	4b3c      	ldr	r3, [pc, #240]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c94:	483a      	ldr	r0, [pc, #232]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002c96:	f005 fdf5 	bl	8008884 <HAL_TIM_PWM_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002ca0:	f7ff f97a 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4833      	ldr	r0, [pc, #204]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002cb4:	f006 fc98 	bl	80095e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002cbe:	f7ff f96b 	bl	8001f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cc2:	2360      	movs	r3, #96	; 0x60
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4826      	ldr	r0, [pc, #152]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002ce8:	f006 f908 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002cf2:	f7ff f951 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4820      	ldr	r0, [pc, #128]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002d00:	f006 f8fc 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002d0a:	f7ff f945 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d12:	2208      	movs	r2, #8
 8002d14:	4619      	mov	r1, r3
 8002d16:	481a      	ldr	r0, [pc, #104]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002d18:	f006 f8f0 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002d22:	f7ff f939 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4814      	ldr	r0, [pc, #80]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002d30:	f006 f8e4 	bl	8008efc <HAL_TIM_PWM_ConfigChannel>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002d3a:	f7ff f92d 	bl	8001f98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4807      	ldr	r0, [pc, #28]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002d62:	f006 fcbd 	bl	80096e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002d6c:	f7ff f914 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d70:	4803      	ldr	r0, [pc, #12]	; (8002d80 <MX_TIM1_Init+0x148>)
 8002d72:	f000 f8cb 	bl	8002f0c <HAL_TIM_MspPostInit>

}
 8002d76:	bf00      	nop
 8002d78:	3748      	adds	r7, #72	; 0x48
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000c28 	.word	0x20000c28
 8002d84:	40010000 	.word	0x40010000

08002d88 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d8e:	f107 030c 	add.w	r3, r7, #12
 8002d92:	2224      	movs	r2, #36	; 0x24
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f00b f8ef 	bl	800df7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002da4:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <MX_TIM2_Init+0xa4>)
 8002da6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002daa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <MX_TIM2_Init+0xa4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <MX_TIM2_Init+0xa4>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <MX_TIM2_Init+0xa4>)
 8002dba:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <MX_TIM2_Init+0xa4>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc6:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <MX_TIM2_Init+0xa4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002de0:	2300      	movs	r3, #0
 8002de2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002de4:	2301      	movs	r3, #1
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002de8:	2300      	movs	r3, #0
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002df0:	f107 030c 	add.w	r3, r7, #12
 8002df4:	4619      	mov	r1, r3
 8002df6:	480d      	ldr	r0, [pc, #52]	; (8002e2c <MX_TIM2_Init+0xa4>)
 8002df8:	f005 fe5c 	bl	8008ab4 <HAL_TIM_Encoder_Init>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002e02:	f7ff f8c9 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4806      	ldr	r0, [pc, #24]	; (8002e2c <MX_TIM2_Init+0xa4>)
 8002e14:	f006 fbe8 	bl	80095e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002e1e:	f7ff f8bb 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e22:	bf00      	nop
 8002e24:	3730      	adds	r7, #48	; 0x30
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000c70 	.word	0x20000c70

08002e30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <HAL_TIM_PWM_MspInit+0x48>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d115      	bne.n	8002e6e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <HAL_TIM_PWM_MspInit+0x4c>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <HAL_TIM_PWM_MspInit+0x4c>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6453      	str	r3, [r2, #68]	; 0x44
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_TIM_PWM_MspInit+0x4c>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2100      	movs	r1, #0
 8002e62:	2019      	movs	r0, #25
 8002e64:	f003 f92f 	bl	80060c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e68:	2019      	movs	r0, #25
 8002e6a:	f003 f948 	bl	80060fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40010000 	.word	0x40010000
 8002e7c:	40023800 	.word	0x40023800

08002e80 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea0:	d12c      	bne.n	8002efc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	4b17      	ldr	r3, [pc, #92]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a16      	ldr	r2, [pc, #88]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x84>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x84>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a0f      	ldr	r2, [pc, #60]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002eda:	f248 0302 	movw	r3, #32770	; 0x8002
 8002ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eec:	2301      	movs	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4804      	ldr	r0, [pc, #16]	; (8002f08 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ef8:	f003 f9ae 	bl	8006258 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002efc:	bf00      	nop
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40020000 	.word	0x40020000

08002f0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 030c 	add.w	r3, r7, #12
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <HAL_TIM_MspPostInit+0x68>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d11e      	bne.n	8002f6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_TIM_MspPostInit+0x6c>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <HAL_TIM_MspPostInit+0x6c>)
 8002f38:	f043 0310 	orr.w	r3, r3, #16
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_TIM_MspPostInit+0x6c>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002f4a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002f4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	4619      	mov	r1, r3
 8002f66:	4805      	ldr	r0, [pc, #20]	; (8002f7c <HAL_TIM_MspPostInit+0x70>)
 8002f68:	f003 f976 	bl	8006258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f6c:	bf00      	nop
 8002f6e:	3720      	adds	r7, #32
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40021000 	.word	0x40021000

08002f80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <MX_USART2_UART_Init+0x50>)
 8002f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002f8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fb6:	4805      	ldr	r0, [pc, #20]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fb8:	f006 fbf8 	bl	80097ac <HAL_UART_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fc2:	f7fe ffe9 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000cb8 	.word	0x20000cb8
 8002fd0:	40004400 	.word	0x40004400

08002fd4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8002fda:	4a12      	ldr	r2, [pc, #72]	; (8003024 <MX_USART3_UART_Init+0x50>)
 8002fdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8002fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fe4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8002ffa:	220c      	movs	r2, #12
 8002ffc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800300a:	4805      	ldr	r0, [pc, #20]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 800300c:	f006 fbce 	bl	80097ac <HAL_UART_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003016:	f7fe ffbf 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000d00 	.word	0x20000d00
 8003024:	40004800 	.word	0x40004800

08003028 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08c      	sub	sp, #48	; 0x30
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	f107 031c 	add.w	r3, r7, #28
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a3a      	ldr	r2, [pc, #232]	; (8003130 <HAL_UART_MspInit+0x108>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d134      	bne.n	80030b4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	4b39      	ldr	r3, [pc, #228]	; (8003134 <HAL_UART_MspInit+0x10c>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a38      	ldr	r2, [pc, #224]	; (8003134 <HAL_UART_MspInit+0x10c>)
 8003054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b36      	ldr	r3, [pc, #216]	; (8003134 <HAL_UART_MspInit+0x10c>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	4b32      	ldr	r3, [pc, #200]	; (8003134 <HAL_UART_MspInit+0x10c>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a31      	ldr	r2, [pc, #196]	; (8003134 <HAL_UART_MspInit+0x10c>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	4b2f      	ldr	r3, [pc, #188]	; (8003134 <HAL_UART_MspInit+0x10c>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003082:	230c      	movs	r3, #12
 8003084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003086:	2302      	movs	r3, #2
 8003088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308e:	2303      	movs	r3, #3
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003092:	2307      	movs	r3, #7
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003096:	f107 031c 	add.w	r3, r7, #28
 800309a:	4619      	mov	r1, r3
 800309c:	4826      	ldr	r0, [pc, #152]	; (8003138 <HAL_UART_MspInit+0x110>)
 800309e:	f003 f8db 	bl	8006258 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	2026      	movs	r0, #38	; 0x26
 80030a8:	f003 f80d 	bl	80060c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030ac:	2026      	movs	r0, #38	; 0x26
 80030ae:	f003 f826 	bl	80060fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80030b2:	e039      	b.n	8003128 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a20      	ldr	r2, [pc, #128]	; (800313c <HAL_UART_MspInit+0x114>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d134      	bne.n	8003128 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <HAL_UART_MspInit+0x10c>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a1b      	ldr	r2, [pc, #108]	; (8003134 <HAL_UART_MspInit+0x10c>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40
 80030ce:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_UART_MspInit+0x10c>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <HAL_UART_MspInit+0x10c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a14      	ldr	r2, [pc, #80]	; (8003134 <HAL_UART_MspInit+0x10c>)
 80030e4:	f043 0308 	orr.w	r3, r3, #8
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_UART_MspInit+0x10c>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003104:	2303      	movs	r3, #3
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003108:	2307      	movs	r3, #7
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800310c:	f107 031c 	add.w	r3, r7, #28
 8003110:	4619      	mov	r1, r3
 8003112:	480b      	ldr	r0, [pc, #44]	; (8003140 <HAL_UART_MspInit+0x118>)
 8003114:	f003 f8a0 	bl	8006258 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003118:	2200      	movs	r2, #0
 800311a:	2100      	movs	r1, #0
 800311c:	2027      	movs	r0, #39	; 0x27
 800311e:	f002 ffd2 	bl	80060c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003122:	2027      	movs	r0, #39	; 0x27
 8003124:	f002 ffeb 	bl	80060fe <HAL_NVIC_EnableIRQ>
}
 8003128:	bf00      	nop
 800312a:	3730      	adds	r7, #48	; 0x30
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40004400 	.word	0x40004400
 8003134:	40023800 	.word	0x40023800
 8003138:	40020000 	.word	0x40020000
 800313c:	40004800 	.word	0x40004800
 8003140:	40020c00 	.word	0x40020c00

08003144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800317c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003148:	f7ff fd64 	bl	8002c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800314c:	480c      	ldr	r0, [pc, #48]	; (8003180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800314e:	490d      	ldr	r1, [pc, #52]	; (8003184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003150:	4a0d      	ldr	r2, [pc, #52]	; (8003188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003154:	e002      	b.n	800315c <LoopCopyDataInit>

08003156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800315a:	3304      	adds	r3, #4

0800315c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800315c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800315e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003160:	d3f9      	bcc.n	8003156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003164:	4c0a      	ldr	r4, [pc, #40]	; (8003190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003168:	e001      	b.n	800316e <LoopFillZerobss>

0800316a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800316a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800316c:	3204      	adds	r2, #4

0800316e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800316e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003170:	d3fb      	bcc.n	800316a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003172:	f00a ff69 	bl	800e048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003176:	f7fe fe8d 	bl	8001e94 <main>
  bx  lr    
 800317a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800317c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003184:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003188:	08010678 	.word	0x08010678
  ldr r2, =_sbss
 800318c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003190:	20000e98 	.word	0x20000e98

08003194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003194:	e7fe      	b.n	8003194 <ADC_IRQHandler>
	...

08003198 <_ZN9BarometreC1EP17I2C_HandleTypeDefh>:
 *      Author: onurd
 */
#include "Barometre.h"
#include <math.h>

Barometre::Barometre(I2C_HandleTypeDef* hi2c, uint8_t adres)
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	4613      	mov	r3, r2
 80031a4:	71fb      	strb	r3, [r7, #7]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3306      	adds	r3, #6
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	605a      	str	r2, [r3, #4]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	60da      	str	r2, [r3, #12]
 80031b4:	611a      	str	r2, [r3, #16]
 80031b6:	829a      	strh	r2, [r3, #20]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <_ZN9BarometreC1EP17I2C_HandleTypeDefh+0x58>)
 80031bc:	61da      	str	r2, [r3, #28]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	621a      	str	r2, [r3, #32]
{
    this->hi2c=hi2c;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	601a      	str	r2, [r3, #0]
	this->adres=adres;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	79fa      	ldrb	r2, [r7, #7]
 80031d0:	711a      	strb	r2, [r3, #4]
	sicaklik_f=0;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	665a      	str	r2, [r3, #100]	; 0x64
	basinc_f=0;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	47c5e680 	.word	0x47c5e680

080031f4 <_ZN9Barometre10YapilandirEv>:

void Barometre::Yapilandir()
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af04      	add	r7, sp, #16
 80031fa:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(hi2c, adres, 0xAA, 1, hamDatalar, 22, 100);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	791b      	ldrb	r3, [r3, #4]
 8003204:	b299      	uxth	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3306      	adds	r3, #6
 800320a:	2264      	movs	r2, #100	; 0x64
 800320c:	9202      	str	r2, [sp, #8]
 800320e:	2216      	movs	r2, #22
 8003210:	9201      	str	r2, [sp, #4]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2301      	movs	r3, #1
 8003216:	22aa      	movs	r2, #170	; 0xaa
 8003218:	f003 ff66 	bl	80070e8 <HAL_I2C_Mem_Read>
	AC1 = (hamDatalar[0] << 8) | hamDatalar[1];
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	799b      	ldrb	r3, [r3, #6]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	b21a      	sxth	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	79db      	ldrb	r3, [r3, #7]
 8003228:	b21b      	sxth	r3, r3
 800322a:	4313      	orrs	r3, r2
 800322c:	b21a      	sxth	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	849a      	strh	r2, [r3, #36]	; 0x24
	AC2 = (hamDatalar[2] << 8) | hamDatalar[3];
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7a1b      	ldrb	r3, [r3, #8]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	b21a      	sxth	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7a5b      	ldrb	r3, [r3, #9]
 800323e:	b21b      	sxth	r3, r3
 8003240:	4313      	orrs	r3, r2
 8003242:	b21a      	sxth	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	84da      	strh	r2, [r3, #38]	; 0x26
	AC3 = (hamDatalar[4] << 8) | hamDatalar[5];
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	7a9b      	ldrb	r3, [r3, #10]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	b21a      	sxth	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7adb      	ldrb	r3, [r3, #11]
 8003254:	b21b      	sxth	r3, r3
 8003256:	4313      	orrs	r3, r2
 8003258:	b21a      	sxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28
	AC4 = (hamDatalar[6] << 8) | hamDatalar[7];
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	7b1b      	ldrb	r3, [r3, #12]
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	b21a      	sxth	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7b5b      	ldrb	r3, [r3, #13]
 800326a:	b21b      	sxth	r3, r3
 800326c:	4313      	orrs	r3, r2
 800326e:	b21b      	sxth	r3, r3
 8003270:	b29a      	uxth	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	855a      	strh	r2, [r3, #42]	; 0x2a
	AC5 = (hamDatalar[8] << 8) | hamDatalar[9];
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7b9b      	ldrb	r3, [r3, #14]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	b21a      	sxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	7bdb      	ldrb	r3, [r3, #15]
 8003282:	b21b      	sxth	r3, r3
 8003284:	4313      	orrs	r3, r2
 8003286:	b21b      	sxth	r3, r3
 8003288:	b29a      	uxth	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	859a      	strh	r2, [r3, #44]	; 0x2c
	AC6 =(hamDatalar[10] << 8) | hamDatalar[11];
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7c1b      	ldrb	r3, [r3, #16]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	b21a      	sxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7c5b      	ldrb	r3, [r3, #17]
 800329a:	b21b      	sxth	r3, r3
 800329c:	4313      	orrs	r3, r2
 800329e:	b21b      	sxth	r3, r3
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	85da      	strh	r2, [r3, #46]	; 0x2e
	B1 = (hamDatalar[12] << 8) | hamDatalar[13];
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7c9b      	ldrb	r3, [r3, #18]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	b21a      	sxth	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	7cdb      	ldrb	r3, [r3, #19]
 80032b2:	b21b      	sxth	r3, r3
 80032b4:	4313      	orrs	r3, r2
 80032b6:	b21a      	sxth	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	861a      	strh	r2, [r3, #48]	; 0x30
	B2 = (hamDatalar[14] << 8) | hamDatalar[15];
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	7d1b      	ldrb	r3, [r3, #20]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	b21a      	sxth	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	7d5b      	ldrb	r3, [r3, #21]
 80032c8:	b21b      	sxth	r3, r3
 80032ca:	4313      	orrs	r3, r2
 80032cc:	b21a      	sxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	865a      	strh	r2, [r3, #50]	; 0x32
	MB = (hamDatalar[16] << 8) | hamDatalar[17];
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7d9b      	ldrb	r3, [r3, #22]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	b21a      	sxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7ddb      	ldrb	r3, [r3, #23]
 80032de:	b21b      	sxth	r3, r3
 80032e0:	4313      	orrs	r3, r2
 80032e2:	b21a      	sxth	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	869a      	strh	r2, [r3, #52]	; 0x34
	MC = (hamDatalar[18] << 8) | hamDatalar[19];
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7e1b      	ldrb	r3, [r3, #24]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	b21a      	sxth	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	7e5b      	ldrb	r3, [r3, #25]
 80032f4:	b21b      	sxth	r3, r3
 80032f6:	4313      	orrs	r3, r2
 80032f8:	b21a      	sxth	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	86da      	strh	r2, [r3, #54]	; 0x36
	MD = (hamDatalar[20] << 8) | hamDatalar[21];
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7e9b      	ldrb	r3, [r3, #26]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	b21a      	sxth	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7edb      	ldrb	r3, [r3, #27]
 800330a:	b21b      	sxth	r3, r3
 800330c:	4313      	orrs	r3, r2
 800330e:	b21a      	sxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <_ZN9Barometre11SicaklikOkuEv>:

float *Barometre::SicaklikOku()
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	 UT = regSicaklikOku();
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f9a1 	bl	800366c <_ZN9Barometre14regSicaklikOkuEv>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c
	 X1 = (UT - AC6) * AC5 >> 15;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003340:	fb02 f303 	mul.w	r3, r2, r3
 8003344:	13da      	asrs	r2, r3, #15
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
	 X2 = (MC << 11) / (X1 + MD);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003350:	02da      	lsls	r2, r3, #11
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	f9b1 1038 	ldrsh.w	r1, [r1, #56]	; 0x38
 800335c:	440b      	add	r3, r1
 800335e:	fb92 f2f3 	sdiv	r2, r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	649a      	str	r2, [r3, #72]	; 0x48
	 B5 = X1 + X2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336e:	441a      	add	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	655a      	str	r2, [r3, #84]	; 0x54
	 sicaklik_f = ((B5 + 8) >> 4) / 10.0;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003378:	3308      	adds	r3, #8
 800337a:	111b      	asrs	r3, r3, #4
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd f8c9 	bl	8000514 <__aeabi_i2d>
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <_ZN9Barometre11SicaklikOkuEv+0x90>)
 8003388:	f7fd fa58 	bl	800083c <__aeabi_ddiv>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	f7fd fc20 	bl	8000bd8 <__aeabi_d2f>
 8003398:	4602      	mov	r2, r0
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	665a      	str	r2, [r3, #100]	; 0x64

    return &sicaklik_f ;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3364      	adds	r3, #100	; 0x64
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40240000 	.word	0x40240000

080033b0 <_ZN9Barometre9BasincOkuEh>:

float Barometre::BasincOku(uint8_t oss)
{
 80033b0:	b5b0      	push	{r4, r5, r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	70fb      	strb	r3, [r7, #3]
	 UP = regBasincOku(oss);
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f973 	bl	80036ac <_ZN9Barometre12regBasincOkuEh>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461a      	mov	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
	 B6 = B5 - 4000;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	659a      	str	r2, [r3, #88]	; 0x58
	 X1 = (B2 * ((B6 * B6) >> 12)) >> 11;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80033e0:	4619      	mov	r1, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	131b      	asrs	r3, r3, #12
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	12da      	asrs	r2, r3, #11
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
	 X2 = (AC2 * B6) >> 11;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003400:	461a      	mov	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	12da      	asrs	r2, r3, #11
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	649a      	str	r2, [r3, #72]	; 0x48
	 X3 = X1 + X2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003418:	441a      	add	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	64da      	str	r2, [r3, #76]	; 0x4c
	 B3 = (((AC1 * 4 + X3) << oss) + 2) >> 2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003424:	009a      	lsls	r2, r3, #2
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	441a      	add	r2, r3
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	3302      	adds	r3, #2
 8003434:	109a      	asrs	r2, r3, #2
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	651a      	str	r2, [r3, #80]	; 0x50
	 X1 = (AC3 * B6) >> 13;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003440:	461a      	mov	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	135a      	asrs	r2, r3, #13
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
	 X2 = (B1 * ((B6 * B6) >> 12)) >> 16;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8003456:	4619      	mov	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	131b      	asrs	r3, r3, #12
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	141a      	asrs	r2, r3, #16
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	649a      	str	r2, [r3, #72]	; 0x48
	 X3 = ((X1 + X2) + 2) >> 2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003478:	4413      	add	r3, r2
 800347a:	3302      	adds	r3, #2
 800347c:	109a      	asrs	r2, r3, #2
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	64da      	str	r2, [r3, #76]	; 0x4c
	 B4 = (AC4 * (uint32_t)(X3 + 32768)) >> 15;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	461a      	mov	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	0bda      	lsrs	r2, r3, #15
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	65da      	str	r2, [r3, #92]	; 0x5c
	 B7 = ((uint32_t)UP - B3) * (50000 >> oss);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80034ac:	fa41 f202 	asr.w	r2, r1, r2
 80034b0:	fb03 f202 	mul.w	r2, r3, r2
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	661a      	str	r2, [r3, #96]	; 0x60
	 basinc_f = (B7 < 0x80000000) ? (B7 * 2) / B4 : (B7 / B4) * 2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034bc:	2b00      	cmp	r3, #0
 80034be:	db0b      	blt.n	80034d8 <_ZN9Barometre9BasincOkuEh+0x128>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c4:	005a      	lsls	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	e00a      	b.n	80034ee <_ZN9Barometre9BasincOkuEh+0x13e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	 X1 = (basinc_f / 256.0) * (basinc_f / 256.0);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd f81d 	bl	8000538 <__aeabi_f2d>
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <_ZN9Barometre9BasincOkuEh+0x210>)
 8003504:	f7fd f99a 	bl	800083c <__aeabi_ddiv>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4614      	mov	r4, r2
 800350e:	461d      	mov	r5, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd f80f 	bl	8000538 <__aeabi_f2d>
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <_ZN9Barometre9BasincOkuEh+0x210>)
 8003520:	f7fd f98c 	bl	800083c <__aeabi_ddiv>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4620      	mov	r0, r4
 800352a:	4629      	mov	r1, r5
 800352c:	f7fd f85c 	bl	80005e8 <__aeabi_dmul>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4610      	mov	r0, r2
 8003536:	4619      	mov	r1, r3
 8003538:	f7fd fb06 	bl	8000b48 <__aeabi_d2iz>
 800353c:	4602      	mov	r2, r0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
	 X1 = (X1 * 3038) >> 16;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f640 32de 	movw	r2, #3038	; 0xbde
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	141a      	asrs	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
	 X2 = (-7357 *basinc_f)  / 65536.0;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800355a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80035c4 <_ZN9Barometre9BasincOkuEh+0x214>
 800355e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003562:	ee17 0a90 	vmov	r0, s15
 8003566:	f7fc ffe7 	bl	8000538 <__aeabi_f2d>
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	4b16      	ldr	r3, [pc, #88]	; (80035c8 <_ZN9Barometre9BasincOkuEh+0x218>)
 8003570:	f7fd f964 	bl	800083c <__aeabi_ddiv>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	f7fd fae4 	bl	8000b48 <__aeabi_d2iz>
 8003580:	4602      	mov	r2, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	649a      	str	r2, [r3, #72]	; 0x48
	 basinc_f += (X1 + X2 + 3791) >> 4;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003594:	4413      	add	r3, r2
 8003596:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800359a:	111b      	asrs	r3, r3, #4
 800359c:	ee07 3a90 	vmov	s15, r3
 80035a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	 return basinc_f;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b2:	ee07 3a90 	vmov	s15, r3
}
 80035b6:	eeb0 0a67 	vmov.f32	s0, s15
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bdb0      	pop	{r4, r5, r7, pc}
 80035c0:	40700000 	.word	0x40700000
 80035c4:	c5e5e800 	.word	0xc5e5e800
 80035c8:	40f00000 	.word	0x40f00000
 80035cc:	00000000 	.word	0x00000000

080035d0 <_ZN9Barometre9IrtifaOkuEh>:

float *Barometre::IrtifaOku(uint8_t oss)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	70fb      	strb	r3, [r7, #3]
    BasincOku(oss);
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	4619      	mov	r1, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff fee5 	bl	80033b0 <_ZN9Barometre9BasincOkuEh>
    irtifa_f = (44330.0 * (1.0 - pow((basinc_f / 101325.0), 0.1903)));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fc ffa4 	bl	8000538 <__aeabi_f2d>
 80035f0:	a31c      	add	r3, pc, #112	; (adr r3, 8003664 <_ZN9Barometre9IrtifaOkuEh+0x94>)
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	f7fd f921 	bl	800083c <__aeabi_ddiv>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	ec43 2b17 	vmov	d7, r2, r3
 8003602:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8003650 <_ZN9Barometre9IrtifaOkuEh+0x80>
 8003606:	eeb0 0a47 	vmov.f32	s0, s14
 800360a:	eef0 0a67 	vmov.f32	s1, s15
 800360e:	f007 f987 	bl	800a920 <pow>
 8003612:	ec53 2b10 	vmov	r2, r3, d0
 8003616:	f04f 0000 	mov.w	r0, #0
 800361a:	4911      	ldr	r1, [pc, #68]	; (8003660 <_ZN9Barometre9IrtifaOkuEh+0x90>)
 800361c:	f7fc fe2c 	bl	8000278 <__aeabi_dsub>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	a30b      	add	r3, pc, #44	; (adr r3, 8003658 <_ZN9Barometre9IrtifaOkuEh+0x88>)
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f7fc ffdb 	bl	80005e8 <__aeabi_dmul>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	f7fd facd 	bl	8000bd8 <__aeabi_d2f>
 800363e:	4602      	mov	r2, r0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	621a      	str	r2, [r3, #32]
    return &irtifa_f;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3320      	adds	r3, #32
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	1a36e2eb 	.word	0x1a36e2eb
 8003654:	3fc85bc0 	.word	0x3fc85bc0
 8003658:	00000000 	.word	0x00000000
 800365c:	40e5a540 	.word	0x40e5a540
 8003660:	3ff00000 	.word	0x3ff00000
 8003664:	00000000 	.word	0x00000000
 8003668:	40f8bcd0 	.word	0x40f8bcd0

0800366c <_ZN9Barometre14regSicaklikOkuEv>:

uint16_t Barometre::regSicaklikOku()
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af02      	add	r7, sp, #8
 8003672:	6078      	str	r0, [r7, #4]
    data = 0x2E;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	222e      	movs	r2, #46	; 0x2e
 8003678:	715a      	strb	r2, [r3, #5]
    uint8_t hamSicaklik[2] = {0};
 800367a:	2300      	movs	r3, #0
 800367c:	81bb      	strh	r3, [r7, #12]

    writeAndRead(hamSicaklik, data, 'S', 4);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	795a      	ldrb	r2, [r3, #5]
 8003682:	f107 010c 	add.w	r1, r7, #12
 8003686:	2304      	movs	r3, #4
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	2353      	movs	r3, #83	; 0x53
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f83d 	bl	800370c <_ZN9Barometre12writeAndReadEPhhch>
    return ((hamSicaklik[0] << 8) | hamSicaklik[1]);
 8003692:	7b3b      	ldrb	r3, [r7, #12]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	b21a      	sxth	r2, r3
 8003698:	7b7b      	ldrb	r3, [r7, #13]
 800369a:	b21b      	sxth	r3, r3
 800369c:	4313      	orrs	r3, r2
 800369e:	b21b      	sxth	r3, r3
 80036a0:	b29b      	uxth	r3, r3
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <_ZN9Barometre12regBasincOkuEh>:

uint16_t Barometre::regBasincOku(uint8_t oss)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	70fb      	strb	r3, [r7, #3]
    data = 0x34 + (oss << 6);
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	019b      	lsls	r3, r3, #6
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	3334      	adds	r3, #52	; 0x34
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	715a      	strb	r2, [r3, #5]
    uint8_t hamBasinc[3] = {0};
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <_ZN9Barometre12regBasincOkuEh+0x5c>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	81bb      	strh	r3, [r7, #12]
 80036cc:	2300      	movs	r3, #0
 80036ce:	73bb      	strb	r3, [r7, #14]

    writeAndRead(hamBasinc, data, 'B', oss);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	795a      	ldrb	r2, [r3, #5]
 80036d4:	f107 010c 	add.w	r1, r7, #12
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	2342      	movs	r3, #66	; 0x42
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f814 	bl	800370c <_ZN9Barometre12writeAndReadEPhhch>
    return (((hamBasinc[0] << 16) + (hamBasinc[1] << 8) + hamBasinc[2]) >> (8 - oss));
 80036e4:	7b3b      	ldrb	r3, [r7, #12]
 80036e6:	041a      	lsls	r2, r3, #16
 80036e8:	7b7b      	ldrb	r3, [r7, #13]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	4413      	add	r3, r2
 80036ee:	7bba      	ldrb	r2, [r7, #14]
 80036f0:	441a      	add	r2, r3
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f1c3 0308 	rsb	r3, r3, #8
 80036f8:	fa42 f303 	asr.w	r3, r2, r3
 80036fc:	b29b      	uxth	r3, r3
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	0800fdd0 	.word	0x0800fdd0

0800370c <_ZN9Barometre12writeAndReadEPhhch>:

void Barometre::writeAndRead(uint8_t* hamData_u8, uint8_t data, char secim, uint8_t oss)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af04      	add	r7, sp, #16
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	460b      	mov	r3, r1
 800371c:	71fb      	strb	r3, [r7, #7]
 800371e:	4613      	mov	r3, r2
 8003720:	71bb      	strb	r3, [r7, #6]
    uint8_t boyut;
    HAL_I2C_Mem_Write(hi2c, adres, 0xF4, 1, &data, 1, 100);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	791b      	ldrb	r3, [r3, #4]
 800372a:	b299      	uxth	r1, r3
 800372c:	2364      	movs	r3, #100	; 0x64
 800372e:	9302      	str	r3, [sp, #8]
 8003730:	2301      	movs	r3, #1
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	1dfb      	adds	r3, r7, #7
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	2301      	movs	r3, #1
 800373a:	22f4      	movs	r2, #244	; 0xf4
 800373c:	f003 fbda 	bl	8006ef4 <HAL_I2C_Mem_Write>

    if (secim == 'B')
 8003740:	79bb      	ldrb	r3, [r7, #6]
 8003742:	2b42      	cmp	r3, #66	; 0x42
 8003744:	d121      	bne.n	800378a <_ZN9Barometre12writeAndReadEPhhch+0x7e>
    {
    	boyut = 3;
 8003746:	2303      	movs	r3, #3
 8003748:	75fb      	strb	r3, [r7, #23]
        if (oss == 0) HAL_Delay(5);
 800374a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <_ZN9Barometre12writeAndReadEPhhch+0x4e>
 8003752:	2005      	movs	r0, #5
 8003754:	f002 fbb8 	bl	8005ec8 <HAL_Delay>
 8003758:	e01c      	b.n	8003794 <_ZN9Barometre12writeAndReadEPhhch+0x88>
        else if (oss == 1) HAL_Delay(8);
 800375a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d103      	bne.n	800376a <_ZN9Barometre12writeAndReadEPhhch+0x5e>
 8003762:	2008      	movs	r0, #8
 8003764:	f002 fbb0 	bl	8005ec8 <HAL_Delay>
 8003768:	e014      	b.n	8003794 <_ZN9Barometre12writeAndReadEPhhch+0x88>
        else if (oss == 2) HAL_Delay(14);
 800376a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d103      	bne.n	800377a <_ZN9Barometre12writeAndReadEPhhch+0x6e>
 8003772:	200e      	movs	r0, #14
 8003774:	f002 fba8 	bl	8005ec8 <HAL_Delay>
 8003778:	e00c      	b.n	8003794 <_ZN9Barometre12writeAndReadEPhhch+0x88>
        else if (oss == 3) HAL_Delay(26);
 800377a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d108      	bne.n	8003794 <_ZN9Barometre12writeAndReadEPhhch+0x88>
 8003782:	201a      	movs	r0, #26
 8003784:	f002 fba0 	bl	8005ec8 <HAL_Delay>
 8003788:	e004      	b.n	8003794 <_ZN9Barometre12writeAndReadEPhhch+0x88>
    }
    else
    {
    	boyut = 2;
 800378a:	2302      	movs	r3, #2
 800378c:	75fb      	strb	r3, [r7, #23]
        HAL_Delay(5);
 800378e:	2005      	movs	r0, #5
 8003790:	f002 fb9a 	bl	8005ec8 <HAL_Delay>
    }

    HAL_I2C_Mem_Read(hi2c, adres, 0xF6, 1, hamData_u8, boyut, 100);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	791b      	ldrb	r3, [r3, #4]
 800379c:	b299      	uxth	r1, r3
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2264      	movs	r2, #100	; 0x64
 80037a4:	9202      	str	r2, [sp, #8]
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2301      	movs	r3, #1
 80037ae:	22f6      	movs	r2, #246	; 0xf6
 80037b0:	f003 fc9a 	bl	80070e8 <HAL_I2C_Mem_Read>
}
 80037b4:	bf00      	nop
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <_ZN3GPSC1EP20__UART_HandleTypeDef>:
 *  Created on: Jun 29, 2024
 *      Author: onurd
 */
#include "Gps.h"

GPS::GPS(UART_HandleTypeDef* huart)
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
{
	this->huart_=huart;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	601a      	str	r2, [r3, #0]
	this->rxIndex_u8=0;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	this->rxData_u8=0;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	this->latitude_f32=0;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	this->longitude_f32=0;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <_ZN3GPS10YapilandirEv>:

void GPS::Yapilandir()
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
    lwgps_init(&gps_);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3308      	adds	r3, #8
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fa74 	bl	8001cf8 <lwgps_init>
    HAL_UART_Receive_IT(huart_, &rxData_u8, 1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f203 1339 	addw	r3, r3, #313	; 0x139
 800381a:	2201      	movs	r2, #1
 800381c:	4619      	mov	r1, r3
 800381e:	f006 f8a0 	bl	8009962 <HAL_UART_Receive_IT>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <_ZN3GPS18UartRxCpltCallbackEv>:

void GPS::UartRxCpltCallback()
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
    if (rxData_u8 != '\n' && rxIndex_u8 < sizeof(rxBuffer_u8))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8003838:	2b0a      	cmp	r3, #10
 800383a:	d016      	beq.n	800386a <_ZN3GPS18UartRxCpltCallbackEv+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8003842:	b25b      	sxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	db10      	blt.n	800386a <_ZN3GPS18UartRxCpltCallbackEv+0x40>
    {
        rxBuffer_u8[rxIndex_u8++] = rxData_u8;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	b2d1      	uxtb	r1, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	f882 1138 	strb.w	r1, [r2, #312]	; 0x138
 8003858:	4619      	mov	r1, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	440b      	add	r3, r1
 8003864:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8003868:	e017      	b.n	800389a <_ZN3GPS18UartRxCpltCallbackEv+0x70>
    }
    else
    {
        lwgps_process(&gps_, rxBuffer_u8, rxIndex_u8 + 1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f103 0008 	add.w	r0, r3, #8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800387c:	3301      	adds	r3, #1
 800387e:	461a      	mov	r2, r3
 8003880:	f7fe fa48 	bl	8001d14 <lwgps_process>
        GpsDataCek();
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f815 	bl	80038b4 <_ZN3GPS10GpsDataCekEv>
        rxIndex_u8 = 0;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
        rxData_u8 = 0;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    }
    HAL_UART_Receive_IT(huart_, &rxData_u8, 1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f203 1339 	addw	r3, r3, #313	; 0x139
 80038a4:	2201      	movs	r2, #1
 80038a6:	4619      	mov	r1, r3
 80038a8:	f006 f85b 	bl	8009962 <HAL_UART_Receive_IT>
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <_ZN3GPS10GpsDataCekEv>:

void GPS::GpsDataCek()
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	latitude_f32 = gps_.latitude;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	f7fd f987 	bl	8000bd8 <__aeabi_d2f>
 80038ca:	4602      	mov	r2, r0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	longitude_f32 = gps_.longitude;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f7fd f97c 	bl	8000bd8 <__aeabi_d2f>
 80038e0:	4602      	mov	r2, r0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <_ZN5MyImuC1EP17I2C_HandleTypeDef>:
#define ACC_CNFG_REG 0X1C
#define MPU6500_ADDRESS 0x68<< 1
#define WHO_AM_I 0x75
#define RESET_BIT 0x80

MyImu::MyImu(I2C_HandleTypeDef *hi2c)
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
    : hi2c(hi2c), kalman(0.05, 0.2, 10){}
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8003900:	eddf 0a07 	vldr	s1, [pc, #28]	; 8003920 <_ZN5MyImuC1EP17I2C_HandleTypeDef+0x30>
 8003904:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8003924 <_ZN5MyImuC1EP17I2C_HandleTypeDef+0x34>
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fc18 	bl	800413e <_ZN14KalmanFiltresiC1Efff>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	615a      	str	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	3e4ccccd 	.word	0x3e4ccccd
 8003924:	3d4ccccd 	.word	0x3d4ccccd

08003928 <_ZN5MyImu17DBC_MPU6500_ResetEv>:

void MyImu::DBC_MPU6500_Reset()
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af04      	add	r7, sp, #16
 800392e:	6078      	str	r0, [r7, #4]
	data_u8 = RESET_BIT;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2280      	movs	r2, #128	; 0x80
 8003934:	761a      	strb	r2, [r3, #24]
	HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS , PWR_MGMT_1_REG, 1, &data_u8, 1, 100);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6958      	ldr	r0, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3318      	adds	r3, #24
 800393e:	2264      	movs	r2, #100	; 0x64
 8003940:	9202      	str	r2, [sp, #8]
 8003942:	2201      	movs	r2, #1
 8003944:	9201      	str	r2, [sp, #4]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2301      	movs	r3, #1
 800394a:	226b      	movs	r2, #107	; 0x6b
 800394c:	21d0      	movs	r1, #208	; 0xd0
 800394e:	f003 fad1 	bl	8006ef4 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8003952:	2064      	movs	r0, #100	; 0x64
 8003954:	f002 fab8 	bl	8005ec8 <HAL_Delay>
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv>:
void MyImu::DBC_MPU6500_YAPILANDIR()
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af04      	add	r7, sp, #16
 8003966:	6078      	str	r0, [r7, #4]
	uint8_t check_u8;
	DBC_MPU6500_Reset();
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ffdd 	bl	8003928 <_ZN5MyImu17DBC_MPU6500_ResetEv>
	// yoklama sorgusu versiyon sorgusu crc kontrol ,

	HAL_I2C_Mem_Read(hi2c, MPU6500_ADDRESS , WHO_AM_I, 1, &check_u8, 1, 1000);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6958      	ldr	r0, [r3, #20]
 8003972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003976:	9302      	str	r3, [sp, #8]
 8003978:	2301      	movs	r3, #1
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	f107 030f 	add.w	r3, r7, #15
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2301      	movs	r3, #1
 8003984:	2275      	movs	r2, #117	; 0x75
 8003986:	21d0      	movs	r1, #208	; 0xd0
 8003988:	f003 fbae 	bl	80070e8 <HAL_I2C_Mem_Read>
	if (check_u8 == 0x70)
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b70      	cmp	r3, #112	; 0x70
 8003990:	d147      	bne.n	8003a22 <_ZN5MyImu22DBC_MPU6500_YAPILANDIREv+0xc2>
	{
		data_u8 = 0x00;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	761a      	strb	r2, [r3, #24]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS , PWR_MGMT_1_REG, 1, &data_u8, 1, 1000);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6958      	ldr	r0, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3318      	adds	r3, #24
 80039a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039a4:	9202      	str	r2, [sp, #8]
 80039a6:	2201      	movs	r2, #1
 80039a8:	9201      	str	r2, [sp, #4]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2301      	movs	r3, #1
 80039ae:	226b      	movs	r2, #107	; 0x6b
 80039b0:	21d0      	movs	r1, #208	; 0xd0
 80039b2:	f003 fa9f 	bl	8006ef4 <HAL_I2C_Mem_Write>
		// SMPLRT_DIV register
		data_u8 = 0x07;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2207      	movs	r2, #7
 80039ba:	761a      	strb	r2, [r3, #24]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS ,SMPLRT_DIV_REG, 1, &data_u8, 1, 1000);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6958      	ldr	r0, [r3, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3318      	adds	r3, #24
 80039c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039c8:	9202      	str	r2, [sp, #8]
 80039ca:	2201      	movs	r2, #1
 80039cc:	9201      	str	r2, [sp, #4]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	2301      	movs	r3, #1
 80039d2:	2219      	movs	r2, #25
 80039d4:	21d0      	movs	r1, #208	; 0xd0
 80039d6:	f003 fa8d 	bl	8006ef4 <HAL_I2C_Mem_Write>
		//  ACCEL_CONFIG Register ±2g(00),±4g(01),±8g(10),±16g(11) 4:3
		data_u8 = 0x00;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	761a      	strb	r2, [r3, #24]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS, ACC_CNFG_REG, 1, &data_u8, 1, 1000);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6958      	ldr	r0, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3318      	adds	r3, #24
 80039e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039ec:	9202      	str	r2, [sp, #8]
 80039ee:	2201      	movs	r2, #1
 80039f0:	9201      	str	r2, [sp, #4]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2301      	movs	r3, #1
 80039f6:	221c      	movs	r2, #28
 80039f8:	21d0      	movs	r1, #208	; 0xd0
 80039fa:	f003 fa7b 	bl	8006ef4 <HAL_I2C_Mem_Write>
		//  GYRO_CONFIG Register +250dps(00),+500dps(01),+1000dps(10),+2000dps(11) 4:3
		data_u8 = 0x00;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	761a      	strb	r2, [r3, #24]
		HAL_I2C_Mem_Write(hi2c, MPU6500_ADDRESS , GYRO_CNFG_REG, 1, &data_u8, 1, 1000);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6958      	ldr	r0, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3318      	adds	r3, #24
 8003a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a10:	9202      	str	r2, [sp, #8]
 8003a12:	2201      	movs	r2, #1
 8003a14:	9201      	str	r2, [sp, #4]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	221b      	movs	r2, #27
 8003a1c:	21d0      	movs	r1, #208	; 0xd0
 8003a1e:	f003 fa69 	bl	8006ef4 <HAL_I2C_Mem_Write>
	}
}
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <_ZN5MyImu14DBC_GYRO_OFSETEv>:

void MyImu::DBC_GYRO_OFSET()
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	for(int i=0; i<2000; i++)
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e032      	b.n	8003aa0 <_ZN5MyImu14DBC_GYRO_OFSETEv+0x74>
	{
		DBC_GYRO_OKU();
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f958 	bl	8003cf0 <_ZN5MyImu12DBC_GYRO_OKUEv>

		gyroHesap[0] += gyroEksen[0];
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003a4c:	ee07 3a90 	vmov	s15, r3
 8003a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	    gyroHesap[1] += gyroEksen[1];
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	    gyroHesap[2] += gyroEksen[2];
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003a88:	ee07 3a90 	vmov	s15, r3
 8003a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	for(int i=0; i<2000; i++)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003aa6:	dbc8      	blt.n	8003a3a <_ZN5MyImu14DBC_GYRO_OFSETEv+0xe>
	 }
		gyroHesap[0] /= 2000;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003aae:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003af4 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 8003ab2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		gyroHesap[1] /= 2000;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003ac2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003af4 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 8003ac6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	    gyroHesap[2] /= 2000;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003ad6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003af4 <_ZN5MyImu14DBC_GYRO_OFSETEv+0xc8>
 8003ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	    //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	    HAL_Delay(100);
 8003ae4:	2064      	movs	r0, #100	; 0x64
 8003ae6:	f002 f9ef 	bl	8005ec8 <HAL_Delay>
}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	44fa0000 	.word	0x44fa0000

08003af8 <_ZN5MyImu12DBC_DATA_OKUEv>:
void MyImu::DBC_DATA_OKU()
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
    DBC_ACC_OKU();
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f86d 	bl	8003be0 <_ZN5MyImu11DBC_ACC_OKUEv>
    DBC_SICAKLIK_OKU();
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8a6 	bl	8003c58 <_ZN5MyImu16DBC_SICAKLIK_OKUEv>
    DBC_GYRO_OKU();
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f8ef 	bl	8003cf0 <_ZN5MyImu12DBC_GYRO_OKUEv>

    gyroEksen[0] -= gyroHesap[0];
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003b18:	ee07 3a90 	vmov	s15, r3
 8003b1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b2e:	ee17 3a90 	vmov	r3, s15
 8003b32:	b21a      	sxth	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	835a      	strh	r2, [r3, #26]
    gyroEksen[1] -= gyroHesap[1];
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b54:	ee17 3a90 	vmov	r3, s15
 8003b58:	b21a      	sxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	839a      	strh	r2, [r3, #28]
    gyroEksen[2] -= gyroHesap[2];
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003b64:	ee07 3a90 	vmov	s15, r3
 8003b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b7a:	ee17 3a90 	vmov	r3, s15
 8003b7e:	b21a      	sxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	83da      	strh	r2, [r3, #30]
    for(int i=0;i<3;i++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e022      	b.n	8003bd0 <_ZN5MyImu12DBC_DATA_OKUEv+0xd8>
    {
    	kalman.veriGuncelle(accEksen[i]);
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	3210      	adds	r2, #16
 8003b92:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba2:	4608      	mov	r0, r1
 8003ba4:	f000 faed 	bl	8004182 <_ZN14KalmanFiltresi12veriGuncelleEf>
    	kalman.veriGuncelle(gyroEksen[i]);
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	f000 fadc 	bl	8004182 <_ZN14KalmanFiltresi12veriGuncelleEf>
    for(int i=0;i<3;i++)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	ddd9      	ble.n	8003b8a <_ZN5MyImu12DBC_DATA_OKUEv+0x92>
    }

}
 8003bd6:	bf00      	nop
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <_ZN5MyImu11DBC_ACC_OKUEv>:
void MyImu::DBC_ACC_OKU()
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	6078      	str	r0, [r7, #4]
	uint8_t accBuffer[6];

	accBuffer[0] = 0x3B;
 8003be8:	233b      	movs	r3, #59	; 0x3b
 8003bea:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c, MPU6500_ADDRESS, accBuffer, 1, 10);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6958      	ldr	r0, [r3, #20]
 8003bf0:	f107 0208 	add.w	r2, r7, #8
 8003bf4:	230a      	movs	r3, #10
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	21d0      	movs	r1, #208	; 0xd0
 8003bfc:	f002 fe4a 	bl	8006894 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU6500_ADDRESS, accBuffer, 6, 10);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6958      	ldr	r0, [r3, #20]
 8003c04:	f107 0208 	add.w	r2, r7, #8
 8003c08:	230a      	movs	r3, #10
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	2306      	movs	r3, #6
 8003c0e:	21d0      	movs	r1, #208	; 0xd0
 8003c10:	f002 ff3e 	bl	8006a90 <HAL_I2C_Master_Receive>
	accEksen[0] = (accBuffer[0] << 8 | accBuffer[1]);
 8003c14:	7a3b      	ldrb	r3, [r7, #8]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	b21a      	sxth	r2, r3
 8003c1a:	7a7b      	ldrb	r3, [r7, #9]
 8003c1c:	b21b      	sxth	r3, r3
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	b21a      	sxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	841a      	strh	r2, [r3, #32]
	accEksen[1] = (accBuffer[2] << 8 | accBuffer[3]);
 8003c26:	7abb      	ldrb	r3, [r7, #10]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	b21a      	sxth	r2, r3
 8003c2c:	7afb      	ldrb	r3, [r7, #11]
 8003c2e:	b21b      	sxth	r3, r3
 8003c30:	4313      	orrs	r3, r2
 8003c32:	b21a      	sxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	845a      	strh	r2, [r3, #34]	; 0x22
	accEksen[2] = (accBuffer[4] << 8 | accBuffer[5]);
 8003c38:	7b3b      	ldrb	r3, [r7, #12]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	b21a      	sxth	r2, r3
 8003c3e:	7b7b      	ldrb	r3, [r7, #13]
 8003c40:	b21b      	sxth	r3, r3
 8003c42:	4313      	orrs	r3, r2
 8003c44:	b21a      	sxth	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	0000      	movs	r0, r0
 8003c54:	0000      	movs	r0, r0
	...

08003c58 <_ZN5MyImu16DBC_SICAKLIK_OKUEv>:
void MyImu::DBC_SICAKLIK_OKU()
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	6078      	str	r0, [r7, #4]
	uint8_t sicaklikBuffer[2];

	sicaklikBuffer[0] = 0x41;
 8003c60:	2341      	movs	r3, #65	; 0x41
 8003c62:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hi2c, MPU6500_ADDRESS, sicaklikBuffer, 1, 10);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6958      	ldr	r0, [r3, #20]
 8003c68:	f107 020c 	add.w	r2, r7, #12
 8003c6c:	230a      	movs	r3, #10
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2301      	movs	r3, #1
 8003c72:	21d0      	movs	r1, #208	; 0xd0
 8003c74:	f002 fe0e 	bl	8006894 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU6500_ADDRESS, sicaklikBuffer, 2, 10);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6958      	ldr	r0, [r3, #20]
 8003c7c:	f107 020c 	add.w	r2, r7, #12
 8003c80:	230a      	movs	r3, #10
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2302      	movs	r3, #2
 8003c86:	21d0      	movs	r1, #208	; 0xd0
 8003c88:	f002 ff02 	bl	8006a90 <HAL_I2C_Master_Receive>
	hamSicaklik_u16 = (sicaklikBuffer[0] << 8 | sicaklikBuffer[1]);
 8003c8c:	7b3b      	ldrb	r3, [r7, #12]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	b21a      	sxth	r2, r3
 8003c92:	7b7b      	ldrb	r3, [r7, #13]
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b21b      	sxth	r3, r3
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	Sicaklik_f=((float)((float)hamSicaklik_u16 / 333.87)) + 21;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb0:	ee17 0a90 	vmov	r0, s15
 8003cb4:	f7fc fc40 	bl	8000538 <__aeabi_f2d>
 8003cb8:	a30b      	add	r3, pc, #44	; (adr r3, 8003ce8 <_ZN5MyImu16DBC_SICAKLIK_OKUEv+0x90>)
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	f7fc fdbd 	bl	800083c <__aeabi_ddiv>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f7fc ff85 	bl	8000bd8 <__aeabi_d2f>
 8003cce:	ee07 0a10 	vmov	s14, r0
 8003cd2:	eef3 7a05 	vmov.f32	s15, #53	; 0x41a80000  21.0
 8003cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	851eb852 	.word	0x851eb852
 8003cec:	4074ddeb 	.word	0x4074ddeb

08003cf0 <_ZN5MyImu12DBC_GYRO_OKUEv>:
void MyImu::DBC_GYRO_OKU()
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	6078      	str	r0, [r7, #4]

	uint8_t gyroBuffer[6];

	gyroBuffer[0] = 0x43;
 8003cf8:	2343      	movs	r3, #67	; 0x43
 8003cfa:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c, MPU6500_ADDRESS, gyroBuffer, 1, 10);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6958      	ldr	r0, [r3, #20]
 8003d00:	f107 0208 	add.w	r2, r7, #8
 8003d04:	230a      	movs	r3, #10
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	2301      	movs	r3, #1
 8003d0a:	21d0      	movs	r1, #208	; 0xd0
 8003d0c:	f002 fdc2 	bl	8006894 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, MPU6500_ADDRESS, gyroBuffer, 6, 10);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6958      	ldr	r0, [r3, #20]
 8003d14:	f107 0208 	add.w	r2, r7, #8
 8003d18:	230a      	movs	r3, #10
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	2306      	movs	r3, #6
 8003d1e:	21d0      	movs	r1, #208	; 0xd0
 8003d20:	f002 feb6 	bl	8006a90 <HAL_I2C_Master_Receive>
	gyroEksen[0] = (gyroBuffer[0] << 8 | gyroBuffer[1]);
 8003d24:	7a3b      	ldrb	r3, [r7, #8]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	b21a      	sxth	r2, r3
 8003d2a:	7a7b      	ldrb	r3, [r7, #9]
 8003d2c:	b21b      	sxth	r3, r3
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	b21a      	sxth	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	835a      	strh	r2, [r3, #26]
	gyroEksen[1] = (gyroBuffer[2] << 8 | gyroBuffer[3]);
 8003d36:	7abb      	ldrb	r3, [r7, #10]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	b21a      	sxth	r2, r3
 8003d3c:	7afb      	ldrb	r3, [r7, #11]
 8003d3e:	b21b      	sxth	r3, r3
 8003d40:	4313      	orrs	r3, r2
 8003d42:	b21a      	sxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	839a      	strh	r2, [r3, #28]
	gyroEksen[2] = (gyroBuffer[4] << 8 | gyroBuffer[5]);
 8003d48:	7b3b      	ldrb	r3, [r7, #12]
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	b21a      	sxth	r2, r3
 8003d4e:	7b7b      	ldrb	r3, [r7, #13]
 8003d50:	b21b      	sxth	r3, r3
 8003d52:	4313      	orrs	r3, r2
 8003d54:	b21a      	sxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	83da      	strh	r2, [r3, #30]

}
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	0000      	movs	r0, r0
 8003d64:	0000      	movs	r0, r0
	...

08003d68 <_ZN5MyImu13DBC_ACI_BULMAEv>:
void MyImu::DBC_ACI_BULMA()
{
 8003d68:	b5b0      	push	{r4, r5, r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	DBC_DATA_OKU();//0.0014 0.000001066
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fec1 	bl	8003af8 <_ZN5MyImu12DBC_DATA_OKUEv>
	//Ham Veri Iyilestirmeleri
	gyroPitchAci_f += gyroEksen[0] * 0.00024;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fc fbdc 	bl	8000538 <__aeabi_f2d>
 8003d80:	4604      	mov	r4, r0
 8003d82:	460d      	mov	r5, r1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc fbc2 	bl	8000514 <__aeabi_i2d>
 8003d90:	a39f      	add	r3, pc, #636	; (adr r3, 8004010 <_ZN5MyImu13DBC_ACI_BULMAEv+0x2a8>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fc27 	bl	80005e8 <__aeabi_dmul>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4620      	mov	r0, r4
 8003da0:	4629      	mov	r1, r5
 8003da2:	f7fc fa6b 	bl	800027c <__adddf3>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	f7fc ff13 	bl	8000bd8 <__aeabi_d2f>
 8003db2:	4602      	mov	r2, r0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	645a      	str	r2, [r3, #68]	; 0x44
	gyroRollAci_f += gyroEksen[1] * 0.00024;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc fbbb 	bl	8000538 <__aeabi_f2d>
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	460d      	mov	r5, r1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc fba1 	bl	8000514 <__aeabi_i2d>
 8003dd2:	a38f      	add	r3, pc, #572	; (adr r3, 8004010 <_ZN5MyImu13DBC_ACI_BULMAEv+0x2a8>)
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f7fc fc06 	bl	80005e8 <__aeabi_dmul>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4620      	mov	r0, r4
 8003de2:	4629      	mov	r1, r5
 8003de4:	f7fc fa4a 	bl	800027c <__adddf3>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	f7fc fef2 	bl	8000bd8 <__aeabi_d2f>
 8003df4:	4602      	mov	r2, r0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	641a      	str	r2, [r3, #64]	; 0x40
	gyroYawAci_f += gyroEksen[2] * 0.00024;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc fb9a 	bl	8000538 <__aeabi_f2d>
 8003e04:	4604      	mov	r4, r0
 8003e06:	460d      	mov	r5, r1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fc fb80 	bl	8000514 <__aeabi_i2d>
 8003e14:	a37e      	add	r3, pc, #504	; (adr r3, 8004010 <_ZN5MyImu13DBC_ACI_BULMAEv+0x2a8>)
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	f7fc fbe5 	bl	80005e8 <__aeabi_dmul>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4620      	mov	r0, r4
 8003e24:	4629      	mov	r1, r5
 8003e26:	f7fc fa29 	bl	800027c <__adddf3>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4619      	mov	r1, r3
 8003e32:	f7fc fed1 	bl	8000bd8 <__aeabi_d2f>
 8003e36:	4602      	mov	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	649a      	str	r2, [r3, #72]	; 0x48

	accToplamVektor_s16 = sqrt((accEksen[0]*accEksen[0])+(accEksen[1]*accEksen[1])+(accEksen[2]*accEksen[2]));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003e42:	461a      	mov	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003e4a:	fb03 f202 	mul.w	r2, r3, r2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003e54:	4619      	mov	r1, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	441a      	add	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003e68:	4619      	mov	r1, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fc fb4c 	bl	8000514 <__aeabi_i2d>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	ec43 2b10 	vmov	d0, r2, r3
 8003e84:	f006 fdbc 	bl	800aa00 <sqrt>
 8003e88:	ec53 2b10 	vmov	r2, r3, d0
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4619      	mov	r1, r3
 8003e90:	f7fc fe5a 	bl	8000b48 <__aeabi_d2iz>
 8003e94:	4603      	mov	r3, r0
 8003e96:	b21a      	sxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	869a      	strh	r2, [r3, #52]	; 0x34

	//57.296 =1 /(3.142 /180)
	accPitchAci_f = asin((float)accEksen[1]/accToplamVektor_s16)*57.296;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003eb0:	ee07 3a90 	vmov	s15, r3
 8003eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eb8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ebc:	ee16 0a90 	vmov	r0, s13
 8003ec0:	f7fc fb3a 	bl	8000538 <__aeabi_f2d>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	ec43 2b10 	vmov	d0, r2, r3
 8003ecc:	f006 fcc4 	bl	800a858 <asin>
 8003ed0:	ec51 0b10 	vmov	r0, r1, d0
 8003ed4:	a350      	add	r3, pc, #320	; (adr r3, 8004018 <_ZN5MyImu13DBC_ACI_BULMAEv+0x2b0>)
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	f7fc fb85 	bl	80005e8 <__aeabi_dmul>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f7fc fe77 	bl	8000bd8 <__aeabi_d2f>
 8003eea:	4602      	mov	r2, r0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38
	accRollAci_f = asin((float)accEksen[0]/accToplamVektor_s16)*-57.296;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f0c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f10:	ee16 0a90 	vmov	r0, s13
 8003f14:	f7fc fb10 	bl	8000538 <__aeabi_f2d>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	ec43 2b10 	vmov	d0, r2, r3
 8003f20:	f006 fc9a 	bl	800a858 <asin>
 8003f24:	ec51 0b10 	vmov	r0, r1, d0
 8003f28:	a33d      	add	r3, pc, #244	; (adr r3, 8004020 <_ZN5MyImu13DBC_ACI_BULMAEv+0x2b8>)
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f7fc fb5b 	bl	80005e8 <__aeabi_dmul>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f7fc fe4d 	bl	8000bd8 <__aeabi_d2f>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	63da      	str	r2, [r3, #60]	; 0x3c

	pitchAcisi_f = gyroPitchAci_f * 0.9 + accPitchAci_f * 0.1;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fc faf5 	bl	8000538 <__aeabi_f2d>
 8003f4e:	a336      	add	r3, pc, #216	; (adr r3, 8004028 <_ZN5MyImu13DBC_ACI_BULMAEv+0x2c0>)
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f7fc fb48 	bl	80005e8 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc fae7 	bl	8000538 <__aeabi_f2d>
 8003f6a:	a331      	add	r3, pc, #196	; (adr r3, 8004030 <_ZN5MyImu13DBC_ACI_BULMAEv+0x2c8>)
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f7fc fb3a 	bl	80005e8 <__aeabi_dmul>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4620      	mov	r0, r4
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	f7fc f97e 	bl	800027c <__adddf3>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	f7fc fe26 	bl	8000bd8 <__aeabi_d2f>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	651a      	str	r2, [r3, #80]	; 0x50
	rollAci_f = gyroRollAci_f * 0.9 + accRollAci_f * 0.1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fc face 	bl	8000538 <__aeabi_f2d>
 8003f9c:	a322      	add	r3, pc, #136	; (adr r3, 8004028 <_ZN5MyImu13DBC_ACI_BULMAEv+0x2c0>)
 8003f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa2:	f7fc fb21 	bl	80005e8 <__aeabi_dmul>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4614      	mov	r4, r2
 8003fac:	461d      	mov	r5, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fac0 	bl	8000538 <__aeabi_f2d>
 8003fb8:	a31d      	add	r3, pc, #116	; (adr r3, 8004030 <_ZN5MyImu13DBC_ACI_BULMAEv+0x2c8>)
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f7fc fb13 	bl	80005e8 <__aeabi_dmul>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	4629      	mov	r1, r5
 8003fca:	f7fc f957 	bl	800027c <__adddf3>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f7fc fdff 	bl	8000bd8 <__aeabi_d2f>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	64da      	str	r2, [r3, #76]	; 0x4c
	kalman.veriGuncelle(pitchAcisi_f);
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fec:	4610      	mov	r0, r2
 8003fee:	f000 f8c8 	bl	8004182 <_ZN14KalmanFiltresi12veriGuncelleEf>
	kalman.veriGuncelle(rollAci_f);
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8003ffe:	4610      	mov	r0, r2
 8004000:	f000 f8bf 	bl	8004182 <_ZN14KalmanFiltresi12veriGuncelleEf>
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bdb0      	pop	{r4, r5, r7, pc}
 800400c:	f3af 8000 	nop.w
 8004010:	4d551d69 	.word	0x4d551d69
 8004014:	3f2f7510 	.word	0x3f2f7510
 8004018:	53f7ced9 	.word	0x53f7ced9
 800401c:	404ca5e3 	.word	0x404ca5e3
 8004020:	53f7ced9 	.word	0x53f7ced9
 8004024:	c04ca5e3 	.word	0xc04ca5e3
 8004028:	cccccccd 	.word	0xcccccccd
 800402c:	3feccccc 	.word	0x3feccccc
 8004030:	9999999a 	.word	0x9999999a
 8004034:	3fb99999 	.word	0x3fb99999

08004038 <_ZN5MyImu7PitchAlEv>:

float* MyImu::PitchAl(){ return &pitchAcisi_f;}
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3350      	adds	r3, #80	; 0x50
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <_ZN5MyImu6RollAlEv>:
float* MyImu::RollAl(){return &rollAci_f;}
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	334c      	adds	r3, #76	; 0x4c
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <_ZN5MyImu5YawAlEv>:
float* MyImu::YawAl(){return &gyroYawAci_f;}
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3348      	adds	r3, #72	; 0x48
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_ZN5MyImu10SicaklikAlEv>:
float* MyImu::SicaklikAl(){return &Sicaklik_f;}
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3358      	adds	r3, #88	; 0x58
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <_ZN6IsaretC1Ev>:
 *  Created on: Aug 10, 2024
 *      Author: onurd
 */
#include "IsaretIsleme.h"

Isaret::Isaret()
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
{

}
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <_ZN6Isaret10ustSinirlaEfm>:
float Isaret::ustSinirla(float isaret_f,uint32_t sinirdeger_u32 )
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	ed87 0a02 	vstr	s0, [r7, #8]
 80040ba:	6079      	str	r1, [r7, #4]
	if(isaret_f > sinirdeger_u32 )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80040ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d2:	dd06      	ble.n	80040e2 <_ZN6Isaret10ustSinirlaEfm+0x34>
	{
		isaret_f = sinirdeger_u32;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	edc7 7a02 	vstr	s15, [r7, #8]
	}
	return isaret_f;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	ee07 3a90 	vmov	s15, r3
}
 80040e8:	eeb0 0a67 	vmov.f32	s0, s15
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <_ZN6Isaret10altSinirlaEfm>:
float Isaret::altSinirla(float isaret_f,uint32_t sinirdeger_u32 )
{
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8004102:	6079      	str	r1, [r7, #4]
	if(isaret_f < sinirdeger_u32 )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	d506      	bpl.n	800412a <_ZN6Isaret10altSinirlaEfm+0x34>
	{
		isaret_f = sinirdeger_u32;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004126:	edc7 7a02 	vstr	s15, [r7, #8]
	}
	return isaret_f;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	ee07 3a90 	vmov	s15, r3
}
 8004130:	eeb0 0a67 	vmov.f32	s0, s15
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <_ZN14KalmanFiltresiC1Efff>:
 */


#include "Kalman.h"

KalmanFiltresi::KalmanFiltresi(float islemGurultu_f, float olcumGurultu_f, float tahminHata_f)
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	ed87 0a02 	vstr	s0, [r7, #8]
 800414a:	edc7 0a01 	vstr	s1, [r7, #4]
 800414e:	ed87 1a00 	vstr	s2, [r7]
{
	Q=islemGurultu_f;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	601a      	str	r2, [r3, #0]
	R=olcumGurultu_f;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	605a      	str	r2, [r3, #4]
	P=tahminHata_f;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	609a      	str	r2, [r3, #8]
	K=0;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	60da      	str	r2, [r3, #12]
	X=0;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	611a      	str	r2, [r3, #16]
}
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <_ZN14KalmanFiltresi12veriGuncelleEf>:
float KalmanFiltresi::veriGuncelle(float veri_f)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	ed87 0a00 	vstr	s0, [r7]
    K = P / (P + R);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	edd3 6a02 	vldr	s13, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	ed93 7a02 	vldr	s14, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	edd3 7a01 	vldr	s15, [r3, #4]
 80041a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	edc3 7a03 	vstr	s15, [r3, #12]
    X = X + K * (veri_f - X);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	edd3 6a03 	vldr	s13, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80041c0:	ed97 6a00 	vldr	s12, [r7]
 80041c4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80041c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	edc3 7a04 	vstr	s15, [r3, #16]
    P = (1 - K) * P + Q;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80041dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80041ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	edd3 7a00 	vldr	s15, [r3]
 80041f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	edc3 7a02 	vstr	s15, [r3, #8]

    return X;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	ee07 3a90 	vmov	s15, r3
}
 8004206:	eeb0 0a67 	vmov.f32	s0, s15
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <_ZN5MyMagC1EP17I2C_HandleTypeDef>:
#include "Mag.h"

#define HMC5883L_ADDRESS 0x1E << 1 // I2C adresi

MyMag::MyMag(I2C_HandleTypeDef *hi2c)
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
{
  this->hi2c = hi2c;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	601a      	str	r2, [r3, #0]
  x_s16 = y_s16 = z_s16 = 0;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	811a      	strh	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	80da      	strh	r2, [r3, #6]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	809a      	strh	r2, [r3, #4]
  heading_f = headingAcisi_f = 0.0f;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	61da      	str	r2, [r3, #28]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	619a      	str	r2, [r3, #24]
  xOffset_f = yOffset_f =0.0f;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	611a      	str	r2, [r3, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	60da      	str	r2, [r3, #12]
}
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <_ZN5MyMag10YapilandirEv>:

void MyMag::Yapilandir()
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	6078      	str	r0, [r7, #4]
	//Configuration Register A
	uint8_t dataCRA[2] = {HMC5883_REGISTER_MAG_CRA_REG_M, 0x70}; // 8 ortalama, 15 Hz, normal ölçüm
 8004274:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004278:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDRESS, dataCRA, 2, 100);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	f107 0214 	add.w	r2, r7, #20
 8004282:	2364      	movs	r3, #100	; 0x64
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	2302      	movs	r3, #2
 8004288:	213c      	movs	r1, #60	; 0x3c
 800428a:	f002 fb03 	bl	8006894 <HAL_I2C_Master_Transmit>

	// Configuration Register B
	uint8_t dataCRB[2] = {HMC5883_REGISTER_MAG_CRB_REG_M, HMC5883_MAGGAIN_1_3}; // Kazanç = +/- 1.3
 800428e:	f242 0301 	movw	r3, #8193	; 0x2001
 8004292:	823b      	strh	r3, [r7, #16]
	HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDRESS, dataCRB, 2, 100);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	f107 0210 	add.w	r2, r7, #16
 800429c:	2364      	movs	r3, #100	; 0x64
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	2302      	movs	r3, #2
 80042a2:	213c      	movs	r1, #60	; 0x3c
 80042a4:	f002 faf6 	bl	8006894 <HAL_I2C_Master_Transmit>

	// Mode Register
	uint8_t dataMR[2] = {HMC5883_REGISTER_MAG_MR_REG_M, 0x00}; // Sürekli ölçüm modu
 80042a8:	2302      	movs	r3, #2
 80042aa:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hi2c, HMC5883L_ADDRESS, dataMR, 2, 100);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	f107 020c 	add.w	r2, r7, #12
 80042b4:	2364      	movs	r3, #100	; 0x64
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	2302      	movs	r3, #2
 80042ba:	213c      	movs	r1, #60	; 0x3c
 80042bc:	f002 faea 	bl	8006894 <HAL_I2C_Master_Transmit>
}
 80042c0:	bf00      	nop
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <_ZN5MyMag10MagDataOkuEPsS0_S0_>:

void MyMag::MagDataOku(int16_t *x_s16, int16_t *y_s16, int16_t *z_s16)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af04      	add	r7, sp, #16
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  uint8_t buffer[6];
  HAL_I2C_Mem_Read(hi2c, HMC5883L_ADDRESS, HMC5883_REGISTER_MAG_OUT_X_H_M, 1, buffer, 6, 100);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	2364      	movs	r3, #100	; 0x64
 80042dc:	9302      	str	r3, [sp, #8]
 80042de:	2306      	movs	r3, #6
 80042e0:	9301      	str	r3, [sp, #4]
 80042e2:	f107 0310 	add.w	r3, r7, #16
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2301      	movs	r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	213c      	movs	r1, #60	; 0x3c
 80042ee:	f002 fefb 	bl	80070e8 <HAL_I2C_Mem_Read>

  *x_s16 = (int16_t)((buffer[0] << 8) | buffer[1]);
 80042f2:	7c3b      	ldrb	r3, [r7, #16]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	b21a      	sxth	r2, r3
 80042f8:	7c7b      	ldrb	r3, [r7, #17]
 80042fa:	b21b      	sxth	r3, r3
 80042fc:	4313      	orrs	r3, r2
 80042fe:	b21a      	sxth	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	801a      	strh	r2, [r3, #0]
  *z_s16 = (int16_t)((buffer[2] << 8) | buffer[3]);
 8004304:	7cbb      	ldrb	r3, [r7, #18]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	b21a      	sxth	r2, r3
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	b21b      	sxth	r3, r3
 800430e:	4313      	orrs	r3, r2
 8004310:	b21a      	sxth	r2, r3
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	801a      	strh	r2, [r3, #0]
  *y_s16 = (int16_t)((buffer[4] << 8) | buffer[5]);
 8004316:	7d3b      	ldrb	r3, [r7, #20]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	b21a      	sxth	r2, r3
 800431c:	7d7b      	ldrb	r3, [r7, #21]
 800431e:	b21b      	sxth	r3, r3
 8004320:	4313      	orrs	r3, r2
 8004322:	b21a      	sxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	801a      	strh	r2, [r3, #0]
}
 8004328:	bf00      	nop
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <_ZN5MyMag9KalibreEtEv>:
void MyMag::KalibreEt()
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
    int16_t xEksen_s16, yEksen_s16,zEksen_s16;
    int16_t xMin = 3200, yMin = 3200,zMin = 3200;
 8004338:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800433c:	83fb      	strh	r3, [r7, #30]
 800433e:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8004342:	83bb      	strh	r3, [r7, #28]
 8004344:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8004348:	837b      	strh	r3, [r7, #26]
    int16_t xMax = -3200, yMax = -3200,zMax=-3200;
 800434a:	f24f 3380 	movw	r3, #62336	; 0xf380
 800434e:	833b      	strh	r3, [r7, #24]
 8004350:	f24f 3380 	movw	r3, #62336	; 0xf380
 8004354:	82fb      	strh	r3, [r7, #22]
 8004356:	f24f 3380 	movw	r3, #62336	; 0xf380
 800435a:	82bb      	strh	r3, [r7, #20]


    for (int i = 0; i < 1000; i++)
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	e03e      	b.n	80043e0 <_ZN5MyMag9KalibreEtEv+0xb0>
    {
        MagDataOku(&xEksen_s16, &yEksen_s16, &zEksen_s16);
 8004362:	f107 030a 	add.w	r3, r7, #10
 8004366:	f107 020c 	add.w	r2, r7, #12
 800436a:	f107 010e 	add.w	r1, r7, #14
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff ffaa 	bl	80042c8 <_ZN5MyMag10MagDataOkuEPsS0_S0_>

        if (xEksen_s16 < xMin) xMin = xEksen_s16;
 8004374:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004378:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800437c:	429a      	cmp	r2, r3
 800437e:	dd01      	ble.n	8004384 <_ZN5MyMag9KalibreEtEv+0x54>
 8004380:	89fb      	ldrh	r3, [r7, #14]
 8004382:	83fb      	strh	r3, [r7, #30]
        if (xEksen_s16 > xMax) xMax = xEksen_s16;
 8004384:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004388:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800438c:	429a      	cmp	r2, r3
 800438e:	da01      	bge.n	8004394 <_ZN5MyMag9KalibreEtEv+0x64>
 8004390:	89fb      	ldrh	r3, [r7, #14]
 8004392:	833b      	strh	r3, [r7, #24]
        if (yEksen_s16 < yMin) yMin = yEksen_s16;
 8004394:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004398:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800439c:	429a      	cmp	r2, r3
 800439e:	dd01      	ble.n	80043a4 <_ZN5MyMag9KalibreEtEv+0x74>
 80043a0:	89bb      	ldrh	r3, [r7, #12]
 80043a2:	83bb      	strh	r3, [r7, #28]
        if (yEksen_s16 > yMax) yMax = yEksen_s16;
 80043a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80043a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	da01      	bge.n	80043b4 <_ZN5MyMag9KalibreEtEv+0x84>
 80043b0:	89bb      	ldrh	r3, [r7, #12]
 80043b2:	82fb      	strh	r3, [r7, #22]
        if (zEksen_s16 < zMin) zMin = zEksen_s16;
 80043b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80043b8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80043bc:	429a      	cmp	r2, r3
 80043be:	dd01      	ble.n	80043c4 <_ZN5MyMag9KalibreEtEv+0x94>
 80043c0:	897b      	ldrh	r3, [r7, #10]
 80043c2:	837b      	strh	r3, [r7, #26]
        if (zEksen_s16 > zMax) zMax = zEksen_s16;
 80043c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80043c8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	da01      	bge.n	80043d4 <_ZN5MyMag9KalibreEtEv+0xa4>
 80043d0:	897b      	ldrh	r3, [r7, #10]
 80043d2:	82bb      	strh	r3, [r7, #20]

        HAL_Delay(10);
 80043d4:	200a      	movs	r0, #10
 80043d6:	f001 fd77 	bl	8005ec8 <HAL_Delay>
    for (int i = 0; i < 1000; i++)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	3301      	adds	r3, #1
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043e6:	dbbc      	blt.n	8004362 <_ZN5MyMag9KalibreEtEv+0x32>
    }

    xOffset_f = (xMax + xMin) / 2;
 80043e8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80043ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80043f0:	4413      	add	r3, r2
 80043f2:	0fda      	lsrs	r2, r3, #31
 80043f4:	4413      	add	r3, r2
 80043f6:	105b      	asrs	r3, r3, #1
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	edc3 7a03 	vstr	s15, [r3, #12]
    yOffset_f = (yMax + yMin) / 2;
 8004406:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800440a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800440e:	4413      	add	r3, r2
 8004410:	0fda      	lsrs	r2, r3, #31
 8004412:	4413      	add	r3, r2
 8004414:	105b      	asrs	r3, r3, #1
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	edc3 7a04 	vstr	s15, [r3, #16]
    zOffset_f = (zMax + zMin) / 2;
 8004424:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004428:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800442c:	4413      	add	r3, r2
 800442e:	0fda      	lsrs	r2, r3, #31
 8004430:	4413      	add	r3, r2
 8004432:	105b      	asrs	r3, r3, #1
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8004442:	bf00      	nop
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	0000      	movs	r0, r0
 800444c:	0000      	movs	r0, r0
	...

08004450 <_ZN5MyMag14HeadingOlusturEff>:
float* MyMag::HeadingOlustur(float pitch, float roll)
{
 8004450:	b5b0      	push	{r4, r5, r7, lr}
 8004452:	b08a      	sub	sp, #40	; 0x28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	ed87 0a02 	vstr	s0, [r7, #8]
 800445c:	edc7 0a01 	vstr	s1, [r7, #4]
	float kalibreliX_f, kalibreliY_f,kalibreliZ_f;
	float TiltliX_f,TiltliY_f;
	float pitchRad,rollRad;
	MagDataOku(&x_s16,&y_s16,&z_s16);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1d19      	adds	r1, r3, #4
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1d9a      	adds	r2, r3, #6
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3308      	adds	r3, #8
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff ff2b 	bl	80042c8 <_ZN5MyMag10MagDataOkuEPsS0_S0_>

	pitchRad = pitch * (M_PI / 180.0);
 8004472:	68b8      	ldr	r0, [r7, #8]
 8004474:	f7fc f860 	bl	8000538 <__aeabi_f2d>
 8004478:	a359      	add	r3, pc, #356	; (adr r3, 80045e0 <_ZN5MyMag14HeadingOlusturEff+0x190>)
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	f7fc f8b3 	bl	80005e8 <__aeabi_dmul>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	f7fc fba5 	bl	8000bd8 <__aeabi_d2f>
 800448e:	4603      	mov	r3, r0
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
	rollRad = roll * (M_PI / 180.0);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc f850 	bl	8000538 <__aeabi_f2d>
 8004498:	a351      	add	r3, pc, #324	; (adr r3, 80045e0 <_ZN5MyMag14HeadingOlusturEff+0x190>)
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f7fc f8a3 	bl	80005e8 <__aeabi_dmul>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4610      	mov	r0, r2
 80044a8:	4619      	mov	r1, r3
 80044aa:	f7fc fb95 	bl	8000bd8 <__aeabi_d2f>
 80044ae:	4603      	mov	r3, r0
 80044b0:	623b      	str	r3, [r7, #32]

	kalibreliX_f = x_s16 - xOffset_f;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80044b8:	ee07 3a90 	vmov	s15, r3
 80044bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80044c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044ca:	edc7 7a07 	vstr	s15, [r7, #28]
	kalibreliY_f = y_s16 - yOffset_f;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	edd3 7a04 	vldr	s15, [r3, #16]
 80044e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e6:	edc7 7a06 	vstr	s15, [r7, #24]
	kalibreliZ_f = z_s16 - zOffset_f;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80044fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004502:	edc7 7a05 	vstr	s15, [r7, #20]
	//TiltliX_f = kalibreliX_f * cos(pitchRad) + kalibreliZ_f * sin(pitchRad);
	//TiltliY_f = kalibreliY_f * cos(rollRad) - kalibreliZ_f * sin(rollRad);

	heading_f = atan2(kalibreliY_f, kalibreliX_f); //- pi ve pi arasında değer verir
 8004506:	69b8      	ldr	r0, [r7, #24]
 8004508:	f7fc f816 	bl	8000538 <__aeabi_f2d>
 800450c:	4604      	mov	r4, r0
 800450e:	460d      	mov	r5, r1
 8004510:	69f8      	ldr	r0, [r7, #28]
 8004512:	f7fc f811 	bl	8000538 <__aeabi_f2d>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	ec43 2b11 	vmov	d1, r2, r3
 800451e:	ec45 4b10 	vmov	d0, r4, r5
 8004522:	f006 f9cd 	bl	800a8c0 <atan2>
 8004526:	ec53 2b10 	vmov	r2, r3, d0
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	f7fc fb53 	bl	8000bd8 <__aeabi_d2f>
 8004532:	4602      	mov	r2, r0
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	619a      	str	r2, [r3, #24]

	if(heading_f < 0)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	edd3 7a06 	vldr	s15, [r3, #24]
 800453e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004546:	d512      	bpl.n	800456e <_ZN5MyMag14HeadingOlusturEff+0x11e>
		heading_f += 2*M_PI;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	4618      	mov	r0, r3
 800454e:	f7fb fff3 	bl	8000538 <__aeabi_f2d>
 8004552:	a325      	add	r3, pc, #148	; (adr r3, 80045e8 <_ZN5MyMag14HeadingOlusturEff+0x198>)
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f7fb fe90 	bl	800027c <__adddf3>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4610      	mov	r0, r2
 8004562:	4619      	mov	r1, r3
 8004564:	f7fc fb38 	bl	8000bd8 <__aeabi_d2f>
 8004568:	4602      	mov	r2, r0
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	619a      	str	r2, [r3, #24]

	if(heading_f > 2*M_PI)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fb ffe0 	bl	8000538 <__aeabi_f2d>
 8004578:	a31b      	add	r3, pc, #108	; (adr r3, 80045e8 <_ZN5MyMag14HeadingOlusturEff+0x198>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f7fc fac3 	bl	8000b08 <__aeabi_dcmpgt>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <_ZN5MyMag14HeadingOlusturEff+0x15e>
		heading_f -= 2*M_PI;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	4618      	mov	r0, r3
 800458e:	f7fb ffd3 	bl	8000538 <__aeabi_f2d>
 8004592:	a315      	add	r3, pc, #84	; (adr r3, 80045e8 <_ZN5MyMag14HeadingOlusturEff+0x198>)
 8004594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004598:	f7fb fe6e 	bl	8000278 <__aeabi_dsub>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4610      	mov	r0, r2
 80045a2:	4619      	mov	r1, r3
 80045a4:	f7fc fb18 	bl	8000bd8 <__aeabi_d2f>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	619a      	str	r2, [r3, #24]


	headingAcisi_f = heading_f * (180/M_PI); // dereceye çevrilir
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fb ffc0 	bl	8000538 <__aeabi_f2d>
 80045b8:	a30d      	add	r3, pc, #52	; (adr r3, 80045f0 <_ZN5MyMag14HeadingOlusturEff+0x1a0>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f7fc f813 	bl	80005e8 <__aeabi_dmul>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4610      	mov	r0, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	f7fc fb05 	bl	8000bd8 <__aeabi_d2f>
 80045ce:	4602      	mov	r2, r0
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	61da      	str	r2, [r3, #28]

	return &headingAcisi_f;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	331c      	adds	r3, #28

}
 80045d8:	4618      	mov	r0, r3
 80045da:	3728      	adds	r7, #40	; 0x28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bdb0      	pop	{r4, r5, r7, pc}
 80045e0:	a2529d39 	.word	0xa2529d39
 80045e4:	3f91df46 	.word	0x3f91df46
 80045e8:	54442d18 	.word	0x54442d18
 80045ec:	401921fb 	.word	0x401921fb
 80045f0:	1a63c1f8 	.word	0x1a63c1f8
 80045f4:	404ca5dc 	.word	0x404ca5dc

080045f8 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8004602:	edc7 0a00 	vstr	s1, [r7]
 8004606:	edd7 0a00 	vldr	s1, [r7]
 800460a:	ed97 0a01 	vldr	s0, [r7, #4]
 800460e:	f006 fa2c 	bl	800aa6a <atan2f>
 8004612:	eef0 7a40 	vmov.f32	s15, s0
 8004616:	eeb0 0a67 	vmov.f32	s0, s15
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	ed87 0a01 	vstr	s0, [r7, #4]
 800462a:	ed97 0a01 	vldr	s0, [r7, #4]
 800462e:	f006 fa3d 	bl	800aaac <cosf>
 8004632:	eef0 7a40 	vmov.f32	s15, s0
 8004636:	eeb0 0a67 	vmov.f32	s0, s15
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	ed87 0a01 	vstr	s0, [r7, #4]
 800464a:	ed97 0a01 	vldr	s0, [r7, #4]
 800464e:	f006 fa71 	bl	800ab34 <sinf>
 8004652:	eef0 7a40 	vmov.f32	s15, s0
 8004656:	eeb0 0a67 	vmov.f32	s0, s15
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	ed87 0a01 	vstr	s0, [r7, #4]
 800466a:	ed97 0a01 	vldr	s0, [r7, #4]
 800466e:	f006 f9ff 	bl	800aa70 <sqrtf>
 8004672:	eef0 7a40 	vmov.f32	s15, s0
 8004676:	eeb0 0a67 	vmov.f32	s0, s15
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_P12GPIO_TypeDeftS3_t>:
 *
 *  Created on: Jun 29, 2024
 *      Author: onurd
 */
#include "Motor.h"
Motor::Motor(TIM_HandleTypeDef* htim_pwm, TIM_HandleTypeDef* htim_enc, GPIO_TypeDef* in1_port, uint16_t in1_pin, GPIO_TypeDef* in2_port, uint16_t in2_pin)
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	615a      	str	r2, [r3, #20]
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	841a      	strh	r2, [r3, #32]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	845a      	strh	r2, [r3, #34]	; 0x22
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
	 htim_pwm_ = htim_pwm;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	601a      	str	r2, [r3, #0]
	 htim_enc_ = htim_enc;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	605a      	str	r2, [r3, #4]
	 in1_port_ = in1_port;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	609a      	str	r2, [r3, #8]
	 in1_pin_ = in1_pin;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8b3a      	ldrh	r2, [r7, #24]
 80046ce:	821a      	strh	r2, [r3, #16]
	 in2_port_ = in2_port;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	60da      	str	r2, [r3, #12]
	 in2_pin_ = in2_pin;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8c3a      	ldrh	r2, [r7, #32]
 80046da:	825a      	strh	r2, [r3, #18]
}
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <_ZN5Motor10YapilandirEv>:
void Motor::Yapilandir()
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim_pwm_, TIM_CHANNEL_1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f004 f913 	bl	8008924 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim_pwm_, TIM_CHANNEL_2);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2104      	movs	r1, #4
 8004704:	4618      	mov	r0, r3
 8004706:	f004 f90d 	bl	8008924 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim_pwm_, TIM_CHANNEL_3);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2108      	movs	r1, #8
 8004710:	4618      	mov	r0, r3
 8004712:	f004 f907 	bl	8008924 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim_pwm_, TIM_CHANNEL_4);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	210c      	movs	r1, #12
 800471c:	4618      	mov	r0, r3
 800471e:	f004 f901 	bl	8008924 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(htim_enc_, TIM_CHANNEL_ALL);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	213c      	movs	r1, #60	; 0x3c
 8004728:	4618      	mov	r0, r3
 800472a:	f004 fa69 	bl	8008c00 <HAL_TIM_Encoder_Start>
    __HAL_TIM_SET_COUNTER(htim_enc_, 0);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2200      	movs	r2, #0
 8004736:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <_ZN5Motor3PWMEtm>:
void Motor::PWM(uint16_t pwmDeger_u16,uint32_t channel_u32)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	460b      	mov	r3, r1
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_COMPARE(htim_pwm_, channel_u32, pwmDeger_u16); // (0-1000)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d105      	bne.n	8004760 <_ZN5Motor3PWMEtm+0x20>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	897a      	ldrh	r2, [r7, #10]
 800475c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800475e:	e016      	b.n	800478e <_ZN5Motor3PWMEtm+0x4e>
	__HAL_TIM_SET_COMPARE(htim_pwm_, channel_u32, pwmDeger_u16); // (0-1000)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b04      	cmp	r3, #4
 8004764:	d105      	bne.n	8004772 <_ZN5Motor3PWMEtm+0x32>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	897a      	ldrh	r2, [r7, #10]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004770:	e00d      	b.n	800478e <_ZN5Motor3PWMEtm+0x4e>
	__HAL_TIM_SET_COMPARE(htim_pwm_, channel_u32, pwmDeger_u16); // (0-1000)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d105      	bne.n	8004784 <_ZN5Motor3PWMEtm+0x44>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	897a      	ldrh	r2, [r7, #10]
 8004780:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004782:	e004      	b.n	800478e <_ZN5Motor3PWMEtm+0x4e>
	__HAL_TIM_SET_COMPARE(htim_pwm_, channel_u32, pwmDeger_u16); // (0-1000)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	897a      	ldrh	r2, [r7, #10]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <_ZN5Motor8IleriGitEv>:

	motorAci_f = fmod(((float)toplamEncoderDegeri_s64 * 0.02347), 360.0);
	motorTur_u8 = ((float)toplamEncoderDegeri_s64 * 0.02347)/ 360.0;
}
void Motor::IleriGit()
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(in1_port_, in1_pin_, GPIO_PIN_SET); // IN1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6898      	ldr	r0, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	8a1b      	ldrh	r3, [r3, #16]
 80047aa:	2201      	movs	r2, #1
 80047ac:	4619      	mov	r1, r3
 80047ae:	f001 feef 	bl	8006590 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(in2_port_, in2_pin_, GPIO_PIN_RESET); // IN2
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68d8      	ldr	r0, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8a5b      	ldrh	r3, [r3, #18]
 80047ba:	2200      	movs	r2, #0
 80047bc:	4619      	mov	r1, r3
 80047be:	f001 fee7 	bl	8006590 <HAL_GPIO_WritePin>
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <_ZN5Motor3DurEv>:
{
	 HAL_GPIO_WritePin(in1_port_, in1_pin_, GPIO_PIN_RESET); // IN1
	 HAL_GPIO_WritePin(in2_port_, in2_pin_,GPIO_PIN_SET); // IN2
}
void Motor::Dur()
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(in1_port_, in1_pin_, GPIO_PIN_RESET); // IN1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6898      	ldr	r0, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8a1b      	ldrh	r3, [r3, #16]
 80047da:	2200      	movs	r2, #0
 80047dc:	4619      	mov	r1, r3
 80047de:	f001 fed7 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in2_port_, in2_pin_, GPIO_PIN_RESET); // IN2
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68d8      	ldr	r0, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	8a5b      	ldrh	r3, [r3, #18]
 80047ea:	2200      	movs	r2, #0
 80047ec:	4619      	mov	r1, r3
 80047ee:	f001 fecf 	bl	8006590 <HAL_GPIO_WritePin>
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <_ZN5ArabaC1ER5MotorS1_>:
int8_t* Motor::TurAl()
{
    return &motorTur_u8;
}

Araba::Araba(Motor& lmotor, Motor& rmotor) : lm(lmotor), rm(rmotor)
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	605a      	str	r2, [r3, #4]
{

}
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_ZN5Araba3DurEv>:
void Araba::Dur()
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	lm.Dur();
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ffcc 	bl	80047ca <_ZN5Motor3DurEv>
	rm.Dur();
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff ffc7 	bl	80047ca <_ZN5Motor3DurEv>
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <_ZN5Araba6sagGitEv>:
{
	 lm.IleriGit();
	 rm.IleriGit();
}
void Araba::sagGit()
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	lm.IleriGit();
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ffa2 	bl	800479a <_ZN5Motor8IleriGitEv>
	rm.IleriGit();
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ff9d 	bl	800479a <_ZN5Motor8IleriGitEv>
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <_ZN5Araba6solGitEv>:
void Araba::solGit()
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
    lm.IleriGit();
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff ff90 	bl	800479a <_ZN5Motor8IleriGitEv>
    rm.IleriGit();
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff ff8b 	bl	800479a <_ZN5Motor8IleriGitEv>
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	0000      	movs	r0, r0
	...

08004890 <_ZN5Araba9mesafeBulEffff>:


float Araba::mesafeBul(float guncelLat_f, float guncelLon_f, float gidilecekLat_f, float gidilecekLon_f)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	ed2d 8b02 	vpush	{d8}
 8004896:	b08c      	sub	sp, #48	; 0x30
 8004898:	af00      	add	r7, sp, #0
 800489a:	6178      	str	r0, [r7, #20]
 800489c:	ed87 0a04 	vstr	s0, [r7, #16]
 80048a0:	edc7 0a03 	vstr	s1, [r7, #12]
 80048a4:	ed87 1a02 	vstr	s2, [r7, #8]
 80048a8:	edc7 1a01 	vstr	s3, [r7, #4]
	guncelLat_f = guncelLat_f * (M_PI / 180.0);
 80048ac:	6938      	ldr	r0, [r7, #16]
 80048ae:	f7fb fe43 	bl	8000538 <__aeabi_f2d>
 80048b2:	a364      	add	r3, pc, #400	; (adr r3, 8004a44 <_ZN5Araba9mesafeBulEffff+0x1b4>)
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f7fb fe96 	bl	80005e8 <__aeabi_dmul>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4610      	mov	r0, r2
 80048c2:	4619      	mov	r1, r3
 80048c4:	f7fc f988 	bl	8000bd8 <__aeabi_d2f>
 80048c8:	4603      	mov	r3, r0
 80048ca:	613b      	str	r3, [r7, #16]
	guncelLon_f = guncelLon_f * (M_PI / 180.0);
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f7fb fe33 	bl	8000538 <__aeabi_f2d>
 80048d2:	a35c      	add	r3, pc, #368	; (adr r3, 8004a44 <_ZN5Araba9mesafeBulEffff+0x1b4>)
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	f7fb fe86 	bl	80005e8 <__aeabi_dmul>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4610      	mov	r0, r2
 80048e2:	4619      	mov	r1, r3
 80048e4:	f7fc f978 	bl	8000bd8 <__aeabi_d2f>
 80048e8:	4603      	mov	r3, r0
 80048ea:	60fb      	str	r3, [r7, #12]
	gidilecekLat_f = gidilecekLat_f * (M_PI / 180.0);
 80048ec:	68b8      	ldr	r0, [r7, #8]
 80048ee:	f7fb fe23 	bl	8000538 <__aeabi_f2d>
 80048f2:	a354      	add	r3, pc, #336	; (adr r3, 8004a44 <_ZN5Araba9mesafeBulEffff+0x1b4>)
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	f7fb fe76 	bl	80005e8 <__aeabi_dmul>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4610      	mov	r0, r2
 8004902:	4619      	mov	r1, r3
 8004904:	f7fc f968 	bl	8000bd8 <__aeabi_d2f>
 8004908:	4603      	mov	r3, r0
 800490a:	60bb      	str	r3, [r7, #8]
	gidilecekLon_f = gidilecekLon_f * (M_PI / 180.0);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fb fe13 	bl	8000538 <__aeabi_f2d>
 8004912:	a34c      	add	r3, pc, #304	; (adr r3, 8004a44 <_ZN5Araba9mesafeBulEffff+0x1b4>)
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f7fb fe66 	bl	80005e8 <__aeabi_dmul>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4610      	mov	r0, r2
 8004922:	4619      	mov	r1, r3
 8004924:	f7fc f958 	bl	8000bd8 <__aeabi_d2f>
 8004928:	4603      	mov	r3, r0
 800492a:	607b      	str	r3, [r7, #4]

	float latFark_f = gidilecekLat_f - guncelLat_f;
 800492c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004930:	edd7 7a04 	vldr	s15, [r7, #16]
 8004934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004938:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float lonFark_f = gidilecekLon_f - guncelLon_f;
 800493c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004940:	edd7 7a03 	vldr	s15, [r7, #12]
 8004944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004948:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	    // Haversine formülü
	float a = sin(latFark_f / 2) * sin(latFark_f / 2) + cos(guncelLat_f) * cos(gidilecekLat_f) * sin(lonFark_f / 2) * sin(lonFark_f / 2);
 800494c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004950:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004954:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004958:	eeb0 0a47 	vmov.f32	s0, s14
 800495c:	f7ff fe70 	bl	8004640 <_ZSt3sinf>
 8004960:	eeb0 8a40 	vmov.f32	s16, s0
 8004964:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004968:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800496c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004970:	eeb0 0a47 	vmov.f32	s0, s14
 8004974:	f7ff fe64 	bl	8004640 <_ZSt3sinf>
 8004978:	eef0 7a40 	vmov.f32	s15, s0
 800497c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004980:	ed97 0a04 	vldr	s0, [r7, #16]
 8004984:	f7ff fe4c 	bl	8004620 <_ZSt3cosf>
 8004988:	eef0 8a40 	vmov.f32	s17, s0
 800498c:	ed97 0a02 	vldr	s0, [r7, #8]
 8004990:	f7ff fe46 	bl	8004620 <_ZSt3cosf>
 8004994:	eef0 7a40 	vmov.f32	s15, s0
 8004998:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800499c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80049a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80049a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80049a8:	eeb0 0a47 	vmov.f32	s0, s14
 80049ac:	f7ff fe48 	bl	8004640 <_ZSt3sinf>
 80049b0:	eef0 7a40 	vmov.f32	s15, s0
 80049b4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80049b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80049bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80049c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80049c4:	eeb0 0a47 	vmov.f32	s0, s14
 80049c8:	f7ff fe3a 	bl	8004640 <_ZSt3sinf>
 80049cc:	eef0 7a40 	vmov.f32	s15, s0
 80049d0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80049d4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80049d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float c = 2 * atan2(sqrt(a), sqrt(1 - a));
 80049dc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80049e0:	f7ff fe3e 	bl	8004660 <_ZSt4sqrtf>
 80049e4:	eeb0 8a40 	vmov.f32	s16, s0
 80049e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80049f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049f4:	eeb0 0a67 	vmov.f32	s0, s15
 80049f8:	f7ff fe32 	bl	8004660 <_ZSt4sqrtf>
 80049fc:	eef0 7a40 	vmov.f32	s15, s0
 8004a00:	eef0 0a67 	vmov.f32	s1, s15
 8004a04:	eeb0 0a48 	vmov.f32	s0, s16
 8004a08:	f7ff fdf6 	bl	80045f8 <_ZSt5atan2ff>
 8004a0c:	eef0 7a40 	vmov.f32	s15, s0
 8004a10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a14:	edc7 7a08 	vstr	s15, [r7, #32]

	float mesafe_f = DUNYA_YARICAPI * c;
 8004a18:	edd7 7a08 	vldr	s15, [r7, #32]
 8004a1c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004a40 <_ZN5Araba9mesafeBulEffff+0x1b0>
 8004a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a24:	edc7 7a07 	vstr	s15, [r7, #28]

	return mesafe_f;
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	ee07 3a90 	vmov	s15, r3
}
 8004a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a32:	3730      	adds	r7, #48	; 0x30
 8004a34:	46bd      	mov	sp, r7
 8004a36:	ecbd 8b02 	vpop	{d8}
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	f3af 8000 	nop.w
 8004a40:	4ac26d70 	.word	0x4ac26d70
 8004a44:	a2529d39 	.word	0xa2529d39
 8004a48:	3f91df46 	.word	0x3f91df46
 8004a4c:	00000000 	.word	0x00000000

08004a50 <_ZN5Araba10yonelimBulEffff>:
float Araba::yonelimBul(float guncelLat_f, float guncelLon_f, float gidilecekLat_f, float gidilecekLon_f)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	ed2d 8b02 	vpush	{d8}
 8004a56:	b08a      	sub	sp, #40	; 0x28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6178      	str	r0, [r7, #20]
 8004a5c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004a60:	edc7 0a03 	vstr	s1, [r7, #12]
 8004a64:	ed87 1a02 	vstr	s2, [r7, #8]
 8004a68:	edc7 1a01 	vstr	s3, [r7, #4]
	guncelLat_f = guncelLat_f * (M_PI / 180.0);
 8004a6c:	6938      	ldr	r0, [r7, #16]
 8004a6e:	f7fb fd63 	bl	8000538 <__aeabi_f2d>
 8004a72:	a360      	add	r3, pc, #384	; (adr r3, 8004bf4 <_ZN5Araba10yonelimBulEffff+0x1a4>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fdb6 	bl	80005e8 <__aeabi_dmul>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	f7fc f8a8 	bl	8000bd8 <__aeabi_d2f>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	613b      	str	r3, [r7, #16]
	guncelLon_f = guncelLon_f * (M_PI / 180.0);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7fb fd53 	bl	8000538 <__aeabi_f2d>
 8004a92:	a358      	add	r3, pc, #352	; (adr r3, 8004bf4 <_ZN5Araba10yonelimBulEffff+0x1a4>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f7fb fda6 	bl	80005e8 <__aeabi_dmul>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f7fc f898 	bl	8000bd8 <__aeabi_d2f>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	60fb      	str	r3, [r7, #12]
	gidilecekLat_f = gidilecekLat_f * (M_PI / 180.0);
 8004aac:	68b8      	ldr	r0, [r7, #8]
 8004aae:	f7fb fd43 	bl	8000538 <__aeabi_f2d>
 8004ab2:	a350      	add	r3, pc, #320	; (adr r3, 8004bf4 <_ZN5Araba10yonelimBulEffff+0x1a4>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fd96 	bl	80005e8 <__aeabi_dmul>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	f7fc f888 	bl	8000bd8 <__aeabi_d2f>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	60bb      	str	r3, [r7, #8]
	gidilecekLon_f = gidilecekLon_f * (M_PI / 180.0);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7fb fd33 	bl	8000538 <__aeabi_f2d>
 8004ad2:	a348      	add	r3, pc, #288	; (adr r3, 8004bf4 <_ZN5Araba10yonelimBulEffff+0x1a4>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb fd86 	bl	80005e8 <__aeabi_dmul>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	f7fc f878 	bl	8000bd8 <__aeabi_d2f>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	607b      	str	r3, [r7, #4]

	float lonFark_f = gidilecekLon_f - guncelLon_f;
 8004aec:	ed97 7a01 	vldr	s14, [r7, #4]
 8004af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004af8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Bearing formülü
    float x = sin(lonFark_f) * cos(gidilecekLat_f);
 8004afc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004b00:	f7ff fd9e 	bl	8004640 <_ZSt3sinf>
 8004b04:	eeb0 8a40 	vmov.f32	s16, s0
 8004b08:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b0c:	f7ff fd88 	bl	8004620 <_ZSt3cosf>
 8004b10:	eef0 7a40 	vmov.f32	s15, s0
 8004b14:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004b18:	edc7 7a08 	vstr	s15, [r7, #32]
    float y = cos(guncelLat_f) * sin(gidilecekLat_f) - sin(guncelLat_f) * cos(gidilecekLat_f) * cos(lonFark_f);
 8004b1c:	ed97 0a04 	vldr	s0, [r7, #16]
 8004b20:	f7ff fd7e 	bl	8004620 <_ZSt3cosf>
 8004b24:	eeb0 8a40 	vmov.f32	s16, s0
 8004b28:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b2c:	f7ff fd88 	bl	8004640 <_ZSt3sinf>
 8004b30:	eef0 7a40 	vmov.f32	s15, s0
 8004b34:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004b38:	ed97 0a04 	vldr	s0, [r7, #16]
 8004b3c:	f7ff fd80 	bl	8004640 <_ZSt3sinf>
 8004b40:	eef0 8a40 	vmov.f32	s17, s0
 8004b44:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b48:	f7ff fd6a 	bl	8004620 <_ZSt3cosf>
 8004b4c:	eef0 7a40 	vmov.f32	s15, s0
 8004b50:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8004b54:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004b58:	f7ff fd62 	bl	8004620 <_ZSt3cosf>
 8004b5c:	eef0 7a40 	vmov.f32	s15, s0
 8004b60:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004b64:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004b68:	edc7 7a07 	vstr	s15, [r7, #28]
    float yonelim_f = atan2(x, y);
 8004b6c:	edd7 0a07 	vldr	s1, [r7, #28]
 8004b70:	ed97 0a08 	vldr	s0, [r7, #32]
 8004b74:	f7ff fd40 	bl	80045f8 <_ZSt5atan2ff>
 8004b78:	ed87 0a06 	vstr	s0, [r7, #24]

    yonelim_f = yonelim_f * (180.0 / M_PI);
 8004b7c:	69b8      	ldr	r0, [r7, #24]
 8004b7e:	f7fb fcdb 	bl	8000538 <__aeabi_f2d>
 8004b82:	a31e      	add	r3, pc, #120	; (adr r3, 8004bfc <_ZN5Araba10yonelimBulEffff+0x1ac>)
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f7fb fd2e 	bl	80005e8 <__aeabi_dmul>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4610      	mov	r0, r2
 8004b92:	4619      	mov	r1, r3
 8004b94:	f7fc f820 	bl	8000bd8 <__aeabi_d2f>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	61bb      	str	r3, [r7, #24]

    return fmod(yonelim_f + 360.0, 360.0);
 8004b9c:	69b8      	ldr	r0, [r7, #24]
 8004b9e:	f7fb fccb 	bl	8000538 <__aeabi_f2d>
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <_ZN5Araba10yonelimBulEffff+0x1a0>)
 8004ba8:	f7fb fb68 	bl	800027c <__adddf3>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	ec43 2b17 	vmov	d7, r2, r3
 8004bb4:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8004be8 <_ZN5Araba10yonelimBulEffff+0x198>
 8004bb8:	eeb0 0a47 	vmov.f32	s0, s14
 8004bbc:	eef0 0a67 	vmov.f32	s1, s15
 8004bc0:	f005 fe80 	bl	800a8c4 <fmod>
 8004bc4:	ec53 2b10 	vmov	r2, r3, d0
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f7fc f804 	bl	8000bd8 <__aeabi_d2f>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	ee07 3a90 	vmov	s15, r3
}
 8004bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8004bda:	3728      	adds	r7, #40	; 0x28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	ecbd 8b02 	vpop	{d8}
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	f3af 8000 	nop.w
 8004be8:	00000000 	.word	0x00000000
 8004bec:	40768000 	.word	0x40768000
 8004bf0:	40768000 	.word	0x40768000
 8004bf4:	a2529d39 	.word	0xa2529d39
 8004bf8:	3f91df46 	.word	0x3f91df46
 8004bfc:	1a63c1f8 	.word	0x1a63c1f8
 8004c00:	404ca5dc 	.word	0x404ca5dc

08004c04 <_ZN5PaketC1EP20__UART_HandleTypeDef>:
	YOKLAMA=0x03,
	DUR=0x04

};

Paket::Paket(UART_HandleTypeDef* huart)
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	705a      	strb	r2, [r3, #1]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	709a      	strb	r2, [r3, #2]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	70da      	strb	r2, [r3, #3]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	711a      	strb	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	715a      	strb	r2, [r3, #5]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	719a      	strb	r2, [r3, #6]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
{
	this->huart=huart;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	609a      	str	r2, [r3, #8]

}
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <_ZN5PaketC1Ehhhh>:
Paket::Paket(uint8_t baslik1_u8, uint8_t baslik2_u8, uint8_t paketTipi_u8, uint8_t dataBoyutu_u8)
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	4608      	mov	r0, r1
 8004c94:	4611      	mov	r1, r2
 8004c96:	461a      	mov	r2, r3
 8004c98:	4603      	mov	r3, r0
 8004c9a:	70fb      	strb	r3, [r7, #3]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70bb      	strb	r3, [r7, #2]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	707b      	strb	r3, [r7, #1]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	705a      	strb	r2, [r3, #1]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	709a      	strb	r2, [r3, #2]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	70da      	strb	r2, [r3, #3]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	711a      	strb	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	715a      	strb	r2, [r3, #5]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	719a      	strb	r2, [r3, #6]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
{
	this->baslik1_u8=baslik1_u8;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	this->baslik2_u8=baslik2_u8;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	78ba      	ldrb	r2, [r7, #2]
 8004d18:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	this->paketTipi_u8=paketTipi_u8;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	787a      	ldrb	r2, [r7, #1]
 8004d20:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	this->dataBoyutu_u8=dataBoyutu_u8;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	7c3a      	ldrb	r2, [r7, #16]
 8004d28:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
}
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <_ZN5Paket20PaketKesmeYapilandirEv>:
void Paket::PaketKesmeYapilandir()
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &ArayuzData,1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6898      	ldr	r0, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	334e      	adds	r3, #78	; 0x4e
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f004 fe08 	bl	8009962 <HAL_UART_Receive_IT>
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <_ZN5Paket15GpsPaketOlusturEffff>:
void Paket::GpsPaketOlustur(float latitude,float longitude,float altitude,float derece)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6178      	str	r0, [r7, #20]
 8004d62:	ed87 0a04 	vstr	s0, [r7, #16]
 8004d66:	edc7 0a03 	vstr	s1, [r7, #12]
 8004d6a:	ed87 1a02 	vstr	s2, [r7, #8]
 8004d6e:	edc7 1a01 	vstr	s3, [r7, #4]

    gpspaket[0] = baslik1_u8;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	731a      	strb	r2, [r3, #12]
    gpspaket[1] = baslik2_u8;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	735a      	strb	r2, [r3, #13]
    gpspaket[2] = paketTipi_u8;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	739a      	strb	r2, [r3, #14]
    gpspaket[3] = dataBoyutu_u8;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f893 20eb 	ldrb.w	r2, [r3, #235]	; 0xeb
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	73da      	strb	r2, [r3, #15]

    floatToBytes(&latitude, latBytes_u8);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	4619      	mov	r1, r3
 8004da6:	6978      	ldr	r0, [r7, #20]
 8004da8:	f000 fd38 	bl	800581c <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&longitude, lonBytes_u8);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 8004db2:	f107 030c 	add.w	r3, r7, #12
 8004db6:	4619      	mov	r1, r3
 8004db8:	6978      	ldr	r0, [r7, #20]
 8004dba:	f000 fd2f 	bl	800581c <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&altitude, altBytes_u8);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8004dc4:	f107 0308 	add.w	r3, r7, #8
 8004dc8:	4619      	mov	r1, r3
 8004dca:	6978      	ldr	r0, [r7, #20]
 8004dcc:	f000 fd26 	bl	800581c <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&derece, dereceBytes_u8);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f103 02e4 	add.w	r2, r3, #228	; 0xe4
 8004dd6:	1d3b      	adds	r3, r7, #4
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6978      	ldr	r0, [r7, #20]
 8004ddc:	f000 fd1e 	bl	800581c <_ZN5Paket12floatToBytesEPfPh>

    memcpy(gpspaket + 4, latBytes_u8, 4);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	330c      	adds	r3, #12
 8004de4:	3304      	adds	r3, #4
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	32d8      	adds	r2, #216	; 0xd8
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	601a      	str	r2, [r3, #0]
    memcpy(gpspaket + 8, lonBytes_u8, 4);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	330c      	adds	r3, #12
 8004df2:	3308      	adds	r3, #8
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	32dc      	adds	r2, #220	; 0xdc
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	601a      	str	r2, [r3, #0]
    memcpy(gpspaket + 12, altBytes_u8, 4);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	330c      	adds	r3, #12
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	32e0      	adds	r2, #224	; 0xe0
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	601a      	str	r2, [r3, #0]
    memcpy(gpspaket + 16, dereceBytes_u8, 4);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	3310      	adds	r3, #16
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	32e4      	adds	r2, #228	; 0xe4
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	601a      	str	r2, [r3, #0]

    gpspaket[20]=CRC8Hesaplama(gpspaket,4, 20);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f103 010c 	add.w	r1, r3, #12
 8004e1e:	2314      	movs	r3, #20
 8004e20:	2204      	movs	r2, #4
 8004e22:	6978      	ldr	r0, [r7, #20]
 8004e24:	f000 fc57 	bl	80056d6 <_ZN5Paket13CRC8HesaplamaEPhhh>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <_ZN5Paket15ImuPaketOlusturEffff>:
void Paket::ImuPaketOlustur(float pitch,float roll,float heading,float sicaklik)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b086      	sub	sp, #24
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6178      	str	r0, [r7, #20]
 8004e42:	ed87 0a04 	vstr	s0, [r7, #16]
 8004e46:	edc7 0a03 	vstr	s1, [r7, #12]
 8004e4a:	ed87 1a02 	vstr	s2, [r7, #8]
 8004e4e:	edc7 1a01 	vstr	s3, [r7, #4]
    imupaket[0] = baslik1_u8;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    imupaket[1] = baslik2_u8;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    imupaket[2] = paketTipi_u8;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    imupaket[3] = dataBoyutu_u8;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f893 20eb 	ldrb.w	r2, [r3, #235]	; 0xeb
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    floatToBytes(&pitch, pitchBytes_u8);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8004e88:	f107 0310 	add.w	r3, r7, #16
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6978      	ldr	r0, [r7, #20]
 8004e90:	f000 fcc4 	bl	800581c <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&roll, rollBytes_u8);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 8004e9a:	f107 030c 	add.w	r3, r7, #12
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6978      	ldr	r0, [r7, #20]
 8004ea2:	f000 fcbb 	bl	800581c <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&heading, headingBytes_u8);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8004eac:	f107 0308 	add.w	r3, r7, #8
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6978      	ldr	r0, [r7, #20]
 8004eb4:	f000 fcb2 	bl	800581c <_ZN5Paket12floatToBytesEPfPh>
    floatToBytes(&sicaklik, sicaklikBytes_u8);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6978      	ldr	r0, [r7, #20]
 8004ec4:	f000 fcaa 	bl	800581c <_ZN5Paket12floatToBytesEPfPh>

    memcpy(imupaket + 4, pitchBytes_u8, 4);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	3321      	adds	r3, #33	; 0x21
 8004ecc:	3304      	adds	r3, #4
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	32c8      	adds	r2, #200	; 0xc8
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	601a      	str	r2, [r3, #0]
    memcpy(imupaket + 8, rollBytes_u8, 4);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	3321      	adds	r3, #33	; 0x21
 8004eda:	3308      	adds	r3, #8
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	32cc      	adds	r2, #204	; 0xcc
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	601a      	str	r2, [r3, #0]
    memcpy(imupaket + 12, headingBytes_u8, 4);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	3321      	adds	r3, #33	; 0x21
 8004ee8:	330c      	adds	r3, #12
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	32d0      	adds	r2, #208	; 0xd0
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	601a      	str	r2, [r3, #0]
    memcpy(imupaket + 16, sicaklikBytes_u8, 4);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	3321      	adds	r3, #33	; 0x21
 8004ef6:	3310      	adds	r3, #16
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	32d4      	adds	r2, #212	; 0xd4
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	601a      	str	r2, [r3, #0]

    imupaket[20] = CRC8Hesaplama(imupaket, 4,20);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8004f06:	2314      	movs	r3, #20
 8004f08:	2204      	movs	r2, #4
 8004f0a:	6978      	ldr	r0, [r7, #20]
 8004f0c:	f000 fbe3 	bl	80056d6 <_ZN5Paket13CRC8HesaplamaEPhhh>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8004f1a:	bf00      	nop
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <_ZN5Paket20VersiyonPaketOlusturEhhh>:
void Paket::VersiyonPaketOlustur(uint8_t b,uint8_t o,uint8_t s)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	4608      	mov	r0, r1
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4603      	mov	r3, r0
 8004f32:	70fb      	strb	r3, [r7, #3]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70bb      	strb	r3, [r7, #2]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	707b      	strb	r3, [r7, #1]
	versiyonpaket[0] = baslik1_u8;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	versiyonpaket[1] = baslik2_u8;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	versiyonpaket[2] = paketTipi_u8;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	versiyonpaket[3] = dataBoyutu_u8;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 20eb 	ldrb.w	r2, [r3, #235]	; 0xeb
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	versiyonpaket[4] = b;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	versiyonpaket[5] = o;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	78ba      	ldrb	r2, [r7, #2]
 8004f78:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	versiyonpaket[6] = s;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	787a      	ldrb	r2, [r7, #1]
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	versiyonpaket[7] = CRC8Hesaplama(versiyonpaket, 4,7);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f103 0136 	add.w	r1, r3, #54	; 0x36
 8004f8a:	2307      	movs	r3, #7
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fba1 	bl	80056d6 <_ZN5Paket13CRC8HesaplamaEPhhh>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <_ZN5Paket19YoklamaPaketOlusturEv>:
void Paket::YoklamaPaketOlustur()
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
	yoklamapaket[0] = baslik1_u8;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	yoklamapaket[1] = baslik2_u8;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	yoklamapaket[2] = paketTipi_u8;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	yoklamapaket[3] = dataBoyutu_u8;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 20eb 	ldrb.w	r2, [r3, #235]	; 0xeb
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	yoklamapaket[4] = 0x01;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	yoklamapaket[5] = 0x02;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	yoklamapaket[6] = 0x03;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	yoklamapaket[7] = CRC8Hesaplama(yoklamapaket, 4,7);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f103 013e 	add.w	r1, r3, #62	; 0x3e
 8004ffc:	2307      	movs	r3, #7
 8004ffe:	2204      	movs	r2, #4
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fb68 	bl	80056d6 <_ZN5Paket13CRC8HesaplamaEPhhh>
 8005006:	4603      	mov	r3, r0
 8005008:	461a      	mov	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_ZN5Paket16RotaPaketOlusturEv>:
void Paket::RotaPaketOlustur()
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	rotapaket[0] = baslik1_u8;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rotapaket[1] = baslik2_u8;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rotapaket[2] = paketTipi_u8;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rotapaket[3] = dataBoyutu_u8;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 20eb 	ldrb.w	r2, [r3, #235]	; 0xeb
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rotapaket[4] = 0x11;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2211      	movs	r2, #17
 8005054:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	rotapaket[5] = 0x22;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2222      	movs	r2, #34	; 0x22
 800505c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rotapaket[6] = 0x33;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2233      	movs	r2, #51	; 0x33
 8005064:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rotapaket[7] = CRC8Hesaplama(rotapaket, 4,7);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f103 0146 	add.w	r1, r3, #70	; 0x46
 800506e:	2307      	movs	r3, #7
 8005070:	2204      	movs	r2, #4
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fb2f 	bl	80056d6 <_ZN5Paket13CRC8HesaplamaEPhhh>
 8005078:	4603      	mov	r3, r0
 800507a:	461a      	mov	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
}
 8005082:	bf00      	nop
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <_ZN5Paket13gpsPaketCagirEPh>:
void Paket::gpsPaketCagir(uint8_t *kopyaDizi){memcpy(kopyaDizi, gpspaket, sizeof(gpspaket));}
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	330c      	adds	r3, #12
 8005098:	2215      	movs	r2, #21
 800509a:	4619      	mov	r1, r3
 800509c:	6838      	ldr	r0, [r7, #0]
 800509e:	f008 fffa 	bl	800e096 <memcpy>
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <_ZN5Paket13imuPaketCagirEPh>:
void Paket::imuPaketCagir(uint8_t *kopyaDizi){memcpy(kopyaDizi, imupaket, sizeof(imupaket));}
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3321      	adds	r3, #33	; 0x21
 80050b8:	2215      	movs	r2, #21
 80050ba:	4619      	mov	r1, r3
 80050bc:	6838      	ldr	r0, [r7, #0]
 80050be:	f008 ffea 	bl	800e096 <memcpy>
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <_ZN5Paket18versiyonPaketCagirEPh>:
void Paket::versiyonPaketCagir(uint8_t *kopyaDizi){memcpy(kopyaDizi, versiyonpaket, sizeof(versiyonpaket));}
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3336      	adds	r3, #54	; 0x36
 80050d8:	2208      	movs	r2, #8
 80050da:	4619      	mov	r1, r3
 80050dc:	6838      	ldr	r0, [r7, #0]
 80050de:	f008 ffda 	bl	800e096 <memcpy>
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <_ZN5Paket17yoklamaPaketCagirEPh>:
void Paket::yoklamaPaketCagir(uint8_t *kopyaDizi){memcpy(kopyaDizi, yoklamapaket, sizeof(yoklamapaket));}
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	333e      	adds	r3, #62	; 0x3e
 80050f8:	2208      	movs	r2, #8
 80050fa:	4619      	mov	r1, r3
 80050fc:	6838      	ldr	r0, [r7, #0]
 80050fe:	f008 ffca 	bl	800e096 <memcpy>
 8005102:	bf00      	nop
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <_ZN5Paket14rotaPaketCagirEPh>:
void Paket::rotaPaketCagir(uint8_t *kopyaDizi){memcpy(kopyaDizi, rotapaket, sizeof(rotapaket));}
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3346      	adds	r3, #70	; 0x46
 8005118:	2208      	movs	r2, #8
 800511a:	4619      	mov	r1, r3
 800511c:	6838      	ldr	r0, [r7, #0]
 800511e:	f008 ffba 	bl	800e096 <memcpy>
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <_ZN5Paket26ArayuzDataAlveBayrakKaldirEv>:

void Paket::ArayuzDataAlveBayrakKaldir()
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	if (ArayuzData!=0xFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800513a:	2bff      	cmp	r3, #255	; 0xff
 800513c:	d01d      	beq.n	800517a <_ZN5Paket26ArayuzDataAlveBayrakKaldirEv+0x4e>
	{
		ArayuzBuffer_u8[ArayuzIndex_u8] = ArayuzData;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8005144:	4619      	mov	r1, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	440b      	add	r3, r1
 8005150:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		ArayuzIndex_u8 = (ArayuzIndex_u8 + 1) % sizeof(ArayuzBuffer_u8);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800515a:	3301      	adds	r3, #1
 800515c:	4619      	mov	r1, r3
 800515e:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <_ZN5Paket26ArayuzDataAlveBayrakKaldirEv+0x6c>)
 8005160:	fba3 2301 	umull	r2, r3, r3, r1
 8005164:	099a      	lsrs	r2, r3, #6
 8005166:	4613      	mov	r3, r2
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	1aca      	subs	r2, r1, r3
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8005178:	e002      	b.n	8005180 <_ZN5Paket26ArayuzDataAlveBayrakKaldirEv+0x54>
	}
	else
	{
		PaketCozBayrak=true;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	701a      	strb	r2, [r3, #0]
	}
	 HAL_UART_Receive_IT(huart, &ArayuzData, 1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6898      	ldr	r0, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	334e      	adds	r3, #78	; 0x4e
 8005188:	2201      	movs	r2, #1
 800518a:	4619      	mov	r1, r3
 800518c:	f004 fbe9 	bl	8009962 <HAL_UART_Receive_IT>
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	88888889 	.word	0x88888889

0800519c <_ZN5Paket8PaketCozEv>:
void Paket::PaketCoz()
{
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
    Durumlar Durum = Baslik1Coz;
 80051a4:	2300      	movs	r3, #0
 80051a6:	73fb      	strb	r3, [r7, #15]
    Paketler Paket = VERSIYON;
 80051a8:	2302      	movs	r3, #2
 80051aa:	73bb      	strb	r3, [r7, #14]
    bool islem = true;
 80051ac:	2301      	movs	r3, #1
 80051ae:	737b      	strb	r3, [r7, #13]

    while (islem)
 80051b0:	bf00      	nop
 80051b2:	e26b      	b.n	800568c <_ZN5Paket8PaketCozEv+0x4f0>
    {
        switch (Durum)
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	f200 8268 	bhi.w	800568c <_ZN5Paket8PaketCozEv+0x4f0>
 80051bc:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <_ZN5Paket8PaketCozEv+0x28>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051d9 	.word	0x080051d9
 80051c8:	08005223 	.word	0x08005223
 80051cc:	08005293 	.word	0x08005293
 80051d0:	08005301 	.word	0x08005301
 80051d4:	08005375 	.word	0x08005375
        {
            case Baslik1Coz:
            	if (ArayuzBuffer_u8[startIndex_u32] == 0x12 && ArayuzBuffer_u8[startIndex_u32] != 0)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4413      	add	r3, r2
 80051e2:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80051e6:	2b12      	cmp	r3, #18
 80051e8:	d10a      	bne.n	8005200 <_ZN5Paket8PaketCozEv+0x64>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <_ZN5Paket8PaketCozEv+0x64>
                {
                    Durum = Baslik2Coz;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
                }
                startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzBuffer_u8);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	4b9d      	ldr	r3, [pc, #628]	; (8005480 <_ZN5Paket8PaketCozEv+0x2e4>)
 800520a:	fba3 2301 	umull	r2, r3, r3, r1
 800520e:	099a      	lsrs	r2, r3, #6
 8005210:	4613      	mov	r3, r2
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	1a9b      	subs	r3, r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	1aca      	subs	r2, r1, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
                break;
 8005220:	e234      	b.n	800568c <_ZN5Paket8PaketCozEv+0x4f0>

            case Baslik2Coz:
                if (ArayuzBuffer_u8[startIndex_u32] == 0x34 && ArayuzBuffer_u8[startIndex_u32] != 0)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	4413      	add	r3, r2
 800522c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8005230:	2b34      	cmp	r3, #52	; 0x34
 8005232:	d11b      	bne.n	800526c <_ZN5Paket8PaketCozEv+0xd0>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8005242:	2b00      	cmp	r3, #0
 8005244:	d012      	beq.n	800526c <_ZN5Paket8PaketCozEv+0xd0>
                {
                    Durum = PaketTuruSec;
 8005246:	2302      	movs	r3, #2
 8005248:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzBuffer_u8);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005250:	1c59      	adds	r1, r3, #1
 8005252:	4b8b      	ldr	r3, [pc, #556]	; (8005480 <_ZN5Paket8PaketCozEv+0x2e4>)
 8005254:	fba3 2301 	umull	r2, r3, r3, r1
 8005258:	099a      	lsrs	r2, r3, #6
 800525a:	4613      	mov	r3, r2
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	1aca      	subs	r2, r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800526a:	e011      	b.n	8005290 <_ZN5Paket8PaketCozEv+0xf4>
                }
                else
                {
                    Durum = Baslik1Coz;
 800526c:	2300      	movs	r3, #0
 800526e:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzBuffer_u8);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005276:	1c59      	adds	r1, r3, #1
 8005278:	4b81      	ldr	r3, [pc, #516]	; (8005480 <_ZN5Paket8PaketCozEv+0x2e4>)
 800527a:	fba3 2301 	umull	r2, r3, r3, r1
 800527e:	099a      	lsrs	r2, r3, #6
 8005280:	4613      	mov	r3, r2
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	1aca      	subs	r2, r1, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
                }
                break;
 8005290:	e1fc      	b.n	800568c <_ZN5Paket8PaketCozEv+0x4f0>

            case PaketTuruSec:
                if (ArayuzBuffer_u8[startIndex_u32] != 0)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	4413      	add	r3, r2
 800529c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01a      	beq.n	80052da <_ZN5Paket8PaketCozEv+0x13e>
                {
                    Paket = (Paketler)ArayuzBuffer_u8[startIndex_u32];
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	4413      	add	r3, r2
 80052ae:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80052b2:	73bb      	strb	r3, [r7, #14]
                    Durum = DataBoyutuAl;
 80052b4:	2303      	movs	r3, #3
 80052b6:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzBuffer_u8);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052be:	1c59      	adds	r1, r3, #1
 80052c0:	4b6f      	ldr	r3, [pc, #444]	; (8005480 <_ZN5Paket8PaketCozEv+0x2e4>)
 80052c2:	fba3 2301 	umull	r2, r3, r3, r1
 80052c6:	099a      	lsrs	r2, r3, #6
 80052c8:	4613      	mov	r3, r2
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	1aca      	subs	r2, r1, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80052d8:	e1d8      	b.n	800568c <_ZN5Paket8PaketCozEv+0x4f0>
                }
                else
                {
                    Durum = Baslik1Coz;
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzBuffer_u8);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052e4:	1c59      	adds	r1, r3, #1
 80052e6:	4b66      	ldr	r3, [pc, #408]	; (8005480 <_ZN5Paket8PaketCozEv+0x2e4>)
 80052e8:	fba3 2301 	umull	r2, r3, r3, r1
 80052ec:	099a      	lsrs	r2, r3, #6
 80052ee:	4613      	mov	r3, r2
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	1aca      	subs	r2, r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
                }
                break;
 80052fe:	e1c5      	b.n	800568c <_ZN5Paket8PaketCozEv+0x4f0>

            case DataBoyutuAl:
                if (ArayuzBuffer_u8[startIndex_u32] != 0)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4413      	add	r3, r2
 800530a:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01d      	beq.n	800534e <_ZN5Paket8PaketCozEv+0x1b2>
                {
                    dataLength_s16 = ArayuzBuffer_u8[startIndex_u32];
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8005320:	b21a      	sxth	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
                    Durum = DataOku;
 8005328:	2304      	movs	r3, #4
 800532a:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzBuffer_u8);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005332:	1c59      	adds	r1, r3, #1
 8005334:	4b52      	ldr	r3, [pc, #328]	; (8005480 <_ZN5Paket8PaketCozEv+0x2e4>)
 8005336:	fba3 2301 	umull	r2, r3, r3, r1
 800533a:	099a      	lsrs	r2, r3, #6
 800533c:	4613      	mov	r3, r2
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	1aca      	subs	r2, r1, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800534c:	e19e      	b.n	800568c <_ZN5Paket8PaketCozEv+0x4f0>
                }
                else
                {
                    Durum = Baslik1Coz;
 800534e:	2300      	movs	r3, #0
 8005350:	73fb      	strb	r3, [r7, #15]
                    startIndex_u32 = (startIndex_u32 + 1) % sizeof(ArayuzBuffer_u8);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005358:	1c59      	adds	r1, r3, #1
 800535a:	4b49      	ldr	r3, [pc, #292]	; (8005480 <_ZN5Paket8PaketCozEv+0x2e4>)
 800535c:	fba3 2301 	umull	r2, r3, r3, r1
 8005360:	099a      	lsrs	r2, r3, #6
 8005362:	4613      	mov	r3, r2
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	1aca      	subs	r2, r1, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
                }
                break;
 8005372:	e18b      	b.n	800568c <_ZN5Paket8PaketCozEv+0x4f0>

            case DataOku:
                if (Paket == ROTA && dataLength_s16 == 8)
 8005374:	7bbb      	ldrb	r3, [r7, #14]
 8005376:	2b01      	cmp	r3, #1
 8005378:	f040 8084 	bne.w	8005484 <_ZN5Paket8PaketCozEv+0x2e8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8005382:	2b08      	cmp	r3, #8
 8005384:	d17e      	bne.n	8005484 <_ZN5Paket8PaketCozEv+0x2e8>
                {
                	if (ArayuzBuffer_u8[(startIndex_u32 + dataLength_s16) % sizeof(ArayuzBuffer_u8)] == CRC8Hesaplama(ArayuzBuffer_u8,startIndex_u32,startIndex_u32 + dataLength_s16))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	f9b2 20ec 	ldrsh.w	r2, [r2, #236]	; 0xec
 8005392:	1899      	adds	r1, r3, r2
 8005394:	4b3a      	ldr	r3, [pc, #232]	; (8005480 <_ZN5Paket8PaketCozEv+0x2e4>)
 8005396:	fba3 2301 	umull	r2, r3, r3, r1
 800539a:	099a      	lsrs	r2, r3, #6
 800539c:	4613      	mov	r3, r2
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	1aca      	subs	r2, r1, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4413      	add	r3, r2
 80053aa:	f893 404f 	ldrb.w	r4, [r3, #79]	; 0x4f
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f103 014f 	add.w	r1, r3, #79	; 0x4f
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053ba:	b2d8      	uxtb	r0, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	4413      	add	r3, r2
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	4602      	mov	r2, r0
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f97f 	bl	80056d6 <_ZN5Paket13CRC8HesaplamaEPhhh>
 80053d8:	4603      	mov	r3, r0
 80053da:	429c      	cmp	r4, r3
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d033      	beq.n	8005450 <_ZN5Paket8PaketCozEv+0x2b4>
                	{
                		if(GidilecekNoktaBayrak==false)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	78db      	ldrb	r3, [r3, #3]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d129      	bne.n	8005444 <_ZN5Paket8PaketCozEv+0x2a8>
                		{
                			ArayuzEnlem_f = bytesToFloat(ArayuzBuffer_u8, startIndex_u32);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f103 014f 	add.w	r1, r3, #79	; 0x4f
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053fc:	461a      	mov	r2, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f9a6 	bl	8005750 <_ZN5Paket12bytesToFloatEPhl>
 8005404:	eef0 7a40 	vmov.f32	s15, s0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
                			ArayuzBoylam_f = bytesToFloat(ArayuzBuffer_u8, (startIndex_u32 + 4) % sizeof(ArayuzBuffer_u8));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f103 004f 	add.w	r0, r3, #79	; 0x4f
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800541a:	1d19      	adds	r1, r3, #4
 800541c:	4b18      	ldr	r3, [pc, #96]	; (8005480 <_ZN5Paket8PaketCozEv+0x2e4>)
 800541e:	fba3 2301 	umull	r2, r3, r3, r1
 8005422:	099a      	lsrs	r2, r3, #6
 8005424:	4613      	mov	r3, r2
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	1a9b      	subs	r3, r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	1aca      	subs	r2, r1, r3
 800542e:	4613      	mov	r3, r2
 8005430:	461a      	mov	r2, r3
 8005432:	4601      	mov	r1, r0
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f98b 	bl	8005750 <_ZN5Paket12bytesToFloatEPhl>
 800543a:	eef0 7a40 	vmov.f32	s15, s0
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
                		}
                		GidilecekNoktaBayrak = true;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	70da      	strb	r2, [r3, #3]
                		RotaGeldiBayrak=true;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	715a      	strb	r2, [r3, #5]
                	}

                    startIndex_u32 = (startIndex_u32 + dataLength_s16) % sizeof(ArayuzBuffer_u8);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	f9b2 20ec 	ldrsh.w	r2, [r2, #236]	; 0xec
 800545c:	1899      	adds	r1, r3, r2
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <_ZN5Paket8PaketCozEv+0x2e4>)
 8005460:	fba3 2301 	umull	r2, r3, r3, r1
 8005464:	099a      	lsrs	r2, r3, #6
 8005466:	4613      	mov	r3, r2
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	1aca      	subs	r2, r1, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
                    Durum = Baslik1Coz;
 8005476:	2300      	movs	r3, #0
 8005478:	73fb      	strb	r3, [r7, #15]
                    islem = false;
 800547a:	2300      	movs	r3, #0
 800547c:	737b      	strb	r3, [r7, #13]
 800547e:	e104      	b.n	800568a <_ZN5Paket8PaketCozEv+0x4ee>
 8005480:	88888889 	.word	0x88888889
                }
                else if (Paket == VERSIYON && dataLength_s16 == 4)
 8005484:	7bbb      	ldrb	r3, [r7, #14]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d150      	bne.n	800552c <_ZN5Paket8PaketCozEv+0x390>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8005490:	2b04      	cmp	r3, #4
 8005492:	d14b      	bne.n	800552c <_ZN5Paket8PaketCozEv+0x390>
                {
                	if (ArayuzBuffer_u8[(startIndex_u32 + dataLength_s16) % sizeof(ArayuzBuffer_u8)] == CRC8Hesaplama(ArayuzBuffer_u8,startIndex_u32,startIndex_u32 + dataLength_s16))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	f9b2 20ec 	ldrsh.w	r2, [r2, #236]	; 0xec
 80054a0:	1899      	adds	r1, r3, r2
 80054a2:	4b7f      	ldr	r3, [pc, #508]	; (80056a0 <_ZN5Paket8PaketCozEv+0x504>)
 80054a4:	fba3 2301 	umull	r2, r3, r3, r1
 80054a8:	099a      	lsrs	r2, r3, #6
 80054aa:	4613      	mov	r3, r2
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	1aca      	subs	r2, r1, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4413      	add	r3, r2
 80054b8:	f893 404f 	ldrb.w	r4, [r3, #79]	; 0x4f
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f103 014f 	add.w	r1, r3, #79	; 0x4f
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054c8:	b2d8      	uxtb	r0, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	4413      	add	r3, r2
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	4602      	mov	r2, r0
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f8f8 	bl	80056d6 <_ZN5Paket13CRC8HesaplamaEPhhh>
 80054e6:	4603      	mov	r3, r0
 80054e8:	429c      	cmp	r4, r3
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <_ZN5Paket8PaketCozEv+0x360>
                	{
                		VersiyonPaketBayrak=true;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	705a      	strb	r2, [r3, #1]
                	}

                    startIndex_u32 = (startIndex_u32 + dataLength_s16) % sizeof(ArayuzBuffer_u8);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	f9b2 20ec 	ldrsh.w	r2, [r2, #236]	; 0xec
 8005508:	1899      	adds	r1, r3, r2
 800550a:	4b65      	ldr	r3, [pc, #404]	; (80056a0 <_ZN5Paket8PaketCozEv+0x504>)
 800550c:	fba3 2301 	umull	r2, r3, r3, r1
 8005510:	099a      	lsrs	r2, r3, #6
 8005512:	4613      	mov	r3, r2
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	1aca      	subs	r2, r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
                    Durum = Baslik1Coz;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
                    islem = false;
 8005526:	2300      	movs	r3, #0
 8005528:	737b      	strb	r3, [r7, #13]
 800552a:	e0ae      	b.n	800568a <_ZN5Paket8PaketCozEv+0x4ee>
                }
                else if (Paket == YOKLAMA && dataLength_s16 == 4)
 800552c:	7bbb      	ldrb	r3, [r7, #14]
 800552e:	2b03      	cmp	r3, #3
 8005530:	d153      	bne.n	80055da <_ZN5Paket8PaketCozEv+0x43e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8005538:	2b04      	cmp	r3, #4
 800553a:	d14e      	bne.n	80055da <_ZN5Paket8PaketCozEv+0x43e>
                {
                	if (ArayuzBuffer_u8[(startIndex_u32 + dataLength_s16) % sizeof(ArayuzBuffer_u8)] == CRC8Hesaplama(ArayuzBuffer_u8,startIndex_u32,startIndex_u32 + dataLength_s16))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	f9b2 20ec 	ldrsh.w	r2, [r2, #236]	; 0xec
 8005548:	1899      	adds	r1, r3, r2
 800554a:	4b55      	ldr	r3, [pc, #340]	; (80056a0 <_ZN5Paket8PaketCozEv+0x504>)
 800554c:	fba3 2301 	umull	r2, r3, r3, r1
 8005550:	099a      	lsrs	r2, r3, #6
 8005552:	4613      	mov	r3, r2
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	1aca      	subs	r2, r1, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4413      	add	r3, r2
 8005560:	f893 404f 	ldrb.w	r4, [r3, #79]	; 0x4f
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f103 014f 	add.w	r1, r3, #79	; 0x4f
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005570:	b2d8      	uxtb	r0, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005578:	b2da      	uxtb	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8005580:	b2db      	uxtb	r3, r3
 8005582:	4413      	add	r3, r2
 8005584:	b2db      	uxtb	r3, r3
 8005586:	4602      	mov	r2, r0
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f8a4 	bl	80056d6 <_ZN5Paket13CRC8HesaplamaEPhhh>
 800558e:	4603      	mov	r3, r0
 8005590:	429c      	cmp	r4, r3
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <_ZN5Paket8PaketCozEv+0x40e>
                	{
                		YoklamaFlag=true;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	709a      	strb	r2, [r3, #2]
                		YoklamaPaketFlag=true;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	711a      	strb	r2, [r3, #4]
                	}


                    startIndex_u32 = (startIndex_u32 + dataLength_s16) % sizeof(ArayuzBuffer_u8);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	f9b2 20ec 	ldrsh.w	r2, [r2, #236]	; 0xec
 80055b6:	1899      	adds	r1, r3, r2
 80055b8:	4b39      	ldr	r3, [pc, #228]	; (80056a0 <_ZN5Paket8PaketCozEv+0x504>)
 80055ba:	fba3 2301 	umull	r2, r3, r3, r1
 80055be:	099a      	lsrs	r2, r3, #6
 80055c0:	4613      	mov	r3, r2
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	1aca      	subs	r2, r1, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
                    Durum = Baslik1Coz;
 80055d0:	2300      	movs	r3, #0
 80055d2:	73fb      	strb	r3, [r7, #15]
                    islem = false;
 80055d4:	2300      	movs	r3, #0
 80055d6:	737b      	strb	r3, [r7, #13]
 80055d8:	e057      	b.n	800568a <_ZN5Paket8PaketCozEv+0x4ee>
                }
                else if(Paket == DUR && dataLength_s16==4)
 80055da:	7bbb      	ldrb	r3, [r7, #14]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d150      	bne.n	8005682 <_ZN5Paket8PaketCozEv+0x4e6>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d14b      	bne.n	8005682 <_ZN5Paket8PaketCozEv+0x4e6>
                {
                	if (ArayuzBuffer_u8[(startIndex_u32 + dataLength_s16) % sizeof(ArayuzBuffer_u8)] == CRC8Hesaplama(ArayuzBuffer_u8,startIndex_u32,startIndex_u32 + dataLength_s16))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	f9b2 20ec 	ldrsh.w	r2, [r2, #236]	; 0xec
 80055f6:	1899      	adds	r1, r3, r2
 80055f8:	4b29      	ldr	r3, [pc, #164]	; (80056a0 <_ZN5Paket8PaketCozEv+0x504>)
 80055fa:	fba3 2301 	umull	r2, r3, r3, r1
 80055fe:	099a      	lsrs	r2, r3, #6
 8005600:	4613      	mov	r3, r2
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	1aca      	subs	r2, r1, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4413      	add	r3, r2
 800560e:	f893 404f 	ldrb.w	r4, [r3, #79]	; 0x4f
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f103 014f 	add.w	r1, r3, #79	; 0x4f
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800561e:	b2d8      	uxtb	r0, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005626:	b2da      	uxtb	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800562e:	b2db      	uxtb	r3, r3
 8005630:	4413      	add	r3, r2
 8005632:	b2db      	uxtb	r3, r3
 8005634:	4602      	mov	r2, r0
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f84d 	bl	80056d6 <_ZN5Paket13CRC8HesaplamaEPhhh>
 800563c:	4603      	mov	r3, r0
 800563e:	429c      	cmp	r4, r3
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <_ZN5Paket8PaketCozEv+0x4b6>
                	{
                		arabaDurBayrak=true;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	719a      	strb	r2, [r3, #6]
                	}

                	startIndex_u32 = (startIndex_u32 + dataLength_s16) % sizeof(ArayuzBuffer_u8);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	f9b2 20ec 	ldrsh.w	r2, [r2, #236]	; 0xec
 800565e:	1899      	adds	r1, r3, r2
 8005660:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <_ZN5Paket8PaketCozEv+0x504>)
 8005662:	fba3 2301 	umull	r2, r3, r3, r1
 8005666:	099a      	lsrs	r2, r3, #6
 8005668:	4613      	mov	r3, r2
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	1aca      	subs	r2, r1, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
                	Durum = Baslik1Coz;
 8005678:	2300      	movs	r3, #0
 800567a:	73fb      	strb	r3, [r7, #15]
                	islem = false;
 800567c:	2300      	movs	r3, #0
 800567e:	737b      	strb	r3, [r7, #13]
 8005680:	e003      	b.n	800568a <_ZN5Paket8PaketCozEv+0x4ee>
                }
                else
                {
                    Durum = Baslik1Coz;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
                    islem = false;
 8005686:	2300      	movs	r3, #0
 8005688:	737b      	strb	r3, [r7, #13]
                }
                break;
 800568a:	bf00      	nop
    while (islem)
 800568c:	7b7b      	ldrb	r3, [r7, #13]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f47f ad90 	bne.w	80051b4 <_ZN5Paket8PaketCozEv+0x18>
        }
    }
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	bd90      	pop	{r4, r7, pc}
 800569e:	bf00      	nop
 80056a0:	88888889 	.word	0x88888889

080056a4 <_ZN5Paket11ArayuzLatAlEv>:

float *Paket::ArayuzLatAl(){return &ArayuzEnlem_f;}
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	33fc      	adds	r3, #252	; 0xfc
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <_ZN5Paket11ArayuzLonAlEv>:
float *Paket::ArayuzLonAl(){return &ArayuzBoylam_f;}
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <_ZN5Paket13CRC8HesaplamaEPhhh>:

uint8_t Paket::CRC8Hesaplama(uint8_t *data, uint8_t baslangic ,uint8_t bitis)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b087      	sub	sp, #28
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	4611      	mov	r1, r2
 80056e2:	461a      	mov	r2, r3
 80056e4:	460b      	mov	r3, r1
 80056e6:	71fb      	strb	r3, [r7, #7]
 80056e8:	4613      	mov	r3, r2
 80056ea:	71bb      	strb	r3, [r7, #6]
    uint8_t crc = 0x00;
 80056ec:	2300      	movs	r3, #0
 80056ee:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = baslangic; i < bitis; i++)
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	75bb      	strb	r3, [r7, #22]
 80056f4:	e021      	b.n	800573a <_ZN5Paket13CRC8HesaplamaEPhhh+0x64>
    {
        crc ^= data[i]; // CRC değerini, dizinin bir sonraki byte ile XOR
 80056f6:	7dbb      	ldrb	r3, [r7, #22]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	4413      	add	r3, r2
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	4053      	eors	r3, r2
 8005702:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) //Her bir byte için döngü
 8005704:	2300      	movs	r3, #0
 8005706:	757b      	strb	r3, [r7, #21]
 8005708:	e011      	b.n	800572e <_ZN5Paket13CRC8HesaplamaEPhhh+0x58>
        {
            if (crc & 0x80)//CRC değerinin en soldaki biti 1 mi
 800570a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800570e:	2b00      	cmp	r3, #0
 8005710:	da07      	bge.n	8005722 <_ZN5Paket13CRC8HesaplamaEPhhh+0x4c>
            {
                crc = (crc << 1) ^ 0X07; //En yüksek bit birse CRC değerini bir bit sola kaydır ve XOR işlemi yap
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	b25b      	sxtb	r3, r3
 8005718:	f083 0307 	eor.w	r3, r3, #7
 800571c:	b25b      	sxtb	r3, r3
 800571e:	75fb      	strb	r3, [r7, #23]
 8005720:	e002      	b.n	8005728 <_ZN5Paket13CRC8HesaplamaEPhhh+0x52>
            }
            else
            {
                crc <<= 1; //En yüksek bit sıfırsa CRC değerini bir bit sola kaydır
 8005722:	7dfb      	ldrb	r3, [r7, #23]
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) //Her bir byte için döngü
 8005728:	7d7b      	ldrb	r3, [r7, #21]
 800572a:	3301      	adds	r3, #1
 800572c:	757b      	strb	r3, [r7, #21]
 800572e:	7d7b      	ldrb	r3, [r7, #21]
 8005730:	2b07      	cmp	r3, #7
 8005732:	d9ea      	bls.n	800570a <_ZN5Paket13CRC8HesaplamaEPhhh+0x34>
    for (uint8_t i = baslangic; i < bitis; i++)
 8005734:	7dbb      	ldrb	r3, [r7, #22]
 8005736:	3301      	adds	r3, #1
 8005738:	75bb      	strb	r3, [r7, #22]
 800573a:	7dba      	ldrb	r2, [r7, #22]
 800573c:	79bb      	ldrb	r3, [r7, #6]
 800573e:	429a      	cmp	r2, r3
 8005740:	d3d9      	bcc.n	80056f6 <_ZN5Paket13CRC8HesaplamaEPhhh+0x20>
            }
        }
    }

    return crc;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <_ZN5Paket12bytesToFloatEPhl>:

float Paket::bytesToFloat(uint8_t* buffer_u8, int32_t startIndex_s32)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
	uint32_t intBits_u32 =(buffer_u8[(startIndex_s32 + 3) % 120] << 24) |
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	1cda      	adds	r2, r3, #3
 8005760:	4b2d      	ldr	r3, [pc, #180]	; (8005818 <_ZN5Paket12bytesToFloatEPhl+0xc8>)
 8005762:	fb83 1302 	smull	r1, r3, r3, r2
 8005766:	4413      	add	r3, r2
 8005768:	1199      	asrs	r1, r3, #6
 800576a:	17d3      	asrs	r3, r2, #31
 800576c:	1ac9      	subs	r1, r1, r3
 800576e:	460b      	mov	r3, r1
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	1a5b      	subs	r3, r3, r1
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	1ad1      	subs	r1, r2, r3
 8005778:	460a      	mov	r2, r1
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	4413      	add	r3, r2
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	0618      	lsls	r0, r3, #24
    					(buffer_u8[(startIndex_s32 + 2) % 120] << 16) |
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	1c9a      	adds	r2, r3, #2
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <_ZN5Paket12bytesToFloatEPhl+0xc8>)
 8005788:	fb83 1302 	smull	r1, r3, r3, r2
 800578c:	4413      	add	r3, r2
 800578e:	1199      	asrs	r1, r3, #6
 8005790:	17d3      	asrs	r3, r2, #31
 8005792:	1ac9      	subs	r1, r1, r3
 8005794:	460b      	mov	r3, r1
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	1a5b      	subs	r3, r3, r1
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	1ad1      	subs	r1, r2, r3
 800579e:	460a      	mov	r2, r1
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4413      	add	r3, r2
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	041b      	lsls	r3, r3, #16
	uint32_t intBits_u32 =(buffer_u8[(startIndex_s32 + 3) % 120] << 24) |
 80057a8:	4318      	orrs	r0, r3
						(buffer_u8[(startIndex_s32 + 1) % 120] << 8)  |
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	4b1a      	ldr	r3, [pc, #104]	; (8005818 <_ZN5Paket12bytesToFloatEPhl+0xc8>)
 80057b0:	fb83 1302 	smull	r1, r3, r3, r2
 80057b4:	4413      	add	r3, r2
 80057b6:	1199      	asrs	r1, r3, #6
 80057b8:	17d3      	asrs	r3, r2, #31
 80057ba:	1ac9      	subs	r1, r1, r3
 80057bc:	460b      	mov	r3, r1
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	1a5b      	subs	r3, r3, r1
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	1ad1      	subs	r1, r2, r3
 80057c6:	460a      	mov	r2, r1
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4413      	add	r3, r2
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	021b      	lsls	r3, r3, #8
    					(buffer_u8[(startIndex_s32 + 2) % 120] << 16) |
 80057d0:	4318      	orrs	r0, r3
						(buffer_u8[(startIndex_s32 + 0) % 120] << 0)  ;
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	4b10      	ldr	r3, [pc, #64]	; (8005818 <_ZN5Paket12bytesToFloatEPhl+0xc8>)
 80057d6:	fb83 1302 	smull	r1, r3, r3, r2
 80057da:	4413      	add	r3, r2
 80057dc:	1199      	asrs	r1, r3, #6
 80057de:	17d3      	asrs	r3, r2, #31
 80057e0:	1ac9      	subs	r1, r1, r3
 80057e2:	460b      	mov	r3, r1
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	1a5b      	subs	r3, r3, r1
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	1ad1      	subs	r1, r2, r3
 80057ec:	460a      	mov	r2, r1
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	781b      	ldrb	r3, [r3, #0]
						(buffer_u8[(startIndex_s32 + 1) % 120] << 8)  |
 80057f4:	4303      	orrs	r3, r0
	uint32_t intBits_u32 =(buffer_u8[(startIndex_s32 + 3) % 120] << 24) |
 80057f6:	617b      	str	r3, [r7, #20]

    memcpy(&floatsonuc_f, &intBits_u32, sizeof(floatsonuc_f));
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	33f8      	adds	r3, #248	; 0xf8
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	601a      	str	r2, [r3, #0]
    return floatsonuc_f;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005806:	ee07 3a90 	vmov	s15, r3
}
 800580a:	eeb0 0a67 	vmov.f32	s0, s15
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	88888889 	.word	0x88888889

0800581c <_ZN5Paket12floatToBytesEPfPh>:

void Paket::floatToBytes(float *Deger_f, uint8_t* bytes)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
    uint8_t* p = (uint8_t*)Deger_f;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 4; i++)
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e00a      	b.n	8005848 <_ZN5Paket12floatToBytesEPfPh+0x2c>
    {
        bytes[i] = p[i];
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	441a      	add	r2, r3
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	440b      	add	r3, r1
 800583e:	7812      	ldrb	r2, [r2, #0]
 8005840:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	3301      	adds	r3, #1
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b03      	cmp	r3, #3
 800584c:	ddf1      	ble.n	8005832 <_ZN5Paket12floatToBytesEPfPh+0x16>
    }
}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <_ZN13GorevyoneticiC1EP11TIM_TypeDef>:
#include "gorevyonetici.h"

Gorevyonetici::Gorevyonetici(TIM_TypeDef* pTimerAlan)
 800585c:	b5b0      	push	{r4, r5, r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	705a      	strb	r2, [r3, #1]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	709a      	strb	r2, [r3, #2]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	70da      	strb	r2, [r3, #3]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	711a      	strb	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	330c      	adds	r3, #12
 8005888:	2409      	movs	r4, #9
 800588a:	461d      	mov	r5, r3
 800588c:	e004      	b.n	8005898 <_ZN13GorevyoneticiC1EP11TIM_TypeDef+0x3c>
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f818 	bl	80058c4 <_ZN5GorevC1Ev>
 8005894:	350c      	adds	r5, #12
 8005896:	3c01      	subs	r4, #1
 8005898:	2c00      	cmp	r4, #0
 800589a:	daf8      	bge.n	800588e <_ZN13GorevyoneticiC1EP11TIM_TypeDef+0x32>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
{
    this->pTimerAlan = pTimerAlan;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	609a      	str	r2, [r3, #8]
}
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bdb0      	pop	{r4, r5, r7, pc}

080058c4 <_ZN5GorevC1Ev>:

Gorev::Gorev(){}
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	811a      	strh	r2, [r3, #8]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <_ZN13Gorevyonetici7GorevAlEPFvvEs>:

void Gorevyonetici::GorevAl(void (*gorev)(), int16_t ms_s16)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	4613      	mov	r3, r2
 80058f2:	80fb      	strh	r3, [r7, #6]
	if (gorevSayac_u8 < maxGorev)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058fa:	2b09      	cmp	r3, #9
 80058fc:	d819      	bhi.n	8005932 <_ZN13Gorevyonetici7GorevAlEPFvvEs+0x4c>
	{
		gorevler[gorevSayac_u8].GorevGir(gorev, ms_s16);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005904:	461a      	mov	r2, r3
 8005906:	4613      	mov	r3, r2
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	3308      	adds	r3, #8
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	3304      	adds	r3, #4
 8005916:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f8ab 	bl	8005a78 <_ZN5Gorev8GorevGirEPFvvEs>
		gorevSayac_u8++;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005928:	3301      	adds	r3, #1
 800592a:	b2da      	uxtb	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <_ZN13Gorevyonetici17GorevBayrakKaldirEv>:
void Gorevyonetici::GorevBayrakKaldir()
{
 800593c:	b590      	push	{r4, r7, lr}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
    pTimerAlan->SR &= ~(TIM_SR_UIF);//kesme bayrağı sıfırla
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	691a      	ldr	r2, [r3, #16]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f022 0201 	bic.w	r2, r2, #1
 8005952:	611a      	str	r2, [r3, #16]
    Counter_u16++;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800595a:	3301      	adds	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    for (int i = 0; i < gorevSayac_u8; i++)
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	e02c      	b.n	80059c4 <_ZN13Gorevyonetici17GorevBayrakKaldirEv+0x88>
    {
		if (0 == Counter_u16 % gorevler[i].MsAl())
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8005970:	461c      	mov	r4, r3
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	3308      	adds	r3, #8
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4413      	add	r3, r2
 8005982:	3304      	adds	r3, #4
 8005984:	4618      	mov	r0, r3
 8005986:	f000 f8a8 	bl	8005ada <_ZN5Gorev4MsAlEv>
 800598a:	4603      	mov	r3, r0
 800598c:	fb94 f2f3 	sdiv	r2, r4, r3
 8005990:	fb02 f303 	mul.w	r3, r2, r3
 8005994:	1ae3      	subs	r3, r4, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00c      	beq.n	80059be <_ZN13Gorevyonetici17GorevBayrakKaldirEv+0x82>
		{
			gorevler[i].BayrakDuzenle(true);
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4613      	mov	r3, r2
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	3308      	adds	r3, #8
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	4413      	add	r3, r2
 80059b4:	3304      	adds	r3, #4
 80059b6:	2101      	movs	r1, #1
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 f87f 	bl	8005abc <_ZN5Gorev13BayrakDuzenleEb>
    for (int i = 0; i < gorevSayac_u8; i++)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3301      	adds	r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059ca:	461a      	mov	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4293      	cmp	r3, r2
 80059d0:	dbcb      	blt.n	800596a <_ZN13Gorevyonetici17GorevBayrakKaldirEv+0x2e>
		}
     }
    if (Counter_u16 % 5000 == 0)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80059d8:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <_ZN13Gorevyonetici17GorevBayrakKaldirEv+0xc4>)
 80059da:	fba2 1203 	umull	r1, r2, r2, r3
 80059de:	0b12      	lsrs	r2, r2, #12
 80059e0:	f241 3188 	movw	r1, #5000	; 0x1388
 80059e4:	fb01 f202 	mul.w	r2, r1, r2
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d103      	bne.n	80059f8 <_ZN13Gorevyonetici17GorevBayrakKaldirEv+0xbc>
  	{
  	    Counter_u16=0;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
  	}
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd90      	pop	{r4, r7, pc}
 8005a00:	d1b71759 	.word	0xd1b71759

08005a04 <_ZN13Gorevyonetici13GorevCalistirEv>:

void Gorevyonetici::GorevCalistir()
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < gorevSayac_u8; i++)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	e026      	b.n	8005a60 <_ZN13Gorevyonetici13GorevCalistirEv+0x5c>
	{
		if (gorevler[i].Bayrak)
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4613      	mov	r3, r2
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	330c      	adds	r3, #12
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d018      	beq.n	8005a5a <_ZN13Gorevyonetici13GorevCalistirEv+0x56>
	    {
			gorevler[i].BayrakDuzenle(false);
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	3308      	adds	r3, #8
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	4413      	add	r3, r2
 8005a38:	3304      	adds	r3, #4
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 f83d 	bl	8005abc <_ZN5Gorev13BayrakDuzenleEb>
			gorevler[i].Calistir();
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4613      	mov	r3, r2
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	4413      	add	r3, r2
 8005a52:	3304      	adds	r3, #4
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 f822 	bl	8005a9e <_ZN5Gorev8CalistirEv>
	for (int i = 0; i < gorevSayac_u8; i++)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a66:	461a      	mov	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	dbd1      	blt.n	8005a12 <_ZN13Gorevyonetici13GorevCalistirEv+0xe>
	    }
	}

}
 8005a6e:	bf00      	nop
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <_ZN5Gorev8GorevGirEPFvvEs>:
	    }

}

void Gorev::GorevGir(void (*gorev)(), int16_t ms_s16)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
    this->gorev = gorev;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	605a      	str	r2, [r3, #4]
    this->ms_s16 = ms_s16;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	811a      	strh	r2, [r3, #8]
}
 8005a92:	bf00      	nop
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <_ZN5Gorev8CalistirEv>:

void Gorev::Calistir()
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
    if (gorev)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <_ZN5Gorev8CalistirEv+0x16>
    {
        gorev();
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4798      	blx	r3
    }
}
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <_ZN5Gorev13BayrakDuzenleEb>:

void Gorev::BayrakDuzenle(bool value){Bayrak = value;}
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <_ZN5Gorev4MsAlEv>:

int16_t Gorev::MsAl(){return ms_s16;}
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	db0b      	blt.n	8005b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	f003 021f 	and.w	r2, r3, #31
 8005b0c:	4907      	ldr	r1, [pc, #28]	; (8005b2c <__NVIC_EnableIRQ+0x38>)
 8005b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	2001      	movs	r0, #1
 8005b16:	fa00 f202 	lsl.w	r2, r0, r2
 8005b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	e000e100 	.word	0xe000e100

08005b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	6039      	str	r1, [r7, #0]
 8005b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	db0a      	blt.n	8005b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	490c      	ldr	r1, [pc, #48]	; (8005b7c <__NVIC_SetPriority+0x4c>)
 8005b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b4e:	0112      	lsls	r2, r2, #4
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	440b      	add	r3, r1
 8005b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b58:	e00a      	b.n	8005b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	4908      	ldr	r1, [pc, #32]	; (8005b80 <__NVIC_SetPriority+0x50>)
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	3b04      	subs	r3, #4
 8005b68:	0112      	lsls	r2, r2, #4
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	761a      	strb	r2, [r3, #24]
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	e000e100 	.word	0xe000e100
 8005b80:	e000ed00 	.word	0xe000ed00

08005b84 <_ZN5TimerC1EP11TIM_TypeDef>:
#include "mytimer.h"

Timer::Timer(TIM_TypeDef* pTimerAlan)
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
{
    this->pTimerAlan = pTimerAlan;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	601a      	str	r2, [r3, #0]
    TimerClockAktifEt();
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f837 	bl	8005c08 <_ZN5Timer17TimerClockAktifEtEv>
}
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <_ZN5Timer10YapilandirEmm>:

void Timer::Yapilandir(uint32_t prescaler_u32, uint32_t period_u32)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
	pTimerAlan->PSC = prescaler_u32 - 1;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	3a01      	subs	r2, #1
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28
	pTimerAlan->ARR = period_u32 - 1;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	3a01      	subs	r2, #1
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c
	pTimerAlan->DIER |= TIM_DIER_UIE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	60da      	str	r2, [r3, #12]
    TimerInterruptAktifEt();
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f8a5 	bl	8005d24 <_ZN5Timer21TimerInterruptAktifEtEv>
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <_ZN5Timer7AktifEtEv>:

void Timer::AktifEt()
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
	pTimerAlan->CR1 |= TIM_CR1_CEN;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0201 	orr.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <_ZN5Timer17TimerClockAktifEtEv>:
{
    return pTimerAlan->CNT;
}

void Timer::TimerClockAktifEt()
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b089      	sub	sp, #36	; 0x24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
    if (this->pTimerAlan == TIM2)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c18:	d10e      	bne.n	8005c38 <_ZN5Timer17TimerClockAktifEtEv+0x30>
    {
        __HAL_RCC_TIM2_CLK_ENABLE();
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	4b3b      	ldr	r3, [pc, #236]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	4a3a      	ldr	r2, [pc, #232]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005c24:	f043 0301 	orr.w	r3, r3, #1
 8005c28:	6413      	str	r3, [r2, #64]	; 0x40
 8005c2a:	4b38      	ldr	r3, [pc, #224]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	69fb      	ldr	r3, [r7, #28]
    }
    else if (this->pTimerAlan == TIM7)
    {
        __HAL_RCC_TIM7_CLK_ENABLE();
    }
}
 8005c36:	e062      	b.n	8005cfe <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM3)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a34      	ldr	r2, [pc, #208]	; (8005d10 <_ZN5Timer17TimerClockAktifEtEv+0x108>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d10e      	bne.n	8005c60 <_ZN5Timer17TimerClockAktifEtEv+0x58>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8005c42:	2300      	movs	r3, #0
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	4b31      	ldr	r3, [pc, #196]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	4a30      	ldr	r2, [pc, #192]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005c4c:	f043 0302 	orr.w	r3, r3, #2
 8005c50:	6413      	str	r3, [r2, #64]	; 0x40
 8005c52:	4b2e      	ldr	r3, [pc, #184]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	69bb      	ldr	r3, [r7, #24]
}
 8005c5e:	e04e      	b.n	8005cfe <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM4)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2b      	ldr	r2, [pc, #172]	; (8005d14 <_ZN5Timer17TimerClockAktifEtEv+0x10c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d10e      	bne.n	8005c88 <_ZN5Timer17TimerClockAktifEtEv+0x80>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	4b27      	ldr	r3, [pc, #156]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	4a26      	ldr	r2, [pc, #152]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005c74:	f043 0304 	orr.w	r3, r3, #4
 8005c78:	6413      	str	r3, [r2, #64]	; 0x40
 8005c7a:	4b24      	ldr	r3, [pc, #144]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	697b      	ldr	r3, [r7, #20]
}
 8005c86:	e03a      	b.n	8005cfe <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM5)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a22      	ldr	r2, [pc, #136]	; (8005d18 <_ZN5Timer17TimerClockAktifEtEv+0x110>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d10e      	bne.n	8005cb0 <_ZN5Timer17TimerClockAktifEtEv+0xa8>
        __HAL_RCC_TIM5_CLK_ENABLE();
 8005c92:	2300      	movs	r3, #0
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005c9c:	f043 0308 	orr.w	r3, r3, #8
 8005ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ca2:	4b1a      	ldr	r3, [pc, #104]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	693b      	ldr	r3, [r7, #16]
}
 8005cae:	e026      	b.n	8005cfe <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM6)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a19      	ldr	r2, [pc, #100]	; (8005d1c <_ZN5Timer17TimerClockAktifEtEv+0x114>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d10e      	bne.n	8005cd8 <_ZN5Timer17TimerClockAktifEtEv+0xd0>
        __HAL_RCC_TIM6_CLK_ENABLE();
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	4a12      	ldr	r2, [pc, #72]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005cc4:	f043 0310 	orr.w	r3, r3, #16
 8005cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
}
 8005cd6:	e012      	b.n	8005cfe <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM7)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a10      	ldr	r2, [pc, #64]	; (8005d20 <_ZN5Timer17TimerClockAktifEtEv+0x118>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d10d      	bne.n	8005cfe <_ZN5Timer17TimerClockAktifEtEv+0xf6>
        __HAL_RCC_TIM7_CLK_ENABLE();
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	4a08      	ldr	r2, [pc, #32]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005cec:	f043 0320 	orr.w	r3, r3, #32
 8005cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	60bb      	str	r3, [r7, #8]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
}
 8005cfe:	bf00      	nop
 8005d00:	3724      	adds	r7, #36	; 0x24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	40000400 	.word	0x40000400
 8005d14:	40000800 	.word	0x40000800
 8005d18:	40000c00 	.word	0x40000c00
 8005d1c:	40001000 	.word	0x40001000
 8005d20:	40001400 	.word	0x40001400

08005d24 <_ZN5Timer21TimerInterruptAktifEtEv>:

void Timer::TimerInterruptAktifEt()
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
    if (this->pTimerAlan == TIM2)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d34:	d107      	bne.n	8005d46 <_ZN5Timer21TimerInterruptAktifEtEv+0x22>
    {
        NVIC_EnableIRQ(TIM2_IRQn);
 8005d36:	201c      	movs	r0, #28
 8005d38:	f7ff fedc 	bl	8005af4 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM2_IRQn, 2);
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	201c      	movs	r0, #28
 8005d40:	f7ff fef6 	bl	8005b30 <__NVIC_SetPriority>
    else if (this->pTimerAlan == TIM7)
    {
        NVIC_EnableIRQ(TIM7_IRQn);
        NVIC_SetPriority(TIM7_IRQn, 2);
    }
}
 8005d44:	e03f      	b.n	8005dc6 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM3)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a21      	ldr	r2, [pc, #132]	; (8005dd0 <_ZN5Timer21TimerInterruptAktifEtEv+0xac>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d107      	bne.n	8005d60 <_ZN5Timer21TimerInterruptAktifEtEv+0x3c>
        NVIC_EnableIRQ(TIM3_IRQn);
 8005d50:	201d      	movs	r0, #29
 8005d52:	f7ff fecf 	bl	8005af4 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM3_IRQn, 2);
 8005d56:	2102      	movs	r1, #2
 8005d58:	201d      	movs	r0, #29
 8005d5a:	f7ff fee9 	bl	8005b30 <__NVIC_SetPriority>
}
 8005d5e:	e032      	b.n	8005dc6 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM4)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1b      	ldr	r2, [pc, #108]	; (8005dd4 <_ZN5Timer21TimerInterruptAktifEtEv+0xb0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d107      	bne.n	8005d7a <_ZN5Timer21TimerInterruptAktifEtEv+0x56>
        NVIC_EnableIRQ(TIM4_IRQn);
 8005d6a:	201e      	movs	r0, #30
 8005d6c:	f7ff fec2 	bl	8005af4 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM4_IRQn, 2);
 8005d70:	2102      	movs	r1, #2
 8005d72:	201e      	movs	r0, #30
 8005d74:	f7ff fedc 	bl	8005b30 <__NVIC_SetPriority>
}
 8005d78:	e025      	b.n	8005dc6 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM5)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a16      	ldr	r2, [pc, #88]	; (8005dd8 <_ZN5Timer21TimerInterruptAktifEtEv+0xb4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d107      	bne.n	8005d94 <_ZN5Timer21TimerInterruptAktifEtEv+0x70>
        NVIC_EnableIRQ(TIM5_IRQn);
 8005d84:	2032      	movs	r0, #50	; 0x32
 8005d86:	f7ff feb5 	bl	8005af4 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM5_IRQn, 2);
 8005d8a:	2102      	movs	r1, #2
 8005d8c:	2032      	movs	r0, #50	; 0x32
 8005d8e:	f7ff fecf 	bl	8005b30 <__NVIC_SetPriority>
}
 8005d92:	e018      	b.n	8005dc6 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM6)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a10      	ldr	r2, [pc, #64]	; (8005ddc <_ZN5Timer21TimerInterruptAktifEtEv+0xb8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d107      	bne.n	8005dae <_ZN5Timer21TimerInterruptAktifEtEv+0x8a>
        NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005d9e:	2036      	movs	r0, #54	; 0x36
 8005da0:	f7ff fea8 	bl	8005af4 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM6_DAC_IRQn, 2);
 8005da4:	2102      	movs	r1, #2
 8005da6:	2036      	movs	r0, #54	; 0x36
 8005da8:	f7ff fec2 	bl	8005b30 <__NVIC_SetPriority>
}
 8005dac:	e00b      	b.n	8005dc6 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM7)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a0b      	ldr	r2, [pc, #44]	; (8005de0 <_ZN5Timer21TimerInterruptAktifEtEv+0xbc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d106      	bne.n	8005dc6 <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
        NVIC_EnableIRQ(TIM7_IRQn);
 8005db8:	2037      	movs	r0, #55	; 0x37
 8005dba:	f7ff fe9b 	bl	8005af4 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM7_IRQn, 2);
 8005dbe:	2102      	movs	r1, #2
 8005dc0:	2037      	movs	r0, #55	; 0x37
 8005dc2:	f7ff feb5 	bl	8005b30 <__NVIC_SetPriority>
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40001000 	.word	0x40001000
 8005de0:	40001400 	.word	0x40001400

08005de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005de8:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <HAL_Init+0x40>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a0d      	ldr	r2, [pc, #52]	; (8005e24 <HAL_Init+0x40>)
 8005dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005df4:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <HAL_Init+0x40>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a0a      	ldr	r2, [pc, #40]	; (8005e24 <HAL_Init+0x40>)
 8005dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e00:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <HAL_Init+0x40>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a07      	ldr	r2, [pc, #28]	; (8005e24 <HAL_Init+0x40>)
 8005e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e0c:	2003      	movs	r0, #3
 8005e0e:	f000 f94f 	bl	80060b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e12:	2000      	movs	r0, #0
 8005e14:	f000 f808 	bl	8005e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e18:	f7fc fdba 	bl	8002990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40023c00 	.word	0x40023c00

08005e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e30:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <HAL_InitTick+0x54>)
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b12      	ldr	r3, [pc, #72]	; (8005e80 <HAL_InitTick+0x58>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 f967 	bl	800611a <HAL_SYSTICK_Config>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e00e      	b.n	8005e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b0f      	cmp	r3, #15
 8005e5a:	d80a      	bhi.n	8005e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295
 8005e64:	f000 f92f 	bl	80060c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e68:	4a06      	ldr	r2, [pc, #24]	; (8005e84 <HAL_InitTick+0x5c>)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e000      	b.n	8005e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000010 	.word	0x20000010
 8005e80:	20000018 	.word	0x20000018
 8005e84:	20000014 	.word	0x20000014

08005e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e8c:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <HAL_IncTick+0x20>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	4b06      	ldr	r3, [pc, #24]	; (8005eac <HAL_IncTick+0x24>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4413      	add	r3, r2
 8005e98:	4a04      	ldr	r2, [pc, #16]	; (8005eac <HAL_IncTick+0x24>)
 8005e9a:	6013      	str	r3, [r2, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20000018 	.word	0x20000018
 8005eac:	20000d48 	.word	0x20000d48

08005eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8005eb4:	4b03      	ldr	r3, [pc, #12]	; (8005ec4 <HAL_GetTick+0x14>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000d48 	.word	0x20000d48

08005ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ed0:	f7ff ffee 	bl	8005eb0 <HAL_GetTick>
 8005ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d005      	beq.n	8005eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ee2:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <HAL_Delay+0x44>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005eee:	bf00      	nop
 8005ef0:	f7ff ffde 	bl	8005eb0 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d8f7      	bhi.n	8005ef0 <HAL_Delay+0x28>
  {
  }
}
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20000018 	.word	0x20000018

08005f10 <__NVIC_SetPriorityGrouping>:
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f20:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <__NVIC_SetPriorityGrouping+0x44>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f42:	4a04      	ldr	r2, [pc, #16]	; (8005f54 <__NVIC_SetPriorityGrouping+0x44>)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	60d3      	str	r3, [r2, #12]
}
 8005f48:	bf00      	nop
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	e000ed00 	.word	0xe000ed00

08005f58 <__NVIC_GetPriorityGrouping>:
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f5c:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <__NVIC_GetPriorityGrouping+0x18>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	f003 0307 	and.w	r3, r3, #7
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	e000ed00 	.word	0xe000ed00

08005f74 <__NVIC_EnableIRQ>:
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	db0b      	blt.n	8005f9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	f003 021f 	and.w	r2, r3, #31
 8005f8c:	4907      	ldr	r1, [pc, #28]	; (8005fac <__NVIC_EnableIRQ+0x38>)
 8005f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	2001      	movs	r0, #1
 8005f96:	fa00 f202 	lsl.w	r2, r0, r2
 8005f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	e000e100 	.word	0xe000e100

08005fb0 <__NVIC_SetPriority>:
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	6039      	str	r1, [r7, #0]
 8005fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	db0a      	blt.n	8005fda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	490c      	ldr	r1, [pc, #48]	; (8005ffc <__NVIC_SetPriority+0x4c>)
 8005fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fce:	0112      	lsls	r2, r2, #4
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005fd8:	e00a      	b.n	8005ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	4908      	ldr	r1, [pc, #32]	; (8006000 <__NVIC_SetPriority+0x50>)
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	3b04      	subs	r3, #4
 8005fe8:	0112      	lsls	r2, r2, #4
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	440b      	add	r3, r1
 8005fee:	761a      	strb	r2, [r3, #24]
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	e000e100 	.word	0xe000e100
 8006000:	e000ed00 	.word	0xe000ed00

08006004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006004:	b480      	push	{r7}
 8006006:	b089      	sub	sp, #36	; 0x24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f1c3 0307 	rsb	r3, r3, #7
 800601e:	2b04      	cmp	r3, #4
 8006020:	bf28      	it	cs
 8006022:	2304      	movcs	r3, #4
 8006024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	3304      	adds	r3, #4
 800602a:	2b06      	cmp	r3, #6
 800602c:	d902      	bls.n	8006034 <NVIC_EncodePriority+0x30>
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	3b03      	subs	r3, #3
 8006032:	e000      	b.n	8006036 <NVIC_EncodePriority+0x32>
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006038:	f04f 32ff 	mov.w	r2, #4294967295
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	43da      	mvns	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	401a      	ands	r2, r3
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800604c:	f04f 31ff 	mov.w	r1, #4294967295
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	fa01 f303 	lsl.w	r3, r1, r3
 8006056:	43d9      	mvns	r1, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800605c:	4313      	orrs	r3, r2
         );
}
 800605e:	4618      	mov	r0, r3
 8006060:	3724      	adds	r7, #36	; 0x24
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3b01      	subs	r3, #1
 8006078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800607c:	d301      	bcc.n	8006082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800607e:	2301      	movs	r3, #1
 8006080:	e00f      	b.n	80060a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006082:	4a0a      	ldr	r2, [pc, #40]	; (80060ac <SysTick_Config+0x40>)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3b01      	subs	r3, #1
 8006088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800608a:	210f      	movs	r1, #15
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	f7ff ff8e 	bl	8005fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <SysTick_Config+0x40>)
 8006096:	2200      	movs	r2, #0
 8006098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800609a:	4b04      	ldr	r3, [pc, #16]	; (80060ac <SysTick_Config+0x40>)
 800609c:	2207      	movs	r2, #7
 800609e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	e000e010 	.word	0xe000e010

080060b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff ff29 	bl	8005f10 <__NVIC_SetPriorityGrouping>
}
 80060be:	bf00      	nop
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b086      	sub	sp, #24
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	4603      	mov	r3, r0
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060d8:	f7ff ff3e 	bl	8005f58 <__NVIC_GetPriorityGrouping>
 80060dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	6978      	ldr	r0, [r7, #20]
 80060e4:	f7ff ff8e 	bl	8006004 <NVIC_EncodePriority>
 80060e8:	4602      	mov	r2, r0
 80060ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ee:	4611      	mov	r1, r2
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff ff5d 	bl	8005fb0 <__NVIC_SetPriority>
}
 80060f6:	bf00      	nop
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	4603      	mov	r3, r0
 8006106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff ff31 	bl	8005f74 <__NVIC_EnableIRQ>
}
 8006112:	bf00      	nop
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff ffa2 	bl	800606c <SysTick_Config>
 8006128:	4603      	mov	r3, r0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006140:	f7ff feb6 	bl	8005eb0 <HAL_GetTick>
 8006144:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d008      	beq.n	8006164 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2280      	movs	r2, #128	; 0x80
 8006156:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e052      	b.n	800620a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0216 	bic.w	r2, r2, #22
 8006172:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006182:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	d103      	bne.n	8006194 <HAL_DMA_Abort+0x62>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006190:	2b00      	cmp	r3, #0
 8006192:	d007      	beq.n	80061a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0208 	bic.w	r2, r2, #8
 80061a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061b4:	e013      	b.n	80061de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061b6:	f7ff fe7b 	bl	8005eb0 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b05      	cmp	r3, #5
 80061c2:	d90c      	bls.n	80061de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2203      	movs	r2, #3
 80061ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e015      	b.n	800620a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e4      	bne.n	80061b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f0:	223f      	movs	r2, #63	; 0x3f
 80061f2:	409a      	lsls	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d004      	beq.n	8006230 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2280      	movs	r2, #128	; 0x80
 800622a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e00c      	b.n	800624a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2205      	movs	r2, #5
 8006234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0201 	bic.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006258:	b480      	push	{r7}
 800625a:	b089      	sub	sp, #36	; 0x24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006266:	2300      	movs	r3, #0
 8006268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800626a:	2300      	movs	r3, #0
 800626c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800626e:	2300      	movs	r3, #0
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	e16b      	b.n	800654c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006274:	2201      	movs	r2, #1
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4013      	ands	r3, r2
 8006286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	429a      	cmp	r2, r3
 800628e:	f040 815a 	bne.w	8006546 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	2b01      	cmp	r3, #1
 800629c:	d005      	beq.n	80062aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d130      	bne.n	800630c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	2203      	movs	r2, #3
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	43db      	mvns	r3, r3
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4013      	ands	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062e0:	2201      	movs	r2, #1
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	43db      	mvns	r3, r3
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	4013      	ands	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	091b      	lsrs	r3, r3, #4
 80062f6:	f003 0201 	and.w	r2, r3, #1
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4313      	orrs	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	2b03      	cmp	r3, #3
 8006316:	d017      	beq.n	8006348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	2203      	movs	r2, #3
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	43db      	mvns	r3, r3
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4013      	ands	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	4313      	orrs	r3, r2
 8006340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d123      	bne.n	800639c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	08da      	lsrs	r2, r3, #3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3208      	adds	r2, #8
 800635c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	220f      	movs	r2, #15
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	43db      	mvns	r3, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4013      	ands	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	08da      	lsrs	r2, r3, #3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3208      	adds	r2, #8
 8006396:	69b9      	ldr	r1, [r7, #24]
 8006398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	2203      	movs	r2, #3
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4013      	ands	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f003 0203 	and.w	r2, r3, #3
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80b4 	beq.w	8006546 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	4b60      	ldr	r3, [pc, #384]	; (8006564 <HAL_GPIO_Init+0x30c>)
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	4a5f      	ldr	r2, [pc, #380]	; (8006564 <HAL_GPIO_Init+0x30c>)
 80063e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ec:	6453      	str	r3, [r2, #68]	; 0x44
 80063ee:	4b5d      	ldr	r3, [pc, #372]	; (8006564 <HAL_GPIO_Init+0x30c>)
 80063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063fa:	4a5b      	ldr	r2, [pc, #364]	; (8006568 <HAL_GPIO_Init+0x310>)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	089b      	lsrs	r3, r3, #2
 8006400:	3302      	adds	r3, #2
 8006402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	220f      	movs	r2, #15
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	43db      	mvns	r3, r3
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	4013      	ands	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a52      	ldr	r2, [pc, #328]	; (800656c <HAL_GPIO_Init+0x314>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d02b      	beq.n	800647e <HAL_GPIO_Init+0x226>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a51      	ldr	r2, [pc, #324]	; (8006570 <HAL_GPIO_Init+0x318>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d025      	beq.n	800647a <HAL_GPIO_Init+0x222>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a50      	ldr	r2, [pc, #320]	; (8006574 <HAL_GPIO_Init+0x31c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01f      	beq.n	8006476 <HAL_GPIO_Init+0x21e>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a4f      	ldr	r2, [pc, #316]	; (8006578 <HAL_GPIO_Init+0x320>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d019      	beq.n	8006472 <HAL_GPIO_Init+0x21a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a4e      	ldr	r2, [pc, #312]	; (800657c <HAL_GPIO_Init+0x324>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d013      	beq.n	800646e <HAL_GPIO_Init+0x216>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a4d      	ldr	r2, [pc, #308]	; (8006580 <HAL_GPIO_Init+0x328>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00d      	beq.n	800646a <HAL_GPIO_Init+0x212>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a4c      	ldr	r2, [pc, #304]	; (8006584 <HAL_GPIO_Init+0x32c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d007      	beq.n	8006466 <HAL_GPIO_Init+0x20e>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a4b      	ldr	r2, [pc, #300]	; (8006588 <HAL_GPIO_Init+0x330>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d101      	bne.n	8006462 <HAL_GPIO_Init+0x20a>
 800645e:	2307      	movs	r3, #7
 8006460:	e00e      	b.n	8006480 <HAL_GPIO_Init+0x228>
 8006462:	2308      	movs	r3, #8
 8006464:	e00c      	b.n	8006480 <HAL_GPIO_Init+0x228>
 8006466:	2306      	movs	r3, #6
 8006468:	e00a      	b.n	8006480 <HAL_GPIO_Init+0x228>
 800646a:	2305      	movs	r3, #5
 800646c:	e008      	b.n	8006480 <HAL_GPIO_Init+0x228>
 800646e:	2304      	movs	r3, #4
 8006470:	e006      	b.n	8006480 <HAL_GPIO_Init+0x228>
 8006472:	2303      	movs	r3, #3
 8006474:	e004      	b.n	8006480 <HAL_GPIO_Init+0x228>
 8006476:	2302      	movs	r3, #2
 8006478:	e002      	b.n	8006480 <HAL_GPIO_Init+0x228>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <HAL_GPIO_Init+0x228>
 800647e:	2300      	movs	r3, #0
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	f002 0203 	and.w	r2, r2, #3
 8006486:	0092      	lsls	r2, r2, #2
 8006488:	4093      	lsls	r3, r2
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	4313      	orrs	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006490:	4935      	ldr	r1, [pc, #212]	; (8006568 <HAL_GPIO_Init+0x310>)
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	089b      	lsrs	r3, r3, #2
 8006496:	3302      	adds	r3, #2
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800649e:	4b3b      	ldr	r3, [pc, #236]	; (800658c <HAL_GPIO_Init+0x334>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	43db      	mvns	r3, r3
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	4013      	ands	r3, r2
 80064ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064c2:	4a32      	ldr	r2, [pc, #200]	; (800658c <HAL_GPIO_Init+0x334>)
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064c8:	4b30      	ldr	r3, [pc, #192]	; (800658c <HAL_GPIO_Init+0x334>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	43db      	mvns	r3, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4013      	ands	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064ec:	4a27      	ldr	r2, [pc, #156]	; (800658c <HAL_GPIO_Init+0x334>)
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064f2:	4b26      	ldr	r3, [pc, #152]	; (800658c <HAL_GPIO_Init+0x334>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	43db      	mvns	r3, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	4013      	ands	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006516:	4a1d      	ldr	r2, [pc, #116]	; (800658c <HAL_GPIO_Init+0x334>)
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800651c:	4b1b      	ldr	r3, [pc, #108]	; (800658c <HAL_GPIO_Init+0x334>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	43db      	mvns	r3, r3
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	4013      	ands	r3, r2
 800652a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006540:	4a12      	ldr	r2, [pc, #72]	; (800658c <HAL_GPIO_Init+0x334>)
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	3301      	adds	r3, #1
 800654a:	61fb      	str	r3, [r7, #28]
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	2b0f      	cmp	r3, #15
 8006550:	f67f ae90 	bls.w	8006274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
 8006558:	3724      	adds	r7, #36	; 0x24
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	40023800 	.word	0x40023800
 8006568:	40013800 	.word	0x40013800
 800656c:	40020000 	.word	0x40020000
 8006570:	40020400 	.word	0x40020400
 8006574:	40020800 	.word	0x40020800
 8006578:	40020c00 	.word	0x40020c00
 800657c:	40021000 	.word	0x40021000
 8006580:	40021400 	.word	0x40021400
 8006584:	40021800 	.word	0x40021800
 8006588:	40021c00 	.word	0x40021c00
 800658c:	40013c00 	.word	0x40013c00

08006590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	807b      	strh	r3, [r7, #2]
 800659c:	4613      	mov	r3, r2
 800659e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065a0:	787b      	ldrb	r3, [r7, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065a6:	887a      	ldrh	r2, [r7, #2]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065ac:	e003      	b.n	80065b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065ae:	887b      	ldrh	r3, [r7, #2]
 80065b0:	041a      	lsls	r2, r3, #16
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	619a      	str	r2, [r3, #24]
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80065ce:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	4013      	ands	r3, r2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d006      	beq.n	80065e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065da:	4a05      	ldr	r2, [pc, #20]	; (80065f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065e0:	88fb      	ldrh	r3, [r7, #6]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 f806 	bl	80065f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80065e8:	bf00      	nop
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40013c00 	.word	0x40013c00

080065f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
	...

0800660c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e12b      	b.n	8006876 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fa fe78 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2224      	movs	r2, #36	; 0x24
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0201 	bic.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800665e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800666e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006670:	f002 f8e0 	bl	8008834 <HAL_RCC_GetPCLK1Freq>
 8006674:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	4a81      	ldr	r2, [pc, #516]	; (8006880 <HAL_I2C_Init+0x274>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d807      	bhi.n	8006690 <HAL_I2C_Init+0x84>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4a80      	ldr	r2, [pc, #512]	; (8006884 <HAL_I2C_Init+0x278>)
 8006684:	4293      	cmp	r3, r2
 8006686:	bf94      	ite	ls
 8006688:	2301      	movls	r3, #1
 800668a:	2300      	movhi	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e006      	b.n	800669e <HAL_I2C_Init+0x92>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4a7d      	ldr	r2, [pc, #500]	; (8006888 <HAL_I2C_Init+0x27c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	bf94      	ite	ls
 8006698:	2301      	movls	r3, #1
 800669a:	2300      	movhi	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e0e7      	b.n	8006876 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4a78      	ldr	r2, [pc, #480]	; (800688c <HAL_I2C_Init+0x280>)
 80066aa:	fba2 2303 	umull	r2, r3, r2, r3
 80066ae:	0c9b      	lsrs	r3, r3, #18
 80066b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	4a6a      	ldr	r2, [pc, #424]	; (8006880 <HAL_I2C_Init+0x274>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d802      	bhi.n	80066e0 <HAL_I2C_Init+0xd4>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	3301      	adds	r3, #1
 80066de:	e009      	b.n	80066f4 <HAL_I2C_Init+0xe8>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	4a69      	ldr	r2, [pc, #420]	; (8006890 <HAL_I2C_Init+0x284>)
 80066ec:	fba2 2303 	umull	r2, r3, r2, r3
 80066f0:	099b      	lsrs	r3, r3, #6
 80066f2:	3301      	adds	r3, #1
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	430b      	orrs	r3, r1
 80066fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006706:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	495c      	ldr	r1, [pc, #368]	; (8006880 <HAL_I2C_Init+0x274>)
 8006710:	428b      	cmp	r3, r1
 8006712:	d819      	bhi.n	8006748 <HAL_I2C_Init+0x13c>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	1e59      	subs	r1, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006728:	400b      	ands	r3, r1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_I2C_Init+0x138>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	1e59      	subs	r1, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	fbb1 f3f3 	udiv	r3, r1, r3
 800673c:	3301      	adds	r3, #1
 800673e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006742:	e051      	b.n	80067e8 <HAL_I2C_Init+0x1dc>
 8006744:	2304      	movs	r3, #4
 8006746:	e04f      	b.n	80067e8 <HAL_I2C_Init+0x1dc>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d111      	bne.n	8006774 <HAL_I2C_Init+0x168>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	1e58      	subs	r0, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6859      	ldr	r1, [r3, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	440b      	add	r3, r1
 800675e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006762:	3301      	adds	r3, #1
 8006764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006768:	2b00      	cmp	r3, #0
 800676a:	bf0c      	ite	eq
 800676c:	2301      	moveq	r3, #1
 800676e:	2300      	movne	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	e012      	b.n	800679a <HAL_I2C_Init+0x18e>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	1e58      	subs	r0, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6859      	ldr	r1, [r3, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	440b      	add	r3, r1
 8006782:	0099      	lsls	r1, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	fbb0 f3f3 	udiv	r3, r0, r3
 800678a:	3301      	adds	r3, #1
 800678c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006790:	2b00      	cmp	r3, #0
 8006792:	bf0c      	ite	eq
 8006794:	2301      	moveq	r3, #1
 8006796:	2300      	movne	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <HAL_I2C_Init+0x196>
 800679e:	2301      	movs	r3, #1
 80067a0:	e022      	b.n	80067e8 <HAL_I2C_Init+0x1dc>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10e      	bne.n	80067c8 <HAL_I2C_Init+0x1bc>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1e58      	subs	r0, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6859      	ldr	r1, [r3, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	440b      	add	r3, r1
 80067b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80067bc:	3301      	adds	r3, #1
 80067be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c6:	e00f      	b.n	80067e8 <HAL_I2C_Init+0x1dc>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	1e58      	subs	r0, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6859      	ldr	r1, [r3, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	440b      	add	r3, r1
 80067d6:	0099      	lsls	r1, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	fbb0 f3f3 	udiv	r3, r0, r3
 80067de:	3301      	adds	r3, #1
 80067e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	6809      	ldr	r1, [r1, #0]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69da      	ldr	r2, [r3, #28]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006816:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6911      	ldr	r1, [r2, #16]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	68d2      	ldr	r2, [r2, #12]
 8006822:	4311      	orrs	r1, r2
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6812      	ldr	r2, [r2, #0]
 8006828:	430b      	orrs	r3, r1
 800682a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2220      	movs	r2, #32
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	000186a0 	.word	0x000186a0
 8006884:	001e847f 	.word	0x001e847f
 8006888:	003d08ff 	.word	0x003d08ff
 800688c:	431bde83 	.word	0x431bde83
 8006890:	10624dd3 	.word	0x10624dd3

08006894 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af02      	add	r7, sp, #8
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	607a      	str	r2, [r7, #4]
 800689e:	461a      	mov	r2, r3
 80068a0:	460b      	mov	r3, r1
 80068a2:	817b      	strh	r3, [r7, #10]
 80068a4:	4613      	mov	r3, r2
 80068a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068a8:	f7ff fb02 	bl	8005eb0 <HAL_GetTick>
 80068ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	f040 80e0 	bne.w	8006a7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	2319      	movs	r3, #25
 80068c2:	2201      	movs	r2, #1
 80068c4:	4970      	ldr	r1, [pc, #448]	; (8006a88 <HAL_I2C_Master_Transmit+0x1f4>)
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f001 f90e 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80068d2:	2302      	movs	r3, #2
 80068d4:	e0d3      	b.n	8006a7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_I2C_Master_Transmit+0x50>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e0cc      	b.n	8006a7e <HAL_I2C_Master_Transmit+0x1ea>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d007      	beq.n	800690a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0201 	orr.w	r2, r2, #1
 8006908:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006918:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2221      	movs	r2, #33	; 0x21
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2210      	movs	r2, #16
 8006926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	893a      	ldrh	r2, [r7, #8]
 800693a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4a50      	ldr	r2, [pc, #320]	; (8006a8c <HAL_I2C_Master_Transmit+0x1f8>)
 800694a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800694c:	8979      	ldrh	r1, [r7, #10]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	6a3a      	ldr	r2, [r7, #32]
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 fdfa 	bl	800754c <I2C_MasterRequestWrite>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e08d      	b.n	8006a7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006962:	2300      	movs	r3, #0
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006978:	e066      	b.n	8006a48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	6a39      	ldr	r1, [r7, #32]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f001 f9cc 	bl	8007d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00d      	beq.n	80069a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	2b04      	cmp	r3, #4
 8006990:	d107      	bne.n	80069a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e06b      	b.n	8006a7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d11b      	bne.n	8006a1c <HAL_I2C_Master_Transmit+0x188>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d017      	beq.n	8006a1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	781a      	ldrb	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	6a39      	ldr	r1, [r7, #32]
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f001 f9c3 	bl	8007dac <I2C_WaitOnBTFFlagUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00d      	beq.n	8006a48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d107      	bne.n	8006a44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e01a      	b.n	8006a7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d194      	bne.n	800697a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e000      	b.n	8006a7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	00100002 	.word	0x00100002
 8006a8c:	ffff0000 	.word	0xffff0000

08006a90 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08c      	sub	sp, #48	; 0x30
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	607a      	str	r2, [r7, #4]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	817b      	strh	r3, [r7, #10]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006aa4:	f7ff fa04 	bl	8005eb0 <HAL_GetTick>
 8006aa8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	f040 8217 	bne.w	8006ee6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	2319      	movs	r3, #25
 8006abe:	2201      	movs	r2, #1
 8006ac0:	497c      	ldr	r1, [pc, #496]	; (8006cb4 <HAL_I2C_Master_Receive+0x224>)
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f001 f810 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e20a      	b.n	8006ee8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_I2C_Master_Receive+0x50>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e203      	b.n	8006ee8 <HAL_I2C_Master_Receive+0x458>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d007      	beq.n	8006b06 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f042 0201 	orr.w	r2, r2, #1
 8006b04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2222      	movs	r2, #34	; 0x22
 8006b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2210      	movs	r2, #16
 8006b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	893a      	ldrh	r2, [r7, #8]
 8006b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4a5c      	ldr	r2, [pc, #368]	; (8006cb8 <HAL_I2C_Master_Receive+0x228>)
 8006b46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b48:	8979      	ldrh	r1, [r7, #10]
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 fd7e 	bl	8007650 <I2C_MasterRequestRead>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e1c4      	b.n	8006ee8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d113      	bne.n	8006b8e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b66:	2300      	movs	r3, #0
 8006b68:	623b      	str	r3, [r7, #32]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	623b      	str	r3, [r7, #32]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	623b      	str	r3, [r7, #32]
 8006b7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	e198      	b.n	8006ec0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d11b      	bne.n	8006bce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61fb      	str	r3, [r7, #28]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	e178      	b.n	8006ec0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d11b      	bne.n	8006c0e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	e158      	b.n	8006ec0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c34:	e144      	b.n	8006ec0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	f200 80f1 	bhi.w	8006e22 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d123      	bne.n	8006c90 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f001 f8f5 	bl	8007e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e145      	b.n	8006ee8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c8e:	e117      	b.n	8006ec0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d14e      	bne.n	8006d36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4906      	ldr	r1, [pc, #24]	; (8006cbc <HAL_I2C_Master_Receive+0x22c>)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 ff20 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d008      	beq.n	8006cc0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e11a      	b.n	8006ee8 <HAL_I2C_Master_Receive+0x458>
 8006cb2:	bf00      	nop
 8006cb4:	00100002 	.word	0x00100002
 8006cb8:	ffff0000 	.word	0xffff0000
 8006cbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691a      	ldr	r2, [r3, #16]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d34:	e0c4      	b.n	8006ec0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	496c      	ldr	r1, [pc, #432]	; (8006ef0 <HAL_I2C_Master_Receive+0x460>)
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 fed1 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0cb      	b.n	8006ee8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4955      	ldr	r1, [pc, #340]	; (8006ef0 <HAL_I2C_Master_Receive+0x460>)
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fea3 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e09d      	b.n	8006ee8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e20:	e04e      	b.n	8006ec0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f001 f808 	bl	8007e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e058      	b.n	8006ee8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d124      	bne.n	8006ec0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d107      	bne.n	8006e8e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e8c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f47f aeb6 	bne.w	8006c36 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e000      	b.n	8006ee8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006ee6:	2302      	movs	r3, #2
  }
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3728      	adds	r7, #40	; 0x28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	00010004 	.word	0x00010004

08006ef4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	4608      	mov	r0, r1
 8006efe:	4611      	mov	r1, r2
 8006f00:	461a      	mov	r2, r3
 8006f02:	4603      	mov	r3, r0
 8006f04:	817b      	strh	r3, [r7, #10]
 8006f06:	460b      	mov	r3, r1
 8006f08:	813b      	strh	r3, [r7, #8]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f0e:	f7fe ffcf 	bl	8005eb0 <HAL_GetTick>
 8006f12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	f040 80d9 	bne.w	80070d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	2319      	movs	r3, #25
 8006f28:	2201      	movs	r2, #1
 8006f2a:	496d      	ldr	r1, [pc, #436]	; (80070e0 <HAL_I2C_Mem_Write+0x1ec>)
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 fddb 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e0cc      	b.n	80070d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_I2C_Mem_Write+0x56>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e0c5      	b.n	80070d6 <HAL_I2C_Mem_Write+0x1e2>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d007      	beq.n	8006f70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2221      	movs	r2, #33	; 0x21
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2240      	movs	r2, #64	; 0x40
 8006f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a3a      	ldr	r2, [r7, #32]
 8006f9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a4d      	ldr	r2, [pc, #308]	; (80070e4 <HAL_I2C_Mem_Write+0x1f0>)
 8006fb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006fb2:	88f8      	ldrh	r0, [r7, #6]
 8006fb4:	893a      	ldrh	r2, [r7, #8]
 8006fb6:	8979      	ldrh	r1, [r7, #10]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 fc12 	bl	80077ec <I2C_RequestMemoryWrite>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d052      	beq.n	8007074 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e081      	b.n	80070d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fea0 	bl	8007d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00d      	beq.n	8006ffe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d107      	bne.n	8006ffa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ff8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e06b      	b.n	80070d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007018:	3b01      	subs	r3, #1
 800701a:	b29a      	uxth	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b04      	cmp	r3, #4
 800703a:	d11b      	bne.n	8007074 <HAL_I2C_Mem_Write+0x180>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007040:	2b00      	cmp	r3, #0
 8007042:	d017      	beq.n	8007074 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	781a      	ldrb	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800706a:	b29b      	uxth	r3, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1aa      	bne.n	8006fd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 fe93 	bl	8007dac <I2C_WaitOnBTFFlagUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00d      	beq.n	80070a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	2b04      	cmp	r3, #4
 8007092:	d107      	bne.n	80070a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e016      	b.n	80070d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	e000      	b.n	80070d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80070d4:	2302      	movs	r3, #2
  }
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	00100002 	.word	0x00100002
 80070e4:	ffff0000 	.word	0xffff0000

080070e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08c      	sub	sp, #48	; 0x30
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	4608      	mov	r0, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	461a      	mov	r2, r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	817b      	strh	r3, [r7, #10]
 80070fa:	460b      	mov	r3, r1
 80070fc:	813b      	strh	r3, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007102:	f7fe fed5 	bl	8005eb0 <HAL_GetTick>
 8007106:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b20      	cmp	r3, #32
 8007112:	f040 8214 	bne.w	800753e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	2319      	movs	r3, #25
 800711c:	2201      	movs	r2, #1
 800711e:	497b      	ldr	r1, [pc, #492]	; (800730c <HAL_I2C_Mem_Read+0x224>)
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 fce1 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800712c:	2302      	movs	r3, #2
 800712e:	e207      	b.n	8007540 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_I2C_Mem_Read+0x56>
 800713a:	2302      	movs	r3, #2
 800713c:	e200      	b.n	8007540 <HAL_I2C_Mem_Read+0x458>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b01      	cmp	r3, #1
 8007152:	d007      	beq.n	8007164 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0201 	orr.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007172:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2222      	movs	r2, #34	; 0x22
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2240      	movs	r2, #64	; 0x40
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800718e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007194:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719a:	b29a      	uxth	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4a5b      	ldr	r2, [pc, #364]	; (8007310 <HAL_I2C_Mem_Read+0x228>)
 80071a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071a6:	88f8      	ldrh	r0, [r7, #6]
 80071a8:	893a      	ldrh	r2, [r7, #8]
 80071aa:	8979      	ldrh	r1, [r7, #10]
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	4603      	mov	r3, r0
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 fbae 	bl	8007918 <I2C_RequestMemoryRead>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e1bc      	b.n	8007540 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d113      	bne.n	80071f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ce:	2300      	movs	r3, #0
 80071d0:	623b      	str	r3, [r7, #32]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	623b      	str	r3, [r7, #32]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	623b      	str	r3, [r7, #32]
 80071e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	e190      	b.n	8007518 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d11b      	bne.n	8007236 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800720c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800720e:	2300      	movs	r3, #0
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	61fb      	str	r3, [r7, #28]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	61fb      	str	r3, [r7, #28]
 8007222:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	e170      	b.n	8007518 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800723a:	2b02      	cmp	r3, #2
 800723c:	d11b      	bne.n	8007276 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800724c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800725c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800725e:	2300      	movs	r3, #0
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	e150      	b.n	8007518 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	617b      	str	r3, [r7, #20]
 800728a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800728c:	e144      	b.n	8007518 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007292:	2b03      	cmp	r3, #3
 8007294:	f200 80f1 	bhi.w	800747a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800729c:	2b01      	cmp	r3, #1
 800729e:	d123      	bne.n	80072e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 fdc9 	bl	8007e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e145      	b.n	8007540 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691a      	ldr	r2, [r3, #16]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d0:	3b01      	subs	r3, #1
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80072e6:	e117      	b.n	8007518 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d14e      	bne.n	800738e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f6:	2200      	movs	r2, #0
 80072f8:	4906      	ldr	r1, [pc, #24]	; (8007314 <HAL_I2C_Mem_Read+0x22c>)
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 fbf4 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d008      	beq.n	8007318 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e11a      	b.n	8007540 <HAL_I2C_Mem_Read+0x458>
 800730a:	bf00      	nop
 800730c:	00100002 	.word	0x00100002
 8007310:	ffff0000 	.word	0xffff0000
 8007314:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007326:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691a      	ldr	r2, [r3, #16]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007350:	b29b      	uxth	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	b29a      	uxth	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007382:	b29b      	uxth	r3, r3
 8007384:	3b01      	subs	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800738c:	e0c4      	b.n	8007518 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	2200      	movs	r2, #0
 8007396:	496c      	ldr	r1, [pc, #432]	; (8007548 <HAL_I2C_Mem_Read+0x460>)
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 fba5 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e0cb      	b.n	8007540 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691a      	ldr	r2, [r3, #16]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d4:	3b01      	subs	r3, #1
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	2200      	movs	r2, #0
 80073f2:	4955      	ldr	r1, [pc, #340]	; (8007548 <HAL_I2C_Mem_Read+0x460>)
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 fb77 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e09d      	b.n	8007540 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007412:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691a      	ldr	r2, [r3, #16]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007430:	3b01      	subs	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007478:	e04e      	b.n	8007518 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800747a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800747c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 fcdc 	bl	8007e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e058      	b.n	8007540 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	b2d2      	uxtb	r2, r2
 800749a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d124      	bne.n	8007518 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d107      	bne.n	80074e6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	f47f aeb6 	bne.w	800728e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	e000      	b.n	8007540 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800753e:	2302      	movs	r3, #2
  }
}
 8007540:	4618      	mov	r0, r3
 8007542:	3728      	adds	r7, #40	; 0x28
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	00010004 	.word	0x00010004

0800754c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af02      	add	r7, sp, #8
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	607a      	str	r2, [r7, #4]
 8007556:	603b      	str	r3, [r7, #0]
 8007558:	460b      	mov	r3, r1
 800755a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b08      	cmp	r3, #8
 8007566:	d006      	beq.n	8007576 <I2C_MasterRequestWrite+0x2a>
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d003      	beq.n	8007576 <I2C_MasterRequestWrite+0x2a>
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007574:	d108      	bne.n	8007588 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	e00b      	b.n	80075a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758c:	2b12      	cmp	r3, #18
 800758e:	d107      	bne.n	80075a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800759e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fa9b 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00d      	beq.n	80075d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c6:	d103      	bne.n	80075d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e035      	b.n	8007640 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075dc:	d108      	bne.n	80075f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80075de:	897b      	ldrh	r3, [r7, #10]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075ec:	611a      	str	r2, [r3, #16]
 80075ee:	e01b      	b.n	8007628 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80075f0:	897b      	ldrh	r3, [r7, #10]
 80075f2:	11db      	asrs	r3, r3, #7
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	f003 0306 	and.w	r3, r3, #6
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	f063 030f 	orn	r3, r3, #15
 8007600:	b2da      	uxtb	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	490e      	ldr	r1, [pc, #56]	; (8007648 <I2C_MasterRequestWrite+0xfc>)
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 fae4 	bl	8007bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e010      	b.n	8007640 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800761e:	897b      	ldrh	r3, [r7, #10]
 8007620:	b2da      	uxtb	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	4907      	ldr	r1, [pc, #28]	; (800764c <I2C_MasterRequestWrite+0x100>)
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fad4 	bl	8007bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	00010008 	.word	0x00010008
 800764c:	00010002 	.word	0x00010002

08007650 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	607a      	str	r2, [r7, #4]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	460b      	mov	r3, r1
 800765e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007674:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2b08      	cmp	r3, #8
 800767a:	d006      	beq.n	800768a <I2C_MasterRequestRead+0x3a>
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d003      	beq.n	800768a <I2C_MasterRequestRead+0x3a>
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007688:	d108      	bne.n	800769c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	e00b      	b.n	80076b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a0:	2b11      	cmp	r3, #17
 80076a2:	d107      	bne.n	80076b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 fa11 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00d      	beq.n	80076e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076da:	d103      	bne.n	80076e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e079      	b.n	80077dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076f0:	d108      	bne.n	8007704 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80076f2:	897b      	ldrh	r3, [r7, #10]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	f043 0301 	orr.w	r3, r3, #1
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	611a      	str	r2, [r3, #16]
 8007702:	e05f      	b.n	80077c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007704:	897b      	ldrh	r3, [r7, #10]
 8007706:	11db      	asrs	r3, r3, #7
 8007708:	b2db      	uxtb	r3, r3
 800770a:	f003 0306 	and.w	r3, r3, #6
 800770e:	b2db      	uxtb	r3, r3
 8007710:	f063 030f 	orn	r3, r3, #15
 8007714:	b2da      	uxtb	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	4930      	ldr	r1, [pc, #192]	; (80077e4 <I2C_MasterRequestRead+0x194>)
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 fa5a 	bl	8007bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e054      	b.n	80077dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007732:	897b      	ldrh	r3, [r7, #10]
 8007734:	b2da      	uxtb	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	4929      	ldr	r1, [pc, #164]	; (80077e8 <I2C_MasterRequestRead+0x198>)
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fa4a 	bl	8007bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e044      	b.n	80077dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007752:	2300      	movs	r3, #0
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	613b      	str	r3, [r7, #16]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	613b      	str	r3, [r7, #16]
 8007766:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007776:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 f9af 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00d      	beq.n	80077ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800779e:	d103      	bne.n	80077a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e017      	b.n	80077dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80077ac:	897b      	ldrh	r3, [r7, #10]
 80077ae:	11db      	asrs	r3, r3, #7
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	f003 0306 	and.w	r3, r3, #6
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	f063 030e 	orn	r3, r3, #14
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	4907      	ldr	r1, [pc, #28]	; (80077e8 <I2C_MasterRequestRead+0x198>)
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 fa06 	bl	8007bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e000      	b.n	80077dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	00010008 	.word	0x00010008
 80077e8:	00010002 	.word	0x00010002

080077ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	817b      	strh	r3, [r7, #10]
 80077fe:	460b      	mov	r3, r1
 8007800:	813b      	strh	r3, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	2200      	movs	r2, #0
 800781e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f960 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00d      	beq.n	800784a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783c:	d103      	bne.n	8007846 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007844:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e05f      	b.n	800790a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800784a:	897b      	ldrh	r3, [r7, #10]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	461a      	mov	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	6a3a      	ldr	r2, [r7, #32]
 800785e:	492d      	ldr	r1, [pc, #180]	; (8007914 <I2C_RequestMemoryWrite+0x128>)
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f9bb 	bl	8007bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e04c      	b.n	800790a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007870:	2300      	movs	r3, #0
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007888:	6a39      	ldr	r1, [r7, #32]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fa46 	bl	8007d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00d      	beq.n	80078b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	2b04      	cmp	r3, #4
 800789c:	d107      	bne.n	80078ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e02b      	b.n	800790a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078b2:	88fb      	ldrh	r3, [r7, #6]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d105      	bne.n	80078c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078b8:	893b      	ldrh	r3, [r7, #8]
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	611a      	str	r2, [r3, #16]
 80078c2:	e021      	b.n	8007908 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078c4:	893b      	ldrh	r3, [r7, #8]
 80078c6:	0a1b      	lsrs	r3, r3, #8
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d4:	6a39      	ldr	r1, [r7, #32]
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 fa20 	bl	8007d1c <I2C_WaitOnTXEFlagUntilTimeout>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00d      	beq.n	80078fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d107      	bne.n	80078fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e005      	b.n	800790a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078fe:	893b      	ldrh	r3, [r7, #8]
 8007900:	b2da      	uxtb	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	00010002 	.word	0x00010002

08007918 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af02      	add	r7, sp, #8
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	4608      	mov	r0, r1
 8007922:	4611      	mov	r1, r2
 8007924:	461a      	mov	r2, r3
 8007926:	4603      	mov	r3, r0
 8007928:	817b      	strh	r3, [r7, #10]
 800792a:	460b      	mov	r3, r1
 800792c:	813b      	strh	r3, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007940:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	2200      	movs	r2, #0
 800795a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 f8c2 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00d      	beq.n	8007986 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007978:	d103      	bne.n	8007982 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007980:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e0aa      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007986:	897b      	ldrh	r3, [r7, #10]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007994:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	6a3a      	ldr	r2, [r7, #32]
 800799a:	4952      	ldr	r1, [pc, #328]	; (8007ae4 <I2C_RequestMemoryRead+0x1cc>)
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f91d 	bl	8007bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e097      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	617b      	str	r3, [r7, #20]
 80079c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c4:	6a39      	ldr	r1, [r7, #32]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 f9a8 	bl	8007d1c <I2C_WaitOnTXEFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00d      	beq.n	80079ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d107      	bne.n	80079ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e076      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d105      	bne.n	8007a00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079f4:	893b      	ldrh	r3, [r7, #8]
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	611a      	str	r2, [r3, #16]
 80079fe:	e021      	b.n	8007a44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a00:	893b      	ldrh	r3, [r7, #8]
 8007a02:	0a1b      	lsrs	r3, r3, #8
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a10:	6a39      	ldr	r1, [r7, #32]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 f982 	bl	8007d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00d      	beq.n	8007a3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d107      	bne.n	8007a36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e050      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a3a:	893b      	ldrh	r3, [r7, #8]
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a46:	6a39      	ldr	r1, [r7, #32]
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 f967 	bl	8007d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00d      	beq.n	8007a70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d107      	bne.n	8007a6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e035      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f82b 	bl	8007ae8 <I2C_WaitOnFlagUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00d      	beq.n	8007ab4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa6:	d103      	bne.n	8007ab0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e013      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ab4:	897b      	ldrh	r3, [r7, #10]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f043 0301 	orr.w	r3, r3, #1
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	6a3a      	ldr	r2, [r7, #32]
 8007ac8:	4906      	ldr	r1, [pc, #24]	; (8007ae4 <I2C_RequestMemoryRead+0x1cc>)
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 f886 	bl	8007bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e000      	b.n	8007adc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	00010002 	.word	0x00010002

08007ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	4613      	mov	r3, r2
 8007af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007af8:	e048      	b.n	8007b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b00:	d044      	beq.n	8007b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b02:	f7fe f9d5 	bl	8005eb0 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d302      	bcc.n	8007b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d139      	bne.n	8007b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	0c1b      	lsrs	r3, r3, #16
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d10d      	bne.n	8007b3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	43da      	mvns	r2, r3
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bf0c      	ite	eq
 8007b34:	2301      	moveq	r3, #1
 8007b36:	2300      	movne	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	e00c      	b.n	8007b58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	43da      	mvns	r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bf0c      	ite	eq
 8007b50:	2301      	moveq	r3, #1
 8007b52:	2300      	movne	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d116      	bne.n	8007b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b78:	f043 0220 	orr.w	r2, r3, #32
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e023      	b.n	8007bd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	0c1b      	lsrs	r3, r3, #16
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d10d      	bne.n	8007bb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	43da      	mvns	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bf0c      	ite	eq
 8007ba8:	2301      	moveq	r3, #1
 8007baa:	2300      	movne	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	461a      	mov	r2, r3
 8007bb0:	e00c      	b.n	8007bcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	43da      	mvns	r2, r3
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bf0c      	ite	eq
 8007bc4:	2301      	moveq	r3, #1
 8007bc6:	2300      	movne	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	461a      	mov	r2, r3
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d093      	beq.n	8007afa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
 8007be8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bea:	e071      	b.n	8007cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bfa:	d123      	bne.n	8007c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c30:	f043 0204 	orr.w	r2, r3, #4
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e067      	b.n	8007d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d041      	beq.n	8007cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c4c:	f7fe f930 	bl	8005eb0 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d302      	bcc.n	8007c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d136      	bne.n	8007cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	0c1b      	lsrs	r3, r3, #16
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d10c      	bne.n	8007c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	43da      	mvns	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	4013      	ands	r3, r2
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	bf14      	ite	ne
 8007c7e:	2301      	movne	r3, #1
 8007c80:	2300      	moveq	r3, #0
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	e00b      	b.n	8007c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	43da      	mvns	r2, r3
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	4013      	ands	r3, r2
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	bf14      	ite	ne
 8007c98:	2301      	movne	r3, #1
 8007c9a:	2300      	moveq	r3, #0
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d016      	beq.n	8007cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	f043 0220 	orr.w	r2, r3, #32
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e021      	b.n	8007d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	0c1b      	lsrs	r3, r3, #16
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d10c      	bne.n	8007cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	43da      	mvns	r2, r3
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	bf14      	ite	ne
 8007cec:	2301      	movne	r3, #1
 8007cee:	2300      	moveq	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	e00b      	b.n	8007d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	43da      	mvns	r2, r3
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bf14      	ite	ne
 8007d06:	2301      	movne	r3, #1
 8007d08:	2300      	moveq	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f47f af6d 	bne.w	8007bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d28:	e034      	b.n	8007d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 f8e3 	bl	8007ef6 <I2C_IsAcknowledgeFailed>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e034      	b.n	8007da4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d40:	d028      	beq.n	8007d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d42:	f7fe f8b5 	bl	8005eb0 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d302      	bcc.n	8007d58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d11d      	bne.n	8007d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d62:	2b80      	cmp	r3, #128	; 0x80
 8007d64:	d016      	beq.n	8007d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d80:	f043 0220 	orr.w	r2, r3, #32
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e007      	b.n	8007da4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9e:	2b80      	cmp	r3, #128	; 0x80
 8007da0:	d1c3      	bne.n	8007d2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007db8:	e034      	b.n	8007e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 f89b 	bl	8007ef6 <I2C_IsAcknowledgeFailed>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e034      	b.n	8007e34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d028      	beq.n	8007e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dd2:	f7fe f86d 	bl	8005eb0 <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d302      	bcc.n	8007de8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d11d      	bne.n	8007e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	f003 0304 	and.w	r3, r3, #4
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d016      	beq.n	8007e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e10:	f043 0220 	orr.w	r2, r3, #32
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e007      	b.n	8007e34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	f003 0304 	and.w	r3, r3, #4
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d1c3      	bne.n	8007dba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e48:	e049      	b.n	8007ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	f003 0310 	and.w	r3, r3, #16
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d119      	bne.n	8007e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0210 	mvn.w	r2, #16
 8007e60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e030      	b.n	8007eee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e8c:	f7fe f810 	bl	8005eb0 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d302      	bcc.n	8007ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d11d      	bne.n	8007ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eac:	2b40      	cmp	r3, #64	; 0x40
 8007eae:	d016      	beq.n	8007ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	f043 0220 	orr.w	r2, r3, #32
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e007      	b.n	8007eee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee8:	2b40      	cmp	r3, #64	; 0x40
 8007eea:	d1ae      	bne.n	8007e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f0c:	d11b      	bne.n	8007f46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	f043 0204 	orr.w	r2, r3, #4
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e000      	b.n	8007f48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e267      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d075      	beq.n	800805e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f72:	4b88      	ldr	r3, [pc, #544]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 030c 	and.w	r3, r3, #12
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d00c      	beq.n	8007f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f7e:	4b85      	ldr	r3, [pc, #532]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f86:	2b08      	cmp	r3, #8
 8007f88:	d112      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f8a:	4b82      	ldr	r3, [pc, #520]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f96:	d10b      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f98:	4b7e      	ldr	r3, [pc, #504]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d05b      	beq.n	800805c <HAL_RCC_OscConfig+0x108>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d157      	bne.n	800805c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e242      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb8:	d106      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x74>
 8007fba:	4b76      	ldr	r3, [pc, #472]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a75      	ldr	r2, [pc, #468]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	e01d      	b.n	8008004 <HAL_RCC_OscConfig+0xb0>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fd0:	d10c      	bne.n	8007fec <HAL_RCC_OscConfig+0x98>
 8007fd2:	4b70      	ldr	r3, [pc, #448]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a6f      	ldr	r2, [pc, #444]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	4b6d      	ldr	r3, [pc, #436]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a6c      	ldr	r2, [pc, #432]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	e00b      	b.n	8008004 <HAL_RCC_OscConfig+0xb0>
 8007fec:	4b69      	ldr	r3, [pc, #420]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a68      	ldr	r2, [pc, #416]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	4b66      	ldr	r3, [pc, #408]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a65      	ldr	r2, [pc, #404]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8007ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d013      	beq.n	8008034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800800c:	f7fd ff50 	bl	8005eb0 <HAL_GetTick>
 8008010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008012:	e008      	b.n	8008026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008014:	f7fd ff4c 	bl	8005eb0 <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	2b64      	cmp	r3, #100	; 0x64
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e207      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008026:	4b5b      	ldr	r3, [pc, #364]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d0f0      	beq.n	8008014 <HAL_RCC_OscConfig+0xc0>
 8008032:	e014      	b.n	800805e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008034:	f7fd ff3c 	bl	8005eb0 <HAL_GetTick>
 8008038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800803a:	e008      	b.n	800804e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800803c:	f7fd ff38 	bl	8005eb0 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b64      	cmp	r3, #100	; 0x64
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e1f3      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800804e:	4b51      	ldr	r3, [pc, #324]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1f0      	bne.n	800803c <HAL_RCC_OscConfig+0xe8>
 800805a:	e000      	b.n	800805e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800805c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b00      	cmp	r3, #0
 8008068:	d063      	beq.n	8008132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800806a:	4b4a      	ldr	r3, [pc, #296]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f003 030c 	and.w	r3, r3, #12
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00b      	beq.n	800808e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008076:	4b47      	ldr	r3, [pc, #284]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800807e:	2b08      	cmp	r3, #8
 8008080:	d11c      	bne.n	80080bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008082:	4b44      	ldr	r3, [pc, #272]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d116      	bne.n	80080bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800808e:	4b41      	ldr	r3, [pc, #260]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d005      	beq.n	80080a6 <HAL_RCC_OscConfig+0x152>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d001      	beq.n	80080a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e1c7      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080a6:	4b3b      	ldr	r3, [pc, #236]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	4937      	ldr	r1, [pc, #220]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080ba:	e03a      	b.n	8008132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d020      	beq.n	8008106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080c4:	4b34      	ldr	r3, [pc, #208]	; (8008198 <HAL_RCC_OscConfig+0x244>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ca:	f7fd fef1 	bl	8005eb0 <HAL_GetTick>
 80080ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080d0:	e008      	b.n	80080e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080d2:	f7fd feed 	bl	8005eb0 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e1a8      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080e4:	4b2b      	ldr	r3, [pc, #172]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0f0      	beq.n	80080d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f0:	4b28      	ldr	r3, [pc, #160]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	4925      	ldr	r1, [pc, #148]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008100:	4313      	orrs	r3, r2
 8008102:	600b      	str	r3, [r1, #0]
 8008104:	e015      	b.n	8008132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008106:	4b24      	ldr	r3, [pc, #144]	; (8008198 <HAL_RCC_OscConfig+0x244>)
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810c:	f7fd fed0 	bl	8005eb0 <HAL_GetTick>
 8008110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008112:	e008      	b.n	8008126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008114:	f7fd fecc 	bl	8005eb0 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d901      	bls.n	8008126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e187      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008126:	4b1b      	ldr	r3, [pc, #108]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1f0      	bne.n	8008114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0308 	and.w	r3, r3, #8
 800813a:	2b00      	cmp	r3, #0
 800813c:	d036      	beq.n	80081ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d016      	beq.n	8008174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008146:	4b15      	ldr	r3, [pc, #84]	; (800819c <HAL_RCC_OscConfig+0x248>)
 8008148:	2201      	movs	r2, #1
 800814a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800814c:	f7fd feb0 	bl	8005eb0 <HAL_GetTick>
 8008150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008152:	e008      	b.n	8008166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008154:	f7fd feac 	bl	8005eb0 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d901      	bls.n	8008166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e167      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008166:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <HAL_RCC_OscConfig+0x240>)
 8008168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d0f0      	beq.n	8008154 <HAL_RCC_OscConfig+0x200>
 8008172:	e01b      	b.n	80081ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008174:	4b09      	ldr	r3, [pc, #36]	; (800819c <HAL_RCC_OscConfig+0x248>)
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800817a:	f7fd fe99 	bl	8005eb0 <HAL_GetTick>
 800817e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008180:	e00e      	b.n	80081a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008182:	f7fd fe95 	bl	8005eb0 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b02      	cmp	r3, #2
 800818e:	d907      	bls.n	80081a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e150      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
 8008194:	40023800 	.word	0x40023800
 8008198:	42470000 	.word	0x42470000
 800819c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081a0:	4b88      	ldr	r3, [pc, #544]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1ea      	bne.n	8008182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8097 	beq.w	80082e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081be:	4b81      	ldr	r3, [pc, #516]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10f      	bne.n	80081ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ca:	2300      	movs	r3, #0
 80081cc:	60bb      	str	r3, [r7, #8]
 80081ce:	4b7d      	ldr	r3, [pc, #500]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	4a7c      	ldr	r2, [pc, #496]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081d8:	6413      	str	r3, [r2, #64]	; 0x40
 80081da:	4b7a      	ldr	r3, [pc, #488]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081e2:	60bb      	str	r3, [r7, #8]
 80081e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081e6:	2301      	movs	r3, #1
 80081e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ea:	4b77      	ldr	r3, [pc, #476]	; (80083c8 <HAL_RCC_OscConfig+0x474>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d118      	bne.n	8008228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081f6:	4b74      	ldr	r3, [pc, #464]	; (80083c8 <HAL_RCC_OscConfig+0x474>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a73      	ldr	r2, [pc, #460]	; (80083c8 <HAL_RCC_OscConfig+0x474>)
 80081fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008202:	f7fd fe55 	bl	8005eb0 <HAL_GetTick>
 8008206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008208:	e008      	b.n	800821c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800820a:	f7fd fe51 	bl	8005eb0 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d901      	bls.n	800821c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e10c      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800821c:	4b6a      	ldr	r3, [pc, #424]	; (80083c8 <HAL_RCC_OscConfig+0x474>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0f0      	beq.n	800820a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d106      	bne.n	800823e <HAL_RCC_OscConfig+0x2ea>
 8008230:	4b64      	ldr	r3, [pc, #400]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008234:	4a63      	ldr	r2, [pc, #396]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008236:	f043 0301 	orr.w	r3, r3, #1
 800823a:	6713      	str	r3, [r2, #112]	; 0x70
 800823c:	e01c      	b.n	8008278 <HAL_RCC_OscConfig+0x324>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b05      	cmp	r3, #5
 8008244:	d10c      	bne.n	8008260 <HAL_RCC_OscConfig+0x30c>
 8008246:	4b5f      	ldr	r3, [pc, #380]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824a:	4a5e      	ldr	r2, [pc, #376]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 800824c:	f043 0304 	orr.w	r3, r3, #4
 8008250:	6713      	str	r3, [r2, #112]	; 0x70
 8008252:	4b5c      	ldr	r3, [pc, #368]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008256:	4a5b      	ldr	r2, [pc, #364]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008258:	f043 0301 	orr.w	r3, r3, #1
 800825c:	6713      	str	r3, [r2, #112]	; 0x70
 800825e:	e00b      	b.n	8008278 <HAL_RCC_OscConfig+0x324>
 8008260:	4b58      	ldr	r3, [pc, #352]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008264:	4a57      	ldr	r2, [pc, #348]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008266:	f023 0301 	bic.w	r3, r3, #1
 800826a:	6713      	str	r3, [r2, #112]	; 0x70
 800826c:	4b55      	ldr	r3, [pc, #340]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008270:	4a54      	ldr	r2, [pc, #336]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008272:	f023 0304 	bic.w	r3, r3, #4
 8008276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d015      	beq.n	80082ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008280:	f7fd fe16 	bl	8005eb0 <HAL_GetTick>
 8008284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008286:	e00a      	b.n	800829e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008288:	f7fd fe12 	bl	8005eb0 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	f241 3288 	movw	r2, #5000	; 0x1388
 8008296:	4293      	cmp	r3, r2
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e0cb      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800829e:	4b49      	ldr	r3, [pc, #292]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0ee      	beq.n	8008288 <HAL_RCC_OscConfig+0x334>
 80082aa:	e014      	b.n	80082d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082ac:	f7fd fe00 	bl	8005eb0 <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082b2:	e00a      	b.n	80082ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082b4:	f7fd fdfc 	bl	8005eb0 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	f241 3288 	movw	r2, #5000	; 0x1388
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d901      	bls.n	80082ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e0b5      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ca:	4b3e      	ldr	r3, [pc, #248]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1ee      	bne.n	80082b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d105      	bne.n	80082e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082dc:	4b39      	ldr	r3, [pc, #228]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e0:	4a38      	ldr	r2, [pc, #224]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 80a1 	beq.w	8008434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082f2:	4b34      	ldr	r3, [pc, #208]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f003 030c 	and.w	r3, r3, #12
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	d05c      	beq.n	80083b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	2b02      	cmp	r3, #2
 8008304:	d141      	bne.n	800838a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008306:	4b31      	ldr	r3, [pc, #196]	; (80083cc <HAL_RCC_OscConfig+0x478>)
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800830c:	f7fd fdd0 	bl	8005eb0 <HAL_GetTick>
 8008310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008312:	e008      	b.n	8008326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008314:	f7fd fdcc 	bl	8005eb0 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e087      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008326:	4b27      	ldr	r3, [pc, #156]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1f0      	bne.n	8008314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69da      	ldr	r2, [r3, #28]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	019b      	lsls	r3, r3, #6
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	3b01      	subs	r3, #1
 800834c:	041b      	lsls	r3, r3, #16
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	061b      	lsls	r3, r3, #24
 8008356:	491b      	ldr	r1, [pc, #108]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 8008358:	4313      	orrs	r3, r2
 800835a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800835c:	4b1b      	ldr	r3, [pc, #108]	; (80083cc <HAL_RCC_OscConfig+0x478>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008362:	f7fd fda5 	bl	8005eb0 <HAL_GetTick>
 8008366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008368:	e008      	b.n	800837c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800836a:	f7fd fda1 	bl	8005eb0 <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d901      	bls.n	800837c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e05c      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800837c:	4b11      	ldr	r3, [pc, #68]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d0f0      	beq.n	800836a <HAL_RCC_OscConfig+0x416>
 8008388:	e054      	b.n	8008434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800838a:	4b10      	ldr	r3, [pc, #64]	; (80083cc <HAL_RCC_OscConfig+0x478>)
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008390:	f7fd fd8e 	bl	8005eb0 <HAL_GetTick>
 8008394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008396:	e008      	b.n	80083aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008398:	f7fd fd8a 	bl	8005eb0 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d901      	bls.n	80083aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e045      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083aa:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <HAL_RCC_OscConfig+0x470>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1f0      	bne.n	8008398 <HAL_RCC_OscConfig+0x444>
 80083b6:	e03d      	b.n	8008434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d107      	bne.n	80083d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e038      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
 80083c4:	40023800 	.word	0x40023800
 80083c8:	40007000 	.word	0x40007000
 80083cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083d0:	4b1b      	ldr	r3, [pc, #108]	; (8008440 <HAL_RCC_OscConfig+0x4ec>)
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d028      	beq.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d121      	bne.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d11a      	bne.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008400:	4013      	ands	r3, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008408:	4293      	cmp	r3, r2
 800840a:	d111      	bne.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	085b      	lsrs	r3, r3, #1
 8008418:	3b01      	subs	r3, #1
 800841a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800841c:	429a      	cmp	r2, r3
 800841e:	d107      	bne.n	8008430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800842c:	429a      	cmp	r2, r3
 800842e:	d001      	beq.n	8008434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e000      	b.n	8008436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	40023800 	.word	0x40023800

08008444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e0cc      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008458:	4b68      	ldr	r3, [pc, #416]	; (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0307 	and.w	r3, r3, #7
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	429a      	cmp	r2, r3
 8008464:	d90c      	bls.n	8008480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008466:	4b65      	ldr	r3, [pc, #404]	; (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800846e:	4b63      	ldr	r3, [pc, #396]	; (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	429a      	cmp	r2, r3
 800847a:	d001      	beq.n	8008480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e0b8      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d020      	beq.n	80084ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008498:	4b59      	ldr	r3, [pc, #356]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	4a58      	ldr	r2, [pc, #352]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 800849e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0308 	and.w	r3, r3, #8
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084b0:	4b53      	ldr	r3, [pc, #332]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	4a52      	ldr	r2, [pc, #328]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084bc:	4b50      	ldr	r3, [pc, #320]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	494d      	ldr	r1, [pc, #308]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d044      	beq.n	8008564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d107      	bne.n	80084f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084e2:	4b47      	ldr	r3, [pc, #284]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d119      	bne.n	8008522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e07f      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d003      	beq.n	8008502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d107      	bne.n	8008512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008502:	4b3f      	ldr	r3, [pc, #252]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e06f      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008512:	4b3b      	ldr	r3, [pc, #236]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e067      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008522:	4b37      	ldr	r3, [pc, #220]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f023 0203 	bic.w	r2, r3, #3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	4934      	ldr	r1, [pc, #208]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008530:	4313      	orrs	r3, r2
 8008532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008534:	f7fd fcbc 	bl	8005eb0 <HAL_GetTick>
 8008538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800853a:	e00a      	b.n	8008552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800853c:	f7fd fcb8 	bl	8005eb0 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	f241 3288 	movw	r2, #5000	; 0x1388
 800854a:	4293      	cmp	r3, r2
 800854c:	d901      	bls.n	8008552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e04f      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008552:	4b2b      	ldr	r3, [pc, #172]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f003 020c 	and.w	r2, r3, #12
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	429a      	cmp	r2, r3
 8008562:	d1eb      	bne.n	800853c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008564:	4b25      	ldr	r3, [pc, #148]	; (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0307 	and.w	r3, r3, #7
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	429a      	cmp	r2, r3
 8008570:	d20c      	bcs.n	800858c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008572:	4b22      	ldr	r3, [pc, #136]	; (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	b2d2      	uxtb	r2, r2
 8008578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800857a:	4b20      	ldr	r3, [pc, #128]	; (80085fc <HAL_RCC_ClockConfig+0x1b8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0307 	and.w	r3, r3, #7
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	429a      	cmp	r2, r3
 8008586:	d001      	beq.n	800858c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e032      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d008      	beq.n	80085aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008598:	4b19      	ldr	r3, [pc, #100]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	4916      	ldr	r1, [pc, #88]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d009      	beq.n	80085ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085b6:	4b12      	ldr	r3, [pc, #72]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	490e      	ldr	r1, [pc, #56]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085ca:	f000 f821 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 80085ce:	4602      	mov	r2, r0
 80085d0:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <HAL_RCC_ClockConfig+0x1bc>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	091b      	lsrs	r3, r3, #4
 80085d6:	f003 030f 	and.w	r3, r3, #15
 80085da:	490a      	ldr	r1, [pc, #40]	; (8008604 <HAL_RCC_ClockConfig+0x1c0>)
 80085dc:	5ccb      	ldrb	r3, [r1, r3]
 80085de:	fa22 f303 	lsr.w	r3, r2, r3
 80085e2:	4a09      	ldr	r2, [pc, #36]	; (8008608 <HAL_RCC_ClockConfig+0x1c4>)
 80085e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <HAL_RCC_ClockConfig+0x1c8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fd fc1c 	bl	8005e28 <HAL_InitTick>

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	40023c00 	.word	0x40023c00
 8008600:	40023800 	.word	0x40023800
 8008604:	0800fdd4 	.word	0x0800fdd4
 8008608:	20000010 	.word	0x20000010
 800860c:	20000014 	.word	0x20000014

08008610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008614:	b094      	sub	sp, #80	; 0x50
 8008616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	647b      	str	r3, [r7, #68]	; 0x44
 800861c:	2300      	movs	r3, #0
 800861e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008620:	2300      	movs	r3, #0
 8008622:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008628:	4b79      	ldr	r3, [pc, #484]	; (8008810 <HAL_RCC_GetSysClockFreq+0x200>)
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f003 030c 	and.w	r3, r3, #12
 8008630:	2b08      	cmp	r3, #8
 8008632:	d00d      	beq.n	8008650 <HAL_RCC_GetSysClockFreq+0x40>
 8008634:	2b08      	cmp	r3, #8
 8008636:	f200 80e1 	bhi.w	80087fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <HAL_RCC_GetSysClockFreq+0x34>
 800863e:	2b04      	cmp	r3, #4
 8008640:	d003      	beq.n	800864a <HAL_RCC_GetSysClockFreq+0x3a>
 8008642:	e0db      	b.n	80087fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008644:	4b73      	ldr	r3, [pc, #460]	; (8008814 <HAL_RCC_GetSysClockFreq+0x204>)
 8008646:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008648:	e0db      	b.n	8008802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800864a:	4b73      	ldr	r3, [pc, #460]	; (8008818 <HAL_RCC_GetSysClockFreq+0x208>)
 800864c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800864e:	e0d8      	b.n	8008802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008650:	4b6f      	ldr	r3, [pc, #444]	; (8008810 <HAL_RCC_GetSysClockFreq+0x200>)
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008658:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800865a:	4b6d      	ldr	r3, [pc, #436]	; (8008810 <HAL_RCC_GetSysClockFreq+0x200>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d063      	beq.n	800872e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008666:	4b6a      	ldr	r3, [pc, #424]	; (8008810 <HAL_RCC_GetSysClockFreq+0x200>)
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	099b      	lsrs	r3, r3, #6
 800866c:	2200      	movs	r2, #0
 800866e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008670:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008678:	633b      	str	r3, [r7, #48]	; 0x30
 800867a:	2300      	movs	r3, #0
 800867c:	637b      	str	r3, [r7, #52]	; 0x34
 800867e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008682:	4622      	mov	r2, r4
 8008684:	462b      	mov	r3, r5
 8008686:	f04f 0000 	mov.w	r0, #0
 800868a:	f04f 0100 	mov.w	r1, #0
 800868e:	0159      	lsls	r1, r3, #5
 8008690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008694:	0150      	lsls	r0, r2, #5
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4621      	mov	r1, r4
 800869c:	1a51      	subs	r1, r2, r1
 800869e:	6139      	str	r1, [r7, #16]
 80086a0:	4629      	mov	r1, r5
 80086a2:	eb63 0301 	sbc.w	r3, r3, r1
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	f04f 0300 	mov.w	r3, #0
 80086b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086b4:	4659      	mov	r1, fp
 80086b6:	018b      	lsls	r3, r1, #6
 80086b8:	4651      	mov	r1, sl
 80086ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80086be:	4651      	mov	r1, sl
 80086c0:	018a      	lsls	r2, r1, #6
 80086c2:	4651      	mov	r1, sl
 80086c4:	ebb2 0801 	subs.w	r8, r2, r1
 80086c8:	4659      	mov	r1, fp
 80086ca:	eb63 0901 	sbc.w	r9, r3, r1
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	f04f 0300 	mov.w	r3, #0
 80086d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086e2:	4690      	mov	r8, r2
 80086e4:	4699      	mov	r9, r3
 80086e6:	4623      	mov	r3, r4
 80086e8:	eb18 0303 	adds.w	r3, r8, r3
 80086ec:	60bb      	str	r3, [r7, #8]
 80086ee:	462b      	mov	r3, r5
 80086f0:	eb49 0303 	adc.w	r3, r9, r3
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	f04f 0200 	mov.w	r2, #0
 80086fa:	f04f 0300 	mov.w	r3, #0
 80086fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008702:	4629      	mov	r1, r5
 8008704:	024b      	lsls	r3, r1, #9
 8008706:	4621      	mov	r1, r4
 8008708:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800870c:	4621      	mov	r1, r4
 800870e:	024a      	lsls	r2, r1, #9
 8008710:	4610      	mov	r0, r2
 8008712:	4619      	mov	r1, r3
 8008714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008716:	2200      	movs	r2, #0
 8008718:	62bb      	str	r3, [r7, #40]	; 0x28
 800871a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800871c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008720:	f7f8 faaa 	bl	8000c78 <__aeabi_uldivmod>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4613      	mov	r3, r2
 800872a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800872c:	e058      	b.n	80087e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800872e:	4b38      	ldr	r3, [pc, #224]	; (8008810 <HAL_RCC_GetSysClockFreq+0x200>)
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	099b      	lsrs	r3, r3, #6
 8008734:	2200      	movs	r2, #0
 8008736:	4618      	mov	r0, r3
 8008738:	4611      	mov	r1, r2
 800873a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800873e:	623b      	str	r3, [r7, #32]
 8008740:	2300      	movs	r3, #0
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
 8008744:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008748:	4642      	mov	r2, r8
 800874a:	464b      	mov	r3, r9
 800874c:	f04f 0000 	mov.w	r0, #0
 8008750:	f04f 0100 	mov.w	r1, #0
 8008754:	0159      	lsls	r1, r3, #5
 8008756:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800875a:	0150      	lsls	r0, r2, #5
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4641      	mov	r1, r8
 8008762:	ebb2 0a01 	subs.w	sl, r2, r1
 8008766:	4649      	mov	r1, r9
 8008768:	eb63 0b01 	sbc.w	fp, r3, r1
 800876c:	f04f 0200 	mov.w	r2, #0
 8008770:	f04f 0300 	mov.w	r3, #0
 8008774:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008778:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800877c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008780:	ebb2 040a 	subs.w	r4, r2, sl
 8008784:	eb63 050b 	sbc.w	r5, r3, fp
 8008788:	f04f 0200 	mov.w	r2, #0
 800878c:	f04f 0300 	mov.w	r3, #0
 8008790:	00eb      	lsls	r3, r5, #3
 8008792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008796:	00e2      	lsls	r2, r4, #3
 8008798:	4614      	mov	r4, r2
 800879a:	461d      	mov	r5, r3
 800879c:	4643      	mov	r3, r8
 800879e:	18e3      	adds	r3, r4, r3
 80087a0:	603b      	str	r3, [r7, #0]
 80087a2:	464b      	mov	r3, r9
 80087a4:	eb45 0303 	adc.w	r3, r5, r3
 80087a8:	607b      	str	r3, [r7, #4]
 80087aa:	f04f 0200 	mov.w	r2, #0
 80087ae:	f04f 0300 	mov.w	r3, #0
 80087b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80087b6:	4629      	mov	r1, r5
 80087b8:	028b      	lsls	r3, r1, #10
 80087ba:	4621      	mov	r1, r4
 80087bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087c0:	4621      	mov	r1, r4
 80087c2:	028a      	lsls	r2, r1, #10
 80087c4:	4610      	mov	r0, r2
 80087c6:	4619      	mov	r1, r3
 80087c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ca:	2200      	movs	r2, #0
 80087cc:	61bb      	str	r3, [r7, #24]
 80087ce:	61fa      	str	r2, [r7, #28]
 80087d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087d4:	f7f8 fa50 	bl	8000c78 <__aeabi_uldivmod>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4613      	mov	r3, r2
 80087de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087e0:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <HAL_RCC_GetSysClockFreq+0x200>)
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	0c1b      	lsrs	r3, r3, #16
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	3301      	adds	r3, #1
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80087f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80087fa:	e002      	b.n	8008802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <HAL_RCC_GetSysClockFreq+0x204>)
 80087fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008804:	4618      	mov	r0, r3
 8008806:	3750      	adds	r7, #80	; 0x50
 8008808:	46bd      	mov	sp, r7
 800880a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800880e:	bf00      	nop
 8008810:	40023800 	.word	0x40023800
 8008814:	00f42400 	.word	0x00f42400
 8008818:	007a1200 	.word	0x007a1200

0800881c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008820:	4b03      	ldr	r3, [pc, #12]	; (8008830 <HAL_RCC_GetHCLKFreq+0x14>)
 8008822:	681b      	ldr	r3, [r3, #0]
}
 8008824:	4618      	mov	r0, r3
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	20000010 	.word	0x20000010

08008834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008838:	f7ff fff0 	bl	800881c <HAL_RCC_GetHCLKFreq>
 800883c:	4602      	mov	r2, r0
 800883e:	4b05      	ldr	r3, [pc, #20]	; (8008854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	0a9b      	lsrs	r3, r3, #10
 8008844:	f003 0307 	and.w	r3, r3, #7
 8008848:	4903      	ldr	r1, [pc, #12]	; (8008858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800884a:	5ccb      	ldrb	r3, [r1, r3]
 800884c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008850:	4618      	mov	r0, r3
 8008852:	bd80      	pop	{r7, pc}
 8008854:	40023800 	.word	0x40023800
 8008858:	0800fde4 	.word	0x0800fde4

0800885c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008860:	f7ff ffdc 	bl	800881c <HAL_RCC_GetHCLKFreq>
 8008864:	4602      	mov	r2, r0
 8008866:	4b05      	ldr	r3, [pc, #20]	; (800887c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	0b5b      	lsrs	r3, r3, #13
 800886c:	f003 0307 	and.w	r3, r3, #7
 8008870:	4903      	ldr	r1, [pc, #12]	; (8008880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008872:	5ccb      	ldrb	r3, [r1, r3]
 8008874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008878:	4618      	mov	r0, r3
 800887a:	bd80      	pop	{r7, pc}
 800887c:	40023800 	.word	0x40023800
 8008880:	0800fde4 	.word	0x0800fde4

08008884 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e041      	b.n	800891a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d106      	bne.n	80088b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7fa fac0 	bl	8002e30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3304      	adds	r3, #4
 80088c0:	4619      	mov	r1, r3
 80088c2:	4610      	mov	r0, r2
 80088c4:	f000 fc0e 	bl	80090e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d109      	bne.n	8008948 <HAL_TIM_PWM_Start+0x24>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b01      	cmp	r3, #1
 800893e:	bf14      	ite	ne
 8008940:	2301      	movne	r3, #1
 8008942:	2300      	moveq	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	e022      	b.n	800898e <HAL_TIM_PWM_Start+0x6a>
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b04      	cmp	r3, #4
 800894c:	d109      	bne.n	8008962 <HAL_TIM_PWM_Start+0x3e>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b01      	cmp	r3, #1
 8008958:	bf14      	ite	ne
 800895a:	2301      	movne	r3, #1
 800895c:	2300      	moveq	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	e015      	b.n	800898e <HAL_TIM_PWM_Start+0x6a>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b08      	cmp	r3, #8
 8008966:	d109      	bne.n	800897c <HAL_TIM_PWM_Start+0x58>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b01      	cmp	r3, #1
 8008972:	bf14      	ite	ne
 8008974:	2301      	movne	r3, #1
 8008976:	2300      	moveq	r3, #0
 8008978:	b2db      	uxtb	r3, r3
 800897a:	e008      	b.n	800898e <HAL_TIM_PWM_Start+0x6a>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e07c      	b.n	8008a90 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d104      	bne.n	80089a6 <HAL_TIM_PWM_Start+0x82>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089a4:	e013      	b.n	80089ce <HAL_TIM_PWM_Start+0xaa>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	d104      	bne.n	80089b6 <HAL_TIM_PWM_Start+0x92>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089b4:	e00b      	b.n	80089ce <HAL_TIM_PWM_Start+0xaa>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d104      	bne.n	80089c6 <HAL_TIM_PWM_Start+0xa2>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2202      	movs	r2, #2
 80089c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089c4:	e003      	b.n	80089ce <HAL_TIM_PWM_Start+0xaa>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2202      	movs	r2, #2
 80089ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2201      	movs	r2, #1
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fde0 	bl	800959c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a2d      	ldr	r2, [pc, #180]	; (8008a98 <HAL_TIM_PWM_Start+0x174>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d004      	beq.n	80089f0 <HAL_TIM_PWM_Start+0xcc>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a2c      	ldr	r2, [pc, #176]	; (8008a9c <HAL_TIM_PWM_Start+0x178>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d101      	bne.n	80089f4 <HAL_TIM_PWM_Start+0xd0>
 80089f0:	2301      	movs	r3, #1
 80089f2:	e000      	b.n	80089f6 <HAL_TIM_PWM_Start+0xd2>
 80089f4:	2300      	movs	r3, #0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d007      	beq.n	8008a0a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a22      	ldr	r2, [pc, #136]	; (8008a98 <HAL_TIM_PWM_Start+0x174>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d022      	beq.n	8008a5a <HAL_TIM_PWM_Start+0x136>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a1c:	d01d      	beq.n	8008a5a <HAL_TIM_PWM_Start+0x136>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a1f      	ldr	r2, [pc, #124]	; (8008aa0 <HAL_TIM_PWM_Start+0x17c>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d018      	beq.n	8008a5a <HAL_TIM_PWM_Start+0x136>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a1d      	ldr	r2, [pc, #116]	; (8008aa4 <HAL_TIM_PWM_Start+0x180>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d013      	beq.n	8008a5a <HAL_TIM_PWM_Start+0x136>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a1c      	ldr	r2, [pc, #112]	; (8008aa8 <HAL_TIM_PWM_Start+0x184>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d00e      	beq.n	8008a5a <HAL_TIM_PWM_Start+0x136>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a16      	ldr	r2, [pc, #88]	; (8008a9c <HAL_TIM_PWM_Start+0x178>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d009      	beq.n	8008a5a <HAL_TIM_PWM_Start+0x136>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a18      	ldr	r2, [pc, #96]	; (8008aac <HAL_TIM_PWM_Start+0x188>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d004      	beq.n	8008a5a <HAL_TIM_PWM_Start+0x136>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a16      	ldr	r2, [pc, #88]	; (8008ab0 <HAL_TIM_PWM_Start+0x18c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d111      	bne.n	8008a7e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f003 0307 	and.w	r3, r3, #7
 8008a64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2b06      	cmp	r3, #6
 8008a6a:	d010      	beq.n	8008a8e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0201 	orr.w	r2, r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7c:	e007      	b.n	8008a8e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f042 0201 	orr.w	r2, r2, #1
 8008a8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	40010000 	.word	0x40010000
 8008a9c:	40010400 	.word	0x40010400
 8008aa0:	40000400 	.word	0x40000400
 8008aa4:	40000800 	.word	0x40000800
 8008aa8:	40000c00 	.word	0x40000c00
 8008aac:	40014000 	.word	0x40014000
 8008ab0:	40001800 	.word	0x40001800

08008ab4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e097      	b.n	8008bf8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d106      	bne.n	8008ae2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7fa f9cf 	bl	8002e80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6812      	ldr	r2, [r2, #0]
 8008af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008af8:	f023 0307 	bic.w	r3, r3, #7
 8008afc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3304      	adds	r3, #4
 8008b06:	4619      	mov	r1, r3
 8008b08:	4610      	mov	r0, r2
 8008b0a:	f000 faeb 	bl	80090e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b36:	f023 0303 	bic.w	r3, r3, #3
 8008b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	021b      	lsls	r3, r3, #8
 8008b46:	4313      	orrs	r3, r2
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008b54:	f023 030c 	bic.w	r3, r3, #12
 8008b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	021b      	lsls	r3, r3, #8
 8008b70:	4313      	orrs	r3, r2
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	011a      	lsls	r2, r3, #4
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	031b      	lsls	r3, r3, #12
 8008b84:	4313      	orrs	r3, r2
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d110      	bne.n	8008c52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d102      	bne.n	8008c3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c36:	7b7b      	ldrb	r3, [r7, #13]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d001      	beq.n	8008c40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e069      	b.n	8008d14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c50:	e031      	b.n	8008cb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d110      	bne.n	8008c7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d102      	bne.n	8008c64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c5e:	7b3b      	ldrb	r3, [r7, #12]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d001      	beq.n	8008c68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e055      	b.n	8008d14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c78:	e01d      	b.n	8008cb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d108      	bne.n	8008c92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d105      	bne.n	8008c92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c86:	7b7b      	ldrb	r3, [r7, #13]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d102      	bne.n	8008c92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c8c:	7b3b      	ldrb	r3, [r7, #12]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d001      	beq.n	8008c96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e03e      	b.n	8008d14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2202      	movs	r2, #2
 8008c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2202      	movs	r2, #2
 8008caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <HAL_TIM_Encoder_Start+0xc4>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d008      	beq.n	8008cd4 <HAL_TIM_Encoder_Start+0xd4>
 8008cc2:	e00f      	b.n	8008ce4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	2100      	movs	r1, #0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 fc65 	bl	800959c <TIM_CCxChannelCmd>
      break;
 8008cd2:	e016      	b.n	8008d02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	2104      	movs	r1, #4
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 fc5d 	bl	800959c <TIM_CCxChannelCmd>
      break;
 8008ce2:	e00e      	b.n	8008d02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 fc55 	bl	800959c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	2104      	movs	r1, #4
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 fc4e 	bl	800959c <TIM_CCxChannelCmd>
      break;
 8008d00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f042 0201 	orr.w	r2, r2, #1
 8008d10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d020      	beq.n	8008d80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d01b      	beq.n	8008d80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f06f 0202 	mvn.w	r2, #2
 8008d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d003      	beq.n	8008d6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f99e 	bl	80090a8 <HAL_TIM_IC_CaptureCallback>
 8008d6c:	e005      	b.n	8008d7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f990 	bl	8009094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f9a1 	bl	80090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d020      	beq.n	8008dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f003 0304 	and.w	r3, r3, #4
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01b      	beq.n	8008dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f06f 0204 	mvn.w	r2, #4
 8008d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2202      	movs	r2, #2
 8008da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f978 	bl	80090a8 <HAL_TIM_IC_CaptureCallback>
 8008db8:	e005      	b.n	8008dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f96a 	bl	8009094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f97b 	bl	80090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	f003 0308 	and.w	r3, r3, #8
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d020      	beq.n	8008e18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f003 0308 	and.w	r3, r3, #8
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d01b      	beq.n	8008e18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f06f 0208 	mvn.w	r2, #8
 8008de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2204      	movs	r2, #4
 8008dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	f003 0303 	and.w	r3, r3, #3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d003      	beq.n	8008e06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f952 	bl	80090a8 <HAL_TIM_IC_CaptureCallback>
 8008e04:	e005      	b.n	8008e12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f944 	bl	8009094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f955 	bl	80090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f003 0310 	and.w	r3, r3, #16
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d020      	beq.n	8008e64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f003 0310 	and.w	r3, r3, #16
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01b      	beq.n	8008e64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f06f 0210 	mvn.w	r2, #16
 8008e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2208      	movs	r2, #8
 8008e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f92c 	bl	80090a8 <HAL_TIM_IC_CaptureCallback>
 8008e50:	e005      	b.n	8008e5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f91e 	bl	8009094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f92f 	bl	80090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00c      	beq.n	8008e88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d007      	beq.n	8008e88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f06f 0201 	mvn.w	r2, #1
 8008e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f8fc 	bl	8009080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00c      	beq.n	8008eac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d007      	beq.n	8008eac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fc76 	bl	8009798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00c      	beq.n	8008ed0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d007      	beq.n	8008ed0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f900 	bl	80090d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f003 0320 	and.w	r3, r3, #32
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00c      	beq.n	8008ef4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f003 0320 	and.w	r3, r3, #32
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d007      	beq.n	8008ef4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f06f 0220 	mvn.w	r2, #32
 8008eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fc48 	bl	8009784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d101      	bne.n	8008f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f16:	2302      	movs	r3, #2
 8008f18:	e0ae      	b.n	8009078 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b0c      	cmp	r3, #12
 8008f26:	f200 809f 	bhi.w	8009068 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f2a:	a201      	add	r2, pc, #4	; (adr r2, 8008f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f30:	08008f65 	.word	0x08008f65
 8008f34:	08009069 	.word	0x08009069
 8008f38:	08009069 	.word	0x08009069
 8008f3c:	08009069 	.word	0x08009069
 8008f40:	08008fa5 	.word	0x08008fa5
 8008f44:	08009069 	.word	0x08009069
 8008f48:	08009069 	.word	0x08009069
 8008f4c:	08009069 	.word	0x08009069
 8008f50:	08008fe7 	.word	0x08008fe7
 8008f54:	08009069 	.word	0x08009069
 8008f58:	08009069 	.word	0x08009069
 8008f5c:	08009069 	.word	0x08009069
 8008f60:	08009027 	.word	0x08009027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68b9      	ldr	r1, [r7, #8]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 f966 	bl	800923c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699a      	ldr	r2, [r3, #24]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0208 	orr.w	r2, r2, #8
 8008f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	699a      	ldr	r2, [r3, #24]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0204 	bic.w	r2, r2, #4
 8008f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6999      	ldr	r1, [r3, #24]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	691a      	ldr	r2, [r3, #16]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	619a      	str	r2, [r3, #24]
      break;
 8008fa2:	e064      	b.n	800906e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68b9      	ldr	r1, [r7, #8]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f9b6 	bl	800931c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	699a      	ldr	r2, [r3, #24]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	699a      	ldr	r2, [r3, #24]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6999      	ldr	r1, [r3, #24]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	021a      	lsls	r2, r3, #8
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	619a      	str	r2, [r3, #24]
      break;
 8008fe4:	e043      	b.n	800906e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fa0b 	bl	8009408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	69da      	ldr	r2, [r3, #28]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 0208 	orr.w	r2, r2, #8
 8009000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69da      	ldr	r2, [r3, #28]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0204 	bic.w	r2, r2, #4
 8009010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	69d9      	ldr	r1, [r3, #28]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	691a      	ldr	r2, [r3, #16]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	61da      	str	r2, [r3, #28]
      break;
 8009024:	e023      	b.n	800906e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68b9      	ldr	r1, [r7, #8]
 800902c:	4618      	mov	r0, r3
 800902e:	f000 fa5f 	bl	80094f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	69da      	ldr	r2, [r3, #28]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	69da      	ldr	r2, [r3, #28]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69d9      	ldr	r1, [r3, #28]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	021a      	lsls	r2, r3, #8
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	61da      	str	r2, [r3, #28]
      break;
 8009066:	e002      	b.n	800906e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	75fb      	strb	r3, [r7, #23]
      break;
 800906c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009076:	7dfb      	ldrb	r3, [r7, #23]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a46      	ldr	r2, [pc, #280]	; (8009210 <TIM_Base_SetConfig+0x12c>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d013      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009102:	d00f      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a43      	ldr	r2, [pc, #268]	; (8009214 <TIM_Base_SetConfig+0x130>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d00b      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a42      	ldr	r2, [pc, #264]	; (8009218 <TIM_Base_SetConfig+0x134>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d007      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a41      	ldr	r2, [pc, #260]	; (800921c <TIM_Base_SetConfig+0x138>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d003      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a40      	ldr	r2, [pc, #256]	; (8009220 <TIM_Base_SetConfig+0x13c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d108      	bne.n	8009136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a35      	ldr	r2, [pc, #212]	; (8009210 <TIM_Base_SetConfig+0x12c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d02b      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009144:	d027      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a32      	ldr	r2, [pc, #200]	; (8009214 <TIM_Base_SetConfig+0x130>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d023      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a31      	ldr	r2, [pc, #196]	; (8009218 <TIM_Base_SetConfig+0x134>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d01f      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a30      	ldr	r2, [pc, #192]	; (800921c <TIM_Base_SetConfig+0x138>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d01b      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a2f      	ldr	r2, [pc, #188]	; (8009220 <TIM_Base_SetConfig+0x13c>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d017      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a2e      	ldr	r2, [pc, #184]	; (8009224 <TIM_Base_SetConfig+0x140>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d013      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a2d      	ldr	r2, [pc, #180]	; (8009228 <TIM_Base_SetConfig+0x144>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00f      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a2c      	ldr	r2, [pc, #176]	; (800922c <TIM_Base_SetConfig+0x148>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d00b      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a2b      	ldr	r2, [pc, #172]	; (8009230 <TIM_Base_SetConfig+0x14c>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d007      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a2a      	ldr	r2, [pc, #168]	; (8009234 <TIM_Base_SetConfig+0x150>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d003      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a29      	ldr	r2, [pc, #164]	; (8009238 <TIM_Base_SetConfig+0x154>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d108      	bne.n	80091a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800919c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a10      	ldr	r2, [pc, #64]	; (8009210 <TIM_Base_SetConfig+0x12c>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d003      	beq.n	80091dc <TIM_Base_SetConfig+0xf8>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a12      	ldr	r2, [pc, #72]	; (8009220 <TIM_Base_SetConfig+0x13c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d103      	bne.n	80091e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	691a      	ldr	r2, [r3, #16]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d105      	bne.n	8009202 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	f023 0201 	bic.w	r2, r3, #1
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	611a      	str	r2, [r3, #16]
  }
}
 8009202:	bf00      	nop
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	40010000 	.word	0x40010000
 8009214:	40000400 	.word	0x40000400
 8009218:	40000800 	.word	0x40000800
 800921c:	40000c00 	.word	0x40000c00
 8009220:	40010400 	.word	0x40010400
 8009224:	40014000 	.word	0x40014000
 8009228:	40014400 	.word	0x40014400
 800922c:	40014800 	.word	0x40014800
 8009230:	40001800 	.word	0x40001800
 8009234:	40001c00 	.word	0x40001c00
 8009238:	40002000 	.word	0x40002000

0800923c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	f023 0201 	bic.w	r2, r3, #1
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800926a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f023 0303 	bic.w	r3, r3, #3
 8009272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	4313      	orrs	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f023 0302 	bic.w	r3, r3, #2
 8009284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	4313      	orrs	r3, r2
 800928e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a20      	ldr	r2, [pc, #128]	; (8009314 <TIM_OC1_SetConfig+0xd8>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d003      	beq.n	80092a0 <TIM_OC1_SetConfig+0x64>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a1f      	ldr	r2, [pc, #124]	; (8009318 <TIM_OC1_SetConfig+0xdc>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d10c      	bne.n	80092ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f023 0308 	bic.w	r3, r3, #8
 80092a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f023 0304 	bic.w	r3, r3, #4
 80092b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a15      	ldr	r2, [pc, #84]	; (8009314 <TIM_OC1_SetConfig+0xd8>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d003      	beq.n	80092ca <TIM_OC1_SetConfig+0x8e>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a14      	ldr	r2, [pc, #80]	; (8009318 <TIM_OC1_SetConfig+0xdc>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d111      	bne.n	80092ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	621a      	str	r2, [r3, #32]
}
 8009308:	bf00      	nop
 800930a:	371c      	adds	r7, #28
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	40010000 	.word	0x40010000
 8009318:	40010400 	.word	0x40010400

0800931c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	f023 0210 	bic.w	r2, r3, #16
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800934a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	021b      	lsls	r3, r3, #8
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	4313      	orrs	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f023 0320 	bic.w	r3, r3, #32
 8009366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	011b      	lsls	r3, r3, #4
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4313      	orrs	r3, r2
 8009372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a22      	ldr	r2, [pc, #136]	; (8009400 <TIM_OC2_SetConfig+0xe4>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d003      	beq.n	8009384 <TIM_OC2_SetConfig+0x68>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a21      	ldr	r2, [pc, #132]	; (8009404 <TIM_OC2_SetConfig+0xe8>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d10d      	bne.n	80093a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800938a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	4313      	orrs	r3, r2
 8009396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800939e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a17      	ldr	r2, [pc, #92]	; (8009400 <TIM_OC2_SetConfig+0xe4>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d003      	beq.n	80093b0 <TIM_OC2_SetConfig+0x94>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a16      	ldr	r2, [pc, #88]	; (8009404 <TIM_OC2_SetConfig+0xe8>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d113      	bne.n	80093d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	621a      	str	r2, [r3, #32]
}
 80093f2:	bf00      	nop
 80093f4:	371c      	adds	r7, #28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	40010000 	.word	0x40010000
 8009404:	40010400 	.word	0x40010400

08009408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f023 0303 	bic.w	r3, r3, #3
 800943e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	4313      	orrs	r3, r2
 8009448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a21      	ldr	r2, [pc, #132]	; (80094e8 <TIM_OC3_SetConfig+0xe0>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d003      	beq.n	800946e <TIM_OC3_SetConfig+0x66>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a20      	ldr	r2, [pc, #128]	; (80094ec <TIM_OC3_SetConfig+0xe4>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d10d      	bne.n	800948a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	021b      	lsls	r3, r3, #8
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	4313      	orrs	r3, r2
 8009480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a16      	ldr	r2, [pc, #88]	; (80094e8 <TIM_OC3_SetConfig+0xe0>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d003      	beq.n	800949a <TIM_OC3_SetConfig+0x92>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a15      	ldr	r2, [pc, #84]	; (80094ec <TIM_OC3_SetConfig+0xe4>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d113      	bne.n	80094c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	011b      	lsls	r3, r3, #4
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	4313      	orrs	r3, r2
 80094c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	685a      	ldr	r2, [r3, #4]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	621a      	str	r2, [r3, #32]
}
 80094dc:	bf00      	nop
 80094de:	371c      	adds	r7, #28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	40010000 	.word	0x40010000
 80094ec:	40010400 	.word	0x40010400

080094f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b087      	sub	sp, #28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800951e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	021b      	lsls	r3, r3, #8
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	4313      	orrs	r3, r2
 8009532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800953a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	031b      	lsls	r3, r3, #12
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	4313      	orrs	r3, r2
 8009546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a12      	ldr	r2, [pc, #72]	; (8009594 <TIM_OC4_SetConfig+0xa4>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d003      	beq.n	8009558 <TIM_OC4_SetConfig+0x68>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a11      	ldr	r2, [pc, #68]	; (8009598 <TIM_OC4_SetConfig+0xa8>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d109      	bne.n	800956c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800955e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	019b      	lsls	r3, r3, #6
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	4313      	orrs	r3, r2
 800956a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	621a      	str	r2, [r3, #32]
}
 8009586:	bf00      	nop
 8009588:	371c      	adds	r7, #28
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	40010000 	.word	0x40010000
 8009598:	40010400 	.word	0x40010400

0800959c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800959c:	b480      	push	{r7}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f003 031f 	and.w	r3, r3, #31
 80095ae:	2201      	movs	r2, #1
 80095b0:	fa02 f303 	lsl.w	r3, r2, r3
 80095b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a1a      	ldr	r2, [r3, #32]
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	43db      	mvns	r3, r3
 80095be:	401a      	ands	r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6a1a      	ldr	r2, [r3, #32]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f003 031f 	and.w	r3, r3, #31
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	fa01 f303 	lsl.w	r3, r1, r3
 80095d4:	431a      	orrs	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	621a      	str	r2, [r3, #32]
}
 80095da:	bf00      	nop
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
	...

080095e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d101      	bne.n	8009600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095fc:	2302      	movs	r3, #2
 80095fe:	e05a      	b.n	80096b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	4313      	orrs	r3, r2
 8009630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a21      	ldr	r2, [pc, #132]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d022      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800964c:	d01d      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a1d      	ldr	r2, [pc, #116]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d018      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a1b      	ldr	r2, [pc, #108]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d013      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a1a      	ldr	r2, [pc, #104]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d00e      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a18      	ldr	r2, [pc, #96]	; (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d009      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a17      	ldr	r2, [pc, #92]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d004      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a15      	ldr	r2, [pc, #84]	; (80096dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d10c      	bne.n	80096a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	4313      	orrs	r3, r2
 800969a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	40010000 	.word	0x40010000
 80096c8:	40000400 	.word	0x40000400
 80096cc:	40000800 	.word	0x40000800
 80096d0:	40000c00 	.word	0x40000c00
 80096d4:	40010400 	.word	0x40010400
 80096d8:	40014000 	.word	0x40014000
 80096dc:	40001800 	.word	0x40001800

080096e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d101      	bne.n	80096fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096f8:	2302      	movs	r3, #2
 80096fa:	e03d      	b.n	8009778 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	4313      	orrs	r3, r2
 8009710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	4313      	orrs	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4313      	orrs	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	4313      	orrs	r3, r2
 8009748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	695b      	ldr	r3, [r3, #20]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	4313      	orrs	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e042      	b.n	8009844 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d106      	bne.n	80097d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7f9 fc28 	bl	8003028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2224      	movs	r2, #36	; 0x24
 80097dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68da      	ldr	r2, [r3, #12]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fdbd 	bl	800a370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	691a      	ldr	r2, [r3, #16]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	695a      	ldr	r2, [r3, #20]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2220      	movs	r2, #32
 8009830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08a      	sub	sp, #40	; 0x28
 8009850:	af02      	add	r7, sp, #8
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	603b      	str	r3, [r7, #0]
 8009858:	4613      	mov	r3, r2
 800985a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800985c:	2300      	movs	r3, #0
 800985e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b20      	cmp	r3, #32
 800986a:	d175      	bne.n	8009958 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d002      	beq.n	8009878 <HAL_UART_Transmit+0x2c>
 8009872:	88fb      	ldrh	r3, [r7, #6]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e06e      	b.n	800995a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2221      	movs	r2, #33	; 0x21
 8009886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800988a:	f7fc fb11 	bl	8005eb0 <HAL_GetTick>
 800988e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	88fa      	ldrh	r2, [r7, #6]
 8009894:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	88fa      	ldrh	r2, [r7, #6]
 800989a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098a4:	d108      	bne.n	80098b8 <HAL_UART_Transmit+0x6c>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d104      	bne.n	80098b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80098ae:	2300      	movs	r3, #0
 80098b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	61bb      	str	r3, [r7, #24]
 80098b6:	e003      	b.n	80098c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098bc:	2300      	movs	r3, #0
 80098be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80098c0:	e02e      	b.n	8009920 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2200      	movs	r2, #0
 80098ca:	2180      	movs	r1, #128	; 0x80
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 fb1f 	bl	8009f10 <UART_WaitOnFlagUntilTimeout>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d005      	beq.n	80098e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2220      	movs	r2, #32
 80098dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e03a      	b.n	800995a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10b      	bne.n	8009902 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	881b      	ldrh	r3, [r3, #0]
 80098ee:	461a      	mov	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	3302      	adds	r3, #2
 80098fe:	61bb      	str	r3, [r7, #24]
 8009900:	e007      	b.n	8009912 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	781a      	ldrb	r2, [r3, #0]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	3301      	adds	r3, #1
 8009910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009916:	b29b      	uxth	r3, r3
 8009918:	3b01      	subs	r3, #1
 800991a:	b29a      	uxth	r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009924:	b29b      	uxth	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1cb      	bne.n	80098c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2200      	movs	r2, #0
 8009932:	2140      	movs	r1, #64	; 0x40
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 faeb 	bl	8009f10 <UART_WaitOnFlagUntilTimeout>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d005      	beq.n	800994c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2220      	movs	r2, #32
 8009944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e006      	b.n	800995a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2220      	movs	r2, #32
 8009950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	e000      	b.n	800995a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009958:	2302      	movs	r3, #2
  }
}
 800995a:	4618      	mov	r0, r3
 800995c:	3720      	adds	r7, #32
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	60f8      	str	r0, [r7, #12]
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	4613      	mov	r3, r2
 800996e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b20      	cmp	r3, #32
 800997a:	d112      	bne.n	80099a2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d002      	beq.n	8009988 <HAL_UART_Receive_IT+0x26>
 8009982:	88fb      	ldrh	r3, [r7, #6]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e00b      	b.n	80099a4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009992:	88fb      	ldrh	r3, [r7, #6]
 8009994:	461a      	mov	r2, r3
 8009996:	68b9      	ldr	r1, [r7, #8]
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f000 fb12 	bl	8009fc2 <UART_Start_Receive_IT>
 800999e:	4603      	mov	r3, r0
 80099a0:	e000      	b.n	80099a4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80099a2:	2302      	movs	r3, #2
  }
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b0ba      	sub	sp, #232	; 0xe8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80099d8:	2300      	movs	r3, #0
 80099da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80099de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e2:	f003 030f 	and.w	r3, r3, #15
 80099e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80099ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10f      	bne.n	8009a12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099f6:	f003 0320 	and.w	r3, r3, #32
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d009      	beq.n	8009a12 <HAL_UART_IRQHandler+0x66>
 80099fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a02:	f003 0320 	and.w	r3, r3, #32
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fbf2 	bl	800a1f4 <UART_Receive_IT>
      return;
 8009a10:	e25b      	b.n	8009eca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 80de 	beq.w	8009bd8 <HAL_UART_IRQHandler+0x22c>
 8009a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d106      	bne.n	8009a36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 80d1 	beq.w	8009bd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00b      	beq.n	8009a5a <HAL_UART_IRQHandler+0xae>
 8009a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a52:	f043 0201 	orr.w	r2, r3, #1
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a5e:	f003 0304 	and.w	r3, r3, #4
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00b      	beq.n	8009a7e <HAL_UART_IRQHandler+0xd2>
 8009a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d005      	beq.n	8009a7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a76:	f043 0202 	orr.w	r2, r3, #2
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a82:	f003 0302 	and.w	r3, r3, #2
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00b      	beq.n	8009aa2 <HAL_UART_IRQHandler+0xf6>
 8009a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d005      	beq.n	8009aa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9a:	f043 0204 	orr.w	r2, r3, #4
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa6:	f003 0308 	and.w	r3, r3, #8
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d011      	beq.n	8009ad2 <HAL_UART_IRQHandler+0x126>
 8009aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ab2:	f003 0320 	and.w	r3, r3, #32
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d105      	bne.n	8009ac6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d005      	beq.n	8009ad2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aca:	f043 0208 	orr.w	r2, r3, #8
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f000 81f2 	beq.w	8009ec0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ae0:	f003 0320 	and.w	r3, r3, #32
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d008      	beq.n	8009afa <HAL_UART_IRQHandler+0x14e>
 8009ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aec:	f003 0320 	and.w	r3, r3, #32
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fb7d 	bl	800a1f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b04:	2b40      	cmp	r3, #64	; 0x40
 8009b06:	bf0c      	ite	eq
 8009b08:	2301      	moveq	r3, #1
 8009b0a:	2300      	movne	r3, #0
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b16:	f003 0308 	and.w	r3, r3, #8
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d103      	bne.n	8009b26 <HAL_UART_IRQHandler+0x17a>
 8009b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d04f      	beq.n	8009bc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fa85 	bl	800a036 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b36:	2b40      	cmp	r3, #64	; 0x40
 8009b38:	d141      	bne.n	8009bbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3314      	adds	r3, #20
 8009b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b48:	e853 3f00 	ldrex	r3, [r3]
 8009b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3314      	adds	r3, #20
 8009b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1d9      	bne.n	8009b3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d013      	beq.n	8009bb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b92:	4a7e      	ldr	r2, [pc, #504]	; (8009d8c <HAL_UART_IRQHandler+0x3e0>)
 8009b94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fc fb39 	bl	8006212 <HAL_DMA_Abort_IT>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d016      	beq.n	8009bd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb4:	e00e      	b.n	8009bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f994 	bl	8009ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bbc:	e00a      	b.n	8009bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f990 	bl	8009ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc4:	e006      	b.n	8009bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f98c 	bl	8009ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009bd2:	e175      	b.n	8009ec0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd4:	bf00      	nop
    return;
 8009bd6:	e173      	b.n	8009ec0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	f040 814f 	bne.w	8009e80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be6:	f003 0310 	and.w	r3, r3, #16
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 8148 	beq.w	8009e80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bf4:	f003 0310 	and.w	r3, r3, #16
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 8141 	beq.w	8009e80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60bb      	str	r3, [r7, #8]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	60bb      	str	r3, [r7, #8]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	60bb      	str	r3, [r7, #8]
 8009c12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1e:	2b40      	cmp	r3, #64	; 0x40
 8009c20:	f040 80b6 	bne.w	8009d90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 8145 	beq.w	8009ec4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c42:	429a      	cmp	r2, r3
 8009c44:	f080 813e 	bcs.w	8009ec4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c54:	69db      	ldr	r3, [r3, #28]
 8009c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c5a:	f000 8088 	beq.w	8009d6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	330c      	adds	r3, #12
 8009c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c6c:	e853 3f00 	ldrex	r3, [r3]
 8009c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	330c      	adds	r3, #12
 8009c86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009c8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c9a:	e841 2300 	strex	r3, r2, [r1]
 8009c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1d9      	bne.n	8009c5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3314      	adds	r3, #20
 8009cb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cb4:	e853 3f00 	ldrex	r3, [r3]
 8009cb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cbc:	f023 0301 	bic.w	r3, r3, #1
 8009cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3314      	adds	r3, #20
 8009cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009cce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e1      	bne.n	8009caa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3314      	adds	r3, #20
 8009cec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cf0:	e853 3f00 	ldrex	r3, [r3]
 8009cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3314      	adds	r3, #20
 8009d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d12:	e841 2300 	strex	r3, r2, [r1]
 8009d16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e3      	bne.n	8009ce6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	330c      	adds	r3, #12
 8009d32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d3e:	f023 0310 	bic.w	r3, r3, #16
 8009d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	330c      	adds	r3, #12
 8009d4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009d50:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d58:	e841 2300 	strex	r3, r2, [r1]
 8009d5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1e3      	bne.n	8009d2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fc f9e2 	bl	8006132 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2202      	movs	r2, #2
 8009d72:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f8b7 	bl	8009ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d8a:	e09b      	b.n	8009ec4 <HAL_UART_IRQHandler+0x518>
 8009d8c:	0800a0fd 	.word	0x0800a0fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 808e 	beq.w	8009ec8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 8089 	beq.w	8009ec8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	330c      	adds	r3, #12
 8009dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	330c      	adds	r3, #12
 8009dd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009dda:	647a      	str	r2, [r7, #68]	; 0x44
 8009ddc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009de2:	e841 2300 	strex	r3, r2, [r1]
 8009de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1e3      	bne.n	8009db6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3314      	adds	r3, #20
 8009df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	f023 0301 	bic.w	r3, r3, #1
 8009e04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3314      	adds	r3, #20
 8009e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e12:	633a      	str	r2, [r7, #48]	; 0x30
 8009e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e1a:	e841 2300 	strex	r3, r2, [r1]
 8009e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1e3      	bne.n	8009dee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	330c      	adds	r3, #12
 8009e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	e853 3f00 	ldrex	r3, [r3]
 8009e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f023 0310 	bic.w	r3, r3, #16
 8009e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	330c      	adds	r3, #12
 8009e54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009e58:	61fa      	str	r2, [r7, #28]
 8009e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5c:	69b9      	ldr	r1, [r7, #24]
 8009e5e:	69fa      	ldr	r2, [r7, #28]
 8009e60:	e841 2300 	strex	r3, r2, [r1]
 8009e64:	617b      	str	r3, [r7, #20]
   return(result);
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e3      	bne.n	8009e34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2202      	movs	r2, #2
 8009e70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f83d 	bl	8009ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e7e:	e023      	b.n	8009ec8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d009      	beq.n	8009ea0 <HAL_UART_IRQHandler+0x4f4>
 8009e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d003      	beq.n	8009ea0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f943 	bl	800a124 <UART_Transmit_IT>
    return;
 8009e9e:	e014      	b.n	8009eca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00e      	beq.n	8009eca <HAL_UART_IRQHandler+0x51e>
 8009eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d008      	beq.n	8009eca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f983 	bl	800a1c4 <UART_EndTransmit_IT>
    return;
 8009ebe:	e004      	b.n	8009eca <HAL_UART_IRQHandler+0x51e>
    return;
 8009ec0:	bf00      	nop
 8009ec2:	e002      	b.n	8009eca <HAL_UART_IRQHandler+0x51e>
      return;
 8009ec4:	bf00      	nop
 8009ec6:	e000      	b.n	8009eca <HAL_UART_IRQHandler+0x51e>
      return;
 8009ec8:	bf00      	nop
  }
}
 8009eca:	37e8      	adds	r7, #232	; 0xe8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	603b      	str	r3, [r7, #0]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f20:	e03b      	b.n	8009f9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f28:	d037      	beq.n	8009f9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f2a:	f7fb ffc1 	bl	8005eb0 <HAL_GetTick>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	6a3a      	ldr	r2, [r7, #32]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d302      	bcc.n	8009f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d101      	bne.n	8009f44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f40:	2303      	movs	r3, #3
 8009f42:	e03a      	b.n	8009fba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d023      	beq.n	8009f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	2b80      	cmp	r3, #128	; 0x80
 8009f56:	d020      	beq.n	8009f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2b40      	cmp	r3, #64	; 0x40
 8009f5c:	d01d      	beq.n	8009f9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0308 	and.w	r3, r3, #8
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	d116      	bne.n	8009f9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	617b      	str	r3, [r7, #20]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 f857 	bl	800a036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2208      	movs	r2, #8
 8009f8c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e00f      	b.n	8009fba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	bf0c      	ite	eq
 8009faa:	2301      	moveq	r3, #1
 8009fac:	2300      	movne	r3, #0
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	79fb      	ldrb	r3, [r7, #7]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d0b4      	beq.n	8009f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3718      	adds	r7, #24
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b085      	sub	sp, #20
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	60f8      	str	r0, [r7, #12]
 8009fca:	60b9      	str	r1, [r7, #8]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	88fa      	ldrh	r2, [r7, #6]
 8009fda:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	88fa      	ldrh	r2, [r7, #6]
 8009fe0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2222      	movs	r2, #34	; 0x22
 8009fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d007      	beq.n	800a008 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a006:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	695a      	ldr	r2, [r3, #20]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f042 0201 	orr.w	r2, r2, #1
 800a016:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f042 0220 	orr.w	r2, r2, #32
 800a026:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a036:	b480      	push	{r7}
 800a038:	b095      	sub	sp, #84	; 0x54
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	330c      	adds	r3, #12
 800a044:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a054:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	330c      	adds	r3, #12
 800a05c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a05e:	643a      	str	r2, [r7, #64]	; 0x40
 800a060:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a062:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a066:	e841 2300 	strex	r3, r2, [r1]
 800a06a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1e5      	bne.n	800a03e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3314      	adds	r3, #20
 800a078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	e853 3f00 	ldrex	r3, [r3]
 800a080:	61fb      	str	r3, [r7, #28]
   return(result);
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	f023 0301 	bic.w	r3, r3, #1
 800a088:	64bb      	str	r3, [r7, #72]	; 0x48
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3314      	adds	r3, #20
 800a090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a092:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a094:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a09a:	e841 2300 	strex	r3, r2, [r1]
 800a09e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e5      	bne.n	800a072 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d119      	bne.n	800a0e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	330c      	adds	r3, #12
 800a0b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	e853 3f00 	ldrex	r3, [r3]
 800a0bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	f023 0310 	bic.w	r3, r3, #16
 800a0c4:	647b      	str	r3, [r7, #68]	; 0x44
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	330c      	adds	r3, #12
 800a0cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0ce:	61ba      	str	r2, [r7, #24]
 800a0d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d2:	6979      	ldr	r1, [r7, #20]
 800a0d4:	69ba      	ldr	r2, [r7, #24]
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	613b      	str	r3, [r7, #16]
   return(result);
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e5      	bne.n	800a0ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2220      	movs	r2, #32
 800a0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a0f0:	bf00      	nop
 800a0f2:	3754      	adds	r7, #84	; 0x54
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a108:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7ff fee4 	bl	8009ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a11c:	bf00      	nop
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b21      	cmp	r3, #33	; 0x21
 800a136:	d13e      	bne.n	800a1b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a140:	d114      	bne.n	800a16c <UART_Transmit_IT+0x48>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d110      	bne.n	800a16c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	881b      	ldrh	r3, [r3, #0]
 800a154:	461a      	mov	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a15e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a1b      	ldr	r3, [r3, #32]
 800a164:	1c9a      	adds	r2, r3, #2
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	621a      	str	r2, [r3, #32]
 800a16a:	e008      	b.n	800a17e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a1b      	ldr	r3, [r3, #32]
 800a170:	1c59      	adds	r1, r3, #1
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	6211      	str	r1, [r2, #32]
 800a176:	781a      	ldrb	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a182:	b29b      	uxth	r3, r3
 800a184:	3b01      	subs	r3, #1
 800a186:	b29b      	uxth	r3, r3
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	4619      	mov	r1, r3
 800a18c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10f      	bne.n	800a1b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68da      	ldr	r2, [r3, #12]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68da      	ldr	r2, [r3, #12]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e000      	b.n	800a1b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a1b6:	2302      	movs	r3, #2
  }
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68da      	ldr	r2, [r3, #12]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7ff fe73 	bl	8009ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08c      	sub	sp, #48	; 0x30
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b22      	cmp	r3, #34	; 0x22
 800a206:	f040 80ae 	bne.w	800a366 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a212:	d117      	bne.n	800a244 <UART_Receive_IT+0x50>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d113      	bne.n	800a244 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a21c:	2300      	movs	r3, #0
 800a21e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a224:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a232:	b29a      	uxth	r2, r3
 800a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a236:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23c:	1c9a      	adds	r2, r3, #2
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	629a      	str	r2, [r3, #40]	; 0x28
 800a242:	e026      	b.n	800a292 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a248:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a256:	d007      	beq.n	800a268 <UART_Receive_IT+0x74>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <UART_Receive_IT+0x82>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d106      	bne.n	800a276 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	701a      	strb	r2, [r3, #0]
 800a274:	e008      	b.n	800a288 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a282:	b2da      	uxtb	r2, r3
 800a284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a286:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28c:	1c5a      	adds	r2, r3, #1
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a296:	b29b      	uxth	r3, r3
 800a298:	3b01      	subs	r3, #1
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	4619      	mov	r1, r3
 800a2a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d15d      	bne.n	800a362 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68da      	ldr	r2, [r3, #12]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f022 0220 	bic.w	r2, r2, #32
 800a2b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68da      	ldr	r2, [r3, #12]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	695a      	ldr	r2, [r3, #20]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f022 0201 	bic.w	r2, r2, #1
 800a2d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2220      	movs	r2, #32
 800a2da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d135      	bne.n	800a358 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	330c      	adds	r3, #12
 800a2f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	e853 3f00 	ldrex	r3, [r3]
 800a300:	613b      	str	r3, [r7, #16]
   return(result);
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f023 0310 	bic.w	r3, r3, #16
 800a308:	627b      	str	r3, [r7, #36]	; 0x24
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	330c      	adds	r3, #12
 800a310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a312:	623a      	str	r2, [r7, #32]
 800a314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a316:	69f9      	ldr	r1, [r7, #28]
 800a318:	6a3a      	ldr	r2, [r7, #32]
 800a31a:	e841 2300 	strex	r3, r2, [r1]
 800a31e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1e5      	bne.n	800a2f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0310 	and.w	r3, r3, #16
 800a330:	2b10      	cmp	r3, #16
 800a332:	d10a      	bne.n	800a34a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a334:	2300      	movs	r3, #0
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff fdd1 	bl	8009ef8 <HAL_UARTEx_RxEventCallback>
 800a356:	e002      	b.n	800a35e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7f8 fa4b 	bl	80027f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	e002      	b.n	800a368 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	e000      	b.n	800a368 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a366:	2302      	movs	r3, #2
  }
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3730      	adds	r7, #48	; 0x30
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a374:	b0c0      	sub	sp, #256	; 0x100
 800a376:	af00      	add	r7, sp, #0
 800a378:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a37c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a38c:	68d9      	ldr	r1, [r3, #12]
 800a38e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	ea40 0301 	orr.w	r3, r0, r1
 800a398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a39a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a39e:	689a      	ldr	r2, [r3, #8]
 800a3a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	431a      	orrs	r2, r3
 800a3a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b4:	69db      	ldr	r3, [r3, #28]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a3c8:	f021 010c 	bic.w	r1, r1, #12
 800a3cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a3d6:	430b      	orrs	r3, r1
 800a3d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a3e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ea:	6999      	ldr	r1, [r3, #24]
 800a3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	ea40 0301 	orr.w	r3, r0, r1
 800a3f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	4b8f      	ldr	r3, [pc, #572]	; (800a63c <UART_SetConfig+0x2cc>)
 800a400:	429a      	cmp	r2, r3
 800a402:	d005      	beq.n	800a410 <UART_SetConfig+0xa0>
 800a404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	4b8d      	ldr	r3, [pc, #564]	; (800a640 <UART_SetConfig+0x2d0>)
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d104      	bne.n	800a41a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a410:	f7fe fa24 	bl	800885c <HAL_RCC_GetPCLK2Freq>
 800a414:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a418:	e003      	b.n	800a422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a41a:	f7fe fa0b 	bl	8008834 <HAL_RCC_GetPCLK1Freq>
 800a41e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a426:	69db      	ldr	r3, [r3, #28]
 800a428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a42c:	f040 810c 	bne.w	800a648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a434:	2200      	movs	r2, #0
 800a436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a43a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a43e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a442:	4622      	mov	r2, r4
 800a444:	462b      	mov	r3, r5
 800a446:	1891      	adds	r1, r2, r2
 800a448:	65b9      	str	r1, [r7, #88]	; 0x58
 800a44a:	415b      	adcs	r3, r3
 800a44c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a44e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a452:	4621      	mov	r1, r4
 800a454:	eb12 0801 	adds.w	r8, r2, r1
 800a458:	4629      	mov	r1, r5
 800a45a:	eb43 0901 	adc.w	r9, r3, r1
 800a45e:	f04f 0200 	mov.w	r2, #0
 800a462:	f04f 0300 	mov.w	r3, #0
 800a466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a46a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a46e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a472:	4690      	mov	r8, r2
 800a474:	4699      	mov	r9, r3
 800a476:	4623      	mov	r3, r4
 800a478:	eb18 0303 	adds.w	r3, r8, r3
 800a47c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a480:	462b      	mov	r3, r5
 800a482:	eb49 0303 	adc.w	r3, r9, r3
 800a486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a48a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a496:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a49a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a49e:	460b      	mov	r3, r1
 800a4a0:	18db      	adds	r3, r3, r3
 800a4a2:	653b      	str	r3, [r7, #80]	; 0x50
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	eb42 0303 	adc.w	r3, r2, r3
 800a4aa:	657b      	str	r3, [r7, #84]	; 0x54
 800a4ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a4b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a4b4:	f7f6 fbe0 	bl	8000c78 <__aeabi_uldivmod>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4b61      	ldr	r3, [pc, #388]	; (800a644 <UART_SetConfig+0x2d4>)
 800a4be:	fba3 2302 	umull	r2, r3, r3, r2
 800a4c2:	095b      	lsrs	r3, r3, #5
 800a4c4:	011c      	lsls	r4, r3, #4
 800a4c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a4d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a4d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a4d8:	4642      	mov	r2, r8
 800a4da:	464b      	mov	r3, r9
 800a4dc:	1891      	adds	r1, r2, r2
 800a4de:	64b9      	str	r1, [r7, #72]	; 0x48
 800a4e0:	415b      	adcs	r3, r3
 800a4e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a4e8:	4641      	mov	r1, r8
 800a4ea:	eb12 0a01 	adds.w	sl, r2, r1
 800a4ee:	4649      	mov	r1, r9
 800a4f0:	eb43 0b01 	adc.w	fp, r3, r1
 800a4f4:	f04f 0200 	mov.w	r2, #0
 800a4f8:	f04f 0300 	mov.w	r3, #0
 800a4fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a508:	4692      	mov	sl, r2
 800a50a:	469b      	mov	fp, r3
 800a50c:	4643      	mov	r3, r8
 800a50e:	eb1a 0303 	adds.w	r3, sl, r3
 800a512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a516:	464b      	mov	r3, r9
 800a518:	eb4b 0303 	adc.w	r3, fp, r3
 800a51c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a52c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a534:	460b      	mov	r3, r1
 800a536:	18db      	adds	r3, r3, r3
 800a538:	643b      	str	r3, [r7, #64]	; 0x40
 800a53a:	4613      	mov	r3, r2
 800a53c:	eb42 0303 	adc.w	r3, r2, r3
 800a540:	647b      	str	r3, [r7, #68]	; 0x44
 800a542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a54a:	f7f6 fb95 	bl	8000c78 <__aeabi_uldivmod>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4611      	mov	r1, r2
 800a554:	4b3b      	ldr	r3, [pc, #236]	; (800a644 <UART_SetConfig+0x2d4>)
 800a556:	fba3 2301 	umull	r2, r3, r3, r1
 800a55a:	095b      	lsrs	r3, r3, #5
 800a55c:	2264      	movs	r2, #100	; 0x64
 800a55e:	fb02 f303 	mul.w	r3, r2, r3
 800a562:	1acb      	subs	r3, r1, r3
 800a564:	00db      	lsls	r3, r3, #3
 800a566:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a56a:	4b36      	ldr	r3, [pc, #216]	; (800a644 <UART_SetConfig+0x2d4>)
 800a56c:	fba3 2302 	umull	r2, r3, r3, r2
 800a570:	095b      	lsrs	r3, r3, #5
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a578:	441c      	add	r4, r3
 800a57a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a57e:	2200      	movs	r2, #0
 800a580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a584:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a58c:	4642      	mov	r2, r8
 800a58e:	464b      	mov	r3, r9
 800a590:	1891      	adds	r1, r2, r2
 800a592:	63b9      	str	r1, [r7, #56]	; 0x38
 800a594:	415b      	adcs	r3, r3
 800a596:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a59c:	4641      	mov	r1, r8
 800a59e:	1851      	adds	r1, r2, r1
 800a5a0:	6339      	str	r1, [r7, #48]	; 0x30
 800a5a2:	4649      	mov	r1, r9
 800a5a4:	414b      	adcs	r3, r1
 800a5a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5a8:	f04f 0200 	mov.w	r2, #0
 800a5ac:	f04f 0300 	mov.w	r3, #0
 800a5b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a5b4:	4659      	mov	r1, fp
 800a5b6:	00cb      	lsls	r3, r1, #3
 800a5b8:	4651      	mov	r1, sl
 800a5ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5be:	4651      	mov	r1, sl
 800a5c0:	00ca      	lsls	r2, r1, #3
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	4642      	mov	r2, r8
 800a5ca:	189b      	adds	r3, r3, r2
 800a5cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a5d0:	464b      	mov	r3, r9
 800a5d2:	460a      	mov	r2, r1
 800a5d4:	eb42 0303 	adc.w	r3, r2, r3
 800a5d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a5e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a5ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	18db      	adds	r3, r3, r3
 800a5f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	eb42 0303 	adc.w	r3, r2, r3
 800a5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a606:	f7f6 fb37 	bl	8000c78 <__aeabi_uldivmod>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	4b0d      	ldr	r3, [pc, #52]	; (800a644 <UART_SetConfig+0x2d4>)
 800a610:	fba3 1302 	umull	r1, r3, r3, r2
 800a614:	095b      	lsrs	r3, r3, #5
 800a616:	2164      	movs	r1, #100	; 0x64
 800a618:	fb01 f303 	mul.w	r3, r1, r3
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	00db      	lsls	r3, r3, #3
 800a620:	3332      	adds	r3, #50	; 0x32
 800a622:	4a08      	ldr	r2, [pc, #32]	; (800a644 <UART_SetConfig+0x2d4>)
 800a624:	fba2 2303 	umull	r2, r3, r2, r3
 800a628:	095b      	lsrs	r3, r3, #5
 800a62a:	f003 0207 	and.w	r2, r3, #7
 800a62e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4422      	add	r2, r4
 800a636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a638:	e106      	b.n	800a848 <UART_SetConfig+0x4d8>
 800a63a:	bf00      	nop
 800a63c:	40011000 	.word	0x40011000
 800a640:	40011400 	.word	0x40011400
 800a644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a64c:	2200      	movs	r2, #0
 800a64e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a652:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a65a:	4642      	mov	r2, r8
 800a65c:	464b      	mov	r3, r9
 800a65e:	1891      	adds	r1, r2, r2
 800a660:	6239      	str	r1, [r7, #32]
 800a662:	415b      	adcs	r3, r3
 800a664:	627b      	str	r3, [r7, #36]	; 0x24
 800a666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a66a:	4641      	mov	r1, r8
 800a66c:	1854      	adds	r4, r2, r1
 800a66e:	4649      	mov	r1, r9
 800a670:	eb43 0501 	adc.w	r5, r3, r1
 800a674:	f04f 0200 	mov.w	r2, #0
 800a678:	f04f 0300 	mov.w	r3, #0
 800a67c:	00eb      	lsls	r3, r5, #3
 800a67e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a682:	00e2      	lsls	r2, r4, #3
 800a684:	4614      	mov	r4, r2
 800a686:	461d      	mov	r5, r3
 800a688:	4643      	mov	r3, r8
 800a68a:	18e3      	adds	r3, r4, r3
 800a68c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a690:	464b      	mov	r3, r9
 800a692:	eb45 0303 	adc.w	r3, r5, r3
 800a696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a69a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a6a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a6aa:	f04f 0200 	mov.w	r2, #0
 800a6ae:	f04f 0300 	mov.w	r3, #0
 800a6b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	008b      	lsls	r3, r1, #2
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	008a      	lsls	r2, r1, #2
 800a6c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a6c8:	f7f6 fad6 	bl	8000c78 <__aeabi_uldivmod>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4b60      	ldr	r3, [pc, #384]	; (800a854 <UART_SetConfig+0x4e4>)
 800a6d2:	fba3 2302 	umull	r2, r3, r3, r2
 800a6d6:	095b      	lsrs	r3, r3, #5
 800a6d8:	011c      	lsls	r4, r3, #4
 800a6da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a6e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	1891      	adds	r1, r2, r2
 800a6f2:	61b9      	str	r1, [r7, #24]
 800a6f4:	415b      	adcs	r3, r3
 800a6f6:	61fb      	str	r3, [r7, #28]
 800a6f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6fc:	4641      	mov	r1, r8
 800a6fe:	1851      	adds	r1, r2, r1
 800a700:	6139      	str	r1, [r7, #16]
 800a702:	4649      	mov	r1, r9
 800a704:	414b      	adcs	r3, r1
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	f04f 0200 	mov.w	r2, #0
 800a70c:	f04f 0300 	mov.w	r3, #0
 800a710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a714:	4659      	mov	r1, fp
 800a716:	00cb      	lsls	r3, r1, #3
 800a718:	4651      	mov	r1, sl
 800a71a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a71e:	4651      	mov	r1, sl
 800a720:	00ca      	lsls	r2, r1, #3
 800a722:	4610      	mov	r0, r2
 800a724:	4619      	mov	r1, r3
 800a726:	4603      	mov	r3, r0
 800a728:	4642      	mov	r2, r8
 800a72a:	189b      	adds	r3, r3, r2
 800a72c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a730:	464b      	mov	r3, r9
 800a732:	460a      	mov	r2, r1
 800a734:	eb42 0303 	adc.w	r3, r2, r3
 800a738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a73c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	67bb      	str	r3, [r7, #120]	; 0x78
 800a746:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a748:	f04f 0200 	mov.w	r2, #0
 800a74c:	f04f 0300 	mov.w	r3, #0
 800a750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a754:	4649      	mov	r1, r9
 800a756:	008b      	lsls	r3, r1, #2
 800a758:	4641      	mov	r1, r8
 800a75a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a75e:	4641      	mov	r1, r8
 800a760:	008a      	lsls	r2, r1, #2
 800a762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a766:	f7f6 fa87 	bl	8000c78 <__aeabi_uldivmod>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4611      	mov	r1, r2
 800a770:	4b38      	ldr	r3, [pc, #224]	; (800a854 <UART_SetConfig+0x4e4>)
 800a772:	fba3 2301 	umull	r2, r3, r3, r1
 800a776:	095b      	lsrs	r3, r3, #5
 800a778:	2264      	movs	r2, #100	; 0x64
 800a77a:	fb02 f303 	mul.w	r3, r2, r3
 800a77e:	1acb      	subs	r3, r1, r3
 800a780:	011b      	lsls	r3, r3, #4
 800a782:	3332      	adds	r3, #50	; 0x32
 800a784:	4a33      	ldr	r2, [pc, #204]	; (800a854 <UART_SetConfig+0x4e4>)
 800a786:	fba2 2303 	umull	r2, r3, r2, r3
 800a78a:	095b      	lsrs	r3, r3, #5
 800a78c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a790:	441c      	add	r4, r3
 800a792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a796:	2200      	movs	r2, #0
 800a798:	673b      	str	r3, [r7, #112]	; 0x70
 800a79a:	677a      	str	r2, [r7, #116]	; 0x74
 800a79c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a7a0:	4642      	mov	r2, r8
 800a7a2:	464b      	mov	r3, r9
 800a7a4:	1891      	adds	r1, r2, r2
 800a7a6:	60b9      	str	r1, [r7, #8]
 800a7a8:	415b      	adcs	r3, r3
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a7b0:	4641      	mov	r1, r8
 800a7b2:	1851      	adds	r1, r2, r1
 800a7b4:	6039      	str	r1, [r7, #0]
 800a7b6:	4649      	mov	r1, r9
 800a7b8:	414b      	adcs	r3, r1
 800a7ba:	607b      	str	r3, [r7, #4]
 800a7bc:	f04f 0200 	mov.w	r2, #0
 800a7c0:	f04f 0300 	mov.w	r3, #0
 800a7c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a7c8:	4659      	mov	r1, fp
 800a7ca:	00cb      	lsls	r3, r1, #3
 800a7cc:	4651      	mov	r1, sl
 800a7ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7d2:	4651      	mov	r1, sl
 800a7d4:	00ca      	lsls	r2, r1, #3
 800a7d6:	4610      	mov	r0, r2
 800a7d8:	4619      	mov	r1, r3
 800a7da:	4603      	mov	r3, r0
 800a7dc:	4642      	mov	r2, r8
 800a7de:	189b      	adds	r3, r3, r2
 800a7e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7e2:	464b      	mov	r3, r9
 800a7e4:	460a      	mov	r2, r1
 800a7e6:	eb42 0303 	adc.w	r3, r2, r3
 800a7ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	663b      	str	r3, [r7, #96]	; 0x60
 800a7f6:	667a      	str	r2, [r7, #100]	; 0x64
 800a7f8:	f04f 0200 	mov.w	r2, #0
 800a7fc:	f04f 0300 	mov.w	r3, #0
 800a800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a804:	4649      	mov	r1, r9
 800a806:	008b      	lsls	r3, r1, #2
 800a808:	4641      	mov	r1, r8
 800a80a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a80e:	4641      	mov	r1, r8
 800a810:	008a      	lsls	r2, r1, #2
 800a812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a816:	f7f6 fa2f 	bl	8000c78 <__aeabi_uldivmod>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	4b0d      	ldr	r3, [pc, #52]	; (800a854 <UART_SetConfig+0x4e4>)
 800a820:	fba3 1302 	umull	r1, r3, r3, r2
 800a824:	095b      	lsrs	r3, r3, #5
 800a826:	2164      	movs	r1, #100	; 0x64
 800a828:	fb01 f303 	mul.w	r3, r1, r3
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	011b      	lsls	r3, r3, #4
 800a830:	3332      	adds	r3, #50	; 0x32
 800a832:	4a08      	ldr	r2, [pc, #32]	; (800a854 <UART_SetConfig+0x4e4>)
 800a834:	fba2 2303 	umull	r2, r3, r2, r3
 800a838:	095b      	lsrs	r3, r3, #5
 800a83a:	f003 020f 	and.w	r2, r3, #15
 800a83e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4422      	add	r2, r4
 800a846:	609a      	str	r2, [r3, #8]
}
 800a848:	bf00      	nop
 800a84a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a84e:	46bd      	mov	sp, r7
 800a850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a854:	51eb851f 	.word	0x51eb851f

0800a858 <asin>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	ed2d 8b02 	vpush	{d8}
 800a85e:	ec55 4b10 	vmov	r4, r5, d0
 800a862:	f000 faa1 	bl	800ada8 <__ieee754_asin>
 800a866:	4622      	mov	r2, r4
 800a868:	462b      	mov	r3, r5
 800a86a:	4620      	mov	r0, r4
 800a86c:	4629      	mov	r1, r5
 800a86e:	eeb0 8a40 	vmov.f32	s16, s0
 800a872:	eef0 8a60 	vmov.f32	s17, s1
 800a876:	f7f6 f951 	bl	8000b1c <__aeabi_dcmpun>
 800a87a:	b9a8      	cbnz	r0, 800a8a8 <asin+0x50>
 800a87c:	ec45 4b10 	vmov	d0, r4, r5
 800a880:	f000 f8ea 	bl	800aa58 <fabs>
 800a884:	4b0c      	ldr	r3, [pc, #48]	; (800a8b8 <asin+0x60>)
 800a886:	ec51 0b10 	vmov	r0, r1, d0
 800a88a:	2200      	movs	r2, #0
 800a88c:	f7f6 f93c 	bl	8000b08 <__aeabi_dcmpgt>
 800a890:	b150      	cbz	r0, 800a8a8 <asin+0x50>
 800a892:	f003 fbd3 	bl	800e03c <__errno>
 800a896:	ecbd 8b02 	vpop	{d8}
 800a89a:	2321      	movs	r3, #33	; 0x21
 800a89c:	6003      	str	r3, [r0, #0]
 800a89e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8a2:	4806      	ldr	r0, [pc, #24]	; (800a8bc <asin+0x64>)
 800a8a4:	f000 b998 	b.w	800abd8 <nan>
 800a8a8:	eeb0 0a48 	vmov.f32	s0, s16
 800a8ac:	eef0 0a68 	vmov.f32	s1, s17
 800a8b0:	ecbd 8b02 	vpop	{d8}
 800a8b4:	bd38      	pop	{r3, r4, r5, pc}
 800a8b6:	bf00      	nop
 800a8b8:	3ff00000 	.word	0x3ff00000
 800a8bc:	08010630 	.word	0x08010630

0800a8c0 <atan2>:
 800a8c0:	f000 bc86 	b.w	800b1d0 <__ieee754_atan2>

0800a8c4 <fmod>:
 800a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c6:	ed2d 8b02 	vpush	{d8}
 800a8ca:	ec57 6b10 	vmov	r6, r7, d0
 800a8ce:	ec55 4b11 	vmov	r4, r5, d1
 800a8d2:	f000 fd43 	bl	800b35c <__ieee754_fmod>
 800a8d6:	4622      	mov	r2, r4
 800a8d8:	462b      	mov	r3, r5
 800a8da:	4630      	mov	r0, r6
 800a8dc:	4639      	mov	r1, r7
 800a8de:	eeb0 8a40 	vmov.f32	s16, s0
 800a8e2:	eef0 8a60 	vmov.f32	s17, s1
 800a8e6:	f7f6 f919 	bl	8000b1c <__aeabi_dcmpun>
 800a8ea:	b990      	cbnz	r0, 800a912 <fmod+0x4e>
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	f7f6 f8e0 	bl	8000ab8 <__aeabi_dcmpeq>
 800a8f8:	b158      	cbz	r0, 800a912 <fmod+0x4e>
 800a8fa:	f003 fb9f 	bl	800e03c <__errno>
 800a8fe:	2321      	movs	r3, #33	; 0x21
 800a900:	6003      	str	r3, [r0, #0]
 800a902:	2200      	movs	r2, #0
 800a904:	2300      	movs	r3, #0
 800a906:	4610      	mov	r0, r2
 800a908:	4619      	mov	r1, r3
 800a90a:	f7f5 ff97 	bl	800083c <__aeabi_ddiv>
 800a90e:	ec41 0b18 	vmov	d8, r0, r1
 800a912:	eeb0 0a48 	vmov.f32	s0, s16
 800a916:	eef0 0a68 	vmov.f32	s1, s17
 800a91a:	ecbd 8b02 	vpop	{d8}
 800a91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a920 <pow>:
 800a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a922:	ed2d 8b02 	vpush	{d8}
 800a926:	eeb0 8a40 	vmov.f32	s16, s0
 800a92a:	eef0 8a60 	vmov.f32	s17, s1
 800a92e:	ec55 4b11 	vmov	r4, r5, d1
 800a932:	f000 fe21 	bl	800b578 <__ieee754_pow>
 800a936:	4622      	mov	r2, r4
 800a938:	462b      	mov	r3, r5
 800a93a:	4620      	mov	r0, r4
 800a93c:	4629      	mov	r1, r5
 800a93e:	ec57 6b10 	vmov	r6, r7, d0
 800a942:	f7f6 f8eb 	bl	8000b1c <__aeabi_dcmpun>
 800a946:	2800      	cmp	r0, #0
 800a948:	d13b      	bne.n	800a9c2 <pow+0xa2>
 800a94a:	ec51 0b18 	vmov	r0, r1, d8
 800a94e:	2200      	movs	r2, #0
 800a950:	2300      	movs	r3, #0
 800a952:	f7f6 f8b1 	bl	8000ab8 <__aeabi_dcmpeq>
 800a956:	b1b8      	cbz	r0, 800a988 <pow+0x68>
 800a958:	2200      	movs	r2, #0
 800a95a:	2300      	movs	r3, #0
 800a95c:	4620      	mov	r0, r4
 800a95e:	4629      	mov	r1, r5
 800a960:	f7f6 f8aa 	bl	8000ab8 <__aeabi_dcmpeq>
 800a964:	2800      	cmp	r0, #0
 800a966:	d146      	bne.n	800a9f6 <pow+0xd6>
 800a968:	ec45 4b10 	vmov	d0, r4, r5
 800a96c:	f000 f928 	bl	800abc0 <finite>
 800a970:	b338      	cbz	r0, 800a9c2 <pow+0xa2>
 800a972:	2200      	movs	r2, #0
 800a974:	2300      	movs	r3, #0
 800a976:	4620      	mov	r0, r4
 800a978:	4629      	mov	r1, r5
 800a97a:	f7f6 f8a7 	bl	8000acc <__aeabi_dcmplt>
 800a97e:	b300      	cbz	r0, 800a9c2 <pow+0xa2>
 800a980:	f003 fb5c 	bl	800e03c <__errno>
 800a984:	2322      	movs	r3, #34	; 0x22
 800a986:	e01b      	b.n	800a9c0 <pow+0xa0>
 800a988:	ec47 6b10 	vmov	d0, r6, r7
 800a98c:	f000 f918 	bl	800abc0 <finite>
 800a990:	b9e0      	cbnz	r0, 800a9cc <pow+0xac>
 800a992:	eeb0 0a48 	vmov.f32	s0, s16
 800a996:	eef0 0a68 	vmov.f32	s1, s17
 800a99a:	f000 f911 	bl	800abc0 <finite>
 800a99e:	b1a8      	cbz	r0, 800a9cc <pow+0xac>
 800a9a0:	ec45 4b10 	vmov	d0, r4, r5
 800a9a4:	f000 f90c 	bl	800abc0 <finite>
 800a9a8:	b180      	cbz	r0, 800a9cc <pow+0xac>
 800a9aa:	4632      	mov	r2, r6
 800a9ac:	463b      	mov	r3, r7
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	f7f6 f8b3 	bl	8000b1c <__aeabi_dcmpun>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d0e2      	beq.n	800a980 <pow+0x60>
 800a9ba:	f003 fb3f 	bl	800e03c <__errno>
 800a9be:	2321      	movs	r3, #33	; 0x21
 800a9c0:	6003      	str	r3, [r0, #0]
 800a9c2:	ecbd 8b02 	vpop	{d8}
 800a9c6:	ec47 6b10 	vmov	d0, r6, r7
 800a9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	f7f6 f870 	bl	8000ab8 <__aeabi_dcmpeq>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d0f2      	beq.n	800a9c2 <pow+0xa2>
 800a9dc:	eeb0 0a48 	vmov.f32	s0, s16
 800a9e0:	eef0 0a68 	vmov.f32	s1, s17
 800a9e4:	f000 f8ec 	bl	800abc0 <finite>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d0ea      	beq.n	800a9c2 <pow+0xa2>
 800a9ec:	ec45 4b10 	vmov	d0, r4, r5
 800a9f0:	f000 f8e6 	bl	800abc0 <finite>
 800a9f4:	e7c3      	b.n	800a97e <pow+0x5e>
 800a9f6:	4f01      	ldr	r7, [pc, #4]	; (800a9fc <pow+0xdc>)
 800a9f8:	2600      	movs	r6, #0
 800a9fa:	e7e2      	b.n	800a9c2 <pow+0xa2>
 800a9fc:	3ff00000 	.word	0x3ff00000

0800aa00 <sqrt>:
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	ed2d 8b02 	vpush	{d8}
 800aa06:	ec55 4b10 	vmov	r4, r5, d0
 800aa0a:	f000 f8ed 	bl	800abe8 <__ieee754_sqrt>
 800aa0e:	4622      	mov	r2, r4
 800aa10:	462b      	mov	r3, r5
 800aa12:	4620      	mov	r0, r4
 800aa14:	4629      	mov	r1, r5
 800aa16:	eeb0 8a40 	vmov.f32	s16, s0
 800aa1a:	eef0 8a60 	vmov.f32	s17, s1
 800aa1e:	f7f6 f87d 	bl	8000b1c <__aeabi_dcmpun>
 800aa22:	b990      	cbnz	r0, 800aa4a <sqrt+0x4a>
 800aa24:	2200      	movs	r2, #0
 800aa26:	2300      	movs	r3, #0
 800aa28:	4620      	mov	r0, r4
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	f7f6 f84e 	bl	8000acc <__aeabi_dcmplt>
 800aa30:	b158      	cbz	r0, 800aa4a <sqrt+0x4a>
 800aa32:	f003 fb03 	bl	800e03c <__errno>
 800aa36:	2321      	movs	r3, #33	; 0x21
 800aa38:	6003      	str	r3, [r0, #0]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	4610      	mov	r0, r2
 800aa40:	4619      	mov	r1, r3
 800aa42:	f7f5 fefb 	bl	800083c <__aeabi_ddiv>
 800aa46:	ec41 0b18 	vmov	d8, r0, r1
 800aa4a:	eeb0 0a48 	vmov.f32	s0, s16
 800aa4e:	eef0 0a68 	vmov.f32	s1, s17
 800aa52:	ecbd 8b02 	vpop	{d8}
 800aa56:	bd38      	pop	{r3, r4, r5, pc}

0800aa58 <fabs>:
 800aa58:	ec51 0b10 	vmov	r0, r1, d0
 800aa5c:	ee10 2a10 	vmov	r2, s0
 800aa60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa64:	ec43 2b10 	vmov	d0, r2, r3
 800aa68:	4770      	bx	lr

0800aa6a <atan2f>:
 800aa6a:	f001 bcf7 	b.w	800c45c <__ieee754_atan2f>
	...

0800aa70 <sqrtf>:
 800aa70:	b508      	push	{r3, lr}
 800aa72:	ed2d 8b02 	vpush	{d8}
 800aa76:	eeb0 8a40 	vmov.f32	s16, s0
 800aa7a:	f000 f98f 	bl	800ad9c <__ieee754_sqrtf>
 800aa7e:	eeb4 8a48 	vcmp.f32	s16, s16
 800aa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa86:	d60c      	bvs.n	800aaa2 <sqrtf+0x32>
 800aa88:	eddf 8a07 	vldr	s17, [pc, #28]	; 800aaa8 <sqrtf+0x38>
 800aa8c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800aa90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa94:	d505      	bpl.n	800aaa2 <sqrtf+0x32>
 800aa96:	f003 fad1 	bl	800e03c <__errno>
 800aa9a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800aa9e:	2321      	movs	r3, #33	; 0x21
 800aaa0:	6003      	str	r3, [r0, #0]
 800aaa2:	ecbd 8b02 	vpop	{d8}
 800aaa6:	bd08      	pop	{r3, pc}
 800aaa8:	00000000 	.word	0x00000000

0800aaac <cosf>:
 800aaac:	ee10 3a10 	vmov	r3, s0
 800aab0:	b507      	push	{r0, r1, r2, lr}
 800aab2:	4a1e      	ldr	r2, [pc, #120]	; (800ab2c <cosf+0x80>)
 800aab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aab8:	4293      	cmp	r3, r2
 800aaba:	dc06      	bgt.n	800aaca <cosf+0x1e>
 800aabc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800ab30 <cosf+0x84>
 800aac0:	b003      	add	sp, #12
 800aac2:	f85d eb04 	ldr.w	lr, [sp], #4
 800aac6:	f001 bc23 	b.w	800c310 <__kernel_cosf>
 800aaca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aace:	db04      	blt.n	800aada <cosf+0x2e>
 800aad0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800aad4:	b003      	add	sp, #12
 800aad6:	f85d fb04 	ldr.w	pc, [sp], #4
 800aada:	4668      	mov	r0, sp
 800aadc:	f001 fd5e 	bl	800c59c <__ieee754_rem_pio2f>
 800aae0:	f000 0003 	and.w	r0, r0, #3
 800aae4:	2801      	cmp	r0, #1
 800aae6:	d009      	beq.n	800aafc <cosf+0x50>
 800aae8:	2802      	cmp	r0, #2
 800aaea:	d010      	beq.n	800ab0e <cosf+0x62>
 800aaec:	b9b0      	cbnz	r0, 800ab1c <cosf+0x70>
 800aaee:	eddd 0a01 	vldr	s1, [sp, #4]
 800aaf2:	ed9d 0a00 	vldr	s0, [sp]
 800aaf6:	f001 fc0b 	bl	800c310 <__kernel_cosf>
 800aafa:	e7eb      	b.n	800aad4 <cosf+0x28>
 800aafc:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab00:	ed9d 0a00 	vldr	s0, [sp]
 800ab04:	f001 fc62 	bl	800c3cc <__kernel_sinf>
 800ab08:	eeb1 0a40 	vneg.f32	s0, s0
 800ab0c:	e7e2      	b.n	800aad4 <cosf+0x28>
 800ab0e:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab12:	ed9d 0a00 	vldr	s0, [sp]
 800ab16:	f001 fbfb 	bl	800c310 <__kernel_cosf>
 800ab1a:	e7f5      	b.n	800ab08 <cosf+0x5c>
 800ab1c:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab20:	ed9d 0a00 	vldr	s0, [sp]
 800ab24:	2001      	movs	r0, #1
 800ab26:	f001 fc51 	bl	800c3cc <__kernel_sinf>
 800ab2a:	e7d3      	b.n	800aad4 <cosf+0x28>
 800ab2c:	3f490fd8 	.word	0x3f490fd8
 800ab30:	00000000 	.word	0x00000000

0800ab34 <sinf>:
 800ab34:	ee10 3a10 	vmov	r3, s0
 800ab38:	b507      	push	{r0, r1, r2, lr}
 800ab3a:	4a1f      	ldr	r2, [pc, #124]	; (800abb8 <sinf+0x84>)
 800ab3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab40:	4293      	cmp	r3, r2
 800ab42:	dc07      	bgt.n	800ab54 <sinf+0x20>
 800ab44:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800abbc <sinf+0x88>
 800ab48:	2000      	movs	r0, #0
 800ab4a:	b003      	add	sp, #12
 800ab4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab50:	f001 bc3c 	b.w	800c3cc <__kernel_sinf>
 800ab54:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ab58:	db04      	blt.n	800ab64 <sinf+0x30>
 800ab5a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ab5e:	b003      	add	sp, #12
 800ab60:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab64:	4668      	mov	r0, sp
 800ab66:	f001 fd19 	bl	800c59c <__ieee754_rem_pio2f>
 800ab6a:	f000 0003 	and.w	r0, r0, #3
 800ab6e:	2801      	cmp	r0, #1
 800ab70:	d00a      	beq.n	800ab88 <sinf+0x54>
 800ab72:	2802      	cmp	r0, #2
 800ab74:	d00f      	beq.n	800ab96 <sinf+0x62>
 800ab76:	b9c0      	cbnz	r0, 800abaa <sinf+0x76>
 800ab78:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab7c:	ed9d 0a00 	vldr	s0, [sp]
 800ab80:	2001      	movs	r0, #1
 800ab82:	f001 fc23 	bl	800c3cc <__kernel_sinf>
 800ab86:	e7ea      	b.n	800ab5e <sinf+0x2a>
 800ab88:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab8c:	ed9d 0a00 	vldr	s0, [sp]
 800ab90:	f001 fbbe 	bl	800c310 <__kernel_cosf>
 800ab94:	e7e3      	b.n	800ab5e <sinf+0x2a>
 800ab96:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab9a:	ed9d 0a00 	vldr	s0, [sp]
 800ab9e:	2001      	movs	r0, #1
 800aba0:	f001 fc14 	bl	800c3cc <__kernel_sinf>
 800aba4:	eeb1 0a40 	vneg.f32	s0, s0
 800aba8:	e7d9      	b.n	800ab5e <sinf+0x2a>
 800abaa:	eddd 0a01 	vldr	s1, [sp, #4]
 800abae:	ed9d 0a00 	vldr	s0, [sp]
 800abb2:	f001 fbad 	bl	800c310 <__kernel_cosf>
 800abb6:	e7f5      	b.n	800aba4 <sinf+0x70>
 800abb8:	3f490fd8 	.word	0x3f490fd8
 800abbc:	00000000 	.word	0x00000000

0800abc0 <finite>:
 800abc0:	b082      	sub	sp, #8
 800abc2:	ed8d 0b00 	vstr	d0, [sp]
 800abc6:	9801      	ldr	r0, [sp, #4]
 800abc8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800abcc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800abd0:	0fc0      	lsrs	r0, r0, #31
 800abd2:	b002      	add	sp, #8
 800abd4:	4770      	bx	lr
	...

0800abd8 <nan>:
 800abd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800abe0 <nan+0x8>
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	00000000 	.word	0x00000000
 800abe4:	7ff80000 	.word	0x7ff80000

0800abe8 <__ieee754_sqrt>:
 800abe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	ec55 4b10 	vmov	r4, r5, d0
 800abf0:	4e67      	ldr	r6, [pc, #412]	; (800ad90 <__ieee754_sqrt+0x1a8>)
 800abf2:	43ae      	bics	r6, r5
 800abf4:	ee10 0a10 	vmov	r0, s0
 800abf8:	ee10 2a10 	vmov	r2, s0
 800abfc:	4629      	mov	r1, r5
 800abfe:	462b      	mov	r3, r5
 800ac00:	d10d      	bne.n	800ac1e <__ieee754_sqrt+0x36>
 800ac02:	f7f5 fcf1 	bl	80005e8 <__aeabi_dmul>
 800ac06:	4602      	mov	r2, r0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f7f5 fb35 	bl	800027c <__adddf3>
 800ac12:	4604      	mov	r4, r0
 800ac14:	460d      	mov	r5, r1
 800ac16:	ec45 4b10 	vmov	d0, r4, r5
 800ac1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1e:	2d00      	cmp	r5, #0
 800ac20:	dc0b      	bgt.n	800ac3a <__ieee754_sqrt+0x52>
 800ac22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ac26:	4326      	orrs	r6, r4
 800ac28:	d0f5      	beq.n	800ac16 <__ieee754_sqrt+0x2e>
 800ac2a:	b135      	cbz	r5, 800ac3a <__ieee754_sqrt+0x52>
 800ac2c:	f7f5 fb24 	bl	8000278 <__aeabi_dsub>
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	f7f5 fe02 	bl	800083c <__aeabi_ddiv>
 800ac38:	e7eb      	b.n	800ac12 <__ieee754_sqrt+0x2a>
 800ac3a:	1509      	asrs	r1, r1, #20
 800ac3c:	f000 808d 	beq.w	800ad5a <__ieee754_sqrt+0x172>
 800ac40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac44:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ac48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac4c:	07c9      	lsls	r1, r1, #31
 800ac4e:	bf5c      	itt	pl
 800ac50:	005b      	lslpl	r3, r3, #1
 800ac52:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ac56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ac5a:	bf58      	it	pl
 800ac5c:	0052      	lslpl	r2, r2, #1
 800ac5e:	2500      	movs	r5, #0
 800ac60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ac64:	1076      	asrs	r6, r6, #1
 800ac66:	0052      	lsls	r2, r2, #1
 800ac68:	f04f 0e16 	mov.w	lr, #22
 800ac6c:	46ac      	mov	ip, r5
 800ac6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac72:	eb0c 0001 	add.w	r0, ip, r1
 800ac76:	4298      	cmp	r0, r3
 800ac78:	bfde      	ittt	le
 800ac7a:	1a1b      	suble	r3, r3, r0
 800ac7c:	eb00 0c01 	addle.w	ip, r0, r1
 800ac80:	186d      	addle	r5, r5, r1
 800ac82:	005b      	lsls	r3, r3, #1
 800ac84:	f1be 0e01 	subs.w	lr, lr, #1
 800ac88:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ac8c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ac90:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ac94:	d1ed      	bne.n	800ac72 <__ieee754_sqrt+0x8a>
 800ac96:	4674      	mov	r4, lr
 800ac98:	2720      	movs	r7, #32
 800ac9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ac9e:	4563      	cmp	r3, ip
 800aca0:	eb01 000e 	add.w	r0, r1, lr
 800aca4:	dc02      	bgt.n	800acac <__ieee754_sqrt+0xc4>
 800aca6:	d113      	bne.n	800acd0 <__ieee754_sqrt+0xe8>
 800aca8:	4290      	cmp	r0, r2
 800acaa:	d811      	bhi.n	800acd0 <__ieee754_sqrt+0xe8>
 800acac:	2800      	cmp	r0, #0
 800acae:	eb00 0e01 	add.w	lr, r0, r1
 800acb2:	da57      	bge.n	800ad64 <__ieee754_sqrt+0x17c>
 800acb4:	f1be 0f00 	cmp.w	lr, #0
 800acb8:	db54      	blt.n	800ad64 <__ieee754_sqrt+0x17c>
 800acba:	f10c 0801 	add.w	r8, ip, #1
 800acbe:	eba3 030c 	sub.w	r3, r3, ip
 800acc2:	4290      	cmp	r0, r2
 800acc4:	bf88      	it	hi
 800acc6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800acca:	1a12      	subs	r2, r2, r0
 800accc:	440c      	add	r4, r1
 800acce:	46c4      	mov	ip, r8
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	3f01      	subs	r7, #1
 800acd4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800acd8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800acdc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ace0:	d1dd      	bne.n	800ac9e <__ieee754_sqrt+0xb6>
 800ace2:	4313      	orrs	r3, r2
 800ace4:	d01b      	beq.n	800ad1e <__ieee754_sqrt+0x136>
 800ace6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800ad94 <__ieee754_sqrt+0x1ac>
 800acea:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ad98 <__ieee754_sqrt+0x1b0>
 800acee:	e9da 0100 	ldrd	r0, r1, [sl]
 800acf2:	e9db 2300 	ldrd	r2, r3, [fp]
 800acf6:	f7f5 fabf 	bl	8000278 <__aeabi_dsub>
 800acfa:	e9da 8900 	ldrd	r8, r9, [sl]
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	4640      	mov	r0, r8
 800ad04:	4649      	mov	r1, r9
 800ad06:	f7f5 feeb 	bl	8000ae0 <__aeabi_dcmple>
 800ad0a:	b140      	cbz	r0, 800ad1e <__ieee754_sqrt+0x136>
 800ad0c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ad10:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad14:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad18:	d126      	bne.n	800ad68 <__ieee754_sqrt+0x180>
 800ad1a:	3501      	adds	r5, #1
 800ad1c:	463c      	mov	r4, r7
 800ad1e:	106a      	asrs	r2, r5, #1
 800ad20:	0863      	lsrs	r3, r4, #1
 800ad22:	07e9      	lsls	r1, r5, #31
 800ad24:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ad28:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ad2c:	bf48      	it	mi
 800ad2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ad32:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ad36:	461c      	mov	r4, r3
 800ad38:	e76d      	b.n	800ac16 <__ieee754_sqrt+0x2e>
 800ad3a:	0ad3      	lsrs	r3, r2, #11
 800ad3c:	3815      	subs	r0, #21
 800ad3e:	0552      	lsls	r2, r2, #21
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d0fa      	beq.n	800ad3a <__ieee754_sqrt+0x152>
 800ad44:	02dc      	lsls	r4, r3, #11
 800ad46:	d50a      	bpl.n	800ad5e <__ieee754_sqrt+0x176>
 800ad48:	f1c1 0420 	rsb	r4, r1, #32
 800ad4c:	fa22 f404 	lsr.w	r4, r2, r4
 800ad50:	1e4d      	subs	r5, r1, #1
 800ad52:	408a      	lsls	r2, r1
 800ad54:	4323      	orrs	r3, r4
 800ad56:	1b41      	subs	r1, r0, r5
 800ad58:	e772      	b.n	800ac40 <__ieee754_sqrt+0x58>
 800ad5a:	4608      	mov	r0, r1
 800ad5c:	e7f0      	b.n	800ad40 <__ieee754_sqrt+0x158>
 800ad5e:	005b      	lsls	r3, r3, #1
 800ad60:	3101      	adds	r1, #1
 800ad62:	e7ef      	b.n	800ad44 <__ieee754_sqrt+0x15c>
 800ad64:	46e0      	mov	r8, ip
 800ad66:	e7aa      	b.n	800acbe <__ieee754_sqrt+0xd6>
 800ad68:	f7f5 fa88 	bl	800027c <__adddf3>
 800ad6c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4640      	mov	r0, r8
 800ad76:	4649      	mov	r1, r9
 800ad78:	f7f5 fea8 	bl	8000acc <__aeabi_dcmplt>
 800ad7c:	b120      	cbz	r0, 800ad88 <__ieee754_sqrt+0x1a0>
 800ad7e:	1ca0      	adds	r0, r4, #2
 800ad80:	bf08      	it	eq
 800ad82:	3501      	addeq	r5, #1
 800ad84:	3402      	adds	r4, #2
 800ad86:	e7ca      	b.n	800ad1e <__ieee754_sqrt+0x136>
 800ad88:	3401      	adds	r4, #1
 800ad8a:	f024 0401 	bic.w	r4, r4, #1
 800ad8e:	e7c6      	b.n	800ad1e <__ieee754_sqrt+0x136>
 800ad90:	7ff00000 	.word	0x7ff00000
 800ad94:	20000020 	.word	0x20000020
 800ad98:	20000028 	.word	0x20000028

0800ad9c <__ieee754_sqrtf>:
 800ad9c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ada0:	4770      	bx	lr
 800ada2:	0000      	movs	r0, r0
 800ada4:	0000      	movs	r0, r0
	...

0800ada8 <__ieee754_asin>:
 800ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	ed2d 8b04 	vpush	{d8-d9}
 800adb0:	ec55 4b10 	vmov	r4, r5, d0
 800adb4:	4bcc      	ldr	r3, [pc, #816]	; (800b0e8 <__ieee754_asin+0x340>)
 800adb6:	b083      	sub	sp, #12
 800adb8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800adbc:	4598      	cmp	r8, r3
 800adbe:	9501      	str	r5, [sp, #4]
 800adc0:	dd33      	ble.n	800ae2a <__ieee754_asin+0x82>
 800adc2:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800adc6:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800adca:	ea58 0804 	orrs.w	r8, r8, r4
 800adce:	d117      	bne.n	800ae00 <__ieee754_asin+0x58>
 800add0:	a3ab      	add	r3, pc, #684	; (adr r3, 800b080 <__ieee754_asin+0x2d8>)
 800add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add6:	ee10 0a10 	vmov	r0, s0
 800adda:	4629      	mov	r1, r5
 800addc:	f7f5 fc04 	bl	80005e8 <__aeabi_dmul>
 800ade0:	a3a9      	add	r3, pc, #676	; (adr r3, 800b088 <__ieee754_asin+0x2e0>)
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	4606      	mov	r6, r0
 800ade8:	460f      	mov	r7, r1
 800adea:	4620      	mov	r0, r4
 800adec:	4629      	mov	r1, r5
 800adee:	f7f5 fbfb 	bl	80005e8 <__aeabi_dmul>
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	4630      	mov	r0, r6
 800adf8:	4639      	mov	r1, r7
 800adfa:	f7f5 fa3f 	bl	800027c <__adddf3>
 800adfe:	e00b      	b.n	800ae18 <__ieee754_asin+0x70>
 800ae00:	ee10 2a10 	vmov	r2, s0
 800ae04:	462b      	mov	r3, r5
 800ae06:	ee10 0a10 	vmov	r0, s0
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	f7f5 fa34 	bl	8000278 <__aeabi_dsub>
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	f7f5 fd12 	bl	800083c <__aeabi_ddiv>
 800ae18:	4604      	mov	r4, r0
 800ae1a:	460d      	mov	r5, r1
 800ae1c:	ec45 4b10 	vmov	d0, r4, r5
 800ae20:	b003      	add	sp, #12
 800ae22:	ecbd 8b04 	vpop	{d8-d9}
 800ae26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2a:	4bb0      	ldr	r3, [pc, #704]	; (800b0ec <__ieee754_asin+0x344>)
 800ae2c:	4598      	cmp	r8, r3
 800ae2e:	dc11      	bgt.n	800ae54 <__ieee754_asin+0xac>
 800ae30:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ae34:	f280 80ae 	bge.w	800af94 <__ieee754_asin+0x1ec>
 800ae38:	a395      	add	r3, pc, #596	; (adr r3, 800b090 <__ieee754_asin+0x2e8>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	ee10 0a10 	vmov	r0, s0
 800ae42:	4629      	mov	r1, r5
 800ae44:	f7f5 fa1a 	bl	800027c <__adddf3>
 800ae48:	4ba9      	ldr	r3, [pc, #676]	; (800b0f0 <__ieee754_asin+0x348>)
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f7f5 fe5c 	bl	8000b08 <__aeabi_dcmpgt>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d1e3      	bne.n	800ae1c <__ieee754_asin+0x74>
 800ae54:	ec45 4b10 	vmov	d0, r4, r5
 800ae58:	f7ff fdfe 	bl	800aa58 <fabs>
 800ae5c:	49a4      	ldr	r1, [pc, #656]	; (800b0f0 <__ieee754_asin+0x348>)
 800ae5e:	ec53 2b10 	vmov	r2, r3, d0
 800ae62:	2000      	movs	r0, #0
 800ae64:	f7f5 fa08 	bl	8000278 <__aeabi_dsub>
 800ae68:	4ba2      	ldr	r3, [pc, #648]	; (800b0f4 <__ieee754_asin+0x34c>)
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f7f5 fbbc 	bl	80005e8 <__aeabi_dmul>
 800ae70:	a389      	add	r3, pc, #548	; (adr r3, 800b098 <__ieee754_asin+0x2f0>)
 800ae72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae76:	4604      	mov	r4, r0
 800ae78:	460d      	mov	r5, r1
 800ae7a:	f7f5 fbb5 	bl	80005e8 <__aeabi_dmul>
 800ae7e:	a388      	add	r3, pc, #544	; (adr r3, 800b0a0 <__ieee754_asin+0x2f8>)
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	f7f5 f9fa 	bl	800027c <__adddf3>
 800ae88:	4622      	mov	r2, r4
 800ae8a:	462b      	mov	r3, r5
 800ae8c:	f7f5 fbac 	bl	80005e8 <__aeabi_dmul>
 800ae90:	a385      	add	r3, pc, #532	; (adr r3, 800b0a8 <__ieee754_asin+0x300>)
 800ae92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae96:	f7f5 f9ef 	bl	8000278 <__aeabi_dsub>
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	462b      	mov	r3, r5
 800ae9e:	f7f5 fba3 	bl	80005e8 <__aeabi_dmul>
 800aea2:	a383      	add	r3, pc, #524	; (adr r3, 800b0b0 <__ieee754_asin+0x308>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	f7f5 f9e8 	bl	800027c <__adddf3>
 800aeac:	4622      	mov	r2, r4
 800aeae:	462b      	mov	r3, r5
 800aeb0:	f7f5 fb9a 	bl	80005e8 <__aeabi_dmul>
 800aeb4:	a380      	add	r3, pc, #512	; (adr r3, 800b0b8 <__ieee754_asin+0x310>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f7f5 f9dd 	bl	8000278 <__aeabi_dsub>
 800aebe:	4622      	mov	r2, r4
 800aec0:	462b      	mov	r3, r5
 800aec2:	f7f5 fb91 	bl	80005e8 <__aeabi_dmul>
 800aec6:	a37e      	add	r3, pc, #504	; (adr r3, 800b0c0 <__ieee754_asin+0x318>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	f7f5 f9d6 	bl	800027c <__adddf3>
 800aed0:	4622      	mov	r2, r4
 800aed2:	462b      	mov	r3, r5
 800aed4:	f7f5 fb88 	bl	80005e8 <__aeabi_dmul>
 800aed8:	a37b      	add	r3, pc, #492	; (adr r3, 800b0c8 <__ieee754_asin+0x320>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	ec41 0b18 	vmov	d8, r0, r1
 800aee2:	4620      	mov	r0, r4
 800aee4:	4629      	mov	r1, r5
 800aee6:	f7f5 fb7f 	bl	80005e8 <__aeabi_dmul>
 800aeea:	a379      	add	r3, pc, #484	; (adr r3, 800b0d0 <__ieee754_asin+0x328>)
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	f7f5 f9c2 	bl	8000278 <__aeabi_dsub>
 800aef4:	4622      	mov	r2, r4
 800aef6:	462b      	mov	r3, r5
 800aef8:	f7f5 fb76 	bl	80005e8 <__aeabi_dmul>
 800aefc:	a376      	add	r3, pc, #472	; (adr r3, 800b0d8 <__ieee754_asin+0x330>)
 800aefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af02:	f7f5 f9bb 	bl	800027c <__adddf3>
 800af06:	4622      	mov	r2, r4
 800af08:	462b      	mov	r3, r5
 800af0a:	f7f5 fb6d 	bl	80005e8 <__aeabi_dmul>
 800af0e:	a374      	add	r3, pc, #464	; (adr r3, 800b0e0 <__ieee754_asin+0x338>)
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	f7f5 f9b0 	bl	8000278 <__aeabi_dsub>
 800af18:	4622      	mov	r2, r4
 800af1a:	462b      	mov	r3, r5
 800af1c:	f7f5 fb64 	bl	80005e8 <__aeabi_dmul>
 800af20:	4b73      	ldr	r3, [pc, #460]	; (800b0f0 <__ieee754_asin+0x348>)
 800af22:	2200      	movs	r2, #0
 800af24:	f7f5 f9aa 	bl	800027c <__adddf3>
 800af28:	ec45 4b10 	vmov	d0, r4, r5
 800af2c:	4606      	mov	r6, r0
 800af2e:	460f      	mov	r7, r1
 800af30:	f7ff fe5a 	bl	800abe8 <__ieee754_sqrt>
 800af34:	4b70      	ldr	r3, [pc, #448]	; (800b0f8 <__ieee754_asin+0x350>)
 800af36:	4598      	cmp	r8, r3
 800af38:	ec5b ab10 	vmov	sl, fp, d0
 800af3c:	f340 80de 	ble.w	800b0fc <__ieee754_asin+0x354>
 800af40:	4632      	mov	r2, r6
 800af42:	463b      	mov	r3, r7
 800af44:	ec51 0b18 	vmov	r0, r1, d8
 800af48:	f7f5 fc78 	bl	800083c <__aeabi_ddiv>
 800af4c:	4652      	mov	r2, sl
 800af4e:	465b      	mov	r3, fp
 800af50:	f7f5 fb4a 	bl	80005e8 <__aeabi_dmul>
 800af54:	4652      	mov	r2, sl
 800af56:	465b      	mov	r3, fp
 800af58:	f7f5 f990 	bl	800027c <__adddf3>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	f7f5 f98c 	bl	800027c <__adddf3>
 800af64:	a348      	add	r3, pc, #288	; (adr r3, 800b088 <__ieee754_asin+0x2e0>)
 800af66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6a:	f7f5 f985 	bl	8000278 <__aeabi_dsub>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	a143      	add	r1, pc, #268	; (adr r1, 800b080 <__ieee754_asin+0x2d8>)
 800af74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af78:	f7f5 f97e 	bl	8000278 <__aeabi_dsub>
 800af7c:	9b01      	ldr	r3, [sp, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bfdc      	itt	le
 800af82:	4602      	movle	r2, r0
 800af84:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800af88:	4604      	mov	r4, r0
 800af8a:	460d      	mov	r5, r1
 800af8c:	bfdc      	itt	le
 800af8e:	4614      	movle	r4, r2
 800af90:	461d      	movle	r5, r3
 800af92:	e743      	b.n	800ae1c <__ieee754_asin+0x74>
 800af94:	ee10 2a10 	vmov	r2, s0
 800af98:	ee10 0a10 	vmov	r0, s0
 800af9c:	462b      	mov	r3, r5
 800af9e:	4629      	mov	r1, r5
 800afa0:	f7f5 fb22 	bl	80005e8 <__aeabi_dmul>
 800afa4:	a33c      	add	r3, pc, #240	; (adr r3, 800b098 <__ieee754_asin+0x2f0>)
 800afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afaa:	4606      	mov	r6, r0
 800afac:	460f      	mov	r7, r1
 800afae:	f7f5 fb1b 	bl	80005e8 <__aeabi_dmul>
 800afb2:	a33b      	add	r3, pc, #236	; (adr r3, 800b0a0 <__ieee754_asin+0x2f8>)
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f7f5 f960 	bl	800027c <__adddf3>
 800afbc:	4632      	mov	r2, r6
 800afbe:	463b      	mov	r3, r7
 800afc0:	f7f5 fb12 	bl	80005e8 <__aeabi_dmul>
 800afc4:	a338      	add	r3, pc, #224	; (adr r3, 800b0a8 <__ieee754_asin+0x300>)
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	f7f5 f955 	bl	8000278 <__aeabi_dsub>
 800afce:	4632      	mov	r2, r6
 800afd0:	463b      	mov	r3, r7
 800afd2:	f7f5 fb09 	bl	80005e8 <__aeabi_dmul>
 800afd6:	a336      	add	r3, pc, #216	; (adr r3, 800b0b0 <__ieee754_asin+0x308>)
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f7f5 f94e 	bl	800027c <__adddf3>
 800afe0:	4632      	mov	r2, r6
 800afe2:	463b      	mov	r3, r7
 800afe4:	f7f5 fb00 	bl	80005e8 <__aeabi_dmul>
 800afe8:	a333      	add	r3, pc, #204	; (adr r3, 800b0b8 <__ieee754_asin+0x310>)
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	f7f5 f943 	bl	8000278 <__aeabi_dsub>
 800aff2:	4632      	mov	r2, r6
 800aff4:	463b      	mov	r3, r7
 800aff6:	f7f5 faf7 	bl	80005e8 <__aeabi_dmul>
 800affa:	a331      	add	r3, pc, #196	; (adr r3, 800b0c0 <__ieee754_asin+0x318>)
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	f7f5 f93c 	bl	800027c <__adddf3>
 800b004:	4632      	mov	r2, r6
 800b006:	463b      	mov	r3, r7
 800b008:	f7f5 faee 	bl	80005e8 <__aeabi_dmul>
 800b00c:	a32e      	add	r3, pc, #184	; (adr r3, 800b0c8 <__ieee754_asin+0x320>)
 800b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b012:	4680      	mov	r8, r0
 800b014:	4689      	mov	r9, r1
 800b016:	4630      	mov	r0, r6
 800b018:	4639      	mov	r1, r7
 800b01a:	f7f5 fae5 	bl	80005e8 <__aeabi_dmul>
 800b01e:	a32c      	add	r3, pc, #176	; (adr r3, 800b0d0 <__ieee754_asin+0x328>)
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	f7f5 f928 	bl	8000278 <__aeabi_dsub>
 800b028:	4632      	mov	r2, r6
 800b02a:	463b      	mov	r3, r7
 800b02c:	f7f5 fadc 	bl	80005e8 <__aeabi_dmul>
 800b030:	a329      	add	r3, pc, #164	; (adr r3, 800b0d8 <__ieee754_asin+0x330>)
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	f7f5 f921 	bl	800027c <__adddf3>
 800b03a:	4632      	mov	r2, r6
 800b03c:	463b      	mov	r3, r7
 800b03e:	f7f5 fad3 	bl	80005e8 <__aeabi_dmul>
 800b042:	a327      	add	r3, pc, #156	; (adr r3, 800b0e0 <__ieee754_asin+0x338>)
 800b044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b048:	f7f5 f916 	bl	8000278 <__aeabi_dsub>
 800b04c:	4632      	mov	r2, r6
 800b04e:	463b      	mov	r3, r7
 800b050:	f7f5 faca 	bl	80005e8 <__aeabi_dmul>
 800b054:	4b26      	ldr	r3, [pc, #152]	; (800b0f0 <__ieee754_asin+0x348>)
 800b056:	2200      	movs	r2, #0
 800b058:	f7f5 f910 	bl	800027c <__adddf3>
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	4640      	mov	r0, r8
 800b062:	4649      	mov	r1, r9
 800b064:	f7f5 fbea 	bl	800083c <__aeabi_ddiv>
 800b068:	4622      	mov	r2, r4
 800b06a:	462b      	mov	r3, r5
 800b06c:	f7f5 fabc 	bl	80005e8 <__aeabi_dmul>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4620      	mov	r0, r4
 800b076:	4629      	mov	r1, r5
 800b078:	e6bf      	b.n	800adfa <__ieee754_asin+0x52>
 800b07a:	bf00      	nop
 800b07c:	f3af 8000 	nop.w
 800b080:	54442d18 	.word	0x54442d18
 800b084:	3ff921fb 	.word	0x3ff921fb
 800b088:	33145c07 	.word	0x33145c07
 800b08c:	3c91a626 	.word	0x3c91a626
 800b090:	8800759c 	.word	0x8800759c
 800b094:	7e37e43c 	.word	0x7e37e43c
 800b098:	0dfdf709 	.word	0x0dfdf709
 800b09c:	3f023de1 	.word	0x3f023de1
 800b0a0:	7501b288 	.word	0x7501b288
 800b0a4:	3f49efe0 	.word	0x3f49efe0
 800b0a8:	b5688f3b 	.word	0xb5688f3b
 800b0ac:	3fa48228 	.word	0x3fa48228
 800b0b0:	0e884455 	.word	0x0e884455
 800b0b4:	3fc9c155 	.word	0x3fc9c155
 800b0b8:	03eb6f7d 	.word	0x03eb6f7d
 800b0bc:	3fd4d612 	.word	0x3fd4d612
 800b0c0:	55555555 	.word	0x55555555
 800b0c4:	3fc55555 	.word	0x3fc55555
 800b0c8:	b12e9282 	.word	0xb12e9282
 800b0cc:	3fb3b8c5 	.word	0x3fb3b8c5
 800b0d0:	1b8d0159 	.word	0x1b8d0159
 800b0d4:	3fe6066c 	.word	0x3fe6066c
 800b0d8:	9c598ac8 	.word	0x9c598ac8
 800b0dc:	40002ae5 	.word	0x40002ae5
 800b0e0:	1c8a2d4b 	.word	0x1c8a2d4b
 800b0e4:	40033a27 	.word	0x40033a27
 800b0e8:	3fefffff 	.word	0x3fefffff
 800b0ec:	3fdfffff 	.word	0x3fdfffff
 800b0f0:	3ff00000 	.word	0x3ff00000
 800b0f4:	3fe00000 	.word	0x3fe00000
 800b0f8:	3fef3332 	.word	0x3fef3332
 800b0fc:	ee10 2a10 	vmov	r2, s0
 800b100:	ee10 0a10 	vmov	r0, s0
 800b104:	465b      	mov	r3, fp
 800b106:	4659      	mov	r1, fp
 800b108:	f7f5 f8b8 	bl	800027c <__adddf3>
 800b10c:	4632      	mov	r2, r6
 800b10e:	463b      	mov	r3, r7
 800b110:	ec41 0b19 	vmov	d9, r0, r1
 800b114:	ec51 0b18 	vmov	r0, r1, d8
 800b118:	f7f5 fb90 	bl	800083c <__aeabi_ddiv>
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	ec51 0b19 	vmov	r0, r1, d9
 800b124:	f7f5 fa60 	bl	80005e8 <__aeabi_dmul>
 800b128:	f04f 0800 	mov.w	r8, #0
 800b12c:	4606      	mov	r6, r0
 800b12e:	460f      	mov	r7, r1
 800b130:	4642      	mov	r2, r8
 800b132:	465b      	mov	r3, fp
 800b134:	4640      	mov	r0, r8
 800b136:	4659      	mov	r1, fp
 800b138:	f7f5 fa56 	bl	80005e8 <__aeabi_dmul>
 800b13c:	4602      	mov	r2, r0
 800b13e:	460b      	mov	r3, r1
 800b140:	4620      	mov	r0, r4
 800b142:	4629      	mov	r1, r5
 800b144:	f7f5 f898 	bl	8000278 <__aeabi_dsub>
 800b148:	4642      	mov	r2, r8
 800b14a:	4604      	mov	r4, r0
 800b14c:	460d      	mov	r5, r1
 800b14e:	465b      	mov	r3, fp
 800b150:	4650      	mov	r0, sl
 800b152:	4659      	mov	r1, fp
 800b154:	f7f5 f892 	bl	800027c <__adddf3>
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	4620      	mov	r0, r4
 800b15e:	4629      	mov	r1, r5
 800b160:	f7f5 fb6c 	bl	800083c <__aeabi_ddiv>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	f7f5 f888 	bl	800027c <__adddf3>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	a113      	add	r1, pc, #76	; (adr r1, 800b1c0 <__ieee754_asin+0x418>)
 800b172:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b176:	f7f5 f87f 	bl	8000278 <__aeabi_dsub>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	4630      	mov	r0, r6
 800b180:	4639      	mov	r1, r7
 800b182:	f7f5 f879 	bl	8000278 <__aeabi_dsub>
 800b186:	4642      	mov	r2, r8
 800b188:	4604      	mov	r4, r0
 800b18a:	460d      	mov	r5, r1
 800b18c:	465b      	mov	r3, fp
 800b18e:	4640      	mov	r0, r8
 800b190:	4659      	mov	r1, fp
 800b192:	f7f5 f873 	bl	800027c <__adddf3>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	a10b      	add	r1, pc, #44	; (adr r1, 800b1c8 <__ieee754_asin+0x420>)
 800b19c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1a0:	f7f5 f86a 	bl	8000278 <__aeabi_dsub>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	f7f5 f864 	bl	8000278 <__aeabi_dsub>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	a104      	add	r1, pc, #16	; (adr r1, 800b1c8 <__ieee754_asin+0x420>)
 800b1b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1ba:	e6dd      	b.n	800af78 <__ieee754_asin+0x1d0>
 800b1bc:	f3af 8000 	nop.w
 800b1c0:	33145c07 	.word	0x33145c07
 800b1c4:	3c91a626 	.word	0x3c91a626
 800b1c8:	54442d18 	.word	0x54442d18
 800b1cc:	3fe921fb 	.word	0x3fe921fb

0800b1d0 <__ieee754_atan2>:
 800b1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1d4:	ec57 6b11 	vmov	r6, r7, d1
 800b1d8:	4273      	negs	r3, r6
 800b1da:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b358 <__ieee754_atan2+0x188>
 800b1de:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b1e2:	4333      	orrs	r3, r6
 800b1e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b1e8:	4543      	cmp	r3, r8
 800b1ea:	ec51 0b10 	vmov	r0, r1, d0
 800b1ee:	ee11 5a10 	vmov	r5, s2
 800b1f2:	d80a      	bhi.n	800b20a <__ieee754_atan2+0x3a>
 800b1f4:	4244      	negs	r4, r0
 800b1f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b1fa:	4304      	orrs	r4, r0
 800b1fc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b200:	4544      	cmp	r4, r8
 800b202:	ee10 9a10 	vmov	r9, s0
 800b206:	468e      	mov	lr, r1
 800b208:	d907      	bls.n	800b21a <__ieee754_atan2+0x4a>
 800b20a:	4632      	mov	r2, r6
 800b20c:	463b      	mov	r3, r7
 800b20e:	f7f5 f835 	bl	800027c <__adddf3>
 800b212:	ec41 0b10 	vmov	d0, r0, r1
 800b216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b21a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b21e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b222:	4334      	orrs	r4, r6
 800b224:	d103      	bne.n	800b22e <__ieee754_atan2+0x5e>
 800b226:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b22a:	f000 bed1 	b.w	800bfd0 <atan>
 800b22e:	17bc      	asrs	r4, r7, #30
 800b230:	f004 0402 	and.w	r4, r4, #2
 800b234:	ea53 0909 	orrs.w	r9, r3, r9
 800b238:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b23c:	d107      	bne.n	800b24e <__ieee754_atan2+0x7e>
 800b23e:	2c02      	cmp	r4, #2
 800b240:	d05f      	beq.n	800b302 <__ieee754_atan2+0x132>
 800b242:	2c03      	cmp	r4, #3
 800b244:	d1e5      	bne.n	800b212 <__ieee754_atan2+0x42>
 800b246:	a140      	add	r1, pc, #256	; (adr r1, 800b348 <__ieee754_atan2+0x178>)
 800b248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b24c:	e7e1      	b.n	800b212 <__ieee754_atan2+0x42>
 800b24e:	4315      	orrs	r5, r2
 800b250:	d106      	bne.n	800b260 <__ieee754_atan2+0x90>
 800b252:	f1be 0f00 	cmp.w	lr, #0
 800b256:	da5f      	bge.n	800b318 <__ieee754_atan2+0x148>
 800b258:	a13d      	add	r1, pc, #244	; (adr r1, 800b350 <__ieee754_atan2+0x180>)
 800b25a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b25e:	e7d8      	b.n	800b212 <__ieee754_atan2+0x42>
 800b260:	4542      	cmp	r2, r8
 800b262:	d10f      	bne.n	800b284 <__ieee754_atan2+0xb4>
 800b264:	4293      	cmp	r3, r2
 800b266:	f104 34ff 	add.w	r4, r4, #4294967295
 800b26a:	d107      	bne.n	800b27c <__ieee754_atan2+0xac>
 800b26c:	2c02      	cmp	r4, #2
 800b26e:	d84c      	bhi.n	800b30a <__ieee754_atan2+0x13a>
 800b270:	4b33      	ldr	r3, [pc, #204]	; (800b340 <__ieee754_atan2+0x170>)
 800b272:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b276:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b27a:	e7ca      	b.n	800b212 <__ieee754_atan2+0x42>
 800b27c:	2c02      	cmp	r4, #2
 800b27e:	d848      	bhi.n	800b312 <__ieee754_atan2+0x142>
 800b280:	4b30      	ldr	r3, [pc, #192]	; (800b344 <__ieee754_atan2+0x174>)
 800b282:	e7f6      	b.n	800b272 <__ieee754_atan2+0xa2>
 800b284:	4543      	cmp	r3, r8
 800b286:	d0e4      	beq.n	800b252 <__ieee754_atan2+0x82>
 800b288:	1a9b      	subs	r3, r3, r2
 800b28a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b28e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b292:	da1e      	bge.n	800b2d2 <__ieee754_atan2+0x102>
 800b294:	2f00      	cmp	r7, #0
 800b296:	da01      	bge.n	800b29c <__ieee754_atan2+0xcc>
 800b298:	323c      	adds	r2, #60	; 0x3c
 800b29a:	db1e      	blt.n	800b2da <__ieee754_atan2+0x10a>
 800b29c:	4632      	mov	r2, r6
 800b29e:	463b      	mov	r3, r7
 800b2a0:	f7f5 facc 	bl	800083c <__aeabi_ddiv>
 800b2a4:	ec41 0b10 	vmov	d0, r0, r1
 800b2a8:	f7ff fbd6 	bl	800aa58 <fabs>
 800b2ac:	f000 fe90 	bl	800bfd0 <atan>
 800b2b0:	ec51 0b10 	vmov	r0, r1, d0
 800b2b4:	2c01      	cmp	r4, #1
 800b2b6:	d013      	beq.n	800b2e0 <__ieee754_atan2+0x110>
 800b2b8:	2c02      	cmp	r4, #2
 800b2ba:	d015      	beq.n	800b2e8 <__ieee754_atan2+0x118>
 800b2bc:	2c00      	cmp	r4, #0
 800b2be:	d0a8      	beq.n	800b212 <__ieee754_atan2+0x42>
 800b2c0:	a317      	add	r3, pc, #92	; (adr r3, 800b320 <__ieee754_atan2+0x150>)
 800b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c6:	f7f4 ffd7 	bl	8000278 <__aeabi_dsub>
 800b2ca:	a317      	add	r3, pc, #92	; (adr r3, 800b328 <__ieee754_atan2+0x158>)
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	e014      	b.n	800b2fc <__ieee754_atan2+0x12c>
 800b2d2:	a117      	add	r1, pc, #92	; (adr r1, 800b330 <__ieee754_atan2+0x160>)
 800b2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2d8:	e7ec      	b.n	800b2b4 <__ieee754_atan2+0xe4>
 800b2da:	2000      	movs	r0, #0
 800b2dc:	2100      	movs	r1, #0
 800b2de:	e7e9      	b.n	800b2b4 <__ieee754_atan2+0xe4>
 800b2e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	e794      	b.n	800b212 <__ieee754_atan2+0x42>
 800b2e8:	a30d      	add	r3, pc, #52	; (adr r3, 800b320 <__ieee754_atan2+0x150>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	f7f4 ffc3 	bl	8000278 <__aeabi_dsub>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	a10c      	add	r1, pc, #48	; (adr r1, 800b328 <__ieee754_atan2+0x158>)
 800b2f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2fc:	f7f4 ffbc 	bl	8000278 <__aeabi_dsub>
 800b300:	e787      	b.n	800b212 <__ieee754_atan2+0x42>
 800b302:	a109      	add	r1, pc, #36	; (adr r1, 800b328 <__ieee754_atan2+0x158>)
 800b304:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b308:	e783      	b.n	800b212 <__ieee754_atan2+0x42>
 800b30a:	a10b      	add	r1, pc, #44	; (adr r1, 800b338 <__ieee754_atan2+0x168>)
 800b30c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b310:	e77f      	b.n	800b212 <__ieee754_atan2+0x42>
 800b312:	2000      	movs	r0, #0
 800b314:	2100      	movs	r1, #0
 800b316:	e77c      	b.n	800b212 <__ieee754_atan2+0x42>
 800b318:	a105      	add	r1, pc, #20	; (adr r1, 800b330 <__ieee754_atan2+0x160>)
 800b31a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b31e:	e778      	b.n	800b212 <__ieee754_atan2+0x42>
 800b320:	33145c07 	.word	0x33145c07
 800b324:	3ca1a626 	.word	0x3ca1a626
 800b328:	54442d18 	.word	0x54442d18
 800b32c:	400921fb 	.word	0x400921fb
 800b330:	54442d18 	.word	0x54442d18
 800b334:	3ff921fb 	.word	0x3ff921fb
 800b338:	54442d18 	.word	0x54442d18
 800b33c:	3fe921fb 	.word	0x3fe921fb
 800b340:	0800fdf0 	.word	0x0800fdf0
 800b344:	0800fe08 	.word	0x0800fe08
 800b348:	54442d18 	.word	0x54442d18
 800b34c:	c00921fb 	.word	0xc00921fb
 800b350:	54442d18 	.word	0x54442d18
 800b354:	bff921fb 	.word	0xbff921fb
 800b358:	7ff00000 	.word	0x7ff00000

0800b35c <__ieee754_fmod>:
 800b35c:	ec53 2b11 	vmov	r2, r3, d1
 800b360:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800b364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b368:	ea5c 0402 	orrs.w	r4, ip, r2
 800b36c:	ec51 0b10 	vmov	r0, r1, d0
 800b370:	ee11 7a10 	vmov	r7, s2
 800b374:	ee11 ea10 	vmov	lr, s2
 800b378:	461e      	mov	r6, r3
 800b37a:	d00c      	beq.n	800b396 <__ieee754_fmod+0x3a>
 800b37c:	4c78      	ldr	r4, [pc, #480]	; (800b560 <__ieee754_fmod+0x204>)
 800b37e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800b382:	45a0      	cmp	r8, r4
 800b384:	4689      	mov	r9, r1
 800b386:	dc06      	bgt.n	800b396 <__ieee754_fmod+0x3a>
 800b388:	4254      	negs	r4, r2
 800b38a:	4d76      	ldr	r5, [pc, #472]	; (800b564 <__ieee754_fmod+0x208>)
 800b38c:	4314      	orrs	r4, r2
 800b38e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800b392:	42ac      	cmp	r4, r5
 800b394:	d909      	bls.n	800b3aa <__ieee754_fmod+0x4e>
 800b396:	f7f5 f927 	bl	80005e8 <__aeabi_dmul>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	f7f5 fa4d 	bl	800083c <__aeabi_ddiv>
 800b3a2:	ec41 0b10 	vmov	d0, r0, r1
 800b3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3aa:	45e0      	cmp	r8, ip
 800b3ac:	ee10 aa10 	vmov	sl, s0
 800b3b0:	ee10 4a10 	vmov	r4, s0
 800b3b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b3b8:	dc09      	bgt.n	800b3ce <__ieee754_fmod+0x72>
 800b3ba:	dbf2      	blt.n	800b3a2 <__ieee754_fmod+0x46>
 800b3bc:	4290      	cmp	r0, r2
 800b3be:	d3f0      	bcc.n	800b3a2 <__ieee754_fmod+0x46>
 800b3c0:	d105      	bne.n	800b3ce <__ieee754_fmod+0x72>
 800b3c2:	4b69      	ldr	r3, [pc, #420]	; (800b568 <__ieee754_fmod+0x20c>)
 800b3c4:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800b3c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3cc:	e7e9      	b.n	800b3a2 <__ieee754_fmod+0x46>
 800b3ce:	4a65      	ldr	r2, [pc, #404]	; (800b564 <__ieee754_fmod+0x208>)
 800b3d0:	ea19 0f02 	tst.w	r9, r2
 800b3d4:	d148      	bne.n	800b468 <__ieee754_fmod+0x10c>
 800b3d6:	f1b8 0f00 	cmp.w	r8, #0
 800b3da:	d13d      	bne.n	800b458 <__ieee754_fmod+0xfc>
 800b3dc:	4963      	ldr	r1, [pc, #396]	; (800b56c <__ieee754_fmod+0x210>)
 800b3de:	4653      	mov	r3, sl
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	dc36      	bgt.n	800b452 <__ieee754_fmod+0xf6>
 800b3e4:	4216      	tst	r6, r2
 800b3e6:	d14f      	bne.n	800b488 <__ieee754_fmod+0x12c>
 800b3e8:	f1bc 0f00 	cmp.w	ip, #0
 800b3ec:	d144      	bne.n	800b478 <__ieee754_fmod+0x11c>
 800b3ee:	4a5f      	ldr	r2, [pc, #380]	; (800b56c <__ieee754_fmod+0x210>)
 800b3f0:	463b      	mov	r3, r7
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	dc3d      	bgt.n	800b472 <__ieee754_fmod+0x116>
 800b3f6:	485e      	ldr	r0, [pc, #376]	; (800b570 <__ieee754_fmod+0x214>)
 800b3f8:	4281      	cmp	r1, r0
 800b3fa:	db4a      	blt.n	800b492 <__ieee754_fmod+0x136>
 800b3fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b404:	485a      	ldr	r0, [pc, #360]	; (800b570 <__ieee754_fmod+0x214>)
 800b406:	4282      	cmp	r2, r0
 800b408:	db57      	blt.n	800b4ba <__ieee754_fmod+0x15e>
 800b40a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b40e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800b412:	1a89      	subs	r1, r1, r2
 800b414:	1b98      	subs	r0, r3, r6
 800b416:	eba4 070e 	sub.w	r7, r4, lr
 800b41a:	2900      	cmp	r1, #0
 800b41c:	d162      	bne.n	800b4e4 <__ieee754_fmod+0x188>
 800b41e:	4574      	cmp	r4, lr
 800b420:	bf38      	it	cc
 800b422:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b426:	2800      	cmp	r0, #0
 800b428:	bfa4      	itt	ge
 800b42a:	463c      	movge	r4, r7
 800b42c:	4603      	movge	r3, r0
 800b42e:	ea53 0104 	orrs.w	r1, r3, r4
 800b432:	d0c6      	beq.n	800b3c2 <__ieee754_fmod+0x66>
 800b434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b438:	db69      	blt.n	800b50e <__ieee754_fmod+0x1b2>
 800b43a:	494d      	ldr	r1, [pc, #308]	; (800b570 <__ieee754_fmod+0x214>)
 800b43c:	428a      	cmp	r2, r1
 800b43e:	db6c      	blt.n	800b51a <__ieee754_fmod+0x1be>
 800b440:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b444:	432b      	orrs	r3, r5
 800b446:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800b44a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b44e:	4620      	mov	r0, r4
 800b450:	e7a7      	b.n	800b3a2 <__ieee754_fmod+0x46>
 800b452:	3901      	subs	r1, #1
 800b454:	005b      	lsls	r3, r3, #1
 800b456:	e7c3      	b.n	800b3e0 <__ieee754_fmod+0x84>
 800b458:	4945      	ldr	r1, [pc, #276]	; (800b570 <__ieee754_fmod+0x214>)
 800b45a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b45e:	2b00      	cmp	r3, #0
 800b460:	ddc0      	ble.n	800b3e4 <__ieee754_fmod+0x88>
 800b462:	3901      	subs	r1, #1
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	e7fa      	b.n	800b45e <__ieee754_fmod+0x102>
 800b468:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b46c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b470:	e7b8      	b.n	800b3e4 <__ieee754_fmod+0x88>
 800b472:	3a01      	subs	r2, #1
 800b474:	005b      	lsls	r3, r3, #1
 800b476:	e7bc      	b.n	800b3f2 <__ieee754_fmod+0x96>
 800b478:	4a3d      	ldr	r2, [pc, #244]	; (800b570 <__ieee754_fmod+0x214>)
 800b47a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800b47e:	2b00      	cmp	r3, #0
 800b480:	ddb9      	ble.n	800b3f6 <__ieee754_fmod+0x9a>
 800b482:	3a01      	subs	r2, #1
 800b484:	005b      	lsls	r3, r3, #1
 800b486:	e7fa      	b.n	800b47e <__ieee754_fmod+0x122>
 800b488:	ea4f 522c 	mov.w	r2, ip, asr #20
 800b48c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b490:	e7b1      	b.n	800b3f6 <__ieee754_fmod+0x9a>
 800b492:	1a40      	subs	r0, r0, r1
 800b494:	281f      	cmp	r0, #31
 800b496:	dc0a      	bgt.n	800b4ae <__ieee754_fmod+0x152>
 800b498:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800b49c:	fa08 f800 	lsl.w	r8, r8, r0
 800b4a0:	fa2a f303 	lsr.w	r3, sl, r3
 800b4a4:	ea43 0308 	orr.w	r3, r3, r8
 800b4a8:	fa0a f400 	lsl.w	r4, sl, r0
 800b4ac:	e7aa      	b.n	800b404 <__ieee754_fmod+0xa8>
 800b4ae:	4b31      	ldr	r3, [pc, #196]	; (800b574 <__ieee754_fmod+0x218>)
 800b4b0:	1a5b      	subs	r3, r3, r1
 800b4b2:	fa0a f303 	lsl.w	r3, sl, r3
 800b4b6:	2400      	movs	r4, #0
 800b4b8:	e7a4      	b.n	800b404 <__ieee754_fmod+0xa8>
 800b4ba:	1a80      	subs	r0, r0, r2
 800b4bc:	281f      	cmp	r0, #31
 800b4be:	dc0a      	bgt.n	800b4d6 <__ieee754_fmod+0x17a>
 800b4c0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800b4c4:	fa0c fc00 	lsl.w	ip, ip, r0
 800b4c8:	fa27 f606 	lsr.w	r6, r7, r6
 800b4cc:	ea46 060c 	orr.w	r6, r6, ip
 800b4d0:	fa07 fe00 	lsl.w	lr, r7, r0
 800b4d4:	e79d      	b.n	800b412 <__ieee754_fmod+0xb6>
 800b4d6:	4e27      	ldr	r6, [pc, #156]	; (800b574 <__ieee754_fmod+0x218>)
 800b4d8:	1ab6      	subs	r6, r6, r2
 800b4da:	fa07 f606 	lsl.w	r6, r7, r6
 800b4de:	f04f 0e00 	mov.w	lr, #0
 800b4e2:	e796      	b.n	800b412 <__ieee754_fmod+0xb6>
 800b4e4:	4574      	cmp	r4, lr
 800b4e6:	bf38      	it	cc
 800b4e8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	da05      	bge.n	800b4fc <__ieee754_fmod+0x1a0>
 800b4f0:	0fe0      	lsrs	r0, r4, #31
 800b4f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b4f6:	0064      	lsls	r4, r4, #1
 800b4f8:	3901      	subs	r1, #1
 800b4fa:	e78b      	b.n	800b414 <__ieee754_fmod+0xb8>
 800b4fc:	ea50 0307 	orrs.w	r3, r0, r7
 800b500:	f43f af5f 	beq.w	800b3c2 <__ieee754_fmod+0x66>
 800b504:	0ffb      	lsrs	r3, r7, #31
 800b506:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b50a:	007c      	lsls	r4, r7, #1
 800b50c:	e7f4      	b.n	800b4f8 <__ieee754_fmod+0x19c>
 800b50e:	0fe1      	lsrs	r1, r4, #31
 800b510:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b514:	0064      	lsls	r4, r4, #1
 800b516:	3a01      	subs	r2, #1
 800b518:	e78c      	b.n	800b434 <__ieee754_fmod+0xd8>
 800b51a:	1a89      	subs	r1, r1, r2
 800b51c:	2914      	cmp	r1, #20
 800b51e:	dc0a      	bgt.n	800b536 <__ieee754_fmod+0x1da>
 800b520:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b524:	fa03 f202 	lsl.w	r2, r3, r2
 800b528:	40cc      	lsrs	r4, r1
 800b52a:	4322      	orrs	r2, r4
 800b52c:	410b      	asrs	r3, r1
 800b52e:	ea43 0105 	orr.w	r1, r3, r5
 800b532:	4610      	mov	r0, r2
 800b534:	e735      	b.n	800b3a2 <__ieee754_fmod+0x46>
 800b536:	291f      	cmp	r1, #31
 800b538:	dc07      	bgt.n	800b54a <__ieee754_fmod+0x1ee>
 800b53a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b53e:	40cc      	lsrs	r4, r1
 800b540:	fa03 f202 	lsl.w	r2, r3, r2
 800b544:	4322      	orrs	r2, r4
 800b546:	462b      	mov	r3, r5
 800b548:	e7f1      	b.n	800b52e <__ieee754_fmod+0x1d2>
 800b54a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b54e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b552:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b556:	32e2      	adds	r2, #226	; 0xe2
 800b558:	fa43 f202 	asr.w	r2, r3, r2
 800b55c:	e7f3      	b.n	800b546 <__ieee754_fmod+0x1ea>
 800b55e:	bf00      	nop
 800b560:	7fefffff 	.word	0x7fefffff
 800b564:	7ff00000 	.word	0x7ff00000
 800b568:	0800fe20 	.word	0x0800fe20
 800b56c:	fffffbed 	.word	0xfffffbed
 800b570:	fffffc02 	.word	0xfffffc02
 800b574:	fffffbe2 	.word	0xfffffbe2

0800b578 <__ieee754_pow>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	ed2d 8b06 	vpush	{d8-d10}
 800b580:	b089      	sub	sp, #36	; 0x24
 800b582:	ed8d 1b00 	vstr	d1, [sp]
 800b586:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b58a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b58e:	ea58 0102 	orrs.w	r1, r8, r2
 800b592:	ec57 6b10 	vmov	r6, r7, d0
 800b596:	d115      	bne.n	800b5c4 <__ieee754_pow+0x4c>
 800b598:	19b3      	adds	r3, r6, r6
 800b59a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b59e:	4152      	adcs	r2, r2
 800b5a0:	4299      	cmp	r1, r3
 800b5a2:	4b89      	ldr	r3, [pc, #548]	; (800b7c8 <__ieee754_pow+0x250>)
 800b5a4:	4193      	sbcs	r3, r2
 800b5a6:	f080 84d1 	bcs.w	800bf4c <__ieee754_pow+0x9d4>
 800b5aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	4639      	mov	r1, r7
 800b5b2:	f7f4 fe63 	bl	800027c <__adddf3>
 800b5b6:	ec41 0b10 	vmov	d0, r0, r1
 800b5ba:	b009      	add	sp, #36	; 0x24
 800b5bc:	ecbd 8b06 	vpop	{d8-d10}
 800b5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c4:	4b81      	ldr	r3, [pc, #516]	; (800b7cc <__ieee754_pow+0x254>)
 800b5c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b5ca:	429c      	cmp	r4, r3
 800b5cc:	ee10 aa10 	vmov	sl, s0
 800b5d0:	463d      	mov	r5, r7
 800b5d2:	dc06      	bgt.n	800b5e2 <__ieee754_pow+0x6a>
 800b5d4:	d101      	bne.n	800b5da <__ieee754_pow+0x62>
 800b5d6:	2e00      	cmp	r6, #0
 800b5d8:	d1e7      	bne.n	800b5aa <__ieee754_pow+0x32>
 800b5da:	4598      	cmp	r8, r3
 800b5dc:	dc01      	bgt.n	800b5e2 <__ieee754_pow+0x6a>
 800b5de:	d10f      	bne.n	800b600 <__ieee754_pow+0x88>
 800b5e0:	b172      	cbz	r2, 800b600 <__ieee754_pow+0x88>
 800b5e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b5e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b5ea:	ea55 050a 	orrs.w	r5, r5, sl
 800b5ee:	d1dc      	bne.n	800b5aa <__ieee754_pow+0x32>
 800b5f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b5f4:	18db      	adds	r3, r3, r3
 800b5f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b5fa:	4152      	adcs	r2, r2
 800b5fc:	429d      	cmp	r5, r3
 800b5fe:	e7d0      	b.n	800b5a2 <__ieee754_pow+0x2a>
 800b600:	2d00      	cmp	r5, #0
 800b602:	da3b      	bge.n	800b67c <__ieee754_pow+0x104>
 800b604:	4b72      	ldr	r3, [pc, #456]	; (800b7d0 <__ieee754_pow+0x258>)
 800b606:	4598      	cmp	r8, r3
 800b608:	dc51      	bgt.n	800b6ae <__ieee754_pow+0x136>
 800b60a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b60e:	4598      	cmp	r8, r3
 800b610:	f340 84ab 	ble.w	800bf6a <__ieee754_pow+0x9f2>
 800b614:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b618:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b61c:	2b14      	cmp	r3, #20
 800b61e:	dd0f      	ble.n	800b640 <__ieee754_pow+0xc8>
 800b620:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b624:	fa22 f103 	lsr.w	r1, r2, r3
 800b628:	fa01 f303 	lsl.w	r3, r1, r3
 800b62c:	4293      	cmp	r3, r2
 800b62e:	f040 849c 	bne.w	800bf6a <__ieee754_pow+0x9f2>
 800b632:	f001 0101 	and.w	r1, r1, #1
 800b636:	f1c1 0302 	rsb	r3, r1, #2
 800b63a:	9304      	str	r3, [sp, #16]
 800b63c:	b182      	cbz	r2, 800b660 <__ieee754_pow+0xe8>
 800b63e:	e05f      	b.n	800b700 <__ieee754_pow+0x188>
 800b640:	2a00      	cmp	r2, #0
 800b642:	d15b      	bne.n	800b6fc <__ieee754_pow+0x184>
 800b644:	f1c3 0314 	rsb	r3, r3, #20
 800b648:	fa48 f103 	asr.w	r1, r8, r3
 800b64c:	fa01 f303 	lsl.w	r3, r1, r3
 800b650:	4543      	cmp	r3, r8
 800b652:	f040 8487 	bne.w	800bf64 <__ieee754_pow+0x9ec>
 800b656:	f001 0101 	and.w	r1, r1, #1
 800b65a:	f1c1 0302 	rsb	r3, r1, #2
 800b65e:	9304      	str	r3, [sp, #16]
 800b660:	4b5c      	ldr	r3, [pc, #368]	; (800b7d4 <__ieee754_pow+0x25c>)
 800b662:	4598      	cmp	r8, r3
 800b664:	d132      	bne.n	800b6cc <__ieee754_pow+0x154>
 800b666:	f1b9 0f00 	cmp.w	r9, #0
 800b66a:	f280 8477 	bge.w	800bf5c <__ieee754_pow+0x9e4>
 800b66e:	4959      	ldr	r1, [pc, #356]	; (800b7d4 <__ieee754_pow+0x25c>)
 800b670:	4632      	mov	r2, r6
 800b672:	463b      	mov	r3, r7
 800b674:	2000      	movs	r0, #0
 800b676:	f7f5 f8e1 	bl	800083c <__aeabi_ddiv>
 800b67a:	e79c      	b.n	800b5b6 <__ieee754_pow+0x3e>
 800b67c:	2300      	movs	r3, #0
 800b67e:	9304      	str	r3, [sp, #16]
 800b680:	2a00      	cmp	r2, #0
 800b682:	d13d      	bne.n	800b700 <__ieee754_pow+0x188>
 800b684:	4b51      	ldr	r3, [pc, #324]	; (800b7cc <__ieee754_pow+0x254>)
 800b686:	4598      	cmp	r8, r3
 800b688:	d1ea      	bne.n	800b660 <__ieee754_pow+0xe8>
 800b68a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b68e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b692:	ea53 030a 	orrs.w	r3, r3, sl
 800b696:	f000 8459 	beq.w	800bf4c <__ieee754_pow+0x9d4>
 800b69a:	4b4f      	ldr	r3, [pc, #316]	; (800b7d8 <__ieee754_pow+0x260>)
 800b69c:	429c      	cmp	r4, r3
 800b69e:	dd08      	ble.n	800b6b2 <__ieee754_pow+0x13a>
 800b6a0:	f1b9 0f00 	cmp.w	r9, #0
 800b6a4:	f2c0 8456 	blt.w	800bf54 <__ieee754_pow+0x9dc>
 800b6a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6ac:	e783      	b.n	800b5b6 <__ieee754_pow+0x3e>
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	e7e5      	b.n	800b67e <__ieee754_pow+0x106>
 800b6b2:	f1b9 0f00 	cmp.w	r9, #0
 800b6b6:	f04f 0000 	mov.w	r0, #0
 800b6ba:	f04f 0100 	mov.w	r1, #0
 800b6be:	f6bf af7a 	bge.w	800b5b6 <__ieee754_pow+0x3e>
 800b6c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b6c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b6ca:	e774      	b.n	800b5b6 <__ieee754_pow+0x3e>
 800b6cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b6d0:	d106      	bne.n	800b6e0 <__ieee754_pow+0x168>
 800b6d2:	4632      	mov	r2, r6
 800b6d4:	463b      	mov	r3, r7
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	4639      	mov	r1, r7
 800b6da:	f7f4 ff85 	bl	80005e8 <__aeabi_dmul>
 800b6de:	e76a      	b.n	800b5b6 <__ieee754_pow+0x3e>
 800b6e0:	4b3e      	ldr	r3, [pc, #248]	; (800b7dc <__ieee754_pow+0x264>)
 800b6e2:	4599      	cmp	r9, r3
 800b6e4:	d10c      	bne.n	800b700 <__ieee754_pow+0x188>
 800b6e6:	2d00      	cmp	r5, #0
 800b6e8:	db0a      	blt.n	800b700 <__ieee754_pow+0x188>
 800b6ea:	ec47 6b10 	vmov	d0, r6, r7
 800b6ee:	b009      	add	sp, #36	; 0x24
 800b6f0:	ecbd 8b06 	vpop	{d8-d10}
 800b6f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f8:	f7ff ba76 	b.w	800abe8 <__ieee754_sqrt>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	9304      	str	r3, [sp, #16]
 800b700:	ec47 6b10 	vmov	d0, r6, r7
 800b704:	f7ff f9a8 	bl	800aa58 <fabs>
 800b708:	ec51 0b10 	vmov	r0, r1, d0
 800b70c:	f1ba 0f00 	cmp.w	sl, #0
 800b710:	d129      	bne.n	800b766 <__ieee754_pow+0x1ee>
 800b712:	b124      	cbz	r4, 800b71e <__ieee754_pow+0x1a6>
 800b714:	4b2f      	ldr	r3, [pc, #188]	; (800b7d4 <__ieee754_pow+0x25c>)
 800b716:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d123      	bne.n	800b766 <__ieee754_pow+0x1ee>
 800b71e:	f1b9 0f00 	cmp.w	r9, #0
 800b722:	da05      	bge.n	800b730 <__ieee754_pow+0x1b8>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	2000      	movs	r0, #0
 800b72a:	492a      	ldr	r1, [pc, #168]	; (800b7d4 <__ieee754_pow+0x25c>)
 800b72c:	f7f5 f886 	bl	800083c <__aeabi_ddiv>
 800b730:	2d00      	cmp	r5, #0
 800b732:	f6bf af40 	bge.w	800b5b6 <__ieee754_pow+0x3e>
 800b736:	9b04      	ldr	r3, [sp, #16]
 800b738:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b73c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b740:	431c      	orrs	r4, r3
 800b742:	d108      	bne.n	800b756 <__ieee754_pow+0x1de>
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	4610      	mov	r0, r2
 800b74a:	4619      	mov	r1, r3
 800b74c:	f7f4 fd94 	bl	8000278 <__aeabi_dsub>
 800b750:	4602      	mov	r2, r0
 800b752:	460b      	mov	r3, r1
 800b754:	e78f      	b.n	800b676 <__ieee754_pow+0xfe>
 800b756:	9b04      	ldr	r3, [sp, #16]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	f47f af2c 	bne.w	800b5b6 <__ieee754_pow+0x3e>
 800b75e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b762:	4619      	mov	r1, r3
 800b764:	e727      	b.n	800b5b6 <__ieee754_pow+0x3e>
 800b766:	0feb      	lsrs	r3, r5, #31
 800b768:	3b01      	subs	r3, #1
 800b76a:	9306      	str	r3, [sp, #24]
 800b76c:	9a06      	ldr	r2, [sp, #24]
 800b76e:	9b04      	ldr	r3, [sp, #16]
 800b770:	4313      	orrs	r3, r2
 800b772:	d102      	bne.n	800b77a <__ieee754_pow+0x202>
 800b774:	4632      	mov	r2, r6
 800b776:	463b      	mov	r3, r7
 800b778:	e7e6      	b.n	800b748 <__ieee754_pow+0x1d0>
 800b77a:	4b19      	ldr	r3, [pc, #100]	; (800b7e0 <__ieee754_pow+0x268>)
 800b77c:	4598      	cmp	r8, r3
 800b77e:	f340 80fb 	ble.w	800b978 <__ieee754_pow+0x400>
 800b782:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b786:	4598      	cmp	r8, r3
 800b788:	4b13      	ldr	r3, [pc, #76]	; (800b7d8 <__ieee754_pow+0x260>)
 800b78a:	dd0c      	ble.n	800b7a6 <__ieee754_pow+0x22e>
 800b78c:	429c      	cmp	r4, r3
 800b78e:	dc0f      	bgt.n	800b7b0 <__ieee754_pow+0x238>
 800b790:	f1b9 0f00 	cmp.w	r9, #0
 800b794:	da0f      	bge.n	800b7b6 <__ieee754_pow+0x23e>
 800b796:	2000      	movs	r0, #0
 800b798:	b009      	add	sp, #36	; 0x24
 800b79a:	ecbd 8b06 	vpop	{d8-d10}
 800b79e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a2:	f001 b9aa 	b.w	800cafa <__math_oflow>
 800b7a6:	429c      	cmp	r4, r3
 800b7a8:	dbf2      	blt.n	800b790 <__ieee754_pow+0x218>
 800b7aa:	4b0a      	ldr	r3, [pc, #40]	; (800b7d4 <__ieee754_pow+0x25c>)
 800b7ac:	429c      	cmp	r4, r3
 800b7ae:	dd19      	ble.n	800b7e4 <__ieee754_pow+0x26c>
 800b7b0:	f1b9 0f00 	cmp.w	r9, #0
 800b7b4:	dcef      	bgt.n	800b796 <__ieee754_pow+0x21e>
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	b009      	add	sp, #36	; 0x24
 800b7ba:	ecbd 8b06 	vpop	{d8-d10}
 800b7be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c2:	f001 b991 	b.w	800cae8 <__math_uflow>
 800b7c6:	bf00      	nop
 800b7c8:	fff00000 	.word	0xfff00000
 800b7cc:	7ff00000 	.word	0x7ff00000
 800b7d0:	433fffff 	.word	0x433fffff
 800b7d4:	3ff00000 	.word	0x3ff00000
 800b7d8:	3fefffff 	.word	0x3fefffff
 800b7dc:	3fe00000 	.word	0x3fe00000
 800b7e0:	41e00000 	.word	0x41e00000
 800b7e4:	4b60      	ldr	r3, [pc, #384]	; (800b968 <__ieee754_pow+0x3f0>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f7f4 fd46 	bl	8000278 <__aeabi_dsub>
 800b7ec:	a354      	add	r3, pc, #336	; (adr r3, 800b940 <__ieee754_pow+0x3c8>)
 800b7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	460d      	mov	r5, r1
 800b7f6:	f7f4 fef7 	bl	80005e8 <__aeabi_dmul>
 800b7fa:	a353      	add	r3, pc, #332	; (adr r3, 800b948 <__ieee754_pow+0x3d0>)
 800b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b800:	4606      	mov	r6, r0
 800b802:	460f      	mov	r7, r1
 800b804:	4620      	mov	r0, r4
 800b806:	4629      	mov	r1, r5
 800b808:	f7f4 feee 	bl	80005e8 <__aeabi_dmul>
 800b80c:	4b57      	ldr	r3, [pc, #348]	; (800b96c <__ieee754_pow+0x3f4>)
 800b80e:	4682      	mov	sl, r0
 800b810:	468b      	mov	fp, r1
 800b812:	2200      	movs	r2, #0
 800b814:	4620      	mov	r0, r4
 800b816:	4629      	mov	r1, r5
 800b818:	f7f4 fee6 	bl	80005e8 <__aeabi_dmul>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	a14b      	add	r1, pc, #300	; (adr r1, 800b950 <__ieee754_pow+0x3d8>)
 800b822:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b826:	f7f4 fd27 	bl	8000278 <__aeabi_dsub>
 800b82a:	4622      	mov	r2, r4
 800b82c:	462b      	mov	r3, r5
 800b82e:	f7f4 fedb 	bl	80005e8 <__aeabi_dmul>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	2000      	movs	r0, #0
 800b838:	494d      	ldr	r1, [pc, #308]	; (800b970 <__ieee754_pow+0x3f8>)
 800b83a:	f7f4 fd1d 	bl	8000278 <__aeabi_dsub>
 800b83e:	4622      	mov	r2, r4
 800b840:	4680      	mov	r8, r0
 800b842:	4689      	mov	r9, r1
 800b844:	462b      	mov	r3, r5
 800b846:	4620      	mov	r0, r4
 800b848:	4629      	mov	r1, r5
 800b84a:	f7f4 fecd 	bl	80005e8 <__aeabi_dmul>
 800b84e:	4602      	mov	r2, r0
 800b850:	460b      	mov	r3, r1
 800b852:	4640      	mov	r0, r8
 800b854:	4649      	mov	r1, r9
 800b856:	f7f4 fec7 	bl	80005e8 <__aeabi_dmul>
 800b85a:	a33f      	add	r3, pc, #252	; (adr r3, 800b958 <__ieee754_pow+0x3e0>)
 800b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b860:	f7f4 fec2 	bl	80005e8 <__aeabi_dmul>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	4650      	mov	r0, sl
 800b86a:	4659      	mov	r1, fp
 800b86c:	f7f4 fd04 	bl	8000278 <__aeabi_dsub>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4680      	mov	r8, r0
 800b876:	4689      	mov	r9, r1
 800b878:	4630      	mov	r0, r6
 800b87a:	4639      	mov	r1, r7
 800b87c:	f7f4 fcfe 	bl	800027c <__adddf3>
 800b880:	2000      	movs	r0, #0
 800b882:	4632      	mov	r2, r6
 800b884:	463b      	mov	r3, r7
 800b886:	4604      	mov	r4, r0
 800b888:	460d      	mov	r5, r1
 800b88a:	f7f4 fcf5 	bl	8000278 <__aeabi_dsub>
 800b88e:	4602      	mov	r2, r0
 800b890:	460b      	mov	r3, r1
 800b892:	4640      	mov	r0, r8
 800b894:	4649      	mov	r1, r9
 800b896:	f7f4 fcef 	bl	8000278 <__aeabi_dsub>
 800b89a:	9b04      	ldr	r3, [sp, #16]
 800b89c:	9a06      	ldr	r2, [sp, #24]
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	4682      	mov	sl, r0
 800b8a4:	468b      	mov	fp, r1
 800b8a6:	f040 81e7 	bne.w	800bc78 <__ieee754_pow+0x700>
 800b8aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b960 <__ieee754_pow+0x3e8>
 800b8ae:	eeb0 8a47 	vmov.f32	s16, s14
 800b8b2:	eef0 8a67 	vmov.f32	s17, s15
 800b8b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b8ba:	2600      	movs	r6, #0
 800b8bc:	4632      	mov	r2, r6
 800b8be:	463b      	mov	r3, r7
 800b8c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8c4:	f7f4 fcd8 	bl	8000278 <__aeabi_dsub>
 800b8c8:	4622      	mov	r2, r4
 800b8ca:	462b      	mov	r3, r5
 800b8cc:	f7f4 fe8c 	bl	80005e8 <__aeabi_dmul>
 800b8d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8d4:	4680      	mov	r8, r0
 800b8d6:	4689      	mov	r9, r1
 800b8d8:	4650      	mov	r0, sl
 800b8da:	4659      	mov	r1, fp
 800b8dc:	f7f4 fe84 	bl	80005e8 <__aeabi_dmul>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4640      	mov	r0, r8
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	f7f4 fcc8 	bl	800027c <__adddf3>
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	463b      	mov	r3, r7
 800b8f0:	4680      	mov	r8, r0
 800b8f2:	4689      	mov	r9, r1
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	f7f4 fe76 	bl	80005e8 <__aeabi_dmul>
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4604      	mov	r4, r0
 800b900:	460d      	mov	r5, r1
 800b902:	4602      	mov	r2, r0
 800b904:	4649      	mov	r1, r9
 800b906:	4640      	mov	r0, r8
 800b908:	f7f4 fcb8 	bl	800027c <__adddf3>
 800b90c:	4b19      	ldr	r3, [pc, #100]	; (800b974 <__ieee754_pow+0x3fc>)
 800b90e:	4299      	cmp	r1, r3
 800b910:	ec45 4b19 	vmov	d9, r4, r5
 800b914:	4606      	mov	r6, r0
 800b916:	460f      	mov	r7, r1
 800b918:	468b      	mov	fp, r1
 800b91a:	f340 82f0 	ble.w	800befe <__ieee754_pow+0x986>
 800b91e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b922:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b926:	4303      	orrs	r3, r0
 800b928:	f000 81e4 	beq.w	800bcf4 <__ieee754_pow+0x77c>
 800b92c:	ec51 0b18 	vmov	r0, r1, d8
 800b930:	2200      	movs	r2, #0
 800b932:	2300      	movs	r3, #0
 800b934:	f7f5 f8ca 	bl	8000acc <__aeabi_dcmplt>
 800b938:	3800      	subs	r0, #0
 800b93a:	bf18      	it	ne
 800b93c:	2001      	movne	r0, #1
 800b93e:	e72b      	b.n	800b798 <__ieee754_pow+0x220>
 800b940:	60000000 	.word	0x60000000
 800b944:	3ff71547 	.word	0x3ff71547
 800b948:	f85ddf44 	.word	0xf85ddf44
 800b94c:	3e54ae0b 	.word	0x3e54ae0b
 800b950:	55555555 	.word	0x55555555
 800b954:	3fd55555 	.word	0x3fd55555
 800b958:	652b82fe 	.word	0x652b82fe
 800b95c:	3ff71547 	.word	0x3ff71547
 800b960:	00000000 	.word	0x00000000
 800b964:	bff00000 	.word	0xbff00000
 800b968:	3ff00000 	.word	0x3ff00000
 800b96c:	3fd00000 	.word	0x3fd00000
 800b970:	3fe00000 	.word	0x3fe00000
 800b974:	408fffff 	.word	0x408fffff
 800b978:	4bd5      	ldr	r3, [pc, #852]	; (800bcd0 <__ieee754_pow+0x758>)
 800b97a:	402b      	ands	r3, r5
 800b97c:	2200      	movs	r2, #0
 800b97e:	b92b      	cbnz	r3, 800b98c <__ieee754_pow+0x414>
 800b980:	4bd4      	ldr	r3, [pc, #848]	; (800bcd4 <__ieee754_pow+0x75c>)
 800b982:	f7f4 fe31 	bl	80005e8 <__aeabi_dmul>
 800b986:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b98a:	460c      	mov	r4, r1
 800b98c:	1523      	asrs	r3, r4, #20
 800b98e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b992:	4413      	add	r3, r2
 800b994:	9305      	str	r3, [sp, #20]
 800b996:	4bd0      	ldr	r3, [pc, #832]	; (800bcd8 <__ieee754_pow+0x760>)
 800b998:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b99c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b9a0:	429c      	cmp	r4, r3
 800b9a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b9a6:	dd08      	ble.n	800b9ba <__ieee754_pow+0x442>
 800b9a8:	4bcc      	ldr	r3, [pc, #816]	; (800bcdc <__ieee754_pow+0x764>)
 800b9aa:	429c      	cmp	r4, r3
 800b9ac:	f340 8162 	ble.w	800bc74 <__ieee754_pow+0x6fc>
 800b9b0:	9b05      	ldr	r3, [sp, #20]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	9305      	str	r3, [sp, #20]
 800b9b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b9ba:	2400      	movs	r4, #0
 800b9bc:	00e3      	lsls	r3, r4, #3
 800b9be:	9307      	str	r3, [sp, #28]
 800b9c0:	4bc7      	ldr	r3, [pc, #796]	; (800bce0 <__ieee754_pow+0x768>)
 800b9c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9c6:	ed93 7b00 	vldr	d7, [r3]
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	ec53 2b17 	vmov	r2, r3, d7
 800b9d0:	eeb0 9a47 	vmov.f32	s18, s14
 800b9d4:	eef0 9a67 	vmov.f32	s19, s15
 800b9d8:	4682      	mov	sl, r0
 800b9da:	f7f4 fc4d 	bl	8000278 <__aeabi_dsub>
 800b9de:	4652      	mov	r2, sl
 800b9e0:	4606      	mov	r6, r0
 800b9e2:	460f      	mov	r7, r1
 800b9e4:	462b      	mov	r3, r5
 800b9e6:	ec51 0b19 	vmov	r0, r1, d9
 800b9ea:	f7f4 fc47 	bl	800027c <__adddf3>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	2000      	movs	r0, #0
 800b9f4:	49bb      	ldr	r1, [pc, #748]	; (800bce4 <__ieee754_pow+0x76c>)
 800b9f6:	f7f4 ff21 	bl	800083c <__aeabi_ddiv>
 800b9fa:	ec41 0b1a 	vmov	d10, r0, r1
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	4630      	mov	r0, r6
 800ba04:	4639      	mov	r1, r7
 800ba06:	f7f4 fdef 	bl	80005e8 <__aeabi_dmul>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba10:	9302      	str	r3, [sp, #8]
 800ba12:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ba16:	46ab      	mov	fp, r5
 800ba18:	106d      	asrs	r5, r5, #1
 800ba1a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ba1e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ba22:	ec41 0b18 	vmov	d8, r0, r1
 800ba26:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	4640      	mov	r0, r8
 800ba2e:	4649      	mov	r1, r9
 800ba30:	4614      	mov	r4, r2
 800ba32:	461d      	mov	r5, r3
 800ba34:	f7f4 fdd8 	bl	80005e8 <__aeabi_dmul>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	4639      	mov	r1, r7
 800ba40:	f7f4 fc1a 	bl	8000278 <__aeabi_dsub>
 800ba44:	ec53 2b19 	vmov	r2, r3, d9
 800ba48:	4606      	mov	r6, r0
 800ba4a:	460f      	mov	r7, r1
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	4629      	mov	r1, r5
 800ba50:	f7f4 fc12 	bl	8000278 <__aeabi_dsub>
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	4650      	mov	r0, sl
 800ba5a:	4659      	mov	r1, fp
 800ba5c:	f7f4 fc0c 	bl	8000278 <__aeabi_dsub>
 800ba60:	4642      	mov	r2, r8
 800ba62:	464b      	mov	r3, r9
 800ba64:	f7f4 fdc0 	bl	80005e8 <__aeabi_dmul>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	4639      	mov	r1, r7
 800ba70:	f7f4 fc02 	bl	8000278 <__aeabi_dsub>
 800ba74:	ec53 2b1a 	vmov	r2, r3, d10
 800ba78:	f7f4 fdb6 	bl	80005e8 <__aeabi_dmul>
 800ba7c:	ec53 2b18 	vmov	r2, r3, d8
 800ba80:	ec41 0b19 	vmov	d9, r0, r1
 800ba84:	ec51 0b18 	vmov	r0, r1, d8
 800ba88:	f7f4 fdae 	bl	80005e8 <__aeabi_dmul>
 800ba8c:	a37c      	add	r3, pc, #496	; (adr r3, 800bc80 <__ieee754_pow+0x708>)
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	4604      	mov	r4, r0
 800ba94:	460d      	mov	r5, r1
 800ba96:	f7f4 fda7 	bl	80005e8 <__aeabi_dmul>
 800ba9a:	a37b      	add	r3, pc, #492	; (adr r3, 800bc88 <__ieee754_pow+0x710>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f7f4 fbec 	bl	800027c <__adddf3>
 800baa4:	4622      	mov	r2, r4
 800baa6:	462b      	mov	r3, r5
 800baa8:	f7f4 fd9e 	bl	80005e8 <__aeabi_dmul>
 800baac:	a378      	add	r3, pc, #480	; (adr r3, 800bc90 <__ieee754_pow+0x718>)
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	f7f4 fbe3 	bl	800027c <__adddf3>
 800bab6:	4622      	mov	r2, r4
 800bab8:	462b      	mov	r3, r5
 800baba:	f7f4 fd95 	bl	80005e8 <__aeabi_dmul>
 800babe:	a376      	add	r3, pc, #472	; (adr r3, 800bc98 <__ieee754_pow+0x720>)
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	f7f4 fbda 	bl	800027c <__adddf3>
 800bac8:	4622      	mov	r2, r4
 800baca:	462b      	mov	r3, r5
 800bacc:	f7f4 fd8c 	bl	80005e8 <__aeabi_dmul>
 800bad0:	a373      	add	r3, pc, #460	; (adr r3, 800bca0 <__ieee754_pow+0x728>)
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	f7f4 fbd1 	bl	800027c <__adddf3>
 800bada:	4622      	mov	r2, r4
 800badc:	462b      	mov	r3, r5
 800bade:	f7f4 fd83 	bl	80005e8 <__aeabi_dmul>
 800bae2:	a371      	add	r3, pc, #452	; (adr r3, 800bca8 <__ieee754_pow+0x730>)
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	f7f4 fbc8 	bl	800027c <__adddf3>
 800baec:	4622      	mov	r2, r4
 800baee:	4606      	mov	r6, r0
 800baf0:	460f      	mov	r7, r1
 800baf2:	462b      	mov	r3, r5
 800baf4:	4620      	mov	r0, r4
 800baf6:	4629      	mov	r1, r5
 800baf8:	f7f4 fd76 	bl	80005e8 <__aeabi_dmul>
 800bafc:	4602      	mov	r2, r0
 800bafe:	460b      	mov	r3, r1
 800bb00:	4630      	mov	r0, r6
 800bb02:	4639      	mov	r1, r7
 800bb04:	f7f4 fd70 	bl	80005e8 <__aeabi_dmul>
 800bb08:	4642      	mov	r2, r8
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	460d      	mov	r5, r1
 800bb0e:	464b      	mov	r3, r9
 800bb10:	ec51 0b18 	vmov	r0, r1, d8
 800bb14:	f7f4 fbb2 	bl	800027c <__adddf3>
 800bb18:	ec53 2b19 	vmov	r2, r3, d9
 800bb1c:	f7f4 fd64 	bl	80005e8 <__aeabi_dmul>
 800bb20:	4622      	mov	r2, r4
 800bb22:	462b      	mov	r3, r5
 800bb24:	f7f4 fbaa 	bl	800027c <__adddf3>
 800bb28:	4642      	mov	r2, r8
 800bb2a:	4682      	mov	sl, r0
 800bb2c:	468b      	mov	fp, r1
 800bb2e:	464b      	mov	r3, r9
 800bb30:	4640      	mov	r0, r8
 800bb32:	4649      	mov	r1, r9
 800bb34:	f7f4 fd58 	bl	80005e8 <__aeabi_dmul>
 800bb38:	4b6b      	ldr	r3, [pc, #428]	; (800bce8 <__ieee754_pow+0x770>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	4606      	mov	r6, r0
 800bb3e:	460f      	mov	r7, r1
 800bb40:	f7f4 fb9c 	bl	800027c <__adddf3>
 800bb44:	4652      	mov	r2, sl
 800bb46:	465b      	mov	r3, fp
 800bb48:	f7f4 fb98 	bl	800027c <__adddf3>
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	4604      	mov	r4, r0
 800bb50:	460d      	mov	r5, r1
 800bb52:	4602      	mov	r2, r0
 800bb54:	460b      	mov	r3, r1
 800bb56:	4640      	mov	r0, r8
 800bb58:	4649      	mov	r1, r9
 800bb5a:	f7f4 fd45 	bl	80005e8 <__aeabi_dmul>
 800bb5e:	4b62      	ldr	r3, [pc, #392]	; (800bce8 <__ieee754_pow+0x770>)
 800bb60:	4680      	mov	r8, r0
 800bb62:	4689      	mov	r9, r1
 800bb64:	2200      	movs	r2, #0
 800bb66:	4620      	mov	r0, r4
 800bb68:	4629      	mov	r1, r5
 800bb6a:	f7f4 fb85 	bl	8000278 <__aeabi_dsub>
 800bb6e:	4632      	mov	r2, r6
 800bb70:	463b      	mov	r3, r7
 800bb72:	f7f4 fb81 	bl	8000278 <__aeabi_dsub>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4650      	mov	r0, sl
 800bb7c:	4659      	mov	r1, fp
 800bb7e:	f7f4 fb7b 	bl	8000278 <__aeabi_dsub>
 800bb82:	ec53 2b18 	vmov	r2, r3, d8
 800bb86:	f7f4 fd2f 	bl	80005e8 <__aeabi_dmul>
 800bb8a:	4622      	mov	r2, r4
 800bb8c:	4606      	mov	r6, r0
 800bb8e:	460f      	mov	r7, r1
 800bb90:	462b      	mov	r3, r5
 800bb92:	ec51 0b19 	vmov	r0, r1, d9
 800bb96:	f7f4 fd27 	bl	80005e8 <__aeabi_dmul>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4630      	mov	r0, r6
 800bba0:	4639      	mov	r1, r7
 800bba2:	f7f4 fb6b 	bl	800027c <__adddf3>
 800bba6:	4606      	mov	r6, r0
 800bba8:	460f      	mov	r7, r1
 800bbaa:	4602      	mov	r2, r0
 800bbac:	460b      	mov	r3, r1
 800bbae:	4640      	mov	r0, r8
 800bbb0:	4649      	mov	r1, r9
 800bbb2:	f7f4 fb63 	bl	800027c <__adddf3>
 800bbb6:	a33e      	add	r3, pc, #248	; (adr r3, 800bcb0 <__ieee754_pow+0x738>)
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	460d      	mov	r5, r1
 800bbc2:	f7f4 fd11 	bl	80005e8 <__aeabi_dmul>
 800bbc6:	4642      	mov	r2, r8
 800bbc8:	ec41 0b18 	vmov	d8, r0, r1
 800bbcc:	464b      	mov	r3, r9
 800bbce:	4620      	mov	r0, r4
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	f7f4 fb51 	bl	8000278 <__aeabi_dsub>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	460b      	mov	r3, r1
 800bbda:	4630      	mov	r0, r6
 800bbdc:	4639      	mov	r1, r7
 800bbde:	f7f4 fb4b 	bl	8000278 <__aeabi_dsub>
 800bbe2:	a335      	add	r3, pc, #212	; (adr r3, 800bcb8 <__ieee754_pow+0x740>)
 800bbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe8:	f7f4 fcfe 	bl	80005e8 <__aeabi_dmul>
 800bbec:	a334      	add	r3, pc, #208	; (adr r3, 800bcc0 <__ieee754_pow+0x748>)
 800bbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	460f      	mov	r7, r1
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	f7f4 fcf5 	bl	80005e8 <__aeabi_dmul>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	4630      	mov	r0, r6
 800bc04:	4639      	mov	r1, r7
 800bc06:	f7f4 fb39 	bl	800027c <__adddf3>
 800bc0a:	9a07      	ldr	r2, [sp, #28]
 800bc0c:	4b37      	ldr	r3, [pc, #220]	; (800bcec <__ieee754_pow+0x774>)
 800bc0e:	4413      	add	r3, r2
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	f7f4 fb32 	bl	800027c <__adddf3>
 800bc18:	4682      	mov	sl, r0
 800bc1a:	9805      	ldr	r0, [sp, #20]
 800bc1c:	468b      	mov	fp, r1
 800bc1e:	f7f4 fc79 	bl	8000514 <__aeabi_i2d>
 800bc22:	9a07      	ldr	r2, [sp, #28]
 800bc24:	4b32      	ldr	r3, [pc, #200]	; (800bcf0 <__ieee754_pow+0x778>)
 800bc26:	4413      	add	r3, r2
 800bc28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc2c:	4606      	mov	r6, r0
 800bc2e:	460f      	mov	r7, r1
 800bc30:	4652      	mov	r2, sl
 800bc32:	465b      	mov	r3, fp
 800bc34:	ec51 0b18 	vmov	r0, r1, d8
 800bc38:	f7f4 fb20 	bl	800027c <__adddf3>
 800bc3c:	4642      	mov	r2, r8
 800bc3e:	464b      	mov	r3, r9
 800bc40:	f7f4 fb1c 	bl	800027c <__adddf3>
 800bc44:	4632      	mov	r2, r6
 800bc46:	463b      	mov	r3, r7
 800bc48:	f7f4 fb18 	bl	800027c <__adddf3>
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	4632      	mov	r2, r6
 800bc50:	463b      	mov	r3, r7
 800bc52:	4604      	mov	r4, r0
 800bc54:	460d      	mov	r5, r1
 800bc56:	f7f4 fb0f 	bl	8000278 <__aeabi_dsub>
 800bc5a:	4642      	mov	r2, r8
 800bc5c:	464b      	mov	r3, r9
 800bc5e:	f7f4 fb0b 	bl	8000278 <__aeabi_dsub>
 800bc62:	ec53 2b18 	vmov	r2, r3, d8
 800bc66:	f7f4 fb07 	bl	8000278 <__aeabi_dsub>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4650      	mov	r0, sl
 800bc70:	4659      	mov	r1, fp
 800bc72:	e610      	b.n	800b896 <__ieee754_pow+0x31e>
 800bc74:	2401      	movs	r4, #1
 800bc76:	e6a1      	b.n	800b9bc <__ieee754_pow+0x444>
 800bc78:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bcc8 <__ieee754_pow+0x750>
 800bc7c:	e617      	b.n	800b8ae <__ieee754_pow+0x336>
 800bc7e:	bf00      	nop
 800bc80:	4a454eef 	.word	0x4a454eef
 800bc84:	3fca7e28 	.word	0x3fca7e28
 800bc88:	93c9db65 	.word	0x93c9db65
 800bc8c:	3fcd864a 	.word	0x3fcd864a
 800bc90:	a91d4101 	.word	0xa91d4101
 800bc94:	3fd17460 	.word	0x3fd17460
 800bc98:	518f264d 	.word	0x518f264d
 800bc9c:	3fd55555 	.word	0x3fd55555
 800bca0:	db6fabff 	.word	0xdb6fabff
 800bca4:	3fdb6db6 	.word	0x3fdb6db6
 800bca8:	33333303 	.word	0x33333303
 800bcac:	3fe33333 	.word	0x3fe33333
 800bcb0:	e0000000 	.word	0xe0000000
 800bcb4:	3feec709 	.word	0x3feec709
 800bcb8:	dc3a03fd 	.word	0xdc3a03fd
 800bcbc:	3feec709 	.word	0x3feec709
 800bcc0:	145b01f5 	.word	0x145b01f5
 800bcc4:	be3e2fe0 	.word	0xbe3e2fe0
 800bcc8:	00000000 	.word	0x00000000
 800bccc:	3ff00000 	.word	0x3ff00000
 800bcd0:	7ff00000 	.word	0x7ff00000
 800bcd4:	43400000 	.word	0x43400000
 800bcd8:	0003988e 	.word	0x0003988e
 800bcdc:	000bb679 	.word	0x000bb679
 800bce0:	0800fe30 	.word	0x0800fe30
 800bce4:	3ff00000 	.word	0x3ff00000
 800bce8:	40080000 	.word	0x40080000
 800bcec:	0800fe50 	.word	0x0800fe50
 800bcf0:	0800fe40 	.word	0x0800fe40
 800bcf4:	a3b3      	add	r3, pc, #716	; (adr r3, 800bfc4 <__ieee754_pow+0xa4c>)
 800bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfa:	4640      	mov	r0, r8
 800bcfc:	4649      	mov	r1, r9
 800bcfe:	f7f4 fabd 	bl	800027c <__adddf3>
 800bd02:	4622      	mov	r2, r4
 800bd04:	ec41 0b1a 	vmov	d10, r0, r1
 800bd08:	462b      	mov	r3, r5
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	4639      	mov	r1, r7
 800bd0e:	f7f4 fab3 	bl	8000278 <__aeabi_dsub>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	ec51 0b1a 	vmov	r0, r1, d10
 800bd1a:	f7f4 fef5 	bl	8000b08 <__aeabi_dcmpgt>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	f47f ae04 	bne.w	800b92c <__ieee754_pow+0x3b4>
 800bd24:	4aa2      	ldr	r2, [pc, #648]	; (800bfb0 <__ieee754_pow+0xa38>)
 800bd26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	f340 8107 	ble.w	800bf3e <__ieee754_pow+0x9c6>
 800bd30:	151b      	asrs	r3, r3, #20
 800bd32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bd36:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bd3a:	fa4a fa03 	asr.w	sl, sl, r3
 800bd3e:	44da      	add	sl, fp
 800bd40:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bd44:	489b      	ldr	r0, [pc, #620]	; (800bfb4 <__ieee754_pow+0xa3c>)
 800bd46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bd4a:	4108      	asrs	r0, r1
 800bd4c:	ea00 030a 	and.w	r3, r0, sl
 800bd50:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800bd54:	f1c1 0114 	rsb	r1, r1, #20
 800bd58:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bd5c:	fa4a fa01 	asr.w	sl, sl, r1
 800bd60:	f1bb 0f00 	cmp.w	fp, #0
 800bd64:	f04f 0200 	mov.w	r2, #0
 800bd68:	4620      	mov	r0, r4
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	bfb8      	it	lt
 800bd6e:	f1ca 0a00 	rsblt	sl, sl, #0
 800bd72:	f7f4 fa81 	bl	8000278 <__aeabi_dsub>
 800bd76:	ec41 0b19 	vmov	d9, r0, r1
 800bd7a:	4642      	mov	r2, r8
 800bd7c:	464b      	mov	r3, r9
 800bd7e:	ec51 0b19 	vmov	r0, r1, d9
 800bd82:	f7f4 fa7b 	bl	800027c <__adddf3>
 800bd86:	a37a      	add	r3, pc, #488	; (adr r3, 800bf70 <__ieee754_pow+0x9f8>)
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	4604      	mov	r4, r0
 800bd90:	460d      	mov	r5, r1
 800bd92:	f7f4 fc29 	bl	80005e8 <__aeabi_dmul>
 800bd96:	ec53 2b19 	vmov	r2, r3, d9
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	460f      	mov	r7, r1
 800bd9e:	4620      	mov	r0, r4
 800bda0:	4629      	mov	r1, r5
 800bda2:	f7f4 fa69 	bl	8000278 <__aeabi_dsub>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4649      	mov	r1, r9
 800bdae:	f7f4 fa63 	bl	8000278 <__aeabi_dsub>
 800bdb2:	a371      	add	r3, pc, #452	; (adr r3, 800bf78 <__ieee754_pow+0xa00>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f7f4 fc16 	bl	80005e8 <__aeabi_dmul>
 800bdbc:	a370      	add	r3, pc, #448	; (adr r3, 800bf80 <__ieee754_pow+0xa08>)
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	4689      	mov	r9, r1
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	4629      	mov	r1, r5
 800bdca:	f7f4 fc0d 	bl	80005e8 <__aeabi_dmul>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4640      	mov	r0, r8
 800bdd4:	4649      	mov	r1, r9
 800bdd6:	f7f4 fa51 	bl	800027c <__adddf3>
 800bdda:	4604      	mov	r4, r0
 800bddc:	460d      	mov	r5, r1
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	4630      	mov	r0, r6
 800bde4:	4639      	mov	r1, r7
 800bde6:	f7f4 fa49 	bl	800027c <__adddf3>
 800bdea:	4632      	mov	r2, r6
 800bdec:	463b      	mov	r3, r7
 800bdee:	4680      	mov	r8, r0
 800bdf0:	4689      	mov	r9, r1
 800bdf2:	f7f4 fa41 	bl	8000278 <__aeabi_dsub>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	f7f4 fa3b 	bl	8000278 <__aeabi_dsub>
 800be02:	4642      	mov	r2, r8
 800be04:	4606      	mov	r6, r0
 800be06:	460f      	mov	r7, r1
 800be08:	464b      	mov	r3, r9
 800be0a:	4640      	mov	r0, r8
 800be0c:	4649      	mov	r1, r9
 800be0e:	f7f4 fbeb 	bl	80005e8 <__aeabi_dmul>
 800be12:	a35d      	add	r3, pc, #372	; (adr r3, 800bf88 <__ieee754_pow+0xa10>)
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	4604      	mov	r4, r0
 800be1a:	460d      	mov	r5, r1
 800be1c:	f7f4 fbe4 	bl	80005e8 <__aeabi_dmul>
 800be20:	a35b      	add	r3, pc, #364	; (adr r3, 800bf90 <__ieee754_pow+0xa18>)
 800be22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be26:	f7f4 fa27 	bl	8000278 <__aeabi_dsub>
 800be2a:	4622      	mov	r2, r4
 800be2c:	462b      	mov	r3, r5
 800be2e:	f7f4 fbdb 	bl	80005e8 <__aeabi_dmul>
 800be32:	a359      	add	r3, pc, #356	; (adr r3, 800bf98 <__ieee754_pow+0xa20>)
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	f7f4 fa20 	bl	800027c <__adddf3>
 800be3c:	4622      	mov	r2, r4
 800be3e:	462b      	mov	r3, r5
 800be40:	f7f4 fbd2 	bl	80005e8 <__aeabi_dmul>
 800be44:	a356      	add	r3, pc, #344	; (adr r3, 800bfa0 <__ieee754_pow+0xa28>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	f7f4 fa15 	bl	8000278 <__aeabi_dsub>
 800be4e:	4622      	mov	r2, r4
 800be50:	462b      	mov	r3, r5
 800be52:	f7f4 fbc9 	bl	80005e8 <__aeabi_dmul>
 800be56:	a354      	add	r3, pc, #336	; (adr r3, 800bfa8 <__ieee754_pow+0xa30>)
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	f7f4 fa0e 	bl	800027c <__adddf3>
 800be60:	4622      	mov	r2, r4
 800be62:	462b      	mov	r3, r5
 800be64:	f7f4 fbc0 	bl	80005e8 <__aeabi_dmul>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	4640      	mov	r0, r8
 800be6e:	4649      	mov	r1, r9
 800be70:	f7f4 fa02 	bl	8000278 <__aeabi_dsub>
 800be74:	4604      	mov	r4, r0
 800be76:	460d      	mov	r5, r1
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4640      	mov	r0, r8
 800be7e:	4649      	mov	r1, r9
 800be80:	f7f4 fbb2 	bl	80005e8 <__aeabi_dmul>
 800be84:	2200      	movs	r2, #0
 800be86:	ec41 0b19 	vmov	d9, r0, r1
 800be8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be8e:	4620      	mov	r0, r4
 800be90:	4629      	mov	r1, r5
 800be92:	f7f4 f9f1 	bl	8000278 <__aeabi_dsub>
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	ec51 0b19 	vmov	r0, r1, d9
 800be9e:	f7f4 fccd 	bl	800083c <__aeabi_ddiv>
 800bea2:	4632      	mov	r2, r6
 800bea4:	4604      	mov	r4, r0
 800bea6:	460d      	mov	r5, r1
 800bea8:	463b      	mov	r3, r7
 800beaa:	4640      	mov	r0, r8
 800beac:	4649      	mov	r1, r9
 800beae:	f7f4 fb9b 	bl	80005e8 <__aeabi_dmul>
 800beb2:	4632      	mov	r2, r6
 800beb4:	463b      	mov	r3, r7
 800beb6:	f7f4 f9e1 	bl	800027c <__adddf3>
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4620      	mov	r0, r4
 800bec0:	4629      	mov	r1, r5
 800bec2:	f7f4 f9d9 	bl	8000278 <__aeabi_dsub>
 800bec6:	4642      	mov	r2, r8
 800bec8:	464b      	mov	r3, r9
 800beca:	f7f4 f9d5 	bl	8000278 <__aeabi_dsub>
 800bece:	460b      	mov	r3, r1
 800bed0:	4602      	mov	r2, r0
 800bed2:	4939      	ldr	r1, [pc, #228]	; (800bfb8 <__ieee754_pow+0xa40>)
 800bed4:	2000      	movs	r0, #0
 800bed6:	f7f4 f9cf 	bl	8000278 <__aeabi_dsub>
 800beda:	ec41 0b10 	vmov	d0, r0, r1
 800bede:	ee10 3a90 	vmov	r3, s1
 800bee2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800beea:	da2b      	bge.n	800bf44 <__ieee754_pow+0x9cc>
 800beec:	4650      	mov	r0, sl
 800beee:	f000 fd5f 	bl	800c9b0 <scalbn>
 800bef2:	ec51 0b10 	vmov	r0, r1, d0
 800bef6:	ec53 2b18 	vmov	r2, r3, d8
 800befa:	f7ff bbee 	b.w	800b6da <__ieee754_pow+0x162>
 800befe:	4b2f      	ldr	r3, [pc, #188]	; (800bfbc <__ieee754_pow+0xa44>)
 800bf00:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bf04:	429e      	cmp	r6, r3
 800bf06:	f77f af0d 	ble.w	800bd24 <__ieee754_pow+0x7ac>
 800bf0a:	4b2d      	ldr	r3, [pc, #180]	; (800bfc0 <__ieee754_pow+0xa48>)
 800bf0c:	440b      	add	r3, r1
 800bf0e:	4303      	orrs	r3, r0
 800bf10:	d009      	beq.n	800bf26 <__ieee754_pow+0x9ae>
 800bf12:	ec51 0b18 	vmov	r0, r1, d8
 800bf16:	2200      	movs	r2, #0
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f7f4 fdd7 	bl	8000acc <__aeabi_dcmplt>
 800bf1e:	3800      	subs	r0, #0
 800bf20:	bf18      	it	ne
 800bf22:	2001      	movne	r0, #1
 800bf24:	e448      	b.n	800b7b8 <__ieee754_pow+0x240>
 800bf26:	4622      	mov	r2, r4
 800bf28:	462b      	mov	r3, r5
 800bf2a:	f7f4 f9a5 	bl	8000278 <__aeabi_dsub>
 800bf2e:	4642      	mov	r2, r8
 800bf30:	464b      	mov	r3, r9
 800bf32:	f7f4 fddf 	bl	8000af4 <__aeabi_dcmpge>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f43f aef4 	beq.w	800bd24 <__ieee754_pow+0x7ac>
 800bf3c:	e7e9      	b.n	800bf12 <__ieee754_pow+0x99a>
 800bf3e:	f04f 0a00 	mov.w	sl, #0
 800bf42:	e71a      	b.n	800bd7a <__ieee754_pow+0x802>
 800bf44:	ec51 0b10 	vmov	r0, r1, d0
 800bf48:	4619      	mov	r1, r3
 800bf4a:	e7d4      	b.n	800bef6 <__ieee754_pow+0x97e>
 800bf4c:	491a      	ldr	r1, [pc, #104]	; (800bfb8 <__ieee754_pow+0xa40>)
 800bf4e:	2000      	movs	r0, #0
 800bf50:	f7ff bb31 	b.w	800b5b6 <__ieee754_pow+0x3e>
 800bf54:	2000      	movs	r0, #0
 800bf56:	2100      	movs	r1, #0
 800bf58:	f7ff bb2d 	b.w	800b5b6 <__ieee754_pow+0x3e>
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	4639      	mov	r1, r7
 800bf60:	f7ff bb29 	b.w	800b5b6 <__ieee754_pow+0x3e>
 800bf64:	9204      	str	r2, [sp, #16]
 800bf66:	f7ff bb7b 	b.w	800b660 <__ieee754_pow+0xe8>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	f7ff bb65 	b.w	800b63a <__ieee754_pow+0xc2>
 800bf70:	00000000 	.word	0x00000000
 800bf74:	3fe62e43 	.word	0x3fe62e43
 800bf78:	fefa39ef 	.word	0xfefa39ef
 800bf7c:	3fe62e42 	.word	0x3fe62e42
 800bf80:	0ca86c39 	.word	0x0ca86c39
 800bf84:	be205c61 	.word	0xbe205c61
 800bf88:	72bea4d0 	.word	0x72bea4d0
 800bf8c:	3e663769 	.word	0x3e663769
 800bf90:	c5d26bf1 	.word	0xc5d26bf1
 800bf94:	3ebbbd41 	.word	0x3ebbbd41
 800bf98:	af25de2c 	.word	0xaf25de2c
 800bf9c:	3f11566a 	.word	0x3f11566a
 800bfa0:	16bebd93 	.word	0x16bebd93
 800bfa4:	3f66c16c 	.word	0x3f66c16c
 800bfa8:	5555553e 	.word	0x5555553e
 800bfac:	3fc55555 	.word	0x3fc55555
 800bfb0:	3fe00000 	.word	0x3fe00000
 800bfb4:	fff00000 	.word	0xfff00000
 800bfb8:	3ff00000 	.word	0x3ff00000
 800bfbc:	4090cbff 	.word	0x4090cbff
 800bfc0:	3f6f3400 	.word	0x3f6f3400
 800bfc4:	652b82fe 	.word	0x652b82fe
 800bfc8:	3c971547 	.word	0x3c971547
 800bfcc:	00000000 	.word	0x00000000

0800bfd0 <atan>:
 800bfd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd4:	ec55 4b10 	vmov	r4, r5, d0
 800bfd8:	4bc3      	ldr	r3, [pc, #780]	; (800c2e8 <atan+0x318>)
 800bfda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bfde:	429e      	cmp	r6, r3
 800bfe0:	46ab      	mov	fp, r5
 800bfe2:	dd18      	ble.n	800c016 <atan+0x46>
 800bfe4:	4bc1      	ldr	r3, [pc, #772]	; (800c2ec <atan+0x31c>)
 800bfe6:	429e      	cmp	r6, r3
 800bfe8:	dc01      	bgt.n	800bfee <atan+0x1e>
 800bfea:	d109      	bne.n	800c000 <atan+0x30>
 800bfec:	b144      	cbz	r4, 800c000 <atan+0x30>
 800bfee:	4622      	mov	r2, r4
 800bff0:	462b      	mov	r3, r5
 800bff2:	4620      	mov	r0, r4
 800bff4:	4629      	mov	r1, r5
 800bff6:	f7f4 f941 	bl	800027c <__adddf3>
 800bffa:	4604      	mov	r4, r0
 800bffc:	460d      	mov	r5, r1
 800bffe:	e006      	b.n	800c00e <atan+0x3e>
 800c000:	f1bb 0f00 	cmp.w	fp, #0
 800c004:	f300 8131 	bgt.w	800c26a <atan+0x29a>
 800c008:	a59b      	add	r5, pc, #620	; (adr r5, 800c278 <atan+0x2a8>)
 800c00a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c00e:	ec45 4b10 	vmov	d0, r4, r5
 800c012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c016:	4bb6      	ldr	r3, [pc, #728]	; (800c2f0 <atan+0x320>)
 800c018:	429e      	cmp	r6, r3
 800c01a:	dc14      	bgt.n	800c046 <atan+0x76>
 800c01c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c020:	429e      	cmp	r6, r3
 800c022:	dc0d      	bgt.n	800c040 <atan+0x70>
 800c024:	a396      	add	r3, pc, #600	; (adr r3, 800c280 <atan+0x2b0>)
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	ee10 0a10 	vmov	r0, s0
 800c02e:	4629      	mov	r1, r5
 800c030:	f7f4 f924 	bl	800027c <__adddf3>
 800c034:	4baf      	ldr	r3, [pc, #700]	; (800c2f4 <atan+0x324>)
 800c036:	2200      	movs	r2, #0
 800c038:	f7f4 fd66 	bl	8000b08 <__aeabi_dcmpgt>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d1e6      	bne.n	800c00e <atan+0x3e>
 800c040:	f04f 3aff 	mov.w	sl, #4294967295
 800c044:	e02b      	b.n	800c09e <atan+0xce>
 800c046:	f7fe fd07 	bl	800aa58 <fabs>
 800c04a:	4bab      	ldr	r3, [pc, #684]	; (800c2f8 <atan+0x328>)
 800c04c:	429e      	cmp	r6, r3
 800c04e:	ec55 4b10 	vmov	r4, r5, d0
 800c052:	f300 80bf 	bgt.w	800c1d4 <atan+0x204>
 800c056:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c05a:	429e      	cmp	r6, r3
 800c05c:	f300 80a0 	bgt.w	800c1a0 <atan+0x1d0>
 800c060:	ee10 2a10 	vmov	r2, s0
 800c064:	ee10 0a10 	vmov	r0, s0
 800c068:	462b      	mov	r3, r5
 800c06a:	4629      	mov	r1, r5
 800c06c:	f7f4 f906 	bl	800027c <__adddf3>
 800c070:	4ba0      	ldr	r3, [pc, #640]	; (800c2f4 <atan+0x324>)
 800c072:	2200      	movs	r2, #0
 800c074:	f7f4 f900 	bl	8000278 <__aeabi_dsub>
 800c078:	2200      	movs	r2, #0
 800c07a:	4606      	mov	r6, r0
 800c07c:	460f      	mov	r7, r1
 800c07e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c082:	4620      	mov	r0, r4
 800c084:	4629      	mov	r1, r5
 800c086:	f7f4 f8f9 	bl	800027c <__adddf3>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	4630      	mov	r0, r6
 800c090:	4639      	mov	r1, r7
 800c092:	f7f4 fbd3 	bl	800083c <__aeabi_ddiv>
 800c096:	f04f 0a00 	mov.w	sl, #0
 800c09a:	4604      	mov	r4, r0
 800c09c:	460d      	mov	r5, r1
 800c09e:	4622      	mov	r2, r4
 800c0a0:	462b      	mov	r3, r5
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	f7f4 fa9f 	bl	80005e8 <__aeabi_dmul>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	4680      	mov	r8, r0
 800c0b0:	4689      	mov	r9, r1
 800c0b2:	f7f4 fa99 	bl	80005e8 <__aeabi_dmul>
 800c0b6:	a374      	add	r3, pc, #464	; (adr r3, 800c288 <atan+0x2b8>)
 800c0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0bc:	4606      	mov	r6, r0
 800c0be:	460f      	mov	r7, r1
 800c0c0:	f7f4 fa92 	bl	80005e8 <__aeabi_dmul>
 800c0c4:	a372      	add	r3, pc, #456	; (adr r3, 800c290 <atan+0x2c0>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	f7f4 f8d7 	bl	800027c <__adddf3>
 800c0ce:	4632      	mov	r2, r6
 800c0d0:	463b      	mov	r3, r7
 800c0d2:	f7f4 fa89 	bl	80005e8 <__aeabi_dmul>
 800c0d6:	a370      	add	r3, pc, #448	; (adr r3, 800c298 <atan+0x2c8>)
 800c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0dc:	f7f4 f8ce 	bl	800027c <__adddf3>
 800c0e0:	4632      	mov	r2, r6
 800c0e2:	463b      	mov	r3, r7
 800c0e4:	f7f4 fa80 	bl	80005e8 <__aeabi_dmul>
 800c0e8:	a36d      	add	r3, pc, #436	; (adr r3, 800c2a0 <atan+0x2d0>)
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	f7f4 f8c5 	bl	800027c <__adddf3>
 800c0f2:	4632      	mov	r2, r6
 800c0f4:	463b      	mov	r3, r7
 800c0f6:	f7f4 fa77 	bl	80005e8 <__aeabi_dmul>
 800c0fa:	a36b      	add	r3, pc, #428	; (adr r3, 800c2a8 <atan+0x2d8>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	f7f4 f8bc 	bl	800027c <__adddf3>
 800c104:	4632      	mov	r2, r6
 800c106:	463b      	mov	r3, r7
 800c108:	f7f4 fa6e 	bl	80005e8 <__aeabi_dmul>
 800c10c:	a368      	add	r3, pc, #416	; (adr r3, 800c2b0 <atan+0x2e0>)
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	f7f4 f8b3 	bl	800027c <__adddf3>
 800c116:	4642      	mov	r2, r8
 800c118:	464b      	mov	r3, r9
 800c11a:	f7f4 fa65 	bl	80005e8 <__aeabi_dmul>
 800c11e:	a366      	add	r3, pc, #408	; (adr r3, 800c2b8 <atan+0x2e8>)
 800c120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c124:	4680      	mov	r8, r0
 800c126:	4689      	mov	r9, r1
 800c128:	4630      	mov	r0, r6
 800c12a:	4639      	mov	r1, r7
 800c12c:	f7f4 fa5c 	bl	80005e8 <__aeabi_dmul>
 800c130:	a363      	add	r3, pc, #396	; (adr r3, 800c2c0 <atan+0x2f0>)
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	f7f4 f89f 	bl	8000278 <__aeabi_dsub>
 800c13a:	4632      	mov	r2, r6
 800c13c:	463b      	mov	r3, r7
 800c13e:	f7f4 fa53 	bl	80005e8 <__aeabi_dmul>
 800c142:	a361      	add	r3, pc, #388	; (adr r3, 800c2c8 <atan+0x2f8>)
 800c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c148:	f7f4 f896 	bl	8000278 <__aeabi_dsub>
 800c14c:	4632      	mov	r2, r6
 800c14e:	463b      	mov	r3, r7
 800c150:	f7f4 fa4a 	bl	80005e8 <__aeabi_dmul>
 800c154:	a35e      	add	r3, pc, #376	; (adr r3, 800c2d0 <atan+0x300>)
 800c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15a:	f7f4 f88d 	bl	8000278 <__aeabi_dsub>
 800c15e:	4632      	mov	r2, r6
 800c160:	463b      	mov	r3, r7
 800c162:	f7f4 fa41 	bl	80005e8 <__aeabi_dmul>
 800c166:	a35c      	add	r3, pc, #368	; (adr r3, 800c2d8 <atan+0x308>)
 800c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16c:	f7f4 f884 	bl	8000278 <__aeabi_dsub>
 800c170:	4632      	mov	r2, r6
 800c172:	463b      	mov	r3, r7
 800c174:	f7f4 fa38 	bl	80005e8 <__aeabi_dmul>
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	4640      	mov	r0, r8
 800c17e:	4649      	mov	r1, r9
 800c180:	f7f4 f87c 	bl	800027c <__adddf3>
 800c184:	4622      	mov	r2, r4
 800c186:	462b      	mov	r3, r5
 800c188:	f7f4 fa2e 	bl	80005e8 <__aeabi_dmul>
 800c18c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	d14b      	bne.n	800c22e <atan+0x25e>
 800c196:	4620      	mov	r0, r4
 800c198:	4629      	mov	r1, r5
 800c19a:	f7f4 f86d 	bl	8000278 <__aeabi_dsub>
 800c19e:	e72c      	b.n	800bffa <atan+0x2a>
 800c1a0:	ee10 0a10 	vmov	r0, s0
 800c1a4:	4b53      	ldr	r3, [pc, #332]	; (800c2f4 <atan+0x324>)
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	f7f4 f865 	bl	8000278 <__aeabi_dsub>
 800c1ae:	4b51      	ldr	r3, [pc, #324]	; (800c2f4 <atan+0x324>)
 800c1b0:	4606      	mov	r6, r0
 800c1b2:	460f      	mov	r7, r1
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	f7f4 f85f 	bl	800027c <__adddf3>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	f7f4 fb39 	bl	800083c <__aeabi_ddiv>
 800c1ca:	f04f 0a01 	mov.w	sl, #1
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	460d      	mov	r5, r1
 800c1d2:	e764      	b.n	800c09e <atan+0xce>
 800c1d4:	4b49      	ldr	r3, [pc, #292]	; (800c2fc <atan+0x32c>)
 800c1d6:	429e      	cmp	r6, r3
 800c1d8:	da1d      	bge.n	800c216 <atan+0x246>
 800c1da:	ee10 0a10 	vmov	r0, s0
 800c1de:	4b48      	ldr	r3, [pc, #288]	; (800c300 <atan+0x330>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	f7f4 f848 	bl	8000278 <__aeabi_dsub>
 800c1e8:	4b45      	ldr	r3, [pc, #276]	; (800c300 <atan+0x330>)
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	460f      	mov	r7, r1
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	f7f4 f9f8 	bl	80005e8 <__aeabi_dmul>
 800c1f8:	4b3e      	ldr	r3, [pc, #248]	; (800c2f4 <atan+0x324>)
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f7f4 f83e 	bl	800027c <__adddf3>
 800c200:	4602      	mov	r2, r0
 800c202:	460b      	mov	r3, r1
 800c204:	4630      	mov	r0, r6
 800c206:	4639      	mov	r1, r7
 800c208:	f7f4 fb18 	bl	800083c <__aeabi_ddiv>
 800c20c:	f04f 0a02 	mov.w	sl, #2
 800c210:	4604      	mov	r4, r0
 800c212:	460d      	mov	r5, r1
 800c214:	e743      	b.n	800c09e <atan+0xce>
 800c216:	462b      	mov	r3, r5
 800c218:	ee10 2a10 	vmov	r2, s0
 800c21c:	4939      	ldr	r1, [pc, #228]	; (800c304 <atan+0x334>)
 800c21e:	2000      	movs	r0, #0
 800c220:	f7f4 fb0c 	bl	800083c <__aeabi_ddiv>
 800c224:	f04f 0a03 	mov.w	sl, #3
 800c228:	4604      	mov	r4, r0
 800c22a:	460d      	mov	r5, r1
 800c22c:	e737      	b.n	800c09e <atan+0xce>
 800c22e:	4b36      	ldr	r3, [pc, #216]	; (800c308 <atan+0x338>)
 800c230:	4e36      	ldr	r6, [pc, #216]	; (800c30c <atan+0x33c>)
 800c232:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23a:	f7f4 f81d 	bl	8000278 <__aeabi_dsub>
 800c23e:	4622      	mov	r2, r4
 800c240:	462b      	mov	r3, r5
 800c242:	f7f4 f819 	bl	8000278 <__aeabi_dsub>
 800c246:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c252:	f7f4 f811 	bl	8000278 <__aeabi_dsub>
 800c256:	f1bb 0f00 	cmp.w	fp, #0
 800c25a:	4604      	mov	r4, r0
 800c25c:	460d      	mov	r5, r1
 800c25e:	f6bf aed6 	bge.w	800c00e <atan+0x3e>
 800c262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c266:	461d      	mov	r5, r3
 800c268:	e6d1      	b.n	800c00e <atan+0x3e>
 800c26a:	a51d      	add	r5, pc, #116	; (adr r5, 800c2e0 <atan+0x310>)
 800c26c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c270:	e6cd      	b.n	800c00e <atan+0x3e>
 800c272:	bf00      	nop
 800c274:	f3af 8000 	nop.w
 800c278:	54442d18 	.word	0x54442d18
 800c27c:	bff921fb 	.word	0xbff921fb
 800c280:	8800759c 	.word	0x8800759c
 800c284:	7e37e43c 	.word	0x7e37e43c
 800c288:	e322da11 	.word	0xe322da11
 800c28c:	3f90ad3a 	.word	0x3f90ad3a
 800c290:	24760deb 	.word	0x24760deb
 800c294:	3fa97b4b 	.word	0x3fa97b4b
 800c298:	a0d03d51 	.word	0xa0d03d51
 800c29c:	3fb10d66 	.word	0x3fb10d66
 800c2a0:	c54c206e 	.word	0xc54c206e
 800c2a4:	3fb745cd 	.word	0x3fb745cd
 800c2a8:	920083ff 	.word	0x920083ff
 800c2ac:	3fc24924 	.word	0x3fc24924
 800c2b0:	5555550d 	.word	0x5555550d
 800c2b4:	3fd55555 	.word	0x3fd55555
 800c2b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c2bc:	bfa2b444 	.word	0xbfa2b444
 800c2c0:	52defd9a 	.word	0x52defd9a
 800c2c4:	3fadde2d 	.word	0x3fadde2d
 800c2c8:	af749a6d 	.word	0xaf749a6d
 800c2cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800c2d0:	fe231671 	.word	0xfe231671
 800c2d4:	3fbc71c6 	.word	0x3fbc71c6
 800c2d8:	9998ebc4 	.word	0x9998ebc4
 800c2dc:	3fc99999 	.word	0x3fc99999
 800c2e0:	54442d18 	.word	0x54442d18
 800c2e4:	3ff921fb 	.word	0x3ff921fb
 800c2e8:	440fffff 	.word	0x440fffff
 800c2ec:	7ff00000 	.word	0x7ff00000
 800c2f0:	3fdbffff 	.word	0x3fdbffff
 800c2f4:	3ff00000 	.word	0x3ff00000
 800c2f8:	3ff2ffff 	.word	0x3ff2ffff
 800c2fc:	40038000 	.word	0x40038000
 800c300:	3ff80000 	.word	0x3ff80000
 800c304:	bff00000 	.word	0xbff00000
 800c308:	0800fe80 	.word	0x0800fe80
 800c30c:	0800fe60 	.word	0x0800fe60

0800c310 <__kernel_cosf>:
 800c310:	ee10 3a10 	vmov	r3, s0
 800c314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c318:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c31c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c320:	da05      	bge.n	800c32e <__kernel_cosf+0x1e>
 800c322:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c326:	ee17 2a90 	vmov	r2, s15
 800c32a:	2a00      	cmp	r2, #0
 800c32c:	d03b      	beq.n	800c3a6 <__kernel_cosf+0x96>
 800c32e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c332:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c3ac <__kernel_cosf+0x9c>
 800c336:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800c3b0 <__kernel_cosf+0xa0>
 800c33a:	4a1e      	ldr	r2, [pc, #120]	; (800c3b4 <__kernel_cosf+0xa4>)
 800c33c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c340:	4293      	cmp	r3, r2
 800c342:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800c3b8 <__kernel_cosf+0xa8>
 800c346:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c34a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800c3bc <__kernel_cosf+0xac>
 800c34e:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c352:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800c3c0 <__kernel_cosf+0xb0>
 800c356:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c35a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800c3c4 <__kernel_cosf+0xb4>
 800c35e:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c362:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800c366:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c36a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c36e:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c376:	dc04      	bgt.n	800c382 <__kernel_cosf+0x72>
 800c378:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c37c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800c380:	4770      	bx	lr
 800c382:	4a11      	ldr	r2, [pc, #68]	; (800c3c8 <__kernel_cosf+0xb8>)
 800c384:	4293      	cmp	r3, r2
 800c386:	bfda      	itte	le
 800c388:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c38c:	ee07 3a10 	vmovle	s14, r3
 800c390:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800c394:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c398:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800c39c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c3a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c3a4:	4770      	bx	lr
 800c3a6:	eeb0 0a66 	vmov.f32	s0, s13
 800c3aa:	4770      	bx	lr
 800c3ac:	ad47d74e 	.word	0xad47d74e
 800c3b0:	310f74f6 	.word	0x310f74f6
 800c3b4:	3e999999 	.word	0x3e999999
 800c3b8:	b493f27c 	.word	0xb493f27c
 800c3bc:	37d00d01 	.word	0x37d00d01
 800c3c0:	bab60b61 	.word	0xbab60b61
 800c3c4:	3d2aaaab 	.word	0x3d2aaaab
 800c3c8:	3f480000 	.word	0x3f480000

0800c3cc <__kernel_sinf>:
 800c3cc:	ee10 3a10 	vmov	r3, s0
 800c3d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3d4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c3d8:	da04      	bge.n	800c3e4 <__kernel_sinf+0x18>
 800c3da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c3de:	ee17 3a90 	vmov	r3, s15
 800c3e2:	b35b      	cbz	r3, 800c43c <__kernel_sinf+0x70>
 800c3e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c3e8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c440 <__kernel_sinf+0x74>
 800c3ec:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c444 <__kernel_sinf+0x78>
 800c3f0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c3f4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c448 <__kernel_sinf+0x7c>
 800c3f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c3fc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c44c <__kernel_sinf+0x80>
 800c400:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c404:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c450 <__kernel_sinf+0x84>
 800c408:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c40c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c410:	b930      	cbnz	r0, 800c420 <__kernel_sinf+0x54>
 800c412:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c454 <__kernel_sinf+0x88>
 800c416:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c41a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c41e:	4770      	bx	lr
 800c420:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c424:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c428:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c42c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c430:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c458 <__kernel_sinf+0x8c>
 800c434:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c438:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	2f2ec9d3 	.word	0x2f2ec9d3
 800c444:	b2d72f34 	.word	0xb2d72f34
 800c448:	3638ef1b 	.word	0x3638ef1b
 800c44c:	b9500d01 	.word	0xb9500d01
 800c450:	3c088889 	.word	0x3c088889
 800c454:	be2aaaab 	.word	0xbe2aaaab
 800c458:	3e2aaaab 	.word	0x3e2aaaab

0800c45c <__ieee754_atan2f>:
 800c45c:	ee10 2a90 	vmov	r2, s1
 800c460:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c464:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c468:	b510      	push	{r4, lr}
 800c46a:	eef0 7a40 	vmov.f32	s15, s0
 800c46e:	dc06      	bgt.n	800c47e <__ieee754_atan2f+0x22>
 800c470:	ee10 0a10 	vmov	r0, s0
 800c474:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c478:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c47c:	dd04      	ble.n	800c488 <__ieee754_atan2f+0x2c>
 800c47e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c482:	eeb0 0a67 	vmov.f32	s0, s15
 800c486:	bd10      	pop	{r4, pc}
 800c488:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c48c:	d103      	bne.n	800c496 <__ieee754_atan2f+0x3a>
 800c48e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c492:	f000 b9af 	b.w	800c7f4 <atanf>
 800c496:	1794      	asrs	r4, r2, #30
 800c498:	f004 0402 	and.w	r4, r4, #2
 800c49c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c4a0:	b943      	cbnz	r3, 800c4b4 <__ieee754_atan2f+0x58>
 800c4a2:	2c02      	cmp	r4, #2
 800c4a4:	d05e      	beq.n	800c564 <__ieee754_atan2f+0x108>
 800c4a6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c578 <__ieee754_atan2f+0x11c>
 800c4aa:	2c03      	cmp	r4, #3
 800c4ac:	bf08      	it	eq
 800c4ae:	eef0 7a47 	vmoveq.f32	s15, s14
 800c4b2:	e7e6      	b.n	800c482 <__ieee754_atan2f+0x26>
 800c4b4:	b941      	cbnz	r1, 800c4c8 <__ieee754_atan2f+0x6c>
 800c4b6:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c57c <__ieee754_atan2f+0x120>
 800c4ba:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c580 <__ieee754_atan2f+0x124>
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	bfb8      	it	lt
 800c4c2:	eef0 7a47 	vmovlt.f32	s15, s14
 800c4c6:	e7dc      	b.n	800c482 <__ieee754_atan2f+0x26>
 800c4c8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c4cc:	d110      	bne.n	800c4f0 <__ieee754_atan2f+0x94>
 800c4ce:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c4d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c4d6:	d107      	bne.n	800c4e8 <__ieee754_atan2f+0x8c>
 800c4d8:	2c02      	cmp	r4, #2
 800c4da:	d846      	bhi.n	800c56a <__ieee754_atan2f+0x10e>
 800c4dc:	4b29      	ldr	r3, [pc, #164]	; (800c584 <__ieee754_atan2f+0x128>)
 800c4de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c4e2:	edd3 7a00 	vldr	s15, [r3]
 800c4e6:	e7cc      	b.n	800c482 <__ieee754_atan2f+0x26>
 800c4e8:	2c02      	cmp	r4, #2
 800c4ea:	d841      	bhi.n	800c570 <__ieee754_atan2f+0x114>
 800c4ec:	4b26      	ldr	r3, [pc, #152]	; (800c588 <__ieee754_atan2f+0x12c>)
 800c4ee:	e7f6      	b.n	800c4de <__ieee754_atan2f+0x82>
 800c4f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c4f4:	d0df      	beq.n	800c4b6 <__ieee754_atan2f+0x5a>
 800c4f6:	1a5b      	subs	r3, r3, r1
 800c4f8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800c4fc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c500:	da1a      	bge.n	800c538 <__ieee754_atan2f+0xdc>
 800c502:	2a00      	cmp	r2, #0
 800c504:	da01      	bge.n	800c50a <__ieee754_atan2f+0xae>
 800c506:	313c      	adds	r1, #60	; 0x3c
 800c508:	db19      	blt.n	800c53e <__ieee754_atan2f+0xe2>
 800c50a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c50e:	f000 fa45 	bl	800c99c <fabsf>
 800c512:	f000 f96f 	bl	800c7f4 <atanf>
 800c516:	eef0 7a40 	vmov.f32	s15, s0
 800c51a:	2c01      	cmp	r4, #1
 800c51c:	d012      	beq.n	800c544 <__ieee754_atan2f+0xe8>
 800c51e:	2c02      	cmp	r4, #2
 800c520:	d017      	beq.n	800c552 <__ieee754_atan2f+0xf6>
 800c522:	2c00      	cmp	r4, #0
 800c524:	d0ad      	beq.n	800c482 <__ieee754_atan2f+0x26>
 800c526:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800c58c <__ieee754_atan2f+0x130>
 800c52a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c52e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c590 <__ieee754_atan2f+0x134>
 800c532:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c536:	e7a4      	b.n	800c482 <__ieee754_atan2f+0x26>
 800c538:	eddf 7a10 	vldr	s15, [pc, #64]	; 800c57c <__ieee754_atan2f+0x120>
 800c53c:	e7ed      	b.n	800c51a <__ieee754_atan2f+0xbe>
 800c53e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c594 <__ieee754_atan2f+0x138>
 800c542:	e7ea      	b.n	800c51a <__ieee754_atan2f+0xbe>
 800c544:	ee17 3a90 	vmov	r3, s15
 800c548:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c54c:	ee07 3a90 	vmov	s15, r3
 800c550:	e797      	b.n	800c482 <__ieee754_atan2f+0x26>
 800c552:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800c58c <__ieee754_atan2f+0x130>
 800c556:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c55a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800c590 <__ieee754_atan2f+0x134>
 800c55e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c562:	e78e      	b.n	800c482 <__ieee754_atan2f+0x26>
 800c564:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800c590 <__ieee754_atan2f+0x134>
 800c568:	e78b      	b.n	800c482 <__ieee754_atan2f+0x26>
 800c56a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c598 <__ieee754_atan2f+0x13c>
 800c56e:	e788      	b.n	800c482 <__ieee754_atan2f+0x26>
 800c570:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c594 <__ieee754_atan2f+0x138>
 800c574:	e785      	b.n	800c482 <__ieee754_atan2f+0x26>
 800c576:	bf00      	nop
 800c578:	c0490fdb 	.word	0xc0490fdb
 800c57c:	3fc90fdb 	.word	0x3fc90fdb
 800c580:	bfc90fdb 	.word	0xbfc90fdb
 800c584:	0800fea0 	.word	0x0800fea0
 800c588:	0800feac 	.word	0x0800feac
 800c58c:	33bbbd2e 	.word	0x33bbbd2e
 800c590:	40490fdb 	.word	0x40490fdb
 800c594:	00000000 	.word	0x00000000
 800c598:	3f490fdb 	.word	0x3f490fdb

0800c59c <__ieee754_rem_pio2f>:
 800c59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c59e:	ee10 6a10 	vmov	r6, s0
 800c5a2:	4b86      	ldr	r3, [pc, #536]	; (800c7bc <__ieee754_rem_pio2f+0x220>)
 800c5a4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c5a8:	429d      	cmp	r5, r3
 800c5aa:	b087      	sub	sp, #28
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	dc05      	bgt.n	800c5bc <__ieee754_rem_pio2f+0x20>
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	ed80 0a00 	vstr	s0, [r0]
 800c5b6:	6043      	str	r3, [r0, #4]
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	e020      	b.n	800c5fe <__ieee754_rem_pio2f+0x62>
 800c5bc:	4b80      	ldr	r3, [pc, #512]	; (800c7c0 <__ieee754_rem_pio2f+0x224>)
 800c5be:	429d      	cmp	r5, r3
 800c5c0:	dc38      	bgt.n	800c634 <__ieee754_rem_pio2f+0x98>
 800c5c2:	2e00      	cmp	r6, #0
 800c5c4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800c7c4 <__ieee754_rem_pio2f+0x228>
 800c5c8:	4b7f      	ldr	r3, [pc, #508]	; (800c7c8 <__ieee754_rem_pio2f+0x22c>)
 800c5ca:	f025 050f 	bic.w	r5, r5, #15
 800c5ce:	dd18      	ble.n	800c602 <__ieee754_rem_pio2f+0x66>
 800c5d0:	429d      	cmp	r5, r3
 800c5d2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c5d6:	bf09      	itett	eq
 800c5d8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800c7cc <__ieee754_rem_pio2f+0x230>
 800c5dc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800c7d0 <__ieee754_rem_pio2f+0x234>
 800c5e0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c5e4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800c7d4 <__ieee754_rem_pio2f+0x238>
 800c5e8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c5ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c5f0:	edc0 6a00 	vstr	s13, [r0]
 800c5f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5f8:	edc0 7a01 	vstr	s15, [r0, #4]
 800c5fc:	2001      	movs	r0, #1
 800c5fe:	b007      	add	sp, #28
 800c600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c602:	429d      	cmp	r5, r3
 800c604:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c608:	bf09      	itett	eq
 800c60a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800c7cc <__ieee754_rem_pio2f+0x230>
 800c60e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800c7d0 <__ieee754_rem_pio2f+0x234>
 800c612:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c616:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800c7d4 <__ieee754_rem_pio2f+0x238>
 800c61a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c61e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c622:	edc0 6a00 	vstr	s13, [r0]
 800c626:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c62a:	edc0 7a01 	vstr	s15, [r0, #4]
 800c62e:	f04f 30ff 	mov.w	r0, #4294967295
 800c632:	e7e4      	b.n	800c5fe <__ieee754_rem_pio2f+0x62>
 800c634:	4b68      	ldr	r3, [pc, #416]	; (800c7d8 <__ieee754_rem_pio2f+0x23c>)
 800c636:	429d      	cmp	r5, r3
 800c638:	dc71      	bgt.n	800c71e <__ieee754_rem_pio2f+0x182>
 800c63a:	f000 f9af 	bl	800c99c <fabsf>
 800c63e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c7dc <__ieee754_rem_pio2f+0x240>
 800c642:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c646:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c64a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c64e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c652:	ee17 0a90 	vmov	r0, s15
 800c656:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c7c4 <__ieee754_rem_pio2f+0x228>
 800c65a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c65e:	281f      	cmp	r0, #31
 800c660:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c7d0 <__ieee754_rem_pio2f+0x234>
 800c664:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c668:	eeb1 6a47 	vneg.f32	s12, s14
 800c66c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c670:	ee16 2a90 	vmov	r2, s13
 800c674:	dc1c      	bgt.n	800c6b0 <__ieee754_rem_pio2f+0x114>
 800c676:	495a      	ldr	r1, [pc, #360]	; (800c7e0 <__ieee754_rem_pio2f+0x244>)
 800c678:	1e47      	subs	r7, r0, #1
 800c67a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c67e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c682:	428b      	cmp	r3, r1
 800c684:	d014      	beq.n	800c6b0 <__ieee754_rem_pio2f+0x114>
 800c686:	6022      	str	r2, [r4, #0]
 800c688:	ed94 7a00 	vldr	s14, [r4]
 800c68c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c690:	2e00      	cmp	r6, #0
 800c692:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c696:	ed84 0a01 	vstr	s0, [r4, #4]
 800c69a:	dab0      	bge.n	800c5fe <__ieee754_rem_pio2f+0x62>
 800c69c:	eeb1 7a47 	vneg.f32	s14, s14
 800c6a0:	eeb1 0a40 	vneg.f32	s0, s0
 800c6a4:	ed84 7a00 	vstr	s14, [r4]
 800c6a8:	ed84 0a01 	vstr	s0, [r4, #4]
 800c6ac:	4240      	negs	r0, r0
 800c6ae:	e7a6      	b.n	800c5fe <__ieee754_rem_pio2f+0x62>
 800c6b0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c6b4:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800c6b8:	2908      	cmp	r1, #8
 800c6ba:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c6be:	dde2      	ble.n	800c686 <__ieee754_rem_pio2f+0xea>
 800c6c0:	eddf 5a42 	vldr	s11, [pc, #264]	; 800c7cc <__ieee754_rem_pio2f+0x230>
 800c6c4:	eef0 6a40 	vmov.f32	s13, s0
 800c6c8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c6cc:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c6d0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c6d4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c7d4 <__ieee754_rem_pio2f+0x238>
 800c6d8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c6dc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c6e0:	ee15 2a90 	vmov	r2, s11
 800c6e4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c6e8:	1a5b      	subs	r3, r3, r1
 800c6ea:	2b19      	cmp	r3, #25
 800c6ec:	dc04      	bgt.n	800c6f8 <__ieee754_rem_pio2f+0x15c>
 800c6ee:	edc4 5a00 	vstr	s11, [r4]
 800c6f2:	eeb0 0a66 	vmov.f32	s0, s13
 800c6f6:	e7c7      	b.n	800c688 <__ieee754_rem_pio2f+0xec>
 800c6f8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c7e4 <__ieee754_rem_pio2f+0x248>
 800c6fc:	eeb0 0a66 	vmov.f32	s0, s13
 800c700:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c704:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c708:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c7e8 <__ieee754_rem_pio2f+0x24c>
 800c70c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c710:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c714:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c718:	ed84 7a00 	vstr	s14, [r4]
 800c71c:	e7b4      	b.n	800c688 <__ieee754_rem_pio2f+0xec>
 800c71e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c722:	db06      	blt.n	800c732 <__ieee754_rem_pio2f+0x196>
 800c724:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c728:	edc0 7a01 	vstr	s15, [r0, #4]
 800c72c:	edc0 7a00 	vstr	s15, [r0]
 800c730:	e742      	b.n	800c5b8 <__ieee754_rem_pio2f+0x1c>
 800c732:	15ea      	asrs	r2, r5, #23
 800c734:	3a86      	subs	r2, #134	; 0x86
 800c736:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c73a:	ee07 3a90 	vmov	s15, r3
 800c73e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c742:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800c7ec <__ieee754_rem_pio2f+0x250>
 800c746:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c74a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c74e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c752:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c756:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c75a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c75e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c762:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c766:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c76a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c772:	edcd 7a05 	vstr	s15, [sp, #20]
 800c776:	d11e      	bne.n	800c7b6 <__ieee754_rem_pio2f+0x21a>
 800c778:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c780:	bf14      	ite	ne
 800c782:	2302      	movne	r3, #2
 800c784:	2301      	moveq	r3, #1
 800c786:	491a      	ldr	r1, [pc, #104]	; (800c7f0 <__ieee754_rem_pio2f+0x254>)
 800c788:	9101      	str	r1, [sp, #4]
 800c78a:	2102      	movs	r1, #2
 800c78c:	9100      	str	r1, [sp, #0]
 800c78e:	a803      	add	r0, sp, #12
 800c790:	4621      	mov	r1, r4
 800c792:	f000 f9bb 	bl	800cb0c <__kernel_rem_pio2f>
 800c796:	2e00      	cmp	r6, #0
 800c798:	f6bf af31 	bge.w	800c5fe <__ieee754_rem_pio2f+0x62>
 800c79c:	edd4 7a00 	vldr	s15, [r4]
 800c7a0:	eef1 7a67 	vneg.f32	s15, s15
 800c7a4:	edc4 7a00 	vstr	s15, [r4]
 800c7a8:	edd4 7a01 	vldr	s15, [r4, #4]
 800c7ac:	eef1 7a67 	vneg.f32	s15, s15
 800c7b0:	edc4 7a01 	vstr	s15, [r4, #4]
 800c7b4:	e77a      	b.n	800c6ac <__ieee754_rem_pio2f+0x110>
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	e7e5      	b.n	800c786 <__ieee754_rem_pio2f+0x1ea>
 800c7ba:	bf00      	nop
 800c7bc:	3f490fd8 	.word	0x3f490fd8
 800c7c0:	4016cbe3 	.word	0x4016cbe3
 800c7c4:	3fc90f80 	.word	0x3fc90f80
 800c7c8:	3fc90fd0 	.word	0x3fc90fd0
 800c7cc:	37354400 	.word	0x37354400
 800c7d0:	37354443 	.word	0x37354443
 800c7d4:	2e85a308 	.word	0x2e85a308
 800c7d8:	43490f80 	.word	0x43490f80
 800c7dc:	3f22f984 	.word	0x3f22f984
 800c7e0:	0800feb8 	.word	0x0800feb8
 800c7e4:	2e85a300 	.word	0x2e85a300
 800c7e8:	248d3132 	.word	0x248d3132
 800c7ec:	43800000 	.word	0x43800000
 800c7f0:	0800ff38 	.word	0x0800ff38

0800c7f4 <atanf>:
 800c7f4:	b538      	push	{r3, r4, r5, lr}
 800c7f6:	ee10 5a10 	vmov	r5, s0
 800c7fa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c7fe:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c802:	eef0 7a40 	vmov.f32	s15, s0
 800c806:	db10      	blt.n	800c82a <atanf+0x36>
 800c808:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c80c:	dd04      	ble.n	800c818 <atanf+0x24>
 800c80e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c812:	eeb0 0a67 	vmov.f32	s0, s15
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c950 <atanf+0x15c>
 800c81c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800c954 <atanf+0x160>
 800c820:	2d00      	cmp	r5, #0
 800c822:	bfd8      	it	le
 800c824:	eef0 7a47 	vmovle.f32	s15, s14
 800c828:	e7f3      	b.n	800c812 <atanf+0x1e>
 800c82a:	4b4b      	ldr	r3, [pc, #300]	; (800c958 <atanf+0x164>)
 800c82c:	429c      	cmp	r4, r3
 800c82e:	dc10      	bgt.n	800c852 <atanf+0x5e>
 800c830:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c834:	da0a      	bge.n	800c84c <atanf+0x58>
 800c836:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c95c <atanf+0x168>
 800c83a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c83e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c842:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c84a:	dce2      	bgt.n	800c812 <atanf+0x1e>
 800c84c:	f04f 33ff 	mov.w	r3, #4294967295
 800c850:	e013      	b.n	800c87a <atanf+0x86>
 800c852:	f000 f8a3 	bl	800c99c <fabsf>
 800c856:	4b42      	ldr	r3, [pc, #264]	; (800c960 <atanf+0x16c>)
 800c858:	429c      	cmp	r4, r3
 800c85a:	dc4f      	bgt.n	800c8fc <atanf+0x108>
 800c85c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c860:	429c      	cmp	r4, r3
 800c862:	dc41      	bgt.n	800c8e8 <atanf+0xf4>
 800c864:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c868:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c86c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c870:	2300      	movs	r3, #0
 800c872:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c876:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c87a:	1c5a      	adds	r2, r3, #1
 800c87c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c880:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c964 <atanf+0x170>
 800c884:	eddf 5a38 	vldr	s11, [pc, #224]	; 800c968 <atanf+0x174>
 800c888:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800c96c <atanf+0x178>
 800c88c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c890:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c894:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c970 <atanf+0x17c>
 800c898:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c89c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800c974 <atanf+0x180>
 800c8a0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c8a4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c978 <atanf+0x184>
 800c8a8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c8ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c97c <atanf+0x188>
 800c8b0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c8b4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800c980 <atanf+0x18c>
 800c8b8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c8bc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c984 <atanf+0x190>
 800c8c0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c8c4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800c988 <atanf+0x194>
 800c8c8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c8cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800c98c <atanf+0x198>
 800c8d0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c8d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c8d8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c8dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c8e0:	d121      	bne.n	800c926 <atanf+0x132>
 800c8e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8e6:	e794      	b.n	800c812 <atanf+0x1e>
 800c8e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c8ec:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c8f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c8fa:	e7be      	b.n	800c87a <atanf+0x86>
 800c8fc:	4b24      	ldr	r3, [pc, #144]	; (800c990 <atanf+0x19c>)
 800c8fe:	429c      	cmp	r4, r3
 800c900:	dc0b      	bgt.n	800c91a <atanf+0x126>
 800c902:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c90a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c90e:	2302      	movs	r3, #2
 800c910:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c918:	e7af      	b.n	800c87a <atanf+0x86>
 800c91a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c91e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c922:	2303      	movs	r3, #3
 800c924:	e7a9      	b.n	800c87a <atanf+0x86>
 800c926:	4a1b      	ldr	r2, [pc, #108]	; (800c994 <atanf+0x1a0>)
 800c928:	491b      	ldr	r1, [pc, #108]	; (800c998 <atanf+0x1a4>)
 800c92a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c92e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c932:	edd3 6a00 	vldr	s13, [r3]
 800c936:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c93a:	2d00      	cmp	r5, #0
 800c93c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c940:	edd2 7a00 	vldr	s15, [r2]
 800c944:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c948:	bfb8      	it	lt
 800c94a:	eef1 7a67 	vneglt.f32	s15, s15
 800c94e:	e760      	b.n	800c812 <atanf+0x1e>
 800c950:	3fc90fdb 	.word	0x3fc90fdb
 800c954:	bfc90fdb 	.word	0xbfc90fdb
 800c958:	3edfffff 	.word	0x3edfffff
 800c95c:	7149f2ca 	.word	0x7149f2ca
 800c960:	3f97ffff 	.word	0x3f97ffff
 800c964:	3c8569d7 	.word	0x3c8569d7
 800c968:	3d4bda59 	.word	0x3d4bda59
 800c96c:	bd6ef16b 	.word	0xbd6ef16b
 800c970:	3d886b35 	.word	0x3d886b35
 800c974:	3dba2e6e 	.word	0x3dba2e6e
 800c978:	3e124925 	.word	0x3e124925
 800c97c:	3eaaaaab 	.word	0x3eaaaaab
 800c980:	bd15a221 	.word	0xbd15a221
 800c984:	bd9d8795 	.word	0xbd9d8795
 800c988:	bde38e38 	.word	0xbde38e38
 800c98c:	be4ccccd 	.word	0xbe4ccccd
 800c990:	401bffff 	.word	0x401bffff
 800c994:	08010250 	.word	0x08010250
 800c998:	08010260 	.word	0x08010260

0800c99c <fabsf>:
 800c99c:	ee10 3a10 	vmov	r3, s0
 800c9a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9a4:	ee00 3a10 	vmov	s0, r3
 800c9a8:	4770      	bx	lr
 800c9aa:	0000      	movs	r0, r0
 800c9ac:	0000      	movs	r0, r0
	...

0800c9b0 <scalbn>:
 800c9b0:	b570      	push	{r4, r5, r6, lr}
 800c9b2:	ec55 4b10 	vmov	r4, r5, d0
 800c9b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	462b      	mov	r3, r5
 800c9be:	b999      	cbnz	r1, 800c9e8 <scalbn+0x38>
 800c9c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c9c4:	4323      	orrs	r3, r4
 800c9c6:	d03f      	beq.n	800ca48 <scalbn+0x98>
 800c9c8:	4b35      	ldr	r3, [pc, #212]	; (800caa0 <scalbn+0xf0>)
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	ee10 0a10 	vmov	r0, s0
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f7f3 fe09 	bl	80005e8 <__aeabi_dmul>
 800c9d6:	4b33      	ldr	r3, [pc, #204]	; (800caa4 <scalbn+0xf4>)
 800c9d8:	429e      	cmp	r6, r3
 800c9da:	4604      	mov	r4, r0
 800c9dc:	460d      	mov	r5, r1
 800c9de:	da10      	bge.n	800ca02 <scalbn+0x52>
 800c9e0:	a327      	add	r3, pc, #156	; (adr r3, 800ca80 <scalbn+0xd0>)
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	e01f      	b.n	800ca28 <scalbn+0x78>
 800c9e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c9ec:	4291      	cmp	r1, r2
 800c9ee:	d10c      	bne.n	800ca0a <scalbn+0x5a>
 800c9f0:	ee10 2a10 	vmov	r2, s0
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	f7f3 fc40 	bl	800027c <__adddf3>
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	460d      	mov	r5, r1
 800ca00:	e022      	b.n	800ca48 <scalbn+0x98>
 800ca02:	460b      	mov	r3, r1
 800ca04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ca08:	3936      	subs	r1, #54	; 0x36
 800ca0a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ca0e:	4296      	cmp	r6, r2
 800ca10:	dd0d      	ble.n	800ca2e <scalbn+0x7e>
 800ca12:	2d00      	cmp	r5, #0
 800ca14:	a11c      	add	r1, pc, #112	; (adr r1, 800ca88 <scalbn+0xd8>)
 800ca16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca1a:	da02      	bge.n	800ca22 <scalbn+0x72>
 800ca1c:	a11c      	add	r1, pc, #112	; (adr r1, 800ca90 <scalbn+0xe0>)
 800ca1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca22:	a319      	add	r3, pc, #100	; (adr r3, 800ca88 <scalbn+0xd8>)
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	f7f3 fdde 	bl	80005e8 <__aeabi_dmul>
 800ca2c:	e7e6      	b.n	800c9fc <scalbn+0x4c>
 800ca2e:	1872      	adds	r2, r6, r1
 800ca30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ca34:	428a      	cmp	r2, r1
 800ca36:	dcec      	bgt.n	800ca12 <scalbn+0x62>
 800ca38:	2a00      	cmp	r2, #0
 800ca3a:	dd08      	ble.n	800ca4e <scalbn+0x9e>
 800ca3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ca48:	ec45 4b10 	vmov	d0, r4, r5
 800ca4c:	bd70      	pop	{r4, r5, r6, pc}
 800ca4e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ca52:	da08      	bge.n	800ca66 <scalbn+0xb6>
 800ca54:	2d00      	cmp	r5, #0
 800ca56:	a10a      	add	r1, pc, #40	; (adr r1, 800ca80 <scalbn+0xd0>)
 800ca58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca5c:	dac0      	bge.n	800c9e0 <scalbn+0x30>
 800ca5e:	a10e      	add	r1, pc, #56	; (adr r1, 800ca98 <scalbn+0xe8>)
 800ca60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca64:	e7bc      	b.n	800c9e0 <scalbn+0x30>
 800ca66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca6a:	3236      	adds	r2, #54	; 0x36
 800ca6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ca74:	4620      	mov	r0, r4
 800ca76:	4b0c      	ldr	r3, [pc, #48]	; (800caa8 <scalbn+0xf8>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	e7d5      	b.n	800ca28 <scalbn+0x78>
 800ca7c:	f3af 8000 	nop.w
 800ca80:	c2f8f359 	.word	0xc2f8f359
 800ca84:	01a56e1f 	.word	0x01a56e1f
 800ca88:	8800759c 	.word	0x8800759c
 800ca8c:	7e37e43c 	.word	0x7e37e43c
 800ca90:	8800759c 	.word	0x8800759c
 800ca94:	fe37e43c 	.word	0xfe37e43c
 800ca98:	c2f8f359 	.word	0xc2f8f359
 800ca9c:	81a56e1f 	.word	0x81a56e1f
 800caa0:	43500000 	.word	0x43500000
 800caa4:	ffff3cb0 	.word	0xffff3cb0
 800caa8:	3c900000 	.word	0x3c900000

0800caac <with_errno>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	4604      	mov	r4, r0
 800cab0:	460d      	mov	r5, r1
 800cab2:	4616      	mov	r6, r2
 800cab4:	f001 fac2 	bl	800e03c <__errno>
 800cab8:	4629      	mov	r1, r5
 800caba:	6006      	str	r6, [r0, #0]
 800cabc:	4620      	mov	r0, r4
 800cabe:	bd70      	pop	{r4, r5, r6, pc}

0800cac0 <xflow>:
 800cac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cac2:	4614      	mov	r4, r2
 800cac4:	461d      	mov	r5, r3
 800cac6:	b108      	cbz	r0, 800cacc <xflow+0xc>
 800cac8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cacc:	e9cd 2300 	strd	r2, r3, [sp]
 800cad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cad4:	4620      	mov	r0, r4
 800cad6:	4629      	mov	r1, r5
 800cad8:	f7f3 fd86 	bl	80005e8 <__aeabi_dmul>
 800cadc:	2222      	movs	r2, #34	; 0x22
 800cade:	b003      	add	sp, #12
 800cae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cae4:	f7ff bfe2 	b.w	800caac <with_errno>

0800cae8 <__math_uflow>:
 800cae8:	b508      	push	{r3, lr}
 800caea:	2200      	movs	r2, #0
 800caec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800caf0:	f7ff ffe6 	bl	800cac0 <xflow>
 800caf4:	ec41 0b10 	vmov	d0, r0, r1
 800caf8:	bd08      	pop	{r3, pc}

0800cafa <__math_oflow>:
 800cafa:	b508      	push	{r3, lr}
 800cafc:	2200      	movs	r2, #0
 800cafe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cb02:	f7ff ffdd 	bl	800cac0 <xflow>
 800cb06:	ec41 0b10 	vmov	d0, r0, r1
 800cb0a:	bd08      	pop	{r3, pc}

0800cb0c <__kernel_rem_pio2f>:
 800cb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb10:	ed2d 8b04 	vpush	{d8-d9}
 800cb14:	b0d9      	sub	sp, #356	; 0x164
 800cb16:	4688      	mov	r8, r1
 800cb18:	9002      	str	r0, [sp, #8]
 800cb1a:	49b8      	ldr	r1, [pc, #736]	; (800cdfc <__kernel_rem_pio2f+0x2f0>)
 800cb1c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800cb1e:	9301      	str	r3, [sp, #4]
 800cb20:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800cb24:	9901      	ldr	r1, [sp, #4]
 800cb26:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800cb28:	f101 3bff 	add.w	fp, r1, #4294967295
 800cb2c:	1d11      	adds	r1, r2, #4
 800cb2e:	db25      	blt.n	800cb7c <__kernel_rem_pio2f+0x70>
 800cb30:	1ed0      	subs	r0, r2, #3
 800cb32:	bf48      	it	mi
 800cb34:	1d10      	addmi	r0, r2, #4
 800cb36:	10c0      	asrs	r0, r0, #3
 800cb38:	1c45      	adds	r5, r0, #1
 800cb3a:	00e9      	lsls	r1, r5, #3
 800cb3c:	eba0 070b 	sub.w	r7, r0, fp
 800cb40:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800ce0c <__kernel_rem_pio2f+0x300>
 800cb44:	9103      	str	r1, [sp, #12]
 800cb46:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800cb4a:	eb0a 0c0b 	add.w	ip, sl, fp
 800cb4e:	ae1c      	add	r6, sp, #112	; 0x70
 800cb50:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800cb54:	2400      	movs	r4, #0
 800cb56:	4564      	cmp	r4, ip
 800cb58:	dd12      	ble.n	800cb80 <__kernel_rem_pio2f+0x74>
 800cb5a:	9901      	ldr	r1, [sp, #4]
 800cb5c:	ac1c      	add	r4, sp, #112	; 0x70
 800cb5e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800cb62:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800cb66:	f04f 0c00 	mov.w	ip, #0
 800cb6a:	45d4      	cmp	ip, sl
 800cb6c:	dc27      	bgt.n	800cbbe <__kernel_rem_pio2f+0xb2>
 800cb6e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cb72:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800ce0c <__kernel_rem_pio2f+0x300>
 800cb76:	4627      	mov	r7, r4
 800cb78:	2600      	movs	r6, #0
 800cb7a:	e016      	b.n	800cbaa <__kernel_rem_pio2f+0x9e>
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	e7db      	b.n	800cb38 <__kernel_rem_pio2f+0x2c>
 800cb80:	42e7      	cmn	r7, r4
 800cb82:	bf5d      	ittte	pl
 800cb84:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800cb88:	ee07 1a90 	vmovpl	s15, r1
 800cb8c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800cb90:	eef0 7a47 	vmovmi.f32	s15, s14
 800cb94:	ece6 7a01 	vstmia	r6!, {s15}
 800cb98:	3401      	adds	r4, #1
 800cb9a:	e7dc      	b.n	800cb56 <__kernel_rem_pio2f+0x4a>
 800cb9c:	ecfe 6a01 	vldmia	lr!, {s13}
 800cba0:	ed97 7a00 	vldr	s14, [r7]
 800cba4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cba8:	3601      	adds	r6, #1
 800cbaa:	455e      	cmp	r6, fp
 800cbac:	f1a7 0704 	sub.w	r7, r7, #4
 800cbb0:	ddf4      	ble.n	800cb9c <__kernel_rem_pio2f+0x90>
 800cbb2:	ece9 7a01 	vstmia	r9!, {s15}
 800cbb6:	f10c 0c01 	add.w	ip, ip, #1
 800cbba:	3404      	adds	r4, #4
 800cbbc:	e7d5      	b.n	800cb6a <__kernel_rem_pio2f+0x5e>
 800cbbe:	a908      	add	r1, sp, #32
 800cbc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbc4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800cbc8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800ce08 <__kernel_rem_pio2f+0x2fc>
 800cbcc:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800ce04 <__kernel_rem_pio2f+0x2f8>
 800cbd0:	9105      	str	r1, [sp, #20]
 800cbd2:	9304      	str	r3, [sp, #16]
 800cbd4:	4656      	mov	r6, sl
 800cbd6:	00b3      	lsls	r3, r6, #2
 800cbd8:	9306      	str	r3, [sp, #24]
 800cbda:	ab58      	add	r3, sp, #352	; 0x160
 800cbdc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800cbe0:	ac08      	add	r4, sp, #32
 800cbe2:	ab44      	add	r3, sp, #272	; 0x110
 800cbe4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800cbe8:	46a4      	mov	ip, r4
 800cbea:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800cbee:	4637      	mov	r7, r6
 800cbf0:	2f00      	cmp	r7, #0
 800cbf2:	f1a0 0004 	sub.w	r0, r0, #4
 800cbf6:	dc4a      	bgt.n	800cc8e <__kernel_rem_pio2f+0x182>
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	9207      	str	r2, [sp, #28]
 800cbfc:	f000 f9f8 	bl	800cff0 <scalbnf>
 800cc00:	eeb0 8a40 	vmov.f32	s16, s0
 800cc04:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800cc08:	ee28 0a00 	vmul.f32	s0, s16, s0
 800cc0c:	f000 fa56 	bl	800d0bc <floorf>
 800cc10:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800cc14:	eea0 8a67 	vfms.f32	s16, s0, s15
 800cc18:	2d00      	cmp	r5, #0
 800cc1a:	9a07      	ldr	r2, [sp, #28]
 800cc1c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800cc20:	ee17 9a90 	vmov	r9, s15
 800cc24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc28:	ee38 8a67 	vsub.f32	s16, s16, s15
 800cc2c:	dd41      	ble.n	800ccb2 <__kernel_rem_pio2f+0x1a6>
 800cc2e:	f106 3cff 	add.w	ip, r6, #4294967295
 800cc32:	ab08      	add	r3, sp, #32
 800cc34:	f1c5 0e08 	rsb	lr, r5, #8
 800cc38:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800cc3c:	fa47 f00e 	asr.w	r0, r7, lr
 800cc40:	4481      	add	r9, r0
 800cc42:	fa00 f00e 	lsl.w	r0, r0, lr
 800cc46:	1a3f      	subs	r7, r7, r0
 800cc48:	f1c5 0007 	rsb	r0, r5, #7
 800cc4c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800cc50:	4107      	asrs	r7, r0
 800cc52:	2f00      	cmp	r7, #0
 800cc54:	dd3c      	ble.n	800ccd0 <__kernel_rem_pio2f+0x1c4>
 800cc56:	f04f 0e00 	mov.w	lr, #0
 800cc5a:	f109 0901 	add.w	r9, r9, #1
 800cc5e:	4671      	mov	r1, lr
 800cc60:	4576      	cmp	r6, lr
 800cc62:	dc67      	bgt.n	800cd34 <__kernel_rem_pio2f+0x228>
 800cc64:	2d00      	cmp	r5, #0
 800cc66:	dd03      	ble.n	800cc70 <__kernel_rem_pio2f+0x164>
 800cc68:	2d01      	cmp	r5, #1
 800cc6a:	d074      	beq.n	800cd56 <__kernel_rem_pio2f+0x24a>
 800cc6c:	2d02      	cmp	r5, #2
 800cc6e:	d07b      	beq.n	800cd68 <__kernel_rem_pio2f+0x25c>
 800cc70:	2f02      	cmp	r7, #2
 800cc72:	d12d      	bne.n	800ccd0 <__kernel_rem_pio2f+0x1c4>
 800cc74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cc78:	ee30 8a48 	vsub.f32	s16, s0, s16
 800cc7c:	b341      	cbz	r1, 800ccd0 <__kernel_rem_pio2f+0x1c4>
 800cc7e:	4628      	mov	r0, r5
 800cc80:	9207      	str	r2, [sp, #28]
 800cc82:	f000 f9b5 	bl	800cff0 <scalbnf>
 800cc86:	9a07      	ldr	r2, [sp, #28]
 800cc88:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cc8c:	e020      	b.n	800ccd0 <__kernel_rem_pio2f+0x1c4>
 800cc8e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800cc92:	3f01      	subs	r7, #1
 800cc94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc9c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800cca0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cca4:	ecac 0a01 	vstmia	ip!, {s0}
 800cca8:	ed90 0a00 	vldr	s0, [r0]
 800ccac:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ccb0:	e79e      	b.n	800cbf0 <__kernel_rem_pio2f+0xe4>
 800ccb2:	d105      	bne.n	800ccc0 <__kernel_rem_pio2f+0x1b4>
 800ccb4:	1e70      	subs	r0, r6, #1
 800ccb6:	ab08      	add	r3, sp, #32
 800ccb8:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800ccbc:	11ff      	asrs	r7, r7, #7
 800ccbe:	e7c8      	b.n	800cc52 <__kernel_rem_pio2f+0x146>
 800ccc0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ccc4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ccc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cccc:	da30      	bge.n	800cd30 <__kernel_rem_pio2f+0x224>
 800ccce:	2700      	movs	r7, #0
 800ccd0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ccd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd8:	f040 809a 	bne.w	800ce10 <__kernel_rem_pio2f+0x304>
 800ccdc:	1e74      	subs	r4, r6, #1
 800ccde:	46a4      	mov	ip, r4
 800cce0:	2100      	movs	r1, #0
 800cce2:	45d4      	cmp	ip, sl
 800cce4:	da47      	bge.n	800cd76 <__kernel_rem_pio2f+0x26a>
 800cce6:	2900      	cmp	r1, #0
 800cce8:	d063      	beq.n	800cdb2 <__kernel_rem_pio2f+0x2a6>
 800ccea:	ab08      	add	r3, sp, #32
 800ccec:	3d08      	subs	r5, #8
 800ccee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d07f      	beq.n	800cdf6 <__kernel_rem_pio2f+0x2ea>
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ccfc:	f000 f978 	bl	800cff0 <scalbnf>
 800cd00:	1c63      	adds	r3, r4, #1
 800cd02:	aa44      	add	r2, sp, #272	; 0x110
 800cd04:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800ce08 <__kernel_rem_pio2f+0x2fc>
 800cd08:	0099      	lsls	r1, r3, #2
 800cd0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cd0e:	4623      	mov	r3, r4
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f280 80ad 	bge.w	800ce70 <__kernel_rem_pio2f+0x364>
 800cd16:	4623      	mov	r3, r4
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f2c0 80cb 	blt.w	800ceb4 <__kernel_rem_pio2f+0x3a8>
 800cd1e:	aa44      	add	r2, sp, #272	; 0x110
 800cd20:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800cd24:	4e36      	ldr	r6, [pc, #216]	; (800ce00 <__kernel_rem_pio2f+0x2f4>)
 800cd26:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ce0c <__kernel_rem_pio2f+0x300>
 800cd2a:	2000      	movs	r0, #0
 800cd2c:	1ae2      	subs	r2, r4, r3
 800cd2e:	e0b6      	b.n	800ce9e <__kernel_rem_pio2f+0x392>
 800cd30:	2702      	movs	r7, #2
 800cd32:	e790      	b.n	800cc56 <__kernel_rem_pio2f+0x14a>
 800cd34:	6820      	ldr	r0, [r4, #0]
 800cd36:	b949      	cbnz	r1, 800cd4c <__kernel_rem_pio2f+0x240>
 800cd38:	b118      	cbz	r0, 800cd42 <__kernel_rem_pio2f+0x236>
 800cd3a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800cd3e:	6020      	str	r0, [r4, #0]
 800cd40:	2001      	movs	r0, #1
 800cd42:	f10e 0e01 	add.w	lr, lr, #1
 800cd46:	3404      	adds	r4, #4
 800cd48:	4601      	mov	r1, r0
 800cd4a:	e789      	b.n	800cc60 <__kernel_rem_pio2f+0x154>
 800cd4c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800cd50:	6020      	str	r0, [r4, #0]
 800cd52:	4608      	mov	r0, r1
 800cd54:	e7f5      	b.n	800cd42 <__kernel_rem_pio2f+0x236>
 800cd56:	1e74      	subs	r4, r6, #1
 800cd58:	ab08      	add	r3, sp, #32
 800cd5a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cd5e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800cd62:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cd66:	e783      	b.n	800cc70 <__kernel_rem_pio2f+0x164>
 800cd68:	1e74      	subs	r4, r6, #1
 800cd6a:	ab08      	add	r3, sp, #32
 800cd6c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cd70:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800cd74:	e7f5      	b.n	800cd62 <__kernel_rem_pio2f+0x256>
 800cd76:	ab08      	add	r3, sp, #32
 800cd78:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800cd7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cd80:	4301      	orrs	r1, r0
 800cd82:	e7ae      	b.n	800cce2 <__kernel_rem_pio2f+0x1d6>
 800cd84:	3001      	adds	r0, #1
 800cd86:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800cd8a:	2f00      	cmp	r7, #0
 800cd8c:	d0fa      	beq.n	800cd84 <__kernel_rem_pio2f+0x278>
 800cd8e:	9b06      	ldr	r3, [sp, #24]
 800cd90:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800cd94:	eb0d 0403 	add.w	r4, sp, r3
 800cd98:	9b01      	ldr	r3, [sp, #4]
 800cd9a:	18f7      	adds	r7, r6, r3
 800cd9c:	ab1c      	add	r3, sp, #112	; 0x70
 800cd9e:	f106 0c01 	add.w	ip, r6, #1
 800cda2:	3c4c      	subs	r4, #76	; 0x4c
 800cda4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cda8:	4430      	add	r0, r6
 800cdaa:	4560      	cmp	r0, ip
 800cdac:	da04      	bge.n	800cdb8 <__kernel_rem_pio2f+0x2ac>
 800cdae:	4606      	mov	r6, r0
 800cdb0:	e711      	b.n	800cbd6 <__kernel_rem_pio2f+0xca>
 800cdb2:	9c05      	ldr	r4, [sp, #20]
 800cdb4:	2001      	movs	r0, #1
 800cdb6:	e7e6      	b.n	800cd86 <__kernel_rem_pio2f+0x27a>
 800cdb8:	9b04      	ldr	r3, [sp, #16]
 800cdba:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cdbe:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800cdc2:	9306      	str	r3, [sp, #24]
 800cdc4:	ee07 3a90 	vmov	s15, r3
 800cdc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdcc:	2600      	movs	r6, #0
 800cdce:	ece7 7a01 	vstmia	r7!, {s15}
 800cdd2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ce0c <__kernel_rem_pio2f+0x300>
 800cdd6:	46b9      	mov	r9, r7
 800cdd8:	455e      	cmp	r6, fp
 800cdda:	dd04      	ble.n	800cde6 <__kernel_rem_pio2f+0x2da>
 800cddc:	ece4 7a01 	vstmia	r4!, {s15}
 800cde0:	f10c 0c01 	add.w	ip, ip, #1
 800cde4:	e7e1      	b.n	800cdaa <__kernel_rem_pio2f+0x29e>
 800cde6:	ecfe 6a01 	vldmia	lr!, {s13}
 800cdea:	ed39 7a01 	vldmdb	r9!, {s14}
 800cdee:	3601      	adds	r6, #1
 800cdf0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cdf4:	e7f0      	b.n	800cdd8 <__kernel_rem_pio2f+0x2cc>
 800cdf6:	3c01      	subs	r4, #1
 800cdf8:	e777      	b.n	800ccea <__kernel_rem_pio2f+0x1de>
 800cdfa:	bf00      	nop
 800cdfc:	0801029c 	.word	0x0801029c
 800ce00:	08010270 	.word	0x08010270
 800ce04:	43800000 	.word	0x43800000
 800ce08:	3b800000 	.word	0x3b800000
 800ce0c:	00000000 	.word	0x00000000
 800ce10:	9b03      	ldr	r3, [sp, #12]
 800ce12:	eeb0 0a48 	vmov.f32	s0, s16
 800ce16:	1a98      	subs	r0, r3, r2
 800ce18:	f000 f8ea 	bl	800cff0 <scalbnf>
 800ce1c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800ce04 <__kernel_rem_pio2f+0x2f8>
 800ce20:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ce24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce28:	db19      	blt.n	800ce5e <__kernel_rem_pio2f+0x352>
 800ce2a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ce08 <__kernel_rem_pio2f+0x2fc>
 800ce2e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ce32:	aa08      	add	r2, sp, #32
 800ce34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce38:	1c74      	adds	r4, r6, #1
 800ce3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce3e:	3508      	adds	r5, #8
 800ce40:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ce44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ce4c:	ee10 3a10 	vmov	r3, s0
 800ce50:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ce54:	ee17 3a90 	vmov	r3, s15
 800ce58:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ce5c:	e74b      	b.n	800ccf6 <__kernel_rem_pio2f+0x1ea>
 800ce5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ce62:	aa08      	add	r2, sp, #32
 800ce64:	ee10 3a10 	vmov	r3, s0
 800ce68:	4634      	mov	r4, r6
 800ce6a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ce6e:	e742      	b.n	800ccf6 <__kernel_rem_pio2f+0x1ea>
 800ce70:	a808      	add	r0, sp, #32
 800ce72:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ce76:	9001      	str	r0, [sp, #4]
 800ce78:	ee07 0a90 	vmov	s15, r0
 800ce7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce80:	3b01      	subs	r3, #1
 800ce82:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ce86:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ce8a:	ed62 7a01 	vstmdb	r2!, {s15}
 800ce8e:	e73f      	b.n	800cd10 <__kernel_rem_pio2f+0x204>
 800ce90:	ecf6 6a01 	vldmia	r6!, {s13}
 800ce94:	ecb5 7a01 	vldmia	r5!, {s14}
 800ce98:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ce9c:	3001      	adds	r0, #1
 800ce9e:	4550      	cmp	r0, sl
 800cea0:	dc01      	bgt.n	800cea6 <__kernel_rem_pio2f+0x39a>
 800cea2:	4290      	cmp	r0, r2
 800cea4:	ddf4      	ble.n	800ce90 <__kernel_rem_pio2f+0x384>
 800cea6:	a858      	add	r0, sp, #352	; 0x160
 800cea8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ceac:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	e731      	b.n	800cd18 <__kernel_rem_pio2f+0x20c>
 800ceb4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ceb6:	2b02      	cmp	r3, #2
 800ceb8:	dc09      	bgt.n	800cece <__kernel_rem_pio2f+0x3c2>
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	dc2b      	bgt.n	800cf16 <__kernel_rem_pio2f+0x40a>
 800cebe:	d044      	beq.n	800cf4a <__kernel_rem_pio2f+0x43e>
 800cec0:	f009 0007 	and.w	r0, r9, #7
 800cec4:	b059      	add	sp, #356	; 0x164
 800cec6:	ecbd 8b04 	vpop	{d8-d9}
 800ceca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cece:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ced0:	2b03      	cmp	r3, #3
 800ced2:	d1f5      	bne.n	800cec0 <__kernel_rem_pio2f+0x3b4>
 800ced4:	aa30      	add	r2, sp, #192	; 0xc0
 800ced6:	1f0b      	subs	r3, r1, #4
 800ced8:	4413      	add	r3, r2
 800ceda:	461a      	mov	r2, r3
 800cedc:	4620      	mov	r0, r4
 800cede:	2800      	cmp	r0, #0
 800cee0:	f1a2 0204 	sub.w	r2, r2, #4
 800cee4:	dc52      	bgt.n	800cf8c <__kernel_rem_pio2f+0x480>
 800cee6:	4622      	mov	r2, r4
 800cee8:	2a01      	cmp	r2, #1
 800ceea:	f1a3 0304 	sub.w	r3, r3, #4
 800ceee:	dc5d      	bgt.n	800cfac <__kernel_rem_pio2f+0x4a0>
 800cef0:	ab30      	add	r3, sp, #192	; 0xc0
 800cef2:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800ce0c <__kernel_rem_pio2f+0x300>
 800cef6:	440b      	add	r3, r1
 800cef8:	2c01      	cmp	r4, #1
 800cefa:	dc67      	bgt.n	800cfcc <__kernel_rem_pio2f+0x4c0>
 800cefc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800cf00:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800cf04:	2f00      	cmp	r7, #0
 800cf06:	d167      	bne.n	800cfd8 <__kernel_rem_pio2f+0x4cc>
 800cf08:	edc8 6a00 	vstr	s13, [r8]
 800cf0c:	ed88 7a01 	vstr	s14, [r8, #4]
 800cf10:	edc8 7a02 	vstr	s15, [r8, #8]
 800cf14:	e7d4      	b.n	800cec0 <__kernel_rem_pio2f+0x3b4>
 800cf16:	ab30      	add	r3, sp, #192	; 0xc0
 800cf18:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800ce0c <__kernel_rem_pio2f+0x300>
 800cf1c:	440b      	add	r3, r1
 800cf1e:	4622      	mov	r2, r4
 800cf20:	2a00      	cmp	r2, #0
 800cf22:	da24      	bge.n	800cf6e <__kernel_rem_pio2f+0x462>
 800cf24:	b34f      	cbz	r7, 800cf7a <__kernel_rem_pio2f+0x46e>
 800cf26:	eef1 7a47 	vneg.f32	s15, s14
 800cf2a:	edc8 7a00 	vstr	s15, [r8]
 800cf2e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800cf32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf36:	aa31      	add	r2, sp, #196	; 0xc4
 800cf38:	2301      	movs	r3, #1
 800cf3a:	429c      	cmp	r4, r3
 800cf3c:	da20      	bge.n	800cf80 <__kernel_rem_pio2f+0x474>
 800cf3e:	b10f      	cbz	r7, 800cf44 <__kernel_rem_pio2f+0x438>
 800cf40:	eef1 7a67 	vneg.f32	s15, s15
 800cf44:	edc8 7a01 	vstr	s15, [r8, #4]
 800cf48:	e7ba      	b.n	800cec0 <__kernel_rem_pio2f+0x3b4>
 800cf4a:	ab30      	add	r3, sp, #192	; 0xc0
 800cf4c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800ce0c <__kernel_rem_pio2f+0x300>
 800cf50:	440b      	add	r3, r1
 800cf52:	2c00      	cmp	r4, #0
 800cf54:	da05      	bge.n	800cf62 <__kernel_rem_pio2f+0x456>
 800cf56:	b10f      	cbz	r7, 800cf5c <__kernel_rem_pio2f+0x450>
 800cf58:	eef1 7a67 	vneg.f32	s15, s15
 800cf5c:	edc8 7a00 	vstr	s15, [r8]
 800cf60:	e7ae      	b.n	800cec0 <__kernel_rem_pio2f+0x3b4>
 800cf62:	ed33 7a01 	vldmdb	r3!, {s14}
 800cf66:	3c01      	subs	r4, #1
 800cf68:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf6c:	e7f1      	b.n	800cf52 <__kernel_rem_pio2f+0x446>
 800cf6e:	ed73 7a01 	vldmdb	r3!, {s15}
 800cf72:	3a01      	subs	r2, #1
 800cf74:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf78:	e7d2      	b.n	800cf20 <__kernel_rem_pio2f+0x414>
 800cf7a:	eef0 7a47 	vmov.f32	s15, s14
 800cf7e:	e7d4      	b.n	800cf2a <__kernel_rem_pio2f+0x41e>
 800cf80:	ecb2 7a01 	vldmia	r2!, {s14}
 800cf84:	3301      	adds	r3, #1
 800cf86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf8a:	e7d6      	b.n	800cf3a <__kernel_rem_pio2f+0x42e>
 800cf8c:	edd2 7a00 	vldr	s15, [r2]
 800cf90:	edd2 6a01 	vldr	s13, [r2, #4]
 800cf94:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cf98:	3801      	subs	r0, #1
 800cf9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf9e:	ed82 7a00 	vstr	s14, [r2]
 800cfa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfa6:	edc2 7a01 	vstr	s15, [r2, #4]
 800cfaa:	e798      	b.n	800cede <__kernel_rem_pio2f+0x3d2>
 800cfac:	edd3 7a00 	vldr	s15, [r3]
 800cfb0:	edd3 6a01 	vldr	s13, [r3, #4]
 800cfb4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cfb8:	3a01      	subs	r2, #1
 800cfba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cfbe:	ed83 7a00 	vstr	s14, [r3]
 800cfc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfc6:	edc3 7a01 	vstr	s15, [r3, #4]
 800cfca:	e78d      	b.n	800cee8 <__kernel_rem_pio2f+0x3dc>
 800cfcc:	ed33 7a01 	vldmdb	r3!, {s14}
 800cfd0:	3c01      	subs	r4, #1
 800cfd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfd6:	e78f      	b.n	800cef8 <__kernel_rem_pio2f+0x3ec>
 800cfd8:	eef1 6a66 	vneg.f32	s13, s13
 800cfdc:	eeb1 7a47 	vneg.f32	s14, s14
 800cfe0:	edc8 6a00 	vstr	s13, [r8]
 800cfe4:	ed88 7a01 	vstr	s14, [r8, #4]
 800cfe8:	eef1 7a67 	vneg.f32	s15, s15
 800cfec:	e790      	b.n	800cf10 <__kernel_rem_pio2f+0x404>
 800cfee:	bf00      	nop

0800cff0 <scalbnf>:
 800cff0:	ee10 3a10 	vmov	r3, s0
 800cff4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800cff8:	d02b      	beq.n	800d052 <scalbnf+0x62>
 800cffa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cffe:	d302      	bcc.n	800d006 <scalbnf+0x16>
 800d000:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d004:	4770      	bx	lr
 800d006:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d00a:	d123      	bne.n	800d054 <scalbnf+0x64>
 800d00c:	4b24      	ldr	r3, [pc, #144]	; (800d0a0 <scalbnf+0xb0>)
 800d00e:	eddf 7a25 	vldr	s15, [pc, #148]	; 800d0a4 <scalbnf+0xb4>
 800d012:	4298      	cmp	r0, r3
 800d014:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d018:	db17      	blt.n	800d04a <scalbnf+0x5a>
 800d01a:	ee10 3a10 	vmov	r3, s0
 800d01e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d022:	3a19      	subs	r2, #25
 800d024:	f24c 3150 	movw	r1, #50000	; 0xc350
 800d028:	4288      	cmp	r0, r1
 800d02a:	dd15      	ble.n	800d058 <scalbnf+0x68>
 800d02c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800d0a8 <scalbnf+0xb8>
 800d030:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800d0ac <scalbnf+0xbc>
 800d034:	ee10 3a10 	vmov	r3, s0
 800d038:	eeb0 7a67 	vmov.f32	s14, s15
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	bfb8      	it	lt
 800d040:	eef0 7a66 	vmovlt.f32	s15, s13
 800d044:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d048:	4770      	bx	lr
 800d04a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800d0b0 <scalbnf+0xc0>
 800d04e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d052:	4770      	bx	lr
 800d054:	0dd2      	lsrs	r2, r2, #23
 800d056:	e7e5      	b.n	800d024 <scalbnf+0x34>
 800d058:	4410      	add	r0, r2
 800d05a:	28fe      	cmp	r0, #254	; 0xfe
 800d05c:	dce6      	bgt.n	800d02c <scalbnf+0x3c>
 800d05e:	2800      	cmp	r0, #0
 800d060:	dd06      	ble.n	800d070 <scalbnf+0x80>
 800d062:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d066:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d06a:	ee00 3a10 	vmov	s0, r3
 800d06e:	4770      	bx	lr
 800d070:	f110 0f16 	cmn.w	r0, #22
 800d074:	da09      	bge.n	800d08a <scalbnf+0x9a>
 800d076:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800d0b0 <scalbnf+0xc0>
 800d07a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800d0b4 <scalbnf+0xc4>
 800d07e:	ee10 3a10 	vmov	r3, s0
 800d082:	eeb0 7a67 	vmov.f32	s14, s15
 800d086:	2b00      	cmp	r3, #0
 800d088:	e7d9      	b.n	800d03e <scalbnf+0x4e>
 800d08a:	3019      	adds	r0, #25
 800d08c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d090:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d094:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800d0b8 <scalbnf+0xc8>
 800d098:	ee07 3a90 	vmov	s15, r3
 800d09c:	e7d7      	b.n	800d04e <scalbnf+0x5e>
 800d09e:	bf00      	nop
 800d0a0:	ffff3cb0 	.word	0xffff3cb0
 800d0a4:	4c000000 	.word	0x4c000000
 800d0a8:	7149f2ca 	.word	0x7149f2ca
 800d0ac:	f149f2ca 	.word	0xf149f2ca
 800d0b0:	0da24260 	.word	0x0da24260
 800d0b4:	8da24260 	.word	0x8da24260
 800d0b8:	33000000 	.word	0x33000000

0800d0bc <floorf>:
 800d0bc:	ee10 3a10 	vmov	r3, s0
 800d0c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d0c4:	3a7f      	subs	r2, #127	; 0x7f
 800d0c6:	2a16      	cmp	r2, #22
 800d0c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d0cc:	dc2a      	bgt.n	800d124 <floorf+0x68>
 800d0ce:	2a00      	cmp	r2, #0
 800d0d0:	da11      	bge.n	800d0f6 <floorf+0x3a>
 800d0d2:	eddf 7a18 	vldr	s15, [pc, #96]	; 800d134 <floorf+0x78>
 800d0d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d0da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e2:	dd05      	ble.n	800d0f0 <floorf+0x34>
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	da23      	bge.n	800d130 <floorf+0x74>
 800d0e8:	4a13      	ldr	r2, [pc, #76]	; (800d138 <floorf+0x7c>)
 800d0ea:	2900      	cmp	r1, #0
 800d0ec:	bf18      	it	ne
 800d0ee:	4613      	movne	r3, r2
 800d0f0:	ee00 3a10 	vmov	s0, r3
 800d0f4:	4770      	bx	lr
 800d0f6:	4911      	ldr	r1, [pc, #68]	; (800d13c <floorf+0x80>)
 800d0f8:	4111      	asrs	r1, r2
 800d0fa:	420b      	tst	r3, r1
 800d0fc:	d0fa      	beq.n	800d0f4 <floorf+0x38>
 800d0fe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d134 <floorf+0x78>
 800d102:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d106:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d10e:	ddef      	ble.n	800d0f0 <floorf+0x34>
 800d110:	2b00      	cmp	r3, #0
 800d112:	bfbe      	ittt	lt
 800d114:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800d118:	fa40 f202 	asrlt.w	r2, r0, r2
 800d11c:	189b      	addlt	r3, r3, r2
 800d11e:	ea23 0301 	bic.w	r3, r3, r1
 800d122:	e7e5      	b.n	800d0f0 <floorf+0x34>
 800d124:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d128:	d3e4      	bcc.n	800d0f4 <floorf+0x38>
 800d12a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d12e:	4770      	bx	lr
 800d130:	2300      	movs	r3, #0
 800d132:	e7dd      	b.n	800d0f0 <floorf+0x34>
 800d134:	7149f2ca 	.word	0x7149f2ca
 800d138:	bf800000 	.word	0xbf800000
 800d13c:	007fffff 	.word	0x007fffff

0800d140 <sulp>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	4604      	mov	r4, r0
 800d144:	460d      	mov	r5, r1
 800d146:	ec45 4b10 	vmov	d0, r4, r5
 800d14a:	4616      	mov	r6, r2
 800d14c:	f001 ff80 	bl	800f050 <__ulp>
 800d150:	ec51 0b10 	vmov	r0, r1, d0
 800d154:	b17e      	cbz	r6, 800d176 <sulp+0x36>
 800d156:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d15a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d15e:	2b00      	cmp	r3, #0
 800d160:	dd09      	ble.n	800d176 <sulp+0x36>
 800d162:	051b      	lsls	r3, r3, #20
 800d164:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d168:	2400      	movs	r4, #0
 800d16a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d16e:	4622      	mov	r2, r4
 800d170:	462b      	mov	r3, r5
 800d172:	f7f3 fa39 	bl	80005e8 <__aeabi_dmul>
 800d176:	bd70      	pop	{r4, r5, r6, pc}

0800d178 <_strtod_l>:
 800d178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17c:	ed2d 8b02 	vpush	{d8}
 800d180:	b09b      	sub	sp, #108	; 0x6c
 800d182:	4604      	mov	r4, r0
 800d184:	9213      	str	r2, [sp, #76]	; 0x4c
 800d186:	2200      	movs	r2, #0
 800d188:	9216      	str	r2, [sp, #88]	; 0x58
 800d18a:	460d      	mov	r5, r1
 800d18c:	f04f 0800 	mov.w	r8, #0
 800d190:	f04f 0900 	mov.w	r9, #0
 800d194:	460a      	mov	r2, r1
 800d196:	9215      	str	r2, [sp, #84]	; 0x54
 800d198:	7811      	ldrb	r1, [r2, #0]
 800d19a:	292b      	cmp	r1, #43	; 0x2b
 800d19c:	d04c      	beq.n	800d238 <_strtod_l+0xc0>
 800d19e:	d83a      	bhi.n	800d216 <_strtod_l+0x9e>
 800d1a0:	290d      	cmp	r1, #13
 800d1a2:	d834      	bhi.n	800d20e <_strtod_l+0x96>
 800d1a4:	2908      	cmp	r1, #8
 800d1a6:	d834      	bhi.n	800d212 <_strtod_l+0x9a>
 800d1a8:	2900      	cmp	r1, #0
 800d1aa:	d03d      	beq.n	800d228 <_strtod_l+0xb0>
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	920a      	str	r2, [sp, #40]	; 0x28
 800d1b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d1b2:	7832      	ldrb	r2, [r6, #0]
 800d1b4:	2a30      	cmp	r2, #48	; 0x30
 800d1b6:	f040 80b4 	bne.w	800d322 <_strtod_l+0x1aa>
 800d1ba:	7872      	ldrb	r2, [r6, #1]
 800d1bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d1c0:	2a58      	cmp	r2, #88	; 0x58
 800d1c2:	d170      	bne.n	800d2a6 <_strtod_l+0x12e>
 800d1c4:	9302      	str	r3, [sp, #8]
 800d1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c8:	9301      	str	r3, [sp, #4]
 800d1ca:	ab16      	add	r3, sp, #88	; 0x58
 800d1cc:	9300      	str	r3, [sp, #0]
 800d1ce:	4a8e      	ldr	r2, [pc, #568]	; (800d408 <_strtod_l+0x290>)
 800d1d0:	ab17      	add	r3, sp, #92	; 0x5c
 800d1d2:	a915      	add	r1, sp, #84	; 0x54
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f001 f821 	bl	800e21c <__gethex>
 800d1da:	f010 070f 	ands.w	r7, r0, #15
 800d1de:	4605      	mov	r5, r0
 800d1e0:	d005      	beq.n	800d1ee <_strtod_l+0x76>
 800d1e2:	2f06      	cmp	r7, #6
 800d1e4:	d12a      	bne.n	800d23c <_strtod_l+0xc4>
 800d1e6:	3601      	adds	r6, #1
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	9615      	str	r6, [sp, #84]	; 0x54
 800d1ec:	930a      	str	r3, [sp, #40]	; 0x28
 800d1ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f040 857f 	bne.w	800dcf4 <_strtod_l+0xb7c>
 800d1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1f8:	b1db      	cbz	r3, 800d232 <_strtod_l+0xba>
 800d1fa:	4642      	mov	r2, r8
 800d1fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d200:	ec43 2b10 	vmov	d0, r2, r3
 800d204:	b01b      	add	sp, #108	; 0x6c
 800d206:	ecbd 8b02 	vpop	{d8}
 800d20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20e:	2920      	cmp	r1, #32
 800d210:	d1cc      	bne.n	800d1ac <_strtod_l+0x34>
 800d212:	3201      	adds	r2, #1
 800d214:	e7bf      	b.n	800d196 <_strtod_l+0x1e>
 800d216:	292d      	cmp	r1, #45	; 0x2d
 800d218:	d1c8      	bne.n	800d1ac <_strtod_l+0x34>
 800d21a:	2101      	movs	r1, #1
 800d21c:	910a      	str	r1, [sp, #40]	; 0x28
 800d21e:	1c51      	adds	r1, r2, #1
 800d220:	9115      	str	r1, [sp, #84]	; 0x54
 800d222:	7852      	ldrb	r2, [r2, #1]
 800d224:	2a00      	cmp	r2, #0
 800d226:	d1c3      	bne.n	800d1b0 <_strtod_l+0x38>
 800d228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d22a:	9515      	str	r5, [sp, #84]	; 0x54
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f040 855f 	bne.w	800dcf0 <_strtod_l+0xb78>
 800d232:	4642      	mov	r2, r8
 800d234:	464b      	mov	r3, r9
 800d236:	e7e3      	b.n	800d200 <_strtod_l+0x88>
 800d238:	2100      	movs	r1, #0
 800d23a:	e7ef      	b.n	800d21c <_strtod_l+0xa4>
 800d23c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d23e:	b13a      	cbz	r2, 800d250 <_strtod_l+0xd8>
 800d240:	2135      	movs	r1, #53	; 0x35
 800d242:	a818      	add	r0, sp, #96	; 0x60
 800d244:	f002 f801 	bl	800f24a <__copybits>
 800d248:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d24a:	4620      	mov	r0, r4
 800d24c:	f001 fbd4 	bl	800e9f8 <_Bfree>
 800d250:	3f01      	subs	r7, #1
 800d252:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d254:	2f04      	cmp	r7, #4
 800d256:	d806      	bhi.n	800d266 <_strtod_l+0xee>
 800d258:	e8df f007 	tbb	[pc, r7]
 800d25c:	201d0314 	.word	0x201d0314
 800d260:	14          	.byte	0x14
 800d261:	00          	.byte	0x00
 800d262:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800d266:	05e9      	lsls	r1, r5, #23
 800d268:	bf48      	it	mi
 800d26a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d26e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d272:	0d1b      	lsrs	r3, r3, #20
 800d274:	051b      	lsls	r3, r3, #20
 800d276:	2b00      	cmp	r3, #0
 800d278:	d1b9      	bne.n	800d1ee <_strtod_l+0x76>
 800d27a:	f000 fedf 	bl	800e03c <__errno>
 800d27e:	2322      	movs	r3, #34	; 0x22
 800d280:	6003      	str	r3, [r0, #0]
 800d282:	e7b4      	b.n	800d1ee <_strtod_l+0x76>
 800d284:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800d288:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d28c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d290:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d294:	e7e7      	b.n	800d266 <_strtod_l+0xee>
 800d296:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d410 <_strtod_l+0x298>
 800d29a:	e7e4      	b.n	800d266 <_strtod_l+0xee>
 800d29c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d2a0:	f04f 38ff 	mov.w	r8, #4294967295
 800d2a4:	e7df      	b.n	800d266 <_strtod_l+0xee>
 800d2a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2a8:	1c5a      	adds	r2, r3, #1
 800d2aa:	9215      	str	r2, [sp, #84]	; 0x54
 800d2ac:	785b      	ldrb	r3, [r3, #1]
 800d2ae:	2b30      	cmp	r3, #48	; 0x30
 800d2b0:	d0f9      	beq.n	800d2a6 <_strtod_l+0x12e>
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d09b      	beq.n	800d1ee <_strtod_l+0x76>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	f04f 0a00 	mov.w	sl, #0
 800d2bc:	9304      	str	r3, [sp, #16]
 800d2be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d2c6:	46d3      	mov	fp, sl
 800d2c8:	220a      	movs	r2, #10
 800d2ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d2cc:	7806      	ldrb	r6, [r0, #0]
 800d2ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d2d2:	b2d9      	uxtb	r1, r3
 800d2d4:	2909      	cmp	r1, #9
 800d2d6:	d926      	bls.n	800d326 <_strtod_l+0x1ae>
 800d2d8:	494c      	ldr	r1, [pc, #304]	; (800d40c <_strtod_l+0x294>)
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f000 fe55 	bl	800df8a <strncmp>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	d030      	beq.n	800d346 <_strtod_l+0x1ce>
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	4632      	mov	r2, r6
 800d2e8:	9005      	str	r0, [sp, #20]
 800d2ea:	465e      	mov	r6, fp
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2a65      	cmp	r2, #101	; 0x65
 800d2f0:	d001      	beq.n	800d2f6 <_strtod_l+0x17e>
 800d2f2:	2a45      	cmp	r2, #69	; 0x45
 800d2f4:	d113      	bne.n	800d31e <_strtod_l+0x1a6>
 800d2f6:	b91e      	cbnz	r6, 800d300 <_strtod_l+0x188>
 800d2f8:	9a04      	ldr	r2, [sp, #16]
 800d2fa:	4302      	orrs	r2, r0
 800d2fc:	d094      	beq.n	800d228 <_strtod_l+0xb0>
 800d2fe:	2600      	movs	r6, #0
 800d300:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d302:	1c6a      	adds	r2, r5, #1
 800d304:	9215      	str	r2, [sp, #84]	; 0x54
 800d306:	786a      	ldrb	r2, [r5, #1]
 800d308:	2a2b      	cmp	r2, #43	; 0x2b
 800d30a:	d074      	beq.n	800d3f6 <_strtod_l+0x27e>
 800d30c:	2a2d      	cmp	r2, #45	; 0x2d
 800d30e:	d078      	beq.n	800d402 <_strtod_l+0x28a>
 800d310:	f04f 0c00 	mov.w	ip, #0
 800d314:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d318:	2909      	cmp	r1, #9
 800d31a:	d97f      	bls.n	800d41c <_strtod_l+0x2a4>
 800d31c:	9515      	str	r5, [sp, #84]	; 0x54
 800d31e:	2700      	movs	r7, #0
 800d320:	e09e      	b.n	800d460 <_strtod_l+0x2e8>
 800d322:	2300      	movs	r3, #0
 800d324:	e7c8      	b.n	800d2b8 <_strtod_l+0x140>
 800d326:	f1bb 0f08 	cmp.w	fp, #8
 800d32a:	bfd8      	it	le
 800d32c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d32e:	f100 0001 	add.w	r0, r0, #1
 800d332:	bfda      	itte	le
 800d334:	fb02 3301 	mlale	r3, r2, r1, r3
 800d338:	9309      	strle	r3, [sp, #36]	; 0x24
 800d33a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d33e:	f10b 0b01 	add.w	fp, fp, #1
 800d342:	9015      	str	r0, [sp, #84]	; 0x54
 800d344:	e7c1      	b.n	800d2ca <_strtod_l+0x152>
 800d346:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d348:	1c5a      	adds	r2, r3, #1
 800d34a:	9215      	str	r2, [sp, #84]	; 0x54
 800d34c:	785a      	ldrb	r2, [r3, #1]
 800d34e:	f1bb 0f00 	cmp.w	fp, #0
 800d352:	d037      	beq.n	800d3c4 <_strtod_l+0x24c>
 800d354:	9005      	str	r0, [sp, #20]
 800d356:	465e      	mov	r6, fp
 800d358:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d35c:	2b09      	cmp	r3, #9
 800d35e:	d912      	bls.n	800d386 <_strtod_l+0x20e>
 800d360:	2301      	movs	r3, #1
 800d362:	e7c4      	b.n	800d2ee <_strtod_l+0x176>
 800d364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d366:	1c5a      	adds	r2, r3, #1
 800d368:	9215      	str	r2, [sp, #84]	; 0x54
 800d36a:	785a      	ldrb	r2, [r3, #1]
 800d36c:	3001      	adds	r0, #1
 800d36e:	2a30      	cmp	r2, #48	; 0x30
 800d370:	d0f8      	beq.n	800d364 <_strtod_l+0x1ec>
 800d372:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d376:	2b08      	cmp	r3, #8
 800d378:	f200 84c1 	bhi.w	800dcfe <_strtod_l+0xb86>
 800d37c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d37e:	9005      	str	r0, [sp, #20]
 800d380:	2000      	movs	r0, #0
 800d382:	930b      	str	r3, [sp, #44]	; 0x2c
 800d384:	4606      	mov	r6, r0
 800d386:	3a30      	subs	r2, #48	; 0x30
 800d388:	f100 0301 	add.w	r3, r0, #1
 800d38c:	d014      	beq.n	800d3b8 <_strtod_l+0x240>
 800d38e:	9905      	ldr	r1, [sp, #20]
 800d390:	4419      	add	r1, r3
 800d392:	9105      	str	r1, [sp, #20]
 800d394:	4633      	mov	r3, r6
 800d396:	eb00 0c06 	add.w	ip, r0, r6
 800d39a:	210a      	movs	r1, #10
 800d39c:	4563      	cmp	r3, ip
 800d39e:	d113      	bne.n	800d3c8 <_strtod_l+0x250>
 800d3a0:	1833      	adds	r3, r6, r0
 800d3a2:	2b08      	cmp	r3, #8
 800d3a4:	f106 0601 	add.w	r6, r6, #1
 800d3a8:	4406      	add	r6, r0
 800d3aa:	dc1a      	bgt.n	800d3e2 <_strtod_l+0x26a>
 800d3ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3ae:	230a      	movs	r3, #10
 800d3b0:	fb03 2301 	mla	r3, r3, r1, r2
 800d3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d3ba:	1c51      	adds	r1, r2, #1
 800d3bc:	9115      	str	r1, [sp, #84]	; 0x54
 800d3be:	7852      	ldrb	r2, [r2, #1]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	e7c9      	b.n	800d358 <_strtod_l+0x1e0>
 800d3c4:	4658      	mov	r0, fp
 800d3c6:	e7d2      	b.n	800d36e <_strtod_l+0x1f6>
 800d3c8:	2b08      	cmp	r3, #8
 800d3ca:	f103 0301 	add.w	r3, r3, #1
 800d3ce:	dc03      	bgt.n	800d3d8 <_strtod_l+0x260>
 800d3d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d3d2:	434f      	muls	r7, r1
 800d3d4:	9709      	str	r7, [sp, #36]	; 0x24
 800d3d6:	e7e1      	b.n	800d39c <_strtod_l+0x224>
 800d3d8:	2b10      	cmp	r3, #16
 800d3da:	bfd8      	it	le
 800d3dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800d3e0:	e7dc      	b.n	800d39c <_strtod_l+0x224>
 800d3e2:	2e10      	cmp	r6, #16
 800d3e4:	bfdc      	itt	le
 800d3e6:	230a      	movle	r3, #10
 800d3e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800d3ec:	e7e3      	b.n	800d3b6 <_strtod_l+0x23e>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	9305      	str	r3, [sp, #20]
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	e780      	b.n	800d2f8 <_strtod_l+0x180>
 800d3f6:	f04f 0c00 	mov.w	ip, #0
 800d3fa:	1caa      	adds	r2, r5, #2
 800d3fc:	9215      	str	r2, [sp, #84]	; 0x54
 800d3fe:	78aa      	ldrb	r2, [r5, #2]
 800d400:	e788      	b.n	800d314 <_strtod_l+0x19c>
 800d402:	f04f 0c01 	mov.w	ip, #1
 800d406:	e7f8      	b.n	800d3fa <_strtod_l+0x282>
 800d408:	080102b8 	.word	0x080102b8
 800d40c:	080102a8 	.word	0x080102a8
 800d410:	7ff00000 	.word	0x7ff00000
 800d414:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d416:	1c51      	adds	r1, r2, #1
 800d418:	9115      	str	r1, [sp, #84]	; 0x54
 800d41a:	7852      	ldrb	r2, [r2, #1]
 800d41c:	2a30      	cmp	r2, #48	; 0x30
 800d41e:	d0f9      	beq.n	800d414 <_strtod_l+0x29c>
 800d420:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d424:	2908      	cmp	r1, #8
 800d426:	f63f af7a 	bhi.w	800d31e <_strtod_l+0x1a6>
 800d42a:	3a30      	subs	r2, #48	; 0x30
 800d42c:	9208      	str	r2, [sp, #32]
 800d42e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d430:	920c      	str	r2, [sp, #48]	; 0x30
 800d432:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d434:	1c57      	adds	r7, r2, #1
 800d436:	9715      	str	r7, [sp, #84]	; 0x54
 800d438:	7852      	ldrb	r2, [r2, #1]
 800d43a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d43e:	f1be 0f09 	cmp.w	lr, #9
 800d442:	d938      	bls.n	800d4b6 <_strtod_l+0x33e>
 800d444:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d446:	1a7f      	subs	r7, r7, r1
 800d448:	2f08      	cmp	r7, #8
 800d44a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d44e:	dc03      	bgt.n	800d458 <_strtod_l+0x2e0>
 800d450:	9908      	ldr	r1, [sp, #32]
 800d452:	428f      	cmp	r7, r1
 800d454:	bfa8      	it	ge
 800d456:	460f      	movge	r7, r1
 800d458:	f1bc 0f00 	cmp.w	ip, #0
 800d45c:	d000      	beq.n	800d460 <_strtod_l+0x2e8>
 800d45e:	427f      	negs	r7, r7
 800d460:	2e00      	cmp	r6, #0
 800d462:	d14f      	bne.n	800d504 <_strtod_l+0x38c>
 800d464:	9904      	ldr	r1, [sp, #16]
 800d466:	4301      	orrs	r1, r0
 800d468:	f47f aec1 	bne.w	800d1ee <_strtod_l+0x76>
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f47f aedb 	bne.w	800d228 <_strtod_l+0xb0>
 800d472:	2a69      	cmp	r2, #105	; 0x69
 800d474:	d029      	beq.n	800d4ca <_strtod_l+0x352>
 800d476:	dc26      	bgt.n	800d4c6 <_strtod_l+0x34e>
 800d478:	2a49      	cmp	r2, #73	; 0x49
 800d47a:	d026      	beq.n	800d4ca <_strtod_l+0x352>
 800d47c:	2a4e      	cmp	r2, #78	; 0x4e
 800d47e:	f47f aed3 	bne.w	800d228 <_strtod_l+0xb0>
 800d482:	499b      	ldr	r1, [pc, #620]	; (800d6f0 <_strtod_l+0x578>)
 800d484:	a815      	add	r0, sp, #84	; 0x54
 800d486:	f001 f909 	bl	800e69c <__match>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	f43f aecc 	beq.w	800d228 <_strtod_l+0xb0>
 800d490:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	2b28      	cmp	r3, #40	; 0x28
 800d496:	d12f      	bne.n	800d4f8 <_strtod_l+0x380>
 800d498:	4996      	ldr	r1, [pc, #600]	; (800d6f4 <_strtod_l+0x57c>)
 800d49a:	aa18      	add	r2, sp, #96	; 0x60
 800d49c:	a815      	add	r0, sp, #84	; 0x54
 800d49e:	f001 f911 	bl	800e6c4 <__hexnan>
 800d4a2:	2805      	cmp	r0, #5
 800d4a4:	d128      	bne.n	800d4f8 <_strtod_l+0x380>
 800d4a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d4a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d4ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d4b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d4b4:	e69b      	b.n	800d1ee <_strtod_l+0x76>
 800d4b6:	9f08      	ldr	r7, [sp, #32]
 800d4b8:	210a      	movs	r1, #10
 800d4ba:	fb01 2107 	mla	r1, r1, r7, r2
 800d4be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d4c2:	9208      	str	r2, [sp, #32]
 800d4c4:	e7b5      	b.n	800d432 <_strtod_l+0x2ba>
 800d4c6:	2a6e      	cmp	r2, #110	; 0x6e
 800d4c8:	e7d9      	b.n	800d47e <_strtod_l+0x306>
 800d4ca:	498b      	ldr	r1, [pc, #556]	; (800d6f8 <_strtod_l+0x580>)
 800d4cc:	a815      	add	r0, sp, #84	; 0x54
 800d4ce:	f001 f8e5 	bl	800e69c <__match>
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	f43f aea8 	beq.w	800d228 <_strtod_l+0xb0>
 800d4d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4da:	4988      	ldr	r1, [pc, #544]	; (800d6fc <_strtod_l+0x584>)
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	a815      	add	r0, sp, #84	; 0x54
 800d4e0:	9315      	str	r3, [sp, #84]	; 0x54
 800d4e2:	f001 f8db 	bl	800e69c <__match>
 800d4e6:	b910      	cbnz	r0, 800d4ee <_strtod_l+0x376>
 800d4e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	9315      	str	r3, [sp, #84]	; 0x54
 800d4ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d70c <_strtod_l+0x594>
 800d4f2:	f04f 0800 	mov.w	r8, #0
 800d4f6:	e67a      	b.n	800d1ee <_strtod_l+0x76>
 800d4f8:	4881      	ldr	r0, [pc, #516]	; (800d700 <_strtod_l+0x588>)
 800d4fa:	f7fd fb6d 	bl	800abd8 <nan>
 800d4fe:	ec59 8b10 	vmov	r8, r9, d0
 800d502:	e674      	b.n	800d1ee <_strtod_l+0x76>
 800d504:	9b05      	ldr	r3, [sp, #20]
 800d506:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d508:	1afb      	subs	r3, r7, r3
 800d50a:	f1bb 0f00 	cmp.w	fp, #0
 800d50e:	bf08      	it	eq
 800d510:	46b3      	moveq	fp, r6
 800d512:	2e10      	cmp	r6, #16
 800d514:	9308      	str	r3, [sp, #32]
 800d516:	4635      	mov	r5, r6
 800d518:	bfa8      	it	ge
 800d51a:	2510      	movge	r5, #16
 800d51c:	f7f2 ffea 	bl	80004f4 <__aeabi_ui2d>
 800d520:	2e09      	cmp	r6, #9
 800d522:	4680      	mov	r8, r0
 800d524:	4689      	mov	r9, r1
 800d526:	dd13      	ble.n	800d550 <_strtod_l+0x3d8>
 800d528:	4b76      	ldr	r3, [pc, #472]	; (800d704 <_strtod_l+0x58c>)
 800d52a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d52e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d532:	f7f3 f859 	bl	80005e8 <__aeabi_dmul>
 800d536:	4680      	mov	r8, r0
 800d538:	4650      	mov	r0, sl
 800d53a:	4689      	mov	r9, r1
 800d53c:	f7f2 ffda 	bl	80004f4 <__aeabi_ui2d>
 800d540:	4602      	mov	r2, r0
 800d542:	460b      	mov	r3, r1
 800d544:	4640      	mov	r0, r8
 800d546:	4649      	mov	r1, r9
 800d548:	f7f2 fe98 	bl	800027c <__adddf3>
 800d54c:	4680      	mov	r8, r0
 800d54e:	4689      	mov	r9, r1
 800d550:	2e0f      	cmp	r6, #15
 800d552:	dc38      	bgt.n	800d5c6 <_strtod_l+0x44e>
 800d554:	9b08      	ldr	r3, [sp, #32]
 800d556:	2b00      	cmp	r3, #0
 800d558:	f43f ae49 	beq.w	800d1ee <_strtod_l+0x76>
 800d55c:	dd24      	ble.n	800d5a8 <_strtod_l+0x430>
 800d55e:	2b16      	cmp	r3, #22
 800d560:	dc0b      	bgt.n	800d57a <_strtod_l+0x402>
 800d562:	4968      	ldr	r1, [pc, #416]	; (800d704 <_strtod_l+0x58c>)
 800d564:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d56c:	4642      	mov	r2, r8
 800d56e:	464b      	mov	r3, r9
 800d570:	f7f3 f83a 	bl	80005e8 <__aeabi_dmul>
 800d574:	4680      	mov	r8, r0
 800d576:	4689      	mov	r9, r1
 800d578:	e639      	b.n	800d1ee <_strtod_l+0x76>
 800d57a:	9a08      	ldr	r2, [sp, #32]
 800d57c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800d580:	4293      	cmp	r3, r2
 800d582:	db20      	blt.n	800d5c6 <_strtod_l+0x44e>
 800d584:	4c5f      	ldr	r4, [pc, #380]	; (800d704 <_strtod_l+0x58c>)
 800d586:	f1c6 060f 	rsb	r6, r6, #15
 800d58a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800d58e:	4642      	mov	r2, r8
 800d590:	464b      	mov	r3, r9
 800d592:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d596:	f7f3 f827 	bl	80005e8 <__aeabi_dmul>
 800d59a:	9b08      	ldr	r3, [sp, #32]
 800d59c:	1b9e      	subs	r6, r3, r6
 800d59e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d5a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d5a6:	e7e3      	b.n	800d570 <_strtod_l+0x3f8>
 800d5a8:	9b08      	ldr	r3, [sp, #32]
 800d5aa:	3316      	adds	r3, #22
 800d5ac:	db0b      	blt.n	800d5c6 <_strtod_l+0x44e>
 800d5ae:	9b05      	ldr	r3, [sp, #20]
 800d5b0:	1bdf      	subs	r7, r3, r7
 800d5b2:	4b54      	ldr	r3, [pc, #336]	; (800d704 <_strtod_l+0x58c>)
 800d5b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d5b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5bc:	4640      	mov	r0, r8
 800d5be:	4649      	mov	r1, r9
 800d5c0:	f7f3 f93c 	bl	800083c <__aeabi_ddiv>
 800d5c4:	e7d6      	b.n	800d574 <_strtod_l+0x3fc>
 800d5c6:	9b08      	ldr	r3, [sp, #32]
 800d5c8:	1b75      	subs	r5, r6, r5
 800d5ca:	441d      	add	r5, r3
 800d5cc:	2d00      	cmp	r5, #0
 800d5ce:	dd70      	ble.n	800d6b2 <_strtod_l+0x53a>
 800d5d0:	f015 030f 	ands.w	r3, r5, #15
 800d5d4:	d00a      	beq.n	800d5ec <_strtod_l+0x474>
 800d5d6:	494b      	ldr	r1, [pc, #300]	; (800d704 <_strtod_l+0x58c>)
 800d5d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d5dc:	4642      	mov	r2, r8
 800d5de:	464b      	mov	r3, r9
 800d5e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5e4:	f7f3 f800 	bl	80005e8 <__aeabi_dmul>
 800d5e8:	4680      	mov	r8, r0
 800d5ea:	4689      	mov	r9, r1
 800d5ec:	f035 050f 	bics.w	r5, r5, #15
 800d5f0:	d04d      	beq.n	800d68e <_strtod_l+0x516>
 800d5f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d5f6:	dd22      	ble.n	800d63e <_strtod_l+0x4c6>
 800d5f8:	2500      	movs	r5, #0
 800d5fa:	46ab      	mov	fp, r5
 800d5fc:	9509      	str	r5, [sp, #36]	; 0x24
 800d5fe:	9505      	str	r5, [sp, #20]
 800d600:	2322      	movs	r3, #34	; 0x22
 800d602:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d70c <_strtod_l+0x594>
 800d606:	6023      	str	r3, [r4, #0]
 800d608:	f04f 0800 	mov.w	r8, #0
 800d60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f43f aded 	beq.w	800d1ee <_strtod_l+0x76>
 800d614:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d616:	4620      	mov	r0, r4
 800d618:	f001 f9ee 	bl	800e9f8 <_Bfree>
 800d61c:	9905      	ldr	r1, [sp, #20]
 800d61e:	4620      	mov	r0, r4
 800d620:	f001 f9ea 	bl	800e9f8 <_Bfree>
 800d624:	4659      	mov	r1, fp
 800d626:	4620      	mov	r0, r4
 800d628:	f001 f9e6 	bl	800e9f8 <_Bfree>
 800d62c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d62e:	4620      	mov	r0, r4
 800d630:	f001 f9e2 	bl	800e9f8 <_Bfree>
 800d634:	4629      	mov	r1, r5
 800d636:	4620      	mov	r0, r4
 800d638:	f001 f9de 	bl	800e9f8 <_Bfree>
 800d63c:	e5d7      	b.n	800d1ee <_strtod_l+0x76>
 800d63e:	4b32      	ldr	r3, [pc, #200]	; (800d708 <_strtod_l+0x590>)
 800d640:	9304      	str	r3, [sp, #16]
 800d642:	2300      	movs	r3, #0
 800d644:	112d      	asrs	r5, r5, #4
 800d646:	4640      	mov	r0, r8
 800d648:	4649      	mov	r1, r9
 800d64a:	469a      	mov	sl, r3
 800d64c:	2d01      	cmp	r5, #1
 800d64e:	dc21      	bgt.n	800d694 <_strtod_l+0x51c>
 800d650:	b10b      	cbz	r3, 800d656 <_strtod_l+0x4de>
 800d652:	4680      	mov	r8, r0
 800d654:	4689      	mov	r9, r1
 800d656:	492c      	ldr	r1, [pc, #176]	; (800d708 <_strtod_l+0x590>)
 800d658:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d65c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d660:	4642      	mov	r2, r8
 800d662:	464b      	mov	r3, r9
 800d664:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d668:	f7f2 ffbe 	bl	80005e8 <__aeabi_dmul>
 800d66c:	4b27      	ldr	r3, [pc, #156]	; (800d70c <_strtod_l+0x594>)
 800d66e:	460a      	mov	r2, r1
 800d670:	400b      	ands	r3, r1
 800d672:	4927      	ldr	r1, [pc, #156]	; (800d710 <_strtod_l+0x598>)
 800d674:	428b      	cmp	r3, r1
 800d676:	4680      	mov	r8, r0
 800d678:	d8be      	bhi.n	800d5f8 <_strtod_l+0x480>
 800d67a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d67e:	428b      	cmp	r3, r1
 800d680:	bf86      	itte	hi
 800d682:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d714 <_strtod_l+0x59c>
 800d686:	f04f 38ff 	movhi.w	r8, #4294967295
 800d68a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d68e:	2300      	movs	r3, #0
 800d690:	9304      	str	r3, [sp, #16]
 800d692:	e07b      	b.n	800d78c <_strtod_l+0x614>
 800d694:	07ea      	lsls	r2, r5, #31
 800d696:	d505      	bpl.n	800d6a4 <_strtod_l+0x52c>
 800d698:	9b04      	ldr	r3, [sp, #16]
 800d69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69e:	f7f2 ffa3 	bl	80005e8 <__aeabi_dmul>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	9a04      	ldr	r2, [sp, #16]
 800d6a6:	3208      	adds	r2, #8
 800d6a8:	f10a 0a01 	add.w	sl, sl, #1
 800d6ac:	106d      	asrs	r5, r5, #1
 800d6ae:	9204      	str	r2, [sp, #16]
 800d6b0:	e7cc      	b.n	800d64c <_strtod_l+0x4d4>
 800d6b2:	d0ec      	beq.n	800d68e <_strtod_l+0x516>
 800d6b4:	426d      	negs	r5, r5
 800d6b6:	f015 020f 	ands.w	r2, r5, #15
 800d6ba:	d00a      	beq.n	800d6d2 <_strtod_l+0x55a>
 800d6bc:	4b11      	ldr	r3, [pc, #68]	; (800d704 <_strtod_l+0x58c>)
 800d6be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6c2:	4640      	mov	r0, r8
 800d6c4:	4649      	mov	r1, r9
 800d6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ca:	f7f3 f8b7 	bl	800083c <__aeabi_ddiv>
 800d6ce:	4680      	mov	r8, r0
 800d6d0:	4689      	mov	r9, r1
 800d6d2:	112d      	asrs	r5, r5, #4
 800d6d4:	d0db      	beq.n	800d68e <_strtod_l+0x516>
 800d6d6:	2d1f      	cmp	r5, #31
 800d6d8:	dd1e      	ble.n	800d718 <_strtod_l+0x5a0>
 800d6da:	2500      	movs	r5, #0
 800d6dc:	46ab      	mov	fp, r5
 800d6de:	9509      	str	r5, [sp, #36]	; 0x24
 800d6e0:	9505      	str	r5, [sp, #20]
 800d6e2:	2322      	movs	r3, #34	; 0x22
 800d6e4:	f04f 0800 	mov.w	r8, #0
 800d6e8:	f04f 0900 	mov.w	r9, #0
 800d6ec:	6023      	str	r3, [r4, #0]
 800d6ee:	e78d      	b.n	800d60c <_strtod_l+0x494>
 800d6f0:	080102b3 	.word	0x080102b3
 800d6f4:	080102cc 	.word	0x080102cc
 800d6f8:	080102aa 	.word	0x080102aa
 800d6fc:	080102ad 	.word	0x080102ad
 800d700:	08010630 	.word	0x08010630
 800d704:	08010420 	.word	0x08010420
 800d708:	080103f8 	.word	0x080103f8
 800d70c:	7ff00000 	.word	0x7ff00000
 800d710:	7ca00000 	.word	0x7ca00000
 800d714:	7fefffff 	.word	0x7fefffff
 800d718:	f015 0310 	ands.w	r3, r5, #16
 800d71c:	bf18      	it	ne
 800d71e:	236a      	movne	r3, #106	; 0x6a
 800d720:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800dac4 <_strtod_l+0x94c>
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	4640      	mov	r0, r8
 800d728:	4649      	mov	r1, r9
 800d72a:	2300      	movs	r3, #0
 800d72c:	07ea      	lsls	r2, r5, #31
 800d72e:	d504      	bpl.n	800d73a <_strtod_l+0x5c2>
 800d730:	e9da 2300 	ldrd	r2, r3, [sl]
 800d734:	f7f2 ff58 	bl	80005e8 <__aeabi_dmul>
 800d738:	2301      	movs	r3, #1
 800d73a:	106d      	asrs	r5, r5, #1
 800d73c:	f10a 0a08 	add.w	sl, sl, #8
 800d740:	d1f4      	bne.n	800d72c <_strtod_l+0x5b4>
 800d742:	b10b      	cbz	r3, 800d748 <_strtod_l+0x5d0>
 800d744:	4680      	mov	r8, r0
 800d746:	4689      	mov	r9, r1
 800d748:	9b04      	ldr	r3, [sp, #16]
 800d74a:	b1bb      	cbz	r3, 800d77c <_strtod_l+0x604>
 800d74c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d750:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d754:	2b00      	cmp	r3, #0
 800d756:	4649      	mov	r1, r9
 800d758:	dd10      	ble.n	800d77c <_strtod_l+0x604>
 800d75a:	2b1f      	cmp	r3, #31
 800d75c:	f340 811e 	ble.w	800d99c <_strtod_l+0x824>
 800d760:	2b34      	cmp	r3, #52	; 0x34
 800d762:	bfde      	ittt	le
 800d764:	f04f 33ff 	movle.w	r3, #4294967295
 800d768:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d76c:	4093      	lslle	r3, r2
 800d76e:	f04f 0800 	mov.w	r8, #0
 800d772:	bfcc      	ite	gt
 800d774:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d778:	ea03 0901 	andle.w	r9, r3, r1
 800d77c:	2200      	movs	r2, #0
 800d77e:	2300      	movs	r3, #0
 800d780:	4640      	mov	r0, r8
 800d782:	4649      	mov	r1, r9
 800d784:	f7f3 f998 	bl	8000ab8 <__aeabi_dcmpeq>
 800d788:	2800      	cmp	r0, #0
 800d78a:	d1a6      	bne.n	800d6da <_strtod_l+0x562>
 800d78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d792:	4633      	mov	r3, r6
 800d794:	465a      	mov	r2, fp
 800d796:	4620      	mov	r0, r4
 800d798:	f001 f996 	bl	800eac8 <__s2b>
 800d79c:	9009      	str	r0, [sp, #36]	; 0x24
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	f43f af2a 	beq.w	800d5f8 <_strtod_l+0x480>
 800d7a4:	9a08      	ldr	r2, [sp, #32]
 800d7a6:	9b05      	ldr	r3, [sp, #20]
 800d7a8:	2a00      	cmp	r2, #0
 800d7aa:	eba3 0307 	sub.w	r3, r3, r7
 800d7ae:	bfa8      	it	ge
 800d7b0:	2300      	movge	r3, #0
 800d7b2:	930c      	str	r3, [sp, #48]	; 0x30
 800d7b4:	2500      	movs	r5, #0
 800d7b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d7ba:	9312      	str	r3, [sp, #72]	; 0x48
 800d7bc:	46ab      	mov	fp, r5
 800d7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	6859      	ldr	r1, [r3, #4]
 800d7c4:	f001 f8d8 	bl	800e978 <_Balloc>
 800d7c8:	9005      	str	r0, [sp, #20]
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	f43f af18 	beq.w	800d600 <_strtod_l+0x488>
 800d7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d2:	691a      	ldr	r2, [r3, #16]
 800d7d4:	3202      	adds	r2, #2
 800d7d6:	f103 010c 	add.w	r1, r3, #12
 800d7da:	0092      	lsls	r2, r2, #2
 800d7dc:	300c      	adds	r0, #12
 800d7de:	f000 fc5a 	bl	800e096 <memcpy>
 800d7e2:	ec49 8b10 	vmov	d0, r8, r9
 800d7e6:	aa18      	add	r2, sp, #96	; 0x60
 800d7e8:	a917      	add	r1, sp, #92	; 0x5c
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f001 fca0 	bl	800f130 <__d2b>
 800d7f0:	ec49 8b18 	vmov	d8, r8, r9
 800d7f4:	9016      	str	r0, [sp, #88]	; 0x58
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f43f af02 	beq.w	800d600 <_strtod_l+0x488>
 800d7fc:	2101      	movs	r1, #1
 800d7fe:	4620      	mov	r0, r4
 800d800:	f001 f9fa 	bl	800ebf8 <__i2b>
 800d804:	4683      	mov	fp, r0
 800d806:	2800      	cmp	r0, #0
 800d808:	f43f aefa 	beq.w	800d600 <_strtod_l+0x488>
 800d80c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d80e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d810:	2e00      	cmp	r6, #0
 800d812:	bfab      	itete	ge
 800d814:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d816:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d818:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d81a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d81e:	bfac      	ite	ge
 800d820:	eb06 0a03 	addge.w	sl, r6, r3
 800d824:	1b9f      	sublt	r7, r3, r6
 800d826:	9b04      	ldr	r3, [sp, #16]
 800d828:	1af6      	subs	r6, r6, r3
 800d82a:	4416      	add	r6, r2
 800d82c:	4ba0      	ldr	r3, [pc, #640]	; (800dab0 <_strtod_l+0x938>)
 800d82e:	3e01      	subs	r6, #1
 800d830:	429e      	cmp	r6, r3
 800d832:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d836:	f280 80c4 	bge.w	800d9c2 <_strtod_l+0x84a>
 800d83a:	1b9b      	subs	r3, r3, r6
 800d83c:	2b1f      	cmp	r3, #31
 800d83e:	eba2 0203 	sub.w	r2, r2, r3
 800d842:	f04f 0101 	mov.w	r1, #1
 800d846:	f300 80b0 	bgt.w	800d9aa <_strtod_l+0x832>
 800d84a:	fa01 f303 	lsl.w	r3, r1, r3
 800d84e:	930e      	str	r3, [sp, #56]	; 0x38
 800d850:	2300      	movs	r3, #0
 800d852:	930d      	str	r3, [sp, #52]	; 0x34
 800d854:	eb0a 0602 	add.w	r6, sl, r2
 800d858:	9b04      	ldr	r3, [sp, #16]
 800d85a:	45b2      	cmp	sl, r6
 800d85c:	4417      	add	r7, r2
 800d85e:	441f      	add	r7, r3
 800d860:	4653      	mov	r3, sl
 800d862:	bfa8      	it	ge
 800d864:	4633      	movge	r3, r6
 800d866:	42bb      	cmp	r3, r7
 800d868:	bfa8      	it	ge
 800d86a:	463b      	movge	r3, r7
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	bfc2      	ittt	gt
 800d870:	1af6      	subgt	r6, r6, r3
 800d872:	1aff      	subgt	r7, r7, r3
 800d874:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	dd17      	ble.n	800d8ae <_strtod_l+0x736>
 800d87e:	4659      	mov	r1, fp
 800d880:	461a      	mov	r2, r3
 800d882:	4620      	mov	r0, r4
 800d884:	f001 fa78 	bl	800ed78 <__pow5mult>
 800d888:	4683      	mov	fp, r0
 800d88a:	2800      	cmp	r0, #0
 800d88c:	f43f aeb8 	beq.w	800d600 <_strtod_l+0x488>
 800d890:	4601      	mov	r1, r0
 800d892:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d894:	4620      	mov	r0, r4
 800d896:	f001 f9c5 	bl	800ec24 <__multiply>
 800d89a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d89c:	2800      	cmp	r0, #0
 800d89e:	f43f aeaf 	beq.w	800d600 <_strtod_l+0x488>
 800d8a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f001 f8a7 	bl	800e9f8 <_Bfree>
 800d8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8ac:	9316      	str	r3, [sp, #88]	; 0x58
 800d8ae:	2e00      	cmp	r6, #0
 800d8b0:	f300 808c 	bgt.w	800d9cc <_strtod_l+0x854>
 800d8b4:	9b08      	ldr	r3, [sp, #32]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	dd08      	ble.n	800d8cc <_strtod_l+0x754>
 800d8ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d8bc:	9905      	ldr	r1, [sp, #20]
 800d8be:	4620      	mov	r0, r4
 800d8c0:	f001 fa5a 	bl	800ed78 <__pow5mult>
 800d8c4:	9005      	str	r0, [sp, #20]
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	f43f ae9a 	beq.w	800d600 <_strtod_l+0x488>
 800d8cc:	2f00      	cmp	r7, #0
 800d8ce:	dd08      	ble.n	800d8e2 <_strtod_l+0x76a>
 800d8d0:	9905      	ldr	r1, [sp, #20]
 800d8d2:	463a      	mov	r2, r7
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	f001 faa9 	bl	800ee2c <__lshift>
 800d8da:	9005      	str	r0, [sp, #20]
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	f43f ae8f 	beq.w	800d600 <_strtod_l+0x488>
 800d8e2:	f1ba 0f00 	cmp.w	sl, #0
 800d8e6:	dd08      	ble.n	800d8fa <_strtod_l+0x782>
 800d8e8:	4659      	mov	r1, fp
 800d8ea:	4652      	mov	r2, sl
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f001 fa9d 	bl	800ee2c <__lshift>
 800d8f2:	4683      	mov	fp, r0
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	f43f ae83 	beq.w	800d600 <_strtod_l+0x488>
 800d8fa:	9a05      	ldr	r2, [sp, #20]
 800d8fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d8fe:	4620      	mov	r0, r4
 800d900:	f001 fb1c 	bl	800ef3c <__mdiff>
 800d904:	4605      	mov	r5, r0
 800d906:	2800      	cmp	r0, #0
 800d908:	f43f ae7a 	beq.w	800d600 <_strtod_l+0x488>
 800d90c:	68c3      	ldr	r3, [r0, #12]
 800d90e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d910:	2300      	movs	r3, #0
 800d912:	60c3      	str	r3, [r0, #12]
 800d914:	4659      	mov	r1, fp
 800d916:	f001 faf5 	bl	800ef04 <__mcmp>
 800d91a:	2800      	cmp	r0, #0
 800d91c:	da60      	bge.n	800d9e0 <_strtod_l+0x868>
 800d91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d920:	ea53 0308 	orrs.w	r3, r3, r8
 800d924:	f040 8084 	bne.w	800da30 <_strtod_l+0x8b8>
 800d928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d17f      	bne.n	800da30 <_strtod_l+0x8b8>
 800d930:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d934:	0d1b      	lsrs	r3, r3, #20
 800d936:	051b      	lsls	r3, r3, #20
 800d938:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d93c:	d978      	bls.n	800da30 <_strtod_l+0x8b8>
 800d93e:	696b      	ldr	r3, [r5, #20]
 800d940:	b913      	cbnz	r3, 800d948 <_strtod_l+0x7d0>
 800d942:	692b      	ldr	r3, [r5, #16]
 800d944:	2b01      	cmp	r3, #1
 800d946:	dd73      	ble.n	800da30 <_strtod_l+0x8b8>
 800d948:	4629      	mov	r1, r5
 800d94a:	2201      	movs	r2, #1
 800d94c:	4620      	mov	r0, r4
 800d94e:	f001 fa6d 	bl	800ee2c <__lshift>
 800d952:	4659      	mov	r1, fp
 800d954:	4605      	mov	r5, r0
 800d956:	f001 fad5 	bl	800ef04 <__mcmp>
 800d95a:	2800      	cmp	r0, #0
 800d95c:	dd68      	ble.n	800da30 <_strtod_l+0x8b8>
 800d95e:	9904      	ldr	r1, [sp, #16]
 800d960:	4a54      	ldr	r2, [pc, #336]	; (800dab4 <_strtod_l+0x93c>)
 800d962:	464b      	mov	r3, r9
 800d964:	2900      	cmp	r1, #0
 800d966:	f000 8084 	beq.w	800da72 <_strtod_l+0x8fa>
 800d96a:	ea02 0109 	and.w	r1, r2, r9
 800d96e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d972:	dc7e      	bgt.n	800da72 <_strtod_l+0x8fa>
 800d974:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d978:	f77f aeb3 	ble.w	800d6e2 <_strtod_l+0x56a>
 800d97c:	4b4e      	ldr	r3, [pc, #312]	; (800dab8 <_strtod_l+0x940>)
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	2200      	movs	r2, #0
 800d984:	f7f2 fe30 	bl	80005e8 <__aeabi_dmul>
 800d988:	4b4a      	ldr	r3, [pc, #296]	; (800dab4 <_strtod_l+0x93c>)
 800d98a:	400b      	ands	r3, r1
 800d98c:	4680      	mov	r8, r0
 800d98e:	4689      	mov	r9, r1
 800d990:	2b00      	cmp	r3, #0
 800d992:	f47f ae3f 	bne.w	800d614 <_strtod_l+0x49c>
 800d996:	2322      	movs	r3, #34	; 0x22
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	e63b      	b.n	800d614 <_strtod_l+0x49c>
 800d99c:	f04f 32ff 	mov.w	r2, #4294967295
 800d9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a4:	ea03 0808 	and.w	r8, r3, r8
 800d9a8:	e6e8      	b.n	800d77c <_strtod_l+0x604>
 800d9aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d9ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d9b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d9b6:	36e2      	adds	r6, #226	; 0xe2
 800d9b8:	fa01 f306 	lsl.w	r3, r1, r6
 800d9bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d9c0:	e748      	b.n	800d854 <_strtod_l+0x6dc>
 800d9c2:	2100      	movs	r1, #0
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d9ca:	e743      	b.n	800d854 <_strtod_l+0x6dc>
 800d9cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d9ce:	4632      	mov	r2, r6
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f001 fa2b 	bl	800ee2c <__lshift>
 800d9d6:	9016      	str	r0, [sp, #88]	; 0x58
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	f47f af6b 	bne.w	800d8b4 <_strtod_l+0x73c>
 800d9de:	e60f      	b.n	800d600 <_strtod_l+0x488>
 800d9e0:	46ca      	mov	sl, r9
 800d9e2:	d171      	bne.n	800dac8 <_strtod_l+0x950>
 800d9e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d9ea:	b352      	cbz	r2, 800da42 <_strtod_l+0x8ca>
 800d9ec:	4a33      	ldr	r2, [pc, #204]	; (800dabc <_strtod_l+0x944>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d12a      	bne.n	800da48 <_strtod_l+0x8d0>
 800d9f2:	9b04      	ldr	r3, [sp, #16]
 800d9f4:	4641      	mov	r1, r8
 800d9f6:	b1fb      	cbz	r3, 800da38 <_strtod_l+0x8c0>
 800d9f8:	4b2e      	ldr	r3, [pc, #184]	; (800dab4 <_strtod_l+0x93c>)
 800d9fa:	ea09 0303 	and.w	r3, r9, r3
 800d9fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800da02:	f04f 32ff 	mov.w	r2, #4294967295
 800da06:	d81a      	bhi.n	800da3e <_strtod_l+0x8c6>
 800da08:	0d1b      	lsrs	r3, r3, #20
 800da0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da0e:	fa02 f303 	lsl.w	r3, r2, r3
 800da12:	4299      	cmp	r1, r3
 800da14:	d118      	bne.n	800da48 <_strtod_l+0x8d0>
 800da16:	4b2a      	ldr	r3, [pc, #168]	; (800dac0 <_strtod_l+0x948>)
 800da18:	459a      	cmp	sl, r3
 800da1a:	d102      	bne.n	800da22 <_strtod_l+0x8aa>
 800da1c:	3101      	adds	r1, #1
 800da1e:	f43f adef 	beq.w	800d600 <_strtod_l+0x488>
 800da22:	4b24      	ldr	r3, [pc, #144]	; (800dab4 <_strtod_l+0x93c>)
 800da24:	ea0a 0303 	and.w	r3, sl, r3
 800da28:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800da2c:	f04f 0800 	mov.w	r8, #0
 800da30:	9b04      	ldr	r3, [sp, #16]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d1a2      	bne.n	800d97c <_strtod_l+0x804>
 800da36:	e5ed      	b.n	800d614 <_strtod_l+0x49c>
 800da38:	f04f 33ff 	mov.w	r3, #4294967295
 800da3c:	e7e9      	b.n	800da12 <_strtod_l+0x89a>
 800da3e:	4613      	mov	r3, r2
 800da40:	e7e7      	b.n	800da12 <_strtod_l+0x89a>
 800da42:	ea53 0308 	orrs.w	r3, r3, r8
 800da46:	d08a      	beq.n	800d95e <_strtod_l+0x7e6>
 800da48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da4a:	b1e3      	cbz	r3, 800da86 <_strtod_l+0x90e>
 800da4c:	ea13 0f0a 	tst.w	r3, sl
 800da50:	d0ee      	beq.n	800da30 <_strtod_l+0x8b8>
 800da52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da54:	9a04      	ldr	r2, [sp, #16]
 800da56:	4640      	mov	r0, r8
 800da58:	4649      	mov	r1, r9
 800da5a:	b1c3      	cbz	r3, 800da8e <_strtod_l+0x916>
 800da5c:	f7ff fb70 	bl	800d140 <sulp>
 800da60:	4602      	mov	r2, r0
 800da62:	460b      	mov	r3, r1
 800da64:	ec51 0b18 	vmov	r0, r1, d8
 800da68:	f7f2 fc08 	bl	800027c <__adddf3>
 800da6c:	4680      	mov	r8, r0
 800da6e:	4689      	mov	r9, r1
 800da70:	e7de      	b.n	800da30 <_strtod_l+0x8b8>
 800da72:	4013      	ands	r3, r2
 800da74:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800da78:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800da7c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800da80:	f04f 38ff 	mov.w	r8, #4294967295
 800da84:	e7d4      	b.n	800da30 <_strtod_l+0x8b8>
 800da86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da88:	ea13 0f08 	tst.w	r3, r8
 800da8c:	e7e0      	b.n	800da50 <_strtod_l+0x8d8>
 800da8e:	f7ff fb57 	bl	800d140 <sulp>
 800da92:	4602      	mov	r2, r0
 800da94:	460b      	mov	r3, r1
 800da96:	ec51 0b18 	vmov	r0, r1, d8
 800da9a:	f7f2 fbed 	bl	8000278 <__aeabi_dsub>
 800da9e:	2200      	movs	r2, #0
 800daa0:	2300      	movs	r3, #0
 800daa2:	4680      	mov	r8, r0
 800daa4:	4689      	mov	r9, r1
 800daa6:	f7f3 f807 	bl	8000ab8 <__aeabi_dcmpeq>
 800daaa:	2800      	cmp	r0, #0
 800daac:	d0c0      	beq.n	800da30 <_strtod_l+0x8b8>
 800daae:	e618      	b.n	800d6e2 <_strtod_l+0x56a>
 800dab0:	fffffc02 	.word	0xfffffc02
 800dab4:	7ff00000 	.word	0x7ff00000
 800dab8:	39500000 	.word	0x39500000
 800dabc:	000fffff 	.word	0x000fffff
 800dac0:	7fefffff 	.word	0x7fefffff
 800dac4:	080102e0 	.word	0x080102e0
 800dac8:	4659      	mov	r1, fp
 800daca:	4628      	mov	r0, r5
 800dacc:	f001 fb8a 	bl	800f1e4 <__ratio>
 800dad0:	ec57 6b10 	vmov	r6, r7, d0
 800dad4:	ee10 0a10 	vmov	r0, s0
 800dad8:	2200      	movs	r2, #0
 800dada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dade:	4639      	mov	r1, r7
 800dae0:	f7f2 fffe 	bl	8000ae0 <__aeabi_dcmple>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d071      	beq.n	800dbcc <_strtod_l+0xa54>
 800dae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daea:	2b00      	cmp	r3, #0
 800daec:	d17c      	bne.n	800dbe8 <_strtod_l+0xa70>
 800daee:	f1b8 0f00 	cmp.w	r8, #0
 800daf2:	d15a      	bne.n	800dbaa <_strtod_l+0xa32>
 800daf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d15d      	bne.n	800dbb8 <_strtod_l+0xa40>
 800dafc:	4b90      	ldr	r3, [pc, #576]	; (800dd40 <_strtod_l+0xbc8>)
 800dafe:	2200      	movs	r2, #0
 800db00:	4630      	mov	r0, r6
 800db02:	4639      	mov	r1, r7
 800db04:	f7f2 ffe2 	bl	8000acc <__aeabi_dcmplt>
 800db08:	2800      	cmp	r0, #0
 800db0a:	d15c      	bne.n	800dbc6 <_strtod_l+0xa4e>
 800db0c:	4630      	mov	r0, r6
 800db0e:	4639      	mov	r1, r7
 800db10:	4b8c      	ldr	r3, [pc, #560]	; (800dd44 <_strtod_l+0xbcc>)
 800db12:	2200      	movs	r2, #0
 800db14:	f7f2 fd68 	bl	80005e8 <__aeabi_dmul>
 800db18:	4606      	mov	r6, r0
 800db1a:	460f      	mov	r7, r1
 800db1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800db20:	9606      	str	r6, [sp, #24]
 800db22:	9307      	str	r3, [sp, #28]
 800db24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800db28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800db2c:	4b86      	ldr	r3, [pc, #536]	; (800dd48 <_strtod_l+0xbd0>)
 800db2e:	ea0a 0303 	and.w	r3, sl, r3
 800db32:	930d      	str	r3, [sp, #52]	; 0x34
 800db34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db36:	4b85      	ldr	r3, [pc, #532]	; (800dd4c <_strtod_l+0xbd4>)
 800db38:	429a      	cmp	r2, r3
 800db3a:	f040 8090 	bne.w	800dc5e <_strtod_l+0xae6>
 800db3e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800db42:	ec49 8b10 	vmov	d0, r8, r9
 800db46:	f001 fa83 	bl	800f050 <__ulp>
 800db4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800db4e:	ec51 0b10 	vmov	r0, r1, d0
 800db52:	f7f2 fd49 	bl	80005e8 <__aeabi_dmul>
 800db56:	4642      	mov	r2, r8
 800db58:	464b      	mov	r3, r9
 800db5a:	f7f2 fb8f 	bl	800027c <__adddf3>
 800db5e:	460b      	mov	r3, r1
 800db60:	4979      	ldr	r1, [pc, #484]	; (800dd48 <_strtod_l+0xbd0>)
 800db62:	4a7b      	ldr	r2, [pc, #492]	; (800dd50 <_strtod_l+0xbd8>)
 800db64:	4019      	ands	r1, r3
 800db66:	4291      	cmp	r1, r2
 800db68:	4680      	mov	r8, r0
 800db6a:	d944      	bls.n	800dbf6 <_strtod_l+0xa7e>
 800db6c:	ee18 2a90 	vmov	r2, s17
 800db70:	4b78      	ldr	r3, [pc, #480]	; (800dd54 <_strtod_l+0xbdc>)
 800db72:	429a      	cmp	r2, r3
 800db74:	d104      	bne.n	800db80 <_strtod_l+0xa08>
 800db76:	ee18 3a10 	vmov	r3, s16
 800db7a:	3301      	adds	r3, #1
 800db7c:	f43f ad40 	beq.w	800d600 <_strtod_l+0x488>
 800db80:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800dd54 <_strtod_l+0xbdc>
 800db84:	f04f 38ff 	mov.w	r8, #4294967295
 800db88:	9916      	ldr	r1, [sp, #88]	; 0x58
 800db8a:	4620      	mov	r0, r4
 800db8c:	f000 ff34 	bl	800e9f8 <_Bfree>
 800db90:	9905      	ldr	r1, [sp, #20]
 800db92:	4620      	mov	r0, r4
 800db94:	f000 ff30 	bl	800e9f8 <_Bfree>
 800db98:	4659      	mov	r1, fp
 800db9a:	4620      	mov	r0, r4
 800db9c:	f000 ff2c 	bl	800e9f8 <_Bfree>
 800dba0:	4629      	mov	r1, r5
 800dba2:	4620      	mov	r0, r4
 800dba4:	f000 ff28 	bl	800e9f8 <_Bfree>
 800dba8:	e609      	b.n	800d7be <_strtod_l+0x646>
 800dbaa:	f1b8 0f01 	cmp.w	r8, #1
 800dbae:	d103      	bne.n	800dbb8 <_strtod_l+0xa40>
 800dbb0:	f1b9 0f00 	cmp.w	r9, #0
 800dbb4:	f43f ad95 	beq.w	800d6e2 <_strtod_l+0x56a>
 800dbb8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800dd10 <_strtod_l+0xb98>
 800dbbc:	4f60      	ldr	r7, [pc, #384]	; (800dd40 <_strtod_l+0xbc8>)
 800dbbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dbc2:	2600      	movs	r6, #0
 800dbc4:	e7ae      	b.n	800db24 <_strtod_l+0x9ac>
 800dbc6:	4f5f      	ldr	r7, [pc, #380]	; (800dd44 <_strtod_l+0xbcc>)
 800dbc8:	2600      	movs	r6, #0
 800dbca:	e7a7      	b.n	800db1c <_strtod_l+0x9a4>
 800dbcc:	4b5d      	ldr	r3, [pc, #372]	; (800dd44 <_strtod_l+0xbcc>)
 800dbce:	4630      	mov	r0, r6
 800dbd0:	4639      	mov	r1, r7
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f7f2 fd08 	bl	80005e8 <__aeabi_dmul>
 800dbd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbda:	4606      	mov	r6, r0
 800dbdc:	460f      	mov	r7, r1
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d09c      	beq.n	800db1c <_strtod_l+0x9a4>
 800dbe2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dbe6:	e79d      	b.n	800db24 <_strtod_l+0x9ac>
 800dbe8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800dd18 <_strtod_l+0xba0>
 800dbec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dbf0:	ec57 6b17 	vmov	r6, r7, d7
 800dbf4:	e796      	b.n	800db24 <_strtod_l+0x9ac>
 800dbf6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800dbfa:	9b04      	ldr	r3, [sp, #16]
 800dbfc:	46ca      	mov	sl, r9
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d1c2      	bne.n	800db88 <_strtod_l+0xa10>
 800dc02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dc06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc08:	0d1b      	lsrs	r3, r3, #20
 800dc0a:	051b      	lsls	r3, r3, #20
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d1bb      	bne.n	800db88 <_strtod_l+0xa10>
 800dc10:	4630      	mov	r0, r6
 800dc12:	4639      	mov	r1, r7
 800dc14:	f7f3 f848 	bl	8000ca8 <__aeabi_d2lz>
 800dc18:	f7f2 fcb8 	bl	800058c <__aeabi_l2d>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	460b      	mov	r3, r1
 800dc20:	4630      	mov	r0, r6
 800dc22:	4639      	mov	r1, r7
 800dc24:	f7f2 fb28 	bl	8000278 <__aeabi_dsub>
 800dc28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc2e:	ea43 0308 	orr.w	r3, r3, r8
 800dc32:	4313      	orrs	r3, r2
 800dc34:	4606      	mov	r6, r0
 800dc36:	460f      	mov	r7, r1
 800dc38:	d054      	beq.n	800dce4 <_strtod_l+0xb6c>
 800dc3a:	a339      	add	r3, pc, #228	; (adr r3, 800dd20 <_strtod_l+0xba8>)
 800dc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc40:	f7f2 ff44 	bl	8000acc <__aeabi_dcmplt>
 800dc44:	2800      	cmp	r0, #0
 800dc46:	f47f ace5 	bne.w	800d614 <_strtod_l+0x49c>
 800dc4a:	a337      	add	r3, pc, #220	; (adr r3, 800dd28 <_strtod_l+0xbb0>)
 800dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc50:	4630      	mov	r0, r6
 800dc52:	4639      	mov	r1, r7
 800dc54:	f7f2 ff58 	bl	8000b08 <__aeabi_dcmpgt>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d095      	beq.n	800db88 <_strtod_l+0xa10>
 800dc5c:	e4da      	b.n	800d614 <_strtod_l+0x49c>
 800dc5e:	9b04      	ldr	r3, [sp, #16]
 800dc60:	b333      	cbz	r3, 800dcb0 <_strtod_l+0xb38>
 800dc62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dc68:	d822      	bhi.n	800dcb0 <_strtod_l+0xb38>
 800dc6a:	a331      	add	r3, pc, #196	; (adr r3, 800dd30 <_strtod_l+0xbb8>)
 800dc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc70:	4630      	mov	r0, r6
 800dc72:	4639      	mov	r1, r7
 800dc74:	f7f2 ff34 	bl	8000ae0 <__aeabi_dcmple>
 800dc78:	b1a0      	cbz	r0, 800dca4 <_strtod_l+0xb2c>
 800dc7a:	4639      	mov	r1, r7
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	f7f2 ff8b 	bl	8000b98 <__aeabi_d2uiz>
 800dc82:	2801      	cmp	r0, #1
 800dc84:	bf38      	it	cc
 800dc86:	2001      	movcc	r0, #1
 800dc88:	f7f2 fc34 	bl	80004f4 <__aeabi_ui2d>
 800dc8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc8e:	4606      	mov	r6, r0
 800dc90:	460f      	mov	r7, r1
 800dc92:	bb23      	cbnz	r3, 800dcde <_strtod_l+0xb66>
 800dc94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc98:	9010      	str	r0, [sp, #64]	; 0x40
 800dc9a:	9311      	str	r3, [sp, #68]	; 0x44
 800dc9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dca0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800dca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dca6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dca8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dcac:	1a9b      	subs	r3, r3, r2
 800dcae:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcb0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dcb4:	eeb0 0a48 	vmov.f32	s0, s16
 800dcb8:	eef0 0a68 	vmov.f32	s1, s17
 800dcbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800dcc0:	f001 f9c6 	bl	800f050 <__ulp>
 800dcc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dcc8:	ec53 2b10 	vmov	r2, r3, d0
 800dccc:	f7f2 fc8c 	bl	80005e8 <__aeabi_dmul>
 800dcd0:	ec53 2b18 	vmov	r2, r3, d8
 800dcd4:	f7f2 fad2 	bl	800027c <__adddf3>
 800dcd8:	4680      	mov	r8, r0
 800dcda:	4689      	mov	r9, r1
 800dcdc:	e78d      	b.n	800dbfa <_strtod_l+0xa82>
 800dcde:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800dce2:	e7db      	b.n	800dc9c <_strtod_l+0xb24>
 800dce4:	a314      	add	r3, pc, #80	; (adr r3, 800dd38 <_strtod_l+0xbc0>)
 800dce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcea:	f7f2 feef 	bl	8000acc <__aeabi_dcmplt>
 800dcee:	e7b3      	b.n	800dc58 <_strtod_l+0xae0>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	930a      	str	r3, [sp, #40]	; 0x28
 800dcf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dcf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcf8:	6013      	str	r3, [r2, #0]
 800dcfa:	f7ff ba7c 	b.w	800d1f6 <_strtod_l+0x7e>
 800dcfe:	2a65      	cmp	r2, #101	; 0x65
 800dd00:	f43f ab75 	beq.w	800d3ee <_strtod_l+0x276>
 800dd04:	2a45      	cmp	r2, #69	; 0x45
 800dd06:	f43f ab72 	beq.w	800d3ee <_strtod_l+0x276>
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	f7ff bbaa 	b.w	800d464 <_strtod_l+0x2ec>
 800dd10:	00000000 	.word	0x00000000
 800dd14:	bff00000 	.word	0xbff00000
 800dd18:	00000000 	.word	0x00000000
 800dd1c:	3ff00000 	.word	0x3ff00000
 800dd20:	94a03595 	.word	0x94a03595
 800dd24:	3fdfffff 	.word	0x3fdfffff
 800dd28:	35afe535 	.word	0x35afe535
 800dd2c:	3fe00000 	.word	0x3fe00000
 800dd30:	ffc00000 	.word	0xffc00000
 800dd34:	41dfffff 	.word	0x41dfffff
 800dd38:	94a03595 	.word	0x94a03595
 800dd3c:	3fcfffff 	.word	0x3fcfffff
 800dd40:	3ff00000 	.word	0x3ff00000
 800dd44:	3fe00000 	.word	0x3fe00000
 800dd48:	7ff00000 	.word	0x7ff00000
 800dd4c:	7fe00000 	.word	0x7fe00000
 800dd50:	7c9fffff 	.word	0x7c9fffff
 800dd54:	7fefffff 	.word	0x7fefffff

0800dd58 <strtod>:
 800dd58:	460a      	mov	r2, r1
 800dd5a:	4601      	mov	r1, r0
 800dd5c:	4802      	ldr	r0, [pc, #8]	; (800dd68 <strtod+0x10>)
 800dd5e:	4b03      	ldr	r3, [pc, #12]	; (800dd6c <strtod+0x14>)
 800dd60:	6800      	ldr	r0, [r0, #0]
 800dd62:	f7ff ba09 	b.w	800d178 <_strtod_l>
 800dd66:	bf00      	nop
 800dd68:	200001f4 	.word	0x200001f4
 800dd6c:	2000003c 	.word	0x2000003c

0800dd70 <std>:
 800dd70:	2300      	movs	r3, #0
 800dd72:	b510      	push	{r4, lr}
 800dd74:	4604      	mov	r4, r0
 800dd76:	e9c0 3300 	strd	r3, r3, [r0]
 800dd7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd7e:	6083      	str	r3, [r0, #8]
 800dd80:	8181      	strh	r1, [r0, #12]
 800dd82:	6643      	str	r3, [r0, #100]	; 0x64
 800dd84:	81c2      	strh	r2, [r0, #14]
 800dd86:	6183      	str	r3, [r0, #24]
 800dd88:	4619      	mov	r1, r3
 800dd8a:	2208      	movs	r2, #8
 800dd8c:	305c      	adds	r0, #92	; 0x5c
 800dd8e:	f000 f8f4 	bl	800df7a <memset>
 800dd92:	4b0d      	ldr	r3, [pc, #52]	; (800ddc8 <std+0x58>)
 800dd94:	6263      	str	r3, [r4, #36]	; 0x24
 800dd96:	4b0d      	ldr	r3, [pc, #52]	; (800ddcc <std+0x5c>)
 800dd98:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd9a:	4b0d      	ldr	r3, [pc, #52]	; (800ddd0 <std+0x60>)
 800dd9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd9e:	4b0d      	ldr	r3, [pc, #52]	; (800ddd4 <std+0x64>)
 800dda0:	6323      	str	r3, [r4, #48]	; 0x30
 800dda2:	4b0d      	ldr	r3, [pc, #52]	; (800ddd8 <std+0x68>)
 800dda4:	6224      	str	r4, [r4, #32]
 800dda6:	429c      	cmp	r4, r3
 800dda8:	d006      	beq.n	800ddb8 <std+0x48>
 800ddaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ddae:	4294      	cmp	r4, r2
 800ddb0:	d002      	beq.n	800ddb8 <std+0x48>
 800ddb2:	33d0      	adds	r3, #208	; 0xd0
 800ddb4:	429c      	cmp	r4, r3
 800ddb6:	d105      	bne.n	800ddc4 <std+0x54>
 800ddb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ddbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddc0:	f000 b966 	b.w	800e090 <__retarget_lock_init_recursive>
 800ddc4:	bd10      	pop	{r4, pc}
 800ddc6:	bf00      	nop
 800ddc8:	0800def5 	.word	0x0800def5
 800ddcc:	0800df17 	.word	0x0800df17
 800ddd0:	0800df4f 	.word	0x0800df4f
 800ddd4:	0800df73 	.word	0x0800df73
 800ddd8:	20000d4c 	.word	0x20000d4c

0800dddc <stdio_exit_handler>:
 800dddc:	4a02      	ldr	r2, [pc, #8]	; (800dde8 <stdio_exit_handler+0xc>)
 800ddde:	4903      	ldr	r1, [pc, #12]	; (800ddec <stdio_exit_handler+0x10>)
 800dde0:	4803      	ldr	r0, [pc, #12]	; (800ddf0 <stdio_exit_handler+0x14>)
 800dde2:	f000 b869 	b.w	800deb8 <_fwalk_sglue>
 800dde6:	bf00      	nop
 800dde8:	20000030 	.word	0x20000030
 800ddec:	0800f3f9 	.word	0x0800f3f9
 800ddf0:	200001a8 	.word	0x200001a8

0800ddf4 <cleanup_stdio>:
 800ddf4:	6841      	ldr	r1, [r0, #4]
 800ddf6:	4b0c      	ldr	r3, [pc, #48]	; (800de28 <cleanup_stdio+0x34>)
 800ddf8:	4299      	cmp	r1, r3
 800ddfa:	b510      	push	{r4, lr}
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	d001      	beq.n	800de04 <cleanup_stdio+0x10>
 800de00:	f001 fafa 	bl	800f3f8 <_fflush_r>
 800de04:	68a1      	ldr	r1, [r4, #8]
 800de06:	4b09      	ldr	r3, [pc, #36]	; (800de2c <cleanup_stdio+0x38>)
 800de08:	4299      	cmp	r1, r3
 800de0a:	d002      	beq.n	800de12 <cleanup_stdio+0x1e>
 800de0c:	4620      	mov	r0, r4
 800de0e:	f001 faf3 	bl	800f3f8 <_fflush_r>
 800de12:	68e1      	ldr	r1, [r4, #12]
 800de14:	4b06      	ldr	r3, [pc, #24]	; (800de30 <cleanup_stdio+0x3c>)
 800de16:	4299      	cmp	r1, r3
 800de18:	d004      	beq.n	800de24 <cleanup_stdio+0x30>
 800de1a:	4620      	mov	r0, r4
 800de1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de20:	f001 baea 	b.w	800f3f8 <_fflush_r>
 800de24:	bd10      	pop	{r4, pc}
 800de26:	bf00      	nop
 800de28:	20000d4c 	.word	0x20000d4c
 800de2c:	20000db4 	.word	0x20000db4
 800de30:	20000e1c 	.word	0x20000e1c

0800de34 <global_stdio_init.part.0>:
 800de34:	b510      	push	{r4, lr}
 800de36:	4b0b      	ldr	r3, [pc, #44]	; (800de64 <global_stdio_init.part.0+0x30>)
 800de38:	4c0b      	ldr	r4, [pc, #44]	; (800de68 <global_stdio_init.part.0+0x34>)
 800de3a:	4a0c      	ldr	r2, [pc, #48]	; (800de6c <global_stdio_init.part.0+0x38>)
 800de3c:	601a      	str	r2, [r3, #0]
 800de3e:	4620      	mov	r0, r4
 800de40:	2200      	movs	r2, #0
 800de42:	2104      	movs	r1, #4
 800de44:	f7ff ff94 	bl	800dd70 <std>
 800de48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800de4c:	2201      	movs	r2, #1
 800de4e:	2109      	movs	r1, #9
 800de50:	f7ff ff8e 	bl	800dd70 <std>
 800de54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800de58:	2202      	movs	r2, #2
 800de5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de5e:	2112      	movs	r1, #18
 800de60:	f7ff bf86 	b.w	800dd70 <std>
 800de64:	20000e84 	.word	0x20000e84
 800de68:	20000d4c 	.word	0x20000d4c
 800de6c:	0800dddd 	.word	0x0800dddd

0800de70 <__sfp_lock_acquire>:
 800de70:	4801      	ldr	r0, [pc, #4]	; (800de78 <__sfp_lock_acquire+0x8>)
 800de72:	f000 b90e 	b.w	800e092 <__retarget_lock_acquire_recursive>
 800de76:	bf00      	nop
 800de78:	20000e8d 	.word	0x20000e8d

0800de7c <__sfp_lock_release>:
 800de7c:	4801      	ldr	r0, [pc, #4]	; (800de84 <__sfp_lock_release+0x8>)
 800de7e:	f000 b909 	b.w	800e094 <__retarget_lock_release_recursive>
 800de82:	bf00      	nop
 800de84:	20000e8d 	.word	0x20000e8d

0800de88 <__sinit>:
 800de88:	b510      	push	{r4, lr}
 800de8a:	4604      	mov	r4, r0
 800de8c:	f7ff fff0 	bl	800de70 <__sfp_lock_acquire>
 800de90:	6a23      	ldr	r3, [r4, #32]
 800de92:	b11b      	cbz	r3, 800de9c <__sinit+0x14>
 800de94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de98:	f7ff bff0 	b.w	800de7c <__sfp_lock_release>
 800de9c:	4b04      	ldr	r3, [pc, #16]	; (800deb0 <__sinit+0x28>)
 800de9e:	6223      	str	r3, [r4, #32]
 800dea0:	4b04      	ldr	r3, [pc, #16]	; (800deb4 <__sinit+0x2c>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d1f5      	bne.n	800de94 <__sinit+0xc>
 800dea8:	f7ff ffc4 	bl	800de34 <global_stdio_init.part.0>
 800deac:	e7f2      	b.n	800de94 <__sinit+0xc>
 800deae:	bf00      	nop
 800deb0:	0800ddf5 	.word	0x0800ddf5
 800deb4:	20000e84 	.word	0x20000e84

0800deb8 <_fwalk_sglue>:
 800deb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800debc:	4607      	mov	r7, r0
 800debe:	4688      	mov	r8, r1
 800dec0:	4614      	mov	r4, r2
 800dec2:	2600      	movs	r6, #0
 800dec4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dec8:	f1b9 0901 	subs.w	r9, r9, #1
 800decc:	d505      	bpl.n	800deda <_fwalk_sglue+0x22>
 800dece:	6824      	ldr	r4, [r4, #0]
 800ded0:	2c00      	cmp	r4, #0
 800ded2:	d1f7      	bne.n	800dec4 <_fwalk_sglue+0xc>
 800ded4:	4630      	mov	r0, r6
 800ded6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deda:	89ab      	ldrh	r3, [r5, #12]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d907      	bls.n	800def0 <_fwalk_sglue+0x38>
 800dee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dee4:	3301      	adds	r3, #1
 800dee6:	d003      	beq.n	800def0 <_fwalk_sglue+0x38>
 800dee8:	4629      	mov	r1, r5
 800deea:	4638      	mov	r0, r7
 800deec:	47c0      	blx	r8
 800deee:	4306      	orrs	r6, r0
 800def0:	3568      	adds	r5, #104	; 0x68
 800def2:	e7e9      	b.n	800dec8 <_fwalk_sglue+0x10>

0800def4 <__sread>:
 800def4:	b510      	push	{r4, lr}
 800def6:	460c      	mov	r4, r1
 800def8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800defc:	f000 f87a 	bl	800dff4 <_read_r>
 800df00:	2800      	cmp	r0, #0
 800df02:	bfab      	itete	ge
 800df04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df06:	89a3      	ldrhlt	r3, [r4, #12]
 800df08:	181b      	addge	r3, r3, r0
 800df0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df0e:	bfac      	ite	ge
 800df10:	6563      	strge	r3, [r4, #84]	; 0x54
 800df12:	81a3      	strhlt	r3, [r4, #12]
 800df14:	bd10      	pop	{r4, pc}

0800df16 <__swrite>:
 800df16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df1a:	461f      	mov	r7, r3
 800df1c:	898b      	ldrh	r3, [r1, #12]
 800df1e:	05db      	lsls	r3, r3, #23
 800df20:	4605      	mov	r5, r0
 800df22:	460c      	mov	r4, r1
 800df24:	4616      	mov	r6, r2
 800df26:	d505      	bpl.n	800df34 <__swrite+0x1e>
 800df28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df2c:	2302      	movs	r3, #2
 800df2e:	2200      	movs	r2, #0
 800df30:	f000 f84e 	bl	800dfd0 <_lseek_r>
 800df34:	89a3      	ldrh	r3, [r4, #12]
 800df36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df3e:	81a3      	strh	r3, [r4, #12]
 800df40:	4632      	mov	r2, r6
 800df42:	463b      	mov	r3, r7
 800df44:	4628      	mov	r0, r5
 800df46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df4a:	f000 b865 	b.w	800e018 <_write_r>

0800df4e <__sseek>:
 800df4e:	b510      	push	{r4, lr}
 800df50:	460c      	mov	r4, r1
 800df52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df56:	f000 f83b 	bl	800dfd0 <_lseek_r>
 800df5a:	1c43      	adds	r3, r0, #1
 800df5c:	89a3      	ldrh	r3, [r4, #12]
 800df5e:	bf15      	itete	ne
 800df60:	6560      	strne	r0, [r4, #84]	; 0x54
 800df62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df6a:	81a3      	strheq	r3, [r4, #12]
 800df6c:	bf18      	it	ne
 800df6e:	81a3      	strhne	r3, [r4, #12]
 800df70:	bd10      	pop	{r4, pc}

0800df72 <__sclose>:
 800df72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df76:	f000 b81b 	b.w	800dfb0 <_close_r>

0800df7a <memset>:
 800df7a:	4402      	add	r2, r0
 800df7c:	4603      	mov	r3, r0
 800df7e:	4293      	cmp	r3, r2
 800df80:	d100      	bne.n	800df84 <memset+0xa>
 800df82:	4770      	bx	lr
 800df84:	f803 1b01 	strb.w	r1, [r3], #1
 800df88:	e7f9      	b.n	800df7e <memset+0x4>

0800df8a <strncmp>:
 800df8a:	b510      	push	{r4, lr}
 800df8c:	b16a      	cbz	r2, 800dfaa <strncmp+0x20>
 800df8e:	3901      	subs	r1, #1
 800df90:	1884      	adds	r4, r0, r2
 800df92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df96:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d103      	bne.n	800dfa6 <strncmp+0x1c>
 800df9e:	42a0      	cmp	r0, r4
 800dfa0:	d001      	beq.n	800dfa6 <strncmp+0x1c>
 800dfa2:	2a00      	cmp	r2, #0
 800dfa4:	d1f5      	bne.n	800df92 <strncmp+0x8>
 800dfa6:	1ad0      	subs	r0, r2, r3
 800dfa8:	bd10      	pop	{r4, pc}
 800dfaa:	4610      	mov	r0, r2
 800dfac:	e7fc      	b.n	800dfa8 <strncmp+0x1e>
	...

0800dfb0 <_close_r>:
 800dfb0:	b538      	push	{r3, r4, r5, lr}
 800dfb2:	4d06      	ldr	r5, [pc, #24]	; (800dfcc <_close_r+0x1c>)
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	4608      	mov	r0, r1
 800dfba:	602b      	str	r3, [r5, #0]
 800dfbc:	f7f4 fdbf 	bl	8002b3e <_close>
 800dfc0:	1c43      	adds	r3, r0, #1
 800dfc2:	d102      	bne.n	800dfca <_close_r+0x1a>
 800dfc4:	682b      	ldr	r3, [r5, #0]
 800dfc6:	b103      	cbz	r3, 800dfca <_close_r+0x1a>
 800dfc8:	6023      	str	r3, [r4, #0]
 800dfca:	bd38      	pop	{r3, r4, r5, pc}
 800dfcc:	20000e88 	.word	0x20000e88

0800dfd0 <_lseek_r>:
 800dfd0:	b538      	push	{r3, r4, r5, lr}
 800dfd2:	4d07      	ldr	r5, [pc, #28]	; (800dff0 <_lseek_r+0x20>)
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	4608      	mov	r0, r1
 800dfd8:	4611      	mov	r1, r2
 800dfda:	2200      	movs	r2, #0
 800dfdc:	602a      	str	r2, [r5, #0]
 800dfde:	461a      	mov	r2, r3
 800dfe0:	f7f4 fdd4 	bl	8002b8c <_lseek>
 800dfe4:	1c43      	adds	r3, r0, #1
 800dfe6:	d102      	bne.n	800dfee <_lseek_r+0x1e>
 800dfe8:	682b      	ldr	r3, [r5, #0]
 800dfea:	b103      	cbz	r3, 800dfee <_lseek_r+0x1e>
 800dfec:	6023      	str	r3, [r4, #0]
 800dfee:	bd38      	pop	{r3, r4, r5, pc}
 800dff0:	20000e88 	.word	0x20000e88

0800dff4 <_read_r>:
 800dff4:	b538      	push	{r3, r4, r5, lr}
 800dff6:	4d07      	ldr	r5, [pc, #28]	; (800e014 <_read_r+0x20>)
 800dff8:	4604      	mov	r4, r0
 800dffa:	4608      	mov	r0, r1
 800dffc:	4611      	mov	r1, r2
 800dffe:	2200      	movs	r2, #0
 800e000:	602a      	str	r2, [r5, #0]
 800e002:	461a      	mov	r2, r3
 800e004:	f7f4 fd62 	bl	8002acc <_read>
 800e008:	1c43      	adds	r3, r0, #1
 800e00a:	d102      	bne.n	800e012 <_read_r+0x1e>
 800e00c:	682b      	ldr	r3, [r5, #0]
 800e00e:	b103      	cbz	r3, 800e012 <_read_r+0x1e>
 800e010:	6023      	str	r3, [r4, #0]
 800e012:	bd38      	pop	{r3, r4, r5, pc}
 800e014:	20000e88 	.word	0x20000e88

0800e018 <_write_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4d07      	ldr	r5, [pc, #28]	; (800e038 <_write_r+0x20>)
 800e01c:	4604      	mov	r4, r0
 800e01e:	4608      	mov	r0, r1
 800e020:	4611      	mov	r1, r2
 800e022:	2200      	movs	r2, #0
 800e024:	602a      	str	r2, [r5, #0]
 800e026:	461a      	mov	r2, r3
 800e028:	f7f4 fd6d 	bl	8002b06 <_write>
 800e02c:	1c43      	adds	r3, r0, #1
 800e02e:	d102      	bne.n	800e036 <_write_r+0x1e>
 800e030:	682b      	ldr	r3, [r5, #0]
 800e032:	b103      	cbz	r3, 800e036 <_write_r+0x1e>
 800e034:	6023      	str	r3, [r4, #0]
 800e036:	bd38      	pop	{r3, r4, r5, pc}
 800e038:	20000e88 	.word	0x20000e88

0800e03c <__errno>:
 800e03c:	4b01      	ldr	r3, [pc, #4]	; (800e044 <__errno+0x8>)
 800e03e:	6818      	ldr	r0, [r3, #0]
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	200001f4 	.word	0x200001f4

0800e048 <__libc_init_array>:
 800e048:	b570      	push	{r4, r5, r6, lr}
 800e04a:	4d0d      	ldr	r5, [pc, #52]	; (800e080 <__libc_init_array+0x38>)
 800e04c:	4c0d      	ldr	r4, [pc, #52]	; (800e084 <__libc_init_array+0x3c>)
 800e04e:	1b64      	subs	r4, r4, r5
 800e050:	10a4      	asrs	r4, r4, #2
 800e052:	2600      	movs	r6, #0
 800e054:	42a6      	cmp	r6, r4
 800e056:	d109      	bne.n	800e06c <__libc_init_array+0x24>
 800e058:	4d0b      	ldr	r5, [pc, #44]	; (800e088 <__libc_init_array+0x40>)
 800e05a:	4c0c      	ldr	r4, [pc, #48]	; (800e08c <__libc_init_array+0x44>)
 800e05c:	f001 fe8a 	bl	800fd74 <_init>
 800e060:	1b64      	subs	r4, r4, r5
 800e062:	10a4      	asrs	r4, r4, #2
 800e064:	2600      	movs	r6, #0
 800e066:	42a6      	cmp	r6, r4
 800e068:	d105      	bne.n	800e076 <__libc_init_array+0x2e>
 800e06a:	bd70      	pop	{r4, r5, r6, pc}
 800e06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e070:	4798      	blx	r3
 800e072:	3601      	adds	r6, #1
 800e074:	e7ee      	b.n	800e054 <__libc_init_array+0xc>
 800e076:	f855 3b04 	ldr.w	r3, [r5], #4
 800e07a:	4798      	blx	r3
 800e07c:	3601      	adds	r6, #1
 800e07e:	e7f2      	b.n	800e066 <__libc_init_array+0x1e>
 800e080:	0801066c 	.word	0x0801066c
 800e084:	0801066c 	.word	0x0801066c
 800e088:	0801066c 	.word	0x0801066c
 800e08c:	08010674 	.word	0x08010674

0800e090 <__retarget_lock_init_recursive>:
 800e090:	4770      	bx	lr

0800e092 <__retarget_lock_acquire_recursive>:
 800e092:	4770      	bx	lr

0800e094 <__retarget_lock_release_recursive>:
 800e094:	4770      	bx	lr

0800e096 <memcpy>:
 800e096:	440a      	add	r2, r1
 800e098:	4291      	cmp	r1, r2
 800e09a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e09e:	d100      	bne.n	800e0a2 <memcpy+0xc>
 800e0a0:	4770      	bx	lr
 800e0a2:	b510      	push	{r4, lr}
 800e0a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0ac:	4291      	cmp	r1, r2
 800e0ae:	d1f9      	bne.n	800e0a4 <memcpy+0xe>
 800e0b0:	bd10      	pop	{r4, pc}
	...

0800e0b4 <_free_r>:
 800e0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0b6:	2900      	cmp	r1, #0
 800e0b8:	d044      	beq.n	800e144 <_free_r+0x90>
 800e0ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0be:	9001      	str	r0, [sp, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	f1a1 0404 	sub.w	r4, r1, #4
 800e0c6:	bfb8      	it	lt
 800e0c8:	18e4      	addlt	r4, r4, r3
 800e0ca:	f000 fc49 	bl	800e960 <__malloc_lock>
 800e0ce:	4a1e      	ldr	r2, [pc, #120]	; (800e148 <_free_r+0x94>)
 800e0d0:	9801      	ldr	r0, [sp, #4]
 800e0d2:	6813      	ldr	r3, [r2, #0]
 800e0d4:	b933      	cbnz	r3, 800e0e4 <_free_r+0x30>
 800e0d6:	6063      	str	r3, [r4, #4]
 800e0d8:	6014      	str	r4, [r2, #0]
 800e0da:	b003      	add	sp, #12
 800e0dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0e0:	f000 bc44 	b.w	800e96c <__malloc_unlock>
 800e0e4:	42a3      	cmp	r3, r4
 800e0e6:	d908      	bls.n	800e0fa <_free_r+0x46>
 800e0e8:	6825      	ldr	r5, [r4, #0]
 800e0ea:	1961      	adds	r1, r4, r5
 800e0ec:	428b      	cmp	r3, r1
 800e0ee:	bf01      	itttt	eq
 800e0f0:	6819      	ldreq	r1, [r3, #0]
 800e0f2:	685b      	ldreq	r3, [r3, #4]
 800e0f4:	1949      	addeq	r1, r1, r5
 800e0f6:	6021      	streq	r1, [r4, #0]
 800e0f8:	e7ed      	b.n	800e0d6 <_free_r+0x22>
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	b10b      	cbz	r3, 800e104 <_free_r+0x50>
 800e100:	42a3      	cmp	r3, r4
 800e102:	d9fa      	bls.n	800e0fa <_free_r+0x46>
 800e104:	6811      	ldr	r1, [r2, #0]
 800e106:	1855      	adds	r5, r2, r1
 800e108:	42a5      	cmp	r5, r4
 800e10a:	d10b      	bne.n	800e124 <_free_r+0x70>
 800e10c:	6824      	ldr	r4, [r4, #0]
 800e10e:	4421      	add	r1, r4
 800e110:	1854      	adds	r4, r2, r1
 800e112:	42a3      	cmp	r3, r4
 800e114:	6011      	str	r1, [r2, #0]
 800e116:	d1e0      	bne.n	800e0da <_free_r+0x26>
 800e118:	681c      	ldr	r4, [r3, #0]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	6053      	str	r3, [r2, #4]
 800e11e:	440c      	add	r4, r1
 800e120:	6014      	str	r4, [r2, #0]
 800e122:	e7da      	b.n	800e0da <_free_r+0x26>
 800e124:	d902      	bls.n	800e12c <_free_r+0x78>
 800e126:	230c      	movs	r3, #12
 800e128:	6003      	str	r3, [r0, #0]
 800e12a:	e7d6      	b.n	800e0da <_free_r+0x26>
 800e12c:	6825      	ldr	r5, [r4, #0]
 800e12e:	1961      	adds	r1, r4, r5
 800e130:	428b      	cmp	r3, r1
 800e132:	bf04      	itt	eq
 800e134:	6819      	ldreq	r1, [r3, #0]
 800e136:	685b      	ldreq	r3, [r3, #4]
 800e138:	6063      	str	r3, [r4, #4]
 800e13a:	bf04      	itt	eq
 800e13c:	1949      	addeq	r1, r1, r5
 800e13e:	6021      	streq	r1, [r4, #0]
 800e140:	6054      	str	r4, [r2, #4]
 800e142:	e7ca      	b.n	800e0da <_free_r+0x26>
 800e144:	b003      	add	sp, #12
 800e146:	bd30      	pop	{r4, r5, pc}
 800e148:	20000e90 	.word	0x20000e90

0800e14c <rshift>:
 800e14c:	6903      	ldr	r3, [r0, #16]
 800e14e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e152:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e156:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e15a:	f100 0414 	add.w	r4, r0, #20
 800e15e:	dd45      	ble.n	800e1ec <rshift+0xa0>
 800e160:	f011 011f 	ands.w	r1, r1, #31
 800e164:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e168:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e16c:	d10c      	bne.n	800e188 <rshift+0x3c>
 800e16e:	f100 0710 	add.w	r7, r0, #16
 800e172:	4629      	mov	r1, r5
 800e174:	42b1      	cmp	r1, r6
 800e176:	d334      	bcc.n	800e1e2 <rshift+0x96>
 800e178:	1a9b      	subs	r3, r3, r2
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	1eea      	subs	r2, r5, #3
 800e17e:	4296      	cmp	r6, r2
 800e180:	bf38      	it	cc
 800e182:	2300      	movcc	r3, #0
 800e184:	4423      	add	r3, r4
 800e186:	e015      	b.n	800e1b4 <rshift+0x68>
 800e188:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e18c:	f1c1 0820 	rsb	r8, r1, #32
 800e190:	40cf      	lsrs	r7, r1
 800e192:	f105 0e04 	add.w	lr, r5, #4
 800e196:	46a1      	mov	r9, r4
 800e198:	4576      	cmp	r6, lr
 800e19a:	46f4      	mov	ip, lr
 800e19c:	d815      	bhi.n	800e1ca <rshift+0x7e>
 800e19e:	1a9a      	subs	r2, r3, r2
 800e1a0:	0092      	lsls	r2, r2, #2
 800e1a2:	3a04      	subs	r2, #4
 800e1a4:	3501      	adds	r5, #1
 800e1a6:	42ae      	cmp	r6, r5
 800e1a8:	bf38      	it	cc
 800e1aa:	2200      	movcc	r2, #0
 800e1ac:	18a3      	adds	r3, r4, r2
 800e1ae:	50a7      	str	r7, [r4, r2]
 800e1b0:	b107      	cbz	r7, 800e1b4 <rshift+0x68>
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	1b1a      	subs	r2, r3, r4
 800e1b6:	42a3      	cmp	r3, r4
 800e1b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e1bc:	bf08      	it	eq
 800e1be:	2300      	moveq	r3, #0
 800e1c0:	6102      	str	r2, [r0, #16]
 800e1c2:	bf08      	it	eq
 800e1c4:	6143      	streq	r3, [r0, #20]
 800e1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ca:	f8dc c000 	ldr.w	ip, [ip]
 800e1ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800e1d2:	ea4c 0707 	orr.w	r7, ip, r7
 800e1d6:	f849 7b04 	str.w	r7, [r9], #4
 800e1da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e1de:	40cf      	lsrs	r7, r1
 800e1e0:	e7da      	b.n	800e198 <rshift+0x4c>
 800e1e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e1e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e1ea:	e7c3      	b.n	800e174 <rshift+0x28>
 800e1ec:	4623      	mov	r3, r4
 800e1ee:	e7e1      	b.n	800e1b4 <rshift+0x68>

0800e1f0 <__hexdig_fun>:
 800e1f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e1f4:	2b09      	cmp	r3, #9
 800e1f6:	d802      	bhi.n	800e1fe <__hexdig_fun+0xe>
 800e1f8:	3820      	subs	r0, #32
 800e1fa:	b2c0      	uxtb	r0, r0
 800e1fc:	4770      	bx	lr
 800e1fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e202:	2b05      	cmp	r3, #5
 800e204:	d801      	bhi.n	800e20a <__hexdig_fun+0x1a>
 800e206:	3847      	subs	r0, #71	; 0x47
 800e208:	e7f7      	b.n	800e1fa <__hexdig_fun+0xa>
 800e20a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e20e:	2b05      	cmp	r3, #5
 800e210:	d801      	bhi.n	800e216 <__hexdig_fun+0x26>
 800e212:	3827      	subs	r0, #39	; 0x27
 800e214:	e7f1      	b.n	800e1fa <__hexdig_fun+0xa>
 800e216:	2000      	movs	r0, #0
 800e218:	4770      	bx	lr
	...

0800e21c <__gethex>:
 800e21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e220:	4617      	mov	r7, r2
 800e222:	680a      	ldr	r2, [r1, #0]
 800e224:	b085      	sub	sp, #20
 800e226:	f102 0b02 	add.w	fp, r2, #2
 800e22a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e22e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e232:	4681      	mov	r9, r0
 800e234:	468a      	mov	sl, r1
 800e236:	9302      	str	r3, [sp, #8]
 800e238:	32fe      	adds	r2, #254	; 0xfe
 800e23a:	eb02 030b 	add.w	r3, r2, fp
 800e23e:	46d8      	mov	r8, fp
 800e240:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e244:	9301      	str	r3, [sp, #4]
 800e246:	2830      	cmp	r0, #48	; 0x30
 800e248:	d0f7      	beq.n	800e23a <__gethex+0x1e>
 800e24a:	f7ff ffd1 	bl	800e1f0 <__hexdig_fun>
 800e24e:	4604      	mov	r4, r0
 800e250:	2800      	cmp	r0, #0
 800e252:	d138      	bne.n	800e2c6 <__gethex+0xaa>
 800e254:	49a7      	ldr	r1, [pc, #668]	; (800e4f4 <__gethex+0x2d8>)
 800e256:	2201      	movs	r2, #1
 800e258:	4640      	mov	r0, r8
 800e25a:	f7ff fe96 	bl	800df8a <strncmp>
 800e25e:	4606      	mov	r6, r0
 800e260:	2800      	cmp	r0, #0
 800e262:	d169      	bne.n	800e338 <__gethex+0x11c>
 800e264:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e268:	465d      	mov	r5, fp
 800e26a:	f7ff ffc1 	bl	800e1f0 <__hexdig_fun>
 800e26e:	2800      	cmp	r0, #0
 800e270:	d064      	beq.n	800e33c <__gethex+0x120>
 800e272:	465a      	mov	r2, fp
 800e274:	7810      	ldrb	r0, [r2, #0]
 800e276:	2830      	cmp	r0, #48	; 0x30
 800e278:	4690      	mov	r8, r2
 800e27a:	f102 0201 	add.w	r2, r2, #1
 800e27e:	d0f9      	beq.n	800e274 <__gethex+0x58>
 800e280:	f7ff ffb6 	bl	800e1f0 <__hexdig_fun>
 800e284:	2301      	movs	r3, #1
 800e286:	fab0 f480 	clz	r4, r0
 800e28a:	0964      	lsrs	r4, r4, #5
 800e28c:	465e      	mov	r6, fp
 800e28e:	9301      	str	r3, [sp, #4]
 800e290:	4642      	mov	r2, r8
 800e292:	4615      	mov	r5, r2
 800e294:	3201      	adds	r2, #1
 800e296:	7828      	ldrb	r0, [r5, #0]
 800e298:	f7ff ffaa 	bl	800e1f0 <__hexdig_fun>
 800e29c:	2800      	cmp	r0, #0
 800e29e:	d1f8      	bne.n	800e292 <__gethex+0x76>
 800e2a0:	4994      	ldr	r1, [pc, #592]	; (800e4f4 <__gethex+0x2d8>)
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	f7ff fe70 	bl	800df8a <strncmp>
 800e2aa:	b978      	cbnz	r0, 800e2cc <__gethex+0xb0>
 800e2ac:	b946      	cbnz	r6, 800e2c0 <__gethex+0xa4>
 800e2ae:	1c6e      	adds	r6, r5, #1
 800e2b0:	4632      	mov	r2, r6
 800e2b2:	4615      	mov	r5, r2
 800e2b4:	3201      	adds	r2, #1
 800e2b6:	7828      	ldrb	r0, [r5, #0]
 800e2b8:	f7ff ff9a 	bl	800e1f0 <__hexdig_fun>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d1f8      	bne.n	800e2b2 <__gethex+0x96>
 800e2c0:	1b73      	subs	r3, r6, r5
 800e2c2:	009e      	lsls	r6, r3, #2
 800e2c4:	e004      	b.n	800e2d0 <__gethex+0xb4>
 800e2c6:	2400      	movs	r4, #0
 800e2c8:	4626      	mov	r6, r4
 800e2ca:	e7e1      	b.n	800e290 <__gethex+0x74>
 800e2cc:	2e00      	cmp	r6, #0
 800e2ce:	d1f7      	bne.n	800e2c0 <__gethex+0xa4>
 800e2d0:	782b      	ldrb	r3, [r5, #0]
 800e2d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e2d6:	2b50      	cmp	r3, #80	; 0x50
 800e2d8:	d13d      	bne.n	800e356 <__gethex+0x13a>
 800e2da:	786b      	ldrb	r3, [r5, #1]
 800e2dc:	2b2b      	cmp	r3, #43	; 0x2b
 800e2de:	d02f      	beq.n	800e340 <__gethex+0x124>
 800e2e0:	2b2d      	cmp	r3, #45	; 0x2d
 800e2e2:	d031      	beq.n	800e348 <__gethex+0x12c>
 800e2e4:	1c69      	adds	r1, r5, #1
 800e2e6:	f04f 0b00 	mov.w	fp, #0
 800e2ea:	7808      	ldrb	r0, [r1, #0]
 800e2ec:	f7ff ff80 	bl	800e1f0 <__hexdig_fun>
 800e2f0:	1e42      	subs	r2, r0, #1
 800e2f2:	b2d2      	uxtb	r2, r2
 800e2f4:	2a18      	cmp	r2, #24
 800e2f6:	d82e      	bhi.n	800e356 <__gethex+0x13a>
 800e2f8:	f1a0 0210 	sub.w	r2, r0, #16
 800e2fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e300:	f7ff ff76 	bl	800e1f0 <__hexdig_fun>
 800e304:	f100 3cff 	add.w	ip, r0, #4294967295
 800e308:	fa5f fc8c 	uxtb.w	ip, ip
 800e30c:	f1bc 0f18 	cmp.w	ip, #24
 800e310:	d91d      	bls.n	800e34e <__gethex+0x132>
 800e312:	f1bb 0f00 	cmp.w	fp, #0
 800e316:	d000      	beq.n	800e31a <__gethex+0xfe>
 800e318:	4252      	negs	r2, r2
 800e31a:	4416      	add	r6, r2
 800e31c:	f8ca 1000 	str.w	r1, [sl]
 800e320:	b1dc      	cbz	r4, 800e35a <__gethex+0x13e>
 800e322:	9b01      	ldr	r3, [sp, #4]
 800e324:	2b00      	cmp	r3, #0
 800e326:	bf14      	ite	ne
 800e328:	f04f 0800 	movne.w	r8, #0
 800e32c:	f04f 0806 	moveq.w	r8, #6
 800e330:	4640      	mov	r0, r8
 800e332:	b005      	add	sp, #20
 800e334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e338:	4645      	mov	r5, r8
 800e33a:	4626      	mov	r6, r4
 800e33c:	2401      	movs	r4, #1
 800e33e:	e7c7      	b.n	800e2d0 <__gethex+0xb4>
 800e340:	f04f 0b00 	mov.w	fp, #0
 800e344:	1ca9      	adds	r1, r5, #2
 800e346:	e7d0      	b.n	800e2ea <__gethex+0xce>
 800e348:	f04f 0b01 	mov.w	fp, #1
 800e34c:	e7fa      	b.n	800e344 <__gethex+0x128>
 800e34e:	230a      	movs	r3, #10
 800e350:	fb03 0002 	mla	r0, r3, r2, r0
 800e354:	e7d0      	b.n	800e2f8 <__gethex+0xdc>
 800e356:	4629      	mov	r1, r5
 800e358:	e7e0      	b.n	800e31c <__gethex+0x100>
 800e35a:	eba5 0308 	sub.w	r3, r5, r8
 800e35e:	3b01      	subs	r3, #1
 800e360:	4621      	mov	r1, r4
 800e362:	2b07      	cmp	r3, #7
 800e364:	dc0a      	bgt.n	800e37c <__gethex+0x160>
 800e366:	4648      	mov	r0, r9
 800e368:	f000 fb06 	bl	800e978 <_Balloc>
 800e36c:	4604      	mov	r4, r0
 800e36e:	b940      	cbnz	r0, 800e382 <__gethex+0x166>
 800e370:	4b61      	ldr	r3, [pc, #388]	; (800e4f8 <__gethex+0x2dc>)
 800e372:	4602      	mov	r2, r0
 800e374:	21e4      	movs	r1, #228	; 0xe4
 800e376:	4861      	ldr	r0, [pc, #388]	; (800e4fc <__gethex+0x2e0>)
 800e378:	f001 f876 	bl	800f468 <__assert_func>
 800e37c:	3101      	adds	r1, #1
 800e37e:	105b      	asrs	r3, r3, #1
 800e380:	e7ef      	b.n	800e362 <__gethex+0x146>
 800e382:	f100 0a14 	add.w	sl, r0, #20
 800e386:	2300      	movs	r3, #0
 800e388:	495a      	ldr	r1, [pc, #360]	; (800e4f4 <__gethex+0x2d8>)
 800e38a:	f8cd a004 	str.w	sl, [sp, #4]
 800e38e:	469b      	mov	fp, r3
 800e390:	45a8      	cmp	r8, r5
 800e392:	d342      	bcc.n	800e41a <__gethex+0x1fe>
 800e394:	9801      	ldr	r0, [sp, #4]
 800e396:	f840 bb04 	str.w	fp, [r0], #4
 800e39a:	eba0 000a 	sub.w	r0, r0, sl
 800e39e:	1080      	asrs	r0, r0, #2
 800e3a0:	6120      	str	r0, [r4, #16]
 800e3a2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800e3a6:	4658      	mov	r0, fp
 800e3a8:	f000 fbd8 	bl	800eb5c <__hi0bits>
 800e3ac:	683d      	ldr	r5, [r7, #0]
 800e3ae:	eba8 0000 	sub.w	r0, r8, r0
 800e3b2:	42a8      	cmp	r0, r5
 800e3b4:	dd59      	ble.n	800e46a <__gethex+0x24e>
 800e3b6:	eba0 0805 	sub.w	r8, r0, r5
 800e3ba:	4641      	mov	r1, r8
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f000 ff67 	bl	800f290 <__any_on>
 800e3c2:	4683      	mov	fp, r0
 800e3c4:	b1b8      	cbz	r0, 800e3f6 <__gethex+0x1da>
 800e3c6:	f108 33ff 	add.w	r3, r8, #4294967295
 800e3ca:	1159      	asrs	r1, r3, #5
 800e3cc:	f003 021f 	and.w	r2, r3, #31
 800e3d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e3d4:	f04f 0b01 	mov.w	fp, #1
 800e3d8:	fa0b f202 	lsl.w	r2, fp, r2
 800e3dc:	420a      	tst	r2, r1
 800e3de:	d00a      	beq.n	800e3f6 <__gethex+0x1da>
 800e3e0:	455b      	cmp	r3, fp
 800e3e2:	dd06      	ble.n	800e3f2 <__gethex+0x1d6>
 800e3e4:	f1a8 0102 	sub.w	r1, r8, #2
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	f000 ff51 	bl	800f290 <__any_on>
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	d138      	bne.n	800e464 <__gethex+0x248>
 800e3f2:	f04f 0b02 	mov.w	fp, #2
 800e3f6:	4641      	mov	r1, r8
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f7ff fea7 	bl	800e14c <rshift>
 800e3fe:	4446      	add	r6, r8
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	42b3      	cmp	r3, r6
 800e404:	da41      	bge.n	800e48a <__gethex+0x26e>
 800e406:	4621      	mov	r1, r4
 800e408:	4648      	mov	r0, r9
 800e40a:	f000 faf5 	bl	800e9f8 <_Bfree>
 800e40e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e410:	2300      	movs	r3, #0
 800e412:	6013      	str	r3, [r2, #0]
 800e414:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e418:	e78a      	b.n	800e330 <__gethex+0x114>
 800e41a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e41e:	2a2e      	cmp	r2, #46	; 0x2e
 800e420:	d014      	beq.n	800e44c <__gethex+0x230>
 800e422:	2b20      	cmp	r3, #32
 800e424:	d106      	bne.n	800e434 <__gethex+0x218>
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	f843 bb04 	str.w	fp, [r3], #4
 800e42c:	f04f 0b00 	mov.w	fp, #0
 800e430:	9301      	str	r3, [sp, #4]
 800e432:	465b      	mov	r3, fp
 800e434:	7828      	ldrb	r0, [r5, #0]
 800e436:	9303      	str	r3, [sp, #12]
 800e438:	f7ff feda 	bl	800e1f0 <__hexdig_fun>
 800e43c:	9b03      	ldr	r3, [sp, #12]
 800e43e:	f000 000f 	and.w	r0, r0, #15
 800e442:	4098      	lsls	r0, r3
 800e444:	ea4b 0b00 	orr.w	fp, fp, r0
 800e448:	3304      	adds	r3, #4
 800e44a:	e7a1      	b.n	800e390 <__gethex+0x174>
 800e44c:	45a8      	cmp	r8, r5
 800e44e:	d8e8      	bhi.n	800e422 <__gethex+0x206>
 800e450:	2201      	movs	r2, #1
 800e452:	4628      	mov	r0, r5
 800e454:	9303      	str	r3, [sp, #12]
 800e456:	f7ff fd98 	bl	800df8a <strncmp>
 800e45a:	4926      	ldr	r1, [pc, #152]	; (800e4f4 <__gethex+0x2d8>)
 800e45c:	9b03      	ldr	r3, [sp, #12]
 800e45e:	2800      	cmp	r0, #0
 800e460:	d1df      	bne.n	800e422 <__gethex+0x206>
 800e462:	e795      	b.n	800e390 <__gethex+0x174>
 800e464:	f04f 0b03 	mov.w	fp, #3
 800e468:	e7c5      	b.n	800e3f6 <__gethex+0x1da>
 800e46a:	da0b      	bge.n	800e484 <__gethex+0x268>
 800e46c:	eba5 0800 	sub.w	r8, r5, r0
 800e470:	4621      	mov	r1, r4
 800e472:	4642      	mov	r2, r8
 800e474:	4648      	mov	r0, r9
 800e476:	f000 fcd9 	bl	800ee2c <__lshift>
 800e47a:	eba6 0608 	sub.w	r6, r6, r8
 800e47e:	4604      	mov	r4, r0
 800e480:	f100 0a14 	add.w	sl, r0, #20
 800e484:	f04f 0b00 	mov.w	fp, #0
 800e488:	e7ba      	b.n	800e400 <__gethex+0x1e4>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	42b3      	cmp	r3, r6
 800e48e:	dd73      	ble.n	800e578 <__gethex+0x35c>
 800e490:	1b9e      	subs	r6, r3, r6
 800e492:	42b5      	cmp	r5, r6
 800e494:	dc34      	bgt.n	800e500 <__gethex+0x2e4>
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2b02      	cmp	r3, #2
 800e49a:	d023      	beq.n	800e4e4 <__gethex+0x2c8>
 800e49c:	2b03      	cmp	r3, #3
 800e49e:	d025      	beq.n	800e4ec <__gethex+0x2d0>
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d115      	bne.n	800e4d0 <__gethex+0x2b4>
 800e4a4:	42b5      	cmp	r5, r6
 800e4a6:	d113      	bne.n	800e4d0 <__gethex+0x2b4>
 800e4a8:	2d01      	cmp	r5, #1
 800e4aa:	d10b      	bne.n	800e4c4 <__gethex+0x2a8>
 800e4ac:	9a02      	ldr	r2, [sp, #8]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6013      	str	r3, [r2, #0]
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	6123      	str	r3, [r4, #16]
 800e4b6:	f8ca 3000 	str.w	r3, [sl]
 800e4ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4bc:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e4c0:	601c      	str	r4, [r3, #0]
 800e4c2:	e735      	b.n	800e330 <__gethex+0x114>
 800e4c4:	1e69      	subs	r1, r5, #1
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	f000 fee2 	bl	800f290 <__any_on>
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d1ed      	bne.n	800e4ac <__gethex+0x290>
 800e4d0:	4621      	mov	r1, r4
 800e4d2:	4648      	mov	r0, r9
 800e4d4:	f000 fa90 	bl	800e9f8 <_Bfree>
 800e4d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4da:	2300      	movs	r3, #0
 800e4dc:	6013      	str	r3, [r2, #0]
 800e4de:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e4e2:	e725      	b.n	800e330 <__gethex+0x114>
 800e4e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d1f2      	bne.n	800e4d0 <__gethex+0x2b4>
 800e4ea:	e7df      	b.n	800e4ac <__gethex+0x290>
 800e4ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1dc      	bne.n	800e4ac <__gethex+0x290>
 800e4f2:	e7ed      	b.n	800e4d0 <__gethex+0x2b4>
 800e4f4:	080102a8 	.word	0x080102a8
 800e4f8:	08010310 	.word	0x08010310
 800e4fc:	08010321 	.word	0x08010321
 800e500:	f106 38ff 	add.w	r8, r6, #4294967295
 800e504:	f1bb 0f00 	cmp.w	fp, #0
 800e508:	d133      	bne.n	800e572 <__gethex+0x356>
 800e50a:	f1b8 0f00 	cmp.w	r8, #0
 800e50e:	d004      	beq.n	800e51a <__gethex+0x2fe>
 800e510:	4641      	mov	r1, r8
 800e512:	4620      	mov	r0, r4
 800e514:	f000 febc 	bl	800f290 <__any_on>
 800e518:	4683      	mov	fp, r0
 800e51a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e51e:	2301      	movs	r3, #1
 800e520:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e524:	f008 081f 	and.w	r8, r8, #31
 800e528:	fa03 f308 	lsl.w	r3, r3, r8
 800e52c:	4213      	tst	r3, r2
 800e52e:	4631      	mov	r1, r6
 800e530:	4620      	mov	r0, r4
 800e532:	bf18      	it	ne
 800e534:	f04b 0b02 	orrne.w	fp, fp, #2
 800e538:	1bad      	subs	r5, r5, r6
 800e53a:	f7ff fe07 	bl	800e14c <rshift>
 800e53e:	687e      	ldr	r6, [r7, #4]
 800e540:	f04f 0802 	mov.w	r8, #2
 800e544:	f1bb 0f00 	cmp.w	fp, #0
 800e548:	d04a      	beq.n	800e5e0 <__gethex+0x3c4>
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2b02      	cmp	r3, #2
 800e54e:	d016      	beq.n	800e57e <__gethex+0x362>
 800e550:	2b03      	cmp	r3, #3
 800e552:	d018      	beq.n	800e586 <__gethex+0x36a>
 800e554:	2b01      	cmp	r3, #1
 800e556:	d109      	bne.n	800e56c <__gethex+0x350>
 800e558:	f01b 0f02 	tst.w	fp, #2
 800e55c:	d006      	beq.n	800e56c <__gethex+0x350>
 800e55e:	f8da 3000 	ldr.w	r3, [sl]
 800e562:	ea4b 0b03 	orr.w	fp, fp, r3
 800e566:	f01b 0f01 	tst.w	fp, #1
 800e56a:	d10f      	bne.n	800e58c <__gethex+0x370>
 800e56c:	f048 0810 	orr.w	r8, r8, #16
 800e570:	e036      	b.n	800e5e0 <__gethex+0x3c4>
 800e572:	f04f 0b01 	mov.w	fp, #1
 800e576:	e7d0      	b.n	800e51a <__gethex+0x2fe>
 800e578:	f04f 0801 	mov.w	r8, #1
 800e57c:	e7e2      	b.n	800e544 <__gethex+0x328>
 800e57e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e580:	f1c3 0301 	rsb	r3, r3, #1
 800e584:	930f      	str	r3, [sp, #60]	; 0x3c
 800e586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d0ef      	beq.n	800e56c <__gethex+0x350>
 800e58c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e590:	f104 0214 	add.w	r2, r4, #20
 800e594:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e598:	9301      	str	r3, [sp, #4]
 800e59a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e59e:	2300      	movs	r3, #0
 800e5a0:	4694      	mov	ip, r2
 800e5a2:	f852 1b04 	ldr.w	r1, [r2], #4
 800e5a6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e5aa:	d01e      	beq.n	800e5ea <__gethex+0x3ce>
 800e5ac:	3101      	adds	r1, #1
 800e5ae:	f8cc 1000 	str.w	r1, [ip]
 800e5b2:	f1b8 0f02 	cmp.w	r8, #2
 800e5b6:	f104 0214 	add.w	r2, r4, #20
 800e5ba:	d13d      	bne.n	800e638 <__gethex+0x41c>
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	3b01      	subs	r3, #1
 800e5c0:	42ab      	cmp	r3, r5
 800e5c2:	d10b      	bne.n	800e5dc <__gethex+0x3c0>
 800e5c4:	1169      	asrs	r1, r5, #5
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	f005 051f 	and.w	r5, r5, #31
 800e5cc:	fa03 f505 	lsl.w	r5, r3, r5
 800e5d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5d4:	421d      	tst	r5, r3
 800e5d6:	bf18      	it	ne
 800e5d8:	f04f 0801 	movne.w	r8, #1
 800e5dc:	f048 0820 	orr.w	r8, r8, #32
 800e5e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5e2:	601c      	str	r4, [r3, #0]
 800e5e4:	9b02      	ldr	r3, [sp, #8]
 800e5e6:	601e      	str	r6, [r3, #0]
 800e5e8:	e6a2      	b.n	800e330 <__gethex+0x114>
 800e5ea:	4290      	cmp	r0, r2
 800e5ec:	f842 3c04 	str.w	r3, [r2, #-4]
 800e5f0:	d8d6      	bhi.n	800e5a0 <__gethex+0x384>
 800e5f2:	68a2      	ldr	r2, [r4, #8]
 800e5f4:	4593      	cmp	fp, r2
 800e5f6:	db17      	blt.n	800e628 <__gethex+0x40c>
 800e5f8:	6861      	ldr	r1, [r4, #4]
 800e5fa:	4648      	mov	r0, r9
 800e5fc:	3101      	adds	r1, #1
 800e5fe:	f000 f9bb 	bl	800e978 <_Balloc>
 800e602:	4682      	mov	sl, r0
 800e604:	b918      	cbnz	r0, 800e60e <__gethex+0x3f2>
 800e606:	4b1b      	ldr	r3, [pc, #108]	; (800e674 <__gethex+0x458>)
 800e608:	4602      	mov	r2, r0
 800e60a:	2184      	movs	r1, #132	; 0x84
 800e60c:	e6b3      	b.n	800e376 <__gethex+0x15a>
 800e60e:	6922      	ldr	r2, [r4, #16]
 800e610:	3202      	adds	r2, #2
 800e612:	f104 010c 	add.w	r1, r4, #12
 800e616:	0092      	lsls	r2, r2, #2
 800e618:	300c      	adds	r0, #12
 800e61a:	f7ff fd3c 	bl	800e096 <memcpy>
 800e61e:	4621      	mov	r1, r4
 800e620:	4648      	mov	r0, r9
 800e622:	f000 f9e9 	bl	800e9f8 <_Bfree>
 800e626:	4654      	mov	r4, sl
 800e628:	6922      	ldr	r2, [r4, #16]
 800e62a:	1c51      	adds	r1, r2, #1
 800e62c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e630:	6121      	str	r1, [r4, #16]
 800e632:	2101      	movs	r1, #1
 800e634:	6151      	str	r1, [r2, #20]
 800e636:	e7bc      	b.n	800e5b2 <__gethex+0x396>
 800e638:	6921      	ldr	r1, [r4, #16]
 800e63a:	4559      	cmp	r1, fp
 800e63c:	dd0b      	ble.n	800e656 <__gethex+0x43a>
 800e63e:	2101      	movs	r1, #1
 800e640:	4620      	mov	r0, r4
 800e642:	f7ff fd83 	bl	800e14c <rshift>
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	3601      	adds	r6, #1
 800e64a:	42b3      	cmp	r3, r6
 800e64c:	f6ff aedb 	blt.w	800e406 <__gethex+0x1ea>
 800e650:	f04f 0801 	mov.w	r8, #1
 800e654:	e7c2      	b.n	800e5dc <__gethex+0x3c0>
 800e656:	f015 051f 	ands.w	r5, r5, #31
 800e65a:	d0f9      	beq.n	800e650 <__gethex+0x434>
 800e65c:	9b01      	ldr	r3, [sp, #4]
 800e65e:	441a      	add	r2, r3
 800e660:	f1c5 0520 	rsb	r5, r5, #32
 800e664:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e668:	f000 fa78 	bl	800eb5c <__hi0bits>
 800e66c:	42a8      	cmp	r0, r5
 800e66e:	dbe6      	blt.n	800e63e <__gethex+0x422>
 800e670:	e7ee      	b.n	800e650 <__gethex+0x434>
 800e672:	bf00      	nop
 800e674:	08010310 	.word	0x08010310

0800e678 <L_shift>:
 800e678:	f1c2 0208 	rsb	r2, r2, #8
 800e67c:	0092      	lsls	r2, r2, #2
 800e67e:	b570      	push	{r4, r5, r6, lr}
 800e680:	f1c2 0620 	rsb	r6, r2, #32
 800e684:	6843      	ldr	r3, [r0, #4]
 800e686:	6804      	ldr	r4, [r0, #0]
 800e688:	fa03 f506 	lsl.w	r5, r3, r6
 800e68c:	432c      	orrs	r4, r5
 800e68e:	40d3      	lsrs	r3, r2
 800e690:	6004      	str	r4, [r0, #0]
 800e692:	f840 3f04 	str.w	r3, [r0, #4]!
 800e696:	4288      	cmp	r0, r1
 800e698:	d3f4      	bcc.n	800e684 <L_shift+0xc>
 800e69a:	bd70      	pop	{r4, r5, r6, pc}

0800e69c <__match>:
 800e69c:	b530      	push	{r4, r5, lr}
 800e69e:	6803      	ldr	r3, [r0, #0]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6a6:	b914      	cbnz	r4, 800e6ae <__match+0x12>
 800e6a8:	6003      	str	r3, [r0, #0]
 800e6aa:	2001      	movs	r0, #1
 800e6ac:	bd30      	pop	{r4, r5, pc}
 800e6ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e6b6:	2d19      	cmp	r5, #25
 800e6b8:	bf98      	it	ls
 800e6ba:	3220      	addls	r2, #32
 800e6bc:	42a2      	cmp	r2, r4
 800e6be:	d0f0      	beq.n	800e6a2 <__match+0x6>
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	e7f3      	b.n	800e6ac <__match+0x10>

0800e6c4 <__hexnan>:
 800e6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c8:	680b      	ldr	r3, [r1, #0]
 800e6ca:	6801      	ldr	r1, [r0, #0]
 800e6cc:	115e      	asrs	r6, r3, #5
 800e6ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e6d2:	f013 031f 	ands.w	r3, r3, #31
 800e6d6:	b087      	sub	sp, #28
 800e6d8:	bf18      	it	ne
 800e6da:	3604      	addne	r6, #4
 800e6dc:	2500      	movs	r5, #0
 800e6de:	1f37      	subs	r7, r6, #4
 800e6e0:	4682      	mov	sl, r0
 800e6e2:	4690      	mov	r8, r2
 800e6e4:	9301      	str	r3, [sp, #4]
 800e6e6:	f846 5c04 	str.w	r5, [r6, #-4]
 800e6ea:	46b9      	mov	r9, r7
 800e6ec:	463c      	mov	r4, r7
 800e6ee:	9502      	str	r5, [sp, #8]
 800e6f0:	46ab      	mov	fp, r5
 800e6f2:	784a      	ldrb	r2, [r1, #1]
 800e6f4:	1c4b      	adds	r3, r1, #1
 800e6f6:	9303      	str	r3, [sp, #12]
 800e6f8:	b342      	cbz	r2, 800e74c <__hexnan+0x88>
 800e6fa:	4610      	mov	r0, r2
 800e6fc:	9105      	str	r1, [sp, #20]
 800e6fe:	9204      	str	r2, [sp, #16]
 800e700:	f7ff fd76 	bl	800e1f0 <__hexdig_fun>
 800e704:	2800      	cmp	r0, #0
 800e706:	d14f      	bne.n	800e7a8 <__hexnan+0xe4>
 800e708:	9a04      	ldr	r2, [sp, #16]
 800e70a:	9905      	ldr	r1, [sp, #20]
 800e70c:	2a20      	cmp	r2, #32
 800e70e:	d818      	bhi.n	800e742 <__hexnan+0x7e>
 800e710:	9b02      	ldr	r3, [sp, #8]
 800e712:	459b      	cmp	fp, r3
 800e714:	dd13      	ble.n	800e73e <__hexnan+0x7a>
 800e716:	454c      	cmp	r4, r9
 800e718:	d206      	bcs.n	800e728 <__hexnan+0x64>
 800e71a:	2d07      	cmp	r5, #7
 800e71c:	dc04      	bgt.n	800e728 <__hexnan+0x64>
 800e71e:	462a      	mov	r2, r5
 800e720:	4649      	mov	r1, r9
 800e722:	4620      	mov	r0, r4
 800e724:	f7ff ffa8 	bl	800e678 <L_shift>
 800e728:	4544      	cmp	r4, r8
 800e72a:	d950      	bls.n	800e7ce <__hexnan+0x10a>
 800e72c:	2300      	movs	r3, #0
 800e72e:	f1a4 0904 	sub.w	r9, r4, #4
 800e732:	f844 3c04 	str.w	r3, [r4, #-4]
 800e736:	f8cd b008 	str.w	fp, [sp, #8]
 800e73a:	464c      	mov	r4, r9
 800e73c:	461d      	mov	r5, r3
 800e73e:	9903      	ldr	r1, [sp, #12]
 800e740:	e7d7      	b.n	800e6f2 <__hexnan+0x2e>
 800e742:	2a29      	cmp	r2, #41	; 0x29
 800e744:	d155      	bne.n	800e7f2 <__hexnan+0x12e>
 800e746:	3102      	adds	r1, #2
 800e748:	f8ca 1000 	str.w	r1, [sl]
 800e74c:	f1bb 0f00 	cmp.w	fp, #0
 800e750:	d04f      	beq.n	800e7f2 <__hexnan+0x12e>
 800e752:	454c      	cmp	r4, r9
 800e754:	d206      	bcs.n	800e764 <__hexnan+0xa0>
 800e756:	2d07      	cmp	r5, #7
 800e758:	dc04      	bgt.n	800e764 <__hexnan+0xa0>
 800e75a:	462a      	mov	r2, r5
 800e75c:	4649      	mov	r1, r9
 800e75e:	4620      	mov	r0, r4
 800e760:	f7ff ff8a 	bl	800e678 <L_shift>
 800e764:	4544      	cmp	r4, r8
 800e766:	d934      	bls.n	800e7d2 <__hexnan+0x10e>
 800e768:	f1a8 0204 	sub.w	r2, r8, #4
 800e76c:	4623      	mov	r3, r4
 800e76e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e772:	f842 1f04 	str.w	r1, [r2, #4]!
 800e776:	429f      	cmp	r7, r3
 800e778:	d2f9      	bcs.n	800e76e <__hexnan+0xaa>
 800e77a:	1b3b      	subs	r3, r7, r4
 800e77c:	f023 0303 	bic.w	r3, r3, #3
 800e780:	3304      	adds	r3, #4
 800e782:	3e03      	subs	r6, #3
 800e784:	3401      	adds	r4, #1
 800e786:	42a6      	cmp	r6, r4
 800e788:	bf38      	it	cc
 800e78a:	2304      	movcc	r3, #4
 800e78c:	4443      	add	r3, r8
 800e78e:	2200      	movs	r2, #0
 800e790:	f843 2b04 	str.w	r2, [r3], #4
 800e794:	429f      	cmp	r7, r3
 800e796:	d2fb      	bcs.n	800e790 <__hexnan+0xcc>
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	b91b      	cbnz	r3, 800e7a4 <__hexnan+0xe0>
 800e79c:	4547      	cmp	r7, r8
 800e79e:	d126      	bne.n	800e7ee <__hexnan+0x12a>
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	603b      	str	r3, [r7, #0]
 800e7a4:	2005      	movs	r0, #5
 800e7a6:	e025      	b.n	800e7f4 <__hexnan+0x130>
 800e7a8:	3501      	adds	r5, #1
 800e7aa:	2d08      	cmp	r5, #8
 800e7ac:	f10b 0b01 	add.w	fp, fp, #1
 800e7b0:	dd06      	ble.n	800e7c0 <__hexnan+0xfc>
 800e7b2:	4544      	cmp	r4, r8
 800e7b4:	d9c3      	bls.n	800e73e <__hexnan+0x7a>
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7bc:	2501      	movs	r5, #1
 800e7be:	3c04      	subs	r4, #4
 800e7c0:	6822      	ldr	r2, [r4, #0]
 800e7c2:	f000 000f 	and.w	r0, r0, #15
 800e7c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e7ca:	6020      	str	r0, [r4, #0]
 800e7cc:	e7b7      	b.n	800e73e <__hexnan+0x7a>
 800e7ce:	2508      	movs	r5, #8
 800e7d0:	e7b5      	b.n	800e73e <__hexnan+0x7a>
 800e7d2:	9b01      	ldr	r3, [sp, #4]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d0df      	beq.n	800e798 <__hexnan+0xd4>
 800e7d8:	f1c3 0320 	rsb	r3, r3, #32
 800e7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e7e0:	40da      	lsrs	r2, r3
 800e7e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e7e6:	4013      	ands	r3, r2
 800e7e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e7ec:	e7d4      	b.n	800e798 <__hexnan+0xd4>
 800e7ee:	3f04      	subs	r7, #4
 800e7f0:	e7d2      	b.n	800e798 <__hexnan+0xd4>
 800e7f2:	2004      	movs	r0, #4
 800e7f4:	b007      	add	sp, #28
 800e7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e7fc <sbrk_aligned>:
 800e7fc:	b570      	push	{r4, r5, r6, lr}
 800e7fe:	4e0e      	ldr	r6, [pc, #56]	; (800e838 <sbrk_aligned+0x3c>)
 800e800:	460c      	mov	r4, r1
 800e802:	6831      	ldr	r1, [r6, #0]
 800e804:	4605      	mov	r5, r0
 800e806:	b911      	cbnz	r1, 800e80e <sbrk_aligned+0x12>
 800e808:	f000 fe1e 	bl	800f448 <_sbrk_r>
 800e80c:	6030      	str	r0, [r6, #0]
 800e80e:	4621      	mov	r1, r4
 800e810:	4628      	mov	r0, r5
 800e812:	f000 fe19 	bl	800f448 <_sbrk_r>
 800e816:	1c43      	adds	r3, r0, #1
 800e818:	d00a      	beq.n	800e830 <sbrk_aligned+0x34>
 800e81a:	1cc4      	adds	r4, r0, #3
 800e81c:	f024 0403 	bic.w	r4, r4, #3
 800e820:	42a0      	cmp	r0, r4
 800e822:	d007      	beq.n	800e834 <sbrk_aligned+0x38>
 800e824:	1a21      	subs	r1, r4, r0
 800e826:	4628      	mov	r0, r5
 800e828:	f000 fe0e 	bl	800f448 <_sbrk_r>
 800e82c:	3001      	adds	r0, #1
 800e82e:	d101      	bne.n	800e834 <sbrk_aligned+0x38>
 800e830:	f04f 34ff 	mov.w	r4, #4294967295
 800e834:	4620      	mov	r0, r4
 800e836:	bd70      	pop	{r4, r5, r6, pc}
 800e838:	20000e94 	.word	0x20000e94

0800e83c <_malloc_r>:
 800e83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e840:	1ccd      	adds	r5, r1, #3
 800e842:	f025 0503 	bic.w	r5, r5, #3
 800e846:	3508      	adds	r5, #8
 800e848:	2d0c      	cmp	r5, #12
 800e84a:	bf38      	it	cc
 800e84c:	250c      	movcc	r5, #12
 800e84e:	2d00      	cmp	r5, #0
 800e850:	4607      	mov	r7, r0
 800e852:	db01      	blt.n	800e858 <_malloc_r+0x1c>
 800e854:	42a9      	cmp	r1, r5
 800e856:	d905      	bls.n	800e864 <_malloc_r+0x28>
 800e858:	230c      	movs	r3, #12
 800e85a:	603b      	str	r3, [r7, #0]
 800e85c:	2600      	movs	r6, #0
 800e85e:	4630      	mov	r0, r6
 800e860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e864:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e938 <_malloc_r+0xfc>
 800e868:	f000 f87a 	bl	800e960 <__malloc_lock>
 800e86c:	f8d8 3000 	ldr.w	r3, [r8]
 800e870:	461c      	mov	r4, r3
 800e872:	bb5c      	cbnz	r4, 800e8cc <_malloc_r+0x90>
 800e874:	4629      	mov	r1, r5
 800e876:	4638      	mov	r0, r7
 800e878:	f7ff ffc0 	bl	800e7fc <sbrk_aligned>
 800e87c:	1c43      	adds	r3, r0, #1
 800e87e:	4604      	mov	r4, r0
 800e880:	d155      	bne.n	800e92e <_malloc_r+0xf2>
 800e882:	f8d8 4000 	ldr.w	r4, [r8]
 800e886:	4626      	mov	r6, r4
 800e888:	2e00      	cmp	r6, #0
 800e88a:	d145      	bne.n	800e918 <_malloc_r+0xdc>
 800e88c:	2c00      	cmp	r4, #0
 800e88e:	d048      	beq.n	800e922 <_malloc_r+0xe6>
 800e890:	6823      	ldr	r3, [r4, #0]
 800e892:	4631      	mov	r1, r6
 800e894:	4638      	mov	r0, r7
 800e896:	eb04 0903 	add.w	r9, r4, r3
 800e89a:	f000 fdd5 	bl	800f448 <_sbrk_r>
 800e89e:	4581      	cmp	r9, r0
 800e8a0:	d13f      	bne.n	800e922 <_malloc_r+0xe6>
 800e8a2:	6821      	ldr	r1, [r4, #0]
 800e8a4:	1a6d      	subs	r5, r5, r1
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	4638      	mov	r0, r7
 800e8aa:	f7ff ffa7 	bl	800e7fc <sbrk_aligned>
 800e8ae:	3001      	adds	r0, #1
 800e8b0:	d037      	beq.n	800e922 <_malloc_r+0xe6>
 800e8b2:	6823      	ldr	r3, [r4, #0]
 800e8b4:	442b      	add	r3, r5
 800e8b6:	6023      	str	r3, [r4, #0]
 800e8b8:	f8d8 3000 	ldr.w	r3, [r8]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d038      	beq.n	800e932 <_malloc_r+0xf6>
 800e8c0:	685a      	ldr	r2, [r3, #4]
 800e8c2:	42a2      	cmp	r2, r4
 800e8c4:	d12b      	bne.n	800e91e <_malloc_r+0xe2>
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	605a      	str	r2, [r3, #4]
 800e8ca:	e00f      	b.n	800e8ec <_malloc_r+0xb0>
 800e8cc:	6822      	ldr	r2, [r4, #0]
 800e8ce:	1b52      	subs	r2, r2, r5
 800e8d0:	d41f      	bmi.n	800e912 <_malloc_r+0xd6>
 800e8d2:	2a0b      	cmp	r2, #11
 800e8d4:	d917      	bls.n	800e906 <_malloc_r+0xca>
 800e8d6:	1961      	adds	r1, r4, r5
 800e8d8:	42a3      	cmp	r3, r4
 800e8da:	6025      	str	r5, [r4, #0]
 800e8dc:	bf18      	it	ne
 800e8de:	6059      	strne	r1, [r3, #4]
 800e8e0:	6863      	ldr	r3, [r4, #4]
 800e8e2:	bf08      	it	eq
 800e8e4:	f8c8 1000 	streq.w	r1, [r8]
 800e8e8:	5162      	str	r2, [r4, r5]
 800e8ea:	604b      	str	r3, [r1, #4]
 800e8ec:	4638      	mov	r0, r7
 800e8ee:	f104 060b 	add.w	r6, r4, #11
 800e8f2:	f000 f83b 	bl	800e96c <__malloc_unlock>
 800e8f6:	f026 0607 	bic.w	r6, r6, #7
 800e8fa:	1d23      	adds	r3, r4, #4
 800e8fc:	1af2      	subs	r2, r6, r3
 800e8fe:	d0ae      	beq.n	800e85e <_malloc_r+0x22>
 800e900:	1b9b      	subs	r3, r3, r6
 800e902:	50a3      	str	r3, [r4, r2]
 800e904:	e7ab      	b.n	800e85e <_malloc_r+0x22>
 800e906:	42a3      	cmp	r3, r4
 800e908:	6862      	ldr	r2, [r4, #4]
 800e90a:	d1dd      	bne.n	800e8c8 <_malloc_r+0x8c>
 800e90c:	f8c8 2000 	str.w	r2, [r8]
 800e910:	e7ec      	b.n	800e8ec <_malloc_r+0xb0>
 800e912:	4623      	mov	r3, r4
 800e914:	6864      	ldr	r4, [r4, #4]
 800e916:	e7ac      	b.n	800e872 <_malloc_r+0x36>
 800e918:	4634      	mov	r4, r6
 800e91a:	6876      	ldr	r6, [r6, #4]
 800e91c:	e7b4      	b.n	800e888 <_malloc_r+0x4c>
 800e91e:	4613      	mov	r3, r2
 800e920:	e7cc      	b.n	800e8bc <_malloc_r+0x80>
 800e922:	230c      	movs	r3, #12
 800e924:	603b      	str	r3, [r7, #0]
 800e926:	4638      	mov	r0, r7
 800e928:	f000 f820 	bl	800e96c <__malloc_unlock>
 800e92c:	e797      	b.n	800e85e <_malloc_r+0x22>
 800e92e:	6025      	str	r5, [r4, #0]
 800e930:	e7dc      	b.n	800e8ec <_malloc_r+0xb0>
 800e932:	605b      	str	r3, [r3, #4]
 800e934:	deff      	udf	#255	; 0xff
 800e936:	bf00      	nop
 800e938:	20000e90 	.word	0x20000e90

0800e93c <__ascii_mbtowc>:
 800e93c:	b082      	sub	sp, #8
 800e93e:	b901      	cbnz	r1, 800e942 <__ascii_mbtowc+0x6>
 800e940:	a901      	add	r1, sp, #4
 800e942:	b142      	cbz	r2, 800e956 <__ascii_mbtowc+0x1a>
 800e944:	b14b      	cbz	r3, 800e95a <__ascii_mbtowc+0x1e>
 800e946:	7813      	ldrb	r3, [r2, #0]
 800e948:	600b      	str	r3, [r1, #0]
 800e94a:	7812      	ldrb	r2, [r2, #0]
 800e94c:	1e10      	subs	r0, r2, #0
 800e94e:	bf18      	it	ne
 800e950:	2001      	movne	r0, #1
 800e952:	b002      	add	sp, #8
 800e954:	4770      	bx	lr
 800e956:	4610      	mov	r0, r2
 800e958:	e7fb      	b.n	800e952 <__ascii_mbtowc+0x16>
 800e95a:	f06f 0001 	mvn.w	r0, #1
 800e95e:	e7f8      	b.n	800e952 <__ascii_mbtowc+0x16>

0800e960 <__malloc_lock>:
 800e960:	4801      	ldr	r0, [pc, #4]	; (800e968 <__malloc_lock+0x8>)
 800e962:	f7ff bb96 	b.w	800e092 <__retarget_lock_acquire_recursive>
 800e966:	bf00      	nop
 800e968:	20000e8c 	.word	0x20000e8c

0800e96c <__malloc_unlock>:
 800e96c:	4801      	ldr	r0, [pc, #4]	; (800e974 <__malloc_unlock+0x8>)
 800e96e:	f7ff bb91 	b.w	800e094 <__retarget_lock_release_recursive>
 800e972:	bf00      	nop
 800e974:	20000e8c 	.word	0x20000e8c

0800e978 <_Balloc>:
 800e978:	b570      	push	{r4, r5, r6, lr}
 800e97a:	69c6      	ldr	r6, [r0, #28]
 800e97c:	4604      	mov	r4, r0
 800e97e:	460d      	mov	r5, r1
 800e980:	b976      	cbnz	r6, 800e9a0 <_Balloc+0x28>
 800e982:	2010      	movs	r0, #16
 800e984:	f000 fda4 	bl	800f4d0 <malloc>
 800e988:	4602      	mov	r2, r0
 800e98a:	61e0      	str	r0, [r4, #28]
 800e98c:	b920      	cbnz	r0, 800e998 <_Balloc+0x20>
 800e98e:	4b18      	ldr	r3, [pc, #96]	; (800e9f0 <_Balloc+0x78>)
 800e990:	4818      	ldr	r0, [pc, #96]	; (800e9f4 <_Balloc+0x7c>)
 800e992:	216b      	movs	r1, #107	; 0x6b
 800e994:	f000 fd68 	bl	800f468 <__assert_func>
 800e998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e99c:	6006      	str	r6, [r0, #0]
 800e99e:	60c6      	str	r6, [r0, #12]
 800e9a0:	69e6      	ldr	r6, [r4, #28]
 800e9a2:	68f3      	ldr	r3, [r6, #12]
 800e9a4:	b183      	cbz	r3, 800e9c8 <_Balloc+0x50>
 800e9a6:	69e3      	ldr	r3, [r4, #28]
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e9ae:	b9b8      	cbnz	r0, 800e9e0 <_Balloc+0x68>
 800e9b0:	2101      	movs	r1, #1
 800e9b2:	fa01 f605 	lsl.w	r6, r1, r5
 800e9b6:	1d72      	adds	r2, r6, #5
 800e9b8:	0092      	lsls	r2, r2, #2
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	f000 fd72 	bl	800f4a4 <_calloc_r>
 800e9c0:	b160      	cbz	r0, 800e9dc <_Balloc+0x64>
 800e9c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e9c6:	e00e      	b.n	800e9e6 <_Balloc+0x6e>
 800e9c8:	2221      	movs	r2, #33	; 0x21
 800e9ca:	2104      	movs	r1, #4
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	f000 fd69 	bl	800f4a4 <_calloc_r>
 800e9d2:	69e3      	ldr	r3, [r4, #28]
 800e9d4:	60f0      	str	r0, [r6, #12]
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1e4      	bne.n	800e9a6 <_Balloc+0x2e>
 800e9dc:	2000      	movs	r0, #0
 800e9de:	bd70      	pop	{r4, r5, r6, pc}
 800e9e0:	6802      	ldr	r2, [r0, #0]
 800e9e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e9ec:	e7f7      	b.n	800e9de <_Balloc+0x66>
 800e9ee:	bf00      	nop
 800e9f0:	08010381 	.word	0x08010381
 800e9f4:	08010398 	.word	0x08010398

0800e9f8 <_Bfree>:
 800e9f8:	b570      	push	{r4, r5, r6, lr}
 800e9fa:	69c6      	ldr	r6, [r0, #28]
 800e9fc:	4605      	mov	r5, r0
 800e9fe:	460c      	mov	r4, r1
 800ea00:	b976      	cbnz	r6, 800ea20 <_Bfree+0x28>
 800ea02:	2010      	movs	r0, #16
 800ea04:	f000 fd64 	bl	800f4d0 <malloc>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	61e8      	str	r0, [r5, #28]
 800ea0c:	b920      	cbnz	r0, 800ea18 <_Bfree+0x20>
 800ea0e:	4b09      	ldr	r3, [pc, #36]	; (800ea34 <_Bfree+0x3c>)
 800ea10:	4809      	ldr	r0, [pc, #36]	; (800ea38 <_Bfree+0x40>)
 800ea12:	218f      	movs	r1, #143	; 0x8f
 800ea14:	f000 fd28 	bl	800f468 <__assert_func>
 800ea18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea1c:	6006      	str	r6, [r0, #0]
 800ea1e:	60c6      	str	r6, [r0, #12]
 800ea20:	b13c      	cbz	r4, 800ea32 <_Bfree+0x3a>
 800ea22:	69eb      	ldr	r3, [r5, #28]
 800ea24:	6862      	ldr	r2, [r4, #4]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea2c:	6021      	str	r1, [r4, #0]
 800ea2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea32:	bd70      	pop	{r4, r5, r6, pc}
 800ea34:	08010381 	.word	0x08010381
 800ea38:	08010398 	.word	0x08010398

0800ea3c <__multadd>:
 800ea3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea40:	690d      	ldr	r5, [r1, #16]
 800ea42:	4607      	mov	r7, r0
 800ea44:	460c      	mov	r4, r1
 800ea46:	461e      	mov	r6, r3
 800ea48:	f101 0c14 	add.w	ip, r1, #20
 800ea4c:	2000      	movs	r0, #0
 800ea4e:	f8dc 3000 	ldr.w	r3, [ip]
 800ea52:	b299      	uxth	r1, r3
 800ea54:	fb02 6101 	mla	r1, r2, r1, r6
 800ea58:	0c1e      	lsrs	r6, r3, #16
 800ea5a:	0c0b      	lsrs	r3, r1, #16
 800ea5c:	fb02 3306 	mla	r3, r2, r6, r3
 800ea60:	b289      	uxth	r1, r1
 800ea62:	3001      	adds	r0, #1
 800ea64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea68:	4285      	cmp	r5, r0
 800ea6a:	f84c 1b04 	str.w	r1, [ip], #4
 800ea6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea72:	dcec      	bgt.n	800ea4e <__multadd+0x12>
 800ea74:	b30e      	cbz	r6, 800eaba <__multadd+0x7e>
 800ea76:	68a3      	ldr	r3, [r4, #8]
 800ea78:	42ab      	cmp	r3, r5
 800ea7a:	dc19      	bgt.n	800eab0 <__multadd+0x74>
 800ea7c:	6861      	ldr	r1, [r4, #4]
 800ea7e:	4638      	mov	r0, r7
 800ea80:	3101      	adds	r1, #1
 800ea82:	f7ff ff79 	bl	800e978 <_Balloc>
 800ea86:	4680      	mov	r8, r0
 800ea88:	b928      	cbnz	r0, 800ea96 <__multadd+0x5a>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	4b0c      	ldr	r3, [pc, #48]	; (800eac0 <__multadd+0x84>)
 800ea8e:	480d      	ldr	r0, [pc, #52]	; (800eac4 <__multadd+0x88>)
 800ea90:	21ba      	movs	r1, #186	; 0xba
 800ea92:	f000 fce9 	bl	800f468 <__assert_func>
 800ea96:	6922      	ldr	r2, [r4, #16]
 800ea98:	3202      	adds	r2, #2
 800ea9a:	f104 010c 	add.w	r1, r4, #12
 800ea9e:	0092      	lsls	r2, r2, #2
 800eaa0:	300c      	adds	r0, #12
 800eaa2:	f7ff faf8 	bl	800e096 <memcpy>
 800eaa6:	4621      	mov	r1, r4
 800eaa8:	4638      	mov	r0, r7
 800eaaa:	f7ff ffa5 	bl	800e9f8 <_Bfree>
 800eaae:	4644      	mov	r4, r8
 800eab0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eab4:	3501      	adds	r5, #1
 800eab6:	615e      	str	r6, [r3, #20]
 800eab8:	6125      	str	r5, [r4, #16]
 800eaba:	4620      	mov	r0, r4
 800eabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac0:	08010310 	.word	0x08010310
 800eac4:	08010398 	.word	0x08010398

0800eac8 <__s2b>:
 800eac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eacc:	460c      	mov	r4, r1
 800eace:	4615      	mov	r5, r2
 800ead0:	461f      	mov	r7, r3
 800ead2:	2209      	movs	r2, #9
 800ead4:	3308      	adds	r3, #8
 800ead6:	4606      	mov	r6, r0
 800ead8:	fb93 f3f2 	sdiv	r3, r3, r2
 800eadc:	2100      	movs	r1, #0
 800eade:	2201      	movs	r2, #1
 800eae0:	429a      	cmp	r2, r3
 800eae2:	db09      	blt.n	800eaf8 <__s2b+0x30>
 800eae4:	4630      	mov	r0, r6
 800eae6:	f7ff ff47 	bl	800e978 <_Balloc>
 800eaea:	b940      	cbnz	r0, 800eafe <__s2b+0x36>
 800eaec:	4602      	mov	r2, r0
 800eaee:	4b19      	ldr	r3, [pc, #100]	; (800eb54 <__s2b+0x8c>)
 800eaf0:	4819      	ldr	r0, [pc, #100]	; (800eb58 <__s2b+0x90>)
 800eaf2:	21d3      	movs	r1, #211	; 0xd3
 800eaf4:	f000 fcb8 	bl	800f468 <__assert_func>
 800eaf8:	0052      	lsls	r2, r2, #1
 800eafa:	3101      	adds	r1, #1
 800eafc:	e7f0      	b.n	800eae0 <__s2b+0x18>
 800eafe:	9b08      	ldr	r3, [sp, #32]
 800eb00:	6143      	str	r3, [r0, #20]
 800eb02:	2d09      	cmp	r5, #9
 800eb04:	f04f 0301 	mov.w	r3, #1
 800eb08:	6103      	str	r3, [r0, #16]
 800eb0a:	dd16      	ble.n	800eb3a <__s2b+0x72>
 800eb0c:	f104 0909 	add.w	r9, r4, #9
 800eb10:	46c8      	mov	r8, r9
 800eb12:	442c      	add	r4, r5
 800eb14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eb18:	4601      	mov	r1, r0
 800eb1a:	3b30      	subs	r3, #48	; 0x30
 800eb1c:	220a      	movs	r2, #10
 800eb1e:	4630      	mov	r0, r6
 800eb20:	f7ff ff8c 	bl	800ea3c <__multadd>
 800eb24:	45a0      	cmp	r8, r4
 800eb26:	d1f5      	bne.n	800eb14 <__s2b+0x4c>
 800eb28:	f1a5 0408 	sub.w	r4, r5, #8
 800eb2c:	444c      	add	r4, r9
 800eb2e:	1b2d      	subs	r5, r5, r4
 800eb30:	1963      	adds	r3, r4, r5
 800eb32:	42bb      	cmp	r3, r7
 800eb34:	db04      	blt.n	800eb40 <__s2b+0x78>
 800eb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb3a:	340a      	adds	r4, #10
 800eb3c:	2509      	movs	r5, #9
 800eb3e:	e7f6      	b.n	800eb2e <__s2b+0x66>
 800eb40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eb44:	4601      	mov	r1, r0
 800eb46:	3b30      	subs	r3, #48	; 0x30
 800eb48:	220a      	movs	r2, #10
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	f7ff ff76 	bl	800ea3c <__multadd>
 800eb50:	e7ee      	b.n	800eb30 <__s2b+0x68>
 800eb52:	bf00      	nop
 800eb54:	08010310 	.word	0x08010310
 800eb58:	08010398 	.word	0x08010398

0800eb5c <__hi0bits>:
 800eb5c:	0c03      	lsrs	r3, r0, #16
 800eb5e:	041b      	lsls	r3, r3, #16
 800eb60:	b9d3      	cbnz	r3, 800eb98 <__hi0bits+0x3c>
 800eb62:	0400      	lsls	r0, r0, #16
 800eb64:	2310      	movs	r3, #16
 800eb66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eb6a:	bf04      	itt	eq
 800eb6c:	0200      	lsleq	r0, r0, #8
 800eb6e:	3308      	addeq	r3, #8
 800eb70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eb74:	bf04      	itt	eq
 800eb76:	0100      	lsleq	r0, r0, #4
 800eb78:	3304      	addeq	r3, #4
 800eb7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eb7e:	bf04      	itt	eq
 800eb80:	0080      	lsleq	r0, r0, #2
 800eb82:	3302      	addeq	r3, #2
 800eb84:	2800      	cmp	r0, #0
 800eb86:	db05      	blt.n	800eb94 <__hi0bits+0x38>
 800eb88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eb8c:	f103 0301 	add.w	r3, r3, #1
 800eb90:	bf08      	it	eq
 800eb92:	2320      	moveq	r3, #32
 800eb94:	4618      	mov	r0, r3
 800eb96:	4770      	bx	lr
 800eb98:	2300      	movs	r3, #0
 800eb9a:	e7e4      	b.n	800eb66 <__hi0bits+0xa>

0800eb9c <__lo0bits>:
 800eb9c:	6803      	ldr	r3, [r0, #0]
 800eb9e:	f013 0207 	ands.w	r2, r3, #7
 800eba2:	d00c      	beq.n	800ebbe <__lo0bits+0x22>
 800eba4:	07d9      	lsls	r1, r3, #31
 800eba6:	d422      	bmi.n	800ebee <__lo0bits+0x52>
 800eba8:	079a      	lsls	r2, r3, #30
 800ebaa:	bf49      	itett	mi
 800ebac:	085b      	lsrmi	r3, r3, #1
 800ebae:	089b      	lsrpl	r3, r3, #2
 800ebb0:	6003      	strmi	r3, [r0, #0]
 800ebb2:	2201      	movmi	r2, #1
 800ebb4:	bf5c      	itt	pl
 800ebb6:	6003      	strpl	r3, [r0, #0]
 800ebb8:	2202      	movpl	r2, #2
 800ebba:	4610      	mov	r0, r2
 800ebbc:	4770      	bx	lr
 800ebbe:	b299      	uxth	r1, r3
 800ebc0:	b909      	cbnz	r1, 800ebc6 <__lo0bits+0x2a>
 800ebc2:	0c1b      	lsrs	r3, r3, #16
 800ebc4:	2210      	movs	r2, #16
 800ebc6:	b2d9      	uxtb	r1, r3
 800ebc8:	b909      	cbnz	r1, 800ebce <__lo0bits+0x32>
 800ebca:	3208      	adds	r2, #8
 800ebcc:	0a1b      	lsrs	r3, r3, #8
 800ebce:	0719      	lsls	r1, r3, #28
 800ebd0:	bf04      	itt	eq
 800ebd2:	091b      	lsreq	r3, r3, #4
 800ebd4:	3204      	addeq	r2, #4
 800ebd6:	0799      	lsls	r1, r3, #30
 800ebd8:	bf04      	itt	eq
 800ebda:	089b      	lsreq	r3, r3, #2
 800ebdc:	3202      	addeq	r2, #2
 800ebde:	07d9      	lsls	r1, r3, #31
 800ebe0:	d403      	bmi.n	800ebea <__lo0bits+0x4e>
 800ebe2:	085b      	lsrs	r3, r3, #1
 800ebe4:	f102 0201 	add.w	r2, r2, #1
 800ebe8:	d003      	beq.n	800ebf2 <__lo0bits+0x56>
 800ebea:	6003      	str	r3, [r0, #0]
 800ebec:	e7e5      	b.n	800ebba <__lo0bits+0x1e>
 800ebee:	2200      	movs	r2, #0
 800ebf0:	e7e3      	b.n	800ebba <__lo0bits+0x1e>
 800ebf2:	2220      	movs	r2, #32
 800ebf4:	e7e1      	b.n	800ebba <__lo0bits+0x1e>
	...

0800ebf8 <__i2b>:
 800ebf8:	b510      	push	{r4, lr}
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	2101      	movs	r1, #1
 800ebfe:	f7ff febb 	bl	800e978 <_Balloc>
 800ec02:	4602      	mov	r2, r0
 800ec04:	b928      	cbnz	r0, 800ec12 <__i2b+0x1a>
 800ec06:	4b05      	ldr	r3, [pc, #20]	; (800ec1c <__i2b+0x24>)
 800ec08:	4805      	ldr	r0, [pc, #20]	; (800ec20 <__i2b+0x28>)
 800ec0a:	f240 1145 	movw	r1, #325	; 0x145
 800ec0e:	f000 fc2b 	bl	800f468 <__assert_func>
 800ec12:	2301      	movs	r3, #1
 800ec14:	6144      	str	r4, [r0, #20]
 800ec16:	6103      	str	r3, [r0, #16]
 800ec18:	bd10      	pop	{r4, pc}
 800ec1a:	bf00      	nop
 800ec1c:	08010310 	.word	0x08010310
 800ec20:	08010398 	.word	0x08010398

0800ec24 <__multiply>:
 800ec24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec28:	4691      	mov	r9, r2
 800ec2a:	690a      	ldr	r2, [r1, #16]
 800ec2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	bfb8      	it	lt
 800ec34:	460b      	movlt	r3, r1
 800ec36:	460c      	mov	r4, r1
 800ec38:	bfbc      	itt	lt
 800ec3a:	464c      	movlt	r4, r9
 800ec3c:	4699      	movlt	r9, r3
 800ec3e:	6927      	ldr	r7, [r4, #16]
 800ec40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ec44:	68a3      	ldr	r3, [r4, #8]
 800ec46:	6861      	ldr	r1, [r4, #4]
 800ec48:	eb07 060a 	add.w	r6, r7, sl
 800ec4c:	42b3      	cmp	r3, r6
 800ec4e:	b085      	sub	sp, #20
 800ec50:	bfb8      	it	lt
 800ec52:	3101      	addlt	r1, #1
 800ec54:	f7ff fe90 	bl	800e978 <_Balloc>
 800ec58:	b930      	cbnz	r0, 800ec68 <__multiply+0x44>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	4b44      	ldr	r3, [pc, #272]	; (800ed70 <__multiply+0x14c>)
 800ec5e:	4845      	ldr	r0, [pc, #276]	; (800ed74 <__multiply+0x150>)
 800ec60:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ec64:	f000 fc00 	bl	800f468 <__assert_func>
 800ec68:	f100 0514 	add.w	r5, r0, #20
 800ec6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ec70:	462b      	mov	r3, r5
 800ec72:	2200      	movs	r2, #0
 800ec74:	4543      	cmp	r3, r8
 800ec76:	d321      	bcc.n	800ecbc <__multiply+0x98>
 800ec78:	f104 0314 	add.w	r3, r4, #20
 800ec7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ec80:	f109 0314 	add.w	r3, r9, #20
 800ec84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ec88:	9202      	str	r2, [sp, #8]
 800ec8a:	1b3a      	subs	r2, r7, r4
 800ec8c:	3a15      	subs	r2, #21
 800ec8e:	f022 0203 	bic.w	r2, r2, #3
 800ec92:	3204      	adds	r2, #4
 800ec94:	f104 0115 	add.w	r1, r4, #21
 800ec98:	428f      	cmp	r7, r1
 800ec9a:	bf38      	it	cc
 800ec9c:	2204      	movcc	r2, #4
 800ec9e:	9201      	str	r2, [sp, #4]
 800eca0:	9a02      	ldr	r2, [sp, #8]
 800eca2:	9303      	str	r3, [sp, #12]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d80c      	bhi.n	800ecc2 <__multiply+0x9e>
 800eca8:	2e00      	cmp	r6, #0
 800ecaa:	dd03      	ble.n	800ecb4 <__multiply+0x90>
 800ecac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d05b      	beq.n	800ed6c <__multiply+0x148>
 800ecb4:	6106      	str	r6, [r0, #16]
 800ecb6:	b005      	add	sp, #20
 800ecb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecbc:	f843 2b04 	str.w	r2, [r3], #4
 800ecc0:	e7d8      	b.n	800ec74 <__multiply+0x50>
 800ecc2:	f8b3 a000 	ldrh.w	sl, [r3]
 800ecc6:	f1ba 0f00 	cmp.w	sl, #0
 800ecca:	d024      	beq.n	800ed16 <__multiply+0xf2>
 800eccc:	f104 0e14 	add.w	lr, r4, #20
 800ecd0:	46a9      	mov	r9, r5
 800ecd2:	f04f 0c00 	mov.w	ip, #0
 800ecd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ecda:	f8d9 1000 	ldr.w	r1, [r9]
 800ecde:	fa1f fb82 	uxth.w	fp, r2
 800ece2:	b289      	uxth	r1, r1
 800ece4:	fb0a 110b 	mla	r1, sl, fp, r1
 800ece8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ecec:	f8d9 2000 	ldr.w	r2, [r9]
 800ecf0:	4461      	add	r1, ip
 800ecf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ecf6:	fb0a c20b 	mla	r2, sl, fp, ip
 800ecfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ecfe:	b289      	uxth	r1, r1
 800ed00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed04:	4577      	cmp	r7, lr
 800ed06:	f849 1b04 	str.w	r1, [r9], #4
 800ed0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed0e:	d8e2      	bhi.n	800ecd6 <__multiply+0xb2>
 800ed10:	9a01      	ldr	r2, [sp, #4]
 800ed12:	f845 c002 	str.w	ip, [r5, r2]
 800ed16:	9a03      	ldr	r2, [sp, #12]
 800ed18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed1c:	3304      	adds	r3, #4
 800ed1e:	f1b9 0f00 	cmp.w	r9, #0
 800ed22:	d021      	beq.n	800ed68 <__multiply+0x144>
 800ed24:	6829      	ldr	r1, [r5, #0]
 800ed26:	f104 0c14 	add.w	ip, r4, #20
 800ed2a:	46ae      	mov	lr, r5
 800ed2c:	f04f 0a00 	mov.w	sl, #0
 800ed30:	f8bc b000 	ldrh.w	fp, [ip]
 800ed34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ed38:	fb09 220b 	mla	r2, r9, fp, r2
 800ed3c:	4452      	add	r2, sl
 800ed3e:	b289      	uxth	r1, r1
 800ed40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed44:	f84e 1b04 	str.w	r1, [lr], #4
 800ed48:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ed4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ed50:	f8be 1000 	ldrh.w	r1, [lr]
 800ed54:	fb09 110a 	mla	r1, r9, sl, r1
 800ed58:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ed5c:	4567      	cmp	r7, ip
 800ed5e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ed62:	d8e5      	bhi.n	800ed30 <__multiply+0x10c>
 800ed64:	9a01      	ldr	r2, [sp, #4]
 800ed66:	50a9      	str	r1, [r5, r2]
 800ed68:	3504      	adds	r5, #4
 800ed6a:	e799      	b.n	800eca0 <__multiply+0x7c>
 800ed6c:	3e01      	subs	r6, #1
 800ed6e:	e79b      	b.n	800eca8 <__multiply+0x84>
 800ed70:	08010310 	.word	0x08010310
 800ed74:	08010398 	.word	0x08010398

0800ed78 <__pow5mult>:
 800ed78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed7c:	4615      	mov	r5, r2
 800ed7e:	f012 0203 	ands.w	r2, r2, #3
 800ed82:	4606      	mov	r6, r0
 800ed84:	460f      	mov	r7, r1
 800ed86:	d007      	beq.n	800ed98 <__pow5mult+0x20>
 800ed88:	4c25      	ldr	r4, [pc, #148]	; (800ee20 <__pow5mult+0xa8>)
 800ed8a:	3a01      	subs	r2, #1
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed92:	f7ff fe53 	bl	800ea3c <__multadd>
 800ed96:	4607      	mov	r7, r0
 800ed98:	10ad      	asrs	r5, r5, #2
 800ed9a:	d03d      	beq.n	800ee18 <__pow5mult+0xa0>
 800ed9c:	69f4      	ldr	r4, [r6, #28]
 800ed9e:	b97c      	cbnz	r4, 800edc0 <__pow5mult+0x48>
 800eda0:	2010      	movs	r0, #16
 800eda2:	f000 fb95 	bl	800f4d0 <malloc>
 800eda6:	4602      	mov	r2, r0
 800eda8:	61f0      	str	r0, [r6, #28]
 800edaa:	b928      	cbnz	r0, 800edb8 <__pow5mult+0x40>
 800edac:	4b1d      	ldr	r3, [pc, #116]	; (800ee24 <__pow5mult+0xac>)
 800edae:	481e      	ldr	r0, [pc, #120]	; (800ee28 <__pow5mult+0xb0>)
 800edb0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800edb4:	f000 fb58 	bl	800f468 <__assert_func>
 800edb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800edbc:	6004      	str	r4, [r0, #0]
 800edbe:	60c4      	str	r4, [r0, #12]
 800edc0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800edc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800edc8:	b94c      	cbnz	r4, 800edde <__pow5mult+0x66>
 800edca:	f240 2171 	movw	r1, #625	; 0x271
 800edce:	4630      	mov	r0, r6
 800edd0:	f7ff ff12 	bl	800ebf8 <__i2b>
 800edd4:	2300      	movs	r3, #0
 800edd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800edda:	4604      	mov	r4, r0
 800eddc:	6003      	str	r3, [r0, #0]
 800edde:	f04f 0900 	mov.w	r9, #0
 800ede2:	07eb      	lsls	r3, r5, #31
 800ede4:	d50a      	bpl.n	800edfc <__pow5mult+0x84>
 800ede6:	4639      	mov	r1, r7
 800ede8:	4622      	mov	r2, r4
 800edea:	4630      	mov	r0, r6
 800edec:	f7ff ff1a 	bl	800ec24 <__multiply>
 800edf0:	4639      	mov	r1, r7
 800edf2:	4680      	mov	r8, r0
 800edf4:	4630      	mov	r0, r6
 800edf6:	f7ff fdff 	bl	800e9f8 <_Bfree>
 800edfa:	4647      	mov	r7, r8
 800edfc:	106d      	asrs	r5, r5, #1
 800edfe:	d00b      	beq.n	800ee18 <__pow5mult+0xa0>
 800ee00:	6820      	ldr	r0, [r4, #0]
 800ee02:	b938      	cbnz	r0, 800ee14 <__pow5mult+0x9c>
 800ee04:	4622      	mov	r2, r4
 800ee06:	4621      	mov	r1, r4
 800ee08:	4630      	mov	r0, r6
 800ee0a:	f7ff ff0b 	bl	800ec24 <__multiply>
 800ee0e:	6020      	str	r0, [r4, #0]
 800ee10:	f8c0 9000 	str.w	r9, [r0]
 800ee14:	4604      	mov	r4, r0
 800ee16:	e7e4      	b.n	800ede2 <__pow5mult+0x6a>
 800ee18:	4638      	mov	r0, r7
 800ee1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee1e:	bf00      	nop
 800ee20:	080104e8 	.word	0x080104e8
 800ee24:	08010381 	.word	0x08010381
 800ee28:	08010398 	.word	0x08010398

0800ee2c <__lshift>:
 800ee2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee30:	460c      	mov	r4, r1
 800ee32:	6849      	ldr	r1, [r1, #4]
 800ee34:	6923      	ldr	r3, [r4, #16]
 800ee36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee3a:	68a3      	ldr	r3, [r4, #8]
 800ee3c:	4607      	mov	r7, r0
 800ee3e:	4691      	mov	r9, r2
 800ee40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee44:	f108 0601 	add.w	r6, r8, #1
 800ee48:	42b3      	cmp	r3, r6
 800ee4a:	db0b      	blt.n	800ee64 <__lshift+0x38>
 800ee4c:	4638      	mov	r0, r7
 800ee4e:	f7ff fd93 	bl	800e978 <_Balloc>
 800ee52:	4605      	mov	r5, r0
 800ee54:	b948      	cbnz	r0, 800ee6a <__lshift+0x3e>
 800ee56:	4602      	mov	r2, r0
 800ee58:	4b28      	ldr	r3, [pc, #160]	; (800eefc <__lshift+0xd0>)
 800ee5a:	4829      	ldr	r0, [pc, #164]	; (800ef00 <__lshift+0xd4>)
 800ee5c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ee60:	f000 fb02 	bl	800f468 <__assert_func>
 800ee64:	3101      	adds	r1, #1
 800ee66:	005b      	lsls	r3, r3, #1
 800ee68:	e7ee      	b.n	800ee48 <__lshift+0x1c>
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	f100 0114 	add.w	r1, r0, #20
 800ee70:	f100 0210 	add.w	r2, r0, #16
 800ee74:	4618      	mov	r0, r3
 800ee76:	4553      	cmp	r3, sl
 800ee78:	db33      	blt.n	800eee2 <__lshift+0xb6>
 800ee7a:	6920      	ldr	r0, [r4, #16]
 800ee7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee80:	f104 0314 	add.w	r3, r4, #20
 800ee84:	f019 091f 	ands.w	r9, r9, #31
 800ee88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee90:	d02b      	beq.n	800eeea <__lshift+0xbe>
 800ee92:	f1c9 0e20 	rsb	lr, r9, #32
 800ee96:	468a      	mov	sl, r1
 800ee98:	2200      	movs	r2, #0
 800ee9a:	6818      	ldr	r0, [r3, #0]
 800ee9c:	fa00 f009 	lsl.w	r0, r0, r9
 800eea0:	4310      	orrs	r0, r2
 800eea2:	f84a 0b04 	str.w	r0, [sl], #4
 800eea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeaa:	459c      	cmp	ip, r3
 800eeac:	fa22 f20e 	lsr.w	r2, r2, lr
 800eeb0:	d8f3      	bhi.n	800ee9a <__lshift+0x6e>
 800eeb2:	ebac 0304 	sub.w	r3, ip, r4
 800eeb6:	3b15      	subs	r3, #21
 800eeb8:	f023 0303 	bic.w	r3, r3, #3
 800eebc:	3304      	adds	r3, #4
 800eebe:	f104 0015 	add.w	r0, r4, #21
 800eec2:	4584      	cmp	ip, r0
 800eec4:	bf38      	it	cc
 800eec6:	2304      	movcc	r3, #4
 800eec8:	50ca      	str	r2, [r1, r3]
 800eeca:	b10a      	cbz	r2, 800eed0 <__lshift+0xa4>
 800eecc:	f108 0602 	add.w	r6, r8, #2
 800eed0:	3e01      	subs	r6, #1
 800eed2:	4638      	mov	r0, r7
 800eed4:	612e      	str	r6, [r5, #16]
 800eed6:	4621      	mov	r1, r4
 800eed8:	f7ff fd8e 	bl	800e9f8 <_Bfree>
 800eedc:	4628      	mov	r0, r5
 800eede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee2:	f842 0f04 	str.w	r0, [r2, #4]!
 800eee6:	3301      	adds	r3, #1
 800eee8:	e7c5      	b.n	800ee76 <__lshift+0x4a>
 800eeea:	3904      	subs	r1, #4
 800eeec:	f853 2b04 	ldr.w	r2, [r3], #4
 800eef0:	f841 2f04 	str.w	r2, [r1, #4]!
 800eef4:	459c      	cmp	ip, r3
 800eef6:	d8f9      	bhi.n	800eeec <__lshift+0xc0>
 800eef8:	e7ea      	b.n	800eed0 <__lshift+0xa4>
 800eefa:	bf00      	nop
 800eefc:	08010310 	.word	0x08010310
 800ef00:	08010398 	.word	0x08010398

0800ef04 <__mcmp>:
 800ef04:	b530      	push	{r4, r5, lr}
 800ef06:	6902      	ldr	r2, [r0, #16]
 800ef08:	690c      	ldr	r4, [r1, #16]
 800ef0a:	1b12      	subs	r2, r2, r4
 800ef0c:	d10e      	bne.n	800ef2c <__mcmp+0x28>
 800ef0e:	f100 0314 	add.w	r3, r0, #20
 800ef12:	3114      	adds	r1, #20
 800ef14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ef1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ef20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef24:	42a5      	cmp	r5, r4
 800ef26:	d003      	beq.n	800ef30 <__mcmp+0x2c>
 800ef28:	d305      	bcc.n	800ef36 <__mcmp+0x32>
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	4610      	mov	r0, r2
 800ef2e:	bd30      	pop	{r4, r5, pc}
 800ef30:	4283      	cmp	r3, r0
 800ef32:	d3f3      	bcc.n	800ef1c <__mcmp+0x18>
 800ef34:	e7fa      	b.n	800ef2c <__mcmp+0x28>
 800ef36:	f04f 32ff 	mov.w	r2, #4294967295
 800ef3a:	e7f7      	b.n	800ef2c <__mcmp+0x28>

0800ef3c <__mdiff>:
 800ef3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef40:	460c      	mov	r4, r1
 800ef42:	4606      	mov	r6, r0
 800ef44:	4611      	mov	r1, r2
 800ef46:	4620      	mov	r0, r4
 800ef48:	4690      	mov	r8, r2
 800ef4a:	f7ff ffdb 	bl	800ef04 <__mcmp>
 800ef4e:	1e05      	subs	r5, r0, #0
 800ef50:	d110      	bne.n	800ef74 <__mdiff+0x38>
 800ef52:	4629      	mov	r1, r5
 800ef54:	4630      	mov	r0, r6
 800ef56:	f7ff fd0f 	bl	800e978 <_Balloc>
 800ef5a:	b930      	cbnz	r0, 800ef6a <__mdiff+0x2e>
 800ef5c:	4b3a      	ldr	r3, [pc, #232]	; (800f048 <__mdiff+0x10c>)
 800ef5e:	4602      	mov	r2, r0
 800ef60:	f240 2137 	movw	r1, #567	; 0x237
 800ef64:	4839      	ldr	r0, [pc, #228]	; (800f04c <__mdiff+0x110>)
 800ef66:	f000 fa7f 	bl	800f468 <__assert_func>
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef74:	bfa4      	itt	ge
 800ef76:	4643      	movge	r3, r8
 800ef78:	46a0      	movge	r8, r4
 800ef7a:	4630      	mov	r0, r6
 800ef7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ef80:	bfa6      	itte	ge
 800ef82:	461c      	movge	r4, r3
 800ef84:	2500      	movge	r5, #0
 800ef86:	2501      	movlt	r5, #1
 800ef88:	f7ff fcf6 	bl	800e978 <_Balloc>
 800ef8c:	b920      	cbnz	r0, 800ef98 <__mdiff+0x5c>
 800ef8e:	4b2e      	ldr	r3, [pc, #184]	; (800f048 <__mdiff+0x10c>)
 800ef90:	4602      	mov	r2, r0
 800ef92:	f240 2145 	movw	r1, #581	; 0x245
 800ef96:	e7e5      	b.n	800ef64 <__mdiff+0x28>
 800ef98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ef9c:	6926      	ldr	r6, [r4, #16]
 800ef9e:	60c5      	str	r5, [r0, #12]
 800efa0:	f104 0914 	add.w	r9, r4, #20
 800efa4:	f108 0514 	add.w	r5, r8, #20
 800efa8:	f100 0e14 	add.w	lr, r0, #20
 800efac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800efb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800efb4:	f108 0210 	add.w	r2, r8, #16
 800efb8:	46f2      	mov	sl, lr
 800efba:	2100      	movs	r1, #0
 800efbc:	f859 3b04 	ldr.w	r3, [r9], #4
 800efc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800efc4:	fa11 f88b 	uxtah	r8, r1, fp
 800efc8:	b299      	uxth	r1, r3
 800efca:	0c1b      	lsrs	r3, r3, #16
 800efcc:	eba8 0801 	sub.w	r8, r8, r1
 800efd0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800efd4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800efd8:	fa1f f888 	uxth.w	r8, r8
 800efdc:	1419      	asrs	r1, r3, #16
 800efde:	454e      	cmp	r6, r9
 800efe0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800efe4:	f84a 3b04 	str.w	r3, [sl], #4
 800efe8:	d8e8      	bhi.n	800efbc <__mdiff+0x80>
 800efea:	1b33      	subs	r3, r6, r4
 800efec:	3b15      	subs	r3, #21
 800efee:	f023 0303 	bic.w	r3, r3, #3
 800eff2:	3304      	adds	r3, #4
 800eff4:	3415      	adds	r4, #21
 800eff6:	42a6      	cmp	r6, r4
 800eff8:	bf38      	it	cc
 800effa:	2304      	movcc	r3, #4
 800effc:	441d      	add	r5, r3
 800effe:	4473      	add	r3, lr
 800f000:	469e      	mov	lr, r3
 800f002:	462e      	mov	r6, r5
 800f004:	4566      	cmp	r6, ip
 800f006:	d30e      	bcc.n	800f026 <__mdiff+0xea>
 800f008:	f10c 0203 	add.w	r2, ip, #3
 800f00c:	1b52      	subs	r2, r2, r5
 800f00e:	f022 0203 	bic.w	r2, r2, #3
 800f012:	3d03      	subs	r5, #3
 800f014:	45ac      	cmp	ip, r5
 800f016:	bf38      	it	cc
 800f018:	2200      	movcc	r2, #0
 800f01a:	4413      	add	r3, r2
 800f01c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f020:	b17a      	cbz	r2, 800f042 <__mdiff+0x106>
 800f022:	6107      	str	r7, [r0, #16]
 800f024:	e7a4      	b.n	800ef70 <__mdiff+0x34>
 800f026:	f856 8b04 	ldr.w	r8, [r6], #4
 800f02a:	fa11 f288 	uxtah	r2, r1, r8
 800f02e:	1414      	asrs	r4, r2, #16
 800f030:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f034:	b292      	uxth	r2, r2
 800f036:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f03a:	f84e 2b04 	str.w	r2, [lr], #4
 800f03e:	1421      	asrs	r1, r4, #16
 800f040:	e7e0      	b.n	800f004 <__mdiff+0xc8>
 800f042:	3f01      	subs	r7, #1
 800f044:	e7ea      	b.n	800f01c <__mdiff+0xe0>
 800f046:	bf00      	nop
 800f048:	08010310 	.word	0x08010310
 800f04c:	08010398 	.word	0x08010398

0800f050 <__ulp>:
 800f050:	b082      	sub	sp, #8
 800f052:	ed8d 0b00 	vstr	d0, [sp]
 800f056:	9a01      	ldr	r2, [sp, #4]
 800f058:	4b0f      	ldr	r3, [pc, #60]	; (800f098 <__ulp+0x48>)
 800f05a:	4013      	ands	r3, r2
 800f05c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f060:	2b00      	cmp	r3, #0
 800f062:	dc08      	bgt.n	800f076 <__ulp+0x26>
 800f064:	425b      	negs	r3, r3
 800f066:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f06a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f06e:	da04      	bge.n	800f07a <__ulp+0x2a>
 800f070:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f074:	4113      	asrs	r3, r2
 800f076:	2200      	movs	r2, #0
 800f078:	e008      	b.n	800f08c <__ulp+0x3c>
 800f07a:	f1a2 0314 	sub.w	r3, r2, #20
 800f07e:	2b1e      	cmp	r3, #30
 800f080:	bfda      	itte	le
 800f082:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f086:	40da      	lsrle	r2, r3
 800f088:	2201      	movgt	r2, #1
 800f08a:	2300      	movs	r3, #0
 800f08c:	4619      	mov	r1, r3
 800f08e:	4610      	mov	r0, r2
 800f090:	ec41 0b10 	vmov	d0, r0, r1
 800f094:	b002      	add	sp, #8
 800f096:	4770      	bx	lr
 800f098:	7ff00000 	.word	0x7ff00000

0800f09c <__b2d>:
 800f09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a0:	6906      	ldr	r6, [r0, #16]
 800f0a2:	f100 0814 	add.w	r8, r0, #20
 800f0a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f0aa:	1f37      	subs	r7, r6, #4
 800f0ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f0b0:	4610      	mov	r0, r2
 800f0b2:	f7ff fd53 	bl	800eb5c <__hi0bits>
 800f0b6:	f1c0 0320 	rsb	r3, r0, #32
 800f0ba:	280a      	cmp	r0, #10
 800f0bc:	600b      	str	r3, [r1, #0]
 800f0be:	491b      	ldr	r1, [pc, #108]	; (800f12c <__b2d+0x90>)
 800f0c0:	dc15      	bgt.n	800f0ee <__b2d+0x52>
 800f0c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800f0c6:	fa22 f30c 	lsr.w	r3, r2, ip
 800f0ca:	45b8      	cmp	r8, r7
 800f0cc:	ea43 0501 	orr.w	r5, r3, r1
 800f0d0:	bf34      	ite	cc
 800f0d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f0d6:	2300      	movcs	r3, #0
 800f0d8:	3015      	adds	r0, #21
 800f0da:	fa02 f000 	lsl.w	r0, r2, r0
 800f0de:	fa23 f30c 	lsr.w	r3, r3, ip
 800f0e2:	4303      	orrs	r3, r0
 800f0e4:	461c      	mov	r4, r3
 800f0e6:	ec45 4b10 	vmov	d0, r4, r5
 800f0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ee:	45b8      	cmp	r8, r7
 800f0f0:	bf3a      	itte	cc
 800f0f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f0f6:	f1a6 0708 	subcc.w	r7, r6, #8
 800f0fa:	2300      	movcs	r3, #0
 800f0fc:	380b      	subs	r0, #11
 800f0fe:	d012      	beq.n	800f126 <__b2d+0x8a>
 800f100:	f1c0 0120 	rsb	r1, r0, #32
 800f104:	fa23 f401 	lsr.w	r4, r3, r1
 800f108:	4082      	lsls	r2, r0
 800f10a:	4322      	orrs	r2, r4
 800f10c:	4547      	cmp	r7, r8
 800f10e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f112:	bf8c      	ite	hi
 800f114:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f118:	2200      	movls	r2, #0
 800f11a:	4083      	lsls	r3, r0
 800f11c:	40ca      	lsrs	r2, r1
 800f11e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f122:	4313      	orrs	r3, r2
 800f124:	e7de      	b.n	800f0e4 <__b2d+0x48>
 800f126:	ea42 0501 	orr.w	r5, r2, r1
 800f12a:	e7db      	b.n	800f0e4 <__b2d+0x48>
 800f12c:	3ff00000 	.word	0x3ff00000

0800f130 <__d2b>:
 800f130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f134:	460f      	mov	r7, r1
 800f136:	2101      	movs	r1, #1
 800f138:	ec59 8b10 	vmov	r8, r9, d0
 800f13c:	4616      	mov	r6, r2
 800f13e:	f7ff fc1b 	bl	800e978 <_Balloc>
 800f142:	4604      	mov	r4, r0
 800f144:	b930      	cbnz	r0, 800f154 <__d2b+0x24>
 800f146:	4602      	mov	r2, r0
 800f148:	4b24      	ldr	r3, [pc, #144]	; (800f1dc <__d2b+0xac>)
 800f14a:	4825      	ldr	r0, [pc, #148]	; (800f1e0 <__d2b+0xb0>)
 800f14c:	f240 310f 	movw	r1, #783	; 0x30f
 800f150:	f000 f98a 	bl	800f468 <__assert_func>
 800f154:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f15c:	bb2d      	cbnz	r5, 800f1aa <__d2b+0x7a>
 800f15e:	9301      	str	r3, [sp, #4]
 800f160:	f1b8 0300 	subs.w	r3, r8, #0
 800f164:	d026      	beq.n	800f1b4 <__d2b+0x84>
 800f166:	4668      	mov	r0, sp
 800f168:	9300      	str	r3, [sp, #0]
 800f16a:	f7ff fd17 	bl	800eb9c <__lo0bits>
 800f16e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f172:	b1e8      	cbz	r0, 800f1b0 <__d2b+0x80>
 800f174:	f1c0 0320 	rsb	r3, r0, #32
 800f178:	fa02 f303 	lsl.w	r3, r2, r3
 800f17c:	430b      	orrs	r3, r1
 800f17e:	40c2      	lsrs	r2, r0
 800f180:	6163      	str	r3, [r4, #20]
 800f182:	9201      	str	r2, [sp, #4]
 800f184:	9b01      	ldr	r3, [sp, #4]
 800f186:	61a3      	str	r3, [r4, #24]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	bf14      	ite	ne
 800f18c:	2202      	movne	r2, #2
 800f18e:	2201      	moveq	r2, #1
 800f190:	6122      	str	r2, [r4, #16]
 800f192:	b1bd      	cbz	r5, 800f1c4 <__d2b+0x94>
 800f194:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f198:	4405      	add	r5, r0
 800f19a:	603d      	str	r5, [r7, #0]
 800f19c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f1a0:	6030      	str	r0, [r6, #0]
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	b003      	add	sp, #12
 800f1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f1ae:	e7d6      	b.n	800f15e <__d2b+0x2e>
 800f1b0:	6161      	str	r1, [r4, #20]
 800f1b2:	e7e7      	b.n	800f184 <__d2b+0x54>
 800f1b4:	a801      	add	r0, sp, #4
 800f1b6:	f7ff fcf1 	bl	800eb9c <__lo0bits>
 800f1ba:	9b01      	ldr	r3, [sp, #4]
 800f1bc:	6163      	str	r3, [r4, #20]
 800f1be:	3020      	adds	r0, #32
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	e7e5      	b.n	800f190 <__d2b+0x60>
 800f1c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f1c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f1cc:	6038      	str	r0, [r7, #0]
 800f1ce:	6918      	ldr	r0, [r3, #16]
 800f1d0:	f7ff fcc4 	bl	800eb5c <__hi0bits>
 800f1d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f1d8:	e7e2      	b.n	800f1a0 <__d2b+0x70>
 800f1da:	bf00      	nop
 800f1dc:	08010310 	.word	0x08010310
 800f1e0:	08010398 	.word	0x08010398

0800f1e4 <__ratio>:
 800f1e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e8:	4688      	mov	r8, r1
 800f1ea:	4669      	mov	r1, sp
 800f1ec:	4681      	mov	r9, r0
 800f1ee:	f7ff ff55 	bl	800f09c <__b2d>
 800f1f2:	a901      	add	r1, sp, #4
 800f1f4:	4640      	mov	r0, r8
 800f1f6:	ec55 4b10 	vmov	r4, r5, d0
 800f1fa:	f7ff ff4f 	bl	800f09c <__b2d>
 800f1fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f202:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f206:	eba3 0c02 	sub.w	ip, r3, r2
 800f20a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f20e:	1a9b      	subs	r3, r3, r2
 800f210:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f214:	ec51 0b10 	vmov	r0, r1, d0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	bfd6      	itet	le
 800f21c:	460a      	movle	r2, r1
 800f21e:	462a      	movgt	r2, r5
 800f220:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f224:	468b      	mov	fp, r1
 800f226:	462f      	mov	r7, r5
 800f228:	bfd4      	ite	le
 800f22a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f22e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f232:	4620      	mov	r0, r4
 800f234:	ee10 2a10 	vmov	r2, s0
 800f238:	465b      	mov	r3, fp
 800f23a:	4639      	mov	r1, r7
 800f23c:	f7f1 fafe 	bl	800083c <__aeabi_ddiv>
 800f240:	ec41 0b10 	vmov	d0, r0, r1
 800f244:	b003      	add	sp, #12
 800f246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f24a <__copybits>:
 800f24a:	3901      	subs	r1, #1
 800f24c:	b570      	push	{r4, r5, r6, lr}
 800f24e:	1149      	asrs	r1, r1, #5
 800f250:	6914      	ldr	r4, [r2, #16]
 800f252:	3101      	adds	r1, #1
 800f254:	f102 0314 	add.w	r3, r2, #20
 800f258:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f25c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f260:	1f05      	subs	r5, r0, #4
 800f262:	42a3      	cmp	r3, r4
 800f264:	d30c      	bcc.n	800f280 <__copybits+0x36>
 800f266:	1aa3      	subs	r3, r4, r2
 800f268:	3b11      	subs	r3, #17
 800f26a:	f023 0303 	bic.w	r3, r3, #3
 800f26e:	3211      	adds	r2, #17
 800f270:	42a2      	cmp	r2, r4
 800f272:	bf88      	it	hi
 800f274:	2300      	movhi	r3, #0
 800f276:	4418      	add	r0, r3
 800f278:	2300      	movs	r3, #0
 800f27a:	4288      	cmp	r0, r1
 800f27c:	d305      	bcc.n	800f28a <__copybits+0x40>
 800f27e:	bd70      	pop	{r4, r5, r6, pc}
 800f280:	f853 6b04 	ldr.w	r6, [r3], #4
 800f284:	f845 6f04 	str.w	r6, [r5, #4]!
 800f288:	e7eb      	b.n	800f262 <__copybits+0x18>
 800f28a:	f840 3b04 	str.w	r3, [r0], #4
 800f28e:	e7f4      	b.n	800f27a <__copybits+0x30>

0800f290 <__any_on>:
 800f290:	f100 0214 	add.w	r2, r0, #20
 800f294:	6900      	ldr	r0, [r0, #16]
 800f296:	114b      	asrs	r3, r1, #5
 800f298:	4298      	cmp	r0, r3
 800f29a:	b510      	push	{r4, lr}
 800f29c:	db11      	blt.n	800f2c2 <__any_on+0x32>
 800f29e:	dd0a      	ble.n	800f2b6 <__any_on+0x26>
 800f2a0:	f011 011f 	ands.w	r1, r1, #31
 800f2a4:	d007      	beq.n	800f2b6 <__any_on+0x26>
 800f2a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f2aa:	fa24 f001 	lsr.w	r0, r4, r1
 800f2ae:	fa00 f101 	lsl.w	r1, r0, r1
 800f2b2:	428c      	cmp	r4, r1
 800f2b4:	d10b      	bne.n	800f2ce <__any_on+0x3e>
 800f2b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d803      	bhi.n	800f2c6 <__any_on+0x36>
 800f2be:	2000      	movs	r0, #0
 800f2c0:	bd10      	pop	{r4, pc}
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	e7f7      	b.n	800f2b6 <__any_on+0x26>
 800f2c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f2ca:	2900      	cmp	r1, #0
 800f2cc:	d0f5      	beq.n	800f2ba <__any_on+0x2a>
 800f2ce:	2001      	movs	r0, #1
 800f2d0:	e7f6      	b.n	800f2c0 <__any_on+0x30>

0800f2d2 <__ascii_wctomb>:
 800f2d2:	b149      	cbz	r1, 800f2e8 <__ascii_wctomb+0x16>
 800f2d4:	2aff      	cmp	r2, #255	; 0xff
 800f2d6:	bf85      	ittet	hi
 800f2d8:	238a      	movhi	r3, #138	; 0x8a
 800f2da:	6003      	strhi	r3, [r0, #0]
 800f2dc:	700a      	strbls	r2, [r1, #0]
 800f2de:	f04f 30ff 	movhi.w	r0, #4294967295
 800f2e2:	bf98      	it	ls
 800f2e4:	2001      	movls	r0, #1
 800f2e6:	4770      	bx	lr
 800f2e8:	4608      	mov	r0, r1
 800f2ea:	4770      	bx	lr

0800f2ec <__sflush_r>:
 800f2ec:	898a      	ldrh	r2, [r1, #12]
 800f2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	0710      	lsls	r0, r2, #28
 800f2f6:	460c      	mov	r4, r1
 800f2f8:	d458      	bmi.n	800f3ac <__sflush_r+0xc0>
 800f2fa:	684b      	ldr	r3, [r1, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	dc05      	bgt.n	800f30c <__sflush_r+0x20>
 800f300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f302:	2b00      	cmp	r3, #0
 800f304:	dc02      	bgt.n	800f30c <__sflush_r+0x20>
 800f306:	2000      	movs	r0, #0
 800f308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f30c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f30e:	2e00      	cmp	r6, #0
 800f310:	d0f9      	beq.n	800f306 <__sflush_r+0x1a>
 800f312:	2300      	movs	r3, #0
 800f314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f318:	682f      	ldr	r7, [r5, #0]
 800f31a:	6a21      	ldr	r1, [r4, #32]
 800f31c:	602b      	str	r3, [r5, #0]
 800f31e:	d032      	beq.n	800f386 <__sflush_r+0x9a>
 800f320:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f322:	89a3      	ldrh	r3, [r4, #12]
 800f324:	075a      	lsls	r2, r3, #29
 800f326:	d505      	bpl.n	800f334 <__sflush_r+0x48>
 800f328:	6863      	ldr	r3, [r4, #4]
 800f32a:	1ac0      	subs	r0, r0, r3
 800f32c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f32e:	b10b      	cbz	r3, 800f334 <__sflush_r+0x48>
 800f330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f332:	1ac0      	subs	r0, r0, r3
 800f334:	2300      	movs	r3, #0
 800f336:	4602      	mov	r2, r0
 800f338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f33a:	6a21      	ldr	r1, [r4, #32]
 800f33c:	4628      	mov	r0, r5
 800f33e:	47b0      	blx	r6
 800f340:	1c43      	adds	r3, r0, #1
 800f342:	89a3      	ldrh	r3, [r4, #12]
 800f344:	d106      	bne.n	800f354 <__sflush_r+0x68>
 800f346:	6829      	ldr	r1, [r5, #0]
 800f348:	291d      	cmp	r1, #29
 800f34a:	d82b      	bhi.n	800f3a4 <__sflush_r+0xb8>
 800f34c:	4a29      	ldr	r2, [pc, #164]	; (800f3f4 <__sflush_r+0x108>)
 800f34e:	410a      	asrs	r2, r1
 800f350:	07d6      	lsls	r6, r2, #31
 800f352:	d427      	bmi.n	800f3a4 <__sflush_r+0xb8>
 800f354:	2200      	movs	r2, #0
 800f356:	6062      	str	r2, [r4, #4]
 800f358:	04d9      	lsls	r1, r3, #19
 800f35a:	6922      	ldr	r2, [r4, #16]
 800f35c:	6022      	str	r2, [r4, #0]
 800f35e:	d504      	bpl.n	800f36a <__sflush_r+0x7e>
 800f360:	1c42      	adds	r2, r0, #1
 800f362:	d101      	bne.n	800f368 <__sflush_r+0x7c>
 800f364:	682b      	ldr	r3, [r5, #0]
 800f366:	b903      	cbnz	r3, 800f36a <__sflush_r+0x7e>
 800f368:	6560      	str	r0, [r4, #84]	; 0x54
 800f36a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f36c:	602f      	str	r7, [r5, #0]
 800f36e:	2900      	cmp	r1, #0
 800f370:	d0c9      	beq.n	800f306 <__sflush_r+0x1a>
 800f372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f376:	4299      	cmp	r1, r3
 800f378:	d002      	beq.n	800f380 <__sflush_r+0x94>
 800f37a:	4628      	mov	r0, r5
 800f37c:	f7fe fe9a 	bl	800e0b4 <_free_r>
 800f380:	2000      	movs	r0, #0
 800f382:	6360      	str	r0, [r4, #52]	; 0x34
 800f384:	e7c0      	b.n	800f308 <__sflush_r+0x1c>
 800f386:	2301      	movs	r3, #1
 800f388:	4628      	mov	r0, r5
 800f38a:	47b0      	blx	r6
 800f38c:	1c41      	adds	r1, r0, #1
 800f38e:	d1c8      	bne.n	800f322 <__sflush_r+0x36>
 800f390:	682b      	ldr	r3, [r5, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d0c5      	beq.n	800f322 <__sflush_r+0x36>
 800f396:	2b1d      	cmp	r3, #29
 800f398:	d001      	beq.n	800f39e <__sflush_r+0xb2>
 800f39a:	2b16      	cmp	r3, #22
 800f39c:	d101      	bne.n	800f3a2 <__sflush_r+0xb6>
 800f39e:	602f      	str	r7, [r5, #0]
 800f3a0:	e7b1      	b.n	800f306 <__sflush_r+0x1a>
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3a8:	81a3      	strh	r3, [r4, #12]
 800f3aa:	e7ad      	b.n	800f308 <__sflush_r+0x1c>
 800f3ac:	690f      	ldr	r7, [r1, #16]
 800f3ae:	2f00      	cmp	r7, #0
 800f3b0:	d0a9      	beq.n	800f306 <__sflush_r+0x1a>
 800f3b2:	0793      	lsls	r3, r2, #30
 800f3b4:	680e      	ldr	r6, [r1, #0]
 800f3b6:	bf08      	it	eq
 800f3b8:	694b      	ldreq	r3, [r1, #20]
 800f3ba:	600f      	str	r7, [r1, #0]
 800f3bc:	bf18      	it	ne
 800f3be:	2300      	movne	r3, #0
 800f3c0:	eba6 0807 	sub.w	r8, r6, r7
 800f3c4:	608b      	str	r3, [r1, #8]
 800f3c6:	f1b8 0f00 	cmp.w	r8, #0
 800f3ca:	dd9c      	ble.n	800f306 <__sflush_r+0x1a>
 800f3cc:	6a21      	ldr	r1, [r4, #32]
 800f3ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f3d0:	4643      	mov	r3, r8
 800f3d2:	463a      	mov	r2, r7
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	47b0      	blx	r6
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	dc06      	bgt.n	800f3ea <__sflush_r+0xfe>
 800f3dc:	89a3      	ldrh	r3, [r4, #12]
 800f3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3e2:	81a3      	strh	r3, [r4, #12]
 800f3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3e8:	e78e      	b.n	800f308 <__sflush_r+0x1c>
 800f3ea:	4407      	add	r7, r0
 800f3ec:	eba8 0800 	sub.w	r8, r8, r0
 800f3f0:	e7e9      	b.n	800f3c6 <__sflush_r+0xda>
 800f3f2:	bf00      	nop
 800f3f4:	dfbffffe 	.word	0xdfbffffe

0800f3f8 <_fflush_r>:
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	690b      	ldr	r3, [r1, #16]
 800f3fc:	4605      	mov	r5, r0
 800f3fe:	460c      	mov	r4, r1
 800f400:	b913      	cbnz	r3, 800f408 <_fflush_r+0x10>
 800f402:	2500      	movs	r5, #0
 800f404:	4628      	mov	r0, r5
 800f406:	bd38      	pop	{r3, r4, r5, pc}
 800f408:	b118      	cbz	r0, 800f412 <_fflush_r+0x1a>
 800f40a:	6a03      	ldr	r3, [r0, #32]
 800f40c:	b90b      	cbnz	r3, 800f412 <_fflush_r+0x1a>
 800f40e:	f7fe fd3b 	bl	800de88 <__sinit>
 800f412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d0f3      	beq.n	800f402 <_fflush_r+0xa>
 800f41a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f41c:	07d0      	lsls	r0, r2, #31
 800f41e:	d404      	bmi.n	800f42a <_fflush_r+0x32>
 800f420:	0599      	lsls	r1, r3, #22
 800f422:	d402      	bmi.n	800f42a <_fflush_r+0x32>
 800f424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f426:	f7fe fe34 	bl	800e092 <__retarget_lock_acquire_recursive>
 800f42a:	4628      	mov	r0, r5
 800f42c:	4621      	mov	r1, r4
 800f42e:	f7ff ff5d 	bl	800f2ec <__sflush_r>
 800f432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f434:	07da      	lsls	r2, r3, #31
 800f436:	4605      	mov	r5, r0
 800f438:	d4e4      	bmi.n	800f404 <_fflush_r+0xc>
 800f43a:	89a3      	ldrh	r3, [r4, #12]
 800f43c:	059b      	lsls	r3, r3, #22
 800f43e:	d4e1      	bmi.n	800f404 <_fflush_r+0xc>
 800f440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f442:	f7fe fe27 	bl	800e094 <__retarget_lock_release_recursive>
 800f446:	e7dd      	b.n	800f404 <_fflush_r+0xc>

0800f448 <_sbrk_r>:
 800f448:	b538      	push	{r3, r4, r5, lr}
 800f44a:	4d06      	ldr	r5, [pc, #24]	; (800f464 <_sbrk_r+0x1c>)
 800f44c:	2300      	movs	r3, #0
 800f44e:	4604      	mov	r4, r0
 800f450:	4608      	mov	r0, r1
 800f452:	602b      	str	r3, [r5, #0]
 800f454:	f7f3 fba8 	bl	8002ba8 <_sbrk>
 800f458:	1c43      	adds	r3, r0, #1
 800f45a:	d102      	bne.n	800f462 <_sbrk_r+0x1a>
 800f45c:	682b      	ldr	r3, [r5, #0]
 800f45e:	b103      	cbz	r3, 800f462 <_sbrk_r+0x1a>
 800f460:	6023      	str	r3, [r4, #0]
 800f462:	bd38      	pop	{r3, r4, r5, pc}
 800f464:	20000e88 	.word	0x20000e88

0800f468 <__assert_func>:
 800f468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f46a:	4614      	mov	r4, r2
 800f46c:	461a      	mov	r2, r3
 800f46e:	4b09      	ldr	r3, [pc, #36]	; (800f494 <__assert_func+0x2c>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4605      	mov	r5, r0
 800f474:	68d8      	ldr	r0, [r3, #12]
 800f476:	b14c      	cbz	r4, 800f48c <__assert_func+0x24>
 800f478:	4b07      	ldr	r3, [pc, #28]	; (800f498 <__assert_func+0x30>)
 800f47a:	9100      	str	r1, [sp, #0]
 800f47c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f480:	4906      	ldr	r1, [pc, #24]	; (800f49c <__assert_func+0x34>)
 800f482:	462b      	mov	r3, r5
 800f484:	f000 f82c 	bl	800f4e0 <fiprintf>
 800f488:	f000 f83c 	bl	800f504 <abort>
 800f48c:	4b04      	ldr	r3, [pc, #16]	; (800f4a0 <__assert_func+0x38>)
 800f48e:	461c      	mov	r4, r3
 800f490:	e7f3      	b.n	800f47a <__assert_func+0x12>
 800f492:	bf00      	nop
 800f494:	200001f4 	.word	0x200001f4
 800f498:	080105f5 	.word	0x080105f5
 800f49c:	08010602 	.word	0x08010602
 800f4a0:	08010630 	.word	0x08010630

0800f4a4 <_calloc_r>:
 800f4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4a6:	fba1 2402 	umull	r2, r4, r1, r2
 800f4aa:	b94c      	cbnz	r4, 800f4c0 <_calloc_r+0x1c>
 800f4ac:	4611      	mov	r1, r2
 800f4ae:	9201      	str	r2, [sp, #4]
 800f4b0:	f7ff f9c4 	bl	800e83c <_malloc_r>
 800f4b4:	9a01      	ldr	r2, [sp, #4]
 800f4b6:	4605      	mov	r5, r0
 800f4b8:	b930      	cbnz	r0, 800f4c8 <_calloc_r+0x24>
 800f4ba:	4628      	mov	r0, r5
 800f4bc:	b003      	add	sp, #12
 800f4be:	bd30      	pop	{r4, r5, pc}
 800f4c0:	220c      	movs	r2, #12
 800f4c2:	6002      	str	r2, [r0, #0]
 800f4c4:	2500      	movs	r5, #0
 800f4c6:	e7f8      	b.n	800f4ba <_calloc_r+0x16>
 800f4c8:	4621      	mov	r1, r4
 800f4ca:	f7fe fd56 	bl	800df7a <memset>
 800f4ce:	e7f4      	b.n	800f4ba <_calloc_r+0x16>

0800f4d0 <malloc>:
 800f4d0:	4b02      	ldr	r3, [pc, #8]	; (800f4dc <malloc+0xc>)
 800f4d2:	4601      	mov	r1, r0
 800f4d4:	6818      	ldr	r0, [r3, #0]
 800f4d6:	f7ff b9b1 	b.w	800e83c <_malloc_r>
 800f4da:	bf00      	nop
 800f4dc:	200001f4 	.word	0x200001f4

0800f4e0 <fiprintf>:
 800f4e0:	b40e      	push	{r1, r2, r3}
 800f4e2:	b503      	push	{r0, r1, lr}
 800f4e4:	4601      	mov	r1, r0
 800f4e6:	ab03      	add	r3, sp, #12
 800f4e8:	4805      	ldr	r0, [pc, #20]	; (800f500 <fiprintf+0x20>)
 800f4ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4ee:	6800      	ldr	r0, [r0, #0]
 800f4f0:	9301      	str	r3, [sp, #4]
 800f4f2:	f000 f837 	bl	800f564 <_vfiprintf_r>
 800f4f6:	b002      	add	sp, #8
 800f4f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4fc:	b003      	add	sp, #12
 800f4fe:	4770      	bx	lr
 800f500:	200001f4 	.word	0x200001f4

0800f504 <abort>:
 800f504:	b508      	push	{r3, lr}
 800f506:	2006      	movs	r0, #6
 800f508:	f000 fb94 	bl	800fc34 <raise>
 800f50c:	2001      	movs	r0, #1
 800f50e:	f7f3 fad3 	bl	8002ab8 <_exit>

0800f512 <__sfputc_r>:
 800f512:	6893      	ldr	r3, [r2, #8]
 800f514:	3b01      	subs	r3, #1
 800f516:	2b00      	cmp	r3, #0
 800f518:	b410      	push	{r4}
 800f51a:	6093      	str	r3, [r2, #8]
 800f51c:	da08      	bge.n	800f530 <__sfputc_r+0x1e>
 800f51e:	6994      	ldr	r4, [r2, #24]
 800f520:	42a3      	cmp	r3, r4
 800f522:	db01      	blt.n	800f528 <__sfputc_r+0x16>
 800f524:	290a      	cmp	r1, #10
 800f526:	d103      	bne.n	800f530 <__sfputc_r+0x1e>
 800f528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f52c:	f000 bac4 	b.w	800fab8 <__swbuf_r>
 800f530:	6813      	ldr	r3, [r2, #0]
 800f532:	1c58      	adds	r0, r3, #1
 800f534:	6010      	str	r0, [r2, #0]
 800f536:	7019      	strb	r1, [r3, #0]
 800f538:	4608      	mov	r0, r1
 800f53a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <__sfputs_r>:
 800f540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f542:	4606      	mov	r6, r0
 800f544:	460f      	mov	r7, r1
 800f546:	4614      	mov	r4, r2
 800f548:	18d5      	adds	r5, r2, r3
 800f54a:	42ac      	cmp	r4, r5
 800f54c:	d101      	bne.n	800f552 <__sfputs_r+0x12>
 800f54e:	2000      	movs	r0, #0
 800f550:	e007      	b.n	800f562 <__sfputs_r+0x22>
 800f552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f556:	463a      	mov	r2, r7
 800f558:	4630      	mov	r0, r6
 800f55a:	f7ff ffda 	bl	800f512 <__sfputc_r>
 800f55e:	1c43      	adds	r3, r0, #1
 800f560:	d1f3      	bne.n	800f54a <__sfputs_r+0xa>
 800f562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f564 <_vfiprintf_r>:
 800f564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f568:	460d      	mov	r5, r1
 800f56a:	b09d      	sub	sp, #116	; 0x74
 800f56c:	4614      	mov	r4, r2
 800f56e:	4698      	mov	r8, r3
 800f570:	4606      	mov	r6, r0
 800f572:	b118      	cbz	r0, 800f57c <_vfiprintf_r+0x18>
 800f574:	6a03      	ldr	r3, [r0, #32]
 800f576:	b90b      	cbnz	r3, 800f57c <_vfiprintf_r+0x18>
 800f578:	f7fe fc86 	bl	800de88 <__sinit>
 800f57c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f57e:	07d9      	lsls	r1, r3, #31
 800f580:	d405      	bmi.n	800f58e <_vfiprintf_r+0x2a>
 800f582:	89ab      	ldrh	r3, [r5, #12]
 800f584:	059a      	lsls	r2, r3, #22
 800f586:	d402      	bmi.n	800f58e <_vfiprintf_r+0x2a>
 800f588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f58a:	f7fe fd82 	bl	800e092 <__retarget_lock_acquire_recursive>
 800f58e:	89ab      	ldrh	r3, [r5, #12]
 800f590:	071b      	lsls	r3, r3, #28
 800f592:	d501      	bpl.n	800f598 <_vfiprintf_r+0x34>
 800f594:	692b      	ldr	r3, [r5, #16]
 800f596:	b99b      	cbnz	r3, 800f5c0 <_vfiprintf_r+0x5c>
 800f598:	4629      	mov	r1, r5
 800f59a:	4630      	mov	r0, r6
 800f59c:	f000 faca 	bl	800fb34 <__swsetup_r>
 800f5a0:	b170      	cbz	r0, 800f5c0 <_vfiprintf_r+0x5c>
 800f5a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5a4:	07dc      	lsls	r4, r3, #31
 800f5a6:	d504      	bpl.n	800f5b2 <_vfiprintf_r+0x4e>
 800f5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ac:	b01d      	add	sp, #116	; 0x74
 800f5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b2:	89ab      	ldrh	r3, [r5, #12]
 800f5b4:	0598      	lsls	r0, r3, #22
 800f5b6:	d4f7      	bmi.n	800f5a8 <_vfiprintf_r+0x44>
 800f5b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5ba:	f7fe fd6b 	bl	800e094 <__retarget_lock_release_recursive>
 800f5be:	e7f3      	b.n	800f5a8 <_vfiprintf_r+0x44>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f5c4:	2320      	movs	r3, #32
 800f5c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5ce:	2330      	movs	r3, #48	; 0x30
 800f5d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f784 <_vfiprintf_r+0x220>
 800f5d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5d8:	f04f 0901 	mov.w	r9, #1
 800f5dc:	4623      	mov	r3, r4
 800f5de:	469a      	mov	sl, r3
 800f5e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5e4:	b10a      	cbz	r2, 800f5ea <_vfiprintf_r+0x86>
 800f5e6:	2a25      	cmp	r2, #37	; 0x25
 800f5e8:	d1f9      	bne.n	800f5de <_vfiprintf_r+0x7a>
 800f5ea:	ebba 0b04 	subs.w	fp, sl, r4
 800f5ee:	d00b      	beq.n	800f608 <_vfiprintf_r+0xa4>
 800f5f0:	465b      	mov	r3, fp
 800f5f2:	4622      	mov	r2, r4
 800f5f4:	4629      	mov	r1, r5
 800f5f6:	4630      	mov	r0, r6
 800f5f8:	f7ff ffa2 	bl	800f540 <__sfputs_r>
 800f5fc:	3001      	adds	r0, #1
 800f5fe:	f000 80a9 	beq.w	800f754 <_vfiprintf_r+0x1f0>
 800f602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f604:	445a      	add	r2, fp
 800f606:	9209      	str	r2, [sp, #36]	; 0x24
 800f608:	f89a 3000 	ldrb.w	r3, [sl]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	f000 80a1 	beq.w	800f754 <_vfiprintf_r+0x1f0>
 800f612:	2300      	movs	r3, #0
 800f614:	f04f 32ff 	mov.w	r2, #4294967295
 800f618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f61c:	f10a 0a01 	add.w	sl, sl, #1
 800f620:	9304      	str	r3, [sp, #16]
 800f622:	9307      	str	r3, [sp, #28]
 800f624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f628:	931a      	str	r3, [sp, #104]	; 0x68
 800f62a:	4654      	mov	r4, sl
 800f62c:	2205      	movs	r2, #5
 800f62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f632:	4854      	ldr	r0, [pc, #336]	; (800f784 <_vfiprintf_r+0x220>)
 800f634:	f7f0 fdcc 	bl	80001d0 <memchr>
 800f638:	9a04      	ldr	r2, [sp, #16]
 800f63a:	b9d8      	cbnz	r0, 800f674 <_vfiprintf_r+0x110>
 800f63c:	06d1      	lsls	r1, r2, #27
 800f63e:	bf44      	itt	mi
 800f640:	2320      	movmi	r3, #32
 800f642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f646:	0713      	lsls	r3, r2, #28
 800f648:	bf44      	itt	mi
 800f64a:	232b      	movmi	r3, #43	; 0x2b
 800f64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f650:	f89a 3000 	ldrb.w	r3, [sl]
 800f654:	2b2a      	cmp	r3, #42	; 0x2a
 800f656:	d015      	beq.n	800f684 <_vfiprintf_r+0x120>
 800f658:	9a07      	ldr	r2, [sp, #28]
 800f65a:	4654      	mov	r4, sl
 800f65c:	2000      	movs	r0, #0
 800f65e:	f04f 0c0a 	mov.w	ip, #10
 800f662:	4621      	mov	r1, r4
 800f664:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f668:	3b30      	subs	r3, #48	; 0x30
 800f66a:	2b09      	cmp	r3, #9
 800f66c:	d94d      	bls.n	800f70a <_vfiprintf_r+0x1a6>
 800f66e:	b1b0      	cbz	r0, 800f69e <_vfiprintf_r+0x13a>
 800f670:	9207      	str	r2, [sp, #28]
 800f672:	e014      	b.n	800f69e <_vfiprintf_r+0x13a>
 800f674:	eba0 0308 	sub.w	r3, r0, r8
 800f678:	fa09 f303 	lsl.w	r3, r9, r3
 800f67c:	4313      	orrs	r3, r2
 800f67e:	9304      	str	r3, [sp, #16]
 800f680:	46a2      	mov	sl, r4
 800f682:	e7d2      	b.n	800f62a <_vfiprintf_r+0xc6>
 800f684:	9b03      	ldr	r3, [sp, #12]
 800f686:	1d19      	adds	r1, r3, #4
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	9103      	str	r1, [sp, #12]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	bfbb      	ittet	lt
 800f690:	425b      	neglt	r3, r3
 800f692:	f042 0202 	orrlt.w	r2, r2, #2
 800f696:	9307      	strge	r3, [sp, #28]
 800f698:	9307      	strlt	r3, [sp, #28]
 800f69a:	bfb8      	it	lt
 800f69c:	9204      	strlt	r2, [sp, #16]
 800f69e:	7823      	ldrb	r3, [r4, #0]
 800f6a0:	2b2e      	cmp	r3, #46	; 0x2e
 800f6a2:	d10c      	bne.n	800f6be <_vfiprintf_r+0x15a>
 800f6a4:	7863      	ldrb	r3, [r4, #1]
 800f6a6:	2b2a      	cmp	r3, #42	; 0x2a
 800f6a8:	d134      	bne.n	800f714 <_vfiprintf_r+0x1b0>
 800f6aa:	9b03      	ldr	r3, [sp, #12]
 800f6ac:	1d1a      	adds	r2, r3, #4
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	9203      	str	r2, [sp, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	bfb8      	it	lt
 800f6b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6ba:	3402      	adds	r4, #2
 800f6bc:	9305      	str	r3, [sp, #20]
 800f6be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f794 <_vfiprintf_r+0x230>
 800f6c2:	7821      	ldrb	r1, [r4, #0]
 800f6c4:	2203      	movs	r2, #3
 800f6c6:	4650      	mov	r0, sl
 800f6c8:	f7f0 fd82 	bl	80001d0 <memchr>
 800f6cc:	b138      	cbz	r0, 800f6de <_vfiprintf_r+0x17a>
 800f6ce:	9b04      	ldr	r3, [sp, #16]
 800f6d0:	eba0 000a 	sub.w	r0, r0, sl
 800f6d4:	2240      	movs	r2, #64	; 0x40
 800f6d6:	4082      	lsls	r2, r0
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	3401      	adds	r4, #1
 800f6dc:	9304      	str	r3, [sp, #16]
 800f6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6e2:	4829      	ldr	r0, [pc, #164]	; (800f788 <_vfiprintf_r+0x224>)
 800f6e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6e8:	2206      	movs	r2, #6
 800f6ea:	f7f0 fd71 	bl	80001d0 <memchr>
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	d03f      	beq.n	800f772 <_vfiprintf_r+0x20e>
 800f6f2:	4b26      	ldr	r3, [pc, #152]	; (800f78c <_vfiprintf_r+0x228>)
 800f6f4:	bb1b      	cbnz	r3, 800f73e <_vfiprintf_r+0x1da>
 800f6f6:	9b03      	ldr	r3, [sp, #12]
 800f6f8:	3307      	adds	r3, #7
 800f6fa:	f023 0307 	bic.w	r3, r3, #7
 800f6fe:	3308      	adds	r3, #8
 800f700:	9303      	str	r3, [sp, #12]
 800f702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f704:	443b      	add	r3, r7
 800f706:	9309      	str	r3, [sp, #36]	; 0x24
 800f708:	e768      	b.n	800f5dc <_vfiprintf_r+0x78>
 800f70a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f70e:	460c      	mov	r4, r1
 800f710:	2001      	movs	r0, #1
 800f712:	e7a6      	b.n	800f662 <_vfiprintf_r+0xfe>
 800f714:	2300      	movs	r3, #0
 800f716:	3401      	adds	r4, #1
 800f718:	9305      	str	r3, [sp, #20]
 800f71a:	4619      	mov	r1, r3
 800f71c:	f04f 0c0a 	mov.w	ip, #10
 800f720:	4620      	mov	r0, r4
 800f722:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f726:	3a30      	subs	r2, #48	; 0x30
 800f728:	2a09      	cmp	r2, #9
 800f72a:	d903      	bls.n	800f734 <_vfiprintf_r+0x1d0>
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d0c6      	beq.n	800f6be <_vfiprintf_r+0x15a>
 800f730:	9105      	str	r1, [sp, #20]
 800f732:	e7c4      	b.n	800f6be <_vfiprintf_r+0x15a>
 800f734:	fb0c 2101 	mla	r1, ip, r1, r2
 800f738:	4604      	mov	r4, r0
 800f73a:	2301      	movs	r3, #1
 800f73c:	e7f0      	b.n	800f720 <_vfiprintf_r+0x1bc>
 800f73e:	ab03      	add	r3, sp, #12
 800f740:	9300      	str	r3, [sp, #0]
 800f742:	462a      	mov	r2, r5
 800f744:	4b12      	ldr	r3, [pc, #72]	; (800f790 <_vfiprintf_r+0x22c>)
 800f746:	a904      	add	r1, sp, #16
 800f748:	4630      	mov	r0, r6
 800f74a:	f3af 8000 	nop.w
 800f74e:	4607      	mov	r7, r0
 800f750:	1c78      	adds	r0, r7, #1
 800f752:	d1d6      	bne.n	800f702 <_vfiprintf_r+0x19e>
 800f754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f756:	07d9      	lsls	r1, r3, #31
 800f758:	d405      	bmi.n	800f766 <_vfiprintf_r+0x202>
 800f75a:	89ab      	ldrh	r3, [r5, #12]
 800f75c:	059a      	lsls	r2, r3, #22
 800f75e:	d402      	bmi.n	800f766 <_vfiprintf_r+0x202>
 800f760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f762:	f7fe fc97 	bl	800e094 <__retarget_lock_release_recursive>
 800f766:	89ab      	ldrh	r3, [r5, #12]
 800f768:	065b      	lsls	r3, r3, #25
 800f76a:	f53f af1d 	bmi.w	800f5a8 <_vfiprintf_r+0x44>
 800f76e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f770:	e71c      	b.n	800f5ac <_vfiprintf_r+0x48>
 800f772:	ab03      	add	r3, sp, #12
 800f774:	9300      	str	r3, [sp, #0]
 800f776:	462a      	mov	r2, r5
 800f778:	4b05      	ldr	r3, [pc, #20]	; (800f790 <_vfiprintf_r+0x22c>)
 800f77a:	a904      	add	r1, sp, #16
 800f77c:	4630      	mov	r0, r6
 800f77e:	f000 f879 	bl	800f874 <_printf_i>
 800f782:	e7e4      	b.n	800f74e <_vfiprintf_r+0x1ea>
 800f784:	08010631 	.word	0x08010631
 800f788:	0801063b 	.word	0x0801063b
 800f78c:	00000000 	.word	0x00000000
 800f790:	0800f541 	.word	0x0800f541
 800f794:	08010637 	.word	0x08010637

0800f798 <_printf_common>:
 800f798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f79c:	4616      	mov	r6, r2
 800f79e:	4699      	mov	r9, r3
 800f7a0:	688a      	ldr	r2, [r1, #8]
 800f7a2:	690b      	ldr	r3, [r1, #16]
 800f7a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	bfb8      	it	lt
 800f7ac:	4613      	movlt	r3, r2
 800f7ae:	6033      	str	r3, [r6, #0]
 800f7b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f7b4:	4607      	mov	r7, r0
 800f7b6:	460c      	mov	r4, r1
 800f7b8:	b10a      	cbz	r2, 800f7be <_printf_common+0x26>
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	6033      	str	r3, [r6, #0]
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	0699      	lsls	r1, r3, #26
 800f7c2:	bf42      	ittt	mi
 800f7c4:	6833      	ldrmi	r3, [r6, #0]
 800f7c6:	3302      	addmi	r3, #2
 800f7c8:	6033      	strmi	r3, [r6, #0]
 800f7ca:	6825      	ldr	r5, [r4, #0]
 800f7cc:	f015 0506 	ands.w	r5, r5, #6
 800f7d0:	d106      	bne.n	800f7e0 <_printf_common+0x48>
 800f7d2:	f104 0a19 	add.w	sl, r4, #25
 800f7d6:	68e3      	ldr	r3, [r4, #12]
 800f7d8:	6832      	ldr	r2, [r6, #0]
 800f7da:	1a9b      	subs	r3, r3, r2
 800f7dc:	42ab      	cmp	r3, r5
 800f7de:	dc26      	bgt.n	800f82e <_printf_common+0x96>
 800f7e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f7e4:	1e13      	subs	r3, r2, #0
 800f7e6:	6822      	ldr	r2, [r4, #0]
 800f7e8:	bf18      	it	ne
 800f7ea:	2301      	movne	r3, #1
 800f7ec:	0692      	lsls	r2, r2, #26
 800f7ee:	d42b      	bmi.n	800f848 <_printf_common+0xb0>
 800f7f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7f4:	4649      	mov	r1, r9
 800f7f6:	4638      	mov	r0, r7
 800f7f8:	47c0      	blx	r8
 800f7fa:	3001      	adds	r0, #1
 800f7fc:	d01e      	beq.n	800f83c <_printf_common+0xa4>
 800f7fe:	6823      	ldr	r3, [r4, #0]
 800f800:	6922      	ldr	r2, [r4, #16]
 800f802:	f003 0306 	and.w	r3, r3, #6
 800f806:	2b04      	cmp	r3, #4
 800f808:	bf02      	ittt	eq
 800f80a:	68e5      	ldreq	r5, [r4, #12]
 800f80c:	6833      	ldreq	r3, [r6, #0]
 800f80e:	1aed      	subeq	r5, r5, r3
 800f810:	68a3      	ldr	r3, [r4, #8]
 800f812:	bf0c      	ite	eq
 800f814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f818:	2500      	movne	r5, #0
 800f81a:	4293      	cmp	r3, r2
 800f81c:	bfc4      	itt	gt
 800f81e:	1a9b      	subgt	r3, r3, r2
 800f820:	18ed      	addgt	r5, r5, r3
 800f822:	2600      	movs	r6, #0
 800f824:	341a      	adds	r4, #26
 800f826:	42b5      	cmp	r5, r6
 800f828:	d11a      	bne.n	800f860 <_printf_common+0xc8>
 800f82a:	2000      	movs	r0, #0
 800f82c:	e008      	b.n	800f840 <_printf_common+0xa8>
 800f82e:	2301      	movs	r3, #1
 800f830:	4652      	mov	r2, sl
 800f832:	4649      	mov	r1, r9
 800f834:	4638      	mov	r0, r7
 800f836:	47c0      	blx	r8
 800f838:	3001      	adds	r0, #1
 800f83a:	d103      	bne.n	800f844 <_printf_common+0xac>
 800f83c:	f04f 30ff 	mov.w	r0, #4294967295
 800f840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f844:	3501      	adds	r5, #1
 800f846:	e7c6      	b.n	800f7d6 <_printf_common+0x3e>
 800f848:	18e1      	adds	r1, r4, r3
 800f84a:	1c5a      	adds	r2, r3, #1
 800f84c:	2030      	movs	r0, #48	; 0x30
 800f84e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f852:	4422      	add	r2, r4
 800f854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f85c:	3302      	adds	r3, #2
 800f85e:	e7c7      	b.n	800f7f0 <_printf_common+0x58>
 800f860:	2301      	movs	r3, #1
 800f862:	4622      	mov	r2, r4
 800f864:	4649      	mov	r1, r9
 800f866:	4638      	mov	r0, r7
 800f868:	47c0      	blx	r8
 800f86a:	3001      	adds	r0, #1
 800f86c:	d0e6      	beq.n	800f83c <_printf_common+0xa4>
 800f86e:	3601      	adds	r6, #1
 800f870:	e7d9      	b.n	800f826 <_printf_common+0x8e>
	...

0800f874 <_printf_i>:
 800f874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f878:	7e0f      	ldrb	r7, [r1, #24]
 800f87a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f87c:	2f78      	cmp	r7, #120	; 0x78
 800f87e:	4691      	mov	r9, r2
 800f880:	4680      	mov	r8, r0
 800f882:	460c      	mov	r4, r1
 800f884:	469a      	mov	sl, r3
 800f886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f88a:	d807      	bhi.n	800f89c <_printf_i+0x28>
 800f88c:	2f62      	cmp	r7, #98	; 0x62
 800f88e:	d80a      	bhi.n	800f8a6 <_printf_i+0x32>
 800f890:	2f00      	cmp	r7, #0
 800f892:	f000 80d4 	beq.w	800fa3e <_printf_i+0x1ca>
 800f896:	2f58      	cmp	r7, #88	; 0x58
 800f898:	f000 80c0 	beq.w	800fa1c <_printf_i+0x1a8>
 800f89c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f8a4:	e03a      	b.n	800f91c <_printf_i+0xa8>
 800f8a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f8aa:	2b15      	cmp	r3, #21
 800f8ac:	d8f6      	bhi.n	800f89c <_printf_i+0x28>
 800f8ae:	a101      	add	r1, pc, #4	; (adr r1, 800f8b4 <_printf_i+0x40>)
 800f8b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f8b4:	0800f90d 	.word	0x0800f90d
 800f8b8:	0800f921 	.word	0x0800f921
 800f8bc:	0800f89d 	.word	0x0800f89d
 800f8c0:	0800f89d 	.word	0x0800f89d
 800f8c4:	0800f89d 	.word	0x0800f89d
 800f8c8:	0800f89d 	.word	0x0800f89d
 800f8cc:	0800f921 	.word	0x0800f921
 800f8d0:	0800f89d 	.word	0x0800f89d
 800f8d4:	0800f89d 	.word	0x0800f89d
 800f8d8:	0800f89d 	.word	0x0800f89d
 800f8dc:	0800f89d 	.word	0x0800f89d
 800f8e0:	0800fa25 	.word	0x0800fa25
 800f8e4:	0800f94d 	.word	0x0800f94d
 800f8e8:	0800f9df 	.word	0x0800f9df
 800f8ec:	0800f89d 	.word	0x0800f89d
 800f8f0:	0800f89d 	.word	0x0800f89d
 800f8f4:	0800fa47 	.word	0x0800fa47
 800f8f8:	0800f89d 	.word	0x0800f89d
 800f8fc:	0800f94d 	.word	0x0800f94d
 800f900:	0800f89d 	.word	0x0800f89d
 800f904:	0800f89d 	.word	0x0800f89d
 800f908:	0800f9e7 	.word	0x0800f9e7
 800f90c:	682b      	ldr	r3, [r5, #0]
 800f90e:	1d1a      	adds	r2, r3, #4
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	602a      	str	r2, [r5, #0]
 800f914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f91c:	2301      	movs	r3, #1
 800f91e:	e09f      	b.n	800fa60 <_printf_i+0x1ec>
 800f920:	6820      	ldr	r0, [r4, #0]
 800f922:	682b      	ldr	r3, [r5, #0]
 800f924:	0607      	lsls	r7, r0, #24
 800f926:	f103 0104 	add.w	r1, r3, #4
 800f92a:	6029      	str	r1, [r5, #0]
 800f92c:	d501      	bpl.n	800f932 <_printf_i+0xbe>
 800f92e:	681e      	ldr	r6, [r3, #0]
 800f930:	e003      	b.n	800f93a <_printf_i+0xc6>
 800f932:	0646      	lsls	r6, r0, #25
 800f934:	d5fb      	bpl.n	800f92e <_printf_i+0xba>
 800f936:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f93a:	2e00      	cmp	r6, #0
 800f93c:	da03      	bge.n	800f946 <_printf_i+0xd2>
 800f93e:	232d      	movs	r3, #45	; 0x2d
 800f940:	4276      	negs	r6, r6
 800f942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f946:	485a      	ldr	r0, [pc, #360]	; (800fab0 <_printf_i+0x23c>)
 800f948:	230a      	movs	r3, #10
 800f94a:	e012      	b.n	800f972 <_printf_i+0xfe>
 800f94c:	682b      	ldr	r3, [r5, #0]
 800f94e:	6820      	ldr	r0, [r4, #0]
 800f950:	1d19      	adds	r1, r3, #4
 800f952:	6029      	str	r1, [r5, #0]
 800f954:	0605      	lsls	r5, r0, #24
 800f956:	d501      	bpl.n	800f95c <_printf_i+0xe8>
 800f958:	681e      	ldr	r6, [r3, #0]
 800f95a:	e002      	b.n	800f962 <_printf_i+0xee>
 800f95c:	0641      	lsls	r1, r0, #25
 800f95e:	d5fb      	bpl.n	800f958 <_printf_i+0xe4>
 800f960:	881e      	ldrh	r6, [r3, #0]
 800f962:	4853      	ldr	r0, [pc, #332]	; (800fab0 <_printf_i+0x23c>)
 800f964:	2f6f      	cmp	r7, #111	; 0x6f
 800f966:	bf0c      	ite	eq
 800f968:	2308      	moveq	r3, #8
 800f96a:	230a      	movne	r3, #10
 800f96c:	2100      	movs	r1, #0
 800f96e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f972:	6865      	ldr	r5, [r4, #4]
 800f974:	60a5      	str	r5, [r4, #8]
 800f976:	2d00      	cmp	r5, #0
 800f978:	bfa2      	ittt	ge
 800f97a:	6821      	ldrge	r1, [r4, #0]
 800f97c:	f021 0104 	bicge.w	r1, r1, #4
 800f980:	6021      	strge	r1, [r4, #0]
 800f982:	b90e      	cbnz	r6, 800f988 <_printf_i+0x114>
 800f984:	2d00      	cmp	r5, #0
 800f986:	d04b      	beq.n	800fa20 <_printf_i+0x1ac>
 800f988:	4615      	mov	r5, r2
 800f98a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f98e:	fb03 6711 	mls	r7, r3, r1, r6
 800f992:	5dc7      	ldrb	r7, [r0, r7]
 800f994:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f998:	4637      	mov	r7, r6
 800f99a:	42bb      	cmp	r3, r7
 800f99c:	460e      	mov	r6, r1
 800f99e:	d9f4      	bls.n	800f98a <_printf_i+0x116>
 800f9a0:	2b08      	cmp	r3, #8
 800f9a2:	d10b      	bne.n	800f9bc <_printf_i+0x148>
 800f9a4:	6823      	ldr	r3, [r4, #0]
 800f9a6:	07de      	lsls	r6, r3, #31
 800f9a8:	d508      	bpl.n	800f9bc <_printf_i+0x148>
 800f9aa:	6923      	ldr	r3, [r4, #16]
 800f9ac:	6861      	ldr	r1, [r4, #4]
 800f9ae:	4299      	cmp	r1, r3
 800f9b0:	bfde      	ittt	le
 800f9b2:	2330      	movle	r3, #48	; 0x30
 800f9b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f9b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f9bc:	1b52      	subs	r2, r2, r5
 800f9be:	6122      	str	r2, [r4, #16]
 800f9c0:	f8cd a000 	str.w	sl, [sp]
 800f9c4:	464b      	mov	r3, r9
 800f9c6:	aa03      	add	r2, sp, #12
 800f9c8:	4621      	mov	r1, r4
 800f9ca:	4640      	mov	r0, r8
 800f9cc:	f7ff fee4 	bl	800f798 <_printf_common>
 800f9d0:	3001      	adds	r0, #1
 800f9d2:	d14a      	bne.n	800fa6a <_printf_i+0x1f6>
 800f9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d8:	b004      	add	sp, #16
 800f9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9de:	6823      	ldr	r3, [r4, #0]
 800f9e0:	f043 0320 	orr.w	r3, r3, #32
 800f9e4:	6023      	str	r3, [r4, #0]
 800f9e6:	4833      	ldr	r0, [pc, #204]	; (800fab4 <_printf_i+0x240>)
 800f9e8:	2778      	movs	r7, #120	; 0x78
 800f9ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f9ee:	6823      	ldr	r3, [r4, #0]
 800f9f0:	6829      	ldr	r1, [r5, #0]
 800f9f2:	061f      	lsls	r7, r3, #24
 800f9f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f9f8:	d402      	bmi.n	800fa00 <_printf_i+0x18c>
 800f9fa:	065f      	lsls	r7, r3, #25
 800f9fc:	bf48      	it	mi
 800f9fe:	b2b6      	uxthmi	r6, r6
 800fa00:	07df      	lsls	r7, r3, #31
 800fa02:	bf48      	it	mi
 800fa04:	f043 0320 	orrmi.w	r3, r3, #32
 800fa08:	6029      	str	r1, [r5, #0]
 800fa0a:	bf48      	it	mi
 800fa0c:	6023      	strmi	r3, [r4, #0]
 800fa0e:	b91e      	cbnz	r6, 800fa18 <_printf_i+0x1a4>
 800fa10:	6823      	ldr	r3, [r4, #0]
 800fa12:	f023 0320 	bic.w	r3, r3, #32
 800fa16:	6023      	str	r3, [r4, #0]
 800fa18:	2310      	movs	r3, #16
 800fa1a:	e7a7      	b.n	800f96c <_printf_i+0xf8>
 800fa1c:	4824      	ldr	r0, [pc, #144]	; (800fab0 <_printf_i+0x23c>)
 800fa1e:	e7e4      	b.n	800f9ea <_printf_i+0x176>
 800fa20:	4615      	mov	r5, r2
 800fa22:	e7bd      	b.n	800f9a0 <_printf_i+0x12c>
 800fa24:	682b      	ldr	r3, [r5, #0]
 800fa26:	6826      	ldr	r6, [r4, #0]
 800fa28:	6961      	ldr	r1, [r4, #20]
 800fa2a:	1d18      	adds	r0, r3, #4
 800fa2c:	6028      	str	r0, [r5, #0]
 800fa2e:	0635      	lsls	r5, r6, #24
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	d501      	bpl.n	800fa38 <_printf_i+0x1c4>
 800fa34:	6019      	str	r1, [r3, #0]
 800fa36:	e002      	b.n	800fa3e <_printf_i+0x1ca>
 800fa38:	0670      	lsls	r0, r6, #25
 800fa3a:	d5fb      	bpl.n	800fa34 <_printf_i+0x1c0>
 800fa3c:	8019      	strh	r1, [r3, #0]
 800fa3e:	2300      	movs	r3, #0
 800fa40:	6123      	str	r3, [r4, #16]
 800fa42:	4615      	mov	r5, r2
 800fa44:	e7bc      	b.n	800f9c0 <_printf_i+0x14c>
 800fa46:	682b      	ldr	r3, [r5, #0]
 800fa48:	1d1a      	adds	r2, r3, #4
 800fa4a:	602a      	str	r2, [r5, #0]
 800fa4c:	681d      	ldr	r5, [r3, #0]
 800fa4e:	6862      	ldr	r2, [r4, #4]
 800fa50:	2100      	movs	r1, #0
 800fa52:	4628      	mov	r0, r5
 800fa54:	f7f0 fbbc 	bl	80001d0 <memchr>
 800fa58:	b108      	cbz	r0, 800fa5e <_printf_i+0x1ea>
 800fa5a:	1b40      	subs	r0, r0, r5
 800fa5c:	6060      	str	r0, [r4, #4]
 800fa5e:	6863      	ldr	r3, [r4, #4]
 800fa60:	6123      	str	r3, [r4, #16]
 800fa62:	2300      	movs	r3, #0
 800fa64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa68:	e7aa      	b.n	800f9c0 <_printf_i+0x14c>
 800fa6a:	6923      	ldr	r3, [r4, #16]
 800fa6c:	462a      	mov	r2, r5
 800fa6e:	4649      	mov	r1, r9
 800fa70:	4640      	mov	r0, r8
 800fa72:	47d0      	blx	sl
 800fa74:	3001      	adds	r0, #1
 800fa76:	d0ad      	beq.n	800f9d4 <_printf_i+0x160>
 800fa78:	6823      	ldr	r3, [r4, #0]
 800fa7a:	079b      	lsls	r3, r3, #30
 800fa7c:	d413      	bmi.n	800faa6 <_printf_i+0x232>
 800fa7e:	68e0      	ldr	r0, [r4, #12]
 800fa80:	9b03      	ldr	r3, [sp, #12]
 800fa82:	4298      	cmp	r0, r3
 800fa84:	bfb8      	it	lt
 800fa86:	4618      	movlt	r0, r3
 800fa88:	e7a6      	b.n	800f9d8 <_printf_i+0x164>
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	4632      	mov	r2, r6
 800fa8e:	4649      	mov	r1, r9
 800fa90:	4640      	mov	r0, r8
 800fa92:	47d0      	blx	sl
 800fa94:	3001      	adds	r0, #1
 800fa96:	d09d      	beq.n	800f9d4 <_printf_i+0x160>
 800fa98:	3501      	adds	r5, #1
 800fa9a:	68e3      	ldr	r3, [r4, #12]
 800fa9c:	9903      	ldr	r1, [sp, #12]
 800fa9e:	1a5b      	subs	r3, r3, r1
 800faa0:	42ab      	cmp	r3, r5
 800faa2:	dcf2      	bgt.n	800fa8a <_printf_i+0x216>
 800faa4:	e7eb      	b.n	800fa7e <_printf_i+0x20a>
 800faa6:	2500      	movs	r5, #0
 800faa8:	f104 0619 	add.w	r6, r4, #25
 800faac:	e7f5      	b.n	800fa9a <_printf_i+0x226>
 800faae:	bf00      	nop
 800fab0:	08010642 	.word	0x08010642
 800fab4:	08010653 	.word	0x08010653

0800fab8 <__swbuf_r>:
 800fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faba:	460e      	mov	r6, r1
 800fabc:	4614      	mov	r4, r2
 800fabe:	4605      	mov	r5, r0
 800fac0:	b118      	cbz	r0, 800faca <__swbuf_r+0x12>
 800fac2:	6a03      	ldr	r3, [r0, #32]
 800fac4:	b90b      	cbnz	r3, 800faca <__swbuf_r+0x12>
 800fac6:	f7fe f9df 	bl	800de88 <__sinit>
 800faca:	69a3      	ldr	r3, [r4, #24]
 800facc:	60a3      	str	r3, [r4, #8]
 800face:	89a3      	ldrh	r3, [r4, #12]
 800fad0:	071a      	lsls	r2, r3, #28
 800fad2:	d525      	bpl.n	800fb20 <__swbuf_r+0x68>
 800fad4:	6923      	ldr	r3, [r4, #16]
 800fad6:	b31b      	cbz	r3, 800fb20 <__swbuf_r+0x68>
 800fad8:	6823      	ldr	r3, [r4, #0]
 800fada:	6922      	ldr	r2, [r4, #16]
 800fadc:	1a98      	subs	r0, r3, r2
 800fade:	6963      	ldr	r3, [r4, #20]
 800fae0:	b2f6      	uxtb	r6, r6
 800fae2:	4283      	cmp	r3, r0
 800fae4:	4637      	mov	r7, r6
 800fae6:	dc04      	bgt.n	800faf2 <__swbuf_r+0x3a>
 800fae8:	4621      	mov	r1, r4
 800faea:	4628      	mov	r0, r5
 800faec:	f7ff fc84 	bl	800f3f8 <_fflush_r>
 800faf0:	b9e0      	cbnz	r0, 800fb2c <__swbuf_r+0x74>
 800faf2:	68a3      	ldr	r3, [r4, #8]
 800faf4:	3b01      	subs	r3, #1
 800faf6:	60a3      	str	r3, [r4, #8]
 800faf8:	6823      	ldr	r3, [r4, #0]
 800fafa:	1c5a      	adds	r2, r3, #1
 800fafc:	6022      	str	r2, [r4, #0]
 800fafe:	701e      	strb	r6, [r3, #0]
 800fb00:	6962      	ldr	r2, [r4, #20]
 800fb02:	1c43      	adds	r3, r0, #1
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d004      	beq.n	800fb12 <__swbuf_r+0x5a>
 800fb08:	89a3      	ldrh	r3, [r4, #12]
 800fb0a:	07db      	lsls	r3, r3, #31
 800fb0c:	d506      	bpl.n	800fb1c <__swbuf_r+0x64>
 800fb0e:	2e0a      	cmp	r6, #10
 800fb10:	d104      	bne.n	800fb1c <__swbuf_r+0x64>
 800fb12:	4621      	mov	r1, r4
 800fb14:	4628      	mov	r0, r5
 800fb16:	f7ff fc6f 	bl	800f3f8 <_fflush_r>
 800fb1a:	b938      	cbnz	r0, 800fb2c <__swbuf_r+0x74>
 800fb1c:	4638      	mov	r0, r7
 800fb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb20:	4621      	mov	r1, r4
 800fb22:	4628      	mov	r0, r5
 800fb24:	f000 f806 	bl	800fb34 <__swsetup_r>
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	d0d5      	beq.n	800fad8 <__swbuf_r+0x20>
 800fb2c:	f04f 37ff 	mov.w	r7, #4294967295
 800fb30:	e7f4      	b.n	800fb1c <__swbuf_r+0x64>
	...

0800fb34 <__swsetup_r>:
 800fb34:	b538      	push	{r3, r4, r5, lr}
 800fb36:	4b2a      	ldr	r3, [pc, #168]	; (800fbe0 <__swsetup_r+0xac>)
 800fb38:	4605      	mov	r5, r0
 800fb3a:	6818      	ldr	r0, [r3, #0]
 800fb3c:	460c      	mov	r4, r1
 800fb3e:	b118      	cbz	r0, 800fb48 <__swsetup_r+0x14>
 800fb40:	6a03      	ldr	r3, [r0, #32]
 800fb42:	b90b      	cbnz	r3, 800fb48 <__swsetup_r+0x14>
 800fb44:	f7fe f9a0 	bl	800de88 <__sinit>
 800fb48:	89a3      	ldrh	r3, [r4, #12]
 800fb4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb4e:	0718      	lsls	r0, r3, #28
 800fb50:	d422      	bmi.n	800fb98 <__swsetup_r+0x64>
 800fb52:	06d9      	lsls	r1, r3, #27
 800fb54:	d407      	bmi.n	800fb66 <__swsetup_r+0x32>
 800fb56:	2309      	movs	r3, #9
 800fb58:	602b      	str	r3, [r5, #0]
 800fb5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fb5e:	81a3      	strh	r3, [r4, #12]
 800fb60:	f04f 30ff 	mov.w	r0, #4294967295
 800fb64:	e034      	b.n	800fbd0 <__swsetup_r+0x9c>
 800fb66:	0758      	lsls	r0, r3, #29
 800fb68:	d512      	bpl.n	800fb90 <__swsetup_r+0x5c>
 800fb6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb6c:	b141      	cbz	r1, 800fb80 <__swsetup_r+0x4c>
 800fb6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb72:	4299      	cmp	r1, r3
 800fb74:	d002      	beq.n	800fb7c <__swsetup_r+0x48>
 800fb76:	4628      	mov	r0, r5
 800fb78:	f7fe fa9c 	bl	800e0b4 <_free_r>
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	6363      	str	r3, [r4, #52]	; 0x34
 800fb80:	89a3      	ldrh	r3, [r4, #12]
 800fb82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb86:	81a3      	strh	r3, [r4, #12]
 800fb88:	2300      	movs	r3, #0
 800fb8a:	6063      	str	r3, [r4, #4]
 800fb8c:	6923      	ldr	r3, [r4, #16]
 800fb8e:	6023      	str	r3, [r4, #0]
 800fb90:	89a3      	ldrh	r3, [r4, #12]
 800fb92:	f043 0308 	orr.w	r3, r3, #8
 800fb96:	81a3      	strh	r3, [r4, #12]
 800fb98:	6923      	ldr	r3, [r4, #16]
 800fb9a:	b94b      	cbnz	r3, 800fbb0 <__swsetup_r+0x7c>
 800fb9c:	89a3      	ldrh	r3, [r4, #12]
 800fb9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fba6:	d003      	beq.n	800fbb0 <__swsetup_r+0x7c>
 800fba8:	4621      	mov	r1, r4
 800fbaa:	4628      	mov	r0, r5
 800fbac:	f000 f884 	bl	800fcb8 <__smakebuf_r>
 800fbb0:	89a0      	ldrh	r0, [r4, #12]
 800fbb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbb6:	f010 0301 	ands.w	r3, r0, #1
 800fbba:	d00a      	beq.n	800fbd2 <__swsetup_r+0x9e>
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	60a3      	str	r3, [r4, #8]
 800fbc0:	6963      	ldr	r3, [r4, #20]
 800fbc2:	425b      	negs	r3, r3
 800fbc4:	61a3      	str	r3, [r4, #24]
 800fbc6:	6923      	ldr	r3, [r4, #16]
 800fbc8:	b943      	cbnz	r3, 800fbdc <__swsetup_r+0xa8>
 800fbca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fbce:	d1c4      	bne.n	800fb5a <__swsetup_r+0x26>
 800fbd0:	bd38      	pop	{r3, r4, r5, pc}
 800fbd2:	0781      	lsls	r1, r0, #30
 800fbd4:	bf58      	it	pl
 800fbd6:	6963      	ldrpl	r3, [r4, #20]
 800fbd8:	60a3      	str	r3, [r4, #8]
 800fbda:	e7f4      	b.n	800fbc6 <__swsetup_r+0x92>
 800fbdc:	2000      	movs	r0, #0
 800fbde:	e7f7      	b.n	800fbd0 <__swsetup_r+0x9c>
 800fbe0:	200001f4 	.word	0x200001f4

0800fbe4 <_raise_r>:
 800fbe4:	291f      	cmp	r1, #31
 800fbe6:	b538      	push	{r3, r4, r5, lr}
 800fbe8:	4604      	mov	r4, r0
 800fbea:	460d      	mov	r5, r1
 800fbec:	d904      	bls.n	800fbf8 <_raise_r+0x14>
 800fbee:	2316      	movs	r3, #22
 800fbf0:	6003      	str	r3, [r0, #0]
 800fbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800fbf6:	bd38      	pop	{r3, r4, r5, pc}
 800fbf8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fbfa:	b112      	cbz	r2, 800fc02 <_raise_r+0x1e>
 800fbfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc00:	b94b      	cbnz	r3, 800fc16 <_raise_r+0x32>
 800fc02:	4620      	mov	r0, r4
 800fc04:	f000 f830 	bl	800fc68 <_getpid_r>
 800fc08:	462a      	mov	r2, r5
 800fc0a:	4601      	mov	r1, r0
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc12:	f000 b817 	b.w	800fc44 <_kill_r>
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d00a      	beq.n	800fc30 <_raise_r+0x4c>
 800fc1a:	1c59      	adds	r1, r3, #1
 800fc1c:	d103      	bne.n	800fc26 <_raise_r+0x42>
 800fc1e:	2316      	movs	r3, #22
 800fc20:	6003      	str	r3, [r0, #0]
 800fc22:	2001      	movs	r0, #1
 800fc24:	e7e7      	b.n	800fbf6 <_raise_r+0x12>
 800fc26:	2400      	movs	r4, #0
 800fc28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	4798      	blx	r3
 800fc30:	2000      	movs	r0, #0
 800fc32:	e7e0      	b.n	800fbf6 <_raise_r+0x12>

0800fc34 <raise>:
 800fc34:	4b02      	ldr	r3, [pc, #8]	; (800fc40 <raise+0xc>)
 800fc36:	4601      	mov	r1, r0
 800fc38:	6818      	ldr	r0, [r3, #0]
 800fc3a:	f7ff bfd3 	b.w	800fbe4 <_raise_r>
 800fc3e:	bf00      	nop
 800fc40:	200001f4 	.word	0x200001f4

0800fc44 <_kill_r>:
 800fc44:	b538      	push	{r3, r4, r5, lr}
 800fc46:	4d07      	ldr	r5, [pc, #28]	; (800fc64 <_kill_r+0x20>)
 800fc48:	2300      	movs	r3, #0
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	4608      	mov	r0, r1
 800fc4e:	4611      	mov	r1, r2
 800fc50:	602b      	str	r3, [r5, #0]
 800fc52:	f7f2 ff21 	bl	8002a98 <_kill>
 800fc56:	1c43      	adds	r3, r0, #1
 800fc58:	d102      	bne.n	800fc60 <_kill_r+0x1c>
 800fc5a:	682b      	ldr	r3, [r5, #0]
 800fc5c:	b103      	cbz	r3, 800fc60 <_kill_r+0x1c>
 800fc5e:	6023      	str	r3, [r4, #0]
 800fc60:	bd38      	pop	{r3, r4, r5, pc}
 800fc62:	bf00      	nop
 800fc64:	20000e88 	.word	0x20000e88

0800fc68 <_getpid_r>:
 800fc68:	f7f2 bf0e 	b.w	8002a88 <_getpid>

0800fc6c <__swhatbuf_r>:
 800fc6c:	b570      	push	{r4, r5, r6, lr}
 800fc6e:	460c      	mov	r4, r1
 800fc70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc74:	2900      	cmp	r1, #0
 800fc76:	b096      	sub	sp, #88	; 0x58
 800fc78:	4615      	mov	r5, r2
 800fc7a:	461e      	mov	r6, r3
 800fc7c:	da0d      	bge.n	800fc9a <__swhatbuf_r+0x2e>
 800fc7e:	89a3      	ldrh	r3, [r4, #12]
 800fc80:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fc84:	f04f 0100 	mov.w	r1, #0
 800fc88:	bf0c      	ite	eq
 800fc8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fc8e:	2340      	movne	r3, #64	; 0x40
 800fc90:	2000      	movs	r0, #0
 800fc92:	6031      	str	r1, [r6, #0]
 800fc94:	602b      	str	r3, [r5, #0]
 800fc96:	b016      	add	sp, #88	; 0x58
 800fc98:	bd70      	pop	{r4, r5, r6, pc}
 800fc9a:	466a      	mov	r2, sp
 800fc9c:	f000 f848 	bl	800fd30 <_fstat_r>
 800fca0:	2800      	cmp	r0, #0
 800fca2:	dbec      	blt.n	800fc7e <__swhatbuf_r+0x12>
 800fca4:	9901      	ldr	r1, [sp, #4]
 800fca6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fcaa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fcae:	4259      	negs	r1, r3
 800fcb0:	4159      	adcs	r1, r3
 800fcb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcb6:	e7eb      	b.n	800fc90 <__swhatbuf_r+0x24>

0800fcb8 <__smakebuf_r>:
 800fcb8:	898b      	ldrh	r3, [r1, #12]
 800fcba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fcbc:	079d      	lsls	r5, r3, #30
 800fcbe:	4606      	mov	r6, r0
 800fcc0:	460c      	mov	r4, r1
 800fcc2:	d507      	bpl.n	800fcd4 <__smakebuf_r+0x1c>
 800fcc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fcc8:	6023      	str	r3, [r4, #0]
 800fcca:	6123      	str	r3, [r4, #16]
 800fccc:	2301      	movs	r3, #1
 800fcce:	6163      	str	r3, [r4, #20]
 800fcd0:	b002      	add	sp, #8
 800fcd2:	bd70      	pop	{r4, r5, r6, pc}
 800fcd4:	ab01      	add	r3, sp, #4
 800fcd6:	466a      	mov	r2, sp
 800fcd8:	f7ff ffc8 	bl	800fc6c <__swhatbuf_r>
 800fcdc:	9900      	ldr	r1, [sp, #0]
 800fcde:	4605      	mov	r5, r0
 800fce0:	4630      	mov	r0, r6
 800fce2:	f7fe fdab 	bl	800e83c <_malloc_r>
 800fce6:	b948      	cbnz	r0, 800fcfc <__smakebuf_r+0x44>
 800fce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcec:	059a      	lsls	r2, r3, #22
 800fcee:	d4ef      	bmi.n	800fcd0 <__smakebuf_r+0x18>
 800fcf0:	f023 0303 	bic.w	r3, r3, #3
 800fcf4:	f043 0302 	orr.w	r3, r3, #2
 800fcf8:	81a3      	strh	r3, [r4, #12]
 800fcfa:	e7e3      	b.n	800fcc4 <__smakebuf_r+0xc>
 800fcfc:	89a3      	ldrh	r3, [r4, #12]
 800fcfe:	6020      	str	r0, [r4, #0]
 800fd00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd04:	81a3      	strh	r3, [r4, #12]
 800fd06:	9b00      	ldr	r3, [sp, #0]
 800fd08:	6163      	str	r3, [r4, #20]
 800fd0a:	9b01      	ldr	r3, [sp, #4]
 800fd0c:	6120      	str	r0, [r4, #16]
 800fd0e:	b15b      	cbz	r3, 800fd28 <__smakebuf_r+0x70>
 800fd10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd14:	4630      	mov	r0, r6
 800fd16:	f000 f81d 	bl	800fd54 <_isatty_r>
 800fd1a:	b128      	cbz	r0, 800fd28 <__smakebuf_r+0x70>
 800fd1c:	89a3      	ldrh	r3, [r4, #12]
 800fd1e:	f023 0303 	bic.w	r3, r3, #3
 800fd22:	f043 0301 	orr.w	r3, r3, #1
 800fd26:	81a3      	strh	r3, [r4, #12]
 800fd28:	89a3      	ldrh	r3, [r4, #12]
 800fd2a:	431d      	orrs	r5, r3
 800fd2c:	81a5      	strh	r5, [r4, #12]
 800fd2e:	e7cf      	b.n	800fcd0 <__smakebuf_r+0x18>

0800fd30 <_fstat_r>:
 800fd30:	b538      	push	{r3, r4, r5, lr}
 800fd32:	4d07      	ldr	r5, [pc, #28]	; (800fd50 <_fstat_r+0x20>)
 800fd34:	2300      	movs	r3, #0
 800fd36:	4604      	mov	r4, r0
 800fd38:	4608      	mov	r0, r1
 800fd3a:	4611      	mov	r1, r2
 800fd3c:	602b      	str	r3, [r5, #0]
 800fd3e:	f7f2 ff0a 	bl	8002b56 <_fstat>
 800fd42:	1c43      	adds	r3, r0, #1
 800fd44:	d102      	bne.n	800fd4c <_fstat_r+0x1c>
 800fd46:	682b      	ldr	r3, [r5, #0]
 800fd48:	b103      	cbz	r3, 800fd4c <_fstat_r+0x1c>
 800fd4a:	6023      	str	r3, [r4, #0]
 800fd4c:	bd38      	pop	{r3, r4, r5, pc}
 800fd4e:	bf00      	nop
 800fd50:	20000e88 	.word	0x20000e88

0800fd54 <_isatty_r>:
 800fd54:	b538      	push	{r3, r4, r5, lr}
 800fd56:	4d06      	ldr	r5, [pc, #24]	; (800fd70 <_isatty_r+0x1c>)
 800fd58:	2300      	movs	r3, #0
 800fd5a:	4604      	mov	r4, r0
 800fd5c:	4608      	mov	r0, r1
 800fd5e:	602b      	str	r3, [r5, #0]
 800fd60:	f7f2 ff09 	bl	8002b76 <_isatty>
 800fd64:	1c43      	adds	r3, r0, #1
 800fd66:	d102      	bne.n	800fd6e <_isatty_r+0x1a>
 800fd68:	682b      	ldr	r3, [r5, #0]
 800fd6a:	b103      	cbz	r3, 800fd6e <_isatty_r+0x1a>
 800fd6c:	6023      	str	r3, [r4, #0]
 800fd6e:	bd38      	pop	{r3, r4, r5, pc}
 800fd70:	20000e88 	.word	0x20000e88

0800fd74 <_init>:
 800fd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd76:	bf00      	nop
 800fd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd7a:	bc08      	pop	{r3}
 800fd7c:	469e      	mov	lr, r3
 800fd7e:	4770      	bx	lr

0800fd80 <_fini>:
 800fd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd82:	bf00      	nop
 800fd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd86:	bc08      	pop	{r3}
 800fd88:	469e      	mov	lr, r3
 800fd8a:	4770      	bx	lr
