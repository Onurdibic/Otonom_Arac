
OtonomArac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008098  08008098  00018098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084ac  080084ac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080084ac  080084ac  000184ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084b4  080084b4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080084b4  080084b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084bc  080084bc  000184bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080084c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000004ec  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200006c4  200006c4  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012adb  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003740  00000000  00000000  00032d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ef8  00000000  00000000  00036468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b73  00000000  00000000  00037360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000258aa  00000000  00000000  00037ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015dd4  00000000  00000000  0005d77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb724  00000000  00000000  00073551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d14  00000000  00000000  0013ec78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0014398c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008080 	.word	0x08008080

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008080 	.word	0x08008080

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b9a6 	b.w	8000fb0 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff21 	bl	8000acc <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fc97 	bl	80005e8 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc18 	bl	80004f4 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fc8e 	bl	80005e8 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff fad0 	bl	8000278 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	460d      	mov	r5, r1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	460f      	mov	r7, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14a      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0xe2>
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	b143      	cbz	r3, 8000d16 <__udivmoddi4+0x2e>
 8000d04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d08:	f1c3 0220 	rsb	r2, r3, #32
 8000d0c:	409f      	lsls	r7, r3
 8000d0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d12:	4317      	orrs	r7, r2
 8000d14:	409c      	lsls	r4, r3
 8000d16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d1a:	fa1f f58c 	uxth.w	r5, ip
 8000d1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d2c:	fb01 f005 	mul.w	r0, r1, r5
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x62>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d3c:	f080 811c 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f240 8119 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4462      	add	r2, ip
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	b2a4      	uxth	r4, r4
 8000d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5a:	fb00 f505 	mul.w	r5, r0, r5
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x90>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6a:	f080 8107 	bcs.w	8000f7c <__udivmoddi4+0x294>
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	f240 8104 	bls.w	8000f7c <__udivmoddi4+0x294>
 8000d74:	4464      	add	r4, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11e      	cbz	r6, 8000d8a <__udivmoddi4+0xa2>
 8000d82:	40dc      	lsrs	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0xbc>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80ed 	beq.w	8000f72 <__udivmoddi4+0x28a>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	fab3 f183 	clz	r1, r3
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d149      	bne.n	8000e40 <__udivmoddi4+0x158>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d302      	bcc.n	8000db6 <__udivmoddi4+0xce>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f200 80f8 	bhi.w	8000fa6 <__udivmoddi4+0x2be>
 8000db6:	1a84      	subs	r4, r0, r2
 8000db8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	4617      	mov	r7, r2
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d0e2      	beq.n	8000d8a <__udivmoddi4+0xa2>
 8000dc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc8:	e7df      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xe6>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f382 	clz	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8090 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dde:	fa1f fe8c 	uxth.w	lr, ip
 8000de2:	2101      	movs	r1, #1
 8000de4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dec:	0c22      	lsrs	r2, r4, #16
 8000dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000df2:	fb0e f005 	mul.w	r0, lr, r5
 8000df6:	4290      	cmp	r0, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4290      	cmp	r0, r2
 8000e06:	f200 80cb 	bhi.w	8000fa0 <__udivmoddi4+0x2b8>
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	1a12      	subs	r2, r2, r0
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e14:	fb07 2210 	mls	r2, r7, r0, r2
 8000e18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x14e>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x14c>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80bb 	bhi.w	8000faa <__udivmoddi4+0x2c2>
 8000e34:	4610      	mov	r0, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3e:	e79f      	b.n	8000d80 <__udivmoddi4+0x98>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e52:	fa20 f307 	lsr.w	r3, r0, r7
 8000e56:	40fd      	lsrs	r5, r7
 8000e58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	fb09 5518 	mls	r5, r9, r8, r5
 8000e6a:	0c1c      	lsrs	r4, r3, #16
 8000e6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e70:	fb08 f50e 	mul.w	r5, r8, lr
 8000e74:	42a5      	cmp	r5, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2b4>
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2b4>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4464      	add	r4, ip
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	b29d      	uxth	r5, r3
 8000e9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2ac>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2ac>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46ae      	mov	lr, r5
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x29c>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x298>
 8000ed8:	b156      	cbz	r6, 8000ef0 <__udivmoddi4+0x208>
 8000eda:	ebb0 0208 	subs.w	r2, r0, r8
 8000ede:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee6:	40ca      	lsrs	r2, r1
 8000ee8:	40cc      	lsrs	r4, r1
 8000eea:	4317      	orrs	r7, r2
 8000eec:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef8:	f1c3 0120 	rsb	r1, r3, #32
 8000efc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f00:	fa20 f201 	lsr.w	r2, r0, r1
 8000f04:	fa25 f101 	lsr.w	r1, r5, r1
 8000f08:	409d      	lsls	r5, r3
 8000f0a:	432a      	orrs	r2, r5
 8000f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1510 	mls	r5, r7, r0, r1
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f22:	fb00 f50e 	mul.w	r5, r0, lr
 8000f26:	428d      	cmp	r5, r1
 8000f28:	fa04 f403 	lsl.w	r4, r4, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x258>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1b49      	subs	r1, r1, r5
 8000f42:	b292      	uxth	r2, r2
 8000f44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f48:	fb07 1115 	mls	r1, r7, r5, r1
 8000f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f50:	fb05 f10e 	mul.w	r1, r5, lr
 8000f54:	4291      	cmp	r1, r2
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x282>
 8000f58:	eb1c 0202 	adds.w	r2, ip, r2
 8000f5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2a8>
 8000f62:	4291      	cmp	r1, r2
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2a8>
 8000f66:	3d02      	subs	r5, #2
 8000f68:	4462      	add	r2, ip
 8000f6a:	1a52      	subs	r2, r2, r1
 8000f6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0xfc>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e708      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000f78:	4639      	mov	r1, r7
 8000f7a:	e6e6      	b.n	8000d4a <__udivmoddi4+0x62>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	e6fb      	b.n	8000d78 <__udivmoddi4+0x90>
 8000f80:	4548      	cmp	r0, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f90:	4645      	mov	r5, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x282>
 8000f94:	462b      	mov	r3, r5
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f98:	4640      	mov	r0, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x258>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000fa0:	3d02      	subs	r5, #2
 8000fa2:	4462      	add	r2, ip
 8000fa4:	e732      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e70a      	b.n	8000dc0 <__udivmoddi4+0xd8>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e742      	b.n	8000e36 <__udivmoddi4+0x14e>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
 8000fce:	4b91      	ldr	r3, [pc, #580]	; (8001214 <MX_GPIO_Init+0x260>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a90      	ldr	r2, [pc, #576]	; (8001214 <MX_GPIO_Init+0x260>)
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b8e      	ldr	r3, [pc, #568]	; (8001214 <MX_GPIO_Init+0x260>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	4b8a      	ldr	r3, [pc, #552]	; (8001214 <MX_GPIO_Init+0x260>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a89      	ldr	r2, [pc, #548]	; (8001214 <MX_GPIO_Init+0x260>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b87      	ldr	r3, [pc, #540]	; (8001214 <MX_GPIO_Init+0x260>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b83      	ldr	r3, [pc, #524]	; (8001214 <MX_GPIO_Init+0x260>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a82      	ldr	r2, [pc, #520]	; (8001214 <MX_GPIO_Init+0x260>)
 800100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b80      	ldr	r3, [pc, #512]	; (8001214 <MX_GPIO_Init+0x260>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b7c      	ldr	r3, [pc, #496]	; (8001214 <MX_GPIO_Init+0x260>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a7b      	ldr	r2, [pc, #492]	; (8001214 <MX_GPIO_Init+0x260>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b79      	ldr	r3, [pc, #484]	; (8001214 <MX_GPIO_Init+0x260>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b75      	ldr	r3, [pc, #468]	; (8001214 <MX_GPIO_Init+0x260>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a74      	ldr	r2, [pc, #464]	; (8001214 <MX_GPIO_Init+0x260>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b72      	ldr	r3, [pc, #456]	; (8001214 <MX_GPIO_Init+0x260>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b6e      	ldr	r3, [pc, #440]	; (8001214 <MX_GPIO_Init+0x260>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a6d      	ldr	r2, [pc, #436]	; (8001214 <MX_GPIO_Init+0x260>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b6b      	ldr	r3, [pc, #428]	; (8001214 <MX_GPIO_Init+0x260>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2108      	movs	r1, #8
 8001076:	4868      	ldr	r0, [pc, #416]	; (8001218 <MX_GPIO_Init+0x264>)
 8001078:	f002 fb08 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2101      	movs	r1, #1
 8001080:	4866      	ldr	r0, [pc, #408]	; (800121c <MX_GPIO_Init+0x268>)
 8001082:	f002 fb03 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001086:	2200      	movs	r2, #0
 8001088:	f24f 0110 	movw	r1, #61456	; 0xf010
 800108c:	4864      	ldr	r0, [pc, #400]	; (8001220 <MX_GPIO_Init+0x26c>)
 800108e:	f002 fafd 	bl	800368c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001092:	2308      	movs	r3, #8
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	485b      	ldr	r0, [pc, #364]	; (8001218 <MX_GPIO_Init+0x264>)
 80010aa:	f002 f953 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010ae:	2301      	movs	r3, #1
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4855      	ldr	r0, [pc, #340]	; (800121c <MX_GPIO_Init+0x268>)
 80010c6:	f002 f945 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010ca:	2308      	movs	r3, #8
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010da:	2305      	movs	r3, #5
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	484d      	ldr	r0, [pc, #308]	; (800121c <MX_GPIO_Init+0x268>)
 80010e6:	f002 f935 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010ee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4849      	ldr	r0, [pc, #292]	; (8001224 <MX_GPIO_Init+0x270>)
 8001100:	f002 f928 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001104:	2310      	movs	r3, #16
 8001106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001114:	2306      	movs	r3, #6
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4841      	ldr	r0, [pc, #260]	; (8001224 <MX_GPIO_Init+0x270>)
 8001120:	f002 f918 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001124:	2304      	movs	r3, #4
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	483c      	ldr	r0, [pc, #240]	; (8001228 <MX_GPIO_Init+0x274>)
 8001138:	f002 f90c 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800113c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800114e:	2305      	movs	r3, #5
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4833      	ldr	r0, [pc, #204]	; (8001228 <MX_GPIO_Init+0x274>)
 800115a:	f002 f8fb 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800115e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001162:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	482a      	ldr	r0, [pc, #168]	; (8001220 <MX_GPIO_Init+0x26c>)
 8001178:	f002 f8ec 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800117c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800118e:	2306      	movs	r3, #6
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	4820      	ldr	r0, [pc, #128]	; (800121c <MX_GPIO_Init+0x268>)
 800119a:	f002 f8db 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800119e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	481c      	ldr	r0, [pc, #112]	; (8001224 <MX_GPIO_Init+0x270>)
 80011b4:	f002 f8ce 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80011b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011ca:	230a      	movs	r3, #10
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	4813      	ldr	r0, [pc, #76]	; (8001224 <MX_GPIO_Init+0x270>)
 80011d6:	f002 f8bd 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011da:	2320      	movs	r3, #32
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <MX_GPIO_Init+0x26c>)
 80011ee:	f002 f8b1 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011f6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_GPIO_Init+0x264>)
 8001208:	f002 f8a4 	bl	8003354 <HAL_GPIO_Init>

}
 800120c:	bf00      	nop
 800120e:	3730      	adds	r7, #48	; 0x30
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	40021000 	.word	0x40021000
 800121c:	40020800 	.word	0x40020800
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400

0800122c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_I2C1_Init+0x50>)
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <MX_I2C1_Init+0x54>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_I2C1_Init+0x50>)
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <MX_I2C1_Init+0x58>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_I2C1_Init+0x50>)
 800124a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <MX_I2C1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_I2C1_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_I2C1_Init+0x50>)
 800126a:	f002 fa29 	bl	80036c0 <HAL_I2C_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001274:	f000 fe3c 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001f4 	.word	0x200001f4
 8001280:	40005400 	.word	0x40005400
 8001284:	000186a0 	.word	0x000186a0

08001288 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_I2C_MspInit+0x84>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d12c      	bne.n	8001304 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80012c6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012cc:	2312      	movs	r3, #18
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d8:	2304      	movs	r3, #4
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <HAL_I2C_MspInit+0x8c>)
 80012e4:	f002 f836 	bl	8003354 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40005400 	.word	0x40005400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020400 	.word	0x40020400

08001318 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d106      	bne.n	800133a <prv_parse_number+0x22>
        t = gh->p.term_str;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3371      	adds	r3, #113	; 0x71
 8001330:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8001332:	e002      	b.n	800133a <prv_parse_number+0x22>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <prv_parse_number+0x30>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b20      	cmp	r3, #32
 8001346:	d0f5      	beq.n	8001334 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b2d      	cmp	r3, #45	; 0x2d
 800134e:	d104      	bne.n	800135a <prv_parse_number+0x42>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <prv_parse_number+0x44>
 800135a:	2300      	movs	r3, #0
 800135c:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 800135e:	e00d      	b.n	800137c <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	461a      	mov	r2, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3b30      	subs	r3, #48	; 0x30
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d007      	beq.n	8001392 <prv_parse_number+0x7a>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b2f      	cmp	r3, #47	; 0x2f
 8001388:	d903      	bls.n	8001392 <prv_parse_number+0x7a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b39      	cmp	r3, #57	; 0x39
 8001390:	d9e6      	bls.n	8001360 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8001392:	7afb      	ldrb	r3, [r7, #11]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <prv_parse_number+0x86>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	425b      	negs	r3, r3
 800139c:	e000      	b.n	80013a0 <prv_parse_number+0x88>
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d106      	bne.n	80013ca <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3371      	adds	r3, #113	; 0x71
 80013c0:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80013c2:	e002      	b.n	80013ca <prv_parse_float_number+0x1e>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <prv_parse_float_number+0x2c>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	d0f5      	beq.n	80013c4 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 80013d8:	2100      	movs	r1, #0
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f004 fe38 	bl	8006050 <strtod>
 80013e0:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80013e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80013ec:	eeb0 0a47 	vmov.f32	s0, s14
 80013f0:	eef0 0a67 	vmov.f32	s1, s15
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8001404:	2100      	movs	r1, #0
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffd0 	bl	80013ac <prv_parse_float_number>
 800140c:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8001410:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001414:	f7ff fb82 	bl	8000b1c <__aeabi_d2iz>
 8001418:	4603      	mov	r3, r0
 800141a:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <prv_parse_lat_long+0x94>)
 800141c:	fb82 1203 	smull	r1, r2, r2, r3
 8001420:	1152      	asrs	r2, r2, #5
 8001422:	17db      	asrs	r3, r3, #31
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f874 	bl	8000514 <__aeabi_i2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <prv_parse_lat_long+0x98>)
 800143a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800143e:	f7ff f8d3 	bl	80005e8 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800144a:	f7fe ff15 	bl	8000278 <__aeabi_dsub>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <prv_parse_lat_long+0x9c>)
 800145c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001460:	f7ff f9ec 	bl	800083c <__aeabi_ddiv>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800146c:	f7fe ff06 	bl	800027c <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800147c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001480:	eeb0 0a47 	vmov.f32	s0, s14
 8001484:	eef0 0a67 	vmov.f32	s1, s15
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	51eb851f 	.word	0x51eb851f
 8001494:	40590000 	.word	0x40590000
 8001498:	404e0000 	.word	0x404e0000

0800149c <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 800149c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80014ac:	2900      	cmp	r1, #0
 80014ae:	d169      	bne.n	8001584 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3371      	adds	r3, #113	; 0x71
 80014b4:	2206      	movs	r2, #6
 80014b6:	49ba      	ldr	r1, [pc, #744]	; (80017a0 <prv_parse_term+0x304>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 fee2 	bl	8006282 <strncmp>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d009      	beq.n	80014d8 <prv_parse_term+0x3c>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3371      	adds	r3, #113	; 0x71
 80014c8:	2206      	movs	r2, #6
 80014ca:	49b6      	ldr	r1, [pc, #728]	; (80017a4 <prv_parse_term+0x308>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fed8 	bl	8006282 <strncmp>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d104      	bne.n	80014e2 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80014e0:	e04e      	b.n	8001580 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3371      	adds	r3, #113	; 0x71
 80014e6:	2206      	movs	r2, #6
 80014e8:	49af      	ldr	r1, [pc, #700]	; (80017a8 <prv_parse_term+0x30c>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 fec9 	bl	8006282 <strncmp>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <prv_parse_term+0x6e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3371      	adds	r3, #113	; 0x71
 80014fa:	2206      	movs	r2, #6
 80014fc:	49ab      	ldr	r1, [pc, #684]	; (80017ac <prv_parse_term+0x310>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f004 febf 	bl	8006282 <strncmp>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d104      	bne.n	8001514 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2202      	movs	r2, #2
 800150e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001512:	e035      	b.n	8001580 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3371      	adds	r3, #113	; 0x71
 8001518:	2206      	movs	r2, #6
 800151a:	49a5      	ldr	r1, [pc, #660]	; (80017b0 <prv_parse_term+0x314>)
 800151c:	4618      	mov	r0, r3
 800151e:	f004 feb0 	bl	8006282 <strncmp>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d009      	beq.n	800153c <prv_parse_term+0xa0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3371      	adds	r3, #113	; 0x71
 800152c:	2206      	movs	r2, #6
 800152e:	49a1      	ldr	r1, [pc, #644]	; (80017b4 <prv_parse_term+0x318>)
 8001530:	4618      	mov	r0, r3
 8001532:	f004 fea6 	bl	8006282 <strncmp>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d104      	bne.n	8001546 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2203      	movs	r2, #3
 8001540:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001544:	e01c      	b.n	8001580 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3371      	adds	r3, #113	; 0x71
 800154a:	2206      	movs	r2, #6
 800154c:	499a      	ldr	r1, [pc, #616]	; (80017b8 <prv_parse_term+0x31c>)
 800154e:	4618      	mov	r0, r3
 8001550:	f004 fe97 	bl	8006282 <strncmp>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <prv_parse_term+0xd2>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3371      	adds	r3, #113	; 0x71
 800155e:	2206      	movs	r2, #6
 8001560:	4996      	ldr	r1, [pc, #600]	; (80017bc <prv_parse_term+0x320>)
 8001562:	4618      	mov	r0, r3
 8001564:	f004 fe8d 	bl	8006282 <strncmp>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d104      	bne.n	8001578 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2204      	movs	r2, #4
 8001572:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001576:	e003      	b.n	8001580 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8001580:	2301      	movs	r3, #1
 8001582:	e231      	b.n	80019e8 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800158a:	2900      	cmp	r1, #0
 800158c:	f000 822b 	beq.w	80019e6 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001596:	2901      	cmp	r1, #1
 8001598:	f040 80c9 	bne.w	800172e <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80015a2:	3b01      	subs	r3, #1
 80015a4:	2b0a      	cmp	r3, #10
 80015a6:	f200 8213 	bhi.w	80019d0 <prv_parse_term+0x534>
 80015aa:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <prv_parse_term+0x114>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	080015dd 	.word	0x080015dd
 80015b4:	08001657 	.word	0x08001657
 80015b8:	0800166d 	.word	0x0800166d
 80015bc:	08001697 	.word	0x08001697
 80015c0:	080016ad 	.word	0x080016ad
 80015c4:	080016d7 	.word	0x080016d7
 80015c8:	080016eb 	.word	0x080016eb
 80015cc:	080019d1 	.word	0x080019d1
 80015d0:	080016ff 	.word	0x080016ff
 80015d4:	080019d1 	.word	0x080019d1
 80015d8:	08001717 	.word	0x08001717
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80015e2:	3b30      	subs	r3, #48	; 0x30
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015f6:	4413      	add	r3, r2
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	3b30      	subs	r3, #48	; 0x30
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800160a:	3b30      	subs	r3, #48	; 0x30
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	0092      	lsls	r2, r2, #2
 8001612:	4413      	add	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	b2da      	uxtb	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800161e:	4413      	add	r3, r2
 8001620:	b2db      	uxtb	r3, r3
 8001622:	3b30      	subs	r3, #48	; 0x30
 8001624:	b2da      	uxtb	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001632:	3b30      	subs	r3, #48	; 0x30
 8001634:	b2db      	uxtb	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	4413      	add	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	b2da      	uxtb	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001646:	4413      	add	r3, r2
 8001648:	b2db      	uxtb	r3, r3
 800164a:	3b30      	subs	r3, #48	; 0x30
 800164c:	b2da      	uxtb	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8001654:	e1c7      	b.n	80019e6 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fed0 	bl	80013fc <prv_parse_lat_long>
 800165c:	eeb0 7a40 	vmov.f32	s14, s0
 8001660:	eef0 7a60 	vmov.f32	s15, s1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800166a:	e1bc      	b.n	80019e6 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001672:	2b53      	cmp	r3, #83	; 0x53
 8001674:	d005      	beq.n	8001682 <prv_parse_term+0x1e6>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800167c:	2b73      	cmp	r3, #115	; 0x73
 800167e:	f040 81a9 	bne.w	80019d4 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001688:	4690      	mov	r8, r2
 800168a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8001694:	e19e      	b.n	80019d4 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff feb0 	bl	80013fc <prv_parse_lat_long>
 800169c:	eeb0 7a40 	vmov.f32	s14, s0
 80016a0:	eef0 7a60 	vmov.f32	s15, s1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80016aa:	e19c      	b.n	80019e6 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80016b2:	2b57      	cmp	r3, #87	; 0x57
 80016b4:	d005      	beq.n	80016c2 <prv_parse_term+0x226>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80016bc:	2b77      	cmp	r3, #119	; 0x77
 80016be:	f040 818b 	bne.w	80019d8 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80016c8:	4614      	mov	r4, r2
 80016ca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 80016d4:	e180      	b.n	80019d8 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80016d6:	2100      	movs	r1, #0
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fe1d 	bl	8001318 <prv_parse_number>
 80016de:	4603      	mov	r3, r0
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 80016e8:	e17d      	b.n	80019e6 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80016ea:	2100      	movs	r1, #0
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fe13 	bl	8001318 <prv_parse_number>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 80016fc:	e173      	b.n	80019e6 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 80016fe:	2100      	movs	r1, #0
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fe53 	bl	80013ac <prv_parse_float_number>
 8001706:	eeb0 7a40 	vmov.f32	s14, s0
 800170a:	eef0 7a60 	vmov.f32	s15, s1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001714:	e167      	b.n	80019e6 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fe47 	bl	80013ac <prv_parse_float_number>
 800171e:	eeb0 7a40 	vmov.f32	s14, s0
 8001722:	eef0 7a60 	vmov.f32	s15, s1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 800172c:	e15b      	b.n	80019e6 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001734:	2902      	cmp	r1, #2
 8001736:	f040 8083 	bne.w	8001840 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001740:	3b02      	subs	r3, #2
 8001742:	2b0f      	cmp	r3, #15
 8001744:	d860      	bhi.n	8001808 <prv_parse_term+0x36c>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <prv_parse_term+0x2b0>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	0800178d 	.word	0x0800178d
 8001750:	08001809 	.word	0x08001809
 8001754:	08001809 	.word	0x08001809
 8001758:	08001809 	.word	0x08001809
 800175c:	08001809 	.word	0x08001809
 8001760:	08001809 	.word	0x08001809
 8001764:	08001809 	.word	0x08001809
 8001768:	08001809 	.word	0x08001809
 800176c:	08001809 	.word	0x08001809
 8001770:	08001809 	.word	0x08001809
 8001774:	08001809 	.word	0x08001809
 8001778:	08001809 	.word	0x08001809
 800177c:	08001809 	.word	0x08001809
 8001780:	080017c1 	.word	0x080017c1
 8001784:	080017d9 	.word	0x080017d9
 8001788:	080017f1 	.word	0x080017f1
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 800178c:	2100      	movs	r1, #0
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fdc2 	bl	8001318 <prv_parse_number>
 8001794:	4603      	mov	r3, r0
 8001796:	b2da      	uxtb	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 800179e:	e122      	b.n	80019e6 <prv_parse_term+0x54a>
 80017a0:	08008098 	.word	0x08008098
 80017a4:	080080a0 	.word	0x080080a0
 80017a8:	080080a8 	.word	0x080080a8
 80017ac:	080080b0 	.word	0x080080b0
 80017b0:	080080b8 	.word	0x080080b8
 80017b4:	080080c0 	.word	0x080080c0
 80017b8:	080080c8 	.word	0x080080c8
 80017bc:	080080d0 	.word	0x080080d0
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80017c0:	2100      	movs	r1, #0
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fdf2 	bl	80013ac <prv_parse_float_number>
 80017c8:	eeb0 7a40 	vmov.f32	s14, s0
 80017cc:	eef0 7a60 	vmov.f32	s15, s1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80017d6:	e106      	b.n	80019e6 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80017d8:	2100      	movs	r1, #0
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fde6 	bl	80013ac <prv_parse_float_number>
 80017e0:	eeb0 7a40 	vmov.f32	s14, s0
 80017e4:	eef0 7a60 	vmov.f32	s15, s1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80017ee:	e0fa      	b.n	80019e6 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80017f0:	2100      	movs	r1, #0
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fdda 	bl	80013ac <prv_parse_float_number>
 80017f8:	eeb0 7a40 	vmov.f32	s14, s0
 80017fc:	eef0 7a60 	vmov.f32	s15, s1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001806:	e0ee      	b.n	80019e6 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800180e:	2b02      	cmp	r3, #2
 8001810:	f240 80e4 	bls.w	80019dc <prv_parse_term+0x540>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800181a:	2b0e      	cmp	r3, #14
 800181c:	f200 80de 	bhi.w	80019dc <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8001820:	2100      	movs	r1, #0
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fd78 	bl	8001318 <prv_parse_number>
 8001828:	4602      	mov	r2, r0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001830:	3b03      	subs	r3, #3
 8001832:	b2d1      	uxtb	r1, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	4413      	add	r3, r2
 8001838:	460a      	mov	r2, r1
 800183a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 800183e:	e0cd      	b.n	80019dc <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001846:	2903      	cmp	r1, #3
 8001848:	d11b      	bne.n	8001882 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001850:	2b02      	cmp	r3, #2
 8001852:	d002      	beq.n	800185a <prv_parse_term+0x3be>
 8001854:	2b03      	cmp	r3, #3
 8001856:	d00a      	beq.n	800186e <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001858:	e0c5      	b.n	80019e6 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 800185a:	2100      	movs	r1, #0
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fd5b 	bl	8001318 <prv_parse_number>
 8001862:	4603      	mov	r3, r0
 8001864:	b2da      	uxtb	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 800186c:	e0bb      	b.n	80019e6 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800186e:	2100      	movs	r1, #0
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fd51 	bl	8001318 <prv_parse_number>
 8001876:	4603      	mov	r3, r0
 8001878:	b2da      	uxtb	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001880:	e0b1      	b.n	80019e6 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001888:	2904      	cmp	r1, #4
 800188a:	f040 80ac 	bne.w	80019e6 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001894:	3902      	subs	r1, #2
 8001896:	2909      	cmp	r1, #9
 8001898:	f200 80a2 	bhi.w	80019e0 <prv_parse_term+0x544>
 800189c:	a001      	add	r0, pc, #4	; (adr r0, 80018a4 <prv_parse_term+0x408>)
 800189e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80018a2:	bf00      	nop
 80018a4:	080018cd 	.word	0x080018cd
 80018a8:	080019e1 	.word	0x080019e1
 80018ac:	080019e1 	.word	0x080019e1
 80018b0:	080019e1 	.word	0x080019e1
 80018b4:	080019e1 	.word	0x080019e1
 80018b8:	080018e7 	.word	0x080018e7
 80018bc:	080018ff 	.word	0x080018ff
 80018c0:	08001917 	.word	0x08001917
 80018c4:	08001991 	.word	0x08001991
 80018c8:	080019a9 	.word	0x080019a9
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80018d2:	2b41      	cmp	r3, #65	; 0x41
 80018d4:	bf0c      	ite	eq
 80018d6:	2301      	moveq	r3, #1
 80018d8:	2300      	movne	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80018e4:	e07f      	b.n	80019e6 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80018e6:	2100      	movs	r1, #0
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fd5f 	bl	80013ac <prv_parse_float_number>
 80018ee:	eeb0 7a40 	vmov.f32	s14, s0
 80018f2:	eef0 7a60 	vmov.f32	s15, s1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80018fc:	e073      	b.n	80019e6 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 80018fe:	2100      	movs	r1, #0
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fd53 	bl	80013ac <prv_parse_float_number>
 8001906:	eeb0 7a40 	vmov.f32	s14, s0
 800190a:	eef0 7a60 	vmov.f32	s15, s1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001914:	e067      	b.n	80019e6 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800191c:	3b30      	subs	r3, #48	; 0x30
 800191e:	b2db      	uxtb	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	0092      	lsls	r2, r2, #2
 8001924:	4413      	add	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	b2da      	uxtb	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001930:	4413      	add	r3, r2
 8001932:	b2db      	uxtb	r3, r3
 8001934:	3b30      	subs	r3, #48	; 0x30
 8001936:	b2da      	uxtb	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001944:	3b30      	subs	r3, #48	; 0x30
 8001946:	b2db      	uxtb	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	4413      	add	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001958:	4413      	add	r3, r2
 800195a:	b2db      	uxtb	r3, r3
 800195c:	3b30      	subs	r3, #48	; 0x30
 800195e:	b2da      	uxtb	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800196c:	3b30      	subs	r3, #48	; 0x30
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	0092      	lsls	r2, r2, #2
 8001974:	4413      	add	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001980:	4413      	add	r3, r2
 8001982:	b2db      	uxtb	r3, r3
 8001984:	3b30      	subs	r3, #48	; 0x30
 8001986:	b2da      	uxtb	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 800198e:	e02a      	b.n	80019e6 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8001990:	2100      	movs	r1, #0
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fd0a 	bl	80013ac <prv_parse_float_number>
 8001998:	eeb0 7a40 	vmov.f32	s14, s0
 800199c:	eef0 7a60 	vmov.f32	s15, s1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80019a6:	e01e      	b.n	80019e6 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80019ae:	2957      	cmp	r1, #87	; 0x57
 80019b0:	d004      	beq.n	80019bc <prv_parse_term+0x520>
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80019b8:	2977      	cmp	r1, #119	; 0x77
 80019ba:	d113      	bne.n	80019e4 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 80019c2:	4602      	mov	r2, r0
 80019c4:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 80019ce:	e009      	b.n	80019e4 <prv_parse_term+0x548>
                break;
 80019d0:	bf00      	nop
 80019d2:	e008      	b.n	80019e6 <prv_parse_term+0x54a>
                break;
 80019d4:	bf00      	nop
 80019d6:	e006      	b.n	80019e6 <prv_parse_term+0x54a>
                break;
 80019d8:	bf00      	nop
 80019da:	e004      	b.n	80019e6 <prv_parse_term+0x54a>
                break;
 80019dc:	bf00      	nop
 80019de:	e002      	b.n	80019e6 <prv_parse_term+0x54a>
            default:
                break;
 80019e0:	bf00      	nop
 80019e2:	e000      	b.n	80019e6 <prv_parse_term+0x54a>
                break;
 80019e4:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019f2:	bf00      	nop

080019f4 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a02:	2b2f      	cmp	r3, #47	; 0x2f
 8001a04:	d90d      	bls.n	8001a22 <prv_check_crc+0x2e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a0c:	2b39      	cmp	r3, #57	; 0x39
 8001a0e:	d808      	bhi.n	8001a22 <prv_check_crc+0x2e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a16:	3b30      	subs	r3, #48	; 0x30
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	b25a      	sxtb	r2, r3
 8001a20:	e026      	b.n	8001a70 <prv_check_crc+0x7c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a28:	2b60      	cmp	r3, #96	; 0x60
 8001a2a:	d90d      	bls.n	8001a48 <prv_check_crc+0x54>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a32:	2b7a      	cmp	r3, #122	; 0x7a
 8001a34:	d808      	bhi.n	8001a48 <prv_check_crc+0x54>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a3c:	3b57      	subs	r3, #87	; 0x57
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	b25a      	sxtb	r2, r3
 8001a46:	e013      	b.n	8001a70 <prv_check_crc+0x7c>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a4e:	2b40      	cmp	r3, #64	; 0x40
 8001a50:	d90d      	bls.n	8001a6e <prv_check_crc+0x7a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a58:	2b5a      	cmp	r3, #90	; 0x5a
 8001a5a:	d808      	bhi.n	8001a6e <prv_check_crc+0x7a>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a62:	3b37      	subs	r3, #55	; 0x37
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	b25a      	sxtb	r2, r3
 8001a6c:	e000      	b.n	8001a70 <prv_check_crc+0x7c>
 8001a6e:	2200      	movs	r2, #0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001a76:	2b2f      	cmp	r3, #47	; 0x2f
 8001a78:	d90c      	bls.n	8001a94 <prv_check_crc+0xa0>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001a80:	2b39      	cmp	r3, #57	; 0x39
 8001a82:	d807      	bhi.n	8001a94 <prv_check_crc+0xa0>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	e028      	b.n	8001ae6 <prv_check_crc+0xf2>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001a9a:	2b60      	cmp	r3, #96	; 0x60
 8001a9c:	d90e      	bls.n	8001abc <prv_check_crc+0xc8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001aa4:	2b7a      	cmp	r3, #122	; 0x7a
 8001aa6:	d809      	bhi.n	8001abc <prv_check_crc+0xc8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001aae:	3b57      	subs	r3, #87	; 0x57
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	b25b      	sxtb	r3, r3
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	e014      	b.n	8001ae6 <prv_check_crc+0xf2>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001ac2:	2b40      	cmp	r3, #64	; 0x40
 8001ac4:	d90e      	bls.n	8001ae4 <prv_check_crc+0xf0>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001acc:	2b5a      	cmp	r3, #90	; 0x5a
 8001ace:	d809      	bhi.n	8001ae4 <prv_check_crc+0xf0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001ad6:	3b37      	subs	r3, #55	; 0x37
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	e000      	b.n	8001ae6 <prv_check_crc+0xf2>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	bf0c      	ite	eq
 8001af8:	2301      	moveq	r3, #1
 8001afa:	2300      	movne	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d136      	bne.n	8001b8a <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b88:	e061      	b.n	8001c4e <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d121      	bne.n	8001bd8 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	33a1      	adds	r3, #161	; 0xa1
 8001bce:	220c      	movs	r2, #12
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f004 fbdc 	bl	800638e <memcpy>
 8001bd6:	e03a      	b.n	8001c4e <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d106      	bne.n	8001bf0 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001bee:	e02e      	b.n	8001c4e <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d129      	bne.n	8001c4e <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001c60:	22b0      	movs	r2, #176	; 0xb0
 8001c62:	2100      	movs	r1, #0
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f004 fb04 	bl	8006272 <memset>
    return 1;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001c84:	e0ad      	b.n	8001de2 <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b24      	cmp	r3, #36	; 0x24
 8001c8c:	d128      	bne.n	8001ce0 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3370      	adds	r3, #112	; 0x70
 8001c92:	2240      	movs	r2, #64	; 0x40
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 faeb 	bl	8006272 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001ca2:	2b0b      	cmp	r3, #11
 8001ca4:	f200 8097 	bhi.w	8001dd6 <lwgps_process+0x162>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001cae:	4619      	mov	r1, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001cde:	e07a      	b.n	8001dd6 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ce6:	d11d      	bne.n	8001d24 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff fbd7 	bl	800149c <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4053      	eors	r3, r2
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001d18:	3301      	adds	r3, #1
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001d22:	e058      	b.n	8001dd6 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b2a      	cmp	r3, #42	; 0x2a
 8001d2a:	d117      	bne.n	8001d5c <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7ff fbb5 	bl	800149c <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001d50:	3301      	adds	r3, #1
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001d5a:	e03c      	b.n	8001dd6 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b0d      	cmp	r3, #13
 8001d62:	d109      	bne.n	8001d78 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff fe45 	bl	80019f4 <prv_check_crc>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d032      	beq.n	8001dd6 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7ff feca 	bl	8001b0a <prv_copy_from_tmp_memory>
 8001d76:	e02e      	b.n	8001dd6 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4053      	eors	r3, r2
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001d9c:	2b0b      	cmp	r3, #11
 8001d9e:	d81a      	bhi.n	8001dd6 <lwgps_process+0x162>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001da6:	4619      	mov	r1, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f47f af4e 	bne.w	8001c86 <lwgps_process+0x12>
        }
    }
    return 1;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df8:	f001 f896 	bl	8002f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dfc:	f000 f80e 	bl	8001e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e00:	f7ff f8d8 	bl	8000fb4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e04:	f7ff fa12 	bl	800122c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001e08:	f000 f966 	bl	80020d8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001e0c:	f000 fb20 	bl	8002450 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8001e10:	f000 f874 	bl	8001efc <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001e14:	f000 f8ae 	bl	8001f74 <loop>
 8001e18:	e7fc      	b.n	8001e14 <main+0x20>
	...

08001e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b094      	sub	sp, #80	; 0x50
 8001e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e22:	f107 0320 	add.w	r3, r7, #32
 8001e26:	2230      	movs	r2, #48	; 0x30
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 fa21 	bl	8006272 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <SystemClock_Config+0xcc>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	4a27      	ldr	r2, [pc, #156]	; (8001ee8 <SystemClock_Config+0xcc>)
 8001e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <SystemClock_Config+0xcc>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <SystemClock_Config+0xd0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a21      	ldr	r2, [pc, #132]	; (8001eec <SystemClock_Config+0xd0>)
 8001e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <SystemClock_Config+0xd0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e82:	2302      	movs	r3, #2
 8001e84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e96:	2302      	movs	r3, #2
 8001e98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e9e:	f107 0320 	add.w	r3, r7, #32
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f001 fd50 	bl	8003948 <HAL_RCC_OscConfig>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001eae:	f000 f81f 	bl	8001ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ebe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ec2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	2105      	movs	r1, #5
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f001 ffb1 	bl	8003e38 <HAL_RCC_ClockConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001edc:	f000 f808 	bl	8001ef0 <Error_Handler>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3750      	adds	r7, #80	; 0x50
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40007000 	.word	0x40007000

08001ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <Error_Handler+0x8>
	...

08001efc <setup>:
void Gorevler();
void Gorevler1();


void setup()
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af02      	add	r7, sp, #8
	uart3.Yapilandir(115200, GPIOD, GPIO_PIN_8,GPIOB ,GPIO_PIN_11);
 8001f02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <setup+0x54>)
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f10:	4a10      	ldr	r2, [pc, #64]	; (8001f54 <setup+0x58>)
 8001f12:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001f16:	4810      	ldr	r0, [pc, #64]	; (8001f58 <setup+0x5c>)
 8001f18:	f000 fe1f 	bl	8002b5a <_ZN4Uart10YapilandirEmP12GPIO_TypeDeftS1_t>
	gps.Yapilandir();
 8001f1c:	480f      	ldr	r0, [pc, #60]	; (8001f5c <setup+0x60>)
 8001f1e:	f000 fbbb 	bl	8002698 <_ZN3GPS10YapilandirEv>
	timer7.Yapilandir(84000,5);
 8001f22:	2205      	movs	r2, #5
 8001f24:	490e      	ldr	r1, [pc, #56]	; (8001f60 <setup+0x64>)
 8001f26:	480f      	ldr	r0, [pc, #60]	; (8001f64 <setup+0x68>)
 8001f28:	f000 fede 	bl	8002ce8 <_ZN5Timer10YapilandirEmm>
	timer7.AktifEt();
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <setup+0x68>)
 8001f2e:	f000 fefa 	bl	8002d26 <_ZN5Timer7AktifEtEv>
	gorev.GorevAl(Gorevler,1000);
 8001f32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f36:	490c      	ldr	r1, [pc, #48]	; (8001f68 <setup+0x6c>)
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <setup+0x70>)
 8001f3a:	f000 fd4b 	bl	80029d4 <_ZN13Gorevyonetici7GorevAlEPFvvEs>
	gorev.GorevAl(Gorevler1, 500);
 8001f3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f42:	490b      	ldr	r1, [pc, #44]	; (8001f70 <setup+0x74>)
 8001f44:	4809      	ldr	r0, [pc, #36]	; (8001f6c <setup+0x70>)
 8001f46:	f000 fd45 	bl	80029d4 <_ZN13Gorevyonetici7GorevAlEPFvvEs>
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40020c00 	.word	0x40020c00
 8001f58:	20000254 	.word	0x20000254
 8001f5c:	20000328 	.word	0x20000328
 8001f60:	00014820 	.word	0x00014820
 8001f64:	200002b4 	.word	0x200002b4
 8001f68:	08001f89 	.word	0x08001f89
 8001f6c:	200002b8 	.word	0x200002b8
 8001f70:	08001ff5 	.word	0x08001ff5

08001f74 <loop>:

void loop()
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	gorev.GorevCalistir();
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <loop+0x10>)
 8001f7a:	f000 fdad 	bl	8002ad8 <_ZN13Gorevyonetici13GorevCalistirEv>
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002b8 	.word	0x200002b8

08001f88 <_Z8Gorevlerv>:

void Gorevler()
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	ed2d 8b02 	vpush	{d8}
 8001f8e:	af00      	add	r7, sp, #0
	//gps.LatitudeAl();
	//gps.LongitudeAl();
	GPIOD->ODR ^= GPIO_PIN_12;
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <_Z8Gorevlerv+0x58>)
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <_Z8Gorevlerv+0x58>)
 8001f96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f9a:	6153      	str	r3, [r2, #20]
	gpsPaket.PaketOlustur(*gps.LatitudeAl(),*gps.LongitudeAl());
 8001f9c:	4811      	ldr	r0, [pc, #68]	; (8001fe4 <_Z8Gorevlerv+0x5c>)
 8001f9e:	f000 fbf4 	bl	800278a <_ZN3GPS10LatitudeAlEv>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	ed93 8a00 	vldr	s16, [r3]
 8001fa8:	480e      	ldr	r0, [pc, #56]	; (8001fe4 <_Z8Gorevlerv+0x5c>)
 8001faa:	f000 fbfb 	bl	80027a4 <_ZN3GPS11LongitudeAlEv>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	eef0 0a67 	vmov.f32	s1, s15
 8001fb8:	eeb0 0a48 	vmov.f32	s0, s16
 8001fbc:	480a      	ldr	r0, [pc, #40]	; (8001fe8 <_Z8Gorevlerv+0x60>)
 8001fbe:	f000 fc39 	bl	8002834 <_ZN5Paket12PaketOlusturEff>
	gpsPaket.PaketCagir(GpsDataPacket);
 8001fc2:	490a      	ldr	r1, [pc, #40]	; (8001fec <_Z8Gorevlerv+0x64>)
 8001fc4:	4808      	ldr	r0, [pc, #32]	; (8001fe8 <_Z8Gorevlerv+0x60>)
 8001fc6:	f000 fc84 	bl	80028d2 <_ZN5Paket10PaketCagirEPh>
	uart3.transmit(GpsDataPacket, sizeof(GpsDataPacket));
 8001fca:	220c      	movs	r2, #12
 8001fcc:	4907      	ldr	r1, [pc, #28]	; (8001fec <_Z8Gorevlerv+0x64>)
 8001fce:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <_Z8Gorevlerv+0x68>)
 8001fd0:	f000 fe1f 	bl	8002c12 <_ZN4Uart8transmitEPht>
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	ecbd 8b02 	vpop	{d8}
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	20000328 	.word	0x20000328
 8001fe8:	20000470 	.word	0x20000470
 8001fec:	20000248 	.word	0x20000248
 8001ff0:	20000254 	.word	0x20000254

08001ff4 <_Z9Gorevler1v>:
void Gorevler1()
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= GPIO_PIN_13;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <_Z9Gorevler1v+0x1c>)
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <_Z9Gorevler1v+0x1c>)
 8001ffe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002002:	6153      	str	r3, [r2, #20]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40020c00 	.word	0x40020c00

08002014 <TIM3_IRQHandler>:

extern "C" void TIM3_IRQHandler()
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	{
		gorev.BayrakKaldir();
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <TIM3_IRQHandler+0x10>)
 800201a:	f000 fd07 	bl	8002a2c <_ZN13Gorevyonetici12BayrakKaldirEv>
	}
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200002b8 	.word	0x200002b8

08002028 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	gps.UartRxCpltCallback();
 8002030:	4803      	ldr	r0, [pc, #12]	; (8002040 <HAL_UART_RxCpltCallback+0x18>)
 8002032:	f000 fb47 	bl	80026c4 <_ZN3GPS18UartRxCpltCallbackEv>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000328 	.word	0x20000328

08002044 <_Z41__static_initialization_and_destruction_0ii>:
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af02      	add	r7, sp, #8
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d120      	bne.n	8002096 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800205a:	4293      	cmp	r3, r2
 800205c:	d11b      	bne.n	8002096 <_Z41__static_initialization_and_destruction_0ii+0x52>
Uart uart3(USART3);
 800205e:	4910      	ldr	r1, [pc, #64]	; (80020a0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002060:	4810      	ldr	r0, [pc, #64]	; (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002062:	f000 fd6b 	bl	8002b3c <_ZN4UartC1EP13USART_TypeDef>
Timer timer7(TIM3);
 8002066:	4910      	ldr	r1, [pc, #64]	; (80020a8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002068:	4810      	ldr	r0, [pc, #64]	; (80020ac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800206a:	f000 fe2d 	bl	8002cc8 <_ZN5TimerC1EP11TIM_TypeDef>
Gorevyonetici gorev(TIM3);
 800206e:	490e      	ldr	r1, [pc, #56]	; (80020a8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002070:	480f      	ldr	r0, [pc, #60]	; (80020b0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002072:	f000 fc7b 	bl	800296c <_ZN13GorevyoneticiC1EP11TIM_TypeDef>
MyImu imu(&hi2c1);
 8002076:	490f      	ldr	r1, [pc, #60]	; (80020b4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002078:	480f      	ldr	r0, [pc, #60]	; (80020b8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800207a:	f000 fba0 	bl	80027be <_ZN5MyImuC1EP17I2C_HandleTypeDef>
GPS gps(&huart2);
 800207e:	490f      	ldr	r1, [pc, #60]	; (80020bc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002080:	480f      	ldr	r0, [pc, #60]	; (80020c0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002082:	f000 fae8 	bl	8002656 <_ZN3GPSC1EP20__UART_HandleTypeDef>
Paket gpsPaket(0x12, 0x34, 0x01, 0x08);
 8002086:	2308      	movs	r3, #8
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2301      	movs	r3, #1
 800208c:	2234      	movs	r2, #52	; 0x34
 800208e:	2112      	movs	r1, #18
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002092:	f000 fba3 	bl	80027dc <_ZN5PaketC1Ehhhh>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40004800 	.word	0x40004800
 80020a4:	20000254 	.word	0x20000254
 80020a8:	40000400 	.word	0x40000400
 80020ac:	200002b4 	.word	0x200002b4
 80020b0:	200002b8 	.word	0x200002b8
 80020b4:	200001f4 	.word	0x200001f4
 80020b8:	20000320 	.word	0x20000320
 80020bc:	200004e4 	.word	0x200004e4
 80020c0:	20000328 	.word	0x20000328
 80020c4:	20000470 	.word	0x20000470

080020c8 <_GLOBAL__sub_I_GpsDataPacket>:
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020d0:	2001      	movs	r0, #1
 80020d2:	f7ff ffb7 	bl	8002044 <_Z41__static_initialization_and_destruction_0ii>
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <MX_SPI1_Init+0x64>)
 80020de:	4a18      	ldr	r2, [pc, #96]	; (8002140 <MX_SPI1_Init+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <MX_SPI1_Init+0x64>)
 80020e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <MX_SPI1_Init+0x64>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <MX_SPI1_Init+0x64>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <MX_SPI1_Init+0x64>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <MX_SPI1_Init+0x64>)
 80020fe:	2200      	movs	r2, #0
 8002100:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <MX_SPI1_Init+0x64>)
 8002104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002108:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <MX_SPI1_Init+0x64>)
 800210c:	2200      	movs	r2, #0
 800210e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <MX_SPI1_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <MX_SPI1_Init+0x64>)
 8002118:	2200      	movs	r2, #0
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <MX_SPI1_Init+0x64>)
 800211e:	2200      	movs	r2, #0
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <MX_SPI1_Init+0x64>)
 8002124:	220a      	movs	r2, #10
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002128:	4804      	ldr	r0, [pc, #16]	; (800213c <MX_SPI1_Init+0x64>)
 800212a:	f002 f8a5 	bl	8004278 <HAL_SPI_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002134:	f7ff fedc 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000488 	.word	0x20000488
 8002140:	40013000 	.word	0x40013000

08002144 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a19      	ldr	r2, [pc, #100]	; (80021c8 <HAL_SPI_MspInit+0x84>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d12b      	bne.n	80021be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_SPI_MspInit+0x88>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_SPI_MspInit+0x88>)
 8002170:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_SPI_MspInit+0x88>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_SPI_MspInit+0x88>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a10      	ldr	r2, [pc, #64]	; (80021cc <HAL_SPI_MspInit+0x88>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_SPI_MspInit+0x88>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800219e:	23e0      	movs	r3, #224	; 0xe0
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ae:	2305      	movs	r3, #5
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <HAL_SPI_MspInit+0x8c>)
 80021ba:	f001 f8cb 	bl	8003354 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80021be:	bf00      	nop
 80021c0:	3728      	adds	r7, #40	; 0x28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40013000 	.word	0x40013000
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40020000 	.word	0x40020000

080021d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_MspInit+0x4c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <HAL_MspInit+0x4c>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_MspInit+0x4c>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_MspInit+0x4c>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a08      	ldr	r2, [pc, #32]	; (8002220 <HAL_MspInit+0x4c>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_MspInit+0x4c>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002212:	2007      	movs	r0, #7
 8002214:	f000 ffca 	bl	80031ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002228:	e7fe      	b.n	8002228 <NMI_Handler+0x4>

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002270:	f000 feac 	bl	8002fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <USART2_IRQHandler+0x10>)
 800227e:	f002 f985 	bl	800458c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200004e4 	.word	0x200004e4

0800228c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <USART3_IRQHandler+0x10>)
 8002292:	f002 f97b 	bl	800458c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000052c 	.word	0x2000052c

080022a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return 1;
 80022a4:	2301      	movs	r3, #1
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_kill>:

int _kill(int pid, int sig)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022ba:	f004 f83b 	bl	8006334 <__errno>
 80022be:	4603      	mov	r3, r0
 80022c0:	2216      	movs	r2, #22
 80022c2:	601a      	str	r2, [r3, #0]
  return -1;
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <_exit>:

void _exit (int status)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ffe7 	bl	80022b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022e2:	e7fe      	b.n	80022e2 <_exit+0x12>

080022e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e00a      	b.n	800230c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022f6:	f3af 8000 	nop.w
 80022fa:	4601      	mov	r1, r0
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	60ba      	str	r2, [r7, #8]
 8002302:	b2ca      	uxtb	r2, r1
 8002304:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3301      	adds	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	dbf0      	blt.n	80022f6 <_read+0x12>
  }

  return len;
 8002314:	687b      	ldr	r3, [r7, #4]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e009      	b.n	8002344 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	60ba      	str	r2, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	dbf1      	blt.n	8002330 <_write+0x12>
  }
  return len;
 800234c:	687b      	ldr	r3, [r7, #4]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <_close>:

int _close(int file)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800237e:	605a      	str	r2, [r3, #4]
  return 0;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_isatty>:

int _isatty(int file)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <_sbrk+0x5c>)
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <_sbrk+0x60>)
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <_sbrk+0x64>)
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <_sbrk+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d207      	bcs.n	8002400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f0:	f003 ffa0 	bl	8006334 <__errno>
 80023f4:	4603      	mov	r3, r0
 80023f6:	220c      	movs	r2, #12
 80023f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e009      	b.n	8002414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	4a05      	ldr	r2, [pc, #20]	; (8002424 <_sbrk+0x64>)
 8002410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20020000 	.word	0x20020000
 8002420:	00000400 	.word	0x00000400
 8002424:	200004e0 	.word	0x200004e0
 8002428:	200006c8 	.word	0x200006c8

0800242c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <SystemInit+0x20>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <SystemInit+0x20>)
 8002438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800243c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_USART2_UART_Init+0x4c>)
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <MX_USART2_UART_Init+0x50>)
 8002458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <MX_USART2_UART_Init+0x4c>)
 800245c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_USART2_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_USART2_UART_Init+0x4c>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_USART2_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_USART2_UART_Init+0x4c>)
 8002476:	220c      	movs	r2, #12
 8002478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_USART2_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_USART2_UART_Init+0x4c>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_USART2_UART_Init+0x4c>)
 8002488:	f001 ff7f 	bl	800438a <HAL_UART_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002492:	f7ff fd2d 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200004e4 	.word	0x200004e4
 80024a0:	40004400 	.word	0x40004400

080024a4 <HAL_UART_MspInit>:
  /* USER CODE END USART3_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	; 0x30
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 031c 	add.w	r3, r7, #28
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a4a      	ldr	r2, [pc, #296]	; (80025ec <HAL_UART_MspInit+0x148>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d134      	bne.n	8002530 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	4b49      	ldr	r3, [pc, #292]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a48      	ldr	r2, [pc, #288]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	4b42      	ldr	r3, [pc, #264]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a41      	ldr	r2, [pc, #260]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024fe:	230c      	movs	r3, #12
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250a:	2303      	movs	r3, #3
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800250e:	2307      	movs	r3, #7
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	4619      	mov	r1, r3
 8002518:	4836      	ldr	r0, [pc, #216]	; (80025f4 <HAL_UART_MspInit+0x150>)
 800251a:	f000 ff1b 	bl	8003354 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	2026      	movs	r0, #38	; 0x26
 8002524:	f000 fe4d 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002528:	2026      	movs	r0, #38	; 0x26
 800252a:	f000 fe66 	bl	80031fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800252e:	e058      	b.n	80025e2 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <HAL_UART_MspInit+0x154>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d153      	bne.n	80025e2 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b2c      	ldr	r3, [pc, #176]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a2b      	ldr	r2, [pc, #172]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a24      	ldr	r2, [pc, #144]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 800257c:	f043 0308 	orr.w	r3, r3, #8
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_UART_MspInit+0x14c>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800258e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025a0:	2307      	movs	r3, #7
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	4619      	mov	r1, r3
 80025aa:	4814      	ldr	r0, [pc, #80]	; (80025fc <HAL_UART_MspInit+0x158>)
 80025ac:	f000 fed2 	bl	8003354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025c2:	2307      	movs	r3, #7
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c6:	f107 031c 	add.w	r3, r7, #28
 80025ca:	4619      	mov	r1, r3
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <HAL_UART_MspInit+0x15c>)
 80025ce:	f000 fec1 	bl	8003354 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	2027      	movs	r0, #39	; 0x27
 80025d8:	f000 fdf3 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025dc:	2027      	movs	r0, #39	; 0x27
 80025de:	f000 fe0c 	bl	80031fa <HAL_NVIC_EnableIRQ>
}
 80025e2:	bf00      	nop
 80025e4:	3730      	adds	r7, #48	; 0x30
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40004400 	.word	0x40004400
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40004800 	.word	0x40004800
 80025fc:	40020400 	.word	0x40020400
 8002600:	40020c00 	.word	0x40020c00

08002604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800263c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002608:	f7ff ff10 	bl	800242c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800260c:	480c      	ldr	r0, [pc, #48]	; (8002640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800260e:	490d      	ldr	r1, [pc, #52]	; (8002644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002614:	e002      	b.n	800261c <LoopCopyDataInit>

08002616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261a:	3304      	adds	r3, #4

0800261c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800261c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002620:	d3f9      	bcc.n	8002616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002624:	4c0a      	ldr	r4, [pc, #40]	; (8002650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002628:	e001      	b.n	800262e <LoopFillZerobss>

0800262a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800262c:	3204      	adds	r2, #4

0800262e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002630:	d3fb      	bcc.n	800262a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002632:	f003 fe85 	bl	8006340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002636:	f7ff fbdd 	bl	8001df4 <main>
  bx  lr    
 800263a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800263c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002644:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002648:	080084c0 	.word	0x080084c0
  ldr r2, =_sbss
 800264c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002650:	200006c4 	.word	0x200006c4

08002654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002654:	e7fe      	b.n	8002654 <ADC_IRQHandler>

08002656 <_ZN3GPSC1EP20__UART_HandleTypeDef>:
 *  Created on: Jun 29, 2024
 *      Author: onurd
 */
#include "Gps.h"

GPS::GPS(UART_HandleTypeDef* huart)
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
{
	this->huart_=huart;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	601a      	str	r2, [r3, #0]
	this->rxIndex_u8=0;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	this->rxData_u8=0;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	this->latitude_f32=0;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	this->longitude_f32=0;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <_ZN3GPS10YapilandirEv>:

void GPS::Yapilandir()
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
    lwgps_init(&gps_);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3308      	adds	r3, #8
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fad7 	bl	8001c58 <lwgps_init>
    HAL_UART_Receive_IT(huart_, &rxData_u8, 1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f203 1339 	addw	r3, r3, #313	; 0x139
 80026b4:	2201      	movs	r2, #1
 80026b6:	4619      	mov	r1, r3
 80026b8:	f001 ff42 	bl	8004540 <HAL_UART_Receive_IT>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <_ZN3GPS18UartRxCpltCallbackEv>:

void GPS::UartRxCpltCallback()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
    if (rxData_u8 != '\n' && rxIndex_u8 < sizeof(rxBuffer_))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 80026d2:	2b0a      	cmp	r3, #10
 80026d4:	d016      	beq.n	8002704 <_ZN3GPS18UartRxCpltCallbackEv+0x40>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80026dc:	b25b      	sxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db10      	blt.n	8002704 <_ZN3GPS18UartRxCpltCallbackEv+0x40>
    {
        rxBuffer_[rxIndex_u8++] = rxData_u8;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	b2d1      	uxtb	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	f882 1138 	strb.w	r1, [r2, #312]	; 0x138
 80026f2:	4619      	mov	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	440b      	add	r3, r1
 80026fe:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8002702:	e017      	b.n	8002734 <_ZN3GPS18UartRxCpltCallbackEv+0x70>
    }
    else
    {
        lwgps_process(&gps_, rxBuffer_, rxIndex_u8 + 1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f103 0008 	add.w	r0, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002716:	3301      	adds	r3, #1
 8002718:	461a      	mov	r2, r3
 800271a:	f7ff faab 	bl	8001c74 <lwgps_process>
        GpsDataCek();
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f815 	bl	800274e <_ZN3GPS10GpsDataCekEv>
        rxIndex_u8 = 0;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
        rxData_u8 = 0;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    }
    HAL_UART_Receive_IT(huart_, &rxData_u8, 1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f203 1339 	addw	r3, r3, #313	; 0x139
 800273e:	2201      	movs	r2, #1
 8002740:	4619      	mov	r1, r3
 8002742:	f001 fefd 	bl	8004540 <HAL_UART_Receive_IT>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <_ZN3GPS10GpsDataCekEv>:

void GPS::GpsDataCek()
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
	 latitude_f32 = gps_.latitude;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f7fe fa24 	bl	8000bac <__aeabi_d2f>
 8002764:	4602      	mov	r2, r0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	 longitude_f32 = gps_.longitude;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f7fe fa19 	bl	8000bac <__aeabi_d2f>
 800277a:	4602      	mov	r2, r0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <_ZN3GPS10LatitudeAlEv>:

float* GPS::LatitudeAl()
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
    return &latitude_f32;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f503 739e 	add.w	r3, r3, #316	; 0x13c
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <_ZN3GPS11LongitudeAlEv>:

float* GPS::LongitudeAl()
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
    return &longitude_f32;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <_ZN5MyImuC1EP17I2C_HandleTypeDef>:
 */
#include "Imu.h"

extern UART_HandleTypeDef huart2;

MyImu::MyImu(I2C_HandleTypeDef *hi2c) : hi2c_(hi2c) {}
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_ZN5PaketC1Ehhhh>:
 *      Author: onurd
 */
#include "Paket.h"
#include <string.h>

Paket::Paket(uint8_t baslik1_u8, uint8_t baslik2_u8, uint8_t paketTipi_u8, uint8_t dataBoyutu_u8)
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	70fb      	strb	r3, [r7, #3]
 80027ee:	460b      	mov	r3, r1
 80027f0:	70bb      	strb	r3, [r7, #2]
 80027f2:	4613      	mov	r3, r2
 80027f4:	707b      	strb	r3, [r7, #1]
{
	this->baslik1_u8=baslik1_u8;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	731a      	strb	r2, [r3, #12]
	this->baslik2_u8=baslik2_u8;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	78ba      	ldrb	r2, [r7, #2]
 8002800:	735a      	strb	r2, [r3, #13]
	this->paketTipi_u8=paketTipi_u8;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	787a      	ldrb	r2, [r7, #1]
 8002806:	739a      	strb	r2, [r3, #14]
	this->dataBoyutu_u8=dataBoyutu_u8;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7c3a      	ldrb	r2, [r7, #16]
 800280c:	73da      	strb	r2, [r3, #15]
	this->latitude=0;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	611a      	str	r2, [r3, #16]
	this->longitude=0;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	615a      	str	r2, [r3, #20]
    memset(paket, 0, sizeof(paket));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	220c      	movs	r2, #12
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fd24 	bl	8006272 <memset>
}
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_ZN5Paket12PaketOlusturEff>:

void Paket::PaketOlustur(float latitude,float longitude)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002840:	edc7 0a01 	vstr	s1, [r7, #4]
    paket[0] = baslik1_u8;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	7b1a      	ldrb	r2, [r3, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	701a      	strb	r2, [r3, #0]
    paket[1] = baslik2_u8;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	7b5a      	ldrb	r2, [r3, #13]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	705a      	strb	r2, [r3, #1]
    paket[2] = paketTipi_u8;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	7b9a      	ldrb	r2, [r3, #14]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	709a      	strb	r2, [r3, #2]
    paket[3] = dataBoyutu_u8;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	7bda      	ldrb	r2, [r3, #15]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	70da      	strb	r2, [r3, #3]
    this->latitude = latitude;
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	611a      	str	r2, [r3, #16]
    this->longitude = longitude;
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	615a      	str	r2, [r3, #20]
    uint8_t latBytes_u8[4];
    uint8_t lonBytes_u8[4];

    bytesToFloat(&latitude, latBytes_u8);
 8002870:	f107 0218 	add.w	r2, r7, #24
 8002874:	f107 0308 	add.w	r3, r7, #8
 8002878:	4619      	mov	r1, r3
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f838 	bl	80028f0 <_ZN5Paket12bytesToFloatEPfPh>
    bytesToFloat(&longitude, lonBytes_u8);
 8002880:	f107 0214 	add.w	r2, r7, #20
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	4619      	mov	r1, r3
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f831 	bl	80028f0 <_ZN5Paket12bytesToFloatEPfPh>

    for(int i = 0; i < 4; i++)
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e016      	b.n	80028c2 <_ZN5Paket12PaketOlusturEff+0x8e>
    {
        paket[7 - i] = latBytes_u8[i];
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	f107 0118 	add.w	r1, r7, #24
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	440a      	add	r2, r1
 80028a2:	7811      	ldrb	r1, [r2, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	54d1      	strb	r1, [r2, r3]
        paket[11 - i] = lonBytes_u8[i];
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 030b 	rsb	r3, r3, #11
 80028ae:	f107 0114 	add.w	r1, r7, #20
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	440a      	add	r2, r1
 80028b6:	7811      	ldrb	r1, [r2, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	54d1      	strb	r1, [r2, r3]
    for(int i = 0; i < 4; i++)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	3301      	adds	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	dde5      	ble.n	8002894 <_ZN5Paket12PaketOlusturEff+0x60>
    }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <_ZN5Paket10PaketCagirEPh>:
void Paket::PaketCagir(uint8_t *kopyaDizi)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
	memcpy(kopyaDizi, paket, sizeof(paket));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	220c      	movs	r2, #12
 80028e0:	4619      	mov	r1, r3
 80028e2:	6838      	ldr	r0, [r7, #0]
 80028e4:	f003 fd53 	bl	800638e <memcpy>
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <_ZN5Paket12bytesToFloatEPfPh>:
uint32_t Paket::bytesToFloat(float *koordinatDeger_f, uint8_t* bytes)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
    uint8_t* p = (uint8_t*)koordinatDeger_f;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 4; i++)
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	e00a      	b.n	800291c <_ZN5Paket12bytesToFloatEPfPh+0x2c>
    {
        bytes[i] = p[i];
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	441a      	add	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	440b      	add	r3, r1
 8002912:	7812      	ldrb	r2, [r2, #0]
 8002914:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3301      	adds	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b03      	cmp	r3, #3
 8002920:	ddf1      	ble.n	8002906 <_ZN5Paket12bytesToFloatEPfPh+0x16>
    }
    return (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | (bytes[0] & 0xFF);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3303      	adds	r3, #3
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	061a      	lsls	r2, r3, #24
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3302      	adds	r3, #2
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	041b      	lsls	r3, r3, #16
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3301      	adds	r3, #1
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	4313      	orrs	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	7812      	ldrb	r2, [r2, #0]
 8002942:	4313      	orrs	r3, r2
}
 8002944:	4618      	mov	r0, r3
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <_ZN5GorevC1Ev>:
#include "stm32f4xx_hal.h"
#include "stdint.h"

#define maxGorev 10

struct Gorev {
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	719a      	strb	r2, [r3, #6]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <_ZN13GorevyoneticiC1EP11TIM_TypeDef>:
#include "gorevyonetici.h"


Gorevyonetici::Gorevyonetici(TIM_TypeDef* pTimerAlan)
 800296c:	b5b0      	push	{r4, r5, r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	705a      	strb	r2, [r3, #1]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	709a      	strb	r2, [r3, #2]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	70da      	strb	r2, [r3, #3]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	711a      	strb	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3310      	adds	r3, #16
 8002998:	2409      	movs	r4, #9
 800299a:	461d      	mov	r5, r3
 800299c:	e004      	b.n	80029a8 <_ZN13GorevyoneticiC1EP11TIM_TypeDef+0x3c>
 800299e:	4628      	mov	r0, r5
 80029a0:	f7ff ffd6 	bl	8002950 <_ZN5GorevC1Ev>
 80029a4:	3508      	adds	r5, #8
 80029a6:	3c01      	subs	r4, #1
 80029a8:	2c00      	cmp	r4, #0
 80029aa:	daf8      	bge.n	800299e <_ZN13GorevyoneticiC1EP11TIM_TypeDef+0x32>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
{
    this->pTimerAlan = pTimerAlan;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	609a      	str	r2, [r3, #8]
}
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bdb0      	pop	{r4, r5, r7, pc}

080029d4 <_ZN13Gorevyonetici7GorevAlEPFvvEs>:

void Gorevyonetici::GorevAl(void (*gorev)(), int16_t ms_s16)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
	if (gorevSayac < maxGorev)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80029e8:	2b09      	cmp	r3, #9
 80029ea:	d819      	bhi.n	8002a20 <_ZN13Gorevyonetici7GorevAlEPFvvEs+0x4c>
	{
	    gorevler[gorevSayac].gorev = gorev;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3202      	adds	r2, #2
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	    gorevler[gorevSayac].ms_s16 = ms_s16;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	3302      	adds	r3, #2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	88fa      	ldrh	r2, [r7, #6]
 8002a0e:	809a      	strh	r2, [r3, #4]
	    gorevSayac++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002a16:	3301      	adds	r3, #1
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <_ZN13Gorevyonetici12BayrakKaldirEv>:
void Gorevyonetici::BayrakKaldir()
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
    pTimerAlan->SR &= ~(TIM_SR_UIF);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	611a      	str	r2, [r3, #16]
    Counter_u16++;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    for (int i = 0; i < gorevSayac; i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e01b      	b.n	8002a92 <_ZN13Gorevyonetici12BayrakKaldirEv+0x66>
    {
		if (0 == Counter_u16 % gorevler[i].ms_s16)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002a60:	461a      	mov	r2, r3
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3302      	adds	r3, #2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a70:	fb92 f1f3 	sdiv	r1, r2, r3
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <_ZN13Gorevyonetici12BayrakKaldirEv+0x60>
		{
		   gorevler[i].Bayrak = true;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3302      	adds	r3, #2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	2201      	movs	r2, #1
 8002a8a:	719a      	strb	r2, [r3, #6]
    for (int i = 0; i < gorevSayac; i++)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	dbdc      	blt.n	8002a5a <_ZN13Gorevyonetici12BayrakKaldirEv+0x2e>
		}
     }
    if (Counter_u16 % 1000 == 0)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002aa6:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <_ZN13Gorevyonetici12BayrakKaldirEv+0xa8>)
 8002aa8:	fba2 1203 	umull	r1, r2, r2, r3
 8002aac:	0992      	lsrs	r2, r2, #6
 8002aae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ab2:	fb01 f202 	mul.w	r2, r1, r2
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <_ZN13Gorevyonetici12BayrakKaldirEv+0x9a>
  	{
  	    Counter_u16=0;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  	}
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	10624dd3 	.word	0x10624dd3

08002ad8 <_ZN13Gorevyonetici13GorevCalistirEv>:

void Gorevyonetici::GorevCalistir()
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < gorevSayac; i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e01e      	b.n	8002b24 <_ZN13Gorevyonetici13GorevCalistirEv+0x4c>
	{
		if (gorevler[i].Bayrak && gorevler[i].gorev)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3302      	adds	r3, #2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	799b      	ldrb	r3, [r3, #6]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d013      	beq.n	8002b1e <_ZN13Gorevyonetici13GorevCalistirEv+0x46>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	3202      	adds	r2, #2
 8002afc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00c      	beq.n	8002b1e <_ZN13Gorevyonetici13GorevCalistirEv+0x46>
	    {
	        gorevler[i].Bayrak = false;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3302      	adds	r3, #2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	2200      	movs	r2, #0
 8002b10:	719a      	strb	r2, [r3, #6]
	        gorevler[i].gorev();
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	3202      	adds	r2, #2
 8002b18:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002b1c:	4798      	blx	r3
	for (int i = 0; i < gorevSayac; i++)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3301      	adds	r3, #1
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	dbd9      	blt.n	8002ae6 <_ZN13Gorevyonetici13GorevCalistirEv+0xe>
	    }
	}

}
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <_ZN4UartC1EP13USART_TypeDef>:
 *  Created on: Jul 11, 2024
 *      Author: onurd
 */
#include "myUart.h"

Uart::Uart(USART_TypeDef *pGirilenUart)
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
{
	this->pGirilenUart=pGirilenUart;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	601a      	str	r2, [r3, #0]
}
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <_ZN4Uart10YapilandirEmP12GPIO_TypeDeftS1_t>:

void Uart::Yapilandir(uint32_t baudRate, GPIO_TypeDef *txPort, uint16_t txPin, GPIO_TypeDef *rxPort, uint16_t rxPin) {
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	807b      	strh	r3, [r7, #2]

    GPIO_InitStruct.Pin = txPin;
 8002b68:	887a      	ldrh	r2, [r7, #2]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	64da      	str	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2202      	movs	r2, #2
 8002b72:	651a      	str	r2, [r3, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	659a      	str	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2207      	movs	r2, #7
 8002b84:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_GPIO_Init(txPort, &GPIO_InitStruct);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	334c      	adds	r3, #76	; 0x4c
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fbe1 	bl	8003354 <HAL_GPIO_Init>


    GPIO_InitStruct.Pin = rxPin;
 8002b92:	8bba      	ldrh	r2, [r7, #28]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	64da      	str	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	651a      	str	r2, [r3, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	659a      	str	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2207      	movs	r2, #7
 8002bae:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_GPIO_Init(rxPort, &GPIO_InitStruct);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	334c      	adds	r3, #76	; 0x4c
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	69b8      	ldr	r0, [r7, #24]
 8002bb8:	f000 fbcc 	bl	8003354 <HAL_GPIO_Init>


    huart.Instance = pGirilenUart;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
    huart.Init.BaudRate = baudRate;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	609a      	str	r2, [r3, #8]
    huart.Init.WordLength = UART_WORDLENGTH_8B;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	60da      	str	r2, [r3, #12]
    huart.Init.StopBits = UART_STOPBITS_1;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]
    huart.Init.Parity = UART_PARITY_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	615a      	str	r2, [r3, #20]
    huart.Init.Mode = UART_MODE_TX_RX;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	220c      	movs	r2, #12
 8002be0:	619a      	str	r2, [r3, #24]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	61da      	str	r2, [r3, #28]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	621a      	str	r2, [r3, #32]

    if (HAL_UART_Init(&huart) != HAL_OK)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 fbc9 	bl	800438a <HAL_UART_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2301      	movne	r3, #1
 8002c00:	2300      	moveq	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d000      	beq.n	8002c0a <_ZN4Uart10YapilandirEmP12GPIO_TypeDeftS1_t+0xb0>
    {
    	while(1)
 8002c08:	e7fe      	b.n	8002c08 <_ZN4Uart10YapilandirEmP12GPIO_TypeDeftS1_t+0xae>
    		{

    	    }
    }
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <_ZN4Uart8transmitEPht>:

void Uart::transmit(uint8_t *data, uint16_t size)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(&huart, data, size, HAL_MAX_DELAY);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1d18      	adds	r0, r3, #4
 8002c24:	88fa      	ldrh	r2, [r7, #6]
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	f001 fbfd 	bl	800442a <HAL_UART_Transmit>
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	db0b      	blt.n	8002c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	4907      	ldr	r1, [pc, #28]	; (8002c70 <__NVIC_EnableIRQ+0x38>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2001      	movs	r0, #1
 8002c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db0a      	blt.n	8002c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	490c      	ldr	r1, [pc, #48]	; (8002cc0 <__NVIC_SetPriority+0x4c>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	440b      	add	r3, r1
 8002c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c9c:	e00a      	b.n	8002cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4908      	ldr	r1, [pc, #32]	; (8002cc4 <__NVIC_SetPriority+0x50>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3b04      	subs	r3, #4
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	761a      	strb	r2, [r3, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <_ZN5TimerC1EP11TIM_TypeDef>:
#include "mytimer.h"

Timer::Timer(TIM_TypeDef* pTimerAlan)
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
{
    this->pTimerAlan = pTimerAlan;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	601a      	str	r2, [r3, #0]
    TimerClockAktifEt();
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f837 	bl	8002d4c <_ZN5Timer17TimerClockAktifEtEv>
}
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_ZN5Timer10YapilandirEmm>:

void Timer::Yapilandir(uint32_t prescaler_u32, uint32_t period_u32)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
	pTimerAlan->PSC = prescaler_u32 - 1;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	3a01      	subs	r2, #1
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
	pTimerAlan->ARR = period_u32 - 1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	3a01      	subs	r2, #1
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
	pTimerAlan->DIER |= TIM_DIER_UIE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	60da      	str	r2, [r3, #12]
    TimerInterruptAktifEt();
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f8a5 	bl	8002e68 <_ZN5Timer21TimerInterruptAktifEtEv>
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <_ZN5Timer7AktifEtEv>:

void Timer::AktifEt()
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
	pTimerAlan->CR1 |= TIM_CR1_CEN;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <_ZN5Timer17TimerClockAktifEtEv>:
{
    return pTimerAlan->CNT;
}

void Timer::TimerClockAktifEt()
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	; 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
    if (this->pTimerAlan == TIM2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5c:	d10e      	bne.n	8002d7c <_ZN5Timer17TimerClockAktifEtEv+0x30>
    {
        __HAL_RCC_TIM2_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	4a3a      	ldr	r2, [pc, #232]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6e:	4b38      	ldr	r3, [pc, #224]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	69fb      	ldr	r3, [r7, #28]
    }
    else if (this->pTimerAlan == TIM7)
    {
        __HAL_RCC_TIM7_CLK_ENABLE();
    }
}
 8002d7a:	e062      	b.n	8002e42 <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <_ZN5Timer17TimerClockAktifEtEv+0x108>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10e      	bne.n	8002da4 <_ZN5Timer17TimerClockAktifEtEv+0x58>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	4b31      	ldr	r3, [pc, #196]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a30      	ldr	r2, [pc, #192]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002d90:	f043 0302 	orr.w	r3, r3, #2
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b2e      	ldr	r3, [pc, #184]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	69bb      	ldr	r3, [r7, #24]
}
 8002da2:	e04e      	b.n	8002e42 <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM4)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2b      	ldr	r2, [pc, #172]	; (8002e58 <_ZN5Timer17TimerClockAktifEtEv+0x10c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10e      	bne.n	8002dcc <_ZN5Timer17TimerClockAktifEtEv+0x80>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697b      	ldr	r3, [r7, #20]
}
 8002dca:	e03a      	b.n	8002e42 <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM5)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a22      	ldr	r2, [pc, #136]	; (8002e5c <_ZN5Timer17TimerClockAktifEtEv+0x110>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10e      	bne.n	8002df4 <_ZN5Timer17TimerClockAktifEtEv+0xa8>
        __HAL_RCC_TIM5_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002de0:	f043 0308 	orr.w	r3, r3, #8
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
 8002de6:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
}
 8002df2:	e026      	b.n	8002e42 <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM6)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <_ZN5Timer17TimerClockAktifEtEv+0x114>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d10e      	bne.n	8002e1c <_ZN5Timer17TimerClockAktifEtEv+0xd0>
        __HAL_RCC_TIM6_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002e08:	f043 0310 	orr.w	r3, r3, #16
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
}
 8002e1a:	e012      	b.n	8002e42 <_ZN5Timer17TimerClockAktifEtEv+0xf6>
    else if (this->pTimerAlan == TIM7)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <_ZN5Timer17TimerClockAktifEtEv+0x118>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d10d      	bne.n	8002e42 <_ZN5Timer17TimerClockAktifEtEv+0xf6>
        __HAL_RCC_TIM7_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002e30:	f043 0320 	orr.w	r3, r3, #32
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <_ZN5Timer17TimerClockAktifEtEv+0x104>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
}
 8002e42:	bf00      	nop
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800
 8002e5c:	40000c00 	.word	0x40000c00
 8002e60:	40001000 	.word	0x40001000
 8002e64:	40001400 	.word	0x40001400

08002e68 <_ZN5Timer21TimerInterruptAktifEtEv>:

void Timer::TimerInterruptAktifEt()
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
    if (this->pTimerAlan == TIM2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d107      	bne.n	8002e8a <_ZN5Timer21TimerInterruptAktifEtEv+0x22>
    {
        NVIC_EnableIRQ(TIM2_IRQn);
 8002e7a:	201c      	movs	r0, #28
 8002e7c:	f7ff fedc 	bl	8002c38 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM2_IRQn, 2);
 8002e80:	2102      	movs	r1, #2
 8002e82:	201c      	movs	r0, #28
 8002e84:	f7ff fef6 	bl	8002c74 <__NVIC_SetPriority>
    else if (this->pTimerAlan == TIM7)
    {
        NVIC_EnableIRQ(TIM7_IRQn);
        NVIC_SetPriority(TIM7_IRQn, 2);
    }
}
 8002e88:	e03f      	b.n	8002f0a <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM3)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a21      	ldr	r2, [pc, #132]	; (8002f14 <_ZN5Timer21TimerInterruptAktifEtEv+0xac>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d107      	bne.n	8002ea4 <_ZN5Timer21TimerInterruptAktifEtEv+0x3c>
        NVIC_EnableIRQ(TIM3_IRQn);
 8002e94:	201d      	movs	r0, #29
 8002e96:	f7ff fecf 	bl	8002c38 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM3_IRQn, 2);
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	201d      	movs	r0, #29
 8002e9e:	f7ff fee9 	bl	8002c74 <__NVIC_SetPriority>
}
 8002ea2:	e032      	b.n	8002f0a <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM4)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1b      	ldr	r2, [pc, #108]	; (8002f18 <_ZN5Timer21TimerInterruptAktifEtEv+0xb0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d107      	bne.n	8002ebe <_ZN5Timer21TimerInterruptAktifEtEv+0x56>
        NVIC_EnableIRQ(TIM4_IRQn);
 8002eae:	201e      	movs	r0, #30
 8002eb0:	f7ff fec2 	bl	8002c38 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM4_IRQn, 2);
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	201e      	movs	r0, #30
 8002eb8:	f7ff fedc 	bl	8002c74 <__NVIC_SetPriority>
}
 8002ebc:	e025      	b.n	8002f0a <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM5)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a16      	ldr	r2, [pc, #88]	; (8002f1c <_ZN5Timer21TimerInterruptAktifEtEv+0xb4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d107      	bne.n	8002ed8 <_ZN5Timer21TimerInterruptAktifEtEv+0x70>
        NVIC_EnableIRQ(TIM5_IRQn);
 8002ec8:	2032      	movs	r0, #50	; 0x32
 8002eca:	f7ff feb5 	bl	8002c38 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM5_IRQn, 2);
 8002ece:	2102      	movs	r1, #2
 8002ed0:	2032      	movs	r0, #50	; 0x32
 8002ed2:	f7ff fecf 	bl	8002c74 <__NVIC_SetPriority>
}
 8002ed6:	e018      	b.n	8002f0a <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM6)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a10      	ldr	r2, [pc, #64]	; (8002f20 <_ZN5Timer21TimerInterruptAktifEtEv+0xb8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d107      	bne.n	8002ef2 <_ZN5Timer21TimerInterruptAktifEtEv+0x8a>
        NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ee2:	2036      	movs	r0, #54	; 0x36
 8002ee4:	f7ff fea8 	bl	8002c38 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM6_DAC_IRQn, 2);
 8002ee8:	2102      	movs	r1, #2
 8002eea:	2036      	movs	r0, #54	; 0x36
 8002eec:	f7ff fec2 	bl	8002c74 <__NVIC_SetPriority>
}
 8002ef0:	e00b      	b.n	8002f0a <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
    else if (this->pTimerAlan == TIM7)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a0b      	ldr	r2, [pc, #44]	; (8002f24 <_ZN5Timer21TimerInterruptAktifEtEv+0xbc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d106      	bne.n	8002f0a <_ZN5Timer21TimerInterruptAktifEtEv+0xa2>
        NVIC_EnableIRQ(TIM7_IRQn);
 8002efc:	2037      	movs	r0, #55	; 0x37
 8002efe:	f7ff fe9b 	bl	8002c38 <__NVIC_EnableIRQ>
        NVIC_SetPriority(TIM7_IRQn, 2);
 8002f02:	2102      	movs	r1, #2
 8002f04:	2037      	movs	r0, #55	; 0x37
 8002f06:	f7ff feb5 	bl	8002c74 <__NVIC_SetPriority>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40000800 	.word	0x40000800
 8002f1c:	40000c00 	.word	0x40000c00
 8002f20:	40001000 	.word	0x40001000
 8002f24:	40001400 	.word	0x40001400

08002f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f2c:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_Init+0x40>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0d      	ldr	r2, [pc, #52]	; (8002f68 <HAL_Init+0x40>)
 8002f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_Init+0x40>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <HAL_Init+0x40>)
 8002f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <HAL_Init+0x40>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <HAL_Init+0x40>)
 8002f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f50:	2003      	movs	r0, #3
 8002f52:	f000 f92b 	bl	80031ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f56:	2000      	movs	r0, #0
 8002f58:	f000 f808 	bl	8002f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f5c:	f7ff f93a 	bl	80021d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023c00 	.word	0x40023c00

08002f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f74:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_InitTick+0x54>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_InitTick+0x58>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f943 	bl	8003216 <HAL_SYSTICK_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00e      	b.n	8002fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b0f      	cmp	r3, #15
 8002f9e:	d80a      	bhi.n	8002fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	f000 f90b 	bl	80031c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fac:	4a06      	ldr	r2, [pc, #24]	; (8002fc8 <HAL_InitTick+0x5c>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	20000008 	.word	0x20000008
 8002fc8:	20000004 	.word	0x20000004

08002fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_IncTick+0x20>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_IncTick+0x24>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <HAL_IncTick+0x24>)
 8002fde:	6013      	str	r3, [r2, #0]
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000008 	.word	0x20000008
 8002ff0:	20000574 	.word	0x20000574

08002ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <HAL_GetTick+0x14>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000574 	.word	0x20000574

0800300c <__NVIC_SetPriorityGrouping>:
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003028:	4013      	ands	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303e:	4a04      	ldr	r2, [pc, #16]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	60d3      	str	r3, [r2, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_GetPriorityGrouping>:
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <__NVIC_GetPriorityGrouping+0x18>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	f003 0307 	and.w	r3, r3, #7
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_EnableIRQ>:
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	2b00      	cmp	r3, #0
 8003080:	db0b      	blt.n	800309a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	4907      	ldr	r1, [pc, #28]	; (80030a8 <__NVIC_EnableIRQ+0x38>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	2001      	movs	r0, #1
 8003092:	fa00 f202 	lsl.w	r2, r0, r2
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000e100 	.word	0xe000e100

080030ac <__NVIC_SetPriority>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	db0a      	blt.n	80030d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	490c      	ldr	r1, [pc, #48]	; (80030f8 <__NVIC_SetPriority+0x4c>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	440b      	add	r3, r1
 80030d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030d4:	e00a      	b.n	80030ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4908      	ldr	r1, [pc, #32]	; (80030fc <__NVIC_SetPriority+0x50>)
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3b04      	subs	r3, #4
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	440b      	add	r3, r1
 80030ea:	761a      	strb	r2, [r3, #24]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000e100 	.word	0xe000e100
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f1c3 0307 	rsb	r3, r3, #7
 800311a:	2b04      	cmp	r3, #4
 800311c:	bf28      	it	cs
 800311e:	2304      	movcs	r3, #4
 8003120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3304      	adds	r3, #4
 8003126:	2b06      	cmp	r3, #6
 8003128:	d902      	bls.n	8003130 <NVIC_EncodePriority+0x30>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3b03      	subs	r3, #3
 800312e:	e000      	b.n	8003132 <NVIC_EncodePriority+0x32>
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	401a      	ands	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003148:	f04f 31ff 	mov.w	r1, #4294967295
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	43d9      	mvns	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003158:	4313      	orrs	r3, r2
         );
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003178:	d301      	bcc.n	800317e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800317a:	2301      	movs	r3, #1
 800317c:	e00f      	b.n	800319e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <SysTick_Config+0x40>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003186:	210f      	movs	r1, #15
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	f7ff ff8e 	bl	80030ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <SysTick_Config+0x40>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003196:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <SysTick_Config+0x40>)
 8003198:	2207      	movs	r2, #7
 800319a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	e000e010 	.word	0xe000e010

080031ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ff29 	bl	800300c <__NVIC_SetPriorityGrouping>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031d4:	f7ff ff3e 	bl	8003054 <__NVIC_GetPriorityGrouping>
 80031d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	6978      	ldr	r0, [r7, #20]
 80031e0:	f7ff ff8e 	bl	8003100 <NVIC_EncodePriority>
 80031e4:	4602      	mov	r2, r0
 80031e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff5d 	bl	80030ac <__NVIC_SetPriority>
}
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	4603      	mov	r3, r0
 8003202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff31 	bl	8003070 <__NVIC_EnableIRQ>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff ffa2 	bl	8003168 <SysTick_Config>
 8003224:	4603      	mov	r3, r0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800323c:	f7ff feda 	bl	8002ff4 <HAL_GetTick>
 8003240:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d008      	beq.n	8003260 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e052      	b.n	8003306 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0216 	bic.w	r2, r2, #22
 800326e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800327e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <HAL_DMA_Abort+0x62>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0208 	bic.w	r2, r2, #8
 800329e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b0:	e013      	b.n	80032da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b2:	f7ff fe9f 	bl	8002ff4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b05      	cmp	r3, #5
 80032be:	d90c      	bls.n	80032da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2203      	movs	r2, #3
 80032ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e015      	b.n	8003306 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e4      	bne.n	80032b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	223f      	movs	r2, #63	; 0x3f
 80032ee:	409a      	lsls	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d004      	beq.n	800332c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e00c      	b.n	8003346 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2205      	movs	r2, #5
 8003330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	e16b      	b.n	8003648 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003370:	2201      	movs	r2, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	429a      	cmp	r2, r3
 800338a:	f040 815a 	bne.w	8003642 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d005      	beq.n	80033a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d130      	bne.n	8003408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	2203      	movs	r2, #3
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033dc:	2201      	movs	r2, #1
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 0201 	and.w	r2, r3, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	2b03      	cmp	r3, #3
 8003412:	d017      	beq.n	8003444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	2203      	movs	r2, #3
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d123      	bne.n	8003498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	08da      	lsrs	r2, r3, #3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3208      	adds	r2, #8
 8003458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	220f      	movs	r2, #15
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	08da      	lsrs	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	69b9      	ldr	r1, [r7, #24]
 8003494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2203      	movs	r2, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0203 	and.w	r2, r3, #3
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80b4 	beq.w	8003642 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	4b60      	ldr	r3, [pc, #384]	; (8003660 <HAL_GPIO_Init+0x30c>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	4a5f      	ldr	r2, [pc, #380]	; (8003660 <HAL_GPIO_Init+0x30c>)
 80034e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ea:	4b5d      	ldr	r3, [pc, #372]	; (8003660 <HAL_GPIO_Init+0x30c>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034f6:	4a5b      	ldr	r2, [pc, #364]	; (8003664 <HAL_GPIO_Init+0x310>)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	089b      	lsrs	r3, r3, #2
 80034fc:	3302      	adds	r3, #2
 80034fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	220f      	movs	r2, #15
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a52      	ldr	r2, [pc, #328]	; (8003668 <HAL_GPIO_Init+0x314>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d02b      	beq.n	800357a <HAL_GPIO_Init+0x226>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a51      	ldr	r2, [pc, #324]	; (800366c <HAL_GPIO_Init+0x318>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d025      	beq.n	8003576 <HAL_GPIO_Init+0x222>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a50      	ldr	r2, [pc, #320]	; (8003670 <HAL_GPIO_Init+0x31c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01f      	beq.n	8003572 <HAL_GPIO_Init+0x21e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4f      	ldr	r2, [pc, #316]	; (8003674 <HAL_GPIO_Init+0x320>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d019      	beq.n	800356e <HAL_GPIO_Init+0x21a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4e      	ldr	r2, [pc, #312]	; (8003678 <HAL_GPIO_Init+0x324>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <HAL_GPIO_Init+0x216>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a4d      	ldr	r2, [pc, #308]	; (800367c <HAL_GPIO_Init+0x328>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00d      	beq.n	8003566 <HAL_GPIO_Init+0x212>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4c      	ldr	r2, [pc, #304]	; (8003680 <HAL_GPIO_Init+0x32c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d007      	beq.n	8003562 <HAL_GPIO_Init+0x20e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4b      	ldr	r2, [pc, #300]	; (8003684 <HAL_GPIO_Init+0x330>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d101      	bne.n	800355e <HAL_GPIO_Init+0x20a>
 800355a:	2307      	movs	r3, #7
 800355c:	e00e      	b.n	800357c <HAL_GPIO_Init+0x228>
 800355e:	2308      	movs	r3, #8
 8003560:	e00c      	b.n	800357c <HAL_GPIO_Init+0x228>
 8003562:	2306      	movs	r3, #6
 8003564:	e00a      	b.n	800357c <HAL_GPIO_Init+0x228>
 8003566:	2305      	movs	r3, #5
 8003568:	e008      	b.n	800357c <HAL_GPIO_Init+0x228>
 800356a:	2304      	movs	r3, #4
 800356c:	e006      	b.n	800357c <HAL_GPIO_Init+0x228>
 800356e:	2303      	movs	r3, #3
 8003570:	e004      	b.n	800357c <HAL_GPIO_Init+0x228>
 8003572:	2302      	movs	r3, #2
 8003574:	e002      	b.n	800357c <HAL_GPIO_Init+0x228>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_GPIO_Init+0x228>
 800357a:	2300      	movs	r3, #0
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	f002 0203 	and.w	r2, r2, #3
 8003582:	0092      	lsls	r2, r2, #2
 8003584:	4093      	lsls	r3, r2
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800358c:	4935      	ldr	r1, [pc, #212]	; (8003664 <HAL_GPIO_Init+0x310>)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_GPIO_Init+0x334>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035be:	4a32      	ldr	r2, [pc, #200]	; (8003688 <HAL_GPIO_Init+0x334>)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c4:	4b30      	ldr	r3, [pc, #192]	; (8003688 <HAL_GPIO_Init+0x334>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035e8:	4a27      	ldr	r2, [pc, #156]	; (8003688 <HAL_GPIO_Init+0x334>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <HAL_GPIO_Init+0x334>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003612:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <HAL_GPIO_Init+0x334>)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_GPIO_Init+0x334>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800363c:	4a12      	ldr	r2, [pc, #72]	; (8003688 <HAL_GPIO_Init+0x334>)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3301      	adds	r3, #1
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	f67f ae90 	bls.w	8003370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3724      	adds	r7, #36	; 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	40013800 	.word	0x40013800
 8003668:	40020000 	.word	0x40020000
 800366c:	40020400 	.word	0x40020400
 8003670:	40020800 	.word	0x40020800
 8003674:	40020c00 	.word	0x40020c00
 8003678:	40021000 	.word	0x40021000
 800367c:	40021400 	.word	0x40021400
 8003680:	40021800 	.word	0x40021800
 8003684:	40021c00 	.word	0x40021c00
 8003688:	40013c00 	.word	0x40013c00

0800368c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
 8003698:	4613      	mov	r3, r2
 800369a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800369c:	787b      	ldrb	r3, [r7, #1]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036a8:	e003      	b.n	80036b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036aa:	887b      	ldrh	r3, [r7, #2]
 80036ac:	041a      	lsls	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	619a      	str	r2, [r3, #24]
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e12b      	b.n	800392a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd fdce 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	; 0x24
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003724:	f000 fd80 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 8003728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a81      	ldr	r2, [pc, #516]	; (8003934 <HAL_I2C_Init+0x274>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d807      	bhi.n	8003744 <HAL_I2C_Init+0x84>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a80      	ldr	r2, [pc, #512]	; (8003938 <HAL_I2C_Init+0x278>)
 8003738:	4293      	cmp	r3, r2
 800373a:	bf94      	ite	ls
 800373c:	2301      	movls	r3, #1
 800373e:	2300      	movhi	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e006      	b.n	8003752 <HAL_I2C_Init+0x92>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a7d      	ldr	r2, [pc, #500]	; (800393c <HAL_I2C_Init+0x27c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	bf94      	ite	ls
 800374c:	2301      	movls	r3, #1
 800374e:	2300      	movhi	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0e7      	b.n	800392a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a78      	ldr	r2, [pc, #480]	; (8003940 <HAL_I2C_Init+0x280>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	0c9b      	lsrs	r3, r3, #18
 8003764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a6a      	ldr	r2, [pc, #424]	; (8003934 <HAL_I2C_Init+0x274>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d802      	bhi.n	8003794 <HAL_I2C_Init+0xd4>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3301      	adds	r3, #1
 8003792:	e009      	b.n	80037a8 <HAL_I2C_Init+0xe8>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	4a69      	ldr	r2, [pc, #420]	; (8003944 <HAL_I2C_Init+0x284>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	099b      	lsrs	r3, r3, #6
 80037a6:	3301      	adds	r3, #1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	495c      	ldr	r1, [pc, #368]	; (8003934 <HAL_I2C_Init+0x274>)
 80037c4:	428b      	cmp	r3, r1
 80037c6:	d819      	bhi.n	80037fc <HAL_I2C_Init+0x13c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1e59      	subs	r1, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d6:	1c59      	adds	r1, r3, #1
 80037d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037dc:	400b      	ands	r3, r1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_I2C_Init+0x138>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1e59      	subs	r1, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f6:	e051      	b.n	800389c <HAL_I2C_Init+0x1dc>
 80037f8:	2304      	movs	r3, #4
 80037fa:	e04f      	b.n	800389c <HAL_I2C_Init+0x1dc>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d111      	bne.n	8003828 <HAL_I2C_Init+0x168>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e58      	subs	r0, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	440b      	add	r3, r1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e012      	b.n	800384e <HAL_I2C_Init+0x18e>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e58      	subs	r0, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	0099      	lsls	r1, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Init+0x196>
 8003852:	2301      	movs	r3, #1
 8003854:	e022      	b.n	800389c <HAL_I2C_Init+0x1dc>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10e      	bne.n	800387c <HAL_I2C_Init+0x1bc>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1e58      	subs	r0, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	440b      	add	r3, r1
 800386c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387a:	e00f      	b.n	800389c <HAL_I2C_Init+0x1dc>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	0099      	lsls	r1, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	6809      	ldr	r1, [r1, #0]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6911      	ldr	r1, [r2, #16]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	4311      	orrs	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	430b      	orrs	r3, r1
 80038de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	000186a0 	.word	0x000186a0
 8003938:	001e847f 	.word	0x001e847f
 800393c:	003d08ff 	.word	0x003d08ff
 8003940:	431bde83 	.word	0x431bde83
 8003944:	10624dd3 	.word	0x10624dd3

08003948 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e267      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d075      	beq.n	8003a52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003966:	4b88      	ldr	r3, [pc, #544]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b04      	cmp	r3, #4
 8003970:	d00c      	beq.n	800398c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003972:	4b85      	ldr	r3, [pc, #532]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800397a:	2b08      	cmp	r3, #8
 800397c:	d112      	bne.n	80039a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4b82      	ldr	r3, [pc, #520]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800398a:	d10b      	bne.n	80039a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398c:	4b7e      	ldr	r3, [pc, #504]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05b      	beq.n	8003a50 <HAL_RCC_OscConfig+0x108>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d157      	bne.n	8003a50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e242      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ac:	d106      	bne.n	80039bc <HAL_RCC_OscConfig+0x74>
 80039ae:	4b76      	ldr	r3, [pc, #472]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a75      	ldr	r2, [pc, #468]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e01d      	b.n	80039f8 <HAL_RCC_OscConfig+0xb0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x98>
 80039c6:	4b70      	ldr	r3, [pc, #448]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a6f      	ldr	r2, [pc, #444]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	4b6d      	ldr	r3, [pc, #436]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6c      	ldr	r2, [pc, #432]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_OscConfig+0xb0>
 80039e0:	4b69      	ldr	r3, [pc, #420]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a68      	ldr	r2, [pc, #416]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b66      	ldr	r3, [pc, #408]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a65      	ldr	r2, [pc, #404]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d013      	beq.n	8003a28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7ff faf8 	bl	8002ff4 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a08:	f7ff faf4 	bl	8002ff4 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e207      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	4b5b      	ldr	r3, [pc, #364]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0xc0>
 8003a26:	e014      	b.n	8003a52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7ff fae4 	bl	8002ff4 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a30:	f7ff fae0 	bl	8002ff4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e1f3      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	4b51      	ldr	r3, [pc, #324]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0xe8>
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d063      	beq.n	8003b26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a5e:	4b4a      	ldr	r3, [pc, #296]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00b      	beq.n	8003a82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d11c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b44      	ldr	r3, [pc, #272]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d116      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a82:	4b41      	ldr	r3, [pc, #260]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_RCC_OscConfig+0x152>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e1c7      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9a:	4b3b      	ldr	r3, [pc, #236]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4937      	ldr	r1, [pc, #220]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	e03a      	b.n	8003b26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab8:	4b34      	ldr	r3, [pc, #208]	; (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7ff fa99 	bl	8002ff4 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac6:	f7ff fa95 	bl	8002ff4 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e1a8      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	4b28      	ldr	r3, [pc, #160]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4925      	ldr	r1, [pc, #148]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]
 8003af8:	e015      	b.n	8003b26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7ff fa78 	bl	8002ff4 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b08:	f7ff fa74 	bl	8002ff4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e187      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d036      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3a:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <HAL_RCC_OscConfig+0x248>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7ff fa58 	bl	8002ff4 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b48:	f7ff fa54 	bl	8002ff4 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e167      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x200>
 8003b66:	e01b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_RCC_OscConfig+0x248>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6e:	f7ff fa41 	bl	8002ff4 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b74:	e00e      	b.n	8003b94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b76:	f7ff fa3d 	bl	8002ff4 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d907      	bls.n	8003b94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e150      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	42470000 	.word	0x42470000
 8003b90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1ea      	bne.n	8003b76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8097 	beq.w	8003cdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb2:	4b81      	ldr	r3, [pc, #516]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10f      	bne.n	8003bde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	4b7d      	ldr	r3, [pc, #500]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	4a7c      	ldr	r2, [pc, #496]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bce:	4b7a      	ldr	r3, [pc, #488]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bde:	4b77      	ldr	r3, [pc, #476]	; (8003dbc <HAL_RCC_OscConfig+0x474>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d118      	bne.n	8003c1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bea:	4b74      	ldr	r3, [pc, #464]	; (8003dbc <HAL_RCC_OscConfig+0x474>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a73      	ldr	r2, [pc, #460]	; (8003dbc <HAL_RCC_OscConfig+0x474>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf6:	f7ff f9fd 	bl	8002ff4 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfe:	f7ff f9f9 	bl	8002ff4 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e10c      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c10:	4b6a      	ldr	r3, [pc, #424]	; (8003dbc <HAL_RCC_OscConfig+0x474>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d106      	bne.n	8003c32 <HAL_RCC_OscConfig+0x2ea>
 8003c24:	4b64      	ldr	r3, [pc, #400]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	4a63      	ldr	r2, [pc, #396]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c30:	e01c      	b.n	8003c6c <HAL_RCC_OscConfig+0x324>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b05      	cmp	r3, #5
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x30c>
 8003c3a:	4b5f      	ldr	r3, [pc, #380]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	4a5e      	ldr	r2, [pc, #376]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	6713      	str	r3, [r2, #112]	; 0x70
 8003c46:	4b5c      	ldr	r3, [pc, #368]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4a5b      	ldr	r2, [pc, #364]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
 8003c52:	e00b      	b.n	8003c6c <HAL_RCC_OscConfig+0x324>
 8003c54:	4b58      	ldr	r3, [pc, #352]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	4a57      	ldr	r2, [pc, #348]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c60:	4b55      	ldr	r3, [pc, #340]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a54      	ldr	r2, [pc, #336]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c66:	f023 0304 	bic.w	r3, r3, #4
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d015      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7ff f9be 	bl	8002ff4 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7ff f9ba 	bl	8002ff4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0cb      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	4b49      	ldr	r3, [pc, #292]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0ee      	beq.n	8003c7c <HAL_RCC_OscConfig+0x334>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca0:	f7ff f9a8 	bl	8002ff4 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7ff f9a4 	bl	8002ff4 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0b5      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbe:	4b3e      	ldr	r3, [pc, #248]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1ee      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd0:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	4a38      	ldr	r2, [pc, #224]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80a1 	beq.w	8003e28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ce6:	4b34      	ldr	r3, [pc, #208]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d05c      	beq.n	8003dac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d141      	bne.n	8003d7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfa:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <HAL_RCC_OscConfig+0x478>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7ff f978 	bl	8002ff4 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d08:	f7ff f974 	bl	8002ff4 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e087      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1a:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	019b      	lsls	r3, r3, #6
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	085b      	lsrs	r3, r3, #1
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	061b      	lsls	r3, r3, #24
 8003d4a:	491b      	ldr	r1, [pc, #108]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d50:	4b1b      	ldr	r3, [pc, #108]	; (8003dc0 <HAL_RCC_OscConfig+0x478>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d56:	f7ff f94d 	bl	8002ff4 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d5e:	f7ff f949 	bl	8002ff4 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e05c      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d70:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x416>
 8003d7c:	e054      	b.n	8003e28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <HAL_RCC_OscConfig+0x478>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7ff f936 	bl	8002ff4 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7ff f932 	bl	8002ff4 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e045      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x444>
 8003daa:	e03d      	b.n	8003e28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d107      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e038      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40007000 	.word	0x40007000
 8003dc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_RCC_OscConfig+0x4ec>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d028      	beq.n	8003e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d121      	bne.n	8003e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d11a      	bne.n	8003e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003df4:	4013      	ands	r3, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d111      	bne.n	8003e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	085b      	lsrs	r3, r3, #1
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d107      	bne.n	8003e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800

08003e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0cc      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e4c:	4b68      	ldr	r3, [pc, #416]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d90c      	bls.n	8003e74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5a:	4b65      	ldr	r3, [pc, #404]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0b8      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d020      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e8c:	4b59      	ldr	r3, [pc, #356]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4a58      	ldr	r2, [pc, #352]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea4:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a52      	ldr	r2, [pc, #328]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb0:	4b50      	ldr	r3, [pc, #320]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	494d      	ldr	r1, [pc, #308]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d044      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	4b47      	ldr	r3, [pc, #284]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d119      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e07f      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef6:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e06f      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f06:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e067      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f16:	4b37      	ldr	r3, [pc, #220]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f023 0203 	bic.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4934      	ldr	r1, [pc, #208]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f28:	f7ff f864 	bl	8002ff4 <HAL_GetTick>
 8003f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f30:	f7ff f860 	bl	8002ff4 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e04f      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 020c 	and.w	r2, r3, #12
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d1eb      	bne.n	8003f30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f58:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d20c      	bcs.n	8003f80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b22      	ldr	r3, [pc, #136]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e032      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8c:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4916      	ldr	r1, [pc, #88]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	490e      	ldr	r1, [pc, #56]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fbe:	f000 f821 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	490a      	ldr	r1, [pc, #40]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd0:	5ccb      	ldrb	r3, [r1, r3]
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <HAL_RCC_ClockConfig+0x1c8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe ffc4 	bl	8002f6c <HAL_InitTick>

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40023c00 	.word	0x40023c00
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	080080d8 	.word	0x080080d8
 8003ffc:	20000000 	.word	0x20000000
 8004000:	20000004 	.word	0x20000004

08004004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004008:	b094      	sub	sp, #80	; 0x50
 800400a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	647b      	str	r3, [r7, #68]	; 0x44
 8004010:	2300      	movs	r3, #0
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004014:	2300      	movs	r3, #0
 8004016:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800401c:	4b79      	ldr	r3, [pc, #484]	; (8004204 <HAL_RCC_GetSysClockFreq+0x200>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 030c 	and.w	r3, r3, #12
 8004024:	2b08      	cmp	r3, #8
 8004026:	d00d      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x40>
 8004028:	2b08      	cmp	r3, #8
 800402a:	f200 80e1 	bhi.w	80041f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x34>
 8004032:	2b04      	cmp	r3, #4
 8004034:	d003      	beq.n	800403e <HAL_RCC_GetSysClockFreq+0x3a>
 8004036:	e0db      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004038:	4b73      	ldr	r3, [pc, #460]	; (8004208 <HAL_RCC_GetSysClockFreq+0x204>)
 800403a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800403c:	e0db      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800403e:	4b73      	ldr	r3, [pc, #460]	; (800420c <HAL_RCC_GetSysClockFreq+0x208>)
 8004040:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004042:	e0d8      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004044:	4b6f      	ldr	r3, [pc, #444]	; (8004204 <HAL_RCC_GetSysClockFreq+0x200>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800404c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800404e:	4b6d      	ldr	r3, [pc, #436]	; (8004204 <HAL_RCC_GetSysClockFreq+0x200>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d063      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405a:	4b6a      	ldr	r3, [pc, #424]	; (8004204 <HAL_RCC_GetSysClockFreq+0x200>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	099b      	lsrs	r3, r3, #6
 8004060:	2200      	movs	r2, #0
 8004062:	63bb      	str	r3, [r7, #56]	; 0x38
 8004064:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406c:	633b      	str	r3, [r7, #48]	; 0x30
 800406e:	2300      	movs	r3, #0
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
 8004072:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004076:	4622      	mov	r2, r4
 8004078:	462b      	mov	r3, r5
 800407a:	f04f 0000 	mov.w	r0, #0
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	0159      	lsls	r1, r3, #5
 8004084:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004088:	0150      	lsls	r0, r2, #5
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4621      	mov	r1, r4
 8004090:	1a51      	subs	r1, r2, r1
 8004092:	6139      	str	r1, [r7, #16]
 8004094:	4629      	mov	r1, r5
 8004096:	eb63 0301 	sbc.w	r3, r3, r1
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040a8:	4659      	mov	r1, fp
 80040aa:	018b      	lsls	r3, r1, #6
 80040ac:	4651      	mov	r1, sl
 80040ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040b2:	4651      	mov	r1, sl
 80040b4:	018a      	lsls	r2, r1, #6
 80040b6:	4651      	mov	r1, sl
 80040b8:	ebb2 0801 	subs.w	r8, r2, r1
 80040bc:	4659      	mov	r1, fp
 80040be:	eb63 0901 	sbc.w	r9, r3, r1
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040d6:	4690      	mov	r8, r2
 80040d8:	4699      	mov	r9, r3
 80040da:	4623      	mov	r3, r4
 80040dc:	eb18 0303 	adds.w	r3, r8, r3
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	462b      	mov	r3, r5
 80040e4:	eb49 0303 	adc.w	r3, r9, r3
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040f6:	4629      	mov	r1, r5
 80040f8:	024b      	lsls	r3, r1, #9
 80040fa:	4621      	mov	r1, r4
 80040fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004100:	4621      	mov	r1, r4
 8004102:	024a      	lsls	r2, r1, #9
 8004104:	4610      	mov	r0, r2
 8004106:	4619      	mov	r1, r3
 8004108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800410a:	2200      	movs	r2, #0
 800410c:	62bb      	str	r3, [r7, #40]	; 0x28
 800410e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004110:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004114:	f7fc fd9a 	bl	8000c4c <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4613      	mov	r3, r2
 800411e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004120:	e058      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004122:	4b38      	ldr	r3, [pc, #224]	; (8004204 <HAL_RCC_GetSysClockFreq+0x200>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	2200      	movs	r2, #0
 800412a:	4618      	mov	r0, r3
 800412c:	4611      	mov	r1, r2
 800412e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004132:	623b      	str	r3, [r7, #32]
 8004134:	2300      	movs	r3, #0
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
 8004138:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800413c:	4642      	mov	r2, r8
 800413e:	464b      	mov	r3, r9
 8004140:	f04f 0000 	mov.w	r0, #0
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	0159      	lsls	r1, r3, #5
 800414a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800414e:	0150      	lsls	r0, r2, #5
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4641      	mov	r1, r8
 8004156:	ebb2 0a01 	subs.w	sl, r2, r1
 800415a:	4649      	mov	r1, r9
 800415c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800416c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004170:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004174:	ebb2 040a 	subs.w	r4, r2, sl
 8004178:	eb63 050b 	sbc.w	r5, r3, fp
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	00eb      	lsls	r3, r5, #3
 8004186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800418a:	00e2      	lsls	r2, r4, #3
 800418c:	4614      	mov	r4, r2
 800418e:	461d      	mov	r5, r3
 8004190:	4643      	mov	r3, r8
 8004192:	18e3      	adds	r3, r4, r3
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	464b      	mov	r3, r9
 8004198:	eb45 0303 	adc.w	r3, r5, r3
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041aa:	4629      	mov	r1, r5
 80041ac:	028b      	lsls	r3, r1, #10
 80041ae:	4621      	mov	r1, r4
 80041b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041b4:	4621      	mov	r1, r4
 80041b6:	028a      	lsls	r2, r1, #10
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041be:	2200      	movs	r2, #0
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	61fa      	str	r2, [r7, #28]
 80041c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041c8:	f7fc fd40 	bl	8000c4c <__aeabi_uldivmod>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4613      	mov	r3, r2
 80041d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	0c1b      	lsrs	r3, r3, #16
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	3301      	adds	r3, #1
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041ee:	e002      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_RCC_GetSysClockFreq+0x204>)
 80041f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3750      	adds	r7, #80	; 0x50
 80041fc:	46bd      	mov	sp, r7
 80041fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800
 8004208:	00f42400 	.word	0x00f42400
 800420c:	007a1200 	.word	0x007a1200

08004210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004214:	4b03      	ldr	r3, [pc, #12]	; (8004224 <HAL_RCC_GetHCLKFreq+0x14>)
 8004216:	681b      	ldr	r3, [r3, #0]
}
 8004218:	4618      	mov	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20000000 	.word	0x20000000

08004228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800422c:	f7ff fff0 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b05      	ldr	r3, [pc, #20]	; (8004248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	0a9b      	lsrs	r3, r3, #10
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4903      	ldr	r1, [pc, #12]	; (800424c <HAL_RCC_GetPCLK1Freq+0x24>)
 800423e:	5ccb      	ldrb	r3, [r1, r3]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40023800 	.word	0x40023800
 800424c:	080080e8 	.word	0x080080e8

08004250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004254:	f7ff ffdc 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	0b5b      	lsrs	r3, r3, #13
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4903      	ldr	r1, [pc, #12]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40023800 	.word	0x40023800
 8004274:	080080e8 	.word	0x080080e8

08004278 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e07b      	b.n	8004382 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	2b00      	cmp	r3, #0
 8004290:	d108      	bne.n	80042a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800429a:	d009      	beq.n	80042b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	61da      	str	r2, [r3, #28]
 80042a2:	e005      	b.n	80042b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd ff3a 	bl	8002144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004334:	ea42 0103 	orr.w	r1, r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	f003 0104 	and.w	r1, r3, #4
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	f003 0210 	and.w	r2, r3, #16
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004370:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e042      	b.n	8004422 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7fe f877 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2224      	movs	r2, #36	; 0x24
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fdbe 	bl	8004f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004402:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b08a      	sub	sp, #40	; 0x28
 800442e:	af02      	add	r7, sp, #8
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b20      	cmp	r3, #32
 8004448:	d175      	bne.n	8004536 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_UART_Transmit+0x2c>
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e06e      	b.n	8004538 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2221      	movs	r2, #33	; 0x21
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004468:	f7fe fdc4 	bl	8002ff4 <HAL_GetTick>
 800446c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	88fa      	ldrh	r2, [r7, #6]
 8004472:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	88fa      	ldrh	r2, [r7, #6]
 8004478:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004482:	d108      	bne.n	8004496 <HAL_UART_Transmit+0x6c>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	e003      	b.n	800449e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800449e:	e02e      	b.n	80044fe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2200      	movs	r2, #0
 80044a8:	2180      	movs	r1, #128	; 0x80
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fb20 	bl	8004af0 <UART_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e03a      	b.n	8004538 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	3302      	adds	r3, #2
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	e007      	b.n	80044f0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	781a      	ldrb	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	3301      	adds	r3, #1
 80044ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1cb      	bne.n	80044a0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2200      	movs	r2, #0
 8004510:	2140      	movs	r1, #64	; 0x40
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 faec 	bl	8004af0 <UART_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e006      	b.n	8004538 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e000      	b.n	8004538 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b20      	cmp	r3, #32
 8004558:	d112      	bne.n	8004580 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_UART_Receive_IT+0x26>
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e00b      	b.n	8004582 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	461a      	mov	r2, r3
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 fb13 	bl	8004ba2 <UART_Start_Receive_IT>
 800457c:	4603      	mov	r3, r0
 800457e:	e000      	b.n	8004582 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b0ba      	sub	sp, #232	; 0xe8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_UART_IRQHandler+0x66>
 80045de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fbf2 	bl	8004dd4 <UART_Receive_IT>
      return;
 80045f0:	e25b      	b.n	8004aaa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80de 	beq.w	80047b8 <HAL_UART_IRQHandler+0x22c>
 80045fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d106      	bne.n	8004616 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80d1 	beq.w	80047b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_UART_IRQHandler+0xae>
 8004622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f043 0201 	orr.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_UART_IRQHandler+0xd2>
 8004646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	f043 0202 	orr.w	r2, r3, #2
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_UART_IRQHandler+0xf6>
 800466a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	f043 0204 	orr.w	r2, r3, #4
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d011      	beq.n	80046b2 <HAL_UART_IRQHandler+0x126>
 800468e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800469a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046aa:	f043 0208 	orr.w	r2, r3, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 81f2 	beq.w	8004aa0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_UART_IRQHandler+0x14e>
 80046c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fb7d 	bl	8004dd4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b40      	cmp	r3, #64	; 0x40
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d103      	bne.n	8004706 <HAL_UART_IRQHandler+0x17a>
 80046fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d04f      	beq.n	80047a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa85 	bl	8004c16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	d141      	bne.n	800479e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3314      	adds	r3, #20
 8004720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3314      	adds	r3, #20
 8004742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004746:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800474a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800475e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1d9      	bne.n	800471a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d013      	beq.n	8004796 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	4a7e      	ldr	r2, [pc, #504]	; (800496c <HAL_UART_IRQHandler+0x3e0>)
 8004774:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fdc7 	bl	800330e <HAL_DMA_Abort_IT>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d016      	beq.n	80047b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004790:	4610      	mov	r0, r2
 8004792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	e00e      	b.n	80047b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f994 	bl	8004ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800479c:	e00a      	b.n	80047b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f990 	bl	8004ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	e006      	b.n	80047b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f98c 	bl	8004ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80047b2:	e175      	b.n	8004aa0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	bf00      	nop
    return;
 80047b6:	e173      	b.n	8004aa0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	2b01      	cmp	r3, #1
 80047be:	f040 814f 	bne.w	8004a60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8148 	beq.w	8004a60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8141 	beq.w	8004a60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	f040 80b6 	bne.w	8004970 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004810:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8145 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800481e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004822:	429a      	cmp	r2, r3
 8004824:	f080 813e 	bcs.w	8004aa4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800482e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483a:	f000 8088 	beq.w	800494e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800485c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800486a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800486e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004876:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004882:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1d9      	bne.n	800483e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3314      	adds	r3, #20
 8004890:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800489a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3314      	adds	r3, #20
 80048aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e1      	bne.n	800488a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3314      	adds	r3, #20
 80048e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e3      	bne.n	80048c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800491c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800491e:	f023 0310 	bic.w	r3, r3, #16
 8004922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004930:	65ba      	str	r2, [r7, #88]	; 0x58
 8004932:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800493e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e3      	bne.n	800490c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe fc70 	bl	800322e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800495c:	b29b      	uxth	r3, r3
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	b29b      	uxth	r3, r3
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8b7 	bl	8004ad8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800496a:	e09b      	b.n	8004aa4 <HAL_UART_IRQHandler+0x518>
 800496c:	08004cdd 	.word	0x08004cdd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004978:	b29b      	uxth	r3, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 808e 	beq.w	8004aa8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800498c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8089 	beq.w	8004aa8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049ba:	647a      	str	r2, [r7, #68]	; 0x44
 80049bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e3      	bne.n	8004996 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3314      	adds	r3, #20
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	623b      	str	r3, [r7, #32]
   return(result);
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3314      	adds	r3, #20
 80049ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049f2:	633a      	str	r2, [r7, #48]	; 0x30
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e3      	bne.n	80049ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0310 	bic.w	r3, r3, #16
 8004a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a38:	61fa      	str	r2, [r7, #28]
 8004a3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	69b9      	ldr	r1, [r7, #24]
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	617b      	str	r3, [r7, #20]
   return(result);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e3      	bne.n	8004a14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a56:	4619      	mov	r1, r3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f83d 	bl	8004ad8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a5e:	e023      	b.n	8004aa8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <HAL_UART_IRQHandler+0x4f4>
 8004a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f943 	bl	8004d04 <UART_Transmit_IT>
    return;
 8004a7e:	e014      	b.n	8004aaa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <HAL_UART_IRQHandler+0x51e>
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f983 	bl	8004da4 <UART_EndTransmit_IT>
    return;
 8004a9e:	e004      	b.n	8004aaa <HAL_UART_IRQHandler+0x51e>
    return;
 8004aa0:	bf00      	nop
 8004aa2:	e002      	b.n	8004aaa <HAL_UART_IRQHandler+0x51e>
      return;
 8004aa4:	bf00      	nop
 8004aa6:	e000      	b.n	8004aaa <HAL_UART_IRQHandler+0x51e>
      return;
 8004aa8:	bf00      	nop
  }
}
 8004aaa:	37e8      	adds	r7, #232	; 0xe8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b00:	e03b      	b.n	8004b7a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d037      	beq.n	8004b7a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0a:	f7fe fa73 	bl	8002ff4 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	6a3a      	ldr	r2, [r7, #32]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d302      	bcc.n	8004b20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e03a      	b.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d023      	beq.n	8004b7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b80      	cmp	r3, #128	; 0x80
 8004b36:	d020      	beq.n	8004b7a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d01d      	beq.n	8004b7a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d116      	bne.n	8004b7a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f857 	bl	8004c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e00f      	b.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4013      	ands	r3, r2
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	bf0c      	ite	eq
 8004b8a:	2301      	moveq	r3, #1
 8004b8c:	2300      	movne	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d0b4      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	4613      	mov	r3, r2
 8004bae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	88fa      	ldrh	r2, [r7, #6]
 8004bba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	88fa      	ldrh	r2, [r7, #6]
 8004bc0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2222      	movs	r2, #34	; 0x22
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0220 	orr.w	r2, r2, #32
 8004c06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b095      	sub	sp, #84	; 0x54
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c3e:	643a      	str	r2, [r7, #64]	; 0x40
 8004c40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e5      	bne.n	8004c1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3314      	adds	r3, #20
 8004c70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e5      	bne.n	8004c52 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d119      	bne.n	8004cc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	330c      	adds	r3, #12
 8004c94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f023 0310 	bic.w	r3, r3, #16
 8004ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cae:	61ba      	str	r2, [r7, #24]
 8004cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6979      	ldr	r1, [r7, #20]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	613b      	str	r3, [r7, #16]
   return(result);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e5      	bne.n	8004c8e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cd0:	bf00      	nop
 8004cd2:	3754      	adds	r7, #84	; 0x54
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff fee4 	bl	8004ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b21      	cmp	r3, #33	; 0x21
 8004d16:	d13e      	bne.n	8004d96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d20:	d114      	bne.n	8004d4c <UART_Transmit_IT+0x48>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d110      	bne.n	8004d4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	1c9a      	adds	r2, r3, #2
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	621a      	str	r2, [r3, #32]
 8004d4a:	e008      	b.n	8004d5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	1c59      	adds	r1, r3, #1
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6211      	str	r1, [r2, #32]
 8004d56:	781a      	ldrb	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff fe73 	bl	8004ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08c      	sub	sp, #48	; 0x30
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b22      	cmp	r3, #34	; 0x22
 8004de6:	f040 80ae 	bne.w	8004f46 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d117      	bne.n	8004e24 <UART_Receive_IT+0x50>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d113      	bne.n	8004e24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	1c9a      	adds	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	629a      	str	r2, [r3, #40]	; 0x28
 8004e22:	e026      	b.n	8004e72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e36:	d007      	beq.n	8004e48 <UART_Receive_IT+0x74>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <UART_Receive_IT+0x82>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e008      	b.n	8004e68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d15d      	bne.n	8004f42 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0220 	bic.w	r2, r2, #32
 8004e94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ea4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d135      	bne.n	8004f38 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f023 0310 	bic.w	r3, r3, #16
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	623a      	str	r2, [r7, #32]
 8004ef4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	69f9      	ldr	r1, [r7, #28]
 8004ef8:	6a3a      	ldr	r2, [r7, #32]
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e5      	bne.n	8004ed2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d10a      	bne.n	8004f2a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fdd1 	bl	8004ad8 <HAL_UARTEx_RxEventCallback>
 8004f36:	e002      	b.n	8004f3e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7fd f875 	bl	8002028 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e002      	b.n	8004f48 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	e000      	b.n	8004f48 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3730      	adds	r7, #48	; 0x30
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f54:	b0c0      	sub	sp, #256	; 0x100
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6c:	68d9      	ldr	r1, [r3, #12]
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	ea40 0301 	orr.w	r3, r0, r1
 8004f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fa8:	f021 010c 	bic.w	r1, r1, #12
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fca:	6999      	ldr	r1, [r3, #24]
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	ea40 0301 	orr.w	r3, r0, r1
 8004fd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b8f      	ldr	r3, [pc, #572]	; (800521c <UART_SetConfig+0x2cc>)
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d005      	beq.n	8004ff0 <UART_SetConfig+0xa0>
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	4b8d      	ldr	r3, [pc, #564]	; (8005220 <UART_SetConfig+0x2d0>)
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d104      	bne.n	8004ffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ff0:	f7ff f92e 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 8004ff4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ff8:	e003      	b.n	8005002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ffa:	f7ff f915 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 8004ffe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800500c:	f040 810c 	bne.w	8005228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005014:	2200      	movs	r2, #0
 8005016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800501a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800501e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005022:	4622      	mov	r2, r4
 8005024:	462b      	mov	r3, r5
 8005026:	1891      	adds	r1, r2, r2
 8005028:	65b9      	str	r1, [r7, #88]	; 0x58
 800502a:	415b      	adcs	r3, r3
 800502c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800502e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005032:	4621      	mov	r1, r4
 8005034:	eb12 0801 	adds.w	r8, r2, r1
 8005038:	4629      	mov	r1, r5
 800503a:	eb43 0901 	adc.w	r9, r3, r1
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800504a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800504e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005052:	4690      	mov	r8, r2
 8005054:	4699      	mov	r9, r3
 8005056:	4623      	mov	r3, r4
 8005058:	eb18 0303 	adds.w	r3, r8, r3
 800505c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005060:	462b      	mov	r3, r5
 8005062:	eb49 0303 	adc.w	r3, r9, r3
 8005066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005076:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800507a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800507e:	460b      	mov	r3, r1
 8005080:	18db      	adds	r3, r3, r3
 8005082:	653b      	str	r3, [r7, #80]	; 0x50
 8005084:	4613      	mov	r3, r2
 8005086:	eb42 0303 	adc.w	r3, r2, r3
 800508a:	657b      	str	r3, [r7, #84]	; 0x54
 800508c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005094:	f7fb fdda 	bl	8000c4c <__aeabi_uldivmod>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4b61      	ldr	r3, [pc, #388]	; (8005224 <UART_SetConfig+0x2d4>)
 800509e:	fba3 2302 	umull	r2, r3, r3, r2
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	011c      	lsls	r4, r3, #4
 80050a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050b8:	4642      	mov	r2, r8
 80050ba:	464b      	mov	r3, r9
 80050bc:	1891      	adds	r1, r2, r2
 80050be:	64b9      	str	r1, [r7, #72]	; 0x48
 80050c0:	415b      	adcs	r3, r3
 80050c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050c8:	4641      	mov	r1, r8
 80050ca:	eb12 0a01 	adds.w	sl, r2, r1
 80050ce:	4649      	mov	r1, r9
 80050d0:	eb43 0b01 	adc.w	fp, r3, r1
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050e8:	4692      	mov	sl, r2
 80050ea:	469b      	mov	fp, r3
 80050ec:	4643      	mov	r3, r8
 80050ee:	eb1a 0303 	adds.w	r3, sl, r3
 80050f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050f6:	464b      	mov	r3, r9
 80050f8:	eb4b 0303 	adc.w	r3, fp, r3
 80050fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800510c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005114:	460b      	mov	r3, r1
 8005116:	18db      	adds	r3, r3, r3
 8005118:	643b      	str	r3, [r7, #64]	; 0x40
 800511a:	4613      	mov	r3, r2
 800511c:	eb42 0303 	adc.w	r3, r2, r3
 8005120:	647b      	str	r3, [r7, #68]	; 0x44
 8005122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800512a:	f7fb fd8f 	bl	8000c4c <__aeabi_uldivmod>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4611      	mov	r1, r2
 8005134:	4b3b      	ldr	r3, [pc, #236]	; (8005224 <UART_SetConfig+0x2d4>)
 8005136:	fba3 2301 	umull	r2, r3, r3, r1
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	2264      	movs	r2, #100	; 0x64
 800513e:	fb02 f303 	mul.w	r3, r2, r3
 8005142:	1acb      	subs	r3, r1, r3
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800514a:	4b36      	ldr	r3, [pc, #216]	; (8005224 <UART_SetConfig+0x2d4>)
 800514c:	fba3 2302 	umull	r2, r3, r3, r2
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005158:	441c      	add	r4, r3
 800515a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800515e:	2200      	movs	r2, #0
 8005160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005164:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800516c:	4642      	mov	r2, r8
 800516e:	464b      	mov	r3, r9
 8005170:	1891      	adds	r1, r2, r2
 8005172:	63b9      	str	r1, [r7, #56]	; 0x38
 8005174:	415b      	adcs	r3, r3
 8005176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800517c:	4641      	mov	r1, r8
 800517e:	1851      	adds	r1, r2, r1
 8005180:	6339      	str	r1, [r7, #48]	; 0x30
 8005182:	4649      	mov	r1, r9
 8005184:	414b      	adcs	r3, r1
 8005186:	637b      	str	r3, [r7, #52]	; 0x34
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005194:	4659      	mov	r1, fp
 8005196:	00cb      	lsls	r3, r1, #3
 8005198:	4651      	mov	r1, sl
 800519a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800519e:	4651      	mov	r1, sl
 80051a0:	00ca      	lsls	r2, r1, #3
 80051a2:	4610      	mov	r0, r2
 80051a4:	4619      	mov	r1, r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	4642      	mov	r2, r8
 80051aa:	189b      	adds	r3, r3, r2
 80051ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051b0:	464b      	mov	r3, r9
 80051b2:	460a      	mov	r2, r1
 80051b4:	eb42 0303 	adc.w	r3, r2, r3
 80051b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051d0:	460b      	mov	r3, r1
 80051d2:	18db      	adds	r3, r3, r3
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d6:	4613      	mov	r3, r2
 80051d8:	eb42 0303 	adc.w	r3, r2, r3
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051e6:	f7fb fd31 	bl	8000c4c <__aeabi_uldivmod>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <UART_SetConfig+0x2d4>)
 80051f0:	fba3 1302 	umull	r1, r3, r3, r2
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	2164      	movs	r1, #100	; 0x64
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	3332      	adds	r3, #50	; 0x32
 8005202:	4a08      	ldr	r2, [pc, #32]	; (8005224 <UART_SetConfig+0x2d4>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	f003 0207 	and.w	r2, r3, #7
 800520e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4422      	add	r2, r4
 8005216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005218:	e106      	b.n	8005428 <UART_SetConfig+0x4d8>
 800521a:	bf00      	nop
 800521c:	40011000 	.word	0x40011000
 8005220:	40011400 	.word	0x40011400
 8005224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800522c:	2200      	movs	r2, #0
 800522e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005232:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800523a:	4642      	mov	r2, r8
 800523c:	464b      	mov	r3, r9
 800523e:	1891      	adds	r1, r2, r2
 8005240:	6239      	str	r1, [r7, #32]
 8005242:	415b      	adcs	r3, r3
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
 8005246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800524a:	4641      	mov	r1, r8
 800524c:	1854      	adds	r4, r2, r1
 800524e:	4649      	mov	r1, r9
 8005250:	eb43 0501 	adc.w	r5, r3, r1
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	00eb      	lsls	r3, r5, #3
 800525e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005262:	00e2      	lsls	r2, r4, #3
 8005264:	4614      	mov	r4, r2
 8005266:	461d      	mov	r5, r3
 8005268:	4643      	mov	r3, r8
 800526a:	18e3      	adds	r3, r4, r3
 800526c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005270:	464b      	mov	r3, r9
 8005272:	eb45 0303 	adc.w	r3, r5, r3
 8005276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800527a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005286:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005296:	4629      	mov	r1, r5
 8005298:	008b      	lsls	r3, r1, #2
 800529a:	4621      	mov	r1, r4
 800529c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052a0:	4621      	mov	r1, r4
 80052a2:	008a      	lsls	r2, r1, #2
 80052a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052a8:	f7fb fcd0 	bl	8000c4c <__aeabi_uldivmod>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4b60      	ldr	r3, [pc, #384]	; (8005434 <UART_SetConfig+0x4e4>)
 80052b2:	fba3 2302 	umull	r2, r3, r3, r2
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	011c      	lsls	r4, r3, #4
 80052ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052cc:	4642      	mov	r2, r8
 80052ce:	464b      	mov	r3, r9
 80052d0:	1891      	adds	r1, r2, r2
 80052d2:	61b9      	str	r1, [r7, #24]
 80052d4:	415b      	adcs	r3, r3
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052dc:	4641      	mov	r1, r8
 80052de:	1851      	adds	r1, r2, r1
 80052e0:	6139      	str	r1, [r7, #16]
 80052e2:	4649      	mov	r1, r9
 80052e4:	414b      	adcs	r3, r1
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052f4:	4659      	mov	r1, fp
 80052f6:	00cb      	lsls	r3, r1, #3
 80052f8:	4651      	mov	r1, sl
 80052fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052fe:	4651      	mov	r1, sl
 8005300:	00ca      	lsls	r2, r1, #3
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	4603      	mov	r3, r0
 8005308:	4642      	mov	r2, r8
 800530a:	189b      	adds	r3, r3, r2
 800530c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005310:	464b      	mov	r3, r9
 8005312:	460a      	mov	r2, r1
 8005314:	eb42 0303 	adc.w	r3, r2, r3
 8005318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	67bb      	str	r3, [r7, #120]	; 0x78
 8005326:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005334:	4649      	mov	r1, r9
 8005336:	008b      	lsls	r3, r1, #2
 8005338:	4641      	mov	r1, r8
 800533a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800533e:	4641      	mov	r1, r8
 8005340:	008a      	lsls	r2, r1, #2
 8005342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005346:	f7fb fc81 	bl	8000c4c <__aeabi_uldivmod>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4611      	mov	r1, r2
 8005350:	4b38      	ldr	r3, [pc, #224]	; (8005434 <UART_SetConfig+0x4e4>)
 8005352:	fba3 2301 	umull	r2, r3, r3, r1
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	2264      	movs	r2, #100	; 0x64
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	1acb      	subs	r3, r1, r3
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	3332      	adds	r3, #50	; 0x32
 8005364:	4a33      	ldr	r2, [pc, #204]	; (8005434 <UART_SetConfig+0x4e4>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005370:	441c      	add	r4, r3
 8005372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005376:	2200      	movs	r2, #0
 8005378:	673b      	str	r3, [r7, #112]	; 0x70
 800537a:	677a      	str	r2, [r7, #116]	; 0x74
 800537c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	1891      	adds	r1, r2, r2
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	415b      	adcs	r3, r3
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005390:	4641      	mov	r1, r8
 8005392:	1851      	adds	r1, r2, r1
 8005394:	6039      	str	r1, [r7, #0]
 8005396:	4649      	mov	r1, r9
 8005398:	414b      	adcs	r3, r1
 800539a:	607b      	str	r3, [r7, #4]
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053a8:	4659      	mov	r1, fp
 80053aa:	00cb      	lsls	r3, r1, #3
 80053ac:	4651      	mov	r1, sl
 80053ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b2:	4651      	mov	r1, sl
 80053b4:	00ca      	lsls	r2, r1, #3
 80053b6:	4610      	mov	r0, r2
 80053b8:	4619      	mov	r1, r3
 80053ba:	4603      	mov	r3, r0
 80053bc:	4642      	mov	r2, r8
 80053be:	189b      	adds	r3, r3, r2
 80053c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053c2:	464b      	mov	r3, r9
 80053c4:	460a      	mov	r2, r1
 80053c6:	eb42 0303 	adc.w	r3, r2, r3
 80053ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	663b      	str	r3, [r7, #96]	; 0x60
 80053d6:	667a      	str	r2, [r7, #100]	; 0x64
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053e4:	4649      	mov	r1, r9
 80053e6:	008b      	lsls	r3, r1, #2
 80053e8:	4641      	mov	r1, r8
 80053ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ee:	4641      	mov	r1, r8
 80053f0:	008a      	lsls	r2, r1, #2
 80053f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053f6:	f7fb fc29 	bl	8000c4c <__aeabi_uldivmod>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <UART_SetConfig+0x4e4>)
 8005400:	fba3 1302 	umull	r1, r3, r3, r2
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	2164      	movs	r1, #100	; 0x64
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	3332      	adds	r3, #50	; 0x32
 8005412:	4a08      	ldr	r2, [pc, #32]	; (8005434 <UART_SetConfig+0x4e4>)
 8005414:	fba2 2303 	umull	r2, r3, r2, r3
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	f003 020f 	and.w	r2, r3, #15
 800541e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4422      	add	r2, r4
 8005426:	609a      	str	r2, [r3, #8]
}
 8005428:	bf00      	nop
 800542a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800542e:	46bd      	mov	sp, r7
 8005430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005434:	51eb851f 	.word	0x51eb851f

08005438 <sulp>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	4604      	mov	r4, r0
 800543c:	460d      	mov	r5, r1
 800543e:	ec45 4b10 	vmov	d0, r4, r5
 8005442:	4616      	mov	r6, r2
 8005444:	f001 ff8a 	bl	800735c <__ulp>
 8005448:	ec51 0b10 	vmov	r0, r1, d0
 800544c:	b17e      	cbz	r6, 800546e <sulp+0x36>
 800544e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005452:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005456:	2b00      	cmp	r3, #0
 8005458:	dd09      	ble.n	800546e <sulp+0x36>
 800545a:	051b      	lsls	r3, r3, #20
 800545c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005460:	2400      	movs	r4, #0
 8005462:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005466:	4622      	mov	r2, r4
 8005468:	462b      	mov	r3, r5
 800546a:	f7fb f8bd 	bl	80005e8 <__aeabi_dmul>
 800546e:	bd70      	pop	{r4, r5, r6, pc}

08005470 <_strtod_l>:
 8005470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	ed2d 8b02 	vpush	{d8}
 8005478:	b09b      	sub	sp, #108	; 0x6c
 800547a:	4604      	mov	r4, r0
 800547c:	9213      	str	r2, [sp, #76]	; 0x4c
 800547e:	2200      	movs	r2, #0
 8005480:	9216      	str	r2, [sp, #88]	; 0x58
 8005482:	460d      	mov	r5, r1
 8005484:	f04f 0800 	mov.w	r8, #0
 8005488:	f04f 0900 	mov.w	r9, #0
 800548c:	460a      	mov	r2, r1
 800548e:	9215      	str	r2, [sp, #84]	; 0x54
 8005490:	7811      	ldrb	r1, [r2, #0]
 8005492:	292b      	cmp	r1, #43	; 0x2b
 8005494:	d04c      	beq.n	8005530 <_strtod_l+0xc0>
 8005496:	d83a      	bhi.n	800550e <_strtod_l+0x9e>
 8005498:	290d      	cmp	r1, #13
 800549a:	d834      	bhi.n	8005506 <_strtod_l+0x96>
 800549c:	2908      	cmp	r1, #8
 800549e:	d834      	bhi.n	800550a <_strtod_l+0x9a>
 80054a0:	2900      	cmp	r1, #0
 80054a2:	d03d      	beq.n	8005520 <_strtod_l+0xb0>
 80054a4:	2200      	movs	r2, #0
 80054a6:	920a      	str	r2, [sp, #40]	; 0x28
 80054a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80054aa:	7832      	ldrb	r2, [r6, #0]
 80054ac:	2a30      	cmp	r2, #48	; 0x30
 80054ae:	f040 80b4 	bne.w	800561a <_strtod_l+0x1aa>
 80054b2:	7872      	ldrb	r2, [r6, #1]
 80054b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80054b8:	2a58      	cmp	r2, #88	; 0x58
 80054ba:	d170      	bne.n	800559e <_strtod_l+0x12e>
 80054bc:	9302      	str	r3, [sp, #8]
 80054be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c0:	9301      	str	r3, [sp, #4]
 80054c2:	ab16      	add	r3, sp, #88	; 0x58
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	4a8e      	ldr	r2, [pc, #568]	; (8005700 <_strtod_l+0x290>)
 80054c8:	ab17      	add	r3, sp, #92	; 0x5c
 80054ca:	a915      	add	r1, sp, #84	; 0x54
 80054cc:	4620      	mov	r0, r4
 80054ce:	f001 f82b 	bl	8006528 <__gethex>
 80054d2:	f010 070f 	ands.w	r7, r0, #15
 80054d6:	4605      	mov	r5, r0
 80054d8:	d005      	beq.n	80054e6 <_strtod_l+0x76>
 80054da:	2f06      	cmp	r7, #6
 80054dc:	d12a      	bne.n	8005534 <_strtod_l+0xc4>
 80054de:	3601      	adds	r6, #1
 80054e0:	2300      	movs	r3, #0
 80054e2:	9615      	str	r6, [sp, #84]	; 0x54
 80054e4:	930a      	str	r3, [sp, #40]	; 0x28
 80054e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f040 857f 	bne.w	8005fec <_strtod_l+0xb7c>
 80054ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f0:	b1db      	cbz	r3, 800552a <_strtod_l+0xba>
 80054f2:	4642      	mov	r2, r8
 80054f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80054f8:	ec43 2b10 	vmov	d0, r2, r3
 80054fc:	b01b      	add	sp, #108	; 0x6c
 80054fe:	ecbd 8b02 	vpop	{d8}
 8005502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005506:	2920      	cmp	r1, #32
 8005508:	d1cc      	bne.n	80054a4 <_strtod_l+0x34>
 800550a:	3201      	adds	r2, #1
 800550c:	e7bf      	b.n	800548e <_strtod_l+0x1e>
 800550e:	292d      	cmp	r1, #45	; 0x2d
 8005510:	d1c8      	bne.n	80054a4 <_strtod_l+0x34>
 8005512:	2101      	movs	r1, #1
 8005514:	910a      	str	r1, [sp, #40]	; 0x28
 8005516:	1c51      	adds	r1, r2, #1
 8005518:	9115      	str	r1, [sp, #84]	; 0x54
 800551a:	7852      	ldrb	r2, [r2, #1]
 800551c:	2a00      	cmp	r2, #0
 800551e:	d1c3      	bne.n	80054a8 <_strtod_l+0x38>
 8005520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005522:	9515      	str	r5, [sp, #84]	; 0x54
 8005524:	2b00      	cmp	r3, #0
 8005526:	f040 855f 	bne.w	8005fe8 <_strtod_l+0xb78>
 800552a:	4642      	mov	r2, r8
 800552c:	464b      	mov	r3, r9
 800552e:	e7e3      	b.n	80054f8 <_strtod_l+0x88>
 8005530:	2100      	movs	r1, #0
 8005532:	e7ef      	b.n	8005514 <_strtod_l+0xa4>
 8005534:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005536:	b13a      	cbz	r2, 8005548 <_strtod_l+0xd8>
 8005538:	2135      	movs	r1, #53	; 0x35
 800553a:	a818      	add	r0, sp, #96	; 0x60
 800553c:	f002 f80b 	bl	8007556 <__copybits>
 8005540:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005542:	4620      	mov	r0, r4
 8005544:	f001 fbde 	bl	8006d04 <_Bfree>
 8005548:	3f01      	subs	r7, #1
 800554a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800554c:	2f04      	cmp	r7, #4
 800554e:	d806      	bhi.n	800555e <_strtod_l+0xee>
 8005550:	e8df f007 	tbb	[pc, r7]
 8005554:	201d0314 	.word	0x201d0314
 8005558:	14          	.byte	0x14
 8005559:	00          	.byte	0x00
 800555a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800555e:	05e9      	lsls	r1, r5, #23
 8005560:	bf48      	it	mi
 8005562:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005566:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800556a:	0d1b      	lsrs	r3, r3, #20
 800556c:	051b      	lsls	r3, r3, #20
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1b9      	bne.n	80054e6 <_strtod_l+0x76>
 8005572:	f000 fedf 	bl	8006334 <__errno>
 8005576:	2322      	movs	r3, #34	; 0x22
 8005578:	6003      	str	r3, [r0, #0]
 800557a:	e7b4      	b.n	80054e6 <_strtod_l+0x76>
 800557c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8005580:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005584:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005588:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800558c:	e7e7      	b.n	800555e <_strtod_l+0xee>
 800558e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005708 <_strtod_l+0x298>
 8005592:	e7e4      	b.n	800555e <_strtod_l+0xee>
 8005594:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005598:	f04f 38ff 	mov.w	r8, #4294967295
 800559c:	e7df      	b.n	800555e <_strtod_l+0xee>
 800559e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	9215      	str	r2, [sp, #84]	; 0x54
 80055a4:	785b      	ldrb	r3, [r3, #1]
 80055a6:	2b30      	cmp	r3, #48	; 0x30
 80055a8:	d0f9      	beq.n	800559e <_strtod_l+0x12e>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d09b      	beq.n	80054e6 <_strtod_l+0x76>
 80055ae:	2301      	movs	r3, #1
 80055b0:	f04f 0a00 	mov.w	sl, #0
 80055b4:	9304      	str	r3, [sp, #16]
 80055b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80055ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80055be:	46d3      	mov	fp, sl
 80055c0:	220a      	movs	r2, #10
 80055c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80055c4:	7806      	ldrb	r6, [r0, #0]
 80055c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80055ca:	b2d9      	uxtb	r1, r3
 80055cc:	2909      	cmp	r1, #9
 80055ce:	d926      	bls.n	800561e <_strtod_l+0x1ae>
 80055d0:	494c      	ldr	r1, [pc, #304]	; (8005704 <_strtod_l+0x294>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	f000 fe55 	bl	8006282 <strncmp>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d030      	beq.n	800563e <_strtod_l+0x1ce>
 80055dc:	2000      	movs	r0, #0
 80055de:	4632      	mov	r2, r6
 80055e0:	9005      	str	r0, [sp, #20]
 80055e2:	465e      	mov	r6, fp
 80055e4:	4603      	mov	r3, r0
 80055e6:	2a65      	cmp	r2, #101	; 0x65
 80055e8:	d001      	beq.n	80055ee <_strtod_l+0x17e>
 80055ea:	2a45      	cmp	r2, #69	; 0x45
 80055ec:	d113      	bne.n	8005616 <_strtod_l+0x1a6>
 80055ee:	b91e      	cbnz	r6, 80055f8 <_strtod_l+0x188>
 80055f0:	9a04      	ldr	r2, [sp, #16]
 80055f2:	4302      	orrs	r2, r0
 80055f4:	d094      	beq.n	8005520 <_strtod_l+0xb0>
 80055f6:	2600      	movs	r6, #0
 80055f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80055fa:	1c6a      	adds	r2, r5, #1
 80055fc:	9215      	str	r2, [sp, #84]	; 0x54
 80055fe:	786a      	ldrb	r2, [r5, #1]
 8005600:	2a2b      	cmp	r2, #43	; 0x2b
 8005602:	d074      	beq.n	80056ee <_strtod_l+0x27e>
 8005604:	2a2d      	cmp	r2, #45	; 0x2d
 8005606:	d078      	beq.n	80056fa <_strtod_l+0x28a>
 8005608:	f04f 0c00 	mov.w	ip, #0
 800560c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005610:	2909      	cmp	r1, #9
 8005612:	d97f      	bls.n	8005714 <_strtod_l+0x2a4>
 8005614:	9515      	str	r5, [sp, #84]	; 0x54
 8005616:	2700      	movs	r7, #0
 8005618:	e09e      	b.n	8005758 <_strtod_l+0x2e8>
 800561a:	2300      	movs	r3, #0
 800561c:	e7c8      	b.n	80055b0 <_strtod_l+0x140>
 800561e:	f1bb 0f08 	cmp.w	fp, #8
 8005622:	bfd8      	it	le
 8005624:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005626:	f100 0001 	add.w	r0, r0, #1
 800562a:	bfda      	itte	le
 800562c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005630:	9309      	strle	r3, [sp, #36]	; 0x24
 8005632:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005636:	f10b 0b01 	add.w	fp, fp, #1
 800563a:	9015      	str	r0, [sp, #84]	; 0x54
 800563c:	e7c1      	b.n	80055c2 <_strtod_l+0x152>
 800563e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	9215      	str	r2, [sp, #84]	; 0x54
 8005644:	785a      	ldrb	r2, [r3, #1]
 8005646:	f1bb 0f00 	cmp.w	fp, #0
 800564a:	d037      	beq.n	80056bc <_strtod_l+0x24c>
 800564c:	9005      	str	r0, [sp, #20]
 800564e:	465e      	mov	r6, fp
 8005650:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005654:	2b09      	cmp	r3, #9
 8005656:	d912      	bls.n	800567e <_strtod_l+0x20e>
 8005658:	2301      	movs	r3, #1
 800565a:	e7c4      	b.n	80055e6 <_strtod_l+0x176>
 800565c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	9215      	str	r2, [sp, #84]	; 0x54
 8005662:	785a      	ldrb	r2, [r3, #1]
 8005664:	3001      	adds	r0, #1
 8005666:	2a30      	cmp	r2, #48	; 0x30
 8005668:	d0f8      	beq.n	800565c <_strtod_l+0x1ec>
 800566a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800566e:	2b08      	cmp	r3, #8
 8005670:	f200 84c1 	bhi.w	8005ff6 <_strtod_l+0xb86>
 8005674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005676:	9005      	str	r0, [sp, #20]
 8005678:	2000      	movs	r0, #0
 800567a:	930b      	str	r3, [sp, #44]	; 0x2c
 800567c:	4606      	mov	r6, r0
 800567e:	3a30      	subs	r2, #48	; 0x30
 8005680:	f100 0301 	add.w	r3, r0, #1
 8005684:	d014      	beq.n	80056b0 <_strtod_l+0x240>
 8005686:	9905      	ldr	r1, [sp, #20]
 8005688:	4419      	add	r1, r3
 800568a:	9105      	str	r1, [sp, #20]
 800568c:	4633      	mov	r3, r6
 800568e:	eb00 0c06 	add.w	ip, r0, r6
 8005692:	210a      	movs	r1, #10
 8005694:	4563      	cmp	r3, ip
 8005696:	d113      	bne.n	80056c0 <_strtod_l+0x250>
 8005698:	1833      	adds	r3, r6, r0
 800569a:	2b08      	cmp	r3, #8
 800569c:	f106 0601 	add.w	r6, r6, #1
 80056a0:	4406      	add	r6, r0
 80056a2:	dc1a      	bgt.n	80056da <_strtod_l+0x26a>
 80056a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056a6:	230a      	movs	r3, #10
 80056a8:	fb03 2301 	mla	r3, r3, r1, r2
 80056ac:	9309      	str	r3, [sp, #36]	; 0x24
 80056ae:	2300      	movs	r3, #0
 80056b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80056b2:	1c51      	adds	r1, r2, #1
 80056b4:	9115      	str	r1, [sp, #84]	; 0x54
 80056b6:	7852      	ldrb	r2, [r2, #1]
 80056b8:	4618      	mov	r0, r3
 80056ba:	e7c9      	b.n	8005650 <_strtod_l+0x1e0>
 80056bc:	4658      	mov	r0, fp
 80056be:	e7d2      	b.n	8005666 <_strtod_l+0x1f6>
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	f103 0301 	add.w	r3, r3, #1
 80056c6:	dc03      	bgt.n	80056d0 <_strtod_l+0x260>
 80056c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80056ca:	434f      	muls	r7, r1
 80056cc:	9709      	str	r7, [sp, #36]	; 0x24
 80056ce:	e7e1      	b.n	8005694 <_strtod_l+0x224>
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	bfd8      	it	le
 80056d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80056d8:	e7dc      	b.n	8005694 <_strtod_l+0x224>
 80056da:	2e10      	cmp	r6, #16
 80056dc:	bfdc      	itt	le
 80056de:	230a      	movle	r3, #10
 80056e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80056e4:	e7e3      	b.n	80056ae <_strtod_l+0x23e>
 80056e6:	2300      	movs	r3, #0
 80056e8:	9305      	str	r3, [sp, #20]
 80056ea:	2301      	movs	r3, #1
 80056ec:	e780      	b.n	80055f0 <_strtod_l+0x180>
 80056ee:	f04f 0c00 	mov.w	ip, #0
 80056f2:	1caa      	adds	r2, r5, #2
 80056f4:	9215      	str	r2, [sp, #84]	; 0x54
 80056f6:	78aa      	ldrb	r2, [r5, #2]
 80056f8:	e788      	b.n	800560c <_strtod_l+0x19c>
 80056fa:	f04f 0c01 	mov.w	ip, #1
 80056fe:	e7f8      	b.n	80056f2 <_strtod_l+0x282>
 8005700:	08008100 	.word	0x08008100
 8005704:	080080f0 	.word	0x080080f0
 8005708:	7ff00000 	.word	0x7ff00000
 800570c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800570e:	1c51      	adds	r1, r2, #1
 8005710:	9115      	str	r1, [sp, #84]	; 0x54
 8005712:	7852      	ldrb	r2, [r2, #1]
 8005714:	2a30      	cmp	r2, #48	; 0x30
 8005716:	d0f9      	beq.n	800570c <_strtod_l+0x29c>
 8005718:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800571c:	2908      	cmp	r1, #8
 800571e:	f63f af7a 	bhi.w	8005616 <_strtod_l+0x1a6>
 8005722:	3a30      	subs	r2, #48	; 0x30
 8005724:	9208      	str	r2, [sp, #32]
 8005726:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005728:	920c      	str	r2, [sp, #48]	; 0x30
 800572a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800572c:	1c57      	adds	r7, r2, #1
 800572e:	9715      	str	r7, [sp, #84]	; 0x54
 8005730:	7852      	ldrb	r2, [r2, #1]
 8005732:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005736:	f1be 0f09 	cmp.w	lr, #9
 800573a:	d938      	bls.n	80057ae <_strtod_l+0x33e>
 800573c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800573e:	1a7f      	subs	r7, r7, r1
 8005740:	2f08      	cmp	r7, #8
 8005742:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005746:	dc03      	bgt.n	8005750 <_strtod_l+0x2e0>
 8005748:	9908      	ldr	r1, [sp, #32]
 800574a:	428f      	cmp	r7, r1
 800574c:	bfa8      	it	ge
 800574e:	460f      	movge	r7, r1
 8005750:	f1bc 0f00 	cmp.w	ip, #0
 8005754:	d000      	beq.n	8005758 <_strtod_l+0x2e8>
 8005756:	427f      	negs	r7, r7
 8005758:	2e00      	cmp	r6, #0
 800575a:	d14f      	bne.n	80057fc <_strtod_l+0x38c>
 800575c:	9904      	ldr	r1, [sp, #16]
 800575e:	4301      	orrs	r1, r0
 8005760:	f47f aec1 	bne.w	80054e6 <_strtod_l+0x76>
 8005764:	2b00      	cmp	r3, #0
 8005766:	f47f aedb 	bne.w	8005520 <_strtod_l+0xb0>
 800576a:	2a69      	cmp	r2, #105	; 0x69
 800576c:	d029      	beq.n	80057c2 <_strtod_l+0x352>
 800576e:	dc26      	bgt.n	80057be <_strtod_l+0x34e>
 8005770:	2a49      	cmp	r2, #73	; 0x49
 8005772:	d026      	beq.n	80057c2 <_strtod_l+0x352>
 8005774:	2a4e      	cmp	r2, #78	; 0x4e
 8005776:	f47f aed3 	bne.w	8005520 <_strtod_l+0xb0>
 800577a:	499b      	ldr	r1, [pc, #620]	; (80059e8 <_strtod_l+0x578>)
 800577c:	a815      	add	r0, sp, #84	; 0x54
 800577e:	f001 f913 	bl	80069a8 <__match>
 8005782:	2800      	cmp	r0, #0
 8005784:	f43f aecc 	beq.w	8005520 <_strtod_l+0xb0>
 8005788:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b28      	cmp	r3, #40	; 0x28
 800578e:	d12f      	bne.n	80057f0 <_strtod_l+0x380>
 8005790:	4996      	ldr	r1, [pc, #600]	; (80059ec <_strtod_l+0x57c>)
 8005792:	aa18      	add	r2, sp, #96	; 0x60
 8005794:	a815      	add	r0, sp, #84	; 0x54
 8005796:	f001 f91b 	bl	80069d0 <__hexnan>
 800579a:	2805      	cmp	r0, #5
 800579c:	d128      	bne.n	80057f0 <_strtod_l+0x380>
 800579e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80057a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80057ac:	e69b      	b.n	80054e6 <_strtod_l+0x76>
 80057ae:	9f08      	ldr	r7, [sp, #32]
 80057b0:	210a      	movs	r1, #10
 80057b2:	fb01 2107 	mla	r1, r1, r7, r2
 80057b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80057ba:	9208      	str	r2, [sp, #32]
 80057bc:	e7b5      	b.n	800572a <_strtod_l+0x2ba>
 80057be:	2a6e      	cmp	r2, #110	; 0x6e
 80057c0:	e7d9      	b.n	8005776 <_strtod_l+0x306>
 80057c2:	498b      	ldr	r1, [pc, #556]	; (80059f0 <_strtod_l+0x580>)
 80057c4:	a815      	add	r0, sp, #84	; 0x54
 80057c6:	f001 f8ef 	bl	80069a8 <__match>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	f43f aea8 	beq.w	8005520 <_strtod_l+0xb0>
 80057d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057d2:	4988      	ldr	r1, [pc, #544]	; (80059f4 <_strtod_l+0x584>)
 80057d4:	3b01      	subs	r3, #1
 80057d6:	a815      	add	r0, sp, #84	; 0x54
 80057d8:	9315      	str	r3, [sp, #84]	; 0x54
 80057da:	f001 f8e5 	bl	80069a8 <__match>
 80057de:	b910      	cbnz	r0, 80057e6 <_strtod_l+0x376>
 80057e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057e2:	3301      	adds	r3, #1
 80057e4:	9315      	str	r3, [sp, #84]	; 0x54
 80057e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8005a04 <_strtod_l+0x594>
 80057ea:	f04f 0800 	mov.w	r8, #0
 80057ee:	e67a      	b.n	80054e6 <_strtod_l+0x76>
 80057f0:	4881      	ldr	r0, [pc, #516]	; (80059f8 <_strtod_l+0x588>)
 80057f2:	f000 fddd 	bl	80063b0 <nan>
 80057f6:	ec59 8b10 	vmov	r8, r9, d0
 80057fa:	e674      	b.n	80054e6 <_strtod_l+0x76>
 80057fc:	9b05      	ldr	r3, [sp, #20]
 80057fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005800:	1afb      	subs	r3, r7, r3
 8005802:	f1bb 0f00 	cmp.w	fp, #0
 8005806:	bf08      	it	eq
 8005808:	46b3      	moveq	fp, r6
 800580a:	2e10      	cmp	r6, #16
 800580c:	9308      	str	r3, [sp, #32]
 800580e:	4635      	mov	r5, r6
 8005810:	bfa8      	it	ge
 8005812:	2510      	movge	r5, #16
 8005814:	f7fa fe6e 	bl	80004f4 <__aeabi_ui2d>
 8005818:	2e09      	cmp	r6, #9
 800581a:	4680      	mov	r8, r0
 800581c:	4689      	mov	r9, r1
 800581e:	dd13      	ble.n	8005848 <_strtod_l+0x3d8>
 8005820:	4b76      	ldr	r3, [pc, #472]	; (80059fc <_strtod_l+0x58c>)
 8005822:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005826:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800582a:	f7fa fedd 	bl	80005e8 <__aeabi_dmul>
 800582e:	4680      	mov	r8, r0
 8005830:	4650      	mov	r0, sl
 8005832:	4689      	mov	r9, r1
 8005834:	f7fa fe5e 	bl	80004f4 <__aeabi_ui2d>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4640      	mov	r0, r8
 800583e:	4649      	mov	r1, r9
 8005840:	f7fa fd1c 	bl	800027c <__adddf3>
 8005844:	4680      	mov	r8, r0
 8005846:	4689      	mov	r9, r1
 8005848:	2e0f      	cmp	r6, #15
 800584a:	dc38      	bgt.n	80058be <_strtod_l+0x44e>
 800584c:	9b08      	ldr	r3, [sp, #32]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f43f ae49 	beq.w	80054e6 <_strtod_l+0x76>
 8005854:	dd24      	ble.n	80058a0 <_strtod_l+0x430>
 8005856:	2b16      	cmp	r3, #22
 8005858:	dc0b      	bgt.n	8005872 <_strtod_l+0x402>
 800585a:	4968      	ldr	r1, [pc, #416]	; (80059fc <_strtod_l+0x58c>)
 800585c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005864:	4642      	mov	r2, r8
 8005866:	464b      	mov	r3, r9
 8005868:	f7fa febe 	bl	80005e8 <__aeabi_dmul>
 800586c:	4680      	mov	r8, r0
 800586e:	4689      	mov	r9, r1
 8005870:	e639      	b.n	80054e6 <_strtod_l+0x76>
 8005872:	9a08      	ldr	r2, [sp, #32]
 8005874:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005878:	4293      	cmp	r3, r2
 800587a:	db20      	blt.n	80058be <_strtod_l+0x44e>
 800587c:	4c5f      	ldr	r4, [pc, #380]	; (80059fc <_strtod_l+0x58c>)
 800587e:	f1c6 060f 	rsb	r6, r6, #15
 8005882:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8005886:	4642      	mov	r2, r8
 8005888:	464b      	mov	r3, r9
 800588a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800588e:	f7fa feab 	bl	80005e8 <__aeabi_dmul>
 8005892:	9b08      	ldr	r3, [sp, #32]
 8005894:	1b9e      	subs	r6, r3, r6
 8005896:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800589a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800589e:	e7e3      	b.n	8005868 <_strtod_l+0x3f8>
 80058a0:	9b08      	ldr	r3, [sp, #32]
 80058a2:	3316      	adds	r3, #22
 80058a4:	db0b      	blt.n	80058be <_strtod_l+0x44e>
 80058a6:	9b05      	ldr	r3, [sp, #20]
 80058a8:	1bdf      	subs	r7, r3, r7
 80058aa:	4b54      	ldr	r3, [pc, #336]	; (80059fc <_strtod_l+0x58c>)
 80058ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80058b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b4:	4640      	mov	r0, r8
 80058b6:	4649      	mov	r1, r9
 80058b8:	f7fa ffc0 	bl	800083c <__aeabi_ddiv>
 80058bc:	e7d6      	b.n	800586c <_strtod_l+0x3fc>
 80058be:	9b08      	ldr	r3, [sp, #32]
 80058c0:	1b75      	subs	r5, r6, r5
 80058c2:	441d      	add	r5, r3
 80058c4:	2d00      	cmp	r5, #0
 80058c6:	dd70      	ble.n	80059aa <_strtod_l+0x53a>
 80058c8:	f015 030f 	ands.w	r3, r5, #15
 80058cc:	d00a      	beq.n	80058e4 <_strtod_l+0x474>
 80058ce:	494b      	ldr	r1, [pc, #300]	; (80059fc <_strtod_l+0x58c>)
 80058d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80058d4:	4642      	mov	r2, r8
 80058d6:	464b      	mov	r3, r9
 80058d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058dc:	f7fa fe84 	bl	80005e8 <__aeabi_dmul>
 80058e0:	4680      	mov	r8, r0
 80058e2:	4689      	mov	r9, r1
 80058e4:	f035 050f 	bics.w	r5, r5, #15
 80058e8:	d04d      	beq.n	8005986 <_strtod_l+0x516>
 80058ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80058ee:	dd22      	ble.n	8005936 <_strtod_l+0x4c6>
 80058f0:	2500      	movs	r5, #0
 80058f2:	46ab      	mov	fp, r5
 80058f4:	9509      	str	r5, [sp, #36]	; 0x24
 80058f6:	9505      	str	r5, [sp, #20]
 80058f8:	2322      	movs	r3, #34	; 0x22
 80058fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8005a04 <_strtod_l+0x594>
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	f04f 0800 	mov.w	r8, #0
 8005904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	f43f aded 	beq.w	80054e6 <_strtod_l+0x76>
 800590c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800590e:	4620      	mov	r0, r4
 8005910:	f001 f9f8 	bl	8006d04 <_Bfree>
 8005914:	9905      	ldr	r1, [sp, #20]
 8005916:	4620      	mov	r0, r4
 8005918:	f001 f9f4 	bl	8006d04 <_Bfree>
 800591c:	4659      	mov	r1, fp
 800591e:	4620      	mov	r0, r4
 8005920:	f001 f9f0 	bl	8006d04 <_Bfree>
 8005924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005926:	4620      	mov	r0, r4
 8005928:	f001 f9ec 	bl	8006d04 <_Bfree>
 800592c:	4629      	mov	r1, r5
 800592e:	4620      	mov	r0, r4
 8005930:	f001 f9e8 	bl	8006d04 <_Bfree>
 8005934:	e5d7      	b.n	80054e6 <_strtod_l+0x76>
 8005936:	4b32      	ldr	r3, [pc, #200]	; (8005a00 <_strtod_l+0x590>)
 8005938:	9304      	str	r3, [sp, #16]
 800593a:	2300      	movs	r3, #0
 800593c:	112d      	asrs	r5, r5, #4
 800593e:	4640      	mov	r0, r8
 8005940:	4649      	mov	r1, r9
 8005942:	469a      	mov	sl, r3
 8005944:	2d01      	cmp	r5, #1
 8005946:	dc21      	bgt.n	800598c <_strtod_l+0x51c>
 8005948:	b10b      	cbz	r3, 800594e <_strtod_l+0x4de>
 800594a:	4680      	mov	r8, r0
 800594c:	4689      	mov	r9, r1
 800594e:	492c      	ldr	r1, [pc, #176]	; (8005a00 <_strtod_l+0x590>)
 8005950:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005954:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005958:	4642      	mov	r2, r8
 800595a:	464b      	mov	r3, r9
 800595c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005960:	f7fa fe42 	bl	80005e8 <__aeabi_dmul>
 8005964:	4b27      	ldr	r3, [pc, #156]	; (8005a04 <_strtod_l+0x594>)
 8005966:	460a      	mov	r2, r1
 8005968:	400b      	ands	r3, r1
 800596a:	4927      	ldr	r1, [pc, #156]	; (8005a08 <_strtod_l+0x598>)
 800596c:	428b      	cmp	r3, r1
 800596e:	4680      	mov	r8, r0
 8005970:	d8be      	bhi.n	80058f0 <_strtod_l+0x480>
 8005972:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005976:	428b      	cmp	r3, r1
 8005978:	bf86      	itte	hi
 800597a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8005a0c <_strtod_l+0x59c>
 800597e:	f04f 38ff 	movhi.w	r8, #4294967295
 8005982:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005986:	2300      	movs	r3, #0
 8005988:	9304      	str	r3, [sp, #16]
 800598a:	e07b      	b.n	8005a84 <_strtod_l+0x614>
 800598c:	07ea      	lsls	r2, r5, #31
 800598e:	d505      	bpl.n	800599c <_strtod_l+0x52c>
 8005990:	9b04      	ldr	r3, [sp, #16]
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f7fa fe27 	bl	80005e8 <__aeabi_dmul>
 800599a:	2301      	movs	r3, #1
 800599c:	9a04      	ldr	r2, [sp, #16]
 800599e:	3208      	adds	r2, #8
 80059a0:	f10a 0a01 	add.w	sl, sl, #1
 80059a4:	106d      	asrs	r5, r5, #1
 80059a6:	9204      	str	r2, [sp, #16]
 80059a8:	e7cc      	b.n	8005944 <_strtod_l+0x4d4>
 80059aa:	d0ec      	beq.n	8005986 <_strtod_l+0x516>
 80059ac:	426d      	negs	r5, r5
 80059ae:	f015 020f 	ands.w	r2, r5, #15
 80059b2:	d00a      	beq.n	80059ca <_strtod_l+0x55a>
 80059b4:	4b11      	ldr	r3, [pc, #68]	; (80059fc <_strtod_l+0x58c>)
 80059b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059ba:	4640      	mov	r0, r8
 80059bc:	4649      	mov	r1, r9
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f7fa ff3b 	bl	800083c <__aeabi_ddiv>
 80059c6:	4680      	mov	r8, r0
 80059c8:	4689      	mov	r9, r1
 80059ca:	112d      	asrs	r5, r5, #4
 80059cc:	d0db      	beq.n	8005986 <_strtod_l+0x516>
 80059ce:	2d1f      	cmp	r5, #31
 80059d0:	dd1e      	ble.n	8005a10 <_strtod_l+0x5a0>
 80059d2:	2500      	movs	r5, #0
 80059d4:	46ab      	mov	fp, r5
 80059d6:	9509      	str	r5, [sp, #36]	; 0x24
 80059d8:	9505      	str	r5, [sp, #20]
 80059da:	2322      	movs	r3, #34	; 0x22
 80059dc:	f04f 0800 	mov.w	r8, #0
 80059e0:	f04f 0900 	mov.w	r9, #0
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	e78d      	b.n	8005904 <_strtod_l+0x494>
 80059e8:	080080fb 	.word	0x080080fb
 80059ec:	08008114 	.word	0x08008114
 80059f0:	080080f2 	.word	0x080080f2
 80059f4:	080080f5 	.word	0x080080f5
 80059f8:	08008478 	.word	0x08008478
 80059fc:	08008268 	.word	0x08008268
 8005a00:	08008240 	.word	0x08008240
 8005a04:	7ff00000 	.word	0x7ff00000
 8005a08:	7ca00000 	.word	0x7ca00000
 8005a0c:	7fefffff 	.word	0x7fefffff
 8005a10:	f015 0310 	ands.w	r3, r5, #16
 8005a14:	bf18      	it	ne
 8005a16:	236a      	movne	r3, #106	; 0x6a
 8005a18:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8005dbc <_strtod_l+0x94c>
 8005a1c:	9304      	str	r3, [sp, #16]
 8005a1e:	4640      	mov	r0, r8
 8005a20:	4649      	mov	r1, r9
 8005a22:	2300      	movs	r3, #0
 8005a24:	07ea      	lsls	r2, r5, #31
 8005a26:	d504      	bpl.n	8005a32 <_strtod_l+0x5c2>
 8005a28:	e9da 2300 	ldrd	r2, r3, [sl]
 8005a2c:	f7fa fddc 	bl	80005e8 <__aeabi_dmul>
 8005a30:	2301      	movs	r3, #1
 8005a32:	106d      	asrs	r5, r5, #1
 8005a34:	f10a 0a08 	add.w	sl, sl, #8
 8005a38:	d1f4      	bne.n	8005a24 <_strtod_l+0x5b4>
 8005a3a:	b10b      	cbz	r3, 8005a40 <_strtod_l+0x5d0>
 8005a3c:	4680      	mov	r8, r0
 8005a3e:	4689      	mov	r9, r1
 8005a40:	9b04      	ldr	r3, [sp, #16]
 8005a42:	b1bb      	cbz	r3, 8005a74 <_strtod_l+0x604>
 8005a44:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005a48:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	4649      	mov	r1, r9
 8005a50:	dd10      	ble.n	8005a74 <_strtod_l+0x604>
 8005a52:	2b1f      	cmp	r3, #31
 8005a54:	f340 811e 	ble.w	8005c94 <_strtod_l+0x824>
 8005a58:	2b34      	cmp	r3, #52	; 0x34
 8005a5a:	bfde      	ittt	le
 8005a5c:	f04f 33ff 	movle.w	r3, #4294967295
 8005a60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005a64:	4093      	lslle	r3, r2
 8005a66:	f04f 0800 	mov.w	r8, #0
 8005a6a:	bfcc      	ite	gt
 8005a6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005a70:	ea03 0901 	andle.w	r9, r3, r1
 8005a74:	2200      	movs	r2, #0
 8005a76:	2300      	movs	r3, #0
 8005a78:	4640      	mov	r0, r8
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	f7fb f81c 	bl	8000ab8 <__aeabi_dcmpeq>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d1a6      	bne.n	80059d2 <_strtod_l+0x562>
 8005a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a8a:	4633      	mov	r3, r6
 8005a8c:	465a      	mov	r2, fp
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f001 f9a0 	bl	8006dd4 <__s2b>
 8005a94:	9009      	str	r0, [sp, #36]	; 0x24
 8005a96:	2800      	cmp	r0, #0
 8005a98:	f43f af2a 	beq.w	80058f0 <_strtod_l+0x480>
 8005a9c:	9a08      	ldr	r2, [sp, #32]
 8005a9e:	9b05      	ldr	r3, [sp, #20]
 8005aa0:	2a00      	cmp	r2, #0
 8005aa2:	eba3 0307 	sub.w	r3, r3, r7
 8005aa6:	bfa8      	it	ge
 8005aa8:	2300      	movge	r3, #0
 8005aaa:	930c      	str	r3, [sp, #48]	; 0x30
 8005aac:	2500      	movs	r5, #0
 8005aae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005ab2:	9312      	str	r3, [sp, #72]	; 0x48
 8005ab4:	46ab      	mov	fp, r5
 8005ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab8:	4620      	mov	r0, r4
 8005aba:	6859      	ldr	r1, [r3, #4]
 8005abc:	f001 f8e2 	bl	8006c84 <_Balloc>
 8005ac0:	9005      	str	r0, [sp, #20]
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	f43f af18 	beq.w	80058f8 <_strtod_l+0x488>
 8005ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	3202      	adds	r2, #2
 8005ace:	f103 010c 	add.w	r1, r3, #12
 8005ad2:	0092      	lsls	r2, r2, #2
 8005ad4:	300c      	adds	r0, #12
 8005ad6:	f000 fc5a 	bl	800638e <memcpy>
 8005ada:	ec49 8b10 	vmov	d0, r8, r9
 8005ade:	aa18      	add	r2, sp, #96	; 0x60
 8005ae0:	a917      	add	r1, sp, #92	; 0x5c
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f001 fcaa 	bl	800743c <__d2b>
 8005ae8:	ec49 8b18 	vmov	d8, r8, r9
 8005aec:	9016      	str	r0, [sp, #88]	; 0x58
 8005aee:	2800      	cmp	r0, #0
 8005af0:	f43f af02 	beq.w	80058f8 <_strtod_l+0x488>
 8005af4:	2101      	movs	r1, #1
 8005af6:	4620      	mov	r0, r4
 8005af8:	f001 fa04 	bl	8006f04 <__i2b>
 8005afc:	4683      	mov	fp, r0
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f43f aefa 	beq.w	80058f8 <_strtod_l+0x488>
 8005b04:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005b06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005b08:	2e00      	cmp	r6, #0
 8005b0a:	bfab      	itete	ge
 8005b0c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8005b0e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8005b10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005b12:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8005b16:	bfac      	ite	ge
 8005b18:	eb06 0a03 	addge.w	sl, r6, r3
 8005b1c:	1b9f      	sublt	r7, r3, r6
 8005b1e:	9b04      	ldr	r3, [sp, #16]
 8005b20:	1af6      	subs	r6, r6, r3
 8005b22:	4416      	add	r6, r2
 8005b24:	4ba0      	ldr	r3, [pc, #640]	; (8005da8 <_strtod_l+0x938>)
 8005b26:	3e01      	subs	r6, #1
 8005b28:	429e      	cmp	r6, r3
 8005b2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005b2e:	f280 80c4 	bge.w	8005cba <_strtod_l+0x84a>
 8005b32:	1b9b      	subs	r3, r3, r6
 8005b34:	2b1f      	cmp	r3, #31
 8005b36:	eba2 0203 	sub.w	r2, r2, r3
 8005b3a:	f04f 0101 	mov.w	r1, #1
 8005b3e:	f300 80b0 	bgt.w	8005ca2 <_strtod_l+0x832>
 8005b42:	fa01 f303 	lsl.w	r3, r1, r3
 8005b46:	930e      	str	r3, [sp, #56]	; 0x38
 8005b48:	2300      	movs	r3, #0
 8005b4a:	930d      	str	r3, [sp, #52]	; 0x34
 8005b4c:	eb0a 0602 	add.w	r6, sl, r2
 8005b50:	9b04      	ldr	r3, [sp, #16]
 8005b52:	45b2      	cmp	sl, r6
 8005b54:	4417      	add	r7, r2
 8005b56:	441f      	add	r7, r3
 8005b58:	4653      	mov	r3, sl
 8005b5a:	bfa8      	it	ge
 8005b5c:	4633      	movge	r3, r6
 8005b5e:	42bb      	cmp	r3, r7
 8005b60:	bfa8      	it	ge
 8005b62:	463b      	movge	r3, r7
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bfc2      	ittt	gt
 8005b68:	1af6      	subgt	r6, r6, r3
 8005b6a:	1aff      	subgt	r7, r7, r3
 8005b6c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8005b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	dd17      	ble.n	8005ba6 <_strtod_l+0x736>
 8005b76:	4659      	mov	r1, fp
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f001 fa82 	bl	8007084 <__pow5mult>
 8005b80:	4683      	mov	fp, r0
 8005b82:	2800      	cmp	r0, #0
 8005b84:	f43f aeb8 	beq.w	80058f8 <_strtod_l+0x488>
 8005b88:	4601      	mov	r1, r0
 8005b8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f001 f9cf 	bl	8006f30 <__multiply>
 8005b92:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b94:	2800      	cmp	r0, #0
 8005b96:	f43f aeaf 	beq.w	80058f8 <_strtod_l+0x488>
 8005b9a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f001 f8b1 	bl	8006d04 <_Bfree>
 8005ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba4:	9316      	str	r3, [sp, #88]	; 0x58
 8005ba6:	2e00      	cmp	r6, #0
 8005ba8:	f300 808c 	bgt.w	8005cc4 <_strtod_l+0x854>
 8005bac:	9b08      	ldr	r3, [sp, #32]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	dd08      	ble.n	8005bc4 <_strtod_l+0x754>
 8005bb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005bb4:	9905      	ldr	r1, [sp, #20]
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f001 fa64 	bl	8007084 <__pow5mult>
 8005bbc:	9005      	str	r0, [sp, #20]
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	f43f ae9a 	beq.w	80058f8 <_strtod_l+0x488>
 8005bc4:	2f00      	cmp	r7, #0
 8005bc6:	dd08      	ble.n	8005bda <_strtod_l+0x76a>
 8005bc8:	9905      	ldr	r1, [sp, #20]
 8005bca:	463a      	mov	r2, r7
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f001 fab3 	bl	8007138 <__lshift>
 8005bd2:	9005      	str	r0, [sp, #20]
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	f43f ae8f 	beq.w	80058f8 <_strtod_l+0x488>
 8005bda:	f1ba 0f00 	cmp.w	sl, #0
 8005bde:	dd08      	ble.n	8005bf2 <_strtod_l+0x782>
 8005be0:	4659      	mov	r1, fp
 8005be2:	4652      	mov	r2, sl
 8005be4:	4620      	mov	r0, r4
 8005be6:	f001 faa7 	bl	8007138 <__lshift>
 8005bea:	4683      	mov	fp, r0
 8005bec:	2800      	cmp	r0, #0
 8005bee:	f43f ae83 	beq.w	80058f8 <_strtod_l+0x488>
 8005bf2:	9a05      	ldr	r2, [sp, #20]
 8005bf4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f001 fb26 	bl	8007248 <__mdiff>
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f43f ae7a 	beq.w	80058f8 <_strtod_l+0x488>
 8005c04:	68c3      	ldr	r3, [r0, #12]
 8005c06:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60c3      	str	r3, [r0, #12]
 8005c0c:	4659      	mov	r1, fp
 8005c0e:	f001 faff 	bl	8007210 <__mcmp>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	da60      	bge.n	8005cd8 <_strtod_l+0x868>
 8005c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c18:	ea53 0308 	orrs.w	r3, r3, r8
 8005c1c:	f040 8084 	bne.w	8005d28 <_strtod_l+0x8b8>
 8005c20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d17f      	bne.n	8005d28 <_strtod_l+0x8b8>
 8005c28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c2c:	0d1b      	lsrs	r3, r3, #20
 8005c2e:	051b      	lsls	r3, r3, #20
 8005c30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005c34:	d978      	bls.n	8005d28 <_strtod_l+0x8b8>
 8005c36:	696b      	ldr	r3, [r5, #20]
 8005c38:	b913      	cbnz	r3, 8005c40 <_strtod_l+0x7d0>
 8005c3a:	692b      	ldr	r3, [r5, #16]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	dd73      	ble.n	8005d28 <_strtod_l+0x8b8>
 8005c40:	4629      	mov	r1, r5
 8005c42:	2201      	movs	r2, #1
 8005c44:	4620      	mov	r0, r4
 8005c46:	f001 fa77 	bl	8007138 <__lshift>
 8005c4a:	4659      	mov	r1, fp
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	f001 fadf 	bl	8007210 <__mcmp>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	dd68      	ble.n	8005d28 <_strtod_l+0x8b8>
 8005c56:	9904      	ldr	r1, [sp, #16]
 8005c58:	4a54      	ldr	r2, [pc, #336]	; (8005dac <_strtod_l+0x93c>)
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	2900      	cmp	r1, #0
 8005c5e:	f000 8084 	beq.w	8005d6a <_strtod_l+0x8fa>
 8005c62:	ea02 0109 	and.w	r1, r2, r9
 8005c66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005c6a:	dc7e      	bgt.n	8005d6a <_strtod_l+0x8fa>
 8005c6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005c70:	f77f aeb3 	ble.w	80059da <_strtod_l+0x56a>
 8005c74:	4b4e      	ldr	r3, [pc, #312]	; (8005db0 <_strtod_l+0x940>)
 8005c76:	4640      	mov	r0, r8
 8005c78:	4649      	mov	r1, r9
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f7fa fcb4 	bl	80005e8 <__aeabi_dmul>
 8005c80:	4b4a      	ldr	r3, [pc, #296]	; (8005dac <_strtod_l+0x93c>)
 8005c82:	400b      	ands	r3, r1
 8005c84:	4680      	mov	r8, r0
 8005c86:	4689      	mov	r9, r1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f47f ae3f 	bne.w	800590c <_strtod_l+0x49c>
 8005c8e:	2322      	movs	r3, #34	; 0x22
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	e63b      	b.n	800590c <_strtod_l+0x49c>
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	ea03 0808 	and.w	r8, r3, r8
 8005ca0:	e6e8      	b.n	8005a74 <_strtod_l+0x604>
 8005ca2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005ca6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005caa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005cae:	36e2      	adds	r6, #226	; 0xe2
 8005cb0:	fa01 f306 	lsl.w	r3, r1, r6
 8005cb4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8005cb8:	e748      	b.n	8005b4c <_strtod_l+0x6dc>
 8005cba:	2100      	movs	r1, #0
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8005cc2:	e743      	b.n	8005b4c <_strtod_l+0x6dc>
 8005cc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005cc6:	4632      	mov	r2, r6
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f001 fa35 	bl	8007138 <__lshift>
 8005cce:	9016      	str	r0, [sp, #88]	; 0x58
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	f47f af6b 	bne.w	8005bac <_strtod_l+0x73c>
 8005cd6:	e60f      	b.n	80058f8 <_strtod_l+0x488>
 8005cd8:	46ca      	mov	sl, r9
 8005cda:	d171      	bne.n	8005dc0 <_strtod_l+0x950>
 8005cdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ce2:	b352      	cbz	r2, 8005d3a <_strtod_l+0x8ca>
 8005ce4:	4a33      	ldr	r2, [pc, #204]	; (8005db4 <_strtod_l+0x944>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d12a      	bne.n	8005d40 <_strtod_l+0x8d0>
 8005cea:	9b04      	ldr	r3, [sp, #16]
 8005cec:	4641      	mov	r1, r8
 8005cee:	b1fb      	cbz	r3, 8005d30 <_strtod_l+0x8c0>
 8005cf0:	4b2e      	ldr	r3, [pc, #184]	; (8005dac <_strtod_l+0x93c>)
 8005cf2:	ea09 0303 	and.w	r3, r9, r3
 8005cf6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfe:	d81a      	bhi.n	8005d36 <_strtod_l+0x8c6>
 8005d00:	0d1b      	lsrs	r3, r3, #20
 8005d02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	4299      	cmp	r1, r3
 8005d0c:	d118      	bne.n	8005d40 <_strtod_l+0x8d0>
 8005d0e:	4b2a      	ldr	r3, [pc, #168]	; (8005db8 <_strtod_l+0x948>)
 8005d10:	459a      	cmp	sl, r3
 8005d12:	d102      	bne.n	8005d1a <_strtod_l+0x8aa>
 8005d14:	3101      	adds	r1, #1
 8005d16:	f43f adef 	beq.w	80058f8 <_strtod_l+0x488>
 8005d1a:	4b24      	ldr	r3, [pc, #144]	; (8005dac <_strtod_l+0x93c>)
 8005d1c:	ea0a 0303 	and.w	r3, sl, r3
 8005d20:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8005d24:	f04f 0800 	mov.w	r8, #0
 8005d28:	9b04      	ldr	r3, [sp, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1a2      	bne.n	8005c74 <_strtod_l+0x804>
 8005d2e:	e5ed      	b.n	800590c <_strtod_l+0x49c>
 8005d30:	f04f 33ff 	mov.w	r3, #4294967295
 8005d34:	e7e9      	b.n	8005d0a <_strtod_l+0x89a>
 8005d36:	4613      	mov	r3, r2
 8005d38:	e7e7      	b.n	8005d0a <_strtod_l+0x89a>
 8005d3a:	ea53 0308 	orrs.w	r3, r3, r8
 8005d3e:	d08a      	beq.n	8005c56 <_strtod_l+0x7e6>
 8005d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d42:	b1e3      	cbz	r3, 8005d7e <_strtod_l+0x90e>
 8005d44:	ea13 0f0a 	tst.w	r3, sl
 8005d48:	d0ee      	beq.n	8005d28 <_strtod_l+0x8b8>
 8005d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d4c:	9a04      	ldr	r2, [sp, #16]
 8005d4e:	4640      	mov	r0, r8
 8005d50:	4649      	mov	r1, r9
 8005d52:	b1c3      	cbz	r3, 8005d86 <_strtod_l+0x916>
 8005d54:	f7ff fb70 	bl	8005438 <sulp>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	ec51 0b18 	vmov	r0, r1, d8
 8005d60:	f7fa fa8c 	bl	800027c <__adddf3>
 8005d64:	4680      	mov	r8, r0
 8005d66:	4689      	mov	r9, r1
 8005d68:	e7de      	b.n	8005d28 <_strtod_l+0x8b8>
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005d70:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005d74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005d78:	f04f 38ff 	mov.w	r8, #4294967295
 8005d7c:	e7d4      	b.n	8005d28 <_strtod_l+0x8b8>
 8005d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d80:	ea13 0f08 	tst.w	r3, r8
 8005d84:	e7e0      	b.n	8005d48 <_strtod_l+0x8d8>
 8005d86:	f7ff fb57 	bl	8005438 <sulp>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	ec51 0b18 	vmov	r0, r1, d8
 8005d92:	f7fa fa71 	bl	8000278 <__aeabi_dsub>
 8005d96:	2200      	movs	r2, #0
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4680      	mov	r8, r0
 8005d9c:	4689      	mov	r9, r1
 8005d9e:	f7fa fe8b 	bl	8000ab8 <__aeabi_dcmpeq>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	d0c0      	beq.n	8005d28 <_strtod_l+0x8b8>
 8005da6:	e618      	b.n	80059da <_strtod_l+0x56a>
 8005da8:	fffffc02 	.word	0xfffffc02
 8005dac:	7ff00000 	.word	0x7ff00000
 8005db0:	39500000 	.word	0x39500000
 8005db4:	000fffff 	.word	0x000fffff
 8005db8:	7fefffff 	.word	0x7fefffff
 8005dbc:	08008128 	.word	0x08008128
 8005dc0:	4659      	mov	r1, fp
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f001 fb94 	bl	80074f0 <__ratio>
 8005dc8:	ec57 6b10 	vmov	r6, r7, d0
 8005dcc:	ee10 0a10 	vmov	r0, s0
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	f7fa fe82 	bl	8000ae0 <__aeabi_dcmple>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d071      	beq.n	8005ec4 <_strtod_l+0xa54>
 8005de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d17c      	bne.n	8005ee0 <_strtod_l+0xa70>
 8005de6:	f1b8 0f00 	cmp.w	r8, #0
 8005dea:	d15a      	bne.n	8005ea2 <_strtod_l+0xa32>
 8005dec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d15d      	bne.n	8005eb0 <_strtod_l+0xa40>
 8005df4:	4b90      	ldr	r3, [pc, #576]	; (8006038 <_strtod_l+0xbc8>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	4630      	mov	r0, r6
 8005dfa:	4639      	mov	r1, r7
 8005dfc:	f7fa fe66 	bl	8000acc <__aeabi_dcmplt>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d15c      	bne.n	8005ebe <_strtod_l+0xa4e>
 8005e04:	4630      	mov	r0, r6
 8005e06:	4639      	mov	r1, r7
 8005e08:	4b8c      	ldr	r3, [pc, #560]	; (800603c <_strtod_l+0xbcc>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f7fa fbec 	bl	80005e8 <__aeabi_dmul>
 8005e10:	4606      	mov	r6, r0
 8005e12:	460f      	mov	r7, r1
 8005e14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005e18:	9606      	str	r6, [sp, #24]
 8005e1a:	9307      	str	r3, [sp, #28]
 8005e1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005e24:	4b86      	ldr	r3, [pc, #536]	; (8006040 <_strtod_l+0xbd0>)
 8005e26:	ea0a 0303 	and.w	r3, sl, r3
 8005e2a:	930d      	str	r3, [sp, #52]	; 0x34
 8005e2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e2e:	4b85      	ldr	r3, [pc, #532]	; (8006044 <_strtod_l+0xbd4>)
 8005e30:	429a      	cmp	r2, r3
 8005e32:	f040 8090 	bne.w	8005f56 <_strtod_l+0xae6>
 8005e36:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8005e3a:	ec49 8b10 	vmov	d0, r8, r9
 8005e3e:	f001 fa8d 	bl	800735c <__ulp>
 8005e42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e46:	ec51 0b10 	vmov	r0, r1, d0
 8005e4a:	f7fa fbcd 	bl	80005e8 <__aeabi_dmul>
 8005e4e:	4642      	mov	r2, r8
 8005e50:	464b      	mov	r3, r9
 8005e52:	f7fa fa13 	bl	800027c <__adddf3>
 8005e56:	460b      	mov	r3, r1
 8005e58:	4979      	ldr	r1, [pc, #484]	; (8006040 <_strtod_l+0xbd0>)
 8005e5a:	4a7b      	ldr	r2, [pc, #492]	; (8006048 <_strtod_l+0xbd8>)
 8005e5c:	4019      	ands	r1, r3
 8005e5e:	4291      	cmp	r1, r2
 8005e60:	4680      	mov	r8, r0
 8005e62:	d944      	bls.n	8005eee <_strtod_l+0xa7e>
 8005e64:	ee18 2a90 	vmov	r2, s17
 8005e68:	4b78      	ldr	r3, [pc, #480]	; (800604c <_strtod_l+0xbdc>)
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d104      	bne.n	8005e78 <_strtod_l+0xa08>
 8005e6e:	ee18 3a10 	vmov	r3, s16
 8005e72:	3301      	adds	r3, #1
 8005e74:	f43f ad40 	beq.w	80058f8 <_strtod_l+0x488>
 8005e78:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800604c <_strtod_l+0xbdc>
 8005e7c:	f04f 38ff 	mov.w	r8, #4294967295
 8005e80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005e82:	4620      	mov	r0, r4
 8005e84:	f000 ff3e 	bl	8006d04 <_Bfree>
 8005e88:	9905      	ldr	r1, [sp, #20]
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 ff3a 	bl	8006d04 <_Bfree>
 8005e90:	4659      	mov	r1, fp
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 ff36 	bl	8006d04 <_Bfree>
 8005e98:	4629      	mov	r1, r5
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f000 ff32 	bl	8006d04 <_Bfree>
 8005ea0:	e609      	b.n	8005ab6 <_strtod_l+0x646>
 8005ea2:	f1b8 0f01 	cmp.w	r8, #1
 8005ea6:	d103      	bne.n	8005eb0 <_strtod_l+0xa40>
 8005ea8:	f1b9 0f00 	cmp.w	r9, #0
 8005eac:	f43f ad95 	beq.w	80059da <_strtod_l+0x56a>
 8005eb0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006008 <_strtod_l+0xb98>
 8005eb4:	4f60      	ldr	r7, [pc, #384]	; (8006038 <_strtod_l+0xbc8>)
 8005eb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005eba:	2600      	movs	r6, #0
 8005ebc:	e7ae      	b.n	8005e1c <_strtod_l+0x9ac>
 8005ebe:	4f5f      	ldr	r7, [pc, #380]	; (800603c <_strtod_l+0xbcc>)
 8005ec0:	2600      	movs	r6, #0
 8005ec2:	e7a7      	b.n	8005e14 <_strtod_l+0x9a4>
 8005ec4:	4b5d      	ldr	r3, [pc, #372]	; (800603c <_strtod_l+0xbcc>)
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	4639      	mov	r1, r7
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f7fa fb8c 	bl	80005e8 <__aeabi_dmul>
 8005ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	460f      	mov	r7, r1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d09c      	beq.n	8005e14 <_strtod_l+0x9a4>
 8005eda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005ede:	e79d      	b.n	8005e1c <_strtod_l+0x9ac>
 8005ee0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006010 <_strtod_l+0xba0>
 8005ee4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005ee8:	ec57 6b17 	vmov	r6, r7, d7
 8005eec:	e796      	b.n	8005e1c <_strtod_l+0x9ac>
 8005eee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005ef2:	9b04      	ldr	r3, [sp, #16]
 8005ef4:	46ca      	mov	sl, r9
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1c2      	bne.n	8005e80 <_strtod_l+0xa10>
 8005efa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005efe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f00:	0d1b      	lsrs	r3, r3, #20
 8005f02:	051b      	lsls	r3, r3, #20
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d1bb      	bne.n	8005e80 <_strtod_l+0xa10>
 8005f08:	4630      	mov	r0, r6
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	f7fa feb6 	bl	8000c7c <__aeabi_d2lz>
 8005f10:	f7fa fb3c 	bl	800058c <__aeabi_l2d>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4630      	mov	r0, r6
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	f7fa f9ac 	bl	8000278 <__aeabi_dsub>
 8005f20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f26:	ea43 0308 	orr.w	r3, r3, r8
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	460f      	mov	r7, r1
 8005f30:	d054      	beq.n	8005fdc <_strtod_l+0xb6c>
 8005f32:	a339      	add	r3, pc, #228	; (adr r3, 8006018 <_strtod_l+0xba8>)
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f7fa fdc8 	bl	8000acc <__aeabi_dcmplt>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	f47f ace5 	bne.w	800590c <_strtod_l+0x49c>
 8005f42:	a337      	add	r3, pc, #220	; (adr r3, 8006020 <_strtod_l+0xbb0>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	4630      	mov	r0, r6
 8005f4a:	4639      	mov	r1, r7
 8005f4c:	f7fa fddc 	bl	8000b08 <__aeabi_dcmpgt>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d095      	beq.n	8005e80 <_strtod_l+0xa10>
 8005f54:	e4da      	b.n	800590c <_strtod_l+0x49c>
 8005f56:	9b04      	ldr	r3, [sp, #16]
 8005f58:	b333      	cbz	r3, 8005fa8 <_strtod_l+0xb38>
 8005f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f60:	d822      	bhi.n	8005fa8 <_strtod_l+0xb38>
 8005f62:	a331      	add	r3, pc, #196	; (adr r3, 8006028 <_strtod_l+0xbb8>)
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	4630      	mov	r0, r6
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	f7fa fdb8 	bl	8000ae0 <__aeabi_dcmple>
 8005f70:	b1a0      	cbz	r0, 8005f9c <_strtod_l+0xb2c>
 8005f72:	4639      	mov	r1, r7
 8005f74:	4630      	mov	r0, r6
 8005f76:	f7fa fdf9 	bl	8000b6c <__aeabi_d2uiz>
 8005f7a:	2801      	cmp	r0, #1
 8005f7c:	bf38      	it	cc
 8005f7e:	2001      	movcc	r0, #1
 8005f80:	f7fa fab8 	bl	80004f4 <__aeabi_ui2d>
 8005f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f86:	4606      	mov	r6, r0
 8005f88:	460f      	mov	r7, r1
 8005f8a:	bb23      	cbnz	r3, 8005fd6 <_strtod_l+0xb66>
 8005f8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f90:	9010      	str	r0, [sp, #64]	; 0x40
 8005f92:	9311      	str	r3, [sp, #68]	; 0x44
 8005f94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fa0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fa8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005fac:	eeb0 0a48 	vmov.f32	s0, s16
 8005fb0:	eef0 0a68 	vmov.f32	s1, s17
 8005fb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005fb8:	f001 f9d0 	bl	800735c <__ulp>
 8005fbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005fc0:	ec53 2b10 	vmov	r2, r3, d0
 8005fc4:	f7fa fb10 	bl	80005e8 <__aeabi_dmul>
 8005fc8:	ec53 2b18 	vmov	r2, r3, d8
 8005fcc:	f7fa f956 	bl	800027c <__adddf3>
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	4689      	mov	r9, r1
 8005fd4:	e78d      	b.n	8005ef2 <_strtod_l+0xa82>
 8005fd6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005fda:	e7db      	b.n	8005f94 <_strtod_l+0xb24>
 8005fdc:	a314      	add	r3, pc, #80	; (adr r3, 8006030 <_strtod_l+0xbc0>)
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	f7fa fd73 	bl	8000acc <__aeabi_dcmplt>
 8005fe6:	e7b3      	b.n	8005f50 <_strtod_l+0xae0>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	930a      	str	r3, [sp, #40]	; 0x28
 8005fec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005fee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	f7ff ba7c 	b.w	80054ee <_strtod_l+0x7e>
 8005ff6:	2a65      	cmp	r2, #101	; 0x65
 8005ff8:	f43f ab75 	beq.w	80056e6 <_strtod_l+0x276>
 8005ffc:	2a45      	cmp	r2, #69	; 0x45
 8005ffe:	f43f ab72 	beq.w	80056e6 <_strtod_l+0x276>
 8006002:	2301      	movs	r3, #1
 8006004:	f7ff bbaa 	b.w	800575c <_strtod_l+0x2ec>
 8006008:	00000000 	.word	0x00000000
 800600c:	bff00000 	.word	0xbff00000
 8006010:	00000000 	.word	0x00000000
 8006014:	3ff00000 	.word	0x3ff00000
 8006018:	94a03595 	.word	0x94a03595
 800601c:	3fdfffff 	.word	0x3fdfffff
 8006020:	35afe535 	.word	0x35afe535
 8006024:	3fe00000 	.word	0x3fe00000
 8006028:	ffc00000 	.word	0xffc00000
 800602c:	41dfffff 	.word	0x41dfffff
 8006030:	94a03595 	.word	0x94a03595
 8006034:	3fcfffff 	.word	0x3fcfffff
 8006038:	3ff00000 	.word	0x3ff00000
 800603c:	3fe00000 	.word	0x3fe00000
 8006040:	7ff00000 	.word	0x7ff00000
 8006044:	7fe00000 	.word	0x7fe00000
 8006048:	7c9fffff 	.word	0x7c9fffff
 800604c:	7fefffff 	.word	0x7fefffff

08006050 <strtod>:
 8006050:	460a      	mov	r2, r1
 8006052:	4601      	mov	r1, r0
 8006054:	4802      	ldr	r0, [pc, #8]	; (8006060 <strtod+0x10>)
 8006056:	4b03      	ldr	r3, [pc, #12]	; (8006064 <strtod+0x14>)
 8006058:	6800      	ldr	r0, [r0, #0]
 800605a:	f7ff ba09 	b.w	8005470 <_strtod_l>
 800605e:	bf00      	nop
 8006060:	200001d0 	.word	0x200001d0
 8006064:	20000018 	.word	0x20000018

08006068 <std>:
 8006068:	2300      	movs	r3, #0
 800606a:	b510      	push	{r4, lr}
 800606c:	4604      	mov	r4, r0
 800606e:	e9c0 3300 	strd	r3, r3, [r0]
 8006072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006076:	6083      	str	r3, [r0, #8]
 8006078:	8181      	strh	r1, [r0, #12]
 800607a:	6643      	str	r3, [r0, #100]	; 0x64
 800607c:	81c2      	strh	r2, [r0, #14]
 800607e:	6183      	str	r3, [r0, #24]
 8006080:	4619      	mov	r1, r3
 8006082:	2208      	movs	r2, #8
 8006084:	305c      	adds	r0, #92	; 0x5c
 8006086:	f000 f8f4 	bl	8006272 <memset>
 800608a:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <std+0x58>)
 800608c:	6263      	str	r3, [r4, #36]	; 0x24
 800608e:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <std+0x5c>)
 8006090:	62a3      	str	r3, [r4, #40]	; 0x28
 8006092:	4b0d      	ldr	r3, [pc, #52]	; (80060c8 <std+0x60>)
 8006094:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006096:	4b0d      	ldr	r3, [pc, #52]	; (80060cc <std+0x64>)
 8006098:	6323      	str	r3, [r4, #48]	; 0x30
 800609a:	4b0d      	ldr	r3, [pc, #52]	; (80060d0 <std+0x68>)
 800609c:	6224      	str	r4, [r4, #32]
 800609e:	429c      	cmp	r4, r3
 80060a0:	d006      	beq.n	80060b0 <std+0x48>
 80060a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80060a6:	4294      	cmp	r4, r2
 80060a8:	d002      	beq.n	80060b0 <std+0x48>
 80060aa:	33d0      	adds	r3, #208	; 0xd0
 80060ac:	429c      	cmp	r4, r3
 80060ae:	d105      	bne.n	80060bc <std+0x54>
 80060b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b8:	f000 b966 	b.w	8006388 <__retarget_lock_init_recursive>
 80060bc:	bd10      	pop	{r4, pc}
 80060be:	bf00      	nop
 80060c0:	080061ed 	.word	0x080061ed
 80060c4:	0800620f 	.word	0x0800620f
 80060c8:	08006247 	.word	0x08006247
 80060cc:	0800626b 	.word	0x0800626b
 80060d0:	20000578 	.word	0x20000578

080060d4 <stdio_exit_handler>:
 80060d4:	4a02      	ldr	r2, [pc, #8]	; (80060e0 <stdio_exit_handler+0xc>)
 80060d6:	4903      	ldr	r1, [pc, #12]	; (80060e4 <stdio_exit_handler+0x10>)
 80060d8:	4803      	ldr	r0, [pc, #12]	; (80060e8 <stdio_exit_handler+0x14>)
 80060da:	f000 b869 	b.w	80061b0 <_fwalk_sglue>
 80060de:	bf00      	nop
 80060e0:	2000000c 	.word	0x2000000c
 80060e4:	08007705 	.word	0x08007705
 80060e8:	20000184 	.word	0x20000184

080060ec <cleanup_stdio>:
 80060ec:	6841      	ldr	r1, [r0, #4]
 80060ee:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <cleanup_stdio+0x34>)
 80060f0:	4299      	cmp	r1, r3
 80060f2:	b510      	push	{r4, lr}
 80060f4:	4604      	mov	r4, r0
 80060f6:	d001      	beq.n	80060fc <cleanup_stdio+0x10>
 80060f8:	f001 fb04 	bl	8007704 <_fflush_r>
 80060fc:	68a1      	ldr	r1, [r4, #8]
 80060fe:	4b09      	ldr	r3, [pc, #36]	; (8006124 <cleanup_stdio+0x38>)
 8006100:	4299      	cmp	r1, r3
 8006102:	d002      	beq.n	800610a <cleanup_stdio+0x1e>
 8006104:	4620      	mov	r0, r4
 8006106:	f001 fafd 	bl	8007704 <_fflush_r>
 800610a:	68e1      	ldr	r1, [r4, #12]
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <cleanup_stdio+0x3c>)
 800610e:	4299      	cmp	r1, r3
 8006110:	d004      	beq.n	800611c <cleanup_stdio+0x30>
 8006112:	4620      	mov	r0, r4
 8006114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006118:	f001 baf4 	b.w	8007704 <_fflush_r>
 800611c:	bd10      	pop	{r4, pc}
 800611e:	bf00      	nop
 8006120:	20000578 	.word	0x20000578
 8006124:	200005e0 	.word	0x200005e0
 8006128:	20000648 	.word	0x20000648

0800612c <global_stdio_init.part.0>:
 800612c:	b510      	push	{r4, lr}
 800612e:	4b0b      	ldr	r3, [pc, #44]	; (800615c <global_stdio_init.part.0+0x30>)
 8006130:	4c0b      	ldr	r4, [pc, #44]	; (8006160 <global_stdio_init.part.0+0x34>)
 8006132:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <global_stdio_init.part.0+0x38>)
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	4620      	mov	r0, r4
 8006138:	2200      	movs	r2, #0
 800613a:	2104      	movs	r1, #4
 800613c:	f7ff ff94 	bl	8006068 <std>
 8006140:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006144:	2201      	movs	r2, #1
 8006146:	2109      	movs	r1, #9
 8006148:	f7ff ff8e 	bl	8006068 <std>
 800614c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006150:	2202      	movs	r2, #2
 8006152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006156:	2112      	movs	r1, #18
 8006158:	f7ff bf86 	b.w	8006068 <std>
 800615c:	200006b0 	.word	0x200006b0
 8006160:	20000578 	.word	0x20000578
 8006164:	080060d5 	.word	0x080060d5

08006168 <__sfp_lock_acquire>:
 8006168:	4801      	ldr	r0, [pc, #4]	; (8006170 <__sfp_lock_acquire+0x8>)
 800616a:	f000 b90e 	b.w	800638a <__retarget_lock_acquire_recursive>
 800616e:	bf00      	nop
 8006170:	200006b9 	.word	0x200006b9

08006174 <__sfp_lock_release>:
 8006174:	4801      	ldr	r0, [pc, #4]	; (800617c <__sfp_lock_release+0x8>)
 8006176:	f000 b909 	b.w	800638c <__retarget_lock_release_recursive>
 800617a:	bf00      	nop
 800617c:	200006b9 	.word	0x200006b9

08006180 <__sinit>:
 8006180:	b510      	push	{r4, lr}
 8006182:	4604      	mov	r4, r0
 8006184:	f7ff fff0 	bl	8006168 <__sfp_lock_acquire>
 8006188:	6a23      	ldr	r3, [r4, #32]
 800618a:	b11b      	cbz	r3, 8006194 <__sinit+0x14>
 800618c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006190:	f7ff bff0 	b.w	8006174 <__sfp_lock_release>
 8006194:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <__sinit+0x28>)
 8006196:	6223      	str	r3, [r4, #32]
 8006198:	4b04      	ldr	r3, [pc, #16]	; (80061ac <__sinit+0x2c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1f5      	bne.n	800618c <__sinit+0xc>
 80061a0:	f7ff ffc4 	bl	800612c <global_stdio_init.part.0>
 80061a4:	e7f2      	b.n	800618c <__sinit+0xc>
 80061a6:	bf00      	nop
 80061a8:	080060ed 	.word	0x080060ed
 80061ac:	200006b0 	.word	0x200006b0

080061b0 <_fwalk_sglue>:
 80061b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b4:	4607      	mov	r7, r0
 80061b6:	4688      	mov	r8, r1
 80061b8:	4614      	mov	r4, r2
 80061ba:	2600      	movs	r6, #0
 80061bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061c0:	f1b9 0901 	subs.w	r9, r9, #1
 80061c4:	d505      	bpl.n	80061d2 <_fwalk_sglue+0x22>
 80061c6:	6824      	ldr	r4, [r4, #0]
 80061c8:	2c00      	cmp	r4, #0
 80061ca:	d1f7      	bne.n	80061bc <_fwalk_sglue+0xc>
 80061cc:	4630      	mov	r0, r6
 80061ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061d2:	89ab      	ldrh	r3, [r5, #12]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d907      	bls.n	80061e8 <_fwalk_sglue+0x38>
 80061d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061dc:	3301      	adds	r3, #1
 80061de:	d003      	beq.n	80061e8 <_fwalk_sglue+0x38>
 80061e0:	4629      	mov	r1, r5
 80061e2:	4638      	mov	r0, r7
 80061e4:	47c0      	blx	r8
 80061e6:	4306      	orrs	r6, r0
 80061e8:	3568      	adds	r5, #104	; 0x68
 80061ea:	e7e9      	b.n	80061c0 <_fwalk_sglue+0x10>

080061ec <__sread>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	460c      	mov	r4, r1
 80061f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f4:	f000 f87a 	bl	80062ec <_read_r>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	bfab      	itete	ge
 80061fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006200:	181b      	addge	r3, r3, r0
 8006202:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006206:	bfac      	ite	ge
 8006208:	6563      	strge	r3, [r4, #84]	; 0x54
 800620a:	81a3      	strhlt	r3, [r4, #12]
 800620c:	bd10      	pop	{r4, pc}

0800620e <__swrite>:
 800620e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006212:	461f      	mov	r7, r3
 8006214:	898b      	ldrh	r3, [r1, #12]
 8006216:	05db      	lsls	r3, r3, #23
 8006218:	4605      	mov	r5, r0
 800621a:	460c      	mov	r4, r1
 800621c:	4616      	mov	r6, r2
 800621e:	d505      	bpl.n	800622c <__swrite+0x1e>
 8006220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006224:	2302      	movs	r3, #2
 8006226:	2200      	movs	r2, #0
 8006228:	f000 f84e 	bl	80062c8 <_lseek_r>
 800622c:	89a3      	ldrh	r3, [r4, #12]
 800622e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006236:	81a3      	strh	r3, [r4, #12]
 8006238:	4632      	mov	r2, r6
 800623a:	463b      	mov	r3, r7
 800623c:	4628      	mov	r0, r5
 800623e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006242:	f000 b865 	b.w	8006310 <_write_r>

08006246 <__sseek>:
 8006246:	b510      	push	{r4, lr}
 8006248:	460c      	mov	r4, r1
 800624a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800624e:	f000 f83b 	bl	80062c8 <_lseek_r>
 8006252:	1c43      	adds	r3, r0, #1
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	bf15      	itete	ne
 8006258:	6560      	strne	r0, [r4, #84]	; 0x54
 800625a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800625e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006262:	81a3      	strheq	r3, [r4, #12]
 8006264:	bf18      	it	ne
 8006266:	81a3      	strhne	r3, [r4, #12]
 8006268:	bd10      	pop	{r4, pc}

0800626a <__sclose>:
 800626a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626e:	f000 b81b 	b.w	80062a8 <_close_r>

08006272 <memset>:
 8006272:	4402      	add	r2, r0
 8006274:	4603      	mov	r3, r0
 8006276:	4293      	cmp	r3, r2
 8006278:	d100      	bne.n	800627c <memset+0xa>
 800627a:	4770      	bx	lr
 800627c:	f803 1b01 	strb.w	r1, [r3], #1
 8006280:	e7f9      	b.n	8006276 <memset+0x4>

08006282 <strncmp>:
 8006282:	b510      	push	{r4, lr}
 8006284:	b16a      	cbz	r2, 80062a2 <strncmp+0x20>
 8006286:	3901      	subs	r1, #1
 8006288:	1884      	adds	r4, r0, r2
 800628a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800628e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006292:	429a      	cmp	r2, r3
 8006294:	d103      	bne.n	800629e <strncmp+0x1c>
 8006296:	42a0      	cmp	r0, r4
 8006298:	d001      	beq.n	800629e <strncmp+0x1c>
 800629a:	2a00      	cmp	r2, #0
 800629c:	d1f5      	bne.n	800628a <strncmp+0x8>
 800629e:	1ad0      	subs	r0, r2, r3
 80062a0:	bd10      	pop	{r4, pc}
 80062a2:	4610      	mov	r0, r2
 80062a4:	e7fc      	b.n	80062a0 <strncmp+0x1e>
	...

080062a8 <_close_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4d06      	ldr	r5, [pc, #24]	; (80062c4 <_close_r+0x1c>)
 80062ac:	2300      	movs	r3, #0
 80062ae:	4604      	mov	r4, r0
 80062b0:	4608      	mov	r0, r1
 80062b2:	602b      	str	r3, [r5, #0]
 80062b4:	f7fc f84f 	bl	8002356 <_close>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_close_r+0x1a>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_close_r+0x1a>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	200006b4 	.word	0x200006b4

080062c8 <_lseek_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4d07      	ldr	r5, [pc, #28]	; (80062e8 <_lseek_r+0x20>)
 80062cc:	4604      	mov	r4, r0
 80062ce:	4608      	mov	r0, r1
 80062d0:	4611      	mov	r1, r2
 80062d2:	2200      	movs	r2, #0
 80062d4:	602a      	str	r2, [r5, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f7fc f864 	bl	80023a4 <_lseek>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d102      	bne.n	80062e6 <_lseek_r+0x1e>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	b103      	cbz	r3, 80062e6 <_lseek_r+0x1e>
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
 80062e8:	200006b4 	.word	0x200006b4

080062ec <_read_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	4d07      	ldr	r5, [pc, #28]	; (800630c <_read_r+0x20>)
 80062f0:	4604      	mov	r4, r0
 80062f2:	4608      	mov	r0, r1
 80062f4:	4611      	mov	r1, r2
 80062f6:	2200      	movs	r2, #0
 80062f8:	602a      	str	r2, [r5, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f7fb fff2 	bl	80022e4 <_read>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_read_r+0x1e>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_read_r+0x1e>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	200006b4 	.word	0x200006b4

08006310 <_write_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4d07      	ldr	r5, [pc, #28]	; (8006330 <_write_r+0x20>)
 8006314:	4604      	mov	r4, r0
 8006316:	4608      	mov	r0, r1
 8006318:	4611      	mov	r1, r2
 800631a:	2200      	movs	r2, #0
 800631c:	602a      	str	r2, [r5, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	f7fb fffd 	bl	800231e <_write>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d102      	bne.n	800632e <_write_r+0x1e>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	b103      	cbz	r3, 800632e <_write_r+0x1e>
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	200006b4 	.word	0x200006b4

08006334 <__errno>:
 8006334:	4b01      	ldr	r3, [pc, #4]	; (800633c <__errno+0x8>)
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	200001d0 	.word	0x200001d0

08006340 <__libc_init_array>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	4d0d      	ldr	r5, [pc, #52]	; (8006378 <__libc_init_array+0x38>)
 8006344:	4c0d      	ldr	r4, [pc, #52]	; (800637c <__libc_init_array+0x3c>)
 8006346:	1b64      	subs	r4, r4, r5
 8006348:	10a4      	asrs	r4, r4, #2
 800634a:	2600      	movs	r6, #0
 800634c:	42a6      	cmp	r6, r4
 800634e:	d109      	bne.n	8006364 <__libc_init_array+0x24>
 8006350:	4d0b      	ldr	r5, [pc, #44]	; (8006380 <__libc_init_array+0x40>)
 8006352:	4c0c      	ldr	r4, [pc, #48]	; (8006384 <__libc_init_array+0x44>)
 8006354:	f001 fe94 	bl	8008080 <_init>
 8006358:	1b64      	subs	r4, r4, r5
 800635a:	10a4      	asrs	r4, r4, #2
 800635c:	2600      	movs	r6, #0
 800635e:	42a6      	cmp	r6, r4
 8006360:	d105      	bne.n	800636e <__libc_init_array+0x2e>
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	f855 3b04 	ldr.w	r3, [r5], #4
 8006368:	4798      	blx	r3
 800636a:	3601      	adds	r6, #1
 800636c:	e7ee      	b.n	800634c <__libc_init_array+0xc>
 800636e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006372:	4798      	blx	r3
 8006374:	3601      	adds	r6, #1
 8006376:	e7f2      	b.n	800635e <__libc_init_array+0x1e>
 8006378:	080084b4 	.word	0x080084b4
 800637c:	080084b4 	.word	0x080084b4
 8006380:	080084b4 	.word	0x080084b4
 8006384:	080084bc 	.word	0x080084bc

08006388 <__retarget_lock_init_recursive>:
 8006388:	4770      	bx	lr

0800638a <__retarget_lock_acquire_recursive>:
 800638a:	4770      	bx	lr

0800638c <__retarget_lock_release_recursive>:
 800638c:	4770      	bx	lr

0800638e <memcpy>:
 800638e:	440a      	add	r2, r1
 8006390:	4291      	cmp	r1, r2
 8006392:	f100 33ff 	add.w	r3, r0, #4294967295
 8006396:	d100      	bne.n	800639a <memcpy+0xc>
 8006398:	4770      	bx	lr
 800639a:	b510      	push	{r4, lr}
 800639c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a4:	4291      	cmp	r1, r2
 80063a6:	d1f9      	bne.n	800639c <memcpy+0xe>
 80063a8:	bd10      	pop	{r4, pc}
 80063aa:	0000      	movs	r0, r0
 80063ac:	0000      	movs	r0, r0
	...

080063b0 <nan>:
 80063b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80063b8 <nan+0x8>
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	00000000 	.word	0x00000000
 80063bc:	7ff80000 	.word	0x7ff80000

080063c0 <_free_r>:
 80063c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063c2:	2900      	cmp	r1, #0
 80063c4:	d044      	beq.n	8006450 <_free_r+0x90>
 80063c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ca:	9001      	str	r0, [sp, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f1a1 0404 	sub.w	r4, r1, #4
 80063d2:	bfb8      	it	lt
 80063d4:	18e4      	addlt	r4, r4, r3
 80063d6:	f000 fc49 	bl	8006c6c <__malloc_lock>
 80063da:	4a1e      	ldr	r2, [pc, #120]	; (8006454 <_free_r+0x94>)
 80063dc:	9801      	ldr	r0, [sp, #4]
 80063de:	6813      	ldr	r3, [r2, #0]
 80063e0:	b933      	cbnz	r3, 80063f0 <_free_r+0x30>
 80063e2:	6063      	str	r3, [r4, #4]
 80063e4:	6014      	str	r4, [r2, #0]
 80063e6:	b003      	add	sp, #12
 80063e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063ec:	f000 bc44 	b.w	8006c78 <__malloc_unlock>
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	d908      	bls.n	8006406 <_free_r+0x46>
 80063f4:	6825      	ldr	r5, [r4, #0]
 80063f6:	1961      	adds	r1, r4, r5
 80063f8:	428b      	cmp	r3, r1
 80063fa:	bf01      	itttt	eq
 80063fc:	6819      	ldreq	r1, [r3, #0]
 80063fe:	685b      	ldreq	r3, [r3, #4]
 8006400:	1949      	addeq	r1, r1, r5
 8006402:	6021      	streq	r1, [r4, #0]
 8006404:	e7ed      	b.n	80063e2 <_free_r+0x22>
 8006406:	461a      	mov	r2, r3
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	b10b      	cbz	r3, 8006410 <_free_r+0x50>
 800640c:	42a3      	cmp	r3, r4
 800640e:	d9fa      	bls.n	8006406 <_free_r+0x46>
 8006410:	6811      	ldr	r1, [r2, #0]
 8006412:	1855      	adds	r5, r2, r1
 8006414:	42a5      	cmp	r5, r4
 8006416:	d10b      	bne.n	8006430 <_free_r+0x70>
 8006418:	6824      	ldr	r4, [r4, #0]
 800641a:	4421      	add	r1, r4
 800641c:	1854      	adds	r4, r2, r1
 800641e:	42a3      	cmp	r3, r4
 8006420:	6011      	str	r1, [r2, #0]
 8006422:	d1e0      	bne.n	80063e6 <_free_r+0x26>
 8006424:	681c      	ldr	r4, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	6053      	str	r3, [r2, #4]
 800642a:	440c      	add	r4, r1
 800642c:	6014      	str	r4, [r2, #0]
 800642e:	e7da      	b.n	80063e6 <_free_r+0x26>
 8006430:	d902      	bls.n	8006438 <_free_r+0x78>
 8006432:	230c      	movs	r3, #12
 8006434:	6003      	str	r3, [r0, #0]
 8006436:	e7d6      	b.n	80063e6 <_free_r+0x26>
 8006438:	6825      	ldr	r5, [r4, #0]
 800643a:	1961      	adds	r1, r4, r5
 800643c:	428b      	cmp	r3, r1
 800643e:	bf04      	itt	eq
 8006440:	6819      	ldreq	r1, [r3, #0]
 8006442:	685b      	ldreq	r3, [r3, #4]
 8006444:	6063      	str	r3, [r4, #4]
 8006446:	bf04      	itt	eq
 8006448:	1949      	addeq	r1, r1, r5
 800644a:	6021      	streq	r1, [r4, #0]
 800644c:	6054      	str	r4, [r2, #4]
 800644e:	e7ca      	b.n	80063e6 <_free_r+0x26>
 8006450:	b003      	add	sp, #12
 8006452:	bd30      	pop	{r4, r5, pc}
 8006454:	200006bc 	.word	0x200006bc

08006458 <rshift>:
 8006458:	6903      	ldr	r3, [r0, #16]
 800645a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800645e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006462:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006466:	f100 0414 	add.w	r4, r0, #20
 800646a:	dd45      	ble.n	80064f8 <rshift+0xa0>
 800646c:	f011 011f 	ands.w	r1, r1, #31
 8006470:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006474:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006478:	d10c      	bne.n	8006494 <rshift+0x3c>
 800647a:	f100 0710 	add.w	r7, r0, #16
 800647e:	4629      	mov	r1, r5
 8006480:	42b1      	cmp	r1, r6
 8006482:	d334      	bcc.n	80064ee <rshift+0x96>
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	1eea      	subs	r2, r5, #3
 800648a:	4296      	cmp	r6, r2
 800648c:	bf38      	it	cc
 800648e:	2300      	movcc	r3, #0
 8006490:	4423      	add	r3, r4
 8006492:	e015      	b.n	80064c0 <rshift+0x68>
 8006494:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006498:	f1c1 0820 	rsb	r8, r1, #32
 800649c:	40cf      	lsrs	r7, r1
 800649e:	f105 0e04 	add.w	lr, r5, #4
 80064a2:	46a1      	mov	r9, r4
 80064a4:	4576      	cmp	r6, lr
 80064a6:	46f4      	mov	ip, lr
 80064a8:	d815      	bhi.n	80064d6 <rshift+0x7e>
 80064aa:	1a9a      	subs	r2, r3, r2
 80064ac:	0092      	lsls	r2, r2, #2
 80064ae:	3a04      	subs	r2, #4
 80064b0:	3501      	adds	r5, #1
 80064b2:	42ae      	cmp	r6, r5
 80064b4:	bf38      	it	cc
 80064b6:	2200      	movcc	r2, #0
 80064b8:	18a3      	adds	r3, r4, r2
 80064ba:	50a7      	str	r7, [r4, r2]
 80064bc:	b107      	cbz	r7, 80064c0 <rshift+0x68>
 80064be:	3304      	adds	r3, #4
 80064c0:	1b1a      	subs	r2, r3, r4
 80064c2:	42a3      	cmp	r3, r4
 80064c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80064c8:	bf08      	it	eq
 80064ca:	2300      	moveq	r3, #0
 80064cc:	6102      	str	r2, [r0, #16]
 80064ce:	bf08      	it	eq
 80064d0:	6143      	streq	r3, [r0, #20]
 80064d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064d6:	f8dc c000 	ldr.w	ip, [ip]
 80064da:	fa0c fc08 	lsl.w	ip, ip, r8
 80064de:	ea4c 0707 	orr.w	r7, ip, r7
 80064e2:	f849 7b04 	str.w	r7, [r9], #4
 80064e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80064ea:	40cf      	lsrs	r7, r1
 80064ec:	e7da      	b.n	80064a4 <rshift+0x4c>
 80064ee:	f851 cb04 	ldr.w	ip, [r1], #4
 80064f2:	f847 cf04 	str.w	ip, [r7, #4]!
 80064f6:	e7c3      	b.n	8006480 <rshift+0x28>
 80064f8:	4623      	mov	r3, r4
 80064fa:	e7e1      	b.n	80064c0 <rshift+0x68>

080064fc <__hexdig_fun>:
 80064fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006500:	2b09      	cmp	r3, #9
 8006502:	d802      	bhi.n	800650a <__hexdig_fun+0xe>
 8006504:	3820      	subs	r0, #32
 8006506:	b2c0      	uxtb	r0, r0
 8006508:	4770      	bx	lr
 800650a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800650e:	2b05      	cmp	r3, #5
 8006510:	d801      	bhi.n	8006516 <__hexdig_fun+0x1a>
 8006512:	3847      	subs	r0, #71	; 0x47
 8006514:	e7f7      	b.n	8006506 <__hexdig_fun+0xa>
 8006516:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800651a:	2b05      	cmp	r3, #5
 800651c:	d801      	bhi.n	8006522 <__hexdig_fun+0x26>
 800651e:	3827      	subs	r0, #39	; 0x27
 8006520:	e7f1      	b.n	8006506 <__hexdig_fun+0xa>
 8006522:	2000      	movs	r0, #0
 8006524:	4770      	bx	lr
	...

08006528 <__gethex>:
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	4617      	mov	r7, r2
 800652e:	680a      	ldr	r2, [r1, #0]
 8006530:	b085      	sub	sp, #20
 8006532:	f102 0b02 	add.w	fp, r2, #2
 8006536:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800653a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800653e:	4681      	mov	r9, r0
 8006540:	468a      	mov	sl, r1
 8006542:	9302      	str	r3, [sp, #8]
 8006544:	32fe      	adds	r2, #254	; 0xfe
 8006546:	eb02 030b 	add.w	r3, r2, fp
 800654a:	46d8      	mov	r8, fp
 800654c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	2830      	cmp	r0, #48	; 0x30
 8006554:	d0f7      	beq.n	8006546 <__gethex+0x1e>
 8006556:	f7ff ffd1 	bl	80064fc <__hexdig_fun>
 800655a:	4604      	mov	r4, r0
 800655c:	2800      	cmp	r0, #0
 800655e:	d138      	bne.n	80065d2 <__gethex+0xaa>
 8006560:	49a7      	ldr	r1, [pc, #668]	; (8006800 <__gethex+0x2d8>)
 8006562:	2201      	movs	r2, #1
 8006564:	4640      	mov	r0, r8
 8006566:	f7ff fe8c 	bl	8006282 <strncmp>
 800656a:	4606      	mov	r6, r0
 800656c:	2800      	cmp	r0, #0
 800656e:	d169      	bne.n	8006644 <__gethex+0x11c>
 8006570:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006574:	465d      	mov	r5, fp
 8006576:	f7ff ffc1 	bl	80064fc <__hexdig_fun>
 800657a:	2800      	cmp	r0, #0
 800657c:	d064      	beq.n	8006648 <__gethex+0x120>
 800657e:	465a      	mov	r2, fp
 8006580:	7810      	ldrb	r0, [r2, #0]
 8006582:	2830      	cmp	r0, #48	; 0x30
 8006584:	4690      	mov	r8, r2
 8006586:	f102 0201 	add.w	r2, r2, #1
 800658a:	d0f9      	beq.n	8006580 <__gethex+0x58>
 800658c:	f7ff ffb6 	bl	80064fc <__hexdig_fun>
 8006590:	2301      	movs	r3, #1
 8006592:	fab0 f480 	clz	r4, r0
 8006596:	0964      	lsrs	r4, r4, #5
 8006598:	465e      	mov	r6, fp
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	4642      	mov	r2, r8
 800659e:	4615      	mov	r5, r2
 80065a0:	3201      	adds	r2, #1
 80065a2:	7828      	ldrb	r0, [r5, #0]
 80065a4:	f7ff ffaa 	bl	80064fc <__hexdig_fun>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d1f8      	bne.n	800659e <__gethex+0x76>
 80065ac:	4994      	ldr	r1, [pc, #592]	; (8006800 <__gethex+0x2d8>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	4628      	mov	r0, r5
 80065b2:	f7ff fe66 	bl	8006282 <strncmp>
 80065b6:	b978      	cbnz	r0, 80065d8 <__gethex+0xb0>
 80065b8:	b946      	cbnz	r6, 80065cc <__gethex+0xa4>
 80065ba:	1c6e      	adds	r6, r5, #1
 80065bc:	4632      	mov	r2, r6
 80065be:	4615      	mov	r5, r2
 80065c0:	3201      	adds	r2, #1
 80065c2:	7828      	ldrb	r0, [r5, #0]
 80065c4:	f7ff ff9a 	bl	80064fc <__hexdig_fun>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d1f8      	bne.n	80065be <__gethex+0x96>
 80065cc:	1b73      	subs	r3, r6, r5
 80065ce:	009e      	lsls	r6, r3, #2
 80065d0:	e004      	b.n	80065dc <__gethex+0xb4>
 80065d2:	2400      	movs	r4, #0
 80065d4:	4626      	mov	r6, r4
 80065d6:	e7e1      	b.n	800659c <__gethex+0x74>
 80065d8:	2e00      	cmp	r6, #0
 80065da:	d1f7      	bne.n	80065cc <__gethex+0xa4>
 80065dc:	782b      	ldrb	r3, [r5, #0]
 80065de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065e2:	2b50      	cmp	r3, #80	; 0x50
 80065e4:	d13d      	bne.n	8006662 <__gethex+0x13a>
 80065e6:	786b      	ldrb	r3, [r5, #1]
 80065e8:	2b2b      	cmp	r3, #43	; 0x2b
 80065ea:	d02f      	beq.n	800664c <__gethex+0x124>
 80065ec:	2b2d      	cmp	r3, #45	; 0x2d
 80065ee:	d031      	beq.n	8006654 <__gethex+0x12c>
 80065f0:	1c69      	adds	r1, r5, #1
 80065f2:	f04f 0b00 	mov.w	fp, #0
 80065f6:	7808      	ldrb	r0, [r1, #0]
 80065f8:	f7ff ff80 	bl	80064fc <__hexdig_fun>
 80065fc:	1e42      	subs	r2, r0, #1
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	2a18      	cmp	r2, #24
 8006602:	d82e      	bhi.n	8006662 <__gethex+0x13a>
 8006604:	f1a0 0210 	sub.w	r2, r0, #16
 8006608:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800660c:	f7ff ff76 	bl	80064fc <__hexdig_fun>
 8006610:	f100 3cff 	add.w	ip, r0, #4294967295
 8006614:	fa5f fc8c 	uxtb.w	ip, ip
 8006618:	f1bc 0f18 	cmp.w	ip, #24
 800661c:	d91d      	bls.n	800665a <__gethex+0x132>
 800661e:	f1bb 0f00 	cmp.w	fp, #0
 8006622:	d000      	beq.n	8006626 <__gethex+0xfe>
 8006624:	4252      	negs	r2, r2
 8006626:	4416      	add	r6, r2
 8006628:	f8ca 1000 	str.w	r1, [sl]
 800662c:	b1dc      	cbz	r4, 8006666 <__gethex+0x13e>
 800662e:	9b01      	ldr	r3, [sp, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	bf14      	ite	ne
 8006634:	f04f 0800 	movne.w	r8, #0
 8006638:	f04f 0806 	moveq.w	r8, #6
 800663c:	4640      	mov	r0, r8
 800663e:	b005      	add	sp, #20
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	4645      	mov	r5, r8
 8006646:	4626      	mov	r6, r4
 8006648:	2401      	movs	r4, #1
 800664a:	e7c7      	b.n	80065dc <__gethex+0xb4>
 800664c:	f04f 0b00 	mov.w	fp, #0
 8006650:	1ca9      	adds	r1, r5, #2
 8006652:	e7d0      	b.n	80065f6 <__gethex+0xce>
 8006654:	f04f 0b01 	mov.w	fp, #1
 8006658:	e7fa      	b.n	8006650 <__gethex+0x128>
 800665a:	230a      	movs	r3, #10
 800665c:	fb03 0002 	mla	r0, r3, r2, r0
 8006660:	e7d0      	b.n	8006604 <__gethex+0xdc>
 8006662:	4629      	mov	r1, r5
 8006664:	e7e0      	b.n	8006628 <__gethex+0x100>
 8006666:	eba5 0308 	sub.w	r3, r5, r8
 800666a:	3b01      	subs	r3, #1
 800666c:	4621      	mov	r1, r4
 800666e:	2b07      	cmp	r3, #7
 8006670:	dc0a      	bgt.n	8006688 <__gethex+0x160>
 8006672:	4648      	mov	r0, r9
 8006674:	f000 fb06 	bl	8006c84 <_Balloc>
 8006678:	4604      	mov	r4, r0
 800667a:	b940      	cbnz	r0, 800668e <__gethex+0x166>
 800667c:	4b61      	ldr	r3, [pc, #388]	; (8006804 <__gethex+0x2dc>)
 800667e:	4602      	mov	r2, r0
 8006680:	21e4      	movs	r1, #228	; 0xe4
 8006682:	4861      	ldr	r0, [pc, #388]	; (8006808 <__gethex+0x2e0>)
 8006684:	f001 f876 	bl	8007774 <__assert_func>
 8006688:	3101      	adds	r1, #1
 800668a:	105b      	asrs	r3, r3, #1
 800668c:	e7ef      	b.n	800666e <__gethex+0x146>
 800668e:	f100 0a14 	add.w	sl, r0, #20
 8006692:	2300      	movs	r3, #0
 8006694:	495a      	ldr	r1, [pc, #360]	; (8006800 <__gethex+0x2d8>)
 8006696:	f8cd a004 	str.w	sl, [sp, #4]
 800669a:	469b      	mov	fp, r3
 800669c:	45a8      	cmp	r8, r5
 800669e:	d342      	bcc.n	8006726 <__gethex+0x1fe>
 80066a0:	9801      	ldr	r0, [sp, #4]
 80066a2:	f840 bb04 	str.w	fp, [r0], #4
 80066a6:	eba0 000a 	sub.w	r0, r0, sl
 80066aa:	1080      	asrs	r0, r0, #2
 80066ac:	6120      	str	r0, [r4, #16]
 80066ae:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80066b2:	4658      	mov	r0, fp
 80066b4:	f000 fbd8 	bl	8006e68 <__hi0bits>
 80066b8:	683d      	ldr	r5, [r7, #0]
 80066ba:	eba8 0000 	sub.w	r0, r8, r0
 80066be:	42a8      	cmp	r0, r5
 80066c0:	dd59      	ble.n	8006776 <__gethex+0x24e>
 80066c2:	eba0 0805 	sub.w	r8, r0, r5
 80066c6:	4641      	mov	r1, r8
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 ff67 	bl	800759c <__any_on>
 80066ce:	4683      	mov	fp, r0
 80066d0:	b1b8      	cbz	r0, 8006702 <__gethex+0x1da>
 80066d2:	f108 33ff 	add.w	r3, r8, #4294967295
 80066d6:	1159      	asrs	r1, r3, #5
 80066d8:	f003 021f 	and.w	r2, r3, #31
 80066dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80066e0:	f04f 0b01 	mov.w	fp, #1
 80066e4:	fa0b f202 	lsl.w	r2, fp, r2
 80066e8:	420a      	tst	r2, r1
 80066ea:	d00a      	beq.n	8006702 <__gethex+0x1da>
 80066ec:	455b      	cmp	r3, fp
 80066ee:	dd06      	ble.n	80066fe <__gethex+0x1d6>
 80066f0:	f1a8 0102 	sub.w	r1, r8, #2
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 ff51 	bl	800759c <__any_on>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d138      	bne.n	8006770 <__gethex+0x248>
 80066fe:	f04f 0b02 	mov.w	fp, #2
 8006702:	4641      	mov	r1, r8
 8006704:	4620      	mov	r0, r4
 8006706:	f7ff fea7 	bl	8006458 <rshift>
 800670a:	4446      	add	r6, r8
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	42b3      	cmp	r3, r6
 8006710:	da41      	bge.n	8006796 <__gethex+0x26e>
 8006712:	4621      	mov	r1, r4
 8006714:	4648      	mov	r0, r9
 8006716:	f000 faf5 	bl	8006d04 <_Bfree>
 800671a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800671c:	2300      	movs	r3, #0
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8006724:	e78a      	b.n	800663c <__gethex+0x114>
 8006726:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800672a:	2a2e      	cmp	r2, #46	; 0x2e
 800672c:	d014      	beq.n	8006758 <__gethex+0x230>
 800672e:	2b20      	cmp	r3, #32
 8006730:	d106      	bne.n	8006740 <__gethex+0x218>
 8006732:	9b01      	ldr	r3, [sp, #4]
 8006734:	f843 bb04 	str.w	fp, [r3], #4
 8006738:	f04f 0b00 	mov.w	fp, #0
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	465b      	mov	r3, fp
 8006740:	7828      	ldrb	r0, [r5, #0]
 8006742:	9303      	str	r3, [sp, #12]
 8006744:	f7ff feda 	bl	80064fc <__hexdig_fun>
 8006748:	9b03      	ldr	r3, [sp, #12]
 800674a:	f000 000f 	and.w	r0, r0, #15
 800674e:	4098      	lsls	r0, r3
 8006750:	ea4b 0b00 	orr.w	fp, fp, r0
 8006754:	3304      	adds	r3, #4
 8006756:	e7a1      	b.n	800669c <__gethex+0x174>
 8006758:	45a8      	cmp	r8, r5
 800675a:	d8e8      	bhi.n	800672e <__gethex+0x206>
 800675c:	2201      	movs	r2, #1
 800675e:	4628      	mov	r0, r5
 8006760:	9303      	str	r3, [sp, #12]
 8006762:	f7ff fd8e 	bl	8006282 <strncmp>
 8006766:	4926      	ldr	r1, [pc, #152]	; (8006800 <__gethex+0x2d8>)
 8006768:	9b03      	ldr	r3, [sp, #12]
 800676a:	2800      	cmp	r0, #0
 800676c:	d1df      	bne.n	800672e <__gethex+0x206>
 800676e:	e795      	b.n	800669c <__gethex+0x174>
 8006770:	f04f 0b03 	mov.w	fp, #3
 8006774:	e7c5      	b.n	8006702 <__gethex+0x1da>
 8006776:	da0b      	bge.n	8006790 <__gethex+0x268>
 8006778:	eba5 0800 	sub.w	r8, r5, r0
 800677c:	4621      	mov	r1, r4
 800677e:	4642      	mov	r2, r8
 8006780:	4648      	mov	r0, r9
 8006782:	f000 fcd9 	bl	8007138 <__lshift>
 8006786:	eba6 0608 	sub.w	r6, r6, r8
 800678a:	4604      	mov	r4, r0
 800678c:	f100 0a14 	add.w	sl, r0, #20
 8006790:	f04f 0b00 	mov.w	fp, #0
 8006794:	e7ba      	b.n	800670c <__gethex+0x1e4>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	42b3      	cmp	r3, r6
 800679a:	dd73      	ble.n	8006884 <__gethex+0x35c>
 800679c:	1b9e      	subs	r6, r3, r6
 800679e:	42b5      	cmp	r5, r6
 80067a0:	dc34      	bgt.n	800680c <__gethex+0x2e4>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d023      	beq.n	80067f0 <__gethex+0x2c8>
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d025      	beq.n	80067f8 <__gethex+0x2d0>
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d115      	bne.n	80067dc <__gethex+0x2b4>
 80067b0:	42b5      	cmp	r5, r6
 80067b2:	d113      	bne.n	80067dc <__gethex+0x2b4>
 80067b4:	2d01      	cmp	r5, #1
 80067b6:	d10b      	bne.n	80067d0 <__gethex+0x2a8>
 80067b8:	9a02      	ldr	r2, [sp, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	2301      	movs	r3, #1
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	f8ca 3000 	str.w	r3, [sl]
 80067c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067c8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80067cc:	601c      	str	r4, [r3, #0]
 80067ce:	e735      	b.n	800663c <__gethex+0x114>
 80067d0:	1e69      	subs	r1, r5, #1
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 fee2 	bl	800759c <__any_on>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d1ed      	bne.n	80067b8 <__gethex+0x290>
 80067dc:	4621      	mov	r1, r4
 80067de:	4648      	mov	r0, r9
 80067e0:	f000 fa90 	bl	8006d04 <_Bfree>
 80067e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067e6:	2300      	movs	r3, #0
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	f04f 0850 	mov.w	r8, #80	; 0x50
 80067ee:	e725      	b.n	800663c <__gethex+0x114>
 80067f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f2      	bne.n	80067dc <__gethex+0x2b4>
 80067f6:	e7df      	b.n	80067b8 <__gethex+0x290>
 80067f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1dc      	bne.n	80067b8 <__gethex+0x290>
 80067fe:	e7ed      	b.n	80067dc <__gethex+0x2b4>
 8006800:	080080f0 	.word	0x080080f0
 8006804:	08008158 	.word	0x08008158
 8006808:	08008169 	.word	0x08008169
 800680c:	f106 38ff 	add.w	r8, r6, #4294967295
 8006810:	f1bb 0f00 	cmp.w	fp, #0
 8006814:	d133      	bne.n	800687e <__gethex+0x356>
 8006816:	f1b8 0f00 	cmp.w	r8, #0
 800681a:	d004      	beq.n	8006826 <__gethex+0x2fe>
 800681c:	4641      	mov	r1, r8
 800681e:	4620      	mov	r0, r4
 8006820:	f000 febc 	bl	800759c <__any_on>
 8006824:	4683      	mov	fp, r0
 8006826:	ea4f 1268 	mov.w	r2, r8, asr #5
 800682a:	2301      	movs	r3, #1
 800682c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006830:	f008 081f 	and.w	r8, r8, #31
 8006834:	fa03 f308 	lsl.w	r3, r3, r8
 8006838:	4213      	tst	r3, r2
 800683a:	4631      	mov	r1, r6
 800683c:	4620      	mov	r0, r4
 800683e:	bf18      	it	ne
 8006840:	f04b 0b02 	orrne.w	fp, fp, #2
 8006844:	1bad      	subs	r5, r5, r6
 8006846:	f7ff fe07 	bl	8006458 <rshift>
 800684a:	687e      	ldr	r6, [r7, #4]
 800684c:	f04f 0802 	mov.w	r8, #2
 8006850:	f1bb 0f00 	cmp.w	fp, #0
 8006854:	d04a      	beq.n	80068ec <__gethex+0x3c4>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b02      	cmp	r3, #2
 800685a:	d016      	beq.n	800688a <__gethex+0x362>
 800685c:	2b03      	cmp	r3, #3
 800685e:	d018      	beq.n	8006892 <__gethex+0x36a>
 8006860:	2b01      	cmp	r3, #1
 8006862:	d109      	bne.n	8006878 <__gethex+0x350>
 8006864:	f01b 0f02 	tst.w	fp, #2
 8006868:	d006      	beq.n	8006878 <__gethex+0x350>
 800686a:	f8da 3000 	ldr.w	r3, [sl]
 800686e:	ea4b 0b03 	orr.w	fp, fp, r3
 8006872:	f01b 0f01 	tst.w	fp, #1
 8006876:	d10f      	bne.n	8006898 <__gethex+0x370>
 8006878:	f048 0810 	orr.w	r8, r8, #16
 800687c:	e036      	b.n	80068ec <__gethex+0x3c4>
 800687e:	f04f 0b01 	mov.w	fp, #1
 8006882:	e7d0      	b.n	8006826 <__gethex+0x2fe>
 8006884:	f04f 0801 	mov.w	r8, #1
 8006888:	e7e2      	b.n	8006850 <__gethex+0x328>
 800688a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800688c:	f1c3 0301 	rsb	r3, r3, #1
 8006890:	930f      	str	r3, [sp, #60]	; 0x3c
 8006892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d0ef      	beq.n	8006878 <__gethex+0x350>
 8006898:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800689c:	f104 0214 	add.w	r2, r4, #20
 80068a0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80068aa:	2300      	movs	r3, #0
 80068ac:	4694      	mov	ip, r2
 80068ae:	f852 1b04 	ldr.w	r1, [r2], #4
 80068b2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80068b6:	d01e      	beq.n	80068f6 <__gethex+0x3ce>
 80068b8:	3101      	adds	r1, #1
 80068ba:	f8cc 1000 	str.w	r1, [ip]
 80068be:	f1b8 0f02 	cmp.w	r8, #2
 80068c2:	f104 0214 	add.w	r2, r4, #20
 80068c6:	d13d      	bne.n	8006944 <__gethex+0x41c>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	42ab      	cmp	r3, r5
 80068ce:	d10b      	bne.n	80068e8 <__gethex+0x3c0>
 80068d0:	1169      	asrs	r1, r5, #5
 80068d2:	2301      	movs	r3, #1
 80068d4:	f005 051f 	and.w	r5, r5, #31
 80068d8:	fa03 f505 	lsl.w	r5, r3, r5
 80068dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068e0:	421d      	tst	r5, r3
 80068e2:	bf18      	it	ne
 80068e4:	f04f 0801 	movne.w	r8, #1
 80068e8:	f048 0820 	orr.w	r8, r8, #32
 80068ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ee:	601c      	str	r4, [r3, #0]
 80068f0:	9b02      	ldr	r3, [sp, #8]
 80068f2:	601e      	str	r6, [r3, #0]
 80068f4:	e6a2      	b.n	800663c <__gethex+0x114>
 80068f6:	4290      	cmp	r0, r2
 80068f8:	f842 3c04 	str.w	r3, [r2, #-4]
 80068fc:	d8d6      	bhi.n	80068ac <__gethex+0x384>
 80068fe:	68a2      	ldr	r2, [r4, #8]
 8006900:	4593      	cmp	fp, r2
 8006902:	db17      	blt.n	8006934 <__gethex+0x40c>
 8006904:	6861      	ldr	r1, [r4, #4]
 8006906:	4648      	mov	r0, r9
 8006908:	3101      	adds	r1, #1
 800690a:	f000 f9bb 	bl	8006c84 <_Balloc>
 800690e:	4682      	mov	sl, r0
 8006910:	b918      	cbnz	r0, 800691a <__gethex+0x3f2>
 8006912:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <__gethex+0x458>)
 8006914:	4602      	mov	r2, r0
 8006916:	2184      	movs	r1, #132	; 0x84
 8006918:	e6b3      	b.n	8006682 <__gethex+0x15a>
 800691a:	6922      	ldr	r2, [r4, #16]
 800691c:	3202      	adds	r2, #2
 800691e:	f104 010c 	add.w	r1, r4, #12
 8006922:	0092      	lsls	r2, r2, #2
 8006924:	300c      	adds	r0, #12
 8006926:	f7ff fd32 	bl	800638e <memcpy>
 800692a:	4621      	mov	r1, r4
 800692c:	4648      	mov	r0, r9
 800692e:	f000 f9e9 	bl	8006d04 <_Bfree>
 8006932:	4654      	mov	r4, sl
 8006934:	6922      	ldr	r2, [r4, #16]
 8006936:	1c51      	adds	r1, r2, #1
 8006938:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800693c:	6121      	str	r1, [r4, #16]
 800693e:	2101      	movs	r1, #1
 8006940:	6151      	str	r1, [r2, #20]
 8006942:	e7bc      	b.n	80068be <__gethex+0x396>
 8006944:	6921      	ldr	r1, [r4, #16]
 8006946:	4559      	cmp	r1, fp
 8006948:	dd0b      	ble.n	8006962 <__gethex+0x43a>
 800694a:	2101      	movs	r1, #1
 800694c:	4620      	mov	r0, r4
 800694e:	f7ff fd83 	bl	8006458 <rshift>
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	3601      	adds	r6, #1
 8006956:	42b3      	cmp	r3, r6
 8006958:	f6ff aedb 	blt.w	8006712 <__gethex+0x1ea>
 800695c:	f04f 0801 	mov.w	r8, #1
 8006960:	e7c2      	b.n	80068e8 <__gethex+0x3c0>
 8006962:	f015 051f 	ands.w	r5, r5, #31
 8006966:	d0f9      	beq.n	800695c <__gethex+0x434>
 8006968:	9b01      	ldr	r3, [sp, #4]
 800696a:	441a      	add	r2, r3
 800696c:	f1c5 0520 	rsb	r5, r5, #32
 8006970:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8006974:	f000 fa78 	bl	8006e68 <__hi0bits>
 8006978:	42a8      	cmp	r0, r5
 800697a:	dbe6      	blt.n	800694a <__gethex+0x422>
 800697c:	e7ee      	b.n	800695c <__gethex+0x434>
 800697e:	bf00      	nop
 8006980:	08008158 	.word	0x08008158

08006984 <L_shift>:
 8006984:	f1c2 0208 	rsb	r2, r2, #8
 8006988:	0092      	lsls	r2, r2, #2
 800698a:	b570      	push	{r4, r5, r6, lr}
 800698c:	f1c2 0620 	rsb	r6, r2, #32
 8006990:	6843      	ldr	r3, [r0, #4]
 8006992:	6804      	ldr	r4, [r0, #0]
 8006994:	fa03 f506 	lsl.w	r5, r3, r6
 8006998:	432c      	orrs	r4, r5
 800699a:	40d3      	lsrs	r3, r2
 800699c:	6004      	str	r4, [r0, #0]
 800699e:	f840 3f04 	str.w	r3, [r0, #4]!
 80069a2:	4288      	cmp	r0, r1
 80069a4:	d3f4      	bcc.n	8006990 <L_shift+0xc>
 80069a6:	bd70      	pop	{r4, r5, r6, pc}

080069a8 <__match>:
 80069a8:	b530      	push	{r4, r5, lr}
 80069aa:	6803      	ldr	r3, [r0, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069b2:	b914      	cbnz	r4, 80069ba <__match+0x12>
 80069b4:	6003      	str	r3, [r0, #0]
 80069b6:	2001      	movs	r0, #1
 80069b8:	bd30      	pop	{r4, r5, pc}
 80069ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80069c2:	2d19      	cmp	r5, #25
 80069c4:	bf98      	it	ls
 80069c6:	3220      	addls	r2, #32
 80069c8:	42a2      	cmp	r2, r4
 80069ca:	d0f0      	beq.n	80069ae <__match+0x6>
 80069cc:	2000      	movs	r0, #0
 80069ce:	e7f3      	b.n	80069b8 <__match+0x10>

080069d0 <__hexnan>:
 80069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	680b      	ldr	r3, [r1, #0]
 80069d6:	6801      	ldr	r1, [r0, #0]
 80069d8:	115e      	asrs	r6, r3, #5
 80069da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80069de:	f013 031f 	ands.w	r3, r3, #31
 80069e2:	b087      	sub	sp, #28
 80069e4:	bf18      	it	ne
 80069e6:	3604      	addne	r6, #4
 80069e8:	2500      	movs	r5, #0
 80069ea:	1f37      	subs	r7, r6, #4
 80069ec:	4682      	mov	sl, r0
 80069ee:	4690      	mov	r8, r2
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80069f6:	46b9      	mov	r9, r7
 80069f8:	463c      	mov	r4, r7
 80069fa:	9502      	str	r5, [sp, #8]
 80069fc:	46ab      	mov	fp, r5
 80069fe:	784a      	ldrb	r2, [r1, #1]
 8006a00:	1c4b      	adds	r3, r1, #1
 8006a02:	9303      	str	r3, [sp, #12]
 8006a04:	b342      	cbz	r2, 8006a58 <__hexnan+0x88>
 8006a06:	4610      	mov	r0, r2
 8006a08:	9105      	str	r1, [sp, #20]
 8006a0a:	9204      	str	r2, [sp, #16]
 8006a0c:	f7ff fd76 	bl	80064fc <__hexdig_fun>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d14f      	bne.n	8006ab4 <__hexnan+0xe4>
 8006a14:	9a04      	ldr	r2, [sp, #16]
 8006a16:	9905      	ldr	r1, [sp, #20]
 8006a18:	2a20      	cmp	r2, #32
 8006a1a:	d818      	bhi.n	8006a4e <__hexnan+0x7e>
 8006a1c:	9b02      	ldr	r3, [sp, #8]
 8006a1e:	459b      	cmp	fp, r3
 8006a20:	dd13      	ble.n	8006a4a <__hexnan+0x7a>
 8006a22:	454c      	cmp	r4, r9
 8006a24:	d206      	bcs.n	8006a34 <__hexnan+0x64>
 8006a26:	2d07      	cmp	r5, #7
 8006a28:	dc04      	bgt.n	8006a34 <__hexnan+0x64>
 8006a2a:	462a      	mov	r2, r5
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f7ff ffa8 	bl	8006984 <L_shift>
 8006a34:	4544      	cmp	r4, r8
 8006a36:	d950      	bls.n	8006ada <__hexnan+0x10a>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f1a4 0904 	sub.w	r9, r4, #4
 8006a3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a42:	f8cd b008 	str.w	fp, [sp, #8]
 8006a46:	464c      	mov	r4, r9
 8006a48:	461d      	mov	r5, r3
 8006a4a:	9903      	ldr	r1, [sp, #12]
 8006a4c:	e7d7      	b.n	80069fe <__hexnan+0x2e>
 8006a4e:	2a29      	cmp	r2, #41	; 0x29
 8006a50:	d155      	bne.n	8006afe <__hexnan+0x12e>
 8006a52:	3102      	adds	r1, #2
 8006a54:	f8ca 1000 	str.w	r1, [sl]
 8006a58:	f1bb 0f00 	cmp.w	fp, #0
 8006a5c:	d04f      	beq.n	8006afe <__hexnan+0x12e>
 8006a5e:	454c      	cmp	r4, r9
 8006a60:	d206      	bcs.n	8006a70 <__hexnan+0xa0>
 8006a62:	2d07      	cmp	r5, #7
 8006a64:	dc04      	bgt.n	8006a70 <__hexnan+0xa0>
 8006a66:	462a      	mov	r2, r5
 8006a68:	4649      	mov	r1, r9
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f7ff ff8a 	bl	8006984 <L_shift>
 8006a70:	4544      	cmp	r4, r8
 8006a72:	d934      	bls.n	8006ade <__hexnan+0x10e>
 8006a74:	f1a8 0204 	sub.w	r2, r8, #4
 8006a78:	4623      	mov	r3, r4
 8006a7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8006a7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8006a82:	429f      	cmp	r7, r3
 8006a84:	d2f9      	bcs.n	8006a7a <__hexnan+0xaa>
 8006a86:	1b3b      	subs	r3, r7, r4
 8006a88:	f023 0303 	bic.w	r3, r3, #3
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	3e03      	subs	r6, #3
 8006a90:	3401      	adds	r4, #1
 8006a92:	42a6      	cmp	r6, r4
 8006a94:	bf38      	it	cc
 8006a96:	2304      	movcc	r3, #4
 8006a98:	4443      	add	r3, r8
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f843 2b04 	str.w	r2, [r3], #4
 8006aa0:	429f      	cmp	r7, r3
 8006aa2:	d2fb      	bcs.n	8006a9c <__hexnan+0xcc>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	b91b      	cbnz	r3, 8006ab0 <__hexnan+0xe0>
 8006aa8:	4547      	cmp	r7, r8
 8006aaa:	d126      	bne.n	8006afa <__hexnan+0x12a>
 8006aac:	2301      	movs	r3, #1
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	2005      	movs	r0, #5
 8006ab2:	e025      	b.n	8006b00 <__hexnan+0x130>
 8006ab4:	3501      	adds	r5, #1
 8006ab6:	2d08      	cmp	r5, #8
 8006ab8:	f10b 0b01 	add.w	fp, fp, #1
 8006abc:	dd06      	ble.n	8006acc <__hexnan+0xfc>
 8006abe:	4544      	cmp	r4, r8
 8006ac0:	d9c3      	bls.n	8006a4a <__hexnan+0x7a>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ac8:	2501      	movs	r5, #1
 8006aca:	3c04      	subs	r4, #4
 8006acc:	6822      	ldr	r2, [r4, #0]
 8006ace:	f000 000f 	and.w	r0, r0, #15
 8006ad2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006ad6:	6020      	str	r0, [r4, #0]
 8006ad8:	e7b7      	b.n	8006a4a <__hexnan+0x7a>
 8006ada:	2508      	movs	r5, #8
 8006adc:	e7b5      	b.n	8006a4a <__hexnan+0x7a>
 8006ade:	9b01      	ldr	r3, [sp, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0df      	beq.n	8006aa4 <__hexnan+0xd4>
 8006ae4:	f1c3 0320 	rsb	r3, r3, #32
 8006ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8006aec:	40da      	lsrs	r2, r3
 8006aee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006af2:	4013      	ands	r3, r2
 8006af4:	f846 3c04 	str.w	r3, [r6, #-4]
 8006af8:	e7d4      	b.n	8006aa4 <__hexnan+0xd4>
 8006afa:	3f04      	subs	r7, #4
 8006afc:	e7d2      	b.n	8006aa4 <__hexnan+0xd4>
 8006afe:	2004      	movs	r0, #4
 8006b00:	b007      	add	sp, #28
 8006b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006b08 <sbrk_aligned>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4e0e      	ldr	r6, [pc, #56]	; (8006b44 <sbrk_aligned+0x3c>)
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	6831      	ldr	r1, [r6, #0]
 8006b10:	4605      	mov	r5, r0
 8006b12:	b911      	cbnz	r1, 8006b1a <sbrk_aligned+0x12>
 8006b14:	f000 fe1e 	bl	8007754 <_sbrk_r>
 8006b18:	6030      	str	r0, [r6, #0]
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	f000 fe19 	bl	8007754 <_sbrk_r>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d00a      	beq.n	8006b3c <sbrk_aligned+0x34>
 8006b26:	1cc4      	adds	r4, r0, #3
 8006b28:	f024 0403 	bic.w	r4, r4, #3
 8006b2c:	42a0      	cmp	r0, r4
 8006b2e:	d007      	beq.n	8006b40 <sbrk_aligned+0x38>
 8006b30:	1a21      	subs	r1, r4, r0
 8006b32:	4628      	mov	r0, r5
 8006b34:	f000 fe0e 	bl	8007754 <_sbrk_r>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d101      	bne.n	8006b40 <sbrk_aligned+0x38>
 8006b3c:	f04f 34ff 	mov.w	r4, #4294967295
 8006b40:	4620      	mov	r0, r4
 8006b42:	bd70      	pop	{r4, r5, r6, pc}
 8006b44:	200006c0 	.word	0x200006c0

08006b48 <_malloc_r>:
 8006b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b4c:	1ccd      	adds	r5, r1, #3
 8006b4e:	f025 0503 	bic.w	r5, r5, #3
 8006b52:	3508      	adds	r5, #8
 8006b54:	2d0c      	cmp	r5, #12
 8006b56:	bf38      	it	cc
 8006b58:	250c      	movcc	r5, #12
 8006b5a:	2d00      	cmp	r5, #0
 8006b5c:	4607      	mov	r7, r0
 8006b5e:	db01      	blt.n	8006b64 <_malloc_r+0x1c>
 8006b60:	42a9      	cmp	r1, r5
 8006b62:	d905      	bls.n	8006b70 <_malloc_r+0x28>
 8006b64:	230c      	movs	r3, #12
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	2600      	movs	r6, #0
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c44 <_malloc_r+0xfc>
 8006b74:	f000 f87a 	bl	8006c6c <__malloc_lock>
 8006b78:	f8d8 3000 	ldr.w	r3, [r8]
 8006b7c:	461c      	mov	r4, r3
 8006b7e:	bb5c      	cbnz	r4, 8006bd8 <_malloc_r+0x90>
 8006b80:	4629      	mov	r1, r5
 8006b82:	4638      	mov	r0, r7
 8006b84:	f7ff ffc0 	bl	8006b08 <sbrk_aligned>
 8006b88:	1c43      	adds	r3, r0, #1
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	d155      	bne.n	8006c3a <_malloc_r+0xf2>
 8006b8e:	f8d8 4000 	ldr.w	r4, [r8]
 8006b92:	4626      	mov	r6, r4
 8006b94:	2e00      	cmp	r6, #0
 8006b96:	d145      	bne.n	8006c24 <_malloc_r+0xdc>
 8006b98:	2c00      	cmp	r4, #0
 8006b9a:	d048      	beq.n	8006c2e <_malloc_r+0xe6>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	eb04 0903 	add.w	r9, r4, r3
 8006ba6:	f000 fdd5 	bl	8007754 <_sbrk_r>
 8006baa:	4581      	cmp	r9, r0
 8006bac:	d13f      	bne.n	8006c2e <_malloc_r+0xe6>
 8006bae:	6821      	ldr	r1, [r4, #0]
 8006bb0:	1a6d      	subs	r5, r5, r1
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	4638      	mov	r0, r7
 8006bb6:	f7ff ffa7 	bl	8006b08 <sbrk_aligned>
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d037      	beq.n	8006c2e <_malloc_r+0xe6>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	442b      	add	r3, r5
 8006bc2:	6023      	str	r3, [r4, #0]
 8006bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d038      	beq.n	8006c3e <_malloc_r+0xf6>
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	42a2      	cmp	r2, r4
 8006bd0:	d12b      	bne.n	8006c2a <_malloc_r+0xe2>
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	605a      	str	r2, [r3, #4]
 8006bd6:	e00f      	b.n	8006bf8 <_malloc_r+0xb0>
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	1b52      	subs	r2, r2, r5
 8006bdc:	d41f      	bmi.n	8006c1e <_malloc_r+0xd6>
 8006bde:	2a0b      	cmp	r2, #11
 8006be0:	d917      	bls.n	8006c12 <_malloc_r+0xca>
 8006be2:	1961      	adds	r1, r4, r5
 8006be4:	42a3      	cmp	r3, r4
 8006be6:	6025      	str	r5, [r4, #0]
 8006be8:	bf18      	it	ne
 8006bea:	6059      	strne	r1, [r3, #4]
 8006bec:	6863      	ldr	r3, [r4, #4]
 8006bee:	bf08      	it	eq
 8006bf0:	f8c8 1000 	streq.w	r1, [r8]
 8006bf4:	5162      	str	r2, [r4, r5]
 8006bf6:	604b      	str	r3, [r1, #4]
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f104 060b 	add.w	r6, r4, #11
 8006bfe:	f000 f83b 	bl	8006c78 <__malloc_unlock>
 8006c02:	f026 0607 	bic.w	r6, r6, #7
 8006c06:	1d23      	adds	r3, r4, #4
 8006c08:	1af2      	subs	r2, r6, r3
 8006c0a:	d0ae      	beq.n	8006b6a <_malloc_r+0x22>
 8006c0c:	1b9b      	subs	r3, r3, r6
 8006c0e:	50a3      	str	r3, [r4, r2]
 8006c10:	e7ab      	b.n	8006b6a <_malloc_r+0x22>
 8006c12:	42a3      	cmp	r3, r4
 8006c14:	6862      	ldr	r2, [r4, #4]
 8006c16:	d1dd      	bne.n	8006bd4 <_malloc_r+0x8c>
 8006c18:	f8c8 2000 	str.w	r2, [r8]
 8006c1c:	e7ec      	b.n	8006bf8 <_malloc_r+0xb0>
 8006c1e:	4623      	mov	r3, r4
 8006c20:	6864      	ldr	r4, [r4, #4]
 8006c22:	e7ac      	b.n	8006b7e <_malloc_r+0x36>
 8006c24:	4634      	mov	r4, r6
 8006c26:	6876      	ldr	r6, [r6, #4]
 8006c28:	e7b4      	b.n	8006b94 <_malloc_r+0x4c>
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	e7cc      	b.n	8006bc8 <_malloc_r+0x80>
 8006c2e:	230c      	movs	r3, #12
 8006c30:	603b      	str	r3, [r7, #0]
 8006c32:	4638      	mov	r0, r7
 8006c34:	f000 f820 	bl	8006c78 <__malloc_unlock>
 8006c38:	e797      	b.n	8006b6a <_malloc_r+0x22>
 8006c3a:	6025      	str	r5, [r4, #0]
 8006c3c:	e7dc      	b.n	8006bf8 <_malloc_r+0xb0>
 8006c3e:	605b      	str	r3, [r3, #4]
 8006c40:	deff      	udf	#255	; 0xff
 8006c42:	bf00      	nop
 8006c44:	200006bc 	.word	0x200006bc

08006c48 <__ascii_mbtowc>:
 8006c48:	b082      	sub	sp, #8
 8006c4a:	b901      	cbnz	r1, 8006c4e <__ascii_mbtowc+0x6>
 8006c4c:	a901      	add	r1, sp, #4
 8006c4e:	b142      	cbz	r2, 8006c62 <__ascii_mbtowc+0x1a>
 8006c50:	b14b      	cbz	r3, 8006c66 <__ascii_mbtowc+0x1e>
 8006c52:	7813      	ldrb	r3, [r2, #0]
 8006c54:	600b      	str	r3, [r1, #0]
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	1e10      	subs	r0, r2, #0
 8006c5a:	bf18      	it	ne
 8006c5c:	2001      	movne	r0, #1
 8006c5e:	b002      	add	sp, #8
 8006c60:	4770      	bx	lr
 8006c62:	4610      	mov	r0, r2
 8006c64:	e7fb      	b.n	8006c5e <__ascii_mbtowc+0x16>
 8006c66:	f06f 0001 	mvn.w	r0, #1
 8006c6a:	e7f8      	b.n	8006c5e <__ascii_mbtowc+0x16>

08006c6c <__malloc_lock>:
 8006c6c:	4801      	ldr	r0, [pc, #4]	; (8006c74 <__malloc_lock+0x8>)
 8006c6e:	f7ff bb8c 	b.w	800638a <__retarget_lock_acquire_recursive>
 8006c72:	bf00      	nop
 8006c74:	200006b8 	.word	0x200006b8

08006c78 <__malloc_unlock>:
 8006c78:	4801      	ldr	r0, [pc, #4]	; (8006c80 <__malloc_unlock+0x8>)
 8006c7a:	f7ff bb87 	b.w	800638c <__retarget_lock_release_recursive>
 8006c7e:	bf00      	nop
 8006c80:	200006b8 	.word	0x200006b8

08006c84 <_Balloc>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	69c6      	ldr	r6, [r0, #28]
 8006c88:	4604      	mov	r4, r0
 8006c8a:	460d      	mov	r5, r1
 8006c8c:	b976      	cbnz	r6, 8006cac <_Balloc+0x28>
 8006c8e:	2010      	movs	r0, #16
 8006c90:	f000 fda4 	bl	80077dc <malloc>
 8006c94:	4602      	mov	r2, r0
 8006c96:	61e0      	str	r0, [r4, #28]
 8006c98:	b920      	cbnz	r0, 8006ca4 <_Balloc+0x20>
 8006c9a:	4b18      	ldr	r3, [pc, #96]	; (8006cfc <_Balloc+0x78>)
 8006c9c:	4818      	ldr	r0, [pc, #96]	; (8006d00 <_Balloc+0x7c>)
 8006c9e:	216b      	movs	r1, #107	; 0x6b
 8006ca0:	f000 fd68 	bl	8007774 <__assert_func>
 8006ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ca8:	6006      	str	r6, [r0, #0]
 8006caa:	60c6      	str	r6, [r0, #12]
 8006cac:	69e6      	ldr	r6, [r4, #28]
 8006cae:	68f3      	ldr	r3, [r6, #12]
 8006cb0:	b183      	cbz	r3, 8006cd4 <_Balloc+0x50>
 8006cb2:	69e3      	ldr	r3, [r4, #28]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cba:	b9b8      	cbnz	r0, 8006cec <_Balloc+0x68>
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	fa01 f605 	lsl.w	r6, r1, r5
 8006cc2:	1d72      	adds	r2, r6, #5
 8006cc4:	0092      	lsls	r2, r2, #2
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 fd72 	bl	80077b0 <_calloc_r>
 8006ccc:	b160      	cbz	r0, 8006ce8 <_Balloc+0x64>
 8006cce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cd2:	e00e      	b.n	8006cf2 <_Balloc+0x6e>
 8006cd4:	2221      	movs	r2, #33	; 0x21
 8006cd6:	2104      	movs	r1, #4
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 fd69 	bl	80077b0 <_calloc_r>
 8006cde:	69e3      	ldr	r3, [r4, #28]
 8006ce0:	60f0      	str	r0, [r6, #12]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e4      	bne.n	8006cb2 <_Balloc+0x2e>
 8006ce8:	2000      	movs	r0, #0
 8006cea:	bd70      	pop	{r4, r5, r6, pc}
 8006cec:	6802      	ldr	r2, [r0, #0]
 8006cee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cf8:	e7f7      	b.n	8006cea <_Balloc+0x66>
 8006cfa:	bf00      	nop
 8006cfc:	080081c9 	.word	0x080081c9
 8006d00:	080081e0 	.word	0x080081e0

08006d04 <_Bfree>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	69c6      	ldr	r6, [r0, #28]
 8006d08:	4605      	mov	r5, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	b976      	cbnz	r6, 8006d2c <_Bfree+0x28>
 8006d0e:	2010      	movs	r0, #16
 8006d10:	f000 fd64 	bl	80077dc <malloc>
 8006d14:	4602      	mov	r2, r0
 8006d16:	61e8      	str	r0, [r5, #28]
 8006d18:	b920      	cbnz	r0, 8006d24 <_Bfree+0x20>
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <_Bfree+0x3c>)
 8006d1c:	4809      	ldr	r0, [pc, #36]	; (8006d44 <_Bfree+0x40>)
 8006d1e:	218f      	movs	r1, #143	; 0x8f
 8006d20:	f000 fd28 	bl	8007774 <__assert_func>
 8006d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d28:	6006      	str	r6, [r0, #0]
 8006d2a:	60c6      	str	r6, [r0, #12]
 8006d2c:	b13c      	cbz	r4, 8006d3e <_Bfree+0x3a>
 8006d2e:	69eb      	ldr	r3, [r5, #28]
 8006d30:	6862      	ldr	r2, [r4, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d38:	6021      	str	r1, [r4, #0]
 8006d3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	080081c9 	.word	0x080081c9
 8006d44:	080081e0 	.word	0x080081e0

08006d48 <__multadd>:
 8006d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4c:	690d      	ldr	r5, [r1, #16]
 8006d4e:	4607      	mov	r7, r0
 8006d50:	460c      	mov	r4, r1
 8006d52:	461e      	mov	r6, r3
 8006d54:	f101 0c14 	add.w	ip, r1, #20
 8006d58:	2000      	movs	r0, #0
 8006d5a:	f8dc 3000 	ldr.w	r3, [ip]
 8006d5e:	b299      	uxth	r1, r3
 8006d60:	fb02 6101 	mla	r1, r2, r1, r6
 8006d64:	0c1e      	lsrs	r6, r3, #16
 8006d66:	0c0b      	lsrs	r3, r1, #16
 8006d68:	fb02 3306 	mla	r3, r2, r6, r3
 8006d6c:	b289      	uxth	r1, r1
 8006d6e:	3001      	adds	r0, #1
 8006d70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d74:	4285      	cmp	r5, r0
 8006d76:	f84c 1b04 	str.w	r1, [ip], #4
 8006d7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d7e:	dcec      	bgt.n	8006d5a <__multadd+0x12>
 8006d80:	b30e      	cbz	r6, 8006dc6 <__multadd+0x7e>
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	42ab      	cmp	r3, r5
 8006d86:	dc19      	bgt.n	8006dbc <__multadd+0x74>
 8006d88:	6861      	ldr	r1, [r4, #4]
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	3101      	adds	r1, #1
 8006d8e:	f7ff ff79 	bl	8006c84 <_Balloc>
 8006d92:	4680      	mov	r8, r0
 8006d94:	b928      	cbnz	r0, 8006da2 <__multadd+0x5a>
 8006d96:	4602      	mov	r2, r0
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <__multadd+0x84>)
 8006d9a:	480d      	ldr	r0, [pc, #52]	; (8006dd0 <__multadd+0x88>)
 8006d9c:	21ba      	movs	r1, #186	; 0xba
 8006d9e:	f000 fce9 	bl	8007774 <__assert_func>
 8006da2:	6922      	ldr	r2, [r4, #16]
 8006da4:	3202      	adds	r2, #2
 8006da6:	f104 010c 	add.w	r1, r4, #12
 8006daa:	0092      	lsls	r2, r2, #2
 8006dac:	300c      	adds	r0, #12
 8006dae:	f7ff faee 	bl	800638e <memcpy>
 8006db2:	4621      	mov	r1, r4
 8006db4:	4638      	mov	r0, r7
 8006db6:	f7ff ffa5 	bl	8006d04 <_Bfree>
 8006dba:	4644      	mov	r4, r8
 8006dbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dc0:	3501      	adds	r5, #1
 8006dc2:	615e      	str	r6, [r3, #20]
 8006dc4:	6125      	str	r5, [r4, #16]
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dcc:	08008158 	.word	0x08008158
 8006dd0:	080081e0 	.word	0x080081e0

08006dd4 <__s2b>:
 8006dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd8:	460c      	mov	r4, r1
 8006dda:	4615      	mov	r5, r2
 8006ddc:	461f      	mov	r7, r3
 8006dde:	2209      	movs	r2, #9
 8006de0:	3308      	adds	r3, #8
 8006de2:	4606      	mov	r6, r0
 8006de4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006de8:	2100      	movs	r1, #0
 8006dea:	2201      	movs	r2, #1
 8006dec:	429a      	cmp	r2, r3
 8006dee:	db09      	blt.n	8006e04 <__s2b+0x30>
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7ff ff47 	bl	8006c84 <_Balloc>
 8006df6:	b940      	cbnz	r0, 8006e0a <__s2b+0x36>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	4b19      	ldr	r3, [pc, #100]	; (8006e60 <__s2b+0x8c>)
 8006dfc:	4819      	ldr	r0, [pc, #100]	; (8006e64 <__s2b+0x90>)
 8006dfe:	21d3      	movs	r1, #211	; 0xd3
 8006e00:	f000 fcb8 	bl	8007774 <__assert_func>
 8006e04:	0052      	lsls	r2, r2, #1
 8006e06:	3101      	adds	r1, #1
 8006e08:	e7f0      	b.n	8006dec <__s2b+0x18>
 8006e0a:	9b08      	ldr	r3, [sp, #32]
 8006e0c:	6143      	str	r3, [r0, #20]
 8006e0e:	2d09      	cmp	r5, #9
 8006e10:	f04f 0301 	mov.w	r3, #1
 8006e14:	6103      	str	r3, [r0, #16]
 8006e16:	dd16      	ble.n	8006e46 <__s2b+0x72>
 8006e18:	f104 0909 	add.w	r9, r4, #9
 8006e1c:	46c8      	mov	r8, r9
 8006e1e:	442c      	add	r4, r5
 8006e20:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e24:	4601      	mov	r1, r0
 8006e26:	3b30      	subs	r3, #48	; 0x30
 8006e28:	220a      	movs	r2, #10
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f7ff ff8c 	bl	8006d48 <__multadd>
 8006e30:	45a0      	cmp	r8, r4
 8006e32:	d1f5      	bne.n	8006e20 <__s2b+0x4c>
 8006e34:	f1a5 0408 	sub.w	r4, r5, #8
 8006e38:	444c      	add	r4, r9
 8006e3a:	1b2d      	subs	r5, r5, r4
 8006e3c:	1963      	adds	r3, r4, r5
 8006e3e:	42bb      	cmp	r3, r7
 8006e40:	db04      	blt.n	8006e4c <__s2b+0x78>
 8006e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e46:	340a      	adds	r4, #10
 8006e48:	2509      	movs	r5, #9
 8006e4a:	e7f6      	b.n	8006e3a <__s2b+0x66>
 8006e4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e50:	4601      	mov	r1, r0
 8006e52:	3b30      	subs	r3, #48	; 0x30
 8006e54:	220a      	movs	r2, #10
 8006e56:	4630      	mov	r0, r6
 8006e58:	f7ff ff76 	bl	8006d48 <__multadd>
 8006e5c:	e7ee      	b.n	8006e3c <__s2b+0x68>
 8006e5e:	bf00      	nop
 8006e60:	08008158 	.word	0x08008158
 8006e64:	080081e0 	.word	0x080081e0

08006e68 <__hi0bits>:
 8006e68:	0c03      	lsrs	r3, r0, #16
 8006e6a:	041b      	lsls	r3, r3, #16
 8006e6c:	b9d3      	cbnz	r3, 8006ea4 <__hi0bits+0x3c>
 8006e6e:	0400      	lsls	r0, r0, #16
 8006e70:	2310      	movs	r3, #16
 8006e72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e76:	bf04      	itt	eq
 8006e78:	0200      	lsleq	r0, r0, #8
 8006e7a:	3308      	addeq	r3, #8
 8006e7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e80:	bf04      	itt	eq
 8006e82:	0100      	lsleq	r0, r0, #4
 8006e84:	3304      	addeq	r3, #4
 8006e86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e8a:	bf04      	itt	eq
 8006e8c:	0080      	lsleq	r0, r0, #2
 8006e8e:	3302      	addeq	r3, #2
 8006e90:	2800      	cmp	r0, #0
 8006e92:	db05      	blt.n	8006ea0 <__hi0bits+0x38>
 8006e94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e98:	f103 0301 	add.w	r3, r3, #1
 8006e9c:	bf08      	it	eq
 8006e9e:	2320      	moveq	r3, #32
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	4770      	bx	lr
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e7e4      	b.n	8006e72 <__hi0bits+0xa>

08006ea8 <__lo0bits>:
 8006ea8:	6803      	ldr	r3, [r0, #0]
 8006eaa:	f013 0207 	ands.w	r2, r3, #7
 8006eae:	d00c      	beq.n	8006eca <__lo0bits+0x22>
 8006eb0:	07d9      	lsls	r1, r3, #31
 8006eb2:	d422      	bmi.n	8006efa <__lo0bits+0x52>
 8006eb4:	079a      	lsls	r2, r3, #30
 8006eb6:	bf49      	itett	mi
 8006eb8:	085b      	lsrmi	r3, r3, #1
 8006eba:	089b      	lsrpl	r3, r3, #2
 8006ebc:	6003      	strmi	r3, [r0, #0]
 8006ebe:	2201      	movmi	r2, #1
 8006ec0:	bf5c      	itt	pl
 8006ec2:	6003      	strpl	r3, [r0, #0]
 8006ec4:	2202      	movpl	r2, #2
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4770      	bx	lr
 8006eca:	b299      	uxth	r1, r3
 8006ecc:	b909      	cbnz	r1, 8006ed2 <__lo0bits+0x2a>
 8006ece:	0c1b      	lsrs	r3, r3, #16
 8006ed0:	2210      	movs	r2, #16
 8006ed2:	b2d9      	uxtb	r1, r3
 8006ed4:	b909      	cbnz	r1, 8006eda <__lo0bits+0x32>
 8006ed6:	3208      	adds	r2, #8
 8006ed8:	0a1b      	lsrs	r3, r3, #8
 8006eda:	0719      	lsls	r1, r3, #28
 8006edc:	bf04      	itt	eq
 8006ede:	091b      	lsreq	r3, r3, #4
 8006ee0:	3204      	addeq	r2, #4
 8006ee2:	0799      	lsls	r1, r3, #30
 8006ee4:	bf04      	itt	eq
 8006ee6:	089b      	lsreq	r3, r3, #2
 8006ee8:	3202      	addeq	r2, #2
 8006eea:	07d9      	lsls	r1, r3, #31
 8006eec:	d403      	bmi.n	8006ef6 <__lo0bits+0x4e>
 8006eee:	085b      	lsrs	r3, r3, #1
 8006ef0:	f102 0201 	add.w	r2, r2, #1
 8006ef4:	d003      	beq.n	8006efe <__lo0bits+0x56>
 8006ef6:	6003      	str	r3, [r0, #0]
 8006ef8:	e7e5      	b.n	8006ec6 <__lo0bits+0x1e>
 8006efa:	2200      	movs	r2, #0
 8006efc:	e7e3      	b.n	8006ec6 <__lo0bits+0x1e>
 8006efe:	2220      	movs	r2, #32
 8006f00:	e7e1      	b.n	8006ec6 <__lo0bits+0x1e>
	...

08006f04 <__i2b>:
 8006f04:	b510      	push	{r4, lr}
 8006f06:	460c      	mov	r4, r1
 8006f08:	2101      	movs	r1, #1
 8006f0a:	f7ff febb 	bl	8006c84 <_Balloc>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	b928      	cbnz	r0, 8006f1e <__i2b+0x1a>
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <__i2b+0x24>)
 8006f14:	4805      	ldr	r0, [pc, #20]	; (8006f2c <__i2b+0x28>)
 8006f16:	f240 1145 	movw	r1, #325	; 0x145
 8006f1a:	f000 fc2b 	bl	8007774 <__assert_func>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	6144      	str	r4, [r0, #20]
 8006f22:	6103      	str	r3, [r0, #16]
 8006f24:	bd10      	pop	{r4, pc}
 8006f26:	bf00      	nop
 8006f28:	08008158 	.word	0x08008158
 8006f2c:	080081e0 	.word	0x080081e0

08006f30 <__multiply>:
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	4691      	mov	r9, r2
 8006f36:	690a      	ldr	r2, [r1, #16]
 8006f38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	bfb8      	it	lt
 8006f40:	460b      	movlt	r3, r1
 8006f42:	460c      	mov	r4, r1
 8006f44:	bfbc      	itt	lt
 8006f46:	464c      	movlt	r4, r9
 8006f48:	4699      	movlt	r9, r3
 8006f4a:	6927      	ldr	r7, [r4, #16]
 8006f4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f50:	68a3      	ldr	r3, [r4, #8]
 8006f52:	6861      	ldr	r1, [r4, #4]
 8006f54:	eb07 060a 	add.w	r6, r7, sl
 8006f58:	42b3      	cmp	r3, r6
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	bfb8      	it	lt
 8006f5e:	3101      	addlt	r1, #1
 8006f60:	f7ff fe90 	bl	8006c84 <_Balloc>
 8006f64:	b930      	cbnz	r0, 8006f74 <__multiply+0x44>
 8006f66:	4602      	mov	r2, r0
 8006f68:	4b44      	ldr	r3, [pc, #272]	; (800707c <__multiply+0x14c>)
 8006f6a:	4845      	ldr	r0, [pc, #276]	; (8007080 <__multiply+0x150>)
 8006f6c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006f70:	f000 fc00 	bl	8007774 <__assert_func>
 8006f74:	f100 0514 	add.w	r5, r0, #20
 8006f78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4543      	cmp	r3, r8
 8006f82:	d321      	bcc.n	8006fc8 <__multiply+0x98>
 8006f84:	f104 0314 	add.w	r3, r4, #20
 8006f88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f8c:	f109 0314 	add.w	r3, r9, #20
 8006f90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f94:	9202      	str	r2, [sp, #8]
 8006f96:	1b3a      	subs	r2, r7, r4
 8006f98:	3a15      	subs	r2, #21
 8006f9a:	f022 0203 	bic.w	r2, r2, #3
 8006f9e:	3204      	adds	r2, #4
 8006fa0:	f104 0115 	add.w	r1, r4, #21
 8006fa4:	428f      	cmp	r7, r1
 8006fa6:	bf38      	it	cc
 8006fa8:	2204      	movcc	r2, #4
 8006faa:	9201      	str	r2, [sp, #4]
 8006fac:	9a02      	ldr	r2, [sp, #8]
 8006fae:	9303      	str	r3, [sp, #12]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d80c      	bhi.n	8006fce <__multiply+0x9e>
 8006fb4:	2e00      	cmp	r6, #0
 8006fb6:	dd03      	ble.n	8006fc0 <__multiply+0x90>
 8006fb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d05b      	beq.n	8007078 <__multiply+0x148>
 8006fc0:	6106      	str	r6, [r0, #16]
 8006fc2:	b005      	add	sp, #20
 8006fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc8:	f843 2b04 	str.w	r2, [r3], #4
 8006fcc:	e7d8      	b.n	8006f80 <__multiply+0x50>
 8006fce:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fd2:	f1ba 0f00 	cmp.w	sl, #0
 8006fd6:	d024      	beq.n	8007022 <__multiply+0xf2>
 8006fd8:	f104 0e14 	add.w	lr, r4, #20
 8006fdc:	46a9      	mov	r9, r5
 8006fde:	f04f 0c00 	mov.w	ip, #0
 8006fe2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006fe6:	f8d9 1000 	ldr.w	r1, [r9]
 8006fea:	fa1f fb82 	uxth.w	fp, r2
 8006fee:	b289      	uxth	r1, r1
 8006ff0:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ff4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006ff8:	f8d9 2000 	ldr.w	r2, [r9]
 8006ffc:	4461      	add	r1, ip
 8006ffe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007002:	fb0a c20b 	mla	r2, sl, fp, ip
 8007006:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800700a:	b289      	uxth	r1, r1
 800700c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007010:	4577      	cmp	r7, lr
 8007012:	f849 1b04 	str.w	r1, [r9], #4
 8007016:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800701a:	d8e2      	bhi.n	8006fe2 <__multiply+0xb2>
 800701c:	9a01      	ldr	r2, [sp, #4]
 800701e:	f845 c002 	str.w	ip, [r5, r2]
 8007022:	9a03      	ldr	r2, [sp, #12]
 8007024:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007028:	3304      	adds	r3, #4
 800702a:	f1b9 0f00 	cmp.w	r9, #0
 800702e:	d021      	beq.n	8007074 <__multiply+0x144>
 8007030:	6829      	ldr	r1, [r5, #0]
 8007032:	f104 0c14 	add.w	ip, r4, #20
 8007036:	46ae      	mov	lr, r5
 8007038:	f04f 0a00 	mov.w	sl, #0
 800703c:	f8bc b000 	ldrh.w	fp, [ip]
 8007040:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007044:	fb09 220b 	mla	r2, r9, fp, r2
 8007048:	4452      	add	r2, sl
 800704a:	b289      	uxth	r1, r1
 800704c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007050:	f84e 1b04 	str.w	r1, [lr], #4
 8007054:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007058:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800705c:	f8be 1000 	ldrh.w	r1, [lr]
 8007060:	fb09 110a 	mla	r1, r9, sl, r1
 8007064:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007068:	4567      	cmp	r7, ip
 800706a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800706e:	d8e5      	bhi.n	800703c <__multiply+0x10c>
 8007070:	9a01      	ldr	r2, [sp, #4]
 8007072:	50a9      	str	r1, [r5, r2]
 8007074:	3504      	adds	r5, #4
 8007076:	e799      	b.n	8006fac <__multiply+0x7c>
 8007078:	3e01      	subs	r6, #1
 800707a:	e79b      	b.n	8006fb4 <__multiply+0x84>
 800707c:	08008158 	.word	0x08008158
 8007080:	080081e0 	.word	0x080081e0

08007084 <__pow5mult>:
 8007084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007088:	4615      	mov	r5, r2
 800708a:	f012 0203 	ands.w	r2, r2, #3
 800708e:	4606      	mov	r6, r0
 8007090:	460f      	mov	r7, r1
 8007092:	d007      	beq.n	80070a4 <__pow5mult+0x20>
 8007094:	4c25      	ldr	r4, [pc, #148]	; (800712c <__pow5mult+0xa8>)
 8007096:	3a01      	subs	r2, #1
 8007098:	2300      	movs	r3, #0
 800709a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800709e:	f7ff fe53 	bl	8006d48 <__multadd>
 80070a2:	4607      	mov	r7, r0
 80070a4:	10ad      	asrs	r5, r5, #2
 80070a6:	d03d      	beq.n	8007124 <__pow5mult+0xa0>
 80070a8:	69f4      	ldr	r4, [r6, #28]
 80070aa:	b97c      	cbnz	r4, 80070cc <__pow5mult+0x48>
 80070ac:	2010      	movs	r0, #16
 80070ae:	f000 fb95 	bl	80077dc <malloc>
 80070b2:	4602      	mov	r2, r0
 80070b4:	61f0      	str	r0, [r6, #28]
 80070b6:	b928      	cbnz	r0, 80070c4 <__pow5mult+0x40>
 80070b8:	4b1d      	ldr	r3, [pc, #116]	; (8007130 <__pow5mult+0xac>)
 80070ba:	481e      	ldr	r0, [pc, #120]	; (8007134 <__pow5mult+0xb0>)
 80070bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80070c0:	f000 fb58 	bl	8007774 <__assert_func>
 80070c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070c8:	6004      	str	r4, [r0, #0]
 80070ca:	60c4      	str	r4, [r0, #12]
 80070cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80070d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070d4:	b94c      	cbnz	r4, 80070ea <__pow5mult+0x66>
 80070d6:	f240 2171 	movw	r1, #625	; 0x271
 80070da:	4630      	mov	r0, r6
 80070dc:	f7ff ff12 	bl	8006f04 <__i2b>
 80070e0:	2300      	movs	r3, #0
 80070e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80070e6:	4604      	mov	r4, r0
 80070e8:	6003      	str	r3, [r0, #0]
 80070ea:	f04f 0900 	mov.w	r9, #0
 80070ee:	07eb      	lsls	r3, r5, #31
 80070f0:	d50a      	bpl.n	8007108 <__pow5mult+0x84>
 80070f2:	4639      	mov	r1, r7
 80070f4:	4622      	mov	r2, r4
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7ff ff1a 	bl	8006f30 <__multiply>
 80070fc:	4639      	mov	r1, r7
 80070fe:	4680      	mov	r8, r0
 8007100:	4630      	mov	r0, r6
 8007102:	f7ff fdff 	bl	8006d04 <_Bfree>
 8007106:	4647      	mov	r7, r8
 8007108:	106d      	asrs	r5, r5, #1
 800710a:	d00b      	beq.n	8007124 <__pow5mult+0xa0>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	b938      	cbnz	r0, 8007120 <__pow5mult+0x9c>
 8007110:	4622      	mov	r2, r4
 8007112:	4621      	mov	r1, r4
 8007114:	4630      	mov	r0, r6
 8007116:	f7ff ff0b 	bl	8006f30 <__multiply>
 800711a:	6020      	str	r0, [r4, #0]
 800711c:	f8c0 9000 	str.w	r9, [r0]
 8007120:	4604      	mov	r4, r0
 8007122:	e7e4      	b.n	80070ee <__pow5mult+0x6a>
 8007124:	4638      	mov	r0, r7
 8007126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800712a:	bf00      	nop
 800712c:	08008330 	.word	0x08008330
 8007130:	080081c9 	.word	0x080081c9
 8007134:	080081e0 	.word	0x080081e0

08007138 <__lshift>:
 8007138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800713c:	460c      	mov	r4, r1
 800713e:	6849      	ldr	r1, [r1, #4]
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007146:	68a3      	ldr	r3, [r4, #8]
 8007148:	4607      	mov	r7, r0
 800714a:	4691      	mov	r9, r2
 800714c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007150:	f108 0601 	add.w	r6, r8, #1
 8007154:	42b3      	cmp	r3, r6
 8007156:	db0b      	blt.n	8007170 <__lshift+0x38>
 8007158:	4638      	mov	r0, r7
 800715a:	f7ff fd93 	bl	8006c84 <_Balloc>
 800715e:	4605      	mov	r5, r0
 8007160:	b948      	cbnz	r0, 8007176 <__lshift+0x3e>
 8007162:	4602      	mov	r2, r0
 8007164:	4b28      	ldr	r3, [pc, #160]	; (8007208 <__lshift+0xd0>)
 8007166:	4829      	ldr	r0, [pc, #164]	; (800720c <__lshift+0xd4>)
 8007168:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800716c:	f000 fb02 	bl	8007774 <__assert_func>
 8007170:	3101      	adds	r1, #1
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	e7ee      	b.n	8007154 <__lshift+0x1c>
 8007176:	2300      	movs	r3, #0
 8007178:	f100 0114 	add.w	r1, r0, #20
 800717c:	f100 0210 	add.w	r2, r0, #16
 8007180:	4618      	mov	r0, r3
 8007182:	4553      	cmp	r3, sl
 8007184:	db33      	blt.n	80071ee <__lshift+0xb6>
 8007186:	6920      	ldr	r0, [r4, #16]
 8007188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800718c:	f104 0314 	add.w	r3, r4, #20
 8007190:	f019 091f 	ands.w	r9, r9, #31
 8007194:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007198:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800719c:	d02b      	beq.n	80071f6 <__lshift+0xbe>
 800719e:	f1c9 0e20 	rsb	lr, r9, #32
 80071a2:	468a      	mov	sl, r1
 80071a4:	2200      	movs	r2, #0
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	fa00 f009 	lsl.w	r0, r0, r9
 80071ac:	4310      	orrs	r0, r2
 80071ae:	f84a 0b04 	str.w	r0, [sl], #4
 80071b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b6:	459c      	cmp	ip, r3
 80071b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80071bc:	d8f3      	bhi.n	80071a6 <__lshift+0x6e>
 80071be:	ebac 0304 	sub.w	r3, ip, r4
 80071c2:	3b15      	subs	r3, #21
 80071c4:	f023 0303 	bic.w	r3, r3, #3
 80071c8:	3304      	adds	r3, #4
 80071ca:	f104 0015 	add.w	r0, r4, #21
 80071ce:	4584      	cmp	ip, r0
 80071d0:	bf38      	it	cc
 80071d2:	2304      	movcc	r3, #4
 80071d4:	50ca      	str	r2, [r1, r3]
 80071d6:	b10a      	cbz	r2, 80071dc <__lshift+0xa4>
 80071d8:	f108 0602 	add.w	r6, r8, #2
 80071dc:	3e01      	subs	r6, #1
 80071de:	4638      	mov	r0, r7
 80071e0:	612e      	str	r6, [r5, #16]
 80071e2:	4621      	mov	r1, r4
 80071e4:	f7ff fd8e 	bl	8006d04 <_Bfree>
 80071e8:	4628      	mov	r0, r5
 80071ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80071f2:	3301      	adds	r3, #1
 80071f4:	e7c5      	b.n	8007182 <__lshift+0x4a>
 80071f6:	3904      	subs	r1, #4
 80071f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007200:	459c      	cmp	ip, r3
 8007202:	d8f9      	bhi.n	80071f8 <__lshift+0xc0>
 8007204:	e7ea      	b.n	80071dc <__lshift+0xa4>
 8007206:	bf00      	nop
 8007208:	08008158 	.word	0x08008158
 800720c:	080081e0 	.word	0x080081e0

08007210 <__mcmp>:
 8007210:	b530      	push	{r4, r5, lr}
 8007212:	6902      	ldr	r2, [r0, #16]
 8007214:	690c      	ldr	r4, [r1, #16]
 8007216:	1b12      	subs	r2, r2, r4
 8007218:	d10e      	bne.n	8007238 <__mcmp+0x28>
 800721a:	f100 0314 	add.w	r3, r0, #20
 800721e:	3114      	adds	r1, #20
 8007220:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007224:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007228:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800722c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007230:	42a5      	cmp	r5, r4
 8007232:	d003      	beq.n	800723c <__mcmp+0x2c>
 8007234:	d305      	bcc.n	8007242 <__mcmp+0x32>
 8007236:	2201      	movs	r2, #1
 8007238:	4610      	mov	r0, r2
 800723a:	bd30      	pop	{r4, r5, pc}
 800723c:	4283      	cmp	r3, r0
 800723e:	d3f3      	bcc.n	8007228 <__mcmp+0x18>
 8007240:	e7fa      	b.n	8007238 <__mcmp+0x28>
 8007242:	f04f 32ff 	mov.w	r2, #4294967295
 8007246:	e7f7      	b.n	8007238 <__mcmp+0x28>

08007248 <__mdiff>:
 8007248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	460c      	mov	r4, r1
 800724e:	4606      	mov	r6, r0
 8007250:	4611      	mov	r1, r2
 8007252:	4620      	mov	r0, r4
 8007254:	4690      	mov	r8, r2
 8007256:	f7ff ffdb 	bl	8007210 <__mcmp>
 800725a:	1e05      	subs	r5, r0, #0
 800725c:	d110      	bne.n	8007280 <__mdiff+0x38>
 800725e:	4629      	mov	r1, r5
 8007260:	4630      	mov	r0, r6
 8007262:	f7ff fd0f 	bl	8006c84 <_Balloc>
 8007266:	b930      	cbnz	r0, 8007276 <__mdiff+0x2e>
 8007268:	4b3a      	ldr	r3, [pc, #232]	; (8007354 <__mdiff+0x10c>)
 800726a:	4602      	mov	r2, r0
 800726c:	f240 2137 	movw	r1, #567	; 0x237
 8007270:	4839      	ldr	r0, [pc, #228]	; (8007358 <__mdiff+0x110>)
 8007272:	f000 fa7f 	bl	8007774 <__assert_func>
 8007276:	2301      	movs	r3, #1
 8007278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800727c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007280:	bfa4      	itt	ge
 8007282:	4643      	movge	r3, r8
 8007284:	46a0      	movge	r8, r4
 8007286:	4630      	mov	r0, r6
 8007288:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800728c:	bfa6      	itte	ge
 800728e:	461c      	movge	r4, r3
 8007290:	2500      	movge	r5, #0
 8007292:	2501      	movlt	r5, #1
 8007294:	f7ff fcf6 	bl	8006c84 <_Balloc>
 8007298:	b920      	cbnz	r0, 80072a4 <__mdiff+0x5c>
 800729a:	4b2e      	ldr	r3, [pc, #184]	; (8007354 <__mdiff+0x10c>)
 800729c:	4602      	mov	r2, r0
 800729e:	f240 2145 	movw	r1, #581	; 0x245
 80072a2:	e7e5      	b.n	8007270 <__mdiff+0x28>
 80072a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072a8:	6926      	ldr	r6, [r4, #16]
 80072aa:	60c5      	str	r5, [r0, #12]
 80072ac:	f104 0914 	add.w	r9, r4, #20
 80072b0:	f108 0514 	add.w	r5, r8, #20
 80072b4:	f100 0e14 	add.w	lr, r0, #20
 80072b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80072bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072c0:	f108 0210 	add.w	r2, r8, #16
 80072c4:	46f2      	mov	sl, lr
 80072c6:	2100      	movs	r1, #0
 80072c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80072cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80072d0:	fa11 f88b 	uxtah	r8, r1, fp
 80072d4:	b299      	uxth	r1, r3
 80072d6:	0c1b      	lsrs	r3, r3, #16
 80072d8:	eba8 0801 	sub.w	r8, r8, r1
 80072dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072e4:	fa1f f888 	uxth.w	r8, r8
 80072e8:	1419      	asrs	r1, r3, #16
 80072ea:	454e      	cmp	r6, r9
 80072ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80072f0:	f84a 3b04 	str.w	r3, [sl], #4
 80072f4:	d8e8      	bhi.n	80072c8 <__mdiff+0x80>
 80072f6:	1b33      	subs	r3, r6, r4
 80072f8:	3b15      	subs	r3, #21
 80072fa:	f023 0303 	bic.w	r3, r3, #3
 80072fe:	3304      	adds	r3, #4
 8007300:	3415      	adds	r4, #21
 8007302:	42a6      	cmp	r6, r4
 8007304:	bf38      	it	cc
 8007306:	2304      	movcc	r3, #4
 8007308:	441d      	add	r5, r3
 800730a:	4473      	add	r3, lr
 800730c:	469e      	mov	lr, r3
 800730e:	462e      	mov	r6, r5
 8007310:	4566      	cmp	r6, ip
 8007312:	d30e      	bcc.n	8007332 <__mdiff+0xea>
 8007314:	f10c 0203 	add.w	r2, ip, #3
 8007318:	1b52      	subs	r2, r2, r5
 800731a:	f022 0203 	bic.w	r2, r2, #3
 800731e:	3d03      	subs	r5, #3
 8007320:	45ac      	cmp	ip, r5
 8007322:	bf38      	it	cc
 8007324:	2200      	movcc	r2, #0
 8007326:	4413      	add	r3, r2
 8007328:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800732c:	b17a      	cbz	r2, 800734e <__mdiff+0x106>
 800732e:	6107      	str	r7, [r0, #16]
 8007330:	e7a4      	b.n	800727c <__mdiff+0x34>
 8007332:	f856 8b04 	ldr.w	r8, [r6], #4
 8007336:	fa11 f288 	uxtah	r2, r1, r8
 800733a:	1414      	asrs	r4, r2, #16
 800733c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007340:	b292      	uxth	r2, r2
 8007342:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007346:	f84e 2b04 	str.w	r2, [lr], #4
 800734a:	1421      	asrs	r1, r4, #16
 800734c:	e7e0      	b.n	8007310 <__mdiff+0xc8>
 800734e:	3f01      	subs	r7, #1
 8007350:	e7ea      	b.n	8007328 <__mdiff+0xe0>
 8007352:	bf00      	nop
 8007354:	08008158 	.word	0x08008158
 8007358:	080081e0 	.word	0x080081e0

0800735c <__ulp>:
 800735c:	b082      	sub	sp, #8
 800735e:	ed8d 0b00 	vstr	d0, [sp]
 8007362:	9a01      	ldr	r2, [sp, #4]
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <__ulp+0x48>)
 8007366:	4013      	ands	r3, r2
 8007368:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800736c:	2b00      	cmp	r3, #0
 800736e:	dc08      	bgt.n	8007382 <__ulp+0x26>
 8007370:	425b      	negs	r3, r3
 8007372:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007376:	ea4f 5223 	mov.w	r2, r3, asr #20
 800737a:	da04      	bge.n	8007386 <__ulp+0x2a>
 800737c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007380:	4113      	asrs	r3, r2
 8007382:	2200      	movs	r2, #0
 8007384:	e008      	b.n	8007398 <__ulp+0x3c>
 8007386:	f1a2 0314 	sub.w	r3, r2, #20
 800738a:	2b1e      	cmp	r3, #30
 800738c:	bfda      	itte	le
 800738e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007392:	40da      	lsrle	r2, r3
 8007394:	2201      	movgt	r2, #1
 8007396:	2300      	movs	r3, #0
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	ec41 0b10 	vmov	d0, r0, r1
 80073a0:	b002      	add	sp, #8
 80073a2:	4770      	bx	lr
 80073a4:	7ff00000 	.word	0x7ff00000

080073a8 <__b2d>:
 80073a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ac:	6906      	ldr	r6, [r0, #16]
 80073ae:	f100 0814 	add.w	r8, r0, #20
 80073b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80073b6:	1f37      	subs	r7, r6, #4
 80073b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80073bc:	4610      	mov	r0, r2
 80073be:	f7ff fd53 	bl	8006e68 <__hi0bits>
 80073c2:	f1c0 0320 	rsb	r3, r0, #32
 80073c6:	280a      	cmp	r0, #10
 80073c8:	600b      	str	r3, [r1, #0]
 80073ca:	491b      	ldr	r1, [pc, #108]	; (8007438 <__b2d+0x90>)
 80073cc:	dc15      	bgt.n	80073fa <__b2d+0x52>
 80073ce:	f1c0 0c0b 	rsb	ip, r0, #11
 80073d2:	fa22 f30c 	lsr.w	r3, r2, ip
 80073d6:	45b8      	cmp	r8, r7
 80073d8:	ea43 0501 	orr.w	r5, r3, r1
 80073dc:	bf34      	ite	cc
 80073de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80073e2:	2300      	movcs	r3, #0
 80073e4:	3015      	adds	r0, #21
 80073e6:	fa02 f000 	lsl.w	r0, r2, r0
 80073ea:	fa23 f30c 	lsr.w	r3, r3, ip
 80073ee:	4303      	orrs	r3, r0
 80073f0:	461c      	mov	r4, r3
 80073f2:	ec45 4b10 	vmov	d0, r4, r5
 80073f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073fa:	45b8      	cmp	r8, r7
 80073fc:	bf3a      	itte	cc
 80073fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007402:	f1a6 0708 	subcc.w	r7, r6, #8
 8007406:	2300      	movcs	r3, #0
 8007408:	380b      	subs	r0, #11
 800740a:	d012      	beq.n	8007432 <__b2d+0x8a>
 800740c:	f1c0 0120 	rsb	r1, r0, #32
 8007410:	fa23 f401 	lsr.w	r4, r3, r1
 8007414:	4082      	lsls	r2, r0
 8007416:	4322      	orrs	r2, r4
 8007418:	4547      	cmp	r7, r8
 800741a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800741e:	bf8c      	ite	hi
 8007420:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007424:	2200      	movls	r2, #0
 8007426:	4083      	lsls	r3, r0
 8007428:	40ca      	lsrs	r2, r1
 800742a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800742e:	4313      	orrs	r3, r2
 8007430:	e7de      	b.n	80073f0 <__b2d+0x48>
 8007432:	ea42 0501 	orr.w	r5, r2, r1
 8007436:	e7db      	b.n	80073f0 <__b2d+0x48>
 8007438:	3ff00000 	.word	0x3ff00000

0800743c <__d2b>:
 800743c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007440:	460f      	mov	r7, r1
 8007442:	2101      	movs	r1, #1
 8007444:	ec59 8b10 	vmov	r8, r9, d0
 8007448:	4616      	mov	r6, r2
 800744a:	f7ff fc1b 	bl	8006c84 <_Balloc>
 800744e:	4604      	mov	r4, r0
 8007450:	b930      	cbnz	r0, 8007460 <__d2b+0x24>
 8007452:	4602      	mov	r2, r0
 8007454:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <__d2b+0xac>)
 8007456:	4825      	ldr	r0, [pc, #148]	; (80074ec <__d2b+0xb0>)
 8007458:	f240 310f 	movw	r1, #783	; 0x30f
 800745c:	f000 f98a 	bl	8007774 <__assert_func>
 8007460:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007464:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007468:	bb2d      	cbnz	r5, 80074b6 <__d2b+0x7a>
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	f1b8 0300 	subs.w	r3, r8, #0
 8007470:	d026      	beq.n	80074c0 <__d2b+0x84>
 8007472:	4668      	mov	r0, sp
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	f7ff fd17 	bl	8006ea8 <__lo0bits>
 800747a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800747e:	b1e8      	cbz	r0, 80074bc <__d2b+0x80>
 8007480:	f1c0 0320 	rsb	r3, r0, #32
 8007484:	fa02 f303 	lsl.w	r3, r2, r3
 8007488:	430b      	orrs	r3, r1
 800748a:	40c2      	lsrs	r2, r0
 800748c:	6163      	str	r3, [r4, #20]
 800748e:	9201      	str	r2, [sp, #4]
 8007490:	9b01      	ldr	r3, [sp, #4]
 8007492:	61a3      	str	r3, [r4, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	bf14      	ite	ne
 8007498:	2202      	movne	r2, #2
 800749a:	2201      	moveq	r2, #1
 800749c:	6122      	str	r2, [r4, #16]
 800749e:	b1bd      	cbz	r5, 80074d0 <__d2b+0x94>
 80074a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074a4:	4405      	add	r5, r0
 80074a6:	603d      	str	r5, [r7, #0]
 80074a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074ac:	6030      	str	r0, [r6, #0]
 80074ae:	4620      	mov	r0, r4
 80074b0:	b003      	add	sp, #12
 80074b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074ba:	e7d6      	b.n	800746a <__d2b+0x2e>
 80074bc:	6161      	str	r1, [r4, #20]
 80074be:	e7e7      	b.n	8007490 <__d2b+0x54>
 80074c0:	a801      	add	r0, sp, #4
 80074c2:	f7ff fcf1 	bl	8006ea8 <__lo0bits>
 80074c6:	9b01      	ldr	r3, [sp, #4]
 80074c8:	6163      	str	r3, [r4, #20]
 80074ca:	3020      	adds	r0, #32
 80074cc:	2201      	movs	r2, #1
 80074ce:	e7e5      	b.n	800749c <__d2b+0x60>
 80074d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074d8:	6038      	str	r0, [r7, #0]
 80074da:	6918      	ldr	r0, [r3, #16]
 80074dc:	f7ff fcc4 	bl	8006e68 <__hi0bits>
 80074e0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074e4:	e7e2      	b.n	80074ac <__d2b+0x70>
 80074e6:	bf00      	nop
 80074e8:	08008158 	.word	0x08008158
 80074ec:	080081e0 	.word	0x080081e0

080074f0 <__ratio>:
 80074f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	4688      	mov	r8, r1
 80074f6:	4669      	mov	r1, sp
 80074f8:	4681      	mov	r9, r0
 80074fa:	f7ff ff55 	bl	80073a8 <__b2d>
 80074fe:	a901      	add	r1, sp, #4
 8007500:	4640      	mov	r0, r8
 8007502:	ec55 4b10 	vmov	r4, r5, d0
 8007506:	f7ff ff4f 	bl	80073a8 <__b2d>
 800750a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800750e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007512:	eba3 0c02 	sub.w	ip, r3, r2
 8007516:	e9dd 3200 	ldrd	r3, r2, [sp]
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007520:	ec51 0b10 	vmov	r0, r1, d0
 8007524:	2b00      	cmp	r3, #0
 8007526:	bfd6      	itet	le
 8007528:	460a      	movle	r2, r1
 800752a:	462a      	movgt	r2, r5
 800752c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007530:	468b      	mov	fp, r1
 8007532:	462f      	mov	r7, r5
 8007534:	bfd4      	ite	le
 8007536:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800753a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800753e:	4620      	mov	r0, r4
 8007540:	ee10 2a10 	vmov	r2, s0
 8007544:	465b      	mov	r3, fp
 8007546:	4639      	mov	r1, r7
 8007548:	f7f9 f978 	bl	800083c <__aeabi_ddiv>
 800754c:	ec41 0b10 	vmov	d0, r0, r1
 8007550:	b003      	add	sp, #12
 8007552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007556 <__copybits>:
 8007556:	3901      	subs	r1, #1
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	1149      	asrs	r1, r1, #5
 800755c:	6914      	ldr	r4, [r2, #16]
 800755e:	3101      	adds	r1, #1
 8007560:	f102 0314 	add.w	r3, r2, #20
 8007564:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007568:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800756c:	1f05      	subs	r5, r0, #4
 800756e:	42a3      	cmp	r3, r4
 8007570:	d30c      	bcc.n	800758c <__copybits+0x36>
 8007572:	1aa3      	subs	r3, r4, r2
 8007574:	3b11      	subs	r3, #17
 8007576:	f023 0303 	bic.w	r3, r3, #3
 800757a:	3211      	adds	r2, #17
 800757c:	42a2      	cmp	r2, r4
 800757e:	bf88      	it	hi
 8007580:	2300      	movhi	r3, #0
 8007582:	4418      	add	r0, r3
 8007584:	2300      	movs	r3, #0
 8007586:	4288      	cmp	r0, r1
 8007588:	d305      	bcc.n	8007596 <__copybits+0x40>
 800758a:	bd70      	pop	{r4, r5, r6, pc}
 800758c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007590:	f845 6f04 	str.w	r6, [r5, #4]!
 8007594:	e7eb      	b.n	800756e <__copybits+0x18>
 8007596:	f840 3b04 	str.w	r3, [r0], #4
 800759a:	e7f4      	b.n	8007586 <__copybits+0x30>

0800759c <__any_on>:
 800759c:	f100 0214 	add.w	r2, r0, #20
 80075a0:	6900      	ldr	r0, [r0, #16]
 80075a2:	114b      	asrs	r3, r1, #5
 80075a4:	4298      	cmp	r0, r3
 80075a6:	b510      	push	{r4, lr}
 80075a8:	db11      	blt.n	80075ce <__any_on+0x32>
 80075aa:	dd0a      	ble.n	80075c2 <__any_on+0x26>
 80075ac:	f011 011f 	ands.w	r1, r1, #31
 80075b0:	d007      	beq.n	80075c2 <__any_on+0x26>
 80075b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80075b6:	fa24 f001 	lsr.w	r0, r4, r1
 80075ba:	fa00 f101 	lsl.w	r1, r0, r1
 80075be:	428c      	cmp	r4, r1
 80075c0:	d10b      	bne.n	80075da <__any_on+0x3e>
 80075c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d803      	bhi.n	80075d2 <__any_on+0x36>
 80075ca:	2000      	movs	r0, #0
 80075cc:	bd10      	pop	{r4, pc}
 80075ce:	4603      	mov	r3, r0
 80075d0:	e7f7      	b.n	80075c2 <__any_on+0x26>
 80075d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075d6:	2900      	cmp	r1, #0
 80075d8:	d0f5      	beq.n	80075c6 <__any_on+0x2a>
 80075da:	2001      	movs	r0, #1
 80075dc:	e7f6      	b.n	80075cc <__any_on+0x30>

080075de <__ascii_wctomb>:
 80075de:	b149      	cbz	r1, 80075f4 <__ascii_wctomb+0x16>
 80075e0:	2aff      	cmp	r2, #255	; 0xff
 80075e2:	bf85      	ittet	hi
 80075e4:	238a      	movhi	r3, #138	; 0x8a
 80075e6:	6003      	strhi	r3, [r0, #0]
 80075e8:	700a      	strbls	r2, [r1, #0]
 80075ea:	f04f 30ff 	movhi.w	r0, #4294967295
 80075ee:	bf98      	it	ls
 80075f0:	2001      	movls	r0, #1
 80075f2:	4770      	bx	lr
 80075f4:	4608      	mov	r0, r1
 80075f6:	4770      	bx	lr

080075f8 <__sflush_r>:
 80075f8:	898a      	ldrh	r2, [r1, #12]
 80075fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fe:	4605      	mov	r5, r0
 8007600:	0710      	lsls	r0, r2, #28
 8007602:	460c      	mov	r4, r1
 8007604:	d458      	bmi.n	80076b8 <__sflush_r+0xc0>
 8007606:	684b      	ldr	r3, [r1, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	dc05      	bgt.n	8007618 <__sflush_r+0x20>
 800760c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	dc02      	bgt.n	8007618 <__sflush_r+0x20>
 8007612:	2000      	movs	r0, #0
 8007614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800761a:	2e00      	cmp	r6, #0
 800761c:	d0f9      	beq.n	8007612 <__sflush_r+0x1a>
 800761e:	2300      	movs	r3, #0
 8007620:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007624:	682f      	ldr	r7, [r5, #0]
 8007626:	6a21      	ldr	r1, [r4, #32]
 8007628:	602b      	str	r3, [r5, #0]
 800762a:	d032      	beq.n	8007692 <__sflush_r+0x9a>
 800762c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	075a      	lsls	r2, r3, #29
 8007632:	d505      	bpl.n	8007640 <__sflush_r+0x48>
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	1ac0      	subs	r0, r0, r3
 8007638:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800763a:	b10b      	cbz	r3, 8007640 <__sflush_r+0x48>
 800763c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800763e:	1ac0      	subs	r0, r0, r3
 8007640:	2300      	movs	r3, #0
 8007642:	4602      	mov	r2, r0
 8007644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007646:	6a21      	ldr	r1, [r4, #32]
 8007648:	4628      	mov	r0, r5
 800764a:	47b0      	blx	r6
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	d106      	bne.n	8007660 <__sflush_r+0x68>
 8007652:	6829      	ldr	r1, [r5, #0]
 8007654:	291d      	cmp	r1, #29
 8007656:	d82b      	bhi.n	80076b0 <__sflush_r+0xb8>
 8007658:	4a29      	ldr	r2, [pc, #164]	; (8007700 <__sflush_r+0x108>)
 800765a:	410a      	asrs	r2, r1
 800765c:	07d6      	lsls	r6, r2, #31
 800765e:	d427      	bmi.n	80076b0 <__sflush_r+0xb8>
 8007660:	2200      	movs	r2, #0
 8007662:	6062      	str	r2, [r4, #4]
 8007664:	04d9      	lsls	r1, r3, #19
 8007666:	6922      	ldr	r2, [r4, #16]
 8007668:	6022      	str	r2, [r4, #0]
 800766a:	d504      	bpl.n	8007676 <__sflush_r+0x7e>
 800766c:	1c42      	adds	r2, r0, #1
 800766e:	d101      	bne.n	8007674 <__sflush_r+0x7c>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b903      	cbnz	r3, 8007676 <__sflush_r+0x7e>
 8007674:	6560      	str	r0, [r4, #84]	; 0x54
 8007676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007678:	602f      	str	r7, [r5, #0]
 800767a:	2900      	cmp	r1, #0
 800767c:	d0c9      	beq.n	8007612 <__sflush_r+0x1a>
 800767e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007682:	4299      	cmp	r1, r3
 8007684:	d002      	beq.n	800768c <__sflush_r+0x94>
 8007686:	4628      	mov	r0, r5
 8007688:	f7fe fe9a 	bl	80063c0 <_free_r>
 800768c:	2000      	movs	r0, #0
 800768e:	6360      	str	r0, [r4, #52]	; 0x34
 8007690:	e7c0      	b.n	8007614 <__sflush_r+0x1c>
 8007692:	2301      	movs	r3, #1
 8007694:	4628      	mov	r0, r5
 8007696:	47b0      	blx	r6
 8007698:	1c41      	adds	r1, r0, #1
 800769a:	d1c8      	bne.n	800762e <__sflush_r+0x36>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0c5      	beq.n	800762e <__sflush_r+0x36>
 80076a2:	2b1d      	cmp	r3, #29
 80076a4:	d001      	beq.n	80076aa <__sflush_r+0xb2>
 80076a6:	2b16      	cmp	r3, #22
 80076a8:	d101      	bne.n	80076ae <__sflush_r+0xb6>
 80076aa:	602f      	str	r7, [r5, #0]
 80076ac:	e7b1      	b.n	8007612 <__sflush_r+0x1a>
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b4:	81a3      	strh	r3, [r4, #12]
 80076b6:	e7ad      	b.n	8007614 <__sflush_r+0x1c>
 80076b8:	690f      	ldr	r7, [r1, #16]
 80076ba:	2f00      	cmp	r7, #0
 80076bc:	d0a9      	beq.n	8007612 <__sflush_r+0x1a>
 80076be:	0793      	lsls	r3, r2, #30
 80076c0:	680e      	ldr	r6, [r1, #0]
 80076c2:	bf08      	it	eq
 80076c4:	694b      	ldreq	r3, [r1, #20]
 80076c6:	600f      	str	r7, [r1, #0]
 80076c8:	bf18      	it	ne
 80076ca:	2300      	movne	r3, #0
 80076cc:	eba6 0807 	sub.w	r8, r6, r7
 80076d0:	608b      	str	r3, [r1, #8]
 80076d2:	f1b8 0f00 	cmp.w	r8, #0
 80076d6:	dd9c      	ble.n	8007612 <__sflush_r+0x1a>
 80076d8:	6a21      	ldr	r1, [r4, #32]
 80076da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076dc:	4643      	mov	r3, r8
 80076de:	463a      	mov	r2, r7
 80076e0:	4628      	mov	r0, r5
 80076e2:	47b0      	blx	r6
 80076e4:	2800      	cmp	r0, #0
 80076e6:	dc06      	bgt.n	80076f6 <__sflush_r+0xfe>
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ee:	81a3      	strh	r3, [r4, #12]
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	e78e      	b.n	8007614 <__sflush_r+0x1c>
 80076f6:	4407      	add	r7, r0
 80076f8:	eba8 0800 	sub.w	r8, r8, r0
 80076fc:	e7e9      	b.n	80076d2 <__sflush_r+0xda>
 80076fe:	bf00      	nop
 8007700:	dfbffffe 	.word	0xdfbffffe

08007704 <_fflush_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	690b      	ldr	r3, [r1, #16]
 8007708:	4605      	mov	r5, r0
 800770a:	460c      	mov	r4, r1
 800770c:	b913      	cbnz	r3, 8007714 <_fflush_r+0x10>
 800770e:	2500      	movs	r5, #0
 8007710:	4628      	mov	r0, r5
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	b118      	cbz	r0, 800771e <_fflush_r+0x1a>
 8007716:	6a03      	ldr	r3, [r0, #32]
 8007718:	b90b      	cbnz	r3, 800771e <_fflush_r+0x1a>
 800771a:	f7fe fd31 	bl	8006180 <__sinit>
 800771e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f3      	beq.n	800770e <_fflush_r+0xa>
 8007726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007728:	07d0      	lsls	r0, r2, #31
 800772a:	d404      	bmi.n	8007736 <_fflush_r+0x32>
 800772c:	0599      	lsls	r1, r3, #22
 800772e:	d402      	bmi.n	8007736 <_fflush_r+0x32>
 8007730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007732:	f7fe fe2a 	bl	800638a <__retarget_lock_acquire_recursive>
 8007736:	4628      	mov	r0, r5
 8007738:	4621      	mov	r1, r4
 800773a:	f7ff ff5d 	bl	80075f8 <__sflush_r>
 800773e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007740:	07da      	lsls	r2, r3, #31
 8007742:	4605      	mov	r5, r0
 8007744:	d4e4      	bmi.n	8007710 <_fflush_r+0xc>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	059b      	lsls	r3, r3, #22
 800774a:	d4e1      	bmi.n	8007710 <_fflush_r+0xc>
 800774c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800774e:	f7fe fe1d 	bl	800638c <__retarget_lock_release_recursive>
 8007752:	e7dd      	b.n	8007710 <_fflush_r+0xc>

08007754 <_sbrk_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4d06      	ldr	r5, [pc, #24]	; (8007770 <_sbrk_r+0x1c>)
 8007758:	2300      	movs	r3, #0
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	602b      	str	r3, [r5, #0]
 8007760:	f7fa fe2e 	bl	80023c0 <_sbrk>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d102      	bne.n	800776e <_sbrk_r+0x1a>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	b103      	cbz	r3, 800776e <_sbrk_r+0x1a>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	200006b4 	.word	0x200006b4

08007774 <__assert_func>:
 8007774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007776:	4614      	mov	r4, r2
 8007778:	461a      	mov	r2, r3
 800777a:	4b09      	ldr	r3, [pc, #36]	; (80077a0 <__assert_func+0x2c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4605      	mov	r5, r0
 8007780:	68d8      	ldr	r0, [r3, #12]
 8007782:	b14c      	cbz	r4, 8007798 <__assert_func+0x24>
 8007784:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <__assert_func+0x30>)
 8007786:	9100      	str	r1, [sp, #0]
 8007788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800778c:	4906      	ldr	r1, [pc, #24]	; (80077a8 <__assert_func+0x34>)
 800778e:	462b      	mov	r3, r5
 8007790:	f000 f82c 	bl	80077ec <fiprintf>
 8007794:	f000 f83c 	bl	8007810 <abort>
 8007798:	4b04      	ldr	r3, [pc, #16]	; (80077ac <__assert_func+0x38>)
 800779a:	461c      	mov	r4, r3
 800779c:	e7f3      	b.n	8007786 <__assert_func+0x12>
 800779e:	bf00      	nop
 80077a0:	200001d0 	.word	0x200001d0
 80077a4:	0800843d 	.word	0x0800843d
 80077a8:	0800844a 	.word	0x0800844a
 80077ac:	08008478 	.word	0x08008478

080077b0 <_calloc_r>:
 80077b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077b2:	fba1 2402 	umull	r2, r4, r1, r2
 80077b6:	b94c      	cbnz	r4, 80077cc <_calloc_r+0x1c>
 80077b8:	4611      	mov	r1, r2
 80077ba:	9201      	str	r2, [sp, #4]
 80077bc:	f7ff f9c4 	bl	8006b48 <_malloc_r>
 80077c0:	9a01      	ldr	r2, [sp, #4]
 80077c2:	4605      	mov	r5, r0
 80077c4:	b930      	cbnz	r0, 80077d4 <_calloc_r+0x24>
 80077c6:	4628      	mov	r0, r5
 80077c8:	b003      	add	sp, #12
 80077ca:	bd30      	pop	{r4, r5, pc}
 80077cc:	220c      	movs	r2, #12
 80077ce:	6002      	str	r2, [r0, #0]
 80077d0:	2500      	movs	r5, #0
 80077d2:	e7f8      	b.n	80077c6 <_calloc_r+0x16>
 80077d4:	4621      	mov	r1, r4
 80077d6:	f7fe fd4c 	bl	8006272 <memset>
 80077da:	e7f4      	b.n	80077c6 <_calloc_r+0x16>

080077dc <malloc>:
 80077dc:	4b02      	ldr	r3, [pc, #8]	; (80077e8 <malloc+0xc>)
 80077de:	4601      	mov	r1, r0
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	f7ff b9b1 	b.w	8006b48 <_malloc_r>
 80077e6:	bf00      	nop
 80077e8:	200001d0 	.word	0x200001d0

080077ec <fiprintf>:
 80077ec:	b40e      	push	{r1, r2, r3}
 80077ee:	b503      	push	{r0, r1, lr}
 80077f0:	4601      	mov	r1, r0
 80077f2:	ab03      	add	r3, sp, #12
 80077f4:	4805      	ldr	r0, [pc, #20]	; (800780c <fiprintf+0x20>)
 80077f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077fa:	6800      	ldr	r0, [r0, #0]
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	f000 f837 	bl	8007870 <_vfiprintf_r>
 8007802:	b002      	add	sp, #8
 8007804:	f85d eb04 	ldr.w	lr, [sp], #4
 8007808:	b003      	add	sp, #12
 800780a:	4770      	bx	lr
 800780c:	200001d0 	.word	0x200001d0

08007810 <abort>:
 8007810:	b508      	push	{r3, lr}
 8007812:	2006      	movs	r0, #6
 8007814:	f000 fb94 	bl	8007f40 <raise>
 8007818:	2001      	movs	r0, #1
 800781a:	f7fa fd59 	bl	80022d0 <_exit>

0800781e <__sfputc_r>:
 800781e:	6893      	ldr	r3, [r2, #8]
 8007820:	3b01      	subs	r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	b410      	push	{r4}
 8007826:	6093      	str	r3, [r2, #8]
 8007828:	da08      	bge.n	800783c <__sfputc_r+0x1e>
 800782a:	6994      	ldr	r4, [r2, #24]
 800782c:	42a3      	cmp	r3, r4
 800782e:	db01      	blt.n	8007834 <__sfputc_r+0x16>
 8007830:	290a      	cmp	r1, #10
 8007832:	d103      	bne.n	800783c <__sfputc_r+0x1e>
 8007834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007838:	f000 bac4 	b.w	8007dc4 <__swbuf_r>
 800783c:	6813      	ldr	r3, [r2, #0]
 800783e:	1c58      	adds	r0, r3, #1
 8007840:	6010      	str	r0, [r2, #0]
 8007842:	7019      	strb	r1, [r3, #0]
 8007844:	4608      	mov	r0, r1
 8007846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800784a:	4770      	bx	lr

0800784c <__sfputs_r>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	4606      	mov	r6, r0
 8007850:	460f      	mov	r7, r1
 8007852:	4614      	mov	r4, r2
 8007854:	18d5      	adds	r5, r2, r3
 8007856:	42ac      	cmp	r4, r5
 8007858:	d101      	bne.n	800785e <__sfputs_r+0x12>
 800785a:	2000      	movs	r0, #0
 800785c:	e007      	b.n	800786e <__sfputs_r+0x22>
 800785e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007862:	463a      	mov	r2, r7
 8007864:	4630      	mov	r0, r6
 8007866:	f7ff ffda 	bl	800781e <__sfputc_r>
 800786a:	1c43      	adds	r3, r0, #1
 800786c:	d1f3      	bne.n	8007856 <__sfputs_r+0xa>
 800786e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007870 <_vfiprintf_r>:
 8007870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	460d      	mov	r5, r1
 8007876:	b09d      	sub	sp, #116	; 0x74
 8007878:	4614      	mov	r4, r2
 800787a:	4698      	mov	r8, r3
 800787c:	4606      	mov	r6, r0
 800787e:	b118      	cbz	r0, 8007888 <_vfiprintf_r+0x18>
 8007880:	6a03      	ldr	r3, [r0, #32]
 8007882:	b90b      	cbnz	r3, 8007888 <_vfiprintf_r+0x18>
 8007884:	f7fe fc7c 	bl	8006180 <__sinit>
 8007888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800788a:	07d9      	lsls	r1, r3, #31
 800788c:	d405      	bmi.n	800789a <_vfiprintf_r+0x2a>
 800788e:	89ab      	ldrh	r3, [r5, #12]
 8007890:	059a      	lsls	r2, r3, #22
 8007892:	d402      	bmi.n	800789a <_vfiprintf_r+0x2a>
 8007894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007896:	f7fe fd78 	bl	800638a <__retarget_lock_acquire_recursive>
 800789a:	89ab      	ldrh	r3, [r5, #12]
 800789c:	071b      	lsls	r3, r3, #28
 800789e:	d501      	bpl.n	80078a4 <_vfiprintf_r+0x34>
 80078a0:	692b      	ldr	r3, [r5, #16]
 80078a2:	b99b      	cbnz	r3, 80078cc <_vfiprintf_r+0x5c>
 80078a4:	4629      	mov	r1, r5
 80078a6:	4630      	mov	r0, r6
 80078a8:	f000 faca 	bl	8007e40 <__swsetup_r>
 80078ac:	b170      	cbz	r0, 80078cc <_vfiprintf_r+0x5c>
 80078ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078b0:	07dc      	lsls	r4, r3, #31
 80078b2:	d504      	bpl.n	80078be <_vfiprintf_r+0x4e>
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	b01d      	add	sp, #116	; 0x74
 80078ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078be:	89ab      	ldrh	r3, [r5, #12]
 80078c0:	0598      	lsls	r0, r3, #22
 80078c2:	d4f7      	bmi.n	80078b4 <_vfiprintf_r+0x44>
 80078c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078c6:	f7fe fd61 	bl	800638c <__retarget_lock_release_recursive>
 80078ca:	e7f3      	b.n	80078b4 <_vfiprintf_r+0x44>
 80078cc:	2300      	movs	r3, #0
 80078ce:	9309      	str	r3, [sp, #36]	; 0x24
 80078d0:	2320      	movs	r3, #32
 80078d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80078da:	2330      	movs	r3, #48	; 0x30
 80078dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007a90 <_vfiprintf_r+0x220>
 80078e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078e4:	f04f 0901 	mov.w	r9, #1
 80078e8:	4623      	mov	r3, r4
 80078ea:	469a      	mov	sl, r3
 80078ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078f0:	b10a      	cbz	r2, 80078f6 <_vfiprintf_r+0x86>
 80078f2:	2a25      	cmp	r2, #37	; 0x25
 80078f4:	d1f9      	bne.n	80078ea <_vfiprintf_r+0x7a>
 80078f6:	ebba 0b04 	subs.w	fp, sl, r4
 80078fa:	d00b      	beq.n	8007914 <_vfiprintf_r+0xa4>
 80078fc:	465b      	mov	r3, fp
 80078fe:	4622      	mov	r2, r4
 8007900:	4629      	mov	r1, r5
 8007902:	4630      	mov	r0, r6
 8007904:	f7ff ffa2 	bl	800784c <__sfputs_r>
 8007908:	3001      	adds	r0, #1
 800790a:	f000 80a9 	beq.w	8007a60 <_vfiprintf_r+0x1f0>
 800790e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007910:	445a      	add	r2, fp
 8007912:	9209      	str	r2, [sp, #36]	; 0x24
 8007914:	f89a 3000 	ldrb.w	r3, [sl]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 80a1 	beq.w	8007a60 <_vfiprintf_r+0x1f0>
 800791e:	2300      	movs	r3, #0
 8007920:	f04f 32ff 	mov.w	r2, #4294967295
 8007924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007928:	f10a 0a01 	add.w	sl, sl, #1
 800792c:	9304      	str	r3, [sp, #16]
 800792e:	9307      	str	r3, [sp, #28]
 8007930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007934:	931a      	str	r3, [sp, #104]	; 0x68
 8007936:	4654      	mov	r4, sl
 8007938:	2205      	movs	r2, #5
 800793a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800793e:	4854      	ldr	r0, [pc, #336]	; (8007a90 <_vfiprintf_r+0x220>)
 8007940:	f7f8 fc46 	bl	80001d0 <memchr>
 8007944:	9a04      	ldr	r2, [sp, #16]
 8007946:	b9d8      	cbnz	r0, 8007980 <_vfiprintf_r+0x110>
 8007948:	06d1      	lsls	r1, r2, #27
 800794a:	bf44      	itt	mi
 800794c:	2320      	movmi	r3, #32
 800794e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007952:	0713      	lsls	r3, r2, #28
 8007954:	bf44      	itt	mi
 8007956:	232b      	movmi	r3, #43	; 0x2b
 8007958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800795c:	f89a 3000 	ldrb.w	r3, [sl]
 8007960:	2b2a      	cmp	r3, #42	; 0x2a
 8007962:	d015      	beq.n	8007990 <_vfiprintf_r+0x120>
 8007964:	9a07      	ldr	r2, [sp, #28]
 8007966:	4654      	mov	r4, sl
 8007968:	2000      	movs	r0, #0
 800796a:	f04f 0c0a 	mov.w	ip, #10
 800796e:	4621      	mov	r1, r4
 8007970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007974:	3b30      	subs	r3, #48	; 0x30
 8007976:	2b09      	cmp	r3, #9
 8007978:	d94d      	bls.n	8007a16 <_vfiprintf_r+0x1a6>
 800797a:	b1b0      	cbz	r0, 80079aa <_vfiprintf_r+0x13a>
 800797c:	9207      	str	r2, [sp, #28]
 800797e:	e014      	b.n	80079aa <_vfiprintf_r+0x13a>
 8007980:	eba0 0308 	sub.w	r3, r0, r8
 8007984:	fa09 f303 	lsl.w	r3, r9, r3
 8007988:	4313      	orrs	r3, r2
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	46a2      	mov	sl, r4
 800798e:	e7d2      	b.n	8007936 <_vfiprintf_r+0xc6>
 8007990:	9b03      	ldr	r3, [sp, #12]
 8007992:	1d19      	adds	r1, r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	9103      	str	r1, [sp, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	bfbb      	ittet	lt
 800799c:	425b      	neglt	r3, r3
 800799e:	f042 0202 	orrlt.w	r2, r2, #2
 80079a2:	9307      	strge	r3, [sp, #28]
 80079a4:	9307      	strlt	r3, [sp, #28]
 80079a6:	bfb8      	it	lt
 80079a8:	9204      	strlt	r2, [sp, #16]
 80079aa:	7823      	ldrb	r3, [r4, #0]
 80079ac:	2b2e      	cmp	r3, #46	; 0x2e
 80079ae:	d10c      	bne.n	80079ca <_vfiprintf_r+0x15a>
 80079b0:	7863      	ldrb	r3, [r4, #1]
 80079b2:	2b2a      	cmp	r3, #42	; 0x2a
 80079b4:	d134      	bne.n	8007a20 <_vfiprintf_r+0x1b0>
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	1d1a      	adds	r2, r3, #4
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	9203      	str	r2, [sp, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bfb8      	it	lt
 80079c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80079c6:	3402      	adds	r4, #2
 80079c8:	9305      	str	r3, [sp, #20]
 80079ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007aa0 <_vfiprintf_r+0x230>
 80079ce:	7821      	ldrb	r1, [r4, #0]
 80079d0:	2203      	movs	r2, #3
 80079d2:	4650      	mov	r0, sl
 80079d4:	f7f8 fbfc 	bl	80001d0 <memchr>
 80079d8:	b138      	cbz	r0, 80079ea <_vfiprintf_r+0x17a>
 80079da:	9b04      	ldr	r3, [sp, #16]
 80079dc:	eba0 000a 	sub.w	r0, r0, sl
 80079e0:	2240      	movs	r2, #64	; 0x40
 80079e2:	4082      	lsls	r2, r0
 80079e4:	4313      	orrs	r3, r2
 80079e6:	3401      	adds	r4, #1
 80079e8:	9304      	str	r3, [sp, #16]
 80079ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ee:	4829      	ldr	r0, [pc, #164]	; (8007a94 <_vfiprintf_r+0x224>)
 80079f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079f4:	2206      	movs	r2, #6
 80079f6:	f7f8 fbeb 	bl	80001d0 <memchr>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d03f      	beq.n	8007a7e <_vfiprintf_r+0x20e>
 80079fe:	4b26      	ldr	r3, [pc, #152]	; (8007a98 <_vfiprintf_r+0x228>)
 8007a00:	bb1b      	cbnz	r3, 8007a4a <_vfiprintf_r+0x1da>
 8007a02:	9b03      	ldr	r3, [sp, #12]
 8007a04:	3307      	adds	r3, #7
 8007a06:	f023 0307 	bic.w	r3, r3, #7
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	9303      	str	r3, [sp, #12]
 8007a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a10:	443b      	add	r3, r7
 8007a12:	9309      	str	r3, [sp, #36]	; 0x24
 8007a14:	e768      	b.n	80078e8 <_vfiprintf_r+0x78>
 8007a16:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	e7a6      	b.n	800796e <_vfiprintf_r+0xfe>
 8007a20:	2300      	movs	r3, #0
 8007a22:	3401      	adds	r4, #1
 8007a24:	9305      	str	r3, [sp, #20]
 8007a26:	4619      	mov	r1, r3
 8007a28:	f04f 0c0a 	mov.w	ip, #10
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a32:	3a30      	subs	r2, #48	; 0x30
 8007a34:	2a09      	cmp	r2, #9
 8007a36:	d903      	bls.n	8007a40 <_vfiprintf_r+0x1d0>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0c6      	beq.n	80079ca <_vfiprintf_r+0x15a>
 8007a3c:	9105      	str	r1, [sp, #20]
 8007a3e:	e7c4      	b.n	80079ca <_vfiprintf_r+0x15a>
 8007a40:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a44:	4604      	mov	r4, r0
 8007a46:	2301      	movs	r3, #1
 8007a48:	e7f0      	b.n	8007a2c <_vfiprintf_r+0x1bc>
 8007a4a:	ab03      	add	r3, sp, #12
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	462a      	mov	r2, r5
 8007a50:	4b12      	ldr	r3, [pc, #72]	; (8007a9c <_vfiprintf_r+0x22c>)
 8007a52:	a904      	add	r1, sp, #16
 8007a54:	4630      	mov	r0, r6
 8007a56:	f3af 8000 	nop.w
 8007a5a:	4607      	mov	r7, r0
 8007a5c:	1c78      	adds	r0, r7, #1
 8007a5e:	d1d6      	bne.n	8007a0e <_vfiprintf_r+0x19e>
 8007a60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a62:	07d9      	lsls	r1, r3, #31
 8007a64:	d405      	bmi.n	8007a72 <_vfiprintf_r+0x202>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	059a      	lsls	r2, r3, #22
 8007a6a:	d402      	bmi.n	8007a72 <_vfiprintf_r+0x202>
 8007a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a6e:	f7fe fc8d 	bl	800638c <__retarget_lock_release_recursive>
 8007a72:	89ab      	ldrh	r3, [r5, #12]
 8007a74:	065b      	lsls	r3, r3, #25
 8007a76:	f53f af1d 	bmi.w	80078b4 <_vfiprintf_r+0x44>
 8007a7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a7c:	e71c      	b.n	80078b8 <_vfiprintf_r+0x48>
 8007a7e:	ab03      	add	r3, sp, #12
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	462a      	mov	r2, r5
 8007a84:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <_vfiprintf_r+0x22c>)
 8007a86:	a904      	add	r1, sp, #16
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f000 f879 	bl	8007b80 <_printf_i>
 8007a8e:	e7e4      	b.n	8007a5a <_vfiprintf_r+0x1ea>
 8007a90:	08008479 	.word	0x08008479
 8007a94:	08008483 	.word	0x08008483
 8007a98:	00000000 	.word	0x00000000
 8007a9c:	0800784d 	.word	0x0800784d
 8007aa0:	0800847f 	.word	0x0800847f

08007aa4 <_printf_common>:
 8007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	4616      	mov	r6, r2
 8007aaa:	4699      	mov	r9, r3
 8007aac:	688a      	ldr	r2, [r1, #8]
 8007aae:	690b      	ldr	r3, [r1, #16]
 8007ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	bfb8      	it	lt
 8007ab8:	4613      	movlt	r3, r2
 8007aba:	6033      	str	r3, [r6, #0]
 8007abc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ac0:	4607      	mov	r7, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	b10a      	cbz	r2, 8007aca <_printf_common+0x26>
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	6033      	str	r3, [r6, #0]
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	0699      	lsls	r1, r3, #26
 8007ace:	bf42      	ittt	mi
 8007ad0:	6833      	ldrmi	r3, [r6, #0]
 8007ad2:	3302      	addmi	r3, #2
 8007ad4:	6033      	strmi	r3, [r6, #0]
 8007ad6:	6825      	ldr	r5, [r4, #0]
 8007ad8:	f015 0506 	ands.w	r5, r5, #6
 8007adc:	d106      	bne.n	8007aec <_printf_common+0x48>
 8007ade:	f104 0a19 	add.w	sl, r4, #25
 8007ae2:	68e3      	ldr	r3, [r4, #12]
 8007ae4:	6832      	ldr	r2, [r6, #0]
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	42ab      	cmp	r3, r5
 8007aea:	dc26      	bgt.n	8007b3a <_printf_common+0x96>
 8007aec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007af0:	1e13      	subs	r3, r2, #0
 8007af2:	6822      	ldr	r2, [r4, #0]
 8007af4:	bf18      	it	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	0692      	lsls	r2, r2, #26
 8007afa:	d42b      	bmi.n	8007b54 <_printf_common+0xb0>
 8007afc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b00:	4649      	mov	r1, r9
 8007b02:	4638      	mov	r0, r7
 8007b04:	47c0      	blx	r8
 8007b06:	3001      	adds	r0, #1
 8007b08:	d01e      	beq.n	8007b48 <_printf_common+0xa4>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	6922      	ldr	r2, [r4, #16]
 8007b0e:	f003 0306 	and.w	r3, r3, #6
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	bf02      	ittt	eq
 8007b16:	68e5      	ldreq	r5, [r4, #12]
 8007b18:	6833      	ldreq	r3, [r6, #0]
 8007b1a:	1aed      	subeq	r5, r5, r3
 8007b1c:	68a3      	ldr	r3, [r4, #8]
 8007b1e:	bf0c      	ite	eq
 8007b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b24:	2500      	movne	r5, #0
 8007b26:	4293      	cmp	r3, r2
 8007b28:	bfc4      	itt	gt
 8007b2a:	1a9b      	subgt	r3, r3, r2
 8007b2c:	18ed      	addgt	r5, r5, r3
 8007b2e:	2600      	movs	r6, #0
 8007b30:	341a      	adds	r4, #26
 8007b32:	42b5      	cmp	r5, r6
 8007b34:	d11a      	bne.n	8007b6c <_printf_common+0xc8>
 8007b36:	2000      	movs	r0, #0
 8007b38:	e008      	b.n	8007b4c <_printf_common+0xa8>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4652      	mov	r2, sl
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4638      	mov	r0, r7
 8007b42:	47c0      	blx	r8
 8007b44:	3001      	adds	r0, #1
 8007b46:	d103      	bne.n	8007b50 <_printf_common+0xac>
 8007b48:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b50:	3501      	adds	r5, #1
 8007b52:	e7c6      	b.n	8007ae2 <_printf_common+0x3e>
 8007b54:	18e1      	adds	r1, r4, r3
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	2030      	movs	r0, #48	; 0x30
 8007b5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b5e:	4422      	add	r2, r4
 8007b60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b68:	3302      	adds	r3, #2
 8007b6a:	e7c7      	b.n	8007afc <_printf_common+0x58>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	4622      	mov	r2, r4
 8007b70:	4649      	mov	r1, r9
 8007b72:	4638      	mov	r0, r7
 8007b74:	47c0      	blx	r8
 8007b76:	3001      	adds	r0, #1
 8007b78:	d0e6      	beq.n	8007b48 <_printf_common+0xa4>
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	e7d9      	b.n	8007b32 <_printf_common+0x8e>
	...

08007b80 <_printf_i>:
 8007b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b84:	7e0f      	ldrb	r7, [r1, #24]
 8007b86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b88:	2f78      	cmp	r7, #120	; 0x78
 8007b8a:	4691      	mov	r9, r2
 8007b8c:	4680      	mov	r8, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	469a      	mov	sl, r3
 8007b92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b96:	d807      	bhi.n	8007ba8 <_printf_i+0x28>
 8007b98:	2f62      	cmp	r7, #98	; 0x62
 8007b9a:	d80a      	bhi.n	8007bb2 <_printf_i+0x32>
 8007b9c:	2f00      	cmp	r7, #0
 8007b9e:	f000 80d4 	beq.w	8007d4a <_printf_i+0x1ca>
 8007ba2:	2f58      	cmp	r7, #88	; 0x58
 8007ba4:	f000 80c0 	beq.w	8007d28 <_printf_i+0x1a8>
 8007ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bb0:	e03a      	b.n	8007c28 <_printf_i+0xa8>
 8007bb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bb6:	2b15      	cmp	r3, #21
 8007bb8:	d8f6      	bhi.n	8007ba8 <_printf_i+0x28>
 8007bba:	a101      	add	r1, pc, #4	; (adr r1, 8007bc0 <_printf_i+0x40>)
 8007bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bc0:	08007c19 	.word	0x08007c19
 8007bc4:	08007c2d 	.word	0x08007c2d
 8007bc8:	08007ba9 	.word	0x08007ba9
 8007bcc:	08007ba9 	.word	0x08007ba9
 8007bd0:	08007ba9 	.word	0x08007ba9
 8007bd4:	08007ba9 	.word	0x08007ba9
 8007bd8:	08007c2d 	.word	0x08007c2d
 8007bdc:	08007ba9 	.word	0x08007ba9
 8007be0:	08007ba9 	.word	0x08007ba9
 8007be4:	08007ba9 	.word	0x08007ba9
 8007be8:	08007ba9 	.word	0x08007ba9
 8007bec:	08007d31 	.word	0x08007d31
 8007bf0:	08007c59 	.word	0x08007c59
 8007bf4:	08007ceb 	.word	0x08007ceb
 8007bf8:	08007ba9 	.word	0x08007ba9
 8007bfc:	08007ba9 	.word	0x08007ba9
 8007c00:	08007d53 	.word	0x08007d53
 8007c04:	08007ba9 	.word	0x08007ba9
 8007c08:	08007c59 	.word	0x08007c59
 8007c0c:	08007ba9 	.word	0x08007ba9
 8007c10:	08007ba9 	.word	0x08007ba9
 8007c14:	08007cf3 	.word	0x08007cf3
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	1d1a      	adds	r2, r3, #4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	602a      	str	r2, [r5, #0]
 8007c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e09f      	b.n	8007d6c <_printf_i+0x1ec>
 8007c2c:	6820      	ldr	r0, [r4, #0]
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	0607      	lsls	r7, r0, #24
 8007c32:	f103 0104 	add.w	r1, r3, #4
 8007c36:	6029      	str	r1, [r5, #0]
 8007c38:	d501      	bpl.n	8007c3e <_printf_i+0xbe>
 8007c3a:	681e      	ldr	r6, [r3, #0]
 8007c3c:	e003      	b.n	8007c46 <_printf_i+0xc6>
 8007c3e:	0646      	lsls	r6, r0, #25
 8007c40:	d5fb      	bpl.n	8007c3a <_printf_i+0xba>
 8007c42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c46:	2e00      	cmp	r6, #0
 8007c48:	da03      	bge.n	8007c52 <_printf_i+0xd2>
 8007c4a:	232d      	movs	r3, #45	; 0x2d
 8007c4c:	4276      	negs	r6, r6
 8007c4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c52:	485a      	ldr	r0, [pc, #360]	; (8007dbc <_printf_i+0x23c>)
 8007c54:	230a      	movs	r3, #10
 8007c56:	e012      	b.n	8007c7e <_printf_i+0xfe>
 8007c58:	682b      	ldr	r3, [r5, #0]
 8007c5a:	6820      	ldr	r0, [r4, #0]
 8007c5c:	1d19      	adds	r1, r3, #4
 8007c5e:	6029      	str	r1, [r5, #0]
 8007c60:	0605      	lsls	r5, r0, #24
 8007c62:	d501      	bpl.n	8007c68 <_printf_i+0xe8>
 8007c64:	681e      	ldr	r6, [r3, #0]
 8007c66:	e002      	b.n	8007c6e <_printf_i+0xee>
 8007c68:	0641      	lsls	r1, r0, #25
 8007c6a:	d5fb      	bpl.n	8007c64 <_printf_i+0xe4>
 8007c6c:	881e      	ldrh	r6, [r3, #0]
 8007c6e:	4853      	ldr	r0, [pc, #332]	; (8007dbc <_printf_i+0x23c>)
 8007c70:	2f6f      	cmp	r7, #111	; 0x6f
 8007c72:	bf0c      	ite	eq
 8007c74:	2308      	moveq	r3, #8
 8007c76:	230a      	movne	r3, #10
 8007c78:	2100      	movs	r1, #0
 8007c7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c7e:	6865      	ldr	r5, [r4, #4]
 8007c80:	60a5      	str	r5, [r4, #8]
 8007c82:	2d00      	cmp	r5, #0
 8007c84:	bfa2      	ittt	ge
 8007c86:	6821      	ldrge	r1, [r4, #0]
 8007c88:	f021 0104 	bicge.w	r1, r1, #4
 8007c8c:	6021      	strge	r1, [r4, #0]
 8007c8e:	b90e      	cbnz	r6, 8007c94 <_printf_i+0x114>
 8007c90:	2d00      	cmp	r5, #0
 8007c92:	d04b      	beq.n	8007d2c <_printf_i+0x1ac>
 8007c94:	4615      	mov	r5, r2
 8007c96:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c9a:	fb03 6711 	mls	r7, r3, r1, r6
 8007c9e:	5dc7      	ldrb	r7, [r0, r7]
 8007ca0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ca4:	4637      	mov	r7, r6
 8007ca6:	42bb      	cmp	r3, r7
 8007ca8:	460e      	mov	r6, r1
 8007caa:	d9f4      	bls.n	8007c96 <_printf_i+0x116>
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d10b      	bne.n	8007cc8 <_printf_i+0x148>
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	07de      	lsls	r6, r3, #31
 8007cb4:	d508      	bpl.n	8007cc8 <_printf_i+0x148>
 8007cb6:	6923      	ldr	r3, [r4, #16]
 8007cb8:	6861      	ldr	r1, [r4, #4]
 8007cba:	4299      	cmp	r1, r3
 8007cbc:	bfde      	ittt	le
 8007cbe:	2330      	movle	r3, #48	; 0x30
 8007cc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cc8:	1b52      	subs	r2, r2, r5
 8007cca:	6122      	str	r2, [r4, #16]
 8007ccc:	f8cd a000 	str.w	sl, [sp]
 8007cd0:	464b      	mov	r3, r9
 8007cd2:	aa03      	add	r2, sp, #12
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	f7ff fee4 	bl	8007aa4 <_printf_common>
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d14a      	bne.n	8007d76 <_printf_i+0x1f6>
 8007ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce4:	b004      	add	sp, #16
 8007ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	f043 0320 	orr.w	r3, r3, #32
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	4833      	ldr	r0, [pc, #204]	; (8007dc0 <_printf_i+0x240>)
 8007cf4:	2778      	movs	r7, #120	; 0x78
 8007cf6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	6829      	ldr	r1, [r5, #0]
 8007cfe:	061f      	lsls	r7, r3, #24
 8007d00:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d04:	d402      	bmi.n	8007d0c <_printf_i+0x18c>
 8007d06:	065f      	lsls	r7, r3, #25
 8007d08:	bf48      	it	mi
 8007d0a:	b2b6      	uxthmi	r6, r6
 8007d0c:	07df      	lsls	r7, r3, #31
 8007d0e:	bf48      	it	mi
 8007d10:	f043 0320 	orrmi.w	r3, r3, #32
 8007d14:	6029      	str	r1, [r5, #0]
 8007d16:	bf48      	it	mi
 8007d18:	6023      	strmi	r3, [r4, #0]
 8007d1a:	b91e      	cbnz	r6, 8007d24 <_printf_i+0x1a4>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	f023 0320 	bic.w	r3, r3, #32
 8007d22:	6023      	str	r3, [r4, #0]
 8007d24:	2310      	movs	r3, #16
 8007d26:	e7a7      	b.n	8007c78 <_printf_i+0xf8>
 8007d28:	4824      	ldr	r0, [pc, #144]	; (8007dbc <_printf_i+0x23c>)
 8007d2a:	e7e4      	b.n	8007cf6 <_printf_i+0x176>
 8007d2c:	4615      	mov	r5, r2
 8007d2e:	e7bd      	b.n	8007cac <_printf_i+0x12c>
 8007d30:	682b      	ldr	r3, [r5, #0]
 8007d32:	6826      	ldr	r6, [r4, #0]
 8007d34:	6961      	ldr	r1, [r4, #20]
 8007d36:	1d18      	adds	r0, r3, #4
 8007d38:	6028      	str	r0, [r5, #0]
 8007d3a:	0635      	lsls	r5, r6, #24
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	d501      	bpl.n	8007d44 <_printf_i+0x1c4>
 8007d40:	6019      	str	r1, [r3, #0]
 8007d42:	e002      	b.n	8007d4a <_printf_i+0x1ca>
 8007d44:	0670      	lsls	r0, r6, #25
 8007d46:	d5fb      	bpl.n	8007d40 <_printf_i+0x1c0>
 8007d48:	8019      	strh	r1, [r3, #0]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	6123      	str	r3, [r4, #16]
 8007d4e:	4615      	mov	r5, r2
 8007d50:	e7bc      	b.n	8007ccc <_printf_i+0x14c>
 8007d52:	682b      	ldr	r3, [r5, #0]
 8007d54:	1d1a      	adds	r2, r3, #4
 8007d56:	602a      	str	r2, [r5, #0]
 8007d58:	681d      	ldr	r5, [r3, #0]
 8007d5a:	6862      	ldr	r2, [r4, #4]
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f7f8 fa36 	bl	80001d0 <memchr>
 8007d64:	b108      	cbz	r0, 8007d6a <_printf_i+0x1ea>
 8007d66:	1b40      	subs	r0, r0, r5
 8007d68:	6060      	str	r0, [r4, #4]
 8007d6a:	6863      	ldr	r3, [r4, #4]
 8007d6c:	6123      	str	r3, [r4, #16]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d74:	e7aa      	b.n	8007ccc <_printf_i+0x14c>
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	462a      	mov	r2, r5
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	4640      	mov	r0, r8
 8007d7e:	47d0      	blx	sl
 8007d80:	3001      	adds	r0, #1
 8007d82:	d0ad      	beq.n	8007ce0 <_printf_i+0x160>
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	079b      	lsls	r3, r3, #30
 8007d88:	d413      	bmi.n	8007db2 <_printf_i+0x232>
 8007d8a:	68e0      	ldr	r0, [r4, #12]
 8007d8c:	9b03      	ldr	r3, [sp, #12]
 8007d8e:	4298      	cmp	r0, r3
 8007d90:	bfb8      	it	lt
 8007d92:	4618      	movlt	r0, r3
 8007d94:	e7a6      	b.n	8007ce4 <_printf_i+0x164>
 8007d96:	2301      	movs	r3, #1
 8007d98:	4632      	mov	r2, r6
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	4640      	mov	r0, r8
 8007d9e:	47d0      	blx	sl
 8007da0:	3001      	adds	r0, #1
 8007da2:	d09d      	beq.n	8007ce0 <_printf_i+0x160>
 8007da4:	3501      	adds	r5, #1
 8007da6:	68e3      	ldr	r3, [r4, #12]
 8007da8:	9903      	ldr	r1, [sp, #12]
 8007daa:	1a5b      	subs	r3, r3, r1
 8007dac:	42ab      	cmp	r3, r5
 8007dae:	dcf2      	bgt.n	8007d96 <_printf_i+0x216>
 8007db0:	e7eb      	b.n	8007d8a <_printf_i+0x20a>
 8007db2:	2500      	movs	r5, #0
 8007db4:	f104 0619 	add.w	r6, r4, #25
 8007db8:	e7f5      	b.n	8007da6 <_printf_i+0x226>
 8007dba:	bf00      	nop
 8007dbc:	0800848a 	.word	0x0800848a
 8007dc0:	0800849b 	.word	0x0800849b

08007dc4 <__swbuf_r>:
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc6:	460e      	mov	r6, r1
 8007dc8:	4614      	mov	r4, r2
 8007dca:	4605      	mov	r5, r0
 8007dcc:	b118      	cbz	r0, 8007dd6 <__swbuf_r+0x12>
 8007dce:	6a03      	ldr	r3, [r0, #32]
 8007dd0:	b90b      	cbnz	r3, 8007dd6 <__swbuf_r+0x12>
 8007dd2:	f7fe f9d5 	bl	8006180 <__sinit>
 8007dd6:	69a3      	ldr	r3, [r4, #24]
 8007dd8:	60a3      	str	r3, [r4, #8]
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	071a      	lsls	r2, r3, #28
 8007dde:	d525      	bpl.n	8007e2c <__swbuf_r+0x68>
 8007de0:	6923      	ldr	r3, [r4, #16]
 8007de2:	b31b      	cbz	r3, 8007e2c <__swbuf_r+0x68>
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	6922      	ldr	r2, [r4, #16]
 8007de8:	1a98      	subs	r0, r3, r2
 8007dea:	6963      	ldr	r3, [r4, #20]
 8007dec:	b2f6      	uxtb	r6, r6
 8007dee:	4283      	cmp	r3, r0
 8007df0:	4637      	mov	r7, r6
 8007df2:	dc04      	bgt.n	8007dfe <__swbuf_r+0x3a>
 8007df4:	4621      	mov	r1, r4
 8007df6:	4628      	mov	r0, r5
 8007df8:	f7ff fc84 	bl	8007704 <_fflush_r>
 8007dfc:	b9e0      	cbnz	r0, 8007e38 <__swbuf_r+0x74>
 8007dfe:	68a3      	ldr	r3, [r4, #8]
 8007e00:	3b01      	subs	r3, #1
 8007e02:	60a3      	str	r3, [r4, #8]
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	6022      	str	r2, [r4, #0]
 8007e0a:	701e      	strb	r6, [r3, #0]
 8007e0c:	6962      	ldr	r2, [r4, #20]
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d004      	beq.n	8007e1e <__swbuf_r+0x5a>
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	07db      	lsls	r3, r3, #31
 8007e18:	d506      	bpl.n	8007e28 <__swbuf_r+0x64>
 8007e1a:	2e0a      	cmp	r6, #10
 8007e1c:	d104      	bne.n	8007e28 <__swbuf_r+0x64>
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4628      	mov	r0, r5
 8007e22:	f7ff fc6f 	bl	8007704 <_fflush_r>
 8007e26:	b938      	cbnz	r0, 8007e38 <__swbuf_r+0x74>
 8007e28:	4638      	mov	r0, r7
 8007e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 f806 	bl	8007e40 <__swsetup_r>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d0d5      	beq.n	8007de4 <__swbuf_r+0x20>
 8007e38:	f04f 37ff 	mov.w	r7, #4294967295
 8007e3c:	e7f4      	b.n	8007e28 <__swbuf_r+0x64>
	...

08007e40 <__swsetup_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4b2a      	ldr	r3, [pc, #168]	; (8007eec <__swsetup_r+0xac>)
 8007e44:	4605      	mov	r5, r0
 8007e46:	6818      	ldr	r0, [r3, #0]
 8007e48:	460c      	mov	r4, r1
 8007e4a:	b118      	cbz	r0, 8007e54 <__swsetup_r+0x14>
 8007e4c:	6a03      	ldr	r3, [r0, #32]
 8007e4e:	b90b      	cbnz	r3, 8007e54 <__swsetup_r+0x14>
 8007e50:	f7fe f996 	bl	8006180 <__sinit>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e5a:	0718      	lsls	r0, r3, #28
 8007e5c:	d422      	bmi.n	8007ea4 <__swsetup_r+0x64>
 8007e5e:	06d9      	lsls	r1, r3, #27
 8007e60:	d407      	bmi.n	8007e72 <__swsetup_r+0x32>
 8007e62:	2309      	movs	r3, #9
 8007e64:	602b      	str	r3, [r5, #0]
 8007e66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e6a:	81a3      	strh	r3, [r4, #12]
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	e034      	b.n	8007edc <__swsetup_r+0x9c>
 8007e72:	0758      	lsls	r0, r3, #29
 8007e74:	d512      	bpl.n	8007e9c <__swsetup_r+0x5c>
 8007e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e78:	b141      	cbz	r1, 8007e8c <__swsetup_r+0x4c>
 8007e7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e7e:	4299      	cmp	r1, r3
 8007e80:	d002      	beq.n	8007e88 <__swsetup_r+0x48>
 8007e82:	4628      	mov	r0, r5
 8007e84:	f7fe fa9c 	bl	80063c0 <_free_r>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	6363      	str	r3, [r4, #52]	; 0x34
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e92:	81a3      	strh	r3, [r4, #12]
 8007e94:	2300      	movs	r3, #0
 8007e96:	6063      	str	r3, [r4, #4]
 8007e98:	6923      	ldr	r3, [r4, #16]
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	f043 0308 	orr.w	r3, r3, #8
 8007ea2:	81a3      	strh	r3, [r4, #12]
 8007ea4:	6923      	ldr	r3, [r4, #16]
 8007ea6:	b94b      	cbnz	r3, 8007ebc <__swsetup_r+0x7c>
 8007ea8:	89a3      	ldrh	r3, [r4, #12]
 8007eaa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb2:	d003      	beq.n	8007ebc <__swsetup_r+0x7c>
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f000 f884 	bl	8007fc4 <__smakebuf_r>
 8007ebc:	89a0      	ldrh	r0, [r4, #12]
 8007ebe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ec2:	f010 0301 	ands.w	r3, r0, #1
 8007ec6:	d00a      	beq.n	8007ede <__swsetup_r+0x9e>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60a3      	str	r3, [r4, #8]
 8007ecc:	6963      	ldr	r3, [r4, #20]
 8007ece:	425b      	negs	r3, r3
 8007ed0:	61a3      	str	r3, [r4, #24]
 8007ed2:	6923      	ldr	r3, [r4, #16]
 8007ed4:	b943      	cbnz	r3, 8007ee8 <__swsetup_r+0xa8>
 8007ed6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007eda:	d1c4      	bne.n	8007e66 <__swsetup_r+0x26>
 8007edc:	bd38      	pop	{r3, r4, r5, pc}
 8007ede:	0781      	lsls	r1, r0, #30
 8007ee0:	bf58      	it	pl
 8007ee2:	6963      	ldrpl	r3, [r4, #20]
 8007ee4:	60a3      	str	r3, [r4, #8]
 8007ee6:	e7f4      	b.n	8007ed2 <__swsetup_r+0x92>
 8007ee8:	2000      	movs	r0, #0
 8007eea:	e7f7      	b.n	8007edc <__swsetup_r+0x9c>
 8007eec:	200001d0 	.word	0x200001d0

08007ef0 <_raise_r>:
 8007ef0:	291f      	cmp	r1, #31
 8007ef2:	b538      	push	{r3, r4, r5, lr}
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	460d      	mov	r5, r1
 8007ef8:	d904      	bls.n	8007f04 <_raise_r+0x14>
 8007efa:	2316      	movs	r3, #22
 8007efc:	6003      	str	r3, [r0, #0]
 8007efe:	f04f 30ff 	mov.w	r0, #4294967295
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007f06:	b112      	cbz	r2, 8007f0e <_raise_r+0x1e>
 8007f08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f0c:	b94b      	cbnz	r3, 8007f22 <_raise_r+0x32>
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 f830 	bl	8007f74 <_getpid_r>
 8007f14:	462a      	mov	r2, r5
 8007f16:	4601      	mov	r1, r0
 8007f18:	4620      	mov	r0, r4
 8007f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f1e:	f000 b817 	b.w	8007f50 <_kill_r>
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d00a      	beq.n	8007f3c <_raise_r+0x4c>
 8007f26:	1c59      	adds	r1, r3, #1
 8007f28:	d103      	bne.n	8007f32 <_raise_r+0x42>
 8007f2a:	2316      	movs	r3, #22
 8007f2c:	6003      	str	r3, [r0, #0]
 8007f2e:	2001      	movs	r0, #1
 8007f30:	e7e7      	b.n	8007f02 <_raise_r+0x12>
 8007f32:	2400      	movs	r4, #0
 8007f34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f38:	4628      	mov	r0, r5
 8007f3a:	4798      	blx	r3
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	e7e0      	b.n	8007f02 <_raise_r+0x12>

08007f40 <raise>:
 8007f40:	4b02      	ldr	r3, [pc, #8]	; (8007f4c <raise+0xc>)
 8007f42:	4601      	mov	r1, r0
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	f7ff bfd3 	b.w	8007ef0 <_raise_r>
 8007f4a:	bf00      	nop
 8007f4c:	200001d0 	.word	0x200001d0

08007f50 <_kill_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4d07      	ldr	r5, [pc, #28]	; (8007f70 <_kill_r+0x20>)
 8007f54:	2300      	movs	r3, #0
 8007f56:	4604      	mov	r4, r0
 8007f58:	4608      	mov	r0, r1
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	602b      	str	r3, [r5, #0]
 8007f5e:	f7fa f9a7 	bl	80022b0 <_kill>
 8007f62:	1c43      	adds	r3, r0, #1
 8007f64:	d102      	bne.n	8007f6c <_kill_r+0x1c>
 8007f66:	682b      	ldr	r3, [r5, #0]
 8007f68:	b103      	cbz	r3, 8007f6c <_kill_r+0x1c>
 8007f6a:	6023      	str	r3, [r4, #0]
 8007f6c:	bd38      	pop	{r3, r4, r5, pc}
 8007f6e:	bf00      	nop
 8007f70:	200006b4 	.word	0x200006b4

08007f74 <_getpid_r>:
 8007f74:	f7fa b994 	b.w	80022a0 <_getpid>

08007f78 <__swhatbuf_r>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f80:	2900      	cmp	r1, #0
 8007f82:	b096      	sub	sp, #88	; 0x58
 8007f84:	4615      	mov	r5, r2
 8007f86:	461e      	mov	r6, r3
 8007f88:	da0d      	bge.n	8007fa6 <__swhatbuf_r+0x2e>
 8007f8a:	89a3      	ldrh	r3, [r4, #12]
 8007f8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f90:	f04f 0100 	mov.w	r1, #0
 8007f94:	bf0c      	ite	eq
 8007f96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007f9a:	2340      	movne	r3, #64	; 0x40
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	6031      	str	r1, [r6, #0]
 8007fa0:	602b      	str	r3, [r5, #0]
 8007fa2:	b016      	add	sp, #88	; 0x58
 8007fa4:	bd70      	pop	{r4, r5, r6, pc}
 8007fa6:	466a      	mov	r2, sp
 8007fa8:	f000 f848 	bl	800803c <_fstat_r>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	dbec      	blt.n	8007f8a <__swhatbuf_r+0x12>
 8007fb0:	9901      	ldr	r1, [sp, #4]
 8007fb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007fb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007fba:	4259      	negs	r1, r3
 8007fbc:	4159      	adcs	r1, r3
 8007fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc2:	e7eb      	b.n	8007f9c <__swhatbuf_r+0x24>

08007fc4 <__smakebuf_r>:
 8007fc4:	898b      	ldrh	r3, [r1, #12]
 8007fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fc8:	079d      	lsls	r5, r3, #30
 8007fca:	4606      	mov	r6, r0
 8007fcc:	460c      	mov	r4, r1
 8007fce:	d507      	bpl.n	8007fe0 <__smakebuf_r+0x1c>
 8007fd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	6123      	str	r3, [r4, #16]
 8007fd8:	2301      	movs	r3, #1
 8007fda:	6163      	str	r3, [r4, #20]
 8007fdc:	b002      	add	sp, #8
 8007fde:	bd70      	pop	{r4, r5, r6, pc}
 8007fe0:	ab01      	add	r3, sp, #4
 8007fe2:	466a      	mov	r2, sp
 8007fe4:	f7ff ffc8 	bl	8007f78 <__swhatbuf_r>
 8007fe8:	9900      	ldr	r1, [sp, #0]
 8007fea:	4605      	mov	r5, r0
 8007fec:	4630      	mov	r0, r6
 8007fee:	f7fe fdab 	bl	8006b48 <_malloc_r>
 8007ff2:	b948      	cbnz	r0, 8008008 <__smakebuf_r+0x44>
 8007ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff8:	059a      	lsls	r2, r3, #22
 8007ffa:	d4ef      	bmi.n	8007fdc <__smakebuf_r+0x18>
 8007ffc:	f023 0303 	bic.w	r3, r3, #3
 8008000:	f043 0302 	orr.w	r3, r3, #2
 8008004:	81a3      	strh	r3, [r4, #12]
 8008006:	e7e3      	b.n	8007fd0 <__smakebuf_r+0xc>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	6020      	str	r0, [r4, #0]
 800800c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	9b00      	ldr	r3, [sp, #0]
 8008014:	6163      	str	r3, [r4, #20]
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	6120      	str	r0, [r4, #16]
 800801a:	b15b      	cbz	r3, 8008034 <__smakebuf_r+0x70>
 800801c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008020:	4630      	mov	r0, r6
 8008022:	f000 f81d 	bl	8008060 <_isatty_r>
 8008026:	b128      	cbz	r0, 8008034 <__smakebuf_r+0x70>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f023 0303 	bic.w	r3, r3, #3
 800802e:	f043 0301 	orr.w	r3, r3, #1
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	431d      	orrs	r5, r3
 8008038:	81a5      	strh	r5, [r4, #12]
 800803a:	e7cf      	b.n	8007fdc <__smakebuf_r+0x18>

0800803c <_fstat_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4d07      	ldr	r5, [pc, #28]	; (800805c <_fstat_r+0x20>)
 8008040:	2300      	movs	r3, #0
 8008042:	4604      	mov	r4, r0
 8008044:	4608      	mov	r0, r1
 8008046:	4611      	mov	r1, r2
 8008048:	602b      	str	r3, [r5, #0]
 800804a:	f7fa f990 	bl	800236e <_fstat>
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	d102      	bne.n	8008058 <_fstat_r+0x1c>
 8008052:	682b      	ldr	r3, [r5, #0]
 8008054:	b103      	cbz	r3, 8008058 <_fstat_r+0x1c>
 8008056:	6023      	str	r3, [r4, #0]
 8008058:	bd38      	pop	{r3, r4, r5, pc}
 800805a:	bf00      	nop
 800805c:	200006b4 	.word	0x200006b4

08008060 <_isatty_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4d06      	ldr	r5, [pc, #24]	; (800807c <_isatty_r+0x1c>)
 8008064:	2300      	movs	r3, #0
 8008066:	4604      	mov	r4, r0
 8008068:	4608      	mov	r0, r1
 800806a:	602b      	str	r3, [r5, #0]
 800806c:	f7fa f98f 	bl	800238e <_isatty>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_isatty_r+0x1a>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	b103      	cbz	r3, 800807a <_isatty_r+0x1a>
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	200006b4 	.word	0x200006b4

08008080 <_init>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	bf00      	nop
 8008084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008086:	bc08      	pop	{r3}
 8008088:	469e      	mov	lr, r3
 800808a:	4770      	bx	lr

0800808c <_fini>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	bf00      	nop
 8008090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008092:	bc08      	pop	{r3}
 8008094:	469e      	mov	lr, r3
 8008096:	4770      	bx	lr
